
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001394c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb0  08013ae0  08013ae0  00023ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014690  08014690  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014690  08014690  00024690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014698  08014698  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014698  08014698  00024698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801469c  0801469c  0002469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080146a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005580  200001e8  08014888  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005768  08014888  00035768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002913c  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f8  00000000  00000000  00059354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  0005dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0005fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027676  00000000  00000000  00061830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d64  00000000  00000000  00088ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9e11  00000000  00000000  000acc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009270  00000000  00000000  00196a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ac4 	.word	0x08013ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08013ac4 	.word	0x08013ac4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb4:	f043 0204 	orr.w	r2, r3, #4
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <MX_ADC1_Init+0x178>)
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <MX_ADC1_Init+0x17c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <MX_ADC1_Init+0x178>)
 800100e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b54      	ldr	r3, [pc, #336]	; (8001168 <MX_ADC1_Init+0x178>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <MX_ADC1_Init+0x178>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <MX_ADC1_Init+0x178>)
 8001022:	2201      	movs	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <MX_ADC1_Init+0x178>)
 8001028:	2208      	movs	r2, #8
 800102a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_ADC1_Init+0x178>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <MX_ADC1_Init+0x178>)
 8001034:	2200      	movs	r2, #0
 8001036:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_ADC1_Init+0x178>)
 800103a:	2205      	movs	r2, #5
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <MX_ADC1_Init+0x178>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_ADC1_Init+0x178>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_ADC1_Init+0x178>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_ADC1_Init+0x178>)
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_ADC1_Init+0x178>)
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_ADC1_Init+0x178>)
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_ADC1_Init+0x178>)
 800106a:	221c      	movs	r2, #28
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_ADC1_Init+0x178>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_ADC1_Init+0x178>)
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_ADC1_Init+0x178>)
 800107c:	2201      	movs	r2, #1
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4839      	ldr	r0, [pc, #228]	; (8001168 <MX_ADC1_Init+0x178>)
 8001082:	f006 fe21 	bl	8007cc8 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800108c:	f004 fb98 	bl	80057c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <MX_ADC1_Init+0x180>)
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001094:	2306      	movs	r3, #6
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001098:	2306      	movs	r3, #6
 800109a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109c:	237f      	movs	r3, #127	; 0x7f
 800109e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a0:	2304      	movs	r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ae:	f007 f97d 	bl	80083ac <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80010b8:	f004 fb82 	bl	80057c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_ADC1_Init+0x184>)
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c0:	230c      	movs	r3, #12
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ce:	f007 f96d 	bl	80083ac <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80010d8:	f004 fb72 	bl	80057c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_ADC1_Init+0x188>)
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2312      	movs	r3, #18
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ea:	f007 f95f 	bl	80083ac <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010f4:	f004 fb64 	bl	80057c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x180>)
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010fc:	2318      	movs	r3, #24
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <MX_ADC1_Init+0x178>)
 800110a:	f007 f94f 	bl	80083ac <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001114:	f004 fb54 	bl	80057c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_ADC1_Init+0x18c>)
 800111a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001122:	2305      	movs	r3, #5
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <MX_ADC1_Init+0x178>)
 800112c:	f007 f93e 	bl	80083ac <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001136:	f004 fb43 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <MX_ADC1_Init+0x190>)
 800113e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <MX_ADC1_Init+0x190>)
 8001144:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <MX_ADC1_Init+0x190>)
 800114a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <MX_ADC1_Init+0x190>)
 8001150:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <MX_ADC1_Init+0x190>)
 8001156:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <MX_ADC1_Init+0x190>)
 800115c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20005390 	.word	0x20005390
 800116c:	50040000 	.word	0x50040000
 8001170:	80000001 	.word	0x80000001
 8001174:	2a000400 	.word	0x2a000400
 8001178:	25b00200 	.word	0x25b00200
 800117c:	43210000 	.word	0x43210000
 8001180:	20000204 	.word	0x20000204

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a0      	sub	sp, #128	; 0x80
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	2254      	movs	r2, #84	; 0x54
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fd51 	bl	800fc4c <memset>
  if(adcHandle->Instance==ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	f040 8081 	bne.w	80012b8 <HAL_ADC_MspInit+0x134>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011bc:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b fafe 	bl	800c7c8 <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011d2:	f004 faf5 	bl	80057c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800121e:	2330      	movs	r3, #48	; 0x30
 8001220:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001222:	230b      	movs	r3, #11
 8001224:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f008 fb0e 	bl	8009854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001238:	2302      	movs	r3, #2
 800123a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123c:	230b      	movs	r3, #11
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001248:	4619      	mov	r1, r3
 800124a:	481f      	ldr	r0, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800124c:	f008 fb02 	bl	8009854 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001252:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x14c>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_ADC_MspInit+0x148>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_ADC_MspInit+0x148>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <HAL_ADC_MspInit+0x148>)
 800128e:	f008 f85d 	bl	800934c <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8001298:	f004 fa92 	bl	80057c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_ADC_MspInit+0x148>)
 80012a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_ADC_MspInit+0x148>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f008 f815 	bl	80092dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f008 f82e 	bl	8009314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3780      	adds	r7, #128	; 0x80
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	50040000 	.word	0x50040000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	200053f4 	.word	0x200053f4
 80012d0:	40020008 	.word	0x40020008

080012d4 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe6f 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d16c      	bne.n	80013ca <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <DF4IAH_ADC_Start_DMA+0x2a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e068      	b.n	80013d0 <DF4IAH_ADC_Start_DMA+0xfc>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f007 fcf8 	bl	8008cfc <ADC_Enable>
 800130c:	4603      	mov	r3, r0
 800130e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d154      	bne.n	80013c0 <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f023 0206 	bic.w	r2, r3, #6
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	659a      	str	r2, [r3, #88]	; 0x58
 8001342:	e002      	b.n	800134a <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <DF4IAH_ADC_Start_DMA+0x104>)
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <DF4IAH_ADC_Start_DMA+0x108>)
 8001358:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <DF4IAH_ADC_Start_DMA+0x10c>)
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	221c      	movs	r2, #28
 8001368:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0210 	orr.w	r2, r2, #16
 8001380:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4618      	mov	r0, r3
 8001398:	f007 ffd8 	bl	800934c <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3340      	adds	r3, #64	; 0x40
 80013a6:	4619      	mov	r1, r3
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f008 f886 	bl	80094bc <HAL_DMA_Start_IT>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fdf1 	bl	8000fa0 <LL_ADC_REG_StartConversion>
 80013be:	e006      	b.n	80013ce <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013c8:	e001      	b.n	80013ce <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
 80013cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08008e7f 	.word	0x08008e7f
 80013dc:	08008f57 	.word	0x08008f57
 80013e0:	08008f73 	.word	0x08008f73

080013e4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f007 fbbd 	bl	8008b6c <HAL_ADC_GetState>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d013      	beq.n	8001436 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2208      	movs	r2, #8
 8001414:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				gAdcVrefint_val = adc_dma_buf[0];
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_ADC_ConvCpltCallback+0x60>)
 800141c:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh10_val = adc_dma_buf[1];
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001420:	885a      	ldrh	r2, [r3, #2]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_ADC_ConvCpltCallback+0x64>)
 8001424:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh9_val = adc_dma_buf[2];
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001428:	889a      	ldrh	r2, [r3, #4]
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_ADC_ConvCpltCallback+0x68>)
 800142c:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh16_val = adc_dma_buf[4];
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001430:	891a      	ldrh	r2, [r3, #8]
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001434:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000234 	.word	0x20000234
 8001444:	20000222 	.word	0x20000222
 8001448:	2000021e 	.word	0x2000021e
 800144c:	2000021c 	.word	0x2000021c
 8001450:	20000220 	.word	0x20000220

08001454 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_ADC_ErrorCallback+0x20>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_ADC_ErrorCallback+0x20>)
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000240 	.word	0x20000240

08001478 <adc_init>:


void adc_init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 800147c:	217f      	movs	r1, #127	; 0x7f
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <adc_init+0x1c>)
 8001480:	f007 fdbe 	bl	8009000 <HAL_ADCEx_Calibration_Start>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <adc_init+0x16>
	{
		Error_Handler();
 800148a:	f004 f999 	bl	80057c0 <Error_Handler>
	}
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20005390 	.word	0x20005390

08001498 <adc_start>:

void adc_start(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <adc_start+0x30>)
 800149e:	f007 fb65 	bl	8008b6c <HAL_ADC_GetState>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00a      	beq.n	80014c2 <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80014ac:	2305      	movs	r3, #5
 80014ae:	461a      	mov	r2, r3
 80014b0:	4906      	ldr	r1, [pc, #24]	; (80014cc <adc_start+0x34>)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <adc_start+0x30>)
 80014b4:	f7ff ff0e 	bl	80012d4 <DF4IAH_ADC_Start_DMA>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <adc_start+0x2a>
			Error_Handler();
 80014be:	f004 f97f 	bl	80057c0 <Error_Handler>
		}
	}
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20005390 	.word	0x20005390
 80014cc:	20000234 	.word	0x20000234

080014d0 <adc_stop>:

void adc_stop(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <adc_stop+0x38>)
 80014d6:	f007 fb49 	bl	8008b6c <HAL_ADC_GetState>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <adc_stop+0x38>)
 80014e6:	f006 fd37 	bl	8007f58 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80014ea:	e00a      	b.n	8001502 <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <adc_stop+0x38>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d103      	bne.n	8001502 <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <adc_stop+0x38>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2208      	movs	r2, #8
 8001500:	601a      	str	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20005390 	.word	0x20005390

0800150c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_DMA_Init+0x48>)
 8001514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <MX_DMA_Init+0x48>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6493      	str	r3, [r2, #72]	; 0x48
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_DMA_Init+0x48>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	200b      	movs	r0, #11
 8001530:	f007 fed4 	bl	80092dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001534:	200b      	movs	r0, #11
 8001536:	f007 feed 	bl	8009314 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2011      	movs	r0, #17
 8001540:	f007 fecc 	bl	80092dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001544:	2011      	movs	r0, #17
 8001546:	f007 fee5 	bl	8009314 <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <MX_GPIO_Init+0x144>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a4a      	ldr	r2, [pc, #296]	; (800169c <MX_GPIO_Init+0x144>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <MX_GPIO_Init+0x144>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <MX_GPIO_Init+0x144>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a44      	ldr	r2, [pc, #272]	; (800169c <MX_GPIO_Init+0x144>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <MX_GPIO_Init+0x144>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <MX_GPIO_Init+0x144>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a3e      	ldr	r2, [pc, #248]	; (800169c <MX_GPIO_Init+0x144>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <MX_GPIO_Init+0x144>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <MX_GPIO_Init+0x144>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a38      	ldr	r2, [pc, #224]	; (800169c <MX_GPIO_Init+0x144>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <MX_GPIO_Init+0x144>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f008 fb88 	bl	8009cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_GPIO_Init+0x148>)
 80015e2:	f008 fb83 	bl	8009cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2120      	movs	r1, #32
 80015ea:	482d      	ldr	r0, [pc, #180]	; (80016a0 <MX_GPIO_Init+0x148>)
 80015ec:	f008 fb7e 	bl	8009cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80015f0:	2301      	movs	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <MX_GPIO_Init+0x14c>)
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4827      	ldr	r0, [pc, #156]	; (80016a0 <MX_GPIO_Init+0x148>)
 8001604:	f008 f926 	bl	8009854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001608:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f008 f918 	bl	8009854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f008 f908 	bl	8009854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001644:	2310      	movs	r3, #16
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_GPIO_Init+0x148>)
 800165c:	f008 f8fa 	bl	8009854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8001660:	2320      	movs	r3, #32
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001664:	2311      	movs	r3, #17
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_GPIO_Init+0x148>)
 8001678:	f008 f8ec 	bl	8009854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800167c:	2308      	movs	r3, #8
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_GPIO_Init+0x150>)
 8001690:	f008 f8e0 	bl	8009854 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	10110000 	.word	0x10110000
 80016a8:	48001c00 	.word	0x48001c00

080016ac <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2120      	movs	r1, #32
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <onewireMasterWr_bit+0x70>)
 80016bc:	f008 fb16 	bl	8009cec <HAL_GPIO_WritePin>
	uDelay(2U);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f002 fa8b 	bl	8003bdc <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80016c6:	201c      	movs	r0, #28
 80016c8:	f007 fe32 	bl	8009330 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* TimeSlot starts here */
	if (bit) {
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d010      	beq.n	80016f4 <onewireMasterWr_bit+0x48>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <onewireMasterWr_bit+0x70>)
 80016d8:	f008 fb08 	bl	8009cec <HAL_GPIO_WritePin>
		uDelay(2U);
 80016dc:	2002      	movs	r0, #2
 80016de:	f002 fa7d 	bl	8003bdc <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2120      	movs	r1, #32
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <onewireMasterWr_bit+0x70>)
 80016e8:	f008 fb00 	bl	8009cec <HAL_GPIO_WritePin>
		uDelay(88U);
 80016ec:	2058      	movs	r0, #88	; 0x58
 80016ee:	f002 fa75 	bl	8003bdc <uDelay>
 80016f2:	e007      	b.n	8001704 <onewireMasterWr_bit+0x58>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2120      	movs	r1, #32
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <onewireMasterWr_bit+0x70>)
 80016fa:	f008 faf7 	bl	8009cec <HAL_GPIO_WritePin>
		uDelay(90U);
 80016fe:	205a      	movs	r0, #90	; 0x5a
 8001700:	f002 fa6c 	bl	8003bdc <uDelay>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <onewireMasterWr_bit+0x70>)
 800170a:	f008 faef 	bl	8009cec <HAL_GPIO_WritePin>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800170e:	201c      	movs	r0, #28
 8001710:	f007 fe00 	bl	8009314 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48000400 	.word	0x48000400

08001720 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e00d      	b.n	800174c <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	fa42 f303 	asr.w	r3, r2, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffb3 	bl	80016ac <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3301      	adds	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d9ee      	bls.n	8001730 <onewireMasterWr_byte+0x10>
	}
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d124      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d11f      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11a      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3303      	adds	r3, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d110      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3305      	adds	r3, #5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10b      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3306      	adds	r3, #6
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3307      	adds	r3, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d010      	beq.n	80017de <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80017bc:	2308      	movs	r3, #8
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e009      	b.n	80017d6 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ffa8 	bl	8001720 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f2      	bne.n	80017c2 <onewireMasterWr_romCode+0x66>
 80017dc:	e000      	b.n	80017e0 <onewireMasterWr_romCode+0x84>
		return;
 80017de:	bf00      	nop
	}
}
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2120      	movs	r1, #32
 80017f2:	481a      	ldr	r0, [pc, #104]	; (800185c <onewireMasterRd_bit+0x74>)
 80017f4:	f008 fa7a 	bl	8009cec <HAL_GPIO_WritePin>
	uDelay(2U);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f002 f9ef 	bl	8003bdc <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80017fe:	201c      	movs	r0, #28
 8001800:	f007 fd96 	bl	8009330 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2120      	movs	r1, #32
 8001808:	4814      	ldr	r0, [pc, #80]	; (800185c <onewireMasterRd_bit+0x74>)
 800180a:	f008 fa6f 	bl	8009cec <HAL_GPIO_WritePin>
	uDelay(2U);
 800180e:	2002      	movs	r0, #2
 8001810:	f002 f9e4 	bl	8003bdc <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2120      	movs	r1, #32
 8001818:	4810      	ldr	r0, [pc, #64]	; (800185c <onewireMasterRd_bit+0x74>)
 800181a:	f008 fa67 	bl	8009cec <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13U);
 800181e:	200d      	movs	r0, #13
 8001820:	f002 f9dc 	bl	8003bdc <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8001824:	2120      	movs	r1, #32
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <onewireMasterRd_bit+0x74>)
 8001828:	f008 fa48 	bl	8009cbc <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]

	uDelay(75U);
 8001830:	204b      	movs	r0, #75	; 0x4b
 8001832:	f002 f9d3 	bl	8003bdc <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2120      	movs	r1, #32
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <onewireMasterRd_bit+0x74>)
 800183c:	f008 fa56 	bl	8009cec <HAL_GPIO_WritePin>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001840:	201c      	movs	r0, #28
 8001842:	f007 fd67 	bl	8009314 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif

	return (pinstate == GPIO_PIN_SET);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b01      	cmp	r3, #1
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48000400 	.word	0x48000400

08001860 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

	/* Parameter check */
	if (bitCnt > 32) {
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b20      	cmp	r3, #32
 8001872:	d902      	bls.n	800187a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e016      	b.n	80018a8 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800187a:	2300      	movs	r3, #0
 800187c:	72fb      	strb	r3, [r7, #11]
 800187e:	e00e      	b.n	800189e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001880:	f7ff ffb2 	bl	80017e8 <onewireMasterRd_bit>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	3301      	adds	r3, #1
 800189c:	72fb      	strb	r3, [r7, #11]
 800189e:	7afa      	ldrb	r2, [r7, #11]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3ec      	bcc.n	8001880 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2120      	movs	r1, #32
 80018ba:	4816      	ldr	r0, [pc, #88]	; (8001914 <onewireMasterCheck_presence+0x64>)
 80018bc:	f008 fa16 	bl	8009cec <HAL_GPIO_WritePin>
	uDelay(2000U);
 80018c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018c4:	f002 f98a 	bl	8003bdc <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80018c8:	201c      	movs	r0, #28
 80018ca:	f007 fd31 	bl	8009330 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2120      	movs	r1, #32
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <onewireMasterCheck_presence+0x64>)
 80018d4:	f008 fa0a 	bl	8009cec <HAL_GPIO_WritePin>
	uDelay(550U);
 80018d8:	f240 2026 	movw	r0, #550	; 0x226
 80018dc:	f002 f97e 	bl	8003bdc <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2120      	movs	r1, #32
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <onewireMasterCheck_presence+0x64>)
 80018e6:	f008 fa01 	bl	8009cec <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120U);
 80018ea:	2078      	movs	r0, #120	; 0x78
 80018ec:	f002 f976 	bl	8003bdc <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80018f0:	2120      	movs	r1, #32
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <onewireMasterCheck_presence+0x64>)
 80018f4:	f008 f9e2 	bl	8009cbc <HAL_GPIO_ReadPin>
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]

	uDelay(550U - 120U);
 80018fc:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8001900:	f002 f96c 	bl	8003bdc <uDelay>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001904:	201c      	movs	r0, #28
 8001906:	f007 fd05 	bl	8009314 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif

	return presence;
 800190a:	79fb      	ldrb	r3, [r7, #7]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	48000400 	.word	0x48000400

08001918 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	460b      	mov	r3, r1
 8001926:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 8001948:	e0d0      	b.n	8001aec <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 800194a:	f7ff ffb1 	bl	80018b0 <onewireMasterCheck_presence>
 800194e:	4603      	mov	r3, r0
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 8001954:	2300      	movs	r3, #0
 8001956:	e0d3      	b.n	8001b00 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8001958:	7efb      	ldrb	r3, [r7, #27]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80cc 	bne.w	8001af8 <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 8001966:	20ec      	movs	r0, #236	; 0xec
 8001968:	f7ff feda 	bl	8001720 <onewireMasterWr_byte>
 800196c:	e002      	b.n	8001974 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 800196e:	20f0      	movs	r0, #240	; 0xf0
 8001970:	f7ff fed6 	bl	8001720 <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001978:	e092      	b.n	8001aa0 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 800197a:	7fbb      	ldrb	r3, [r7, #30]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f107 0220 	add.w	r2, r7, #32
 8001984:	4413      	add	r3, r2
 8001986:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800198a:	461a      	mov	r2, r3
 800198c:	7fbb      	ldrb	r3, [r7, #30]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	fa42 f303 	asr.w	r3, r2, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 800199e:	f7ff ff23 	bl	80017e8 <onewireMasterRd_bit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 80019a6:	f7ff ff1f 	bl	80017e8 <onewireMasterRd_bit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 80019ae:	7c7b      	ldrb	r3, [r7, #17]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <onewireMasterTree_search+0xa8>
 80019b4:	7c3b      	ldrb	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	777b      	strb	r3, [r7, #29]
 80019be:	e030      	b.n	8001a22 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 80019c0:	7c7b      	ldrb	r3, [r7, #17]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <onewireMasterTree_search+0xba>
 80019c6:	7c3b      	ldrb	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	777b      	strb	r3, [r7, #29]
 80019d0:	e027      	b.n	8001a22 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80019d2:	7c7b      	ldrb	r3, [r7, #17]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11c      	bne.n	8001a12 <onewireMasterTree_search+0xfa>
 80019d8:	7c3b      	ldrb	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d119      	bne.n	8001a12 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80019de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019e2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dd02      	ble.n	80019f0 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80019ea:	7cbb      	ldrb	r3, [r7, #18]
 80019ec:	777b      	strb	r3, [r7, #29]
 80019ee:	e00a      	b.n	8001a06 <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80019f0:	7f3b      	ldrb	r3, [r7, #28]
 80019f2:	7fba      	ldrb	r2, [r7, #30]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d104      	bne.n	8001a02 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80019f8:	2301      	movs	r3, #1
 80019fa:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80019fc:	23ff      	movs	r3, #255	; 0xff
 80019fe:	773b      	strb	r3, [r7, #28]
 8001a00:	e001      	b.n	8001a06 <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 8001a06:	7f7b      	ldrb	r3, [r7, #29]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 8001a0c:	7fbb      	ldrb	r3, [r7, #30]
 8001a0e:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 8001a10:	e007      	b.n	8001a22 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 8001a12:	7c7b      	ldrb	r3, [r7, #17]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <onewireMasterTree_search+0x10a>
 8001a18:	7c3b      	ldrb	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e06e      	b.n	8001b00 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 8001a22:	7f7b      	ldrb	r3, [r7, #29]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d019      	beq.n	8001a5c <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001a28:	7fbb      	ldrb	r3, [r7, #30]
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f107 0220 	add.w	r2, r7, #32
 8001a32:	4413      	add	r3, r2
 8001a34:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a38:	7fbb      	ldrb	r3, [r7, #30]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	7fb9      	ldrb	r1, [r7, #30]
 8001a48:	08c9      	lsrs	r1, r1, #3
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	440b      	add	r3, r1
 8001a56:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001a5a:	e01a      	b.n	8001a92 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001a5c:	7fbb      	ldrb	r3, [r7, #30]
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f107 0220 	add.w	r2, r7, #32
 8001a66:	4413      	add	r3, r2
 8001a68:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a6c:	7fbb      	ldrb	r3, [r7, #30]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	7fb9      	ldrb	r1, [r7, #30]
 8001a80:	08c9      	lsrs	r1, r1, #3
 8001a82:	b2c9      	uxtb	r1, r1
 8001a84:	4013      	ands	r3, r2
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a92:	7f7b      	ldrb	r3, [r7, #29]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe09 	bl	80016ac <onewireMasterWr_bit>

			++bitIdxNow;
 8001a9a:	7fbb      	ldrb	r3, [r7, #30]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001aa0:	7fbb      	ldrb	r3, [r7, #30]
 8001aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa4:	f67f af69 	bls.w	800197a <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001aa8:	7f3b      	ldrb	r3, [r7, #28]
 8001aaa:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001aac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d101      	bne.n	8001aba <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00f      	b.n	8001ae0 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001ac0:	7ffb      	ldrb	r3, [r7, #31]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	f107 0108 	add.w	r1, r7, #8
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	440b      	add	r3, r1
 8001ad0:	7819      	ldrb	r1, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	ddec      	ble.n	8001ac0 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001aec:	7ffa      	ldrb	r2, [r7, #31]
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f4ff af2a 	bcc.w	800194a <onewireMasterTree_search+0x32>
 8001af6:	e000      	b.n	8001afa <onewireMasterTree_search+0x1e2>
			break;
 8001af8:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001afa:	f7ff fed9 	bl	80018b0 <onewireMasterCheck_presence>

	return devicesCnt;
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	460b      	mov	r3, r1
 8001b16:	71bb      	strb	r3, [r7, #6]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d124      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11f      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3302      	adds	r3, #2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11a      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3304      	adds	r3, #4
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d110      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3306      	adds	r3, #6
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d106      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3307      	adds	r3, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001b6e:	231f      	movs	r3, #31
 8001b70:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b0b      	cmp	r3, #11
 8001b76:	d00a      	beq.n	8001b8e <onewireDS18B20_setAdcWidth+0x86>
 8001b78:	2b0b      	cmp	r3, #11
 8001b7a:	dc0d      	bgt.n	8001b98 <onewireDS18B20_setAdcWidth+0x90>
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d010      	beq.n	8001ba2 <onewireDS18B20_setAdcWidth+0x9a>
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	d109      	bne.n	8001b98 <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b8c:	e00a      	b.n	8001ba4 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b94:	73fb      	strb	r3, [r7, #15]
		break;
 8001b96:	e005      	b.n	8001ba4 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ba0:	e000      	b.n	8001ba4 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001ba2:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001ba4:	f7ff fe84 	bl	80018b0 <onewireMasterCheck_presence>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11b      	bne.n	8001be6 <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001bb4:	20cc      	movs	r0, #204	; 0xcc
 8001bb6:	f7ff fdb3 	bl	8001720 <onewireMasterWr_byte>
 8001bba:	e005      	b.n	8001bc8 <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001bbc:	2055      	movs	r0, #85	; 0x55
 8001bbe:	f7ff fdaf 	bl	8001720 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f7ff fdca 	bl	800175c <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001bc8:	204e      	movs	r0, #78	; 0x4e
 8001bca:	f7ff fda9 	bl	8001720 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fda5 	bl	8001720 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001bd6:	797b      	ldrb	r3, [r7, #5]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fda1 	bl	8001720 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fd9d 	bl	8001720 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001be6:	f7ff fe63 	bl	80018b0 <onewireMasterCheck_presence>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d124      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3301      	adds	r3, #1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11f      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11a      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3303      	adds	r3, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d110      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3305      	adds	r3, #5
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3306      	adds	r3, #6
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3307      	adds	r3, #7
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001c4c:	f7ff fe30 	bl	80018b0 <onewireMasterCheck_presence>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11d      	bne.n	8001c92 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c5c:	20cc      	movs	r0, #204	; 0xcc
 8001c5e:	f7ff fd5f 	bl	8001720 <onewireMasterWr_byte>
 8001c62:	e005      	b.n	8001c70 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c64:	2055      	movs	r0, #85	; 0x55
 8001c66:	f7ff fd5b 	bl	8001720 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fd76 	bl	800175c <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001c70:	2044      	movs	r0, #68	; 0x44
 8001c72:	f7ff fd55 	bl	8001720 <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001c7a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c7e:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c86:	f005 fddb 	bl	8007840 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	e000      	b.n	8001c94 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d124      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d11f      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11a      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d115      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d110      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3305      	adds	r3, #5
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3307      	adds	r3, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001cf8:	f005 fda2 	bl	8007840 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d205      	bcs.n	8001d12 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 fda3 	bl	8007858 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001d12:	f7ff fdcd 	bl	80018b0 <onewireMasterCheck_presence>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d116      	bne.n	8001d4a <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001d22:	20cc      	movs	r0, #204	; 0xcc
 8001d24:	f7ff fcfc 	bl	8001720 <onewireMasterWr_byte>
 8001d28:	e005      	b.n	8001d36 <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001d2a:	2055      	movs	r0, #85	; 0x55
 8001d2c:	f7ff fcf8 	bl	8001720 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f7ff fd13 	bl	800175c <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001d36:	20be      	movs	r0, #190	; 0xbe
 8001d38:	f7ff fcf2 	bl	8001720 <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f7ff fd8f 	bl	8001860 <onewireMasterRd_field>
 8001d42:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	e000      	b.n	8001d4c <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_I2C1_Init+0x78>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <MX_I2C1_Init+0x7c>)
 8001d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8e:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001d90:	f007 ffde 	bl	8009d50 <HAL_I2C_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d9a:	f003 fd11 	bl	80057c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001da2:	f009 fdae 	bl	800b902 <HAL_I2CEx_ConfigAnalogFilter>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dac:	f003 fd08 	bl	80057c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_I2C1_Init+0x74>)
 8001db4:	f009 fdf0 	bl	800b998 <HAL_I2CEx_ConfigDigitalFilter>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dbe:	f003 fcff 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000544c 	.word	0x2000544c
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	00403e5a 	.word	0x00403e5a

08001dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09e      	sub	sp, #120	; 0x78
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2254      	movs	r2, #84	; 0x54
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f00d ff29 	bl	800fc4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d146      	bne.n	8001e92 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00a fcd8 	bl	800c7c8 <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1e:	f003 fccf 	bl	80057c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e46:	2302      	movs	r3, #2
 8001e48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e52:	4619      	mov	r1, r3
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e56:	f007 fcfd 	bl	8009854 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e64:	6593      	str	r3, [r2, #88]	; 0x58
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	201f      	movs	r0, #31
 8001e78:	f007 fa30 	bl	80092dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e7c:	201f      	movs	r0, #31
 8001e7e:	f007 fa49 	bl	8009314 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2020      	movs	r0, #32
 8001e88:	f007 fa28 	bl	80092dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	f007 fa41 	bl	8009314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e92:	bf00      	nop
 8001e94:	3778      	adds	r7, #120	; 0x78
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73bb      	strb	r3, [r7, #14]
 8001ebe:	e03e      	b.n	8001f3e <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b299      	uxth	r1, r3
 8001ec8:	2364      	movs	r3, #100	; 0x64
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4820      	ldr	r0, [pc, #128]	; (8001f50 <i2cBusGetDeviceList+0xa8>)
 8001ece:	f008 f83f 	bl	8009f50 <HAL_I2C_IsDeviceReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d12c      	bne.n	8001f36 <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	2b60      	cmp	r3, #96	; 0x60
 8001ee6:	d01f      	beq.n	8001f28 <i2cBusGetDeviceList+0x80>
 8001ee8:	2b60      	cmp	r3, #96	; 0x60
 8001eea:	dc25      	bgt.n	8001f38 <i2cBusGetDeviceList+0x90>
 8001eec:	2b2f      	cmp	r3, #47	; 0x2f
 8001eee:	d014      	beq.n	8001f1a <i2cBusGetDeviceList+0x72>
 8001ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ef2:	dc21      	bgt.n	8001f38 <i2cBusGetDeviceList+0x90>
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d002      	beq.n	8001efe <i2cBusGetDeviceList+0x56>
 8001ef8:	2b22      	cmp	r3, #34	; 0x22
 8001efa:	d007      	beq.n	8001f0c <i2cBusGetDeviceList+0x64>
 8001efc:	e01c      	b.n	8001f38 <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
				break;
 8001f0a:	e015      	b.n	8001f38 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
				break;
 8001f18:	e00e      	b.n	8001f38 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
				break;
 8001f26:	e007      	b.n	8001f38 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
				break;
 8001f34:	e000      	b.n	8001f38 <i2cBusGetDeviceList+0x90>
			}
		}
 8001f36:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	73bb      	strb	r3, [r7, #14]
 8001f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dabc      	bge.n	8001ec0 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000544c 	.word	0x2000544c

08001f54 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	71bb      	strb	r3, [r7, #6]
 8001f62:	4613      	mov	r3, r2
 8001f64:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001f66:	2300      	movs	r3, #0
 8001f68:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f78:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	031b      	lsls	r3, r3, #12
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f8c:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	f107 0208 	add.w	r2, r7, #8
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fb8:	f007 ff5a 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <i2cDeviceDacMcp4725_set+0x76>
		return 1U;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fca:	bf00      	nop
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fce:	f008 fab2 	bl	800a536 <HAL_I2C_GetState>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d1f9      	bne.n	8001fcc <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fda:	f008 faba 	bl	800a552 <HAL_I2C_GetError>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d101      	bne.n	8001fe8 <i2cDeviceDacMcp4725_set+0x94>
		return 2U;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e000      	b.n	8001fea <i2cDeviceDacMcp4725_set+0x96>
	}
	return 0U;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000544c 	.word	0x2000544c

08001ff8 <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	460a      	mov	r2, r1
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	4613      	mov	r3, r2
 8002006:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02c      	beq.n	8002068 <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800200e:	2312      	movs	r3, #18
 8002010:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8002016:	230c      	movs	r3, #12
 8002018:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800201a:	f107 020c 	add.w	r2, r7, #12
 800201e:	2303      	movs	r3, #3
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4831      	ldr	r0, [pc, #196]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002024:	f007 ff24 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1U;
 8002032:	2301      	movs	r3, #1
 8002034:	e053      	b.n	80020de <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002036:	bf00      	nop
 8002038:	482b      	ldr	r0, [pc, #172]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800203a:	f008 fa7c 	bl	800a536 <HAL_I2C_GetState>
 800203e:	4603      	mov	r3, r0
 8002040:	2b20      	cmp	r3, #32
 8002042:	d1f9      	bne.n	8002038 <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002044:	2313      	movs	r3, #19
 8002046:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8002048:	230d      	movs	r3, #13
 800204a:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 800204c:	f107 020c 	add.w	r2, r7, #12
 8002050:	2302      	movs	r3, #2
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	4824      	ldr	r0, [pc, #144]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002056:	f007 ff0b 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002064:	2301      	movs	r3, #1
 8002066:	e03a      	b.n	80020de <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002068:	2312      	movs	r3, #18
 800206a:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002070:	2309      	movs	r3, #9
 8002072:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002074:	f107 020c 	add.w	r2, r7, #12
 8002078:	2303      	movs	r3, #3
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	481a      	ldr	r0, [pc, #104]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800207e:	f007 fef7 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 8002082:	4603      	mov	r3, r0
 8002084:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	e026      	b.n	80020de <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002090:	bf00      	nop
 8002092:	4815      	ldr	r0, [pc, #84]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002094:	f008 fa4f 	bl	800a536 <HAL_I2C_GetState>
 8002098:	4603      	mov	r3, r0
 800209a:	2b20      	cmp	r3, #32
 800209c:	d1f9      	bne.n	8002092 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1UL);
 800209e:	2001      	movs	r0, #1
 80020a0:	f005 fbda 	bl	8007858 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 80020a4:	2313      	movs	r3, #19
 80020a6:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80020a8:	2308      	movs	r3, #8
 80020aa:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80020ac:	f107 020c 	add.w	r2, r7, #12
 80020b0:	2302      	movs	r3, #2
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020b6:	f007 fedb 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1U;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00a      	b.n	80020de <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020c8:	bf00      	nop
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020cc:	f008 fa33 	bl	800a536 <HAL_I2C_GetState>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d1f9      	bne.n	80020ca <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1UL);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f005 fbbe 	bl	8007858 <HAL_Delay>
	return 0U;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000544c 	.word	0x2000544c

080020ec <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 80020f0:	2100      	movs	r1, #0
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff ff80 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}

080020fe <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	460a      	mov	r2, r1
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	4613      	mov	r3, r2
 800210c:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	b2da      	uxtb	r2, r3
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	4313      	orrs	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800212e:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5f 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 8002150:	e00f      	b.n	8002172 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff4b 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1U;
 8002168:	2301      	movs	r3, #1
 800216a:	e006      	b.n	800217a <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	3b01      	subs	r3, #1
 8002170:	70fb      	strb	r3, [r7, #3]
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ec      	bne.n	8002152 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0U;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800218a:	2300      	movs	r3, #0
 800218c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 800218e:	23ff      	movs	r3, #255	; 0xff
 8002190:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002192:	23f0      	movs	r3, #240	; 0xf0
 8002194:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002196:	463a      	mov	r2, r7
 8002198:	2303      	movs	r3, #3
 800219a:	2140      	movs	r1, #64	; 0x40
 800219c:	4854      	ldr	r0, [pc, #336]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800219e:	f007 fe67 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021a6:	79bb      	ldrb	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1U;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e09a      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021b0:	bf00      	nop
 80021b2:	484f      	ldr	r0, [pc, #316]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021b4:	f008 f9bf 	bl	800a536 <HAL_I2C_GetState>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d1f9      	bne.n	80021b2 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 80021be:	230c      	movs	r3, #12
 80021c0:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 80021c2:	23ff      	movs	r3, #255	; 0xff
 80021c4:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 80021c6:	23f0      	movs	r3, #240	; 0xf0
 80021c8:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021ca:	463a      	mov	r2, r7
 80021cc:	2303      	movs	r3, #3
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	4847      	ldr	r0, [pc, #284]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021d2:	f007 fe4d 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021da:	79bb      	ldrb	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1U;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e080      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021e4:	bf00      	nop
 80021e6:	4842      	ldr	r0, [pc, #264]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021e8:	f008 f9a5 	bl	800a536 <HAL_I2C_GetState>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d1f9      	bne.n	80021e6 <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 80021f2:	2312      	movs	r3, #18
 80021f4:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 80021f6:	2300      	movs	r3, #0
 80021f8:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80021fa:	2308      	movs	r3, #8
 80021fc:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021fe:	463a      	mov	r2, r7
 8002200:	2303      	movs	r3, #3
 8002202:	2140      	movs	r1, #64	; 0x40
 8002204:	483a      	ldr	r0, [pc, #232]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002206:	f007 fe33 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800220a:	4603      	mov	r3, r0
 800220c:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1U;
 8002214:	2301      	movs	r3, #1
 8002216:	e066      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002218:	bf00      	nop
 800221a:	4835      	ldr	r0, [pc, #212]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800221c:	f008 f98b 	bl	800a536 <HAL_I2C_GetState>
 8002220:	4603      	mov	r3, r0
 8002222:	2b20      	cmp	r3, #32
 8002224:	d1f9      	bne.n	800221a <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 8002226:	230a      	movs	r3, #10
 8002228:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 800222e:	463a      	mov	r2, r7
 8002230:	2302      	movs	r3, #2
 8002232:	2140      	movs	r1, #64	; 0x40
 8002234:	482e      	ldr	r0, [pc, #184]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002236:	f007 fe1b 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800223a:	4603      	mov	r3, r0
 800223c:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1U;
 8002244:	2301      	movs	r3, #1
 8002246:	e04e      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002248:	bf00      	nop
 800224a:	4829      	ldr	r0, [pc, #164]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800224c:	f008 f973 	bl	800a536 <HAL_I2C_GetState>
 8002250:	4603      	mov	r3, r0
 8002252:	2b20      	cmp	r3, #32
 8002254:	d1f9      	bne.n	800224a <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 8002256:	2300      	movs	r3, #0
 8002258:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 800225a:	2300      	movs	r3, #0
 800225c:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 800225e:	463a      	mov	r2, r7
 8002260:	2302      	movs	r3, #2
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	4822      	ldr	r0, [pc, #136]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002266:	f007 fe03 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800226a:	4603      	mov	r3, r0
 800226c:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	e036      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002278:	bf00      	nop
 800227a:	481d      	ldr	r0, [pc, #116]	; (80022f0 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800227c:	f008 f95b 	bl	800a536 <HAL_I2C_GetState>
 8002280:	4603      	mov	r3, r0
 8002282:	2b20      	cmp	r3, #32
 8002284:	d1f9      	bne.n	800227a <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002286:	2304      	movs	r3, #4
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	e00b      	b.n	80022a4 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 800228c:	2100      	movs	r1, #0
 800228e:	2038      	movs	r0, #56	; 0x38
 8002290:	f7ff feb2 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1U;
 800229a:	2301      	movs	r3, #1
 800229c:	e023      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 80022aa:	2100      	movs	r1, #0
 80022ac:	2008      	movs	r0, #8
 80022ae:	f7ff fea3 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1U;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e014      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 80022bc:	f7ff ff16 	bl	80020ec <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 80022c0:	2100      	movs	r1, #0
 80022c2:	2006      	movs	r0, #6
 80022c4:	f7ff fe98 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1U;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e009      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 80022d2:	2100      	movs	r1, #0
 80022d4:	200c      	movs	r0, #12
 80022d6:	f7ff fe8f 	bl	8001ff8 <i2cMCP23017_Lcd16x2_Write>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1U;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	return 0U;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000544c 	.word	0x2000544c

080022f4 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 80022f8:	f7ff ff44 	bl	8002184 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U,  1U);
 80022fc:	2101      	movs	r1, #1
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fefd 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L0_P1_str, sizeof(I2c_Lcd_Welcome_L0_P1_str) - 1);
 8002304:	210d      	movs	r1, #13
 8002306:	480a      	ldr	r0, [pc, #40]	; (8002330 <i2cMCP23017_Lcd16x2_Welcome+0x3c>)
 8002308:	f7ff ff1c 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U,  1U);
 800230c:	2101      	movs	r1, #1
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff fef5 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P1_str, sizeof(I2c_Lcd_Welcome_L1_P1_str) - 1);
 8002314:	2106      	movs	r1, #6
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <i2cMCP23017_Lcd16x2_Welcome+0x40>)
 8002318:	f7ff ff14 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>

	i2cMCP23017_Lcd16x2_SetAddr(1U, 10U);
 800231c:	210a      	movs	r1, #10
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff feed 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P2_str, sizeof(I2c_Lcd_Welcome_L1_P2_str) - 1);
 8002324:	2105      	movs	r1, #5
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <i2cMCP23017_Lcd16x2_Welcome+0x44>)
 8002328:	f7ff ff0c 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08013fdc 	.word	0x08013fdc
 8002334:	08013fec 	.word	0x08013fec
 8002338:	08013ff4 	.word	0x08013ff4

0800233c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b08e      	sub	sp, #56	; 0x38
 8002340:	af02      	add	r7, sp, #8
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 800234a:	f107 041c 	add.w	r4, r7, #28
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 800235a:	f107 0408 	add.w	r4, r7, #8
 800235e:	461d      	mov	r5, r3
 8002360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 8002368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d013      	beq.n	800239e <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237c:	d302      	bcc.n	8002384 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 800237e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002382:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 8002384:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002388:	f107 0008 	add.w	r0, r7, #8
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	23df      	movs	r3, #223	; 0xdf
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 8002398:	2111      	movs	r1, #17
 800239a:	f00e f8c9 	bl	8010530 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 800239e:	2100      	movs	r1, #0
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff feac 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	2110      	movs	r1, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fec9 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80023b2:	2100      	movs	r1, #0
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff fea2 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	2110      	movs	r1, #16
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff febf 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08013af8 	.word	0x08013af8
 80023d4:	08013b0c 	.word	0x08013b0c
 80023d8:	08013ae0 	.word	0x08013ae0

080023dc <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	4603      	mov	r3, r0
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f0:	d302      	bcc.n	80023f8 <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80023f2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80023f6:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 80023f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002400:	22df      	movs	r2, #223	; 0xdf
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 8002406:	2111      	movs	r1, #17
 8002408:	f00e f892 	bl	8010530 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 800240c:	f107 0010 	add.w	r0, r7, #16
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 8002418:	2111      	movs	r1, #17
 800241a:	f00e f889 	bl	8010530 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 800241e:	2100      	movs	r1, #0
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fe6c 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	2110      	movs	r1, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fe89 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002432:	2100      	movs	r1, #0
 8002434:	2001      	movs	r0, #1
 8002436:	f7ff fe62 	bl	80020fe <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2110      	movs	r1, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe7f 	bl	8002144 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002446:	bf00      	nop
 8002448:	3738      	adds	r7, #56	; 0x38
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	08013b20 	.word	0x08013b20
 8002454:	08013b34 	.word	0x08013b34

08002458 <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 8002462:	2300      	movs	r3, #0
 8002464:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 800246a:	f107 020c 	add.w	r2, r7, #12
 800246e:	2300      	movs	r3, #0
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	2144      	movs	r1, #68	; 0x44
 8002476:	481f      	ldr	r0, [pc, #124]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002478:	f007 fe72 	bl	800a160 <HAL_I2C_Master_Seq_Transmit_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	e02f      	b.n	80024ea <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800248a:	bf00      	nop
 800248c:	4819      	ldr	r0, [pc, #100]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800248e:	f008 f852 	bl	800a536 <HAL_I2C_GetState>
 8002492:	4603      	mov	r3, r0
 8002494:	2b20      	cmp	r3, #32
 8002496:	d1f9      	bne.n	800248c <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8002498:	4816      	ldr	r0, [pc, #88]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800249a:	f008 f85a 	bl	800a552 <HAL_I2C_GetError>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d101      	bne.n	80024a8 <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e020      	b.n	80024ea <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 80024a8:	f107 0208 	add.w	r2, r7, #8
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2144      	movs	r1, #68	; 0x44
 80024b6:	480f      	ldr	r0, [pc, #60]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024b8:	f007 fed6 	bl	800a268 <HAL_I2C_Master_Seq_Receive_IT>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e00f      	b.n	80024ea <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024ca:	bf00      	nop
 80024cc:	4809      	ldr	r0, [pc, #36]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024ce:	f008 f832 	bl	800a536 <HAL_I2C_GetState>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d1f9      	bne.n	80024cc <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024da:	f008 f83a 	bl	800a552 <HAL_I2C_GetError>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d101      	bne.n	80024e8 <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 80024e8:	7a3b      	ldrb	r3, [r7, #8]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000544c 	.word	0x2000544c

080024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 8002500:	f005 f99e 	bl	8007840 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 800250c:	2003      	movs	r0, #3
 800250e:	f7ff ffa3 	bl	8002458 <i2cSmartLCD_Gfx240x128_Read>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	e00c      	b.n	800253e <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 8002524:	f005 f98c 	bl	8007840 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	429a      	cmp	r2, r3
 8002530:	d903      	bls.n	800253a <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 8002532:	2001      	movs	r0, #1
 8002534:	f005 f990 	bl	8007858 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 8002538:	e7e8      	b.n	800250c <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 800253a:	bf00      	nop
	} while (1);
	return 1U;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002556:	f7ff ffcf 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800255e:	f107 020c 	add.w	r2, r7, #12
 8002562:	2301      	movs	r3, #1
 8002564:	2144      	movs	r1, #68	; 0x44
 8002566:	480f      	ldr	r0, [pc, #60]	; (80025a4 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002568:	f007 fc82 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1U;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800257a:	bf00      	nop
 800257c:	4809      	ldr	r0, [pc, #36]	; (80025a4 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800257e:	f007 ffda 	bl	800a536 <HAL_I2C_GetState>
 8002582:	4603      	mov	r3, r0
 8002584:	2b20      	cmp	r3, #32
 8002586:	d1f9      	bne.n	800257c <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002588:	4806      	ldr	r0, [pc, #24]	; (80025a4 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800258a:	f007 ffe2 	bl	800a552 <HAL_I2C_GetError>
 800258e:	4603      	mov	r3, r0
 8002590:	2b10      	cmp	r3, #16
 8002592:	d101      	bne.n	8002598 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	return 0U;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000544c 	.word	0x2000544c

080025a8 <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	460a      	mov	r2, r1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80025b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025bc:	f7ff ff9c 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025c8:	f107 020c 	add.w	r2, r7, #12
 80025cc:	2302      	movs	r3, #2
 80025ce:	2144      	movs	r1, #68	; 0x44
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025d2:	f007 fc4d 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 80025d6:	4603      	mov	r3, r0
 80025d8:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1U;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00f      	b.n	8002604 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025e4:	bf00      	nop
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025e8:	f007 ffa5 	bl	800a536 <HAL_I2C_GetState>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d1f9      	bne.n	80025e6 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025f2:	4806      	ldr	r0, [pc, #24]	; (800260c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025f4:	f007 ffad 	bl	800a552 <HAL_I2C_GetError>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d101      	bne.n	8002602 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1U;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	return 0U;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000544c 	.word	0x2000544c

08002610 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	460b      	mov	r3, r1
 800261c:	71bb      	strb	r3, [r7, #6]
 800261e:	4613      	mov	r3, r2
 8002620:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002626:	f7ff ff67 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 8002632:	797b      	ldrb	r3, [r7, #5]
 8002634:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002636:	f107 020c 	add.w	r2, r7, #12
 800263a:	2303      	movs	r3, #3
 800263c:	2144      	movs	r1, #68	; 0x44
 800263e:	480f      	ldr	r0, [pc, #60]	; (800267c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002640:	f007 fc16 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1U;
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002652:	bf00      	nop
 8002654:	4809      	ldr	r0, [pc, #36]	; (800267c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002656:	f007 ff6e 	bl	800a536 <HAL_I2C_GetState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1f9      	bne.n	8002654 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002660:	4806      	ldr	r0, [pc, #24]	; (800267c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002662:	f007 ff76 	bl	800a552 <HAL_I2C_GetError>
 8002666:	4603      	mov	r3, r0
 8002668:	2b10      	cmp	r3, #16
 800266a:	d101      	bne.n	8002670 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1U;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	return 0U;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000544c 	.word	0x2000544c

08002680 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4623      	mov	r3, r4
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	4603      	mov	r3, r0
 8002694:	71bb      	strb	r3, [r7, #6]
 8002696:	460b      	mov	r3, r1
 8002698:	717b      	strb	r3, [r7, #5]
 800269a:	4613      	mov	r3, r2
 800269c:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800269e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a2:	f7ff ff29 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 80026ae:	797b      	ldrb	r3, [r7, #5]
 80026b0:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 80026b2:	793b      	ldrb	r3, [r7, #4]
 80026b4:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80026b6:	f107 0208 	add.w	r2, r7, #8
 80026ba:	2304      	movs	r3, #4
 80026bc:	2144      	movs	r1, #68	; 0x44
 80026be:	480f      	ldr	r0, [pc, #60]	; (80026fc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026c0:	f007 fbd6 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1U;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80026d2:	bf00      	nop
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026d6:	f007 ff2e 	bl	800a536 <HAL_I2C_GetState>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d1f9      	bne.n	80026d4 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026e2:	f007 ff36 	bl	800a552 <HAL_I2C_GetError>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d101      	bne.n	80026f0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1U;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	return 0U;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000544c 	.word	0x2000544c

08002700 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002708:	f7ff fef6 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 800270c:	2001      	movs	r0, #1
 800270e:	f7ff fea3 	bl	8002458 <i2cSmartLCD_Gfx240x128_Read>
 8002712:	4603      	mov	r3, r0
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}

08002718 <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b0c5      	sub	sp, #276	; 0x114
 800271c:	af00      	add	r7, sp, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	463a      	mov	r2, r7
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	4622      	mov	r2, r4
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	1dbb      	adds	r3, r7, #6
 8002730:	4602      	mov	r2, r0
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	1d7b      	adds	r3, r7, #5
 8002736:	460a      	mov	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	3304      	adds	r3, #4
 8002744:	22fc      	movs	r2, #252	; 0xfc
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f00d fa7f 	bl	800fc4c <memset>

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2bef      	cmp	r3, #239	; 0xef
 8002754:	d903      	bls.n	800275e <i2cSmartLCD_Gfx240x128_WriteText+0x46>
			Error_Handler();
 8002756:	f003 f833 	bl	80057c0 <Error_Handler>
			return 2U;
 800275a:	2302      	movs	r3, #2
 800275c:	e09c      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	f993 3000 	ldrsb.w	r3, [r3]
 8002764:	2b00      	cmp	r3, #0
 8002766:	da03      	bge.n	8002770 <i2cSmartLCD_Gfx240x128_WriteText+0x58>
			Error_Handler();
 8002768:	f003 f82a 	bl	80057c0 <Error_Handler>
			return 3U;
 800276c:	2303      	movs	r3, #3
 800276e:	e093      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Overflow */
		if (((LCD1_SMART_LCD_SIZE_X - 1U) - (len * LCD1_SYSFONT_WIDTH)) < pos_x) {
 8002770:	1d7b      	adds	r3, r7, #5
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	f1c3 02ef 	rsb	r2, r3, #239	; 0xef
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	f080 8081 	bcs.w	800288c <i2cSmartLCD_Gfx240x128_WriteText+0x174>
			Error_Handler();
 800278a:	f003 f819 	bl	80057c0 <Error_Handler>
			return 4U;
 800278e:	2304      	movs	r3, #4
 8002790:	e082      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}
	}

	while (len) {
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 8002792:	1d7b      	adds	r3, r7, #5
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d903      	bls.n	80027a2 <i2cSmartLCD_Gfx240x128_WriteText+0x8a>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 800279a:	2307      	movs	r3, #7
 800279c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027a0:	e003      	b.n	80027aa <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		} else {
			remaining = len;
 80027a2:	1d7b      	adds	r3, r7, #5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 80027aa:	1d7b      	adds	r3, r7, #5
 80027ac:	1d7a      	adds	r2, r7, #5
 80027ae:	7811      	ldrb	r1, [r2, #0]
 80027b0:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80027b4:	1a8a      	subs	r2, r1, r2
 80027b6:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	2020      	movs	r0, #32
 80027c4:	f7ff ff24 	bl	8002610 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <i2cSmartLCD_Gfx240x128_WriteText+0xba>
			return 1U;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e062      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2230      	movs	r2, #48	; 0x30
 80027d8:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80027e2:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80027ea:	e010      	b.n	800280e <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			i2cTxBuf[2 + idx] = *(str++);
 80027ec:	463b      	mov	r3, r7
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	463a      	mov	r2, r7
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	6011      	str	r1, [r2, #0]
 80027f6:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80027fa:	3202      	adds	r2, #2
 80027fc:	7819      	ldrb	r1, [r3, #0]
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002804:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002808:	3301      	adds	r3, #1
 800280a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800280e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002812:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002816:	429a      	cmp	r2, r3
 8002818:	d3e8      	bcc.n	80027ec <i2cSmartLCD_Gfx240x128_WriteText+0xd4>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800281a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281e:	f7ff fe6b 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 8002822:	2002      	movs	r0, #2
 8002824:	f005 f818 	bl	8007858 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 8002828:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800282c:	b29b      	uxth	r3, r3
 800282e:	3302      	adds	r3, #2
 8002830:	b29b      	uxth	r3, r3
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	2144      	movs	r1, #68	; 0x44
 8002838:	481a      	ldr	r0, [pc, #104]	; (80028a4 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 800283a:	f007 fb19 	bl	8009e70 <HAL_I2C_Master_Transmit_IT>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 8002844:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <i2cSmartLCD_Gfx240x128_WriteText+0x138>
			return 1U;
 800284c:	2301      	movs	r3, #1
 800284e:	e023      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002850:	bf00      	nop
 8002852:	4814      	ldr	r0, [pc, #80]	; (80028a4 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 8002854:	f007 fe6f 	bl	800a536 <HAL_I2C_GetState>
 8002858:	4603      	mov	r3, r0
 800285a:	2b20      	cmp	r3, #32
 800285c:	d1f9      	bne.n	8002852 <i2cSmartLCD_Gfx240x128_WriteText+0x13a>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 8002860:	f007 fe77 	bl	800a552 <HAL_I2C_GetError>
 8002864:	4603      	mov	r3, r0
 8002866:	2b10      	cmp	r3, #16
 8002868:	d101      	bne.n	800286e <i2cSmartLCD_Gfx240x128_WriteText+0x156>
			return 1U;
 800286a:	2301      	movs	r3, #1
 800286c:	e014      	b.n	8002898 <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 800286e:	2002      	movs	r0, #2
 8002870:	f004 fff2 	bl	8007858 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 8002874:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002878:	461a      	mov	r2, r3
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	b2d9      	uxtb	r1, r3
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	1dfa      	adds	r2, r7, #7
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	440a      	add	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
	while (len) {
 800288c:	1d7b      	adds	r3, r7, #5
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f af7e 	bne.w	8002792 <i2cSmartLCD_Gfx240x128_WriteText+0x7a>
	}
	return 0U;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000544c 	.word	0x2000544c

080028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	460a      	mov	r2, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= fromPos_x) {
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2bef      	cmp	r3, #239	; 0xef
 80028bc:	d903      	bls.n	80028c6 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x1e>
			Error_Handler();
 80028be:	f002 ff7f 	bl	80057c0 <Error_Handler>
			return 2U;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e017      	b.n	80028f6 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= fromPos_y) {
 80028c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da03      	bge.n	80028d6 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
			Error_Handler();
 80028ce:	f002 ff77 	bl	80057c0 <Error_Handler>
			return 3U;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e00f      	b.n	80028f6 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028da:	f7ff fe0d 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 80028de:	79ba      	ldrb	r2, [r7, #6]
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4619      	mov	r1, r3
 80028e4:	2020      	movs	r0, #32
 80028e6:	f7ff fe93 	bl	8002610 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4c>
		return 1U;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
	}
	return 0U;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	460b      	mov	r3, r1
 800290a:	71bb      	strb	r3, [r7, #6]
 800290c:	4613      	mov	r3, r2
 800290e:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= toPos_x) {
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2bef      	cmp	r3, #239	; 0xef
 8002914:	d903      	bls.n	800291e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x20>
			Error_Handler();
 8002916:	f002 ff53 	bl	80057c0 <Error_Handler>
			return 2U;
 800291a:	2302      	movs	r3, #2
 800291c:	e017      	b.n	800294e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= toPos_y) {
 800291e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da03      	bge.n	800292e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
			Error_Handler();
 8002926:	f002 ff4b 	bl	80057c0 <Error_Handler>
			return 3U;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800292e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002932:	f7ff fde1 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 8002936:	797b      	ldrb	r3, [r7, #5]
 8002938:	79ba      	ldrb	r2, [r7, #6]
 800293a:	79f9      	ldrb	r1, [r7, #7]
 800293c:	2032      	movs	r0, #50	; 0x32
 800293e:	f7ff fe9f 	bl	8002680 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x4e>
		return 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
	}
	return 0U;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <i2cSmartLCD_Gfx240x128_Draw_Point>:

#if defined(PLL_BY_SOFTWARE)
static uint8_t i2cSmartLCD_Gfx240x128_Draw_Point(uint8_t pos_x, uint8_t pos_y, uint8_t fillType)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	460b      	mov	r3, r1
 8002962:	71bb      	strb	r3, [r7, #6]
 8002964:	4613      	mov	r3, r2
 8002966:	717b      	strb	r3, [r7, #5]
	uint8_t ret;

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2bef      	cmp	r3, #239	; 0xef
 800296c:	d903      	bls.n	8002976 <i2cSmartLCD_Gfx240x128_Draw_Point+0x20>
			Error_Handler();
 800296e:	f002 ff27 	bl	80057c0 <Error_Handler>
			return 2U;
 8002972:	2302      	movs	r3, #2
 8002974:	e01b      	b.n	80029ae <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 8002976:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da03      	bge.n	8002986 <i2cSmartLCD_Gfx240x128_Draw_Point+0x30>
			Error_Handler();
 800297e:	f002 ff1f 	bl	80057c0 <Error_Handler>
			return 3U;
 8002982:	2303      	movs	r3, #3
 8002984:	e013      	b.n	80029ae <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}
	}

	/* There is no explicit draw pixel in Smart-LCD */
	ret  = i2cSmartLCD_Gfx240x128_Draw_SetStartPos(pos_x, pos_y);
 8002986:	79ba      	ldrb	r2, [r7, #6]
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff8b 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
	ret |= i2cSmartLCD_Gfx240x128_Draw_Line_to(pos_x, pos_y, fillType);
 8002996:	797a      	ldrb	r2, [r7, #5]
 8002998:	79b9      	ldrb	r1, [r7, #6]
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffae 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	73fb      	strb	r3, [r7, #15]
	return ret;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <i2cSmartLCD_Gfx240x128_Draw_Rect>:
#endif

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t lineType)
{
 80029b6:	b590      	push	{r4, r7, lr}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	4623      	mov	r3, r4
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	4603      	mov	r3, r0
 80029ca:	71bb      	strb	r3, [r7, #6]
 80029cc:	460b      	mov	r3, r1
 80029ce:	717b      	strb	r3, [r7, #5]
 80029d0:	4613      	mov	r3, r2
 80029d2:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2bef      	cmp	r3, #239	; 0xef
 80029d8:	d903      	bls.n	80029e2 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x2c>
			Error_Handler();
 80029da:	f002 fef1 	bl	80057c0 <Error_Handler>
			return 2U;
 80029de:	2302      	movs	r3, #2
 80029e0:	e03a      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 80029e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da03      	bge.n	80029f2 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x3c>
			Error_Handler();
 80029ea:	f002 fee9 	bl	80057c0 <Error_Handler>
			return 3U;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e032      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 80029f2:	79fa      	ldrb	r2, [r7, #7]
 80029f4:	797b      	ldrb	r3, [r7, #5]
 80029f6:	4413      	add	r3, r2
 80029f8:	3b01      	subs	r3, #1
 80029fa:	2bef      	cmp	r3, #239	; 0xef
 80029fc:	d903      	bls.n	8002a06 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x50>
			Error_Handler();
 80029fe:	f002 fedf 	bl	80057c0 <Error_Handler>
			return 4U;
 8002a02:	2304      	movs	r3, #4
 8002a04:	e028      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 8002a06:	79ba      	ldrb	r2, [r7, #6]
 8002a08:	793b      	ldrb	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a10:	d903      	bls.n	8002a1a <i2cSmartLCD_Gfx240x128_Draw_Rect+0x64>
			Error_Handler();
 8002a12:	f002 fed5 	bl	80057c0 <Error_Handler>
			return 5U;
 8002a16:	2305      	movs	r3, #5
 8002a18:	e01e      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1e:	f7ff fd6b 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002a22:	79ba      	ldrb	r2, [r7, #6]
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	4619      	mov	r1, r3
 8002a28:	2020      	movs	r0, #32
 8002a2a:	f7ff fdf1 	bl	8002610 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x82>
		return 1U;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e00f      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a3c:	f7ff fd5c 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT, width, height, lineType)) {
 8002a40:	7e3b      	ldrb	r3, [r7, #24]
 8002a42:	793a      	ldrb	r2, [r7, #4]
 8002a44:	7979      	ldrb	r1, [r7, #5]
 8002a46:	2034      	movs	r0, #52	; 0x34
 8002a48:	f7ff fe1a 	bl	8002680 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa0>
		return 1U;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}
	return 0U;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4604      	mov	r4, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	4603      	mov	r3, r0
 8002a74:	71bb      	strb	r3, [r7, #6]
 8002a76:	460b      	mov	r3, r1
 8002a78:	717b      	strb	r3, [r7, #5]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2bef      	cmp	r3, #239	; 0xef
 8002a82:	d903      	bls.n	8002a8c <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x2c>
			Error_Handler();
 8002a84:	f002 fe9c 	bl	80057c0 <Error_Handler>
			return 2U;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e03a      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 8002a8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da03      	bge.n	8002a9c <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
			Error_Handler();
 8002a94:	f002 fe94 	bl	80057c0 <Error_Handler>
			return 3U;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e032      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 8002a9c:	79fa      	ldrb	r2, [r7, #7]
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	2bef      	cmp	r3, #239	; 0xef
 8002aa6:	d903      	bls.n	8002ab0 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x50>
			Error_Handler();
 8002aa8:	f002 fe8a 	bl	80057c0 <Error_Handler>
			return 4U;
 8002aac:	2304      	movs	r3, #4
 8002aae:	e028      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	793b      	ldrb	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8002aba:	d903      	bls.n	8002ac4 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x64>
			Error_Handler();
 8002abc:	f002 fe80 	bl	80057c0 <Error_Handler>
			return 5U;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	e01e      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac8:	f7ff fd16 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002acc:	79ba      	ldrb	r2, [r7, #6]
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2020      	movs	r0, #32
 8002ad4:	f7ff fd9c 	bl	8002610 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x82>
		return 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae6:	f7ff fd07 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 8002aea:	7e3b      	ldrb	r3, [r7, #24]
 8002aec:	793a      	ldrb	r2, [r7, #4]
 8002aee:	7979      	ldrb	r1, [r7, #5]
 8002af0:	2036      	movs	r0, #54	; 0x36
 8002af2:	f7ff fdc5 	bl	8002680 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa0>
		return 1U;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}
	return 0U;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}

08002b0a <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 8002b10:	f7ff fdf6 	bl	8002700 <i2cSmartLCD_Gfx240x128_GetVer>
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d925      	bls.n	8002b6a <i2cSmartLCD_Gfx240x128_Init+0x60>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b22:	f7ff fce9 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 8002b26:	2110      	movs	r1, #16
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff fd3d 	bl	80025a8 <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b32:	f7ff fce1 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 8002b36:	2011      	movs	r0, #17
 8002b38:	f7ff fd06 	bl	8002548 <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2U;
 8002b42:	2302      	movs	r3, #2
 8002b44:	e012      	b.n	8002b6c <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b4a:	f7ff fcd5 	bl	80024f8 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2014      	movs	r0, #20
 8002b52:	f7ff fd29 	bl	80025a8 <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1U;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e005      	b.n	8002b6c <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		HAL_Delay(10UL);
 8002b60:	200a      	movs	r0, #10
 8002b62:	f004 fe79 	bl	8007858 <HAL_Delay>
		return 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <i2cSmartLCD_Gfx240x128_Init+0x62>
	}
	return 1U;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(uint32_t bf)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	/* Display init */
	if (bf & 0x80000000UL) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da06      	bge.n	8002b90 <i2cSmartLCD_Gfx240x128_Template+0x1c>
		if (i2cSmartLCD_Gfx240x128_Init()) {
 8002b82:	f7ff ffc2 	bl	8002b0a <i2cSmartLCD_Gfx240x128_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <i2cSmartLCD_Gfx240x128_Template+0x1c>
			return 1U;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0f8      	b.n	8002d82 <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}

	/* Header Line */
	if (bf & 0x00000001UL) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <i2cSmartLCD_Gfx240x128_Template+0x38>
		i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fe83 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
				0U,
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U));

		i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2108      	movs	r1, #8
 8002ba6:	20ef      	movs	r0, #239	; 0xef
 8002ba8:	f7ff fea9 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U),
				LCD1_PIXEL_SET);
	}

	/* Header Text */
	if (bf & 0x00000002UL) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d011      	beq.n	8002bda <i2cSmartLCD_Gfx240x128_Template+0x66>
		i2cSmartLCD_Gfx240x128_WriteText(
 8002bb6:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <i2cSmartLCD_Gfx240x128_Template+0x218>)
 8002bb8:	220d      	movs	r2, #13
 8002bba:	2100      	movs	r1, #0
 8002bbc:	201e      	movs	r0, #30
 8002bbe:	f7ff fdab 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L0_P1_str), I2c_Lcd_Welcome_L0_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <i2cSmartLCD_Gfx240x128_Template+0x21c>)
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2072      	movs	r0, #114	; 0x72
 8002bca:	f7ff fda5 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  * 19U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L1_P1_str), I2c_Lcd_Welcome_L1_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002bce:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <i2cSmartLCD_Gfx240x128_Template+0x220>)
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	20a2      	movs	r0, #162	; 0xa2
 8002bd6:	f7ff fd9f 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd_Welcome_L1_P2_str), I2c_Lcd_Welcome_L1_P2_str);
	}


	/* LCKD print */
	if (bf & 0x00000010UL) {
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d019      	beq.n	8002c18 <i2cSmartLCD_Gfx240x128_Template+0xa4>
		uint8_t line_str[] = "LCKD";
 8002be4:	4a6c      	ldr	r2, [pc, #432]	; (8002d98 <i2cSmartLCD_Gfx240x128_Template+0x224>)
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bee:	6018      	str	r0, [r3, #0]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	7019      	strb	r1, [r3, #0]
		if (i2cSmartLCD_Gfx240x128_WriteText(
				0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  0U),
				0U + ((LCD1_SYSFONT_HEIGHT + 0U) *  0U),
				strlen((char*)line_str), line_str)) {
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd faf3 	bl	80001e4 <strlen>
 8002bfe:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	2100      	movs	r1, #0
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff fd85 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <i2cSmartLCD_Gfx240x128_Template+0xa4>
			return 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b4      	b.n	8002d82 <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}


	/* Timing scale below the header line */
	if (bf & 0x00000100UL) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80ae 	beq.w	8002d80 <i2cSmartLCD_Gfx240x128_Template+0x20c>
		uint8_t pos_x 		= DacGfxPos_x_min;
 8002c24:	2309      	movs	r3, #9
 8002c26:	75fb      	strb	r3, [r7, #23]
		uint8_t mrk10Min	= 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	75bb      	strb	r3, [r7, #22]
		uint8_t mrk5Dac		= 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	757b      	strb	r3, [r7, #21]

		/* Draw plot line x-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c30:	2309      	movs	r3, #9
 8002c32:	222b      	movs	r2, #43	; 0x2b
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fe36 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002c3c:	23e6      	movs	r3, #230	; 0xe6
 8002c3e:	212b      	movs	r1, #43	; 0x2b
 8002c40:	2201      	movs	r2, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fe5b 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_bot,
					LCD1_PIXEL_SET);
		}

		/* Draw x-axis scale lines */
		while (pos_x <= DacGfxPos_x_max) {
 8002c48:	e02f      	b.n	8002caa <i2cSmartLCD_Gfx240x128_Template+0x136>
			uint8_t drawHrExtra = (!(mrk10Min % 6)) ?  2U : 0U;
 8002c4a:	7dba      	ldrb	r2, [r7, #22]
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <i2cSmartLCD_Gfx240x128_Template+0x228>)
 8002c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c52:	0899      	lsrs	r1, r3, #2
 8002c54:	460b      	mov	r3, r1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <i2cSmartLCD_Gfx240x128_Template+0xf4>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e000      	b.n	8002c6a <i2cSmartLCD_Gfx240x128_Template+0xf6>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	74fb      	strb	r3, [r7, #19]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					pos_x,
					(DacGfxPos_y_bot + (1U + drawHrExtra)));
 8002c6c:	222b      	movs	r2, #43	; 0x2b
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	4413      	add	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe13 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002c82:	232b      	movs	r3, #43	; 0x2b
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2d9      	uxtb	r1, r3
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fe36 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					pos_x,
					(DacGfxPos_y_bot + 1U),
					LCD1_PIXEL_SET);

			/* New scale mark at every 10 minutes */
			++mrk10Min;
 8002c92:	7dbb      	ldrb	r3, [r7, #22]
 8002c94:	3301      	adds	r3, #1
 8002c96:	75bb      	strb	r3, [r7, #22]
			pos_x = DacGfxPos_x_min + (10U * mrk10Min);
 8002c98:	7dbb      	ldrb	r3, [r7, #22]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	0092      	lsls	r2, r2, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2209      	movs	r2, #9
 8002ca6:	4413      	add	r3, r2
 8002ca8:	75fb      	strb	r3, [r7, #23]
		while (pos_x <= DacGfxPos_x_max) {
 8002caa:	22e6      	movs	r2, #230	; 0xe6
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d9cb      	bls.n	8002c4a <i2cSmartLCD_Gfx240x128_Template+0xd6>
		}

		/* Draw plot line y-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	222b      	movs	r2, #43	; 0x2b
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fdf5 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	210d      	movs	r1, #13
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe1a 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_top,
					LCD1_PIXEL_SET);
		}

		/* Draw y-axis scale lines */
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002cca:	e02a      	b.n	8002d22 <i2cSmartLCD_Gfx240x128_Template+0x1ae>
			uint8_t drawExtra = (mrk5Dac == 3U) ?  2U : 0U;
 8002ccc:	7d7b      	ldrb	r3, [r7, #21]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d101      	bne.n	8002cd6 <i2cSmartLCD_Gfx240x128_Template+0x162>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e000      	b.n	8002cd8 <i2cSmartLCD_Gfx240x128_Template+0x164>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	753b      	strb	r3, [r7, #20]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					(DacGfxPos_x_min - (1 + drawExtra)),
 8002cda:	2209      	movs	r2, #9
 8002cdc:	7d3b      	ldrb	r3, [r7, #20]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	212b      	movs	r1, #43	; 0x2b
					(DacGfxPos_y_bot - (mrk5Dac * 5U)));
 8002ce8:	7d7b      	ldrb	r3, [r7, #21]
 8002cea:	4618      	mov	r0, r3
 8002cec:	0080      	lsls	r0, r0, #2
 8002cee:	4403      	add	r3, r0
 8002cf0:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cf2:	1acb      	subs	r3, r1, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7ff fdd5 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002cfe:	2309      	movs	r3, #9
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	222b      	movs	r2, #43	; 0x2b
					(DacGfxPos_x_min - 1U),
					(DacGfxPos_y_bot - (mrk5Dac * 5U)),
 8002d06:	7d7b      	ldrb	r3, [r7, #21]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	0089      	lsls	r1, r1, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2201      	movs	r2, #1
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7ff fdf1 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					LCD1_PIXEL_SET);

			++mrk5Dac;
 8002d1c:	7d7b      	ldrb	r3, [r7, #21]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	757b      	strb	r3, [r7, #21]
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002d22:	232b      	movs	r3, #43	; 0x2b
 8002d24:	4619      	mov	r1, r3
 8002d26:	7d7a      	ldrb	r2, [r7, #21]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	220d      	movs	r2, #13
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d2ca      	bcs.n	8002ccc <i2cSmartLCD_Gfx240x128_Template+0x158>
		}

		/* Write 'DAC' at y-axis */
		{
			uint8_t buf[] = "DAC";
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <i2cSmartLCD_Gfx240x128_Template+0x22c>)
 8002d38:	60bb      	str	r3, [r7, #8]

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	3b09      	subs	r3, #9
 8002d3e:	b2d8      	uxtb	r0, r3
 8002d40:	232b      	movs	r3, #43	; 0x2b
 8002d42:	3b1c      	subs	r3, #28
 8002d44:	b2d9      	uxtb	r1, r3
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f7ff fce4 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (3U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[0]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d50:	2309      	movs	r3, #9
 8002d52:	3b09      	subs	r3, #9
 8002d54:	b2d8      	uxtb	r0, r3
 8002d56:	232b      	movs	r3, #43	; 0x2b
 8002d58:	3b13      	subs	r3, #19
 8002d5a:	b2d9      	uxtb	r1, r3
 8002d5c:	f107 0308 	add.w	r3, r7, #8
 8002d60:	3301      	adds	r3, #1
 8002d62:	2201      	movs	r2, #1
 8002d64:	f7ff fcd8 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (2U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[1]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d68:	2309      	movs	r3, #9
 8002d6a:	3b09      	subs	r3, #9
 8002d6c:	b2d8      	uxtb	r0, r3
 8002d6e:	232b      	movs	r3, #43	; 0x2b
 8002d70:	3b0a      	subs	r3, #10
 8002d72:	b2d9      	uxtb	r1, r3
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	3302      	adds	r3, #2
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f7ff fccc 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (1U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[2]));
		}
	}
	return 0U;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08013fdc 	.word	0x08013fdc
 8002d90:	08013fec 	.word	0x08013fec
 8002d94:	08013ff4 	.word	0x08013ff4
 8002d98:	08013b48 	.word	0x08013b48
 8002d9c:	aaaaaaab 	.word	0xaaaaaaab
 8002da0:	00434144 	.word	0x00434144

08002da4 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template(0x80000003UL)) {
 8002da8:	4814      	ldr	r0, [pc, #80]	; (8002dfc <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002daa:	f7ff fee3 	bl	8002b74 <i2cSmartLCD_Gfx240x128_Template>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <i2cSmartLCD_Gfx240x128_Welcome+0x14>
		return 1U;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e01e      	b.n	8002df6 <i2cSmartLCD_Gfx240x128_Welcome+0x52>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 8002dba:	2209      	movs	r2, #9
 8002dbc:	2114      	movs	r1, #20
 8002dbe:	2006      	movs	r0, #6
 8002dc0:	f7ff fcaa 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  2U)),
				strlen((char*)I2c_Lcd_Welcome_L2_str), I2c_Lcd_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	211e      	movs	r1, #30
 8002dca:	2006      	movs	r0, #6
 8002dcc:	f7ff fca4 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)),
				strlen((char*)I2c_Lcd_Welcome_L3_str), I2c_Lcd_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	2128      	movs	r1, #40	; 0x28
 8002dd6:	2006      	movs	r0, #6
 8002dd8:	f7ff fc9e 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  4U)),
				strlen((char*)I2c_Lcd_Welcome_L4_str), I2c_Lcd_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <i2cSmartLCD_Gfx240x128_Welcome+0x68>)
 8002dde:	2218      	movs	r2, #24
 8002de0:	2132      	movs	r1, #50	; 0x32
 8002de2:	2006      	movs	r0, #6
 8002de4:	f7ff fc98 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  5U)),
				strlen((char*)I2c_Lcd_Welcome_L5_str), I2c_Lcd_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <i2cSmartLCD_Gfx240x128_Welcome+0x6c>)
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	213c      	movs	r1, #60	; 0x3c
 8002dee:	2006      	movs	r0, #6
 8002df0:	f7ff fc92 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  6U)),
				strlen((char*)I2c_Lcd_Welcome_L6_str), I2c_Lcd_Welcome_L6_str);
	}
	return 0U;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	80000003 	.word	0x80000003
 8002e00:	08013ffc 	.word	0x08013ffc
 8002e04:	08014008 	.word	0x08014008
 8002e08:	0801401c 	.word	0x0801401c
 8002e0c:	08014044 	.word	0x08014044
 8002e10:	08014060 	.word	0x08014060

08002e14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b092      	sub	sp, #72	; 0x48
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Draw_Rect(
 8002e20:	2301      	movs	r3, #1
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2328      	movs	r3, #40	; 0x28
 8002e26:	226e      	movs	r2, #110	; 0x6e
 8002e28:	214c      	movs	r1, #76	; 0x4c
 8002e2a:	203e      	movs	r0, #62	; 0x3e
 8002e2c:	f7ff fdc3 	bl	80029b6 <i2cSmartLCD_Gfx240x128_Draw_Rect>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x26>
				(      ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)  - 4U),
				(      ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)  - 4U),
				( 8U + ((LCD1_SYSFONT_WIDTH  + 0U) * 17U)      ),
				(10U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)      ),
				LCD1_PIXEL_SET)) {
			return 1U;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e05e      	b.n	8002ef8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}
		HAL_Delay(1UL);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f004 fd0c 	bl	8007858 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xec>)
 8002e42:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002e46:	461d      	mov	r5, r3
 8002e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)),
				strlen((char*)line0_str), line0_str)) {
 8002e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd f9c5 	bl	80001e4 <strlen>
 8002e5a:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e62:	2150      	movs	r1, #80	; 0x50
 8002e64:	2042      	movs	r0, #66	; 0x42
 8002e66:	f7ff fc57 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x60>
			return 1U;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e041      	b.n	8002ef8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}

		if (temp) {
 8002e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7eU);
 8002e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e80:	f107 000c 	add.w	r0, r7, #12
 8002e84:	227e      	movs	r2, #126	; 0x7e
 8002e86:	9200      	str	r2, [sp, #0]
 8002e88:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf0>)
 8002e8a:	211f      	movs	r1, #31
 8002e8c:	f00d fb50 	bl	8010530 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) *  9U)),
					strlen((char*)line1_str), line1_str)) {
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd f9a5 	bl	80001e4 <strlen>
 8002e9a:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	215c      	movs	r1, #92	; 0x5c
 8002ea4:	2042      	movs	r0, #66	; 0x42
 8002ea6:	f7ff fc37 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
				return 1U;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e021      	b.n	8002ef8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}

		if (tAcc) {
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01d      	beq.n	8002ef6 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999U ?  999U : tAcc));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf28      	it	cs
 8002ec4:	4613      	movcs	r3, r2
 8002ec6:	f107 000c 	add.w	r0, r7, #12
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>)
 8002ecc:	211f      	movs	r1, #31
 8002ece:	f00d fb2f 	bl	8010530 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) * 10U)),
					strlen((char*)line2_str), line2_str)) {
 8002ed2:	f107 030c 	add.w	r3, r7, #12
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd f984 	bl	80001e4 <strlen>
 8002edc:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	2166      	movs	r1, #102	; 0x66
 8002ee6:	2042      	movs	r0, #66	; 0x42
 8002ee8:	f7ff fc16 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
				return 1U;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}
	}
	return 0U;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3740      	adds	r7, #64	; 0x40
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}
 8002f00:	08013af8 	.word	0x08013af8
 8002f04:	08013b50 	.word	0x08013b50
 8002f08:	08013b64 	.word	0x08013b64

08002f0c <i2cSmartLCD_Gfx240x128_locator_print>:


static uint8_t i2cSmartLCD_Gfx240x128_locator_print(const uint8_t* locatorStr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	uint8_t line_str[16];

	snprintf((char*)line_str, sizeof(line_str) - 1, "%6s", locatorStr);
 8002f14:	f107 0008 	add.w	r0, r7, #8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <i2cSmartLCD_Gfx240x128_locator_print+0x44>)
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	f00d fb07 	bl	8010530 <sniprintf>

	if (i2cSmartLCD_Gfx240x128_WriteText(
			(((LCD1_SYSFONT_WIDTH  + 0U) * 34U) - 1U),
			(((LCD1_SYSFONT_HEIGHT + 0U) *  0U) - 0U),
			strlen((char*)line_str), line_str)) {
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd f95c 	bl	80001e4 <strlen>
 8002f2c:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	2100      	movs	r1, #0
 8002f36:	20cb      	movs	r0, #203	; 0xcb
 8002f38:	f7ff fbee 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <i2cSmartLCD_Gfx240x128_locator_print+0x3a>
		return 1U;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <i2cSmartLCD_Gfx240x128_locator_print+0x3c>
	}
	return 0U;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	08013b78 	.word	0x08013b78
 8002f54:	00000000 	.word	0x00000000

08002f58 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo, const uint8_t* locatorStr)
{
 8002f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f5c:	b09e      	sub	sp, #120	; 0x78
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	61f8      	str	r0, [r7, #28]
 8002f62:	617a      	str	r2, [r7, #20]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	837b      	strh	r3, [r7, #26]
	static uint16_t s_svPosElevAzim_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Each time drop a channel two force a redraw */
	static uint8_t	s_svPosElevRefresh_last					= 	0U;
	s_svId_last[s_svPosElevRefresh_last++] = 0xffU;
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	b2d1      	uxtb	r1, r2
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f7c:	7011      	strb	r1, [r2, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b21      	ldr	r3, [pc, #132]	; (8003008 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002f82:	21ff      	movs	r1, #255	; 0xff
 8002f84:	5499      	strb	r1, [r3, r2]
	s_svPosElevRefresh_last %= SvPosElevCnt_max;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <i2cSmartLCD_Gfx240x128_Locked+0xb4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	08d9      	lsrs	r1, r3, #3
 8002f92:	460b      	mov	r3, r1
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a5b      	subs	r3, r3, r1
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f9e:	701a      	strb	r2, [r3, #0]


	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002fa0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d902      	bls.n	8002fae <i2cSmartLCD_Gfx240x128_Locked+0x56>
		svPosElevCnt = SvPosElevCnt_max;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002fae:	f004 fc47 	bl	8007840 <HAL_GetTick>
 8002fb2:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8002fb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f080 85e3 	bcs.w	8003b84 <i2cSmartLCD_Gfx240x128_Locked+0xc2c>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d248      	bcs.n	800305c <i2cSmartLCD_Gfx240x128_Locked+0x104>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002fca:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fce:	461a      	mov	r2, r3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2341      	movs	r3, #65	; 0x41
 8002ff4:	213e      	movs	r1, #62	; 0x3e
 8002ff6:	f7ff fd33 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002ffa:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002ffe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003002:	e021      	b.n	8003048 <i2cSmartLCD_Gfx240x128_Locked+0xf0>
 8003004:	20000260 	.word	0x20000260
 8003008:	20000264 	.word	0x20000264
 800300c:	88888889 	.word	0x88888889
 8003010:	20000273 	.word	0x20000273
			s_svId_last[thisIdx]			= 	0U;
 8003014:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003018:	4ac7      	ldr	r2, [pc, #796]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x3e0>)
 800301a:	2100      	movs	r1, #0
 800301c:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[thisIdx]	=	0U;
 800301e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003022:	4ac6      	ldr	r2, [pc, #792]	; (800333c <i2cSmartLCD_Gfx240x128_Locked+0x3e4>)
 8003024:	2100      	movs	r1, #0
 8003026:	54d1      	strb	r1, [r2, r3]
			s_svPosElevElev_last[thisIdx]	= 	0U;
 8003028:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800302c:	4ac4      	ldr	r2, [pc, #784]	; (8003340 <i2cSmartLCD_Gfx240x128_Locked+0x3e8>)
 800302e:	2100      	movs	r1, #0
 8003030:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[thisIdx]	= 	0U;
 8003032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003036:	4ac3      	ldr	r2, [pc, #780]	; (8003344 <i2cSmartLCD_Gfx240x128_Locked+0x3ec>)
 8003038:	2100      	movs	r1, #0
 800303a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 800303e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003042:	3301      	adds	r3, #1
 8003044:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003048:	4bbf      	ldr	r3, [pc, #764]	; (8003348 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003050:	429a      	cmp	r2, r3
 8003052:	d3df      	bcc.n	8003014 <i2cSmartLCD_Gfx240x128_Locked+0xbc>
		}

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 8003054:	4abc      	ldr	r2, [pc, #752]	; (8003348 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 8003056:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800305a:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 800305c:	f004 fbf0 	bl	8007840 <HAL_GetTick>
 8003060:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8003062:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	429a      	cmp	r2, r3
 8003068:	f080 858e 	bcs.w	8003b88 <i2cSmartLCD_Gfx240x128_Locked+0xc30>
		return;
	}

	/* Print Locator */
	if (strcmp((char*)s_locatorStrLast, (char*)locatorStr)) {
 800306c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003070:	48b6      	ldr	r0, [pc, #728]	; (800334c <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 8003072:	f7fd f8ad 	bl	80001d0 <strcmp>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <i2cSmartLCD_Gfx240x128_Locked+0x138>
		i2cSmartLCD_Gfx240x128_locator_print(locatorStr);
 800307c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003080:	f7ff ff44 	bl	8002f0c <i2cSmartLCD_Gfx240x128_locator_print>

		/* Write back changed string */
		strncpy((char*)s_locatorStrLast, (char*)locatorStr, sizeof(s_locatorStrLast) - 1);
 8003084:	220f      	movs	r2, #15
 8003086:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800308a:	48b0      	ldr	r0, [pc, #704]	; (800334c <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 800308c:	f00d fa84 	bl	8010598 <strncpy>
	}

	/* Timeout check */
	now = HAL_GetTick();
 8003090:	f004 fbd6 	bl	8007840 <HAL_GetTick>
 8003094:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8003096:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	f080 8576 	bcs.w	8003b8c <i2cSmartLCD_Gfx240x128_Locked+0xc34>
		return;
	}

#if defined(PLL_BY_SOFTWARE)
	/* Plot DAC graph element */
	if (now >= s_dacPlotNxtTim)
 80030a0:	4bab      	ldr	r3, [pc, #684]	; (8003350 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030a6:	429a      	cmp	r2, r3
 80030a8:	f0c0 8095 	bcc.w	80031d6 <i2cSmartLCD_Gfx240x128_Locked+0x27e>
	{
		/* Calculate for next minute */
		s_dacPlotNxtTim = (now + 60000UL) - ((now + 60000UL) % 60000UL);
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	4aa7      	ldr	r2, [pc, #668]	; (8003354 <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 80030b6:	fba2 1203 	umull	r1, r2, r2, r3
 80030ba:	0b92      	lsrs	r2, r2, #14
 80030bc:	f64e 2160 	movw	r1, #60000	; 0xea60
 80030c0:	fb01 f202 	mul.w	r2, r1, r2
 80030c4:	1a9a      	subs	r2, r3, r2
 80030c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80030ce:	3360      	adds	r3, #96	; 0x60
 80030d0:	4a9f      	ldr	r2, [pc, #636]	; (8003350 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 80030d2:	6013      	str	r3, [r2, #0]

		/* Calculate x position*/
		s_dacPlotPosOfs++;
 80030d4:	4ba0      	ldr	r3, [pc, #640]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b9e      	ldr	r3, [pc, #632]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030de:	701a      	strb	r2, [r3, #0]
		if (s_dacPlotPosOfs > (DacGfxPos_x_max - DacGfxPos_x_min)) {
 80030e0:	4b9d      	ldr	r3, [pc, #628]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	23e6      	movs	r3, #230	; 0xe6
 80030e8:	4619      	mov	r1, r3
 80030ea:	2309      	movs	r3, #9
 80030ec:	1acb      	subs	r3, r1, r3
 80030ee:	429a      	cmp	r2, r3
 80030f0:	dd02      	ble.n	80030f8 <i2cSmartLCD_Gfx240x128_Locked+0x1a0>
			s_dacPlotPosOfs = 1U;
 80030f2:	4b99      	ldr	r3, [pc, #612]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
		}

		/* Erase x-slot + 2 more columns right of it*/
		{
			i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80030f8:	2209      	movs	r2, #9
 80030fa:	4b97      	ldr	r3, [pc, #604]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	210d      	movs	r1, #13
 8003104:	222b      	movs	r2, #43	; 0x2b
 8003106:	230d      	movs	r3, #13
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2200      	movs	r2, #0
 800310e:	9200      	str	r2, [sp, #0]
 8003110:	2205      	movs	r2, #5
 8003112:	f7ff fca5 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
					LCD1_PIXEL_CLR);
		}

		/* Plot DAC value */
		{
			float 	ampt_y		= (DacGfxPos_y_bot - DacGfxPos_y_top) / 2.0f;
 8003116:	232b      	movs	r3, #43	; 0x2b
 8003118:	461a      	mov	r2, r3
 800311a:	230d      	movs	r3, #13
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003126:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800312a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			uint8_t midPos_y 	= DacGfxPos_y_bot - ampt_y;
 8003132:	232b      	movs	r3, #43	; 0x2b
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800313c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003148:	edc7 7a01 	vstr	s15, [r7, #4]
 800314c:	793b      	ldrb	r3, [r7, #4]
 800314e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			int16_t dacValPlot	= (int16_t)dacVal - (int16_t)I2C_DAC_MCP4725_0_VAL;
 8003152:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003156:	f2a3 63cd 	subw	r3, r3, #1741	; 0x6cd
 800315a:	b29b      	uxth	r3, r3
 800315c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			/* Clipping */
			if (dacValPlot >  (int16_t)ampt_y) {
 8003160:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003168:	ee17 3a90 	vmov	r3, s15
 800316c:	b21b      	sxth	r3, r3
 800316e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8003172:	429a      	cmp	r2, r3
 8003174:	dd07      	ble.n	8003186 <i2cSmartLCD_Gfx240x128_Locked+0x22e>
				dacValPlot =  (int16_t)ampt_y;
 8003176:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800317a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317e:	ee17 3a90 	vmov	r3, s15
 8003182:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			if (dacValPlot < -(int16_t)ampt_y) {
 8003186:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800318a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800318e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003192:	ee17 3a90 	vmov	r3, s15
 8003196:	b21b      	sxth	r3, r3
 8003198:	425b      	negs	r3, r3
 800319a:	429a      	cmp	r2, r3
 800319c:	da0b      	bge.n	80031b6 <i2cSmartLCD_Gfx240x128_Locked+0x25e>
				dacValPlot = -(int16_t)ampt_y;
 800319e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80031a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a6:	ee17 3a90 	vmov	r3, s15
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	425b      	negs	r3, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}

			i2cSmartLCD_Gfx240x128_Draw_Point(
 80031b6:	2209      	movs	r2, #9
 80031b8:	4b67      	ldr	r3, [pc, #412]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2201      	movs	r2, #1
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7ff fbc0 	bl	8002956 <i2cSmartLCD_Gfx240x128_Draw_Point>
		}
	}
#endif

	/* Timeout check */
	now = HAL_GetTick();
 80031d6:	f004 fb33 	bl	8007840 <HAL_GetTick>
 80031da:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 80031dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	f080 84d5 	bcs.w	8003b90 <i2cSmartLCD_Gfx240x128_Locked+0xc38>
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
#endif
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 80031e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d024      	beq.n	8003238 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 80031ee:	4b5b      	ldr	r3, [pc, #364]	; (800335c <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 80031f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d01d      	beq.n	8003238 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 80031fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003200:	f107 0020 	add.w	r0, r7, #32
 8003204:	227e      	movs	r2, #126	; 0x7e
 8003206:	9200      	str	r2, [sp, #0]
 8003208:	4a55      	ldr	r2, [pc, #340]	; (8003360 <i2cSmartLCD_Gfx240x128_Locked+0x408>)
 800320a:	211f      	movs	r1, #31
 800320c:	f00d f990 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  7) - 0U),
						strlen((char*)line1_str), line1_str)) {
 8003210:	f107 0320 	add.w	r3, r7, #32
 8003214:	4618      	mov	r0, r3
 8003216:	f7fc ffe5 	bl	80001e4 <strlen>
 800321a:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800321c:	b2da      	uxtb	r2, r3
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2146      	movs	r1, #70	; 0x46
 8003224:	20a1      	movs	r0, #161	; 0xa1
 8003226:	f7ff fa77 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 84b1 	bne.w	8003b94 <i2cSmartLCD_Gfx240x128_Locked+0xc3c>
					return;
				}
				s_tempLast = temp;
 8003232:	4a4a      	ldr	r2, [pc, #296]	; (800335c <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003238:	f004 fb02 	bl	8007840 <HAL_GetTick>
 800323c:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800323e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	429a      	cmp	r2, r3
 8003244:	f080 84a8 	bcs.w	8003b98 <i2cSmartLCD_Gfx240x128_Locked+0xc40>
			return;
		}

		if (gDOP) {
 8003248:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d042      	beq.n	80032d6 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 8003250:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	eeb4 7a67 	vcmp.f32	s14, s15
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d034      	beq.n	80032d6 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 800326c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003270:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	b29b      	uxth	r3, r3
 800327a:	461c      	mov	r4, r3
 800327c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003282:	fba2 1203 	umull	r1, r2, r2, r3
 8003286:	0952      	lsrs	r2, r2, #5
 8003288:	2164      	movs	r1, #100	; 0x64
 800328a:	fb01 f202 	mul.w	r2, r1, r2
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	f107 0020 	add.w	r0, r7, #32
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4623      	mov	r3, r4
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <i2cSmartLCD_Gfx240x128_Locked+0x414>)
 800329c:	211f      	movs	r1, #31
 800329e:	f00d f947 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  8) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80032a2:	f107 0320 	add.w	r3, r7, #32
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fc ff9c 	bl	80001e4 <strlen>
 80032ac:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	2150      	movs	r1, #80	; 0x50
 80032b6:	20a1      	movs	r0, #161	; 0xa1
 80032b8:	f7ff fa2e 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 846c 	bne.w	8003b9c <i2cSmartLCD_Gfx240x128_Locked+0xc44>
					return;
				}
				s_gDOPLast = gDOP;
 80032c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 80032d2:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80032d6:	f004 fab3 	bl	8007840 <HAL_GetTick>
 80032da:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80032dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	f080 845d 	bcs.w	8003ba0 <i2cSmartLCD_Gfx240x128_Locked+0xc48>
			return;
		}

		if (tAcc) {
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d045      	beq.n	8003378 <i2cSmartLCD_Gfx240x128_Locked+0x420>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d040      	beq.n	8003378 <i2cSmartLCD_Gfx240x128_Locked+0x420>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf28      	it	cs
 8003300:	4613      	movcs	r3, r2
 8003302:	f107 0020 	add.w	r0, r7, #32
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <i2cSmartLCD_Gfx240x128_Locked+0x41c>)
 8003308:	211f      	movs	r1, #31
 800330a:	f00d f911 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  9) - 0U),
						strlen((char*)line2_str), line2_str)) {
 800330e:	f107 0320 	add.w	r3, r7, #32
 8003312:	4618      	mov	r0, r3
 8003314:	f7fc ff66 	bl	80001e4 <strlen>
 8003318:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800331a:	b2da      	uxtb	r2, r3
 800331c:	f107 0320 	add.w	r3, r7, #32
 8003320:	215a      	movs	r1, #90	; 0x5a
 8003322:	20a1      	movs	r0, #161	; 0xa1
 8003324:	f7ff f9f8 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 843a 	bne.w	8003ba4 <i2cSmartLCD_Gfx240x128_Locked+0xc4c>
					return;
				}
				s_tAccLast = tAcc;
 8003330:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01f      	b.n	8003378 <i2cSmartLCD_Gfx240x128_Locked+0x420>
 8003338:	20000264 	.word	0x20000264
 800333c:	20000274 	.word	0x20000274
 8003340:	20000284 	.word	0x20000284
 8003344:	20000294 	.word	0x20000294
 8003348:	20000273 	.word	0x20000273
 800334c:	200002b4 	.word	0x200002b4
 8003350:	200002c4 	.word	0x200002c4
 8003354:	45e7b273 	.word	0x45e7b273
 8003358:	200002c8 	.word	0x200002c8
 800335c:	200002ca 	.word	0x200002ca
 8003360:	08013b7c 	.word	0x08013b7c
 8003364:	200002cc 	.word	0x200002cc
 8003368:	51eb851f 	.word	0x51eb851f
 800336c:	08013b8c 	.word	0x08013b8c
 8003370:	200002d0 	.word	0x200002d0
 8003374:	08013b9c 	.word	0x08013b9c
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003378:	f004 fa62 	bl	8007840 <HAL_GetTick>
 800337c:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800337e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	429a      	cmp	r2, r3
 8003384:	f080 8410 	bcs.w	8003ba8 <i2cSmartLCD_Gfx240x128_Locked+0xc50>
			return;
		}

		if (devPsS) {
 8003388:	edd7 7a03 	vldr	s15, [r7, #12]
 800338c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	d040      	beq.n	8003418 <i2cSmartLCD_Gfx240x128_Locked+0x4c0>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8003396:	4b79      	ldr	r3, [pc, #484]	; (800357c <i2cSmartLCD_Gfx240x128_Locked+0x624>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ed97 7a03 	vldr	s14, [r7, #12]
 80033a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	d036      	beq.n	8003418 <i2cSmartLCD_Gfx240x128_Locked+0x4c0>
				uint8_t line2_str[32];

				/* Clamping */
				{
					if (devPsS >  99.9999f) {
 80033aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ae:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003580 <i2cSmartLCD_Gfx240x128_Locked+0x628>
 80033b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	dd01      	ble.n	80033c0 <i2cSmartLCD_Gfx240x128_Locked+0x468>
						devPsS =  99.9999f;
 80033bc:	4b71      	ldr	r3, [pc, #452]	; (8003584 <i2cSmartLCD_Gfx240x128_Locked+0x62c>)
 80033be:	60fb      	str	r3, [r7, #12]
					}
					if (devPsS < -99.9999f) {
 80033c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80033c4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003588 <i2cSmartLCD_Gfx240x128_Locked+0x630>
 80033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	d501      	bpl.n	80033d6 <i2cSmartLCD_Gfx240x128_Locked+0x47e>
						devPsS = -99.9999f;
 80033d2:	4b6e      	ldr	r3, [pc, #440]	; (800358c <i2cSmartLCD_Gfx240x128_Locked+0x634>)
 80033d4:	60fb      	str	r3, [r7, #12]
					}
				}

				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7fd f8c6 	bl	8000568 <__aeabi_f2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	f107 0020 	add.w	r0, r7, #32
 80033e4:	e9cd 2300 	strd	r2, r3, [sp]
 80033e8:	4a69      	ldr	r2, [pc, #420]	; (8003590 <i2cSmartLCD_Gfx240x128_Locked+0x638>)
 80033ea:	211f      	movs	r1, #31
 80033ec:	f00d f8a0 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 10) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80033f0:	f107 0320 	add.w	r3, r7, #32
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc fef5 	bl	80001e4 <strlen>
 80033fa:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	f107 0320 	add.w	r3, r7, #32
 8003402:	2164      	movs	r1, #100	; 0x64
 8003404:	20a1      	movs	r0, #161	; 0xa1
 8003406:	f7ff f987 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 83cd 	bne.w	8003bac <i2cSmartLCD_Gfx240x128_Locked+0xc54>
					return;
				}
				s_devPsSLast = devPsS;
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <i2cSmartLCD_Gfx240x128_Locked+0x624>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6013      	str	r3, [r2, #0]
			}
		}

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 8003418:	f004 fa12 	bl	8007840 <HAL_GetTick>
 800341c:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800341e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	429a      	cmp	r2, r3
 8003424:	f080 83c4 	bcs.w	8003bb0 <i2cSmartLCD_Gfx240x128_Locked+0xc58>
			return;
		}

		if (dacVal) {
 8003428:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800342c:	2b00      	cmp	r3, #0
 800342e:	d024      	beq.n	800347a <i2cSmartLCD_Gfx240x128_Locked+0x522>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8003430:	4b58      	ldr	r3, [pc, #352]	; (8003594 <i2cSmartLCD_Gfx240x128_Locked+0x63c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800343a:	429a      	cmp	r2, r3
 800343c:	d01d      	beq.n	800347a <i2cSmartLCD_Gfx240x128_Locked+0x522>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 800343e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003442:	f107 0020 	add.w	r0, r7, #32
 8003446:	4a54      	ldr	r2, [pc, #336]	; (8003598 <i2cSmartLCD_Gfx240x128_Locked+0x640>)
 8003448:	211f      	movs	r1, #31
 800344a:	f00d f871 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 11) - 0U),
						strlen((char*)line2_str), line2_str)) {
 800344e:	f107 0320 	add.w	r3, r7, #32
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fec6 	bl	80001e4 <strlen>
 8003458:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800345a:	b2da      	uxtb	r2, r3
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	216e      	movs	r1, #110	; 0x6e
 8003462:	20a1      	movs	r0, #161	; 0xa1
 8003464:	f7ff f958 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 83a2 	bne.w	8003bb4 <i2cSmartLCD_Gfx240x128_Locked+0xc5c>
					return;
				}
				s_dacValLast = dacVal;
 8003470:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <i2cSmartLCD_Gfx240x128_Locked+0x63c>)
 8003478:	701a      	strb	r2, [r3, #0]
		}
#endif

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 800347a:	f004 f9e1 	bl	8007840 <HAL_GetTick>
 800347e:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	f080 8397 	bcs.w	8003bb8 <i2cSmartLCD_Gfx240x128_Locked+0xc60>
			return;
		}

		if (dacFraction) {
 800348a:	edd7 7a02 	vldr	s15, [r7, #8]
 800348e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d02a      	beq.n	80034ee <i2cSmartLCD_Gfx240x128_Locked+0x596>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ed97 7a02 	vldr	s14, [r7, #8]
 80034a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	d020      	beq.n	80034ee <i2cSmartLCD_Gfx240x128_Locked+0x596>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 80034ac:	68b8      	ldr	r0, [r7, #8]
 80034ae:	f7fd f85b 	bl	8000568 <__aeabi_f2d>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	f107 0020 	add.w	r0, r7, #32
 80034ba:	e9cd 2300 	strd	r2, r3, [sp]
 80034be:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <i2cSmartLCD_Gfx240x128_Locked+0x648>)
 80034c0:	211f      	movs	r1, #31
 80034c2:	f00d f835 	bl	8010530 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 12) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80034c6:	f107 0320 	add.w	r3, r7, #32
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fc fe8a 	bl	80001e4 <strlen>
 80034d0:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	f107 0320 	add.w	r3, r7, #32
 80034d8:	2178      	movs	r1, #120	; 0x78
 80034da:	20a1      	movs	r0, #161	; 0xa1
 80034dc:	f7ff f91c 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 836a 	bne.w	8003bbc <i2cSmartLCD_Gfx240x128_Locked+0xc64>
					return;
				}
				s_dacFractionLast = dacFraction;
 80034e8:	4a2c      	ldr	r2, [pc, #176]	; (800359c <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6013      	str	r3, [r2, #0]
#endif
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80034f4:	e33e      	b.n	8003b74 <i2cSmartLCD_Gfx240x128_Locked+0xc1c>
		uint8_t svCh	= svElevSort[svChIdx];
 80034f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t svId 	= svInfo->svid[svCh];
 8003506:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800350a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800350e:	4413      	add	r3, r2
 8003510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003514:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int8_t  svElev	= svInfo->elev[svCh];
 8003518:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800351c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003520:	4413      	add	r3, r2
 8003522:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003526:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		int16_t svAzim	= svInfo->azim[svCh];
 800352a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800352e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003532:	324c      	adds	r2, #76	; 0x4c
 8003534:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003538:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		int8_t  svCno	= svInfo->cno[svCh];
 800353c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003540:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003544:	4413      	add	r3, r2
 8003546:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800354a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

		/* Timeout check */
		now = HAL_GetTick();
 800354e:	f004 f977 	bl	8007840 <HAL_GetTick>
 8003552:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003554:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	429a      	cmp	r2, r3
 800355a:	f080 8331 	bcs.w	8003bc0 <i2cSmartLCD_Gfx240x128_Locked+0xc68>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 800355e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003562:	2b28      	cmp	r3, #40	; 0x28
 8003564:	d902      	bls.n	800356c <i2cSmartLCD_Gfx240x128_Locked+0x614>
			svCno = SvCno_max;
 8003566:	2328      	movs	r3, #40	; 0x28
 8003568:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		}

		/* Limit the elevation data */
		if (svElev > 90) {
 800356c:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 8003570:	2b5a      	cmp	r3, #90	; 0x5a
 8003572:	dd17      	ble.n	80035a4 <i2cSmartLCD_Gfx240x128_Locked+0x64c>
			svElev = 90;
 8003574:	235a      	movs	r3, #90	; 0x5a
 8003576:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800357a:	e01a      	b.n	80035b2 <i2cSmartLCD_Gfx240x128_Locked+0x65a>
 800357c:	20000000 	.word	0x20000000
 8003580:	42c7fff3 	.word	0x42c7fff3
 8003584:	42c7fff3 	.word	0x42c7fff3
 8003588:	c2c7fff3 	.word	0xc2c7fff3
 800358c:	c2c7fff3 	.word	0xc2c7fff3
 8003590:	08013bac 	.word	0x08013bac
 8003594:	200002d4 	.word	0x200002d4
 8003598:	08013bbc 	.word	0x08013bbc
 800359c:	20000004 	.word	0x20000004
 80035a0:	08013bcc 	.word	0x08013bcc
		}
		else if (svElev <  0) {
 80035a4:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da02      	bge.n	80035b2 <i2cSmartLCD_Gfx240x128_Locked+0x65a>
			svElev =  0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);	// [0 .. 24] <-- [0 .. 90]
 80035b2:	f997 206a 	ldrsb.w	r2, [r7, #106]	; 0x6a
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	4add      	ldr	r2, [pc, #884]	; (8003938 <i2cSmartLCD_Gfx240x128_Locked+0x9e0>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 80035cc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80035d0:	4ada      	ldr	r2, [pc, #872]	; (800393c <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3330      	adds	r3, #48	; 0x30
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 80035e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80035e6:	4ad5      	ldr	r2, [pc, #852]	; (800393c <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 80035e8:	fba2 1203 	umull	r1, r2, r2, r3
 80035ec:	0952      	lsrs	r2, r2, #5
 80035ee:	2164      	movs	r1, #100	; 0x64
 80035f0:	fb01 f202 	mul.w	r2, r1, r2
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4ad1      	ldr	r2, [pc, #836]	; (8003940 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3330      	adds	r3, #48	; 0x30
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 800360a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800360e:	4bcc      	ldr	r3, [pc, #816]	; (8003940 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	08d9      	lsrs	r1, r3, #3
 8003616:	460b      	mov	r3, r1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3330      	adds	r3, #48	; 0x30
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 800362a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800362e:	4ac5      	ldr	r2, [pc, #788]	; (8003944 <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 8003630:	5cd3      	ldrb	r3, [r2, r3]
 8003632:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003636:	429a      	cmp	r2, r3
 8003638:	d11c      	bne.n	8003674 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 800363a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800363e:	4ac2      	ldr	r2, [pc, #776]	; (8003948 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 8003640:	5cd3      	ldrb	r3, [r2, r3]
 8003642:	461a      	mov	r2, r3
 8003644:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8003648:	429a      	cmp	r2, r3
 800364a:	d113      	bne.n	8003674 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 800364c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003650:	4abe      	ldr	r2, [pc, #760]	; (800394c <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 8003652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003656:	461a      	mov	r2, r3
 8003658:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 800365c:	429a      	cmp	r2, r3
 800365e:	d109      	bne.n	8003674 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 8003660:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003664:	4aba      	ldr	r2, [pc, #744]	; (8003950 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	461a      	mov	r2, r3
 800366a:	f997 3069 	ldrsb.w	r3, [r7, #105]	; 0x69
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 800366e:	429a      	cmp	r2, r3
 8003670:	f000 827b 	beq.w	8003b6a <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 8003674:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003678:	49b2      	ldr	r1, [pc, #712]	; (8003944 <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 800367a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800367e:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 8003680:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003684:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 8003688:	4aaf      	ldr	r2, [pc, #700]	; (8003948 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 800368a:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[svChIdx]	= svAzim;
 800368c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003690:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8003694:	4aad      	ldr	r2, [pc, #692]	; (800394c <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 8003696:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 800369a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800369e:	f897 1069 	ldrb.w	r1, [r7, #105]	; 0x69
 80036a2:	4aab      	ldr	r2, [pc, #684]	; (8003950 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 80036a4:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 80036a6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036aa:	461a      	mov	r2, r3
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3302      	adds	r3, #2
 80036b6:	b2d8      	uxtb	r0, r3
 80036b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036bc:	2201      	movs	r2, #1
 80036be:	2178      	movs	r1, #120	; 0x78
 80036c0:	f7ff f82a 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 80036c4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036c8:	461a      	mov	r2, r3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3302      	adds	r3, #2
 80036d4:	b2d8      	uxtb	r0, r3
 80036d6:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80036da:	2201      	movs	r2, #1
 80036dc:	2170      	movs	r1, #112	; 0x70
 80036de:	f7ff f81b 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 80036e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036e6:	461a      	mov	r2, r3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3302      	adds	r3, #2
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80036f8:	2201      	movs	r2, #1
 80036fa:	2168      	movs	r1, #104	; 0x68
 80036fc:	f7ff f80c 	bl	8002718 <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003700:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003704:	461a      	mov	r2, r3
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4413      	add	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8003712:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003716:	b2d9      	uxtb	r1, r3
 8003718:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800371c:	3301      	adds	r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2201      	movs	r2, #1
 8003722:	9200      	str	r2, [sp, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	f7ff f99b 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	((LCD1_SMART_LCD_SIZE_Y - 1) 		- svElev),  											// [127 .. 103]
						1, 						(1 + svElev),																				// [1 .. 25]
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800372a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800372e:	461a      	mov	r2, r3
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	4413      	add	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	b2d8      	uxtb	r0, r3
 8003738:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800373c:	f1c3 0319 	rsb	r3, r3, #25
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2200      	movs	r2, #0
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	2166      	movs	r1, #102	; 0x66
 800374a:	f7ff f989 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800374e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003752:	461a      	mov	r2, r3
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	b2d8      	uxtb	r0, r3
 8003760:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003764:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8003768:	b2d9      	uxtb	r1, r3
 800376a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800376e:	3301      	adds	r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2201      	movs	r2, #1
 8003774:	9200      	str	r2, [sp, #0]
 8003776:	2208      	movs	r2, #8
 8003778:	f7ff f972 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						8, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800377c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003780:	461a      	mov	r2, r3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4413      	add	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	b2d8      	uxtb	r0, r3
 800378e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003792:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2200      	movs	r2, #0
 800379a:	9200      	str	r2, [sp, #0]
 800379c:	2208      	movs	r2, #8
 800379e:	213c      	movs	r1, #60	; 0x3c
 80037a0:	f7ff f95e 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float 	ArrowSize = 4.49f;
 80037a4:	4b6b      	ldr	r3, [pc, #428]	; (8003954 <i2cSmartLCD_Gfx240x128_Locked+0x9fc>)
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
				const float 	pntOrig_x = 4.5f + (svChIdx * 10U);
 80037a8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				const float 	pntOrig_y = 56.0f;
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <i2cSmartLCD_Gfx240x128_Locked+0xa00>)
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c

				uint8_t pntWipeTL_x	= (uint8_t) (pntOrig_x - 4.5f);
 80037cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80037d0:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80037e0:	793b      	ldrb	r3, [r7, #4]
 80037e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				uint8_t pntWipeTL_y	= (uint8_t) (pntOrig_y - 4.5f);
 80037e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80037ea:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80037fa:	793b      	ldrb	r3, [r7, #4]
 80037fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				uint8_t lenWipe_xy	= 10U;
 8003800:	230a      	movs	r3, #10
 8003802:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

				uint8_t pntFront_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 8003806:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003808:	f7fc feae 	bl	8000568 <__aeabi_f2d>
 800380c:	4604      	mov	r4, r0
 800380e:	460d      	mov	r5, r1
 8003810:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003812:	f7fc fea9 	bl	8000568 <__aeabi_f2d>
 8003816:	4680      	mov	r8, r0
 8003818:	4689      	mov	r9, r1
 800381a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fe90 	bl	8000544 <__aeabi_i2d>
 8003824:	a342      	add	r3, pc, #264	; (adr r3, 8003930 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fc fef5 	bl	8000618 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	4b48      	ldr	r3, [pc, #288]	; (800395c <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 800383c:	f7fd f816 	bl	800086c <__aeabi_ddiv>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	ec43 2b17 	vmov	d7, r2, r3
 8003848:	eeb0 0a47 	vmov.f32	s0, s14
 800384c:	eef0 0a67 	vmov.f32	s1, s15
 8003850:	f00f f902 	bl	8012a58 <sin>
 8003854:	ec53 2b10 	vmov	r2, r3, d0
 8003858:	4640      	mov	r0, r8
 800385a:	4649      	mov	r1, r9
 800385c:	f7fc fedc 	bl	8000618 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fd20 	bl	80002ac <__adddf3>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f7fd f9a8 	bl	8000bc8 <__aeabi_d2uiz>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				uint8_t pntFront_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 800387e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003880:	f7fc fe72 	bl	8000568 <__aeabi_f2d>
 8003884:	4604      	mov	r4, r0
 8003886:	460d      	mov	r5, r1
 8003888:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800388a:	f7fc fe6d 	bl	8000568 <__aeabi_f2d>
 800388e:	4680      	mov	r8, r0
 8003890:	4689      	mov	r9, r1
 8003892:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fe54 	bl	8000544 <__aeabi_i2d>
 800389c:	a324      	add	r3, pc, #144	; (adr r3, 8003930 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc feb9 	bl	8000618 <__aeabi_dmul>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 80038b4:	f7fc ffda 	bl	800086c <__aeabi_ddiv>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	ec43 2b17 	vmov	d7, r2, r3
 80038c0:	eeb0 0a47 	vmov.f32	s0, s14
 80038c4:	eef0 0a67 	vmov.f32	s1, s15
 80038c8:	f00f f876 	bl	80129b8 <cos>
 80038cc:	ec53 2b10 	vmov	r2, r3, d0
 80038d0:	4640      	mov	r0, r8
 80038d2:	4649      	mov	r1, r9
 80038d4:	f7fc fea0 	bl	8000618 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4620      	mov	r0, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	f7fc fce4 	bl	80002ac <__adddf3>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7fd f96c 	bl	8000bc8 <__aeabi_d2uiz>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				uint8_t pntLeft_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim - 155)	/ 180.0f));
 80038f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038f8:	f7fc fe36 	bl	8000568 <__aeabi_f2d>
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003902:	f7fc fe31 	bl	8000568 <__aeabi_f2d>
 8003906:	4680      	mov	r8, r0
 8003908:	4689      	mov	r9, r1
 800390a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800390e:	3b9b      	subs	r3, #155	; 0x9b
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe17 	bl	8000544 <__aeabi_i2d>
 8003916:	a306      	add	r3, pc, #24	; (adr r3, 8003930 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f7fc fe7c 	bl	8000618 <__aeabi_dmul>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	e018      	b.n	8003960 <i2cSmartLCD_Gfx240x128_Locked+0xa08>
 800392e:	bf00      	nop
 8003930:	54442d18 	.word	0x54442d18
 8003934:	400921fb 	.word	0x400921fb
 8003938:	b60b60b7 	.word	0xb60b60b7
 800393c:	51eb851f 	.word	0x51eb851f
 8003940:	cccccccd 	.word	0xcccccccd
 8003944:	20000264 	.word	0x20000264
 8003948:	20000284 	.word	0x20000284
 800394c:	20000294 	.word	0x20000294
 8003950:	20000274 	.word	0x20000274
 8003954:	408fae14 	.word	0x408fae14
 8003958:	42600000 	.word	0x42600000
 800395c:	40668000 	.word	0x40668000
 8003960:	4b9d      	ldr	r3, [pc, #628]	; (8003bd8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003962:	f7fc ff83 	bl	800086c <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	ec43 2b17 	vmov	d7, r2, r3
 800396e:	eeb0 0a47 	vmov.f32	s0, s14
 8003972:	eef0 0a67 	vmov.f32	s1, s15
 8003976:	f00f f86f 	bl	8012a58 <sin>
 800397a:	ec53 2b10 	vmov	r2, r3, d0
 800397e:	4640      	mov	r0, r8
 8003980:	4649      	mov	r1, r9
 8003982:	f7fc fe49 	bl	8000618 <__aeabi_dmul>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fc fc8d 	bl	80002ac <__adddf3>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7fd f915 	bl	8000bc8 <__aeabi_d2uiz>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint8_t pntLeft_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim - 155)	/ 180.0f));
 80039a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80039a6:	f7fc fddf 	bl	8000568 <__aeabi_f2d>
 80039aa:	4604      	mov	r4, r0
 80039ac:	460d      	mov	r5, r1
 80039ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80039b0:	f7fc fdda 	bl	8000568 <__aeabi_f2d>
 80039b4:	4680      	mov	r8, r0
 80039b6:	4689      	mov	r9, r1
 80039b8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80039bc:	3b9b      	subs	r3, #155	; 0x9b
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdc0 	bl	8000544 <__aeabi_i2d>
 80039c4:	a382      	add	r3, pc, #520	; (adr r3, 8003bd0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc fe25 	bl	8000618 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 80039dc:	f7fc ff46 	bl	800086c <__aeabi_ddiv>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	ec43 2b17 	vmov	d7, r2, r3
 80039e8:	eeb0 0a47 	vmov.f32	s0, s14
 80039ec:	eef0 0a67 	vmov.f32	s1, s15
 80039f0:	f00e ffe2 	bl	80129b8 <cos>
 80039f4:	ec53 2b10 	vmov	r2, r3, d0
 80039f8:	4640      	mov	r0, r8
 80039fa:	4649      	mov	r1, r9
 80039fc:	f7fc fe0c 	bl	8000618 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc fc50 	bl	80002ac <__adddf3>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fd f8d8 	bl	8000bc8 <__aeabi_d2uiz>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				uint8_t pntRight_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim + 155)	/ 180.0f));
 8003a1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a20:	f7fc fda2 	bl	8000568 <__aeabi_f2d>
 8003a24:	4604      	mov	r4, r0
 8003a26:	460d      	mov	r5, r1
 8003a28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003a2a:	f7fc fd9d 	bl	8000568 <__aeabi_f2d>
 8003a2e:	4680      	mov	r8, r0
 8003a30:	4689      	mov	r9, r1
 8003a32:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003a36:	339b      	adds	r3, #155	; 0x9b
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd83 	bl	8000544 <__aeabi_i2d>
 8003a3e:	a364      	add	r3, pc, #400	; (adr r3, 8003bd0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fde8 	bl	8000618 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003a56:	f7fc ff09 	bl	800086c <__aeabi_ddiv>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	ec43 2b17 	vmov	d7, r2, r3
 8003a62:	eeb0 0a47 	vmov.f32	s0, s14
 8003a66:	eef0 0a67 	vmov.f32	s1, s15
 8003a6a:	f00e fff5 	bl	8012a58 <sin>
 8003a6e:	ec53 2b10 	vmov	r2, r3, d0
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	f7fc fdcf 	bl	8000618 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f7fc fc13 	bl	80002ac <__adddf3>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f7fd f89b 	bl	8000bc8 <__aeabi_d2uiz>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				uint8_t pntRight_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim + 155)	/ 180.0f));
 8003a98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a9a:	f7fc fd65 	bl	8000568 <__aeabi_f2d>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003aa4:	f7fc fd60 	bl	8000568 <__aeabi_f2d>
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	4689      	mov	r9, r1
 8003aac:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003ab0:	339b      	adds	r3, #155	; 0x9b
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc fd46 	bl	8000544 <__aeabi_i2d>
 8003ab8:	a345      	add	r3, pc, #276	; (adr r3, 8003bd0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fdab 	bl	8000618 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003ad0:	f7fc fecc 	bl	800086c <__aeabi_ddiv>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	ec43 2b17 	vmov	d7, r2, r3
 8003adc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ae0:	eef0 0a67 	vmov.f32	s1, s15
 8003ae4:	f00e ff68 	bl	80129b8 <cos>
 8003ae8:	ec53 2b10 	vmov	r2, r3, d0
 8003aec:	4640      	mov	r0, r8
 8003aee:	4649      	mov	r1, r9
 8003af0:	f7fc fd92 	bl	8000618 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fbd6 	bl	80002ac <__adddf3>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fd f85e 	bl	8000bc8 <__aeabi_d2uiz>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003b12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003b16:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003b1a:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8003b1e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8003b22:	2400      	movs	r4, #0
 8003b24:	9400      	str	r4, [sp, #0]
 8003b26:	f7fe ff9b 	bl	8002a60 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						pntWipeTL_x, 	pntWipeTL_y,
						lenWipe_xy, 	lenWipe_xy,
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003b2a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b2e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe feb7 	bl	80028a8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						pntFront_x, 	pntFront_y);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b3a:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003b3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b42:	2201      	movs	r2, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe feda 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						pntOrig_x, 		pntOrig_y,
						LCD1_PIXEL_SET);
#endif

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b4a:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8003b4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b52:	2201      	movs	r2, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fed2 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						pntRight_x, 	pntRight_y,
						LCD1_PIXEL_SET);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b5a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003b5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b62:	2201      	movs	r2, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe feca 	bl	80028fe <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003b6a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003b74:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8003b78:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f4ff acba 	bcc.w	80034f6 <i2cSmartLCD_Gfx240x128_Locked+0x59e>
 8003b82:	e01e      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b84:	bf00      	nop
 8003b86:	e01c      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b88:	bf00      	nop
 8003b8a:	e01a      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b8c:	bf00      	nop
 8003b8e:	e018      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b90:	bf00      	nop
 8003b92:	e016      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b94:	bf00      	nop
 8003b96:	e014      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b98:	bf00      	nop
 8003b9a:	e012      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b9c:	bf00      	nop
 8003b9e:	e010      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003ba0:	bf00      	nop
 8003ba2:	e00e      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003ba4:	bf00      	nop
 8003ba6:	e00c      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003ba8:	bf00      	nop
 8003baa:	e00a      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003bac:	bf00      	nop
 8003bae:	e008      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003bb0:	bf00      	nop
 8003bb2:	e006      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003bc0:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 8003bc2:	3770      	adds	r7, #112	; 0x70
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	400921fb 	.word	0x400921fb
 8003bd8:	40668000 	.word	0x40668000

08003bdc <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	4613      	mov	r3, r2
 8003bea:	015b      	lsls	r3, r3, #5
 8003bec:	4413      	add	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <uDelay+0x3c>)
 8003bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8003bfc:	e002      	b.n	8003c04 <uDelay+0x28>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f9      	bne.n	8003bfe <uDelay+0x22>
	}
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	cccccccd 	.word	0xcccccccd

08003c1c <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003c28:	e004      	b.n	8003c34 <memclear+0x18>
		*(ary++) = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	807a      	strh	r2, [r7, #2]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f5      	bne.n	8003c2a <memclear+0xe>
	}
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <calcDcfPhasemod>:

};  Anzahl Einsen: 256 Anzahl Nullen: 256.
*/

void calcDcfPhasemod(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
	/* The result of this function is OK verified against the table above */
	uint16_t shift = 1U;
 8003c52:	2301      	movs	r3, #1
 8003c54:	80fb      	strh	r3, [r7, #6]
#if 0
	/* Prepare */
	memclear(gDcfPhaseMod, 512);
#endif

	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003c56:	2300      	movs	r3, #0
 8003c58:	80bb      	strh	r3, [r7, #4]
 8003c5a:	e02a      	b.n	8003cb2 <calcDcfPhasemod+0x66>
		uint8_t b5		= (0 != (shift & 0b000010000U));
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	70fb      	strb	r3, [r7, #3]
		uint8_t b9		= (0 != (shift & 0b100000000U));
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	70bb      	strb	r3, [r7, #2]
		uint8_t xor59	= (b5 != b9);
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	78bb      	ldrb	r3, [r7, #2]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	707b      	strb	r3, [r7, #1]
		shift <<= 1;
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	80fb      	strh	r3, [r7, #6]
		if (xor59) {
 8003c96:	787b      	ldrb	r3, [r7, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <calcDcfPhasemod+0x58>
			shift |= 0x01U;
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	80fb      	strh	r3, [r7, #6]
		}

		gDcfPhaseMod[idx] 		 =  xor59;
 8003ca4:	88bb      	ldrh	r3, [r7, #4]
 8003ca6:	4908      	ldr	r1, [pc, #32]	; (8003cc8 <calcDcfPhasemod+0x7c>)
 8003ca8:	787a      	ldrb	r2, [r7, #1]
 8003caa:	54ca      	strb	r2, [r1, r3]
	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	80bb      	strh	r3, [r7, #4]
 8003cb2:	88bb      	ldrh	r3, [r7, #4]
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb8:	d3d0      	bcc.n	8003c5c <calcDcfPhasemod+0x10>
	}
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	20000308 	.word	0x20000308

08003ccc <calcDcfPrnCorrelation>:

uint8_t calcDcfPrnCorrelation(uint8_t sub16Frm, volatile int8_t in_Phase_ary[], uint16_t* shiftPos, uint16_t* corSum)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b091      	sub	sp, #68	; 0x44
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
	int32_t  maxSum = 0L,	minSum = 0L;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t maxPos = 0U, 	minPos = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ce8:	2300      	movs	r3, #0
 8003cea:	86bb      	strh	r3, [r7, #52]	; 0x34
	int32_t  deciderBoundaryLo = 0L;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
	int32_t  deciderBoundaryHi = 0L;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
	 * +18 deg	= -28 ticks
	 */

	/* Decider adjustments */
	{
		int32_t	 deciderMax	= 0L;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t	 deciderMin	= 0L;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Starting second */
		for (uint16_t idx = 0U; idx < 31U; ++idx) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d00:	e077      	b.n	8003df2 <calcDcfPrnCorrelation+0x126>
			if (		(deciderMax < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMin + 80L) > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003d02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d04:	4aa4      	ldr	r2, [pc, #656]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003d06:	fba2 1203 	umull	r1, r2, r2, r3
 8003d0a:	0a92      	lsrs	r2, r2, #10
 8003d0c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003d10:	fb01 f202 	mul.w	r2, r1, r2
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	4293      	cmp	r3, r2
 8003d28:	da26      	bge.n	8003d78 <calcDcfPrnCorrelation+0xac>
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8003d30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d32:	4999      	ldr	r1, [pc, #612]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003d34:	fba1 0103 	umull	r0, r1, r1, r3
 8003d38:	0a89      	lsrs	r1, r1, #10
 8003d3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003d3e:	fb00 f101 	mul.w	r1, r0, r1
 8003d42:	1a5b      	subs	r3, r3, r1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	440b      	add	r3, r1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	429a      	cmp	r2, r3
 8003d52:	db11      	blt.n	8003d78 <calcDcfPrnCorrelation+0xac>
				 	 	 deciderMax = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003d54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d56:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003d58:	fba2 1203 	umull	r1, r2, r2, r3
 8003d5c:	0a92      	lsrs	r2, r2, #10
 8003d5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003d62:	fb01 f202 	mul.w	r2, r1, r2
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
 8003d76:	e039      	b.n	8003dec <calcDcfPrnCorrelation+0x120>
			}
			else if (	(deciderMin > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMax - 80L) < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003d78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d7a:	4a87      	ldr	r2, [pc, #540]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003d7c:	fba2 1203 	umull	r1, r2, r2, r3
 8003d80:	0a92      	lsrs	r2, r2, #10
 8003d82:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003d86:	fb01 f202 	mul.w	r2, r1, r2
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b25b      	sxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	dd25      	ble.n	8003dec <calcDcfPrnCorrelation+0x120>
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8003da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003da8:	497b      	ldr	r1, [pc, #492]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003daa:	fba1 0103 	umull	r0, r1, r1, r3
 8003dae:	0a89      	lsrs	r1, r1, #10
 8003db0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003db4:	fb00 f101 	mul.w	r1, r0, r1
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	440b      	add	r3, r1
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	dc10      	bgt.n	8003dec <calcDcfPrnCorrelation+0x120>
						 deciderMin = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dcc:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003dce:	fba2 1203 	umull	r1, r2, r2, r3
 8003dd2:	0a92      	lsrs	r2, r2, #10
 8003dd4:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003dd8:	fb01 f202 	mul.w	r2, r1, r2
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = 0U; idx < 31U; ++idx) {
 8003dec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dee:	3301      	adds	r3, #1
 8003df0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003df2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003df4:	2b1e      	cmp	r3, #30
 8003df6:	d984      	bls.n	8003d02 <calcDcfPrnCorrelation+0x36>
			}
		}

		/* Middle of a second */
		for (uint16_t idx = PRN_CORRELATION_SINGLE_BUF_SIZE; idx < (PRN_CORRELATION_SINGLE_BUF_SIZE + 31U); ++idx) {
 8003df8:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8003dfc:	853b      	strh	r3, [r7, #40]	; 0x28
 8003dfe:	e077      	b.n	8003ef0 <calcDcfPrnCorrelation+0x224>
			if (		(deciderMax < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMin + 80L) > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003e00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e02:	4a65      	ldr	r2, [pc, #404]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003e04:	fba2 1203 	umull	r1, r2, r2, r3
 8003e08:	0a92      	lsrs	r2, r2, #10
 8003e0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e0e:	fb01 f202 	mul.w	r2, r1, r2
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	4293      	cmp	r3, r2
 8003e26:	da26      	bge.n	8003e76 <calcDcfPrnCorrelation+0x1aa>
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8003e2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e30:	4959      	ldr	r1, [pc, #356]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003e32:	fba1 0103 	umull	r0, r1, r1, r3
 8003e36:	0a89      	lsrs	r1, r1, #10
 8003e38:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003e3c:	fb00 f101 	mul.w	r1, r0, r1
 8003e40:	1a5b      	subs	r3, r3, r1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	440b      	add	r3, r1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	db11      	blt.n	8003e76 <calcDcfPrnCorrelation+0x1aa>
						 deciderMax = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003e52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e54:	4a50      	ldr	r2, [pc, #320]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003e56:	fba2 1203 	umull	r1, r2, r2, r3
 8003e5a:	0a92      	lsrs	r2, r2, #10
 8003e5c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e60:	fb01 f202 	mul.w	r2, r1, r2
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
 8003e74:	e039      	b.n	8003eea <calcDcfPrnCorrelation+0x21e>
			}
			else if (	(deciderMin > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMax - 80L) < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e78:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003e7a:	fba2 1203 	umull	r1, r2, r2, r3
 8003e7e:	0a92      	lsrs	r2, r2, #10
 8003e80:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e84:	fb01 f202 	mul.w	r2, r1, r2
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	dd25      	ble.n	8003eea <calcDcfPrnCorrelation+0x21e>
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8003ea4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ea6:	493c      	ldr	r1, [pc, #240]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003ea8:	fba1 0103 	umull	r0, r1, r1, r3
 8003eac:	0a89      	lsrs	r1, r1, #10
 8003eae:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003eb2:	fb00 f101 	mul.w	r1, r0, r1
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	440b      	add	r3, r1
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	dc10      	bgt.n	8003eea <calcDcfPrnCorrelation+0x21e>
						 deciderMin = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003ec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eca:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <calcDcfPrnCorrelation+0x2cc>)
 8003ecc:	fba2 1203 	umull	r1, r2, r2, r3
 8003ed0:	0a92      	lsrs	r2, r2, #10
 8003ed2:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003ed6:	fb01 f202 	mul.w	r2, r1, r2
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = PRN_CORRELATION_SINGLE_BUF_SIZE; idx < (PRN_CORRELATION_SINGLE_BUF_SIZE + 31U); ++idx) {
 8003eea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eec:	3301      	adds	r3, #1
 8003eee:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ef0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ef2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ef6:	d983      	bls.n	8003e00 <calcDcfPrnCorrelation+0x134>
			}
		}

		/* Calculate the boundaries */
		deciderBoundaryLo =  -((deciderMax - deciderMin) / 3);
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <calcDcfPrnCorrelation+0x2d0>)
 8003f00:	fb82 1203 	smull	r1, r2, r2, r3
 8003f04:	17db      	asrs	r3, r3, #31
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	61fb      	str	r3, [r7, #28]
		deciderBoundaryHi =  +((deciderMax - deciderMin) / 3);
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <calcDcfPrnCorrelation+0x2d0>)
 8003f12:	fb82 1203 	smull	r1, r2, r2, r3
 8003f16:	17db      	asrs	r3, r3, #31
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	61bb      	str	r3, [r7, #24]
	}

	/* Decider on each timing position */
	for (uint16_t shft = (sub16Frm * 128U); shft < ((sub16Frm + 2U) * 128U); shft++) {
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	01db      	lsls	r3, r3, #7
 8003f22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f24:	e081      	b.n	800402a <calcDcfPrnCorrelation+0x35e>
		int16_t sum = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	84bb      	strh	r3, [r7, #36]	; 0x24

		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f2e:	e060      	b.n	8003ff2 <calcDcfPrnCorrelation+0x326>
			uint16_t thisPos = ((idx * PRN_CORRELATION_OVERSAMPLE) + shft) % PRN_CORRELATION_SINGLE_BUF_SIZE;
 8003f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f36:	4413      	add	r3, r2
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <calcDcfPrnCorrelation+0x2d4>)
 8003f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8003f3e:	1251      	asrs	r1, r2, #9
 8003f40:	17da      	asrs	r2, r3, #31
 8003f42:	1a8a      	subs	r2, r1, r2
 8003f44:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003f48:	fb01 f202 	mul.w	r2, r1, r2
 8003f4c:	1a9a      	subs	r2, r3, r2
 8003f4e:	4613      	mov	r3, r2
 8003f50:	82fb      	strh	r3, [r7, #22]

			if (
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f52:	8afb      	ldrh	r3, [r7, #22]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4413      	add	r3, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
			if (
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4293      	cmp	r3, r2
 8003f62:	da04      	bge.n	8003f6e <calcDcfPrnCorrelation+0x2a2>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <calcDcfPrnCorrelation+0x2d8>)
 8003f68:	5cd3      	ldrb	r3, [r2, r3]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00d      	beq.n	8003f8a <calcDcfPrnCorrelation+0x2be>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8003f6e:	8afb      	ldrh	r3, [r7, #22]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	dd13      	ble.n	8003fa8 <calcDcfPrnCorrelation+0x2dc>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8003f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <calcDcfPrnCorrelation+0x2d8>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <calcDcfPrnCorrelation+0x2dc>
				) {  	/* non-inverse correlation */
				sum++;
 8003f8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f96:	e029      	b.n	8003fec <calcDcfPrnCorrelation+0x320>
 8003f98:	d1b71759 	.word	0xd1b71759
 8003f9c:	55555556 	.word	0x55555556
 8003fa0:	68db8bad 	.word	0x68db8bad
 8003fa4:	20000308 	.word	0x20000308
			}
			else if (	/* inverse correlation */
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003fa8:	8afb      	ldrh	r3, [r7, #22]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
			else if (	/* inverse correlation */
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	dd04      	ble.n	8003fc4 <calcDcfPrnCorrelation+0x2f8>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fbc:	4a33      	ldr	r2, [pc, #204]	; (800408c <calcDcfPrnCorrelation+0x3c0>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00d      	beq.n	8003fe0 <calcDcfPrnCorrelation+0x314>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 8003fc4:	8afb      	ldrh	r3, [r7, #22]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	da0a      	bge.n	8003fec <calcDcfPrnCorrelation+0x320>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 8003fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	; (800408c <calcDcfPrnCorrelation+0x3c0>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <calcDcfPrnCorrelation+0x320>
				) {
				sum--;
 8003fe0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8003fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fee:	3301      	adds	r3, #1
 8003ff0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d39a      	bcc.n	8003f30 <calcDcfPrnCorrelation+0x264>
			}
		}  // for (idx)

		if (maxSum < sum) {
 8003ffa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	da05      	bge.n	8004010 <calcDcfPrnCorrelation+0x344>
			maxSum = sum;
 8004004:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
			maxPos = shft;
 800400a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800400c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800400e:	e009      	b.n	8004024 <calcDcfPrnCorrelation+0x358>
		}
		else if (minSum > sum) {
 8004010:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004016:	429a      	cmp	r2, r3
 8004018:	dd04      	ble.n	8004024 <calcDcfPrnCorrelation+0x358>
			minSum = sum;
 800401a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800401e:	63bb      	str	r3, [r7, #56]	; 0x38
			minPos = shft;
 8004020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004022:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (uint16_t shft = (sub16Frm * 128U); shft < ((sub16Frm + 2U) * 128U); shft++) {
 8004024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004026:	3301      	adds	r3, #1
 8004028:	84fb      	strh	r3, [r7, #38]	; 0x26
 800402a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	3302      	adds	r3, #2
 8004030:	01db      	lsls	r3, r3, #7
 8004032:	429a      	cmp	r2, r3
 8004034:	f4ff af77 	bcc.w	8003f26 <calcDcfPrnCorrelation+0x25a>
		}
	}  // for (shft)

	/* Decider */
	if (maxSum > -minSum) {
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	425b      	negs	r3, r3
 800403c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800403e:	429a      	cmp	r2, r3
 8004040:	dd0e      	ble.n	8004060 <calcDcfPrnCorrelation+0x394>
		/* Bitstream is non-inverse PRN */
		if (shiftPos) {
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <calcDcfPrnCorrelation+0x382>
			*shiftPos 	=  maxPos;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800404c:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <calcDcfPrnCorrelation+0x390>
			*corSum		= +maxSum;
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	b29a      	uxth	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '0' */
		return 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	e00f      	b.n	8004080 <calcDcfPrnCorrelation+0x3b4>
	}
	else {
		/* Bitstream is inverse PRN */
		if (shiftPos) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <calcDcfPrnCorrelation+0x3a0>
			*shiftPos	=  minPos;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800406a:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <calcDcfPrnCorrelation+0x3b2>
			*corSum		= -minSum;
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	b29b      	uxth	r3, r3
 8004076:	425b      	negs	r3, r3
 8004078:	b29a      	uxth	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '1' */
		return 1U;
 800407e:	2301      	movs	r3, #1
	}
}
 8004080:	4618      	mov	r0, r3
 8004082:	3744      	adds	r7, #68	; 0x44
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000308 	.word	0x20000308

08004090 <calcDcfTelegram>:

uint8_t calcDcfTelegram(uint8_t* tc_ary, dcfTimeTelegr_t* dcfNxtMinuteTime)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
	if (tc_ary && dcfNxtMinuteTime) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 81b8 	beq.w	8004412 <calcDcfTelegram+0x382>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 81b4 	beq.w	8004412 <calcDcfTelegram+0x382>
		dcfNxtMinuteTime->rufBit	=  tc_ary[15];																	// b1:  Calling staff in Braunschweig, b0: else.
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	330f      	adds	r3, #15
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	b2d9      	uxtb	r1, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	7813      	ldrb	r3, [r2, #0]
 80040ba:	f361 0300 	bfi	r3, r1, #0, #1
 80040be:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a1		=  tc_ary[16];																	// b1:  time change (MEZ <--> MESZ) to come in the next hour, b0: else.
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3310      	adds	r3, #16
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b2d9      	uxtb	r1, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	7813      	ldrb	r3, [r2, #0]
 80040d0:	f361 0341 	bfi	r3, r1, #1, #1
 80040d4:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->z			= (tc_ary[17] << 1) | tc_ary[18];												// b01: MEZ, b10: MESZ.
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3311      	adds	r3, #17
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	b25a      	sxtb	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3312      	adds	r3, #18
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	7813      	ldrb	r3, [r2, #0]
 80040f6:	f361 0383 	bfi	r3, r1, #2, #2
 80040fa:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a2		=  tc_ary[19];																	// b1:  additional second to be added within the next hour, b0: else.
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3313      	adds	r3, #19
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	b2d9      	uxtb	r1, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	7813      	ldrb	r3, [r2, #0]
 800410c:	f361 1304 	bfi	r3, r1, #4, #1
 8004110:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->s			=  tc_ary[20];																	// b1:  Startbit
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3314      	adds	r3, #20
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	7813      	ldrb	r3, [r2, #0]
 8004122:	f361 1345 	bfi	r3, r1, #5, #1
 8004126:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->_02		= 0U;																			// filling the byte.
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	7813      	ldrb	r3, [r2, #0]
 800412c:	f36f 1387 	bfc	r3, #6, #2
 8004130:	7013      	strb	r3, [r2, #0]

		dcfNxtMinuteTime->mn_xM		= (tc_ary[24] << 3) | (tc_ary[23] << 2) | (tc_ary[22] << 1) | (tc_ary[21]);		// BCD code for the minute, right digit.
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3318      	adds	r3, #24
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	b25a      	sxtb	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3317      	adds	r3, #23
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	b25b      	sxtb	r3, r3
 8004146:	4313      	orrs	r3, r2
 8004148:	b25a      	sxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3316      	adds	r3, #22
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	b25b      	sxtb	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b25a      	sxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3315      	adds	r3, #21
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b25b      	sxtb	r3, r3
 8004160:	4313      	orrs	r3, r2
 8004162:	b25b      	sxtb	r3, r3
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	b2d9      	uxtb	r1, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	7853      	ldrb	r3, [r2, #1]
 800416e:	f361 0303 	bfi	r3, r1, #0, #4
 8004172:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_Mx		=                     (tc_ary[27] << 2) | (tc_ary[26] << 1) | (tc_ary[25]);		// BCD code for the minute, left  digit.
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	331b      	adds	r3, #27
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	b25a      	sxtb	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	331a      	adds	r3, #26
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	b25b      	sxtb	r3, r3
 8004188:	4313      	orrs	r3, r2
 800418a:	b25a      	sxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3319      	adds	r3, #25
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b25b      	sxtb	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	b2d9      	uxtb	r1, r3
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	7853      	ldrb	r3, [r2, #1]
 80041a2:	f361 1306 	bfi	r3, r1, #4, #3
 80041a6:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_P1		=  tc_ary[28];																	// Even parity for the minute.
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	331c      	adds	r3, #28
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	b2d9      	uxtb	r1, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	7853      	ldrb	r3, [r2, #1]
 80041b8:	f361 13c7 	bfi	r3, r1, #7, #1
 80041bc:	7053      	strb	r3, [r2, #1]

		dcfNxtMinuteTime->hr_xH		= (tc_ary[32] << 3) | (tc_ary[31] << 2) | (tc_ary[30] << 1) | (tc_ary[29]);		// BCD code for the hour, right digit.
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3320      	adds	r3, #32
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	331f      	adds	r3, #31
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b25a      	sxtb	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	331e      	adds	r3, #30
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b25a      	sxtb	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	331d      	adds	r3, #29
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	4313      	orrs	r3, r2
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2d9      	uxtb	r1, r3
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	7893      	ldrb	r3, [r2, #2]
 80041fa:	f361 0303 	bfi	r3, r1, #0, #4
 80041fe:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_Hx		=                                         (tc_ary[34] << 1) | (tc_ary[33]);		// BCD code for the hour, left  digit.
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3322      	adds	r3, #34	; 0x22
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	b25a      	sxtb	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3321      	adds	r3, #33	; 0x21
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b25b      	sxtb	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	b25b      	sxtb	r3, r3
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	b2d9      	uxtb	r1, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	7893      	ldrb	r3, [r2, #2]
 8004220:	f361 1305 	bfi	r3, r1, #4, #2
 8004224:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_P2		=  tc_ary[35];																	// Even parity for the hour.
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3323      	adds	r3, #35	; 0x23
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	b2d9      	uxtb	r1, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	7893      	ldrb	r3, [r2, #2]
 8004236:	f361 1386 	bfi	r3, r1, #6, #1
 800423a:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->_11		= 0U;																			// filling the byte.
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	7893      	ldrb	r3, [r2, #2]
 8004240:	f36f 13c7 	bfc	r3, #7, #1
 8004244:	7093      	strb	r3, [r2, #2]

		dcfNxtMinuteTime->dy_xD		= (tc_ary[39] << 3) | (tc_ary[38] << 2) | (tc_ary[37] << 1) | (tc_ary[36]);		// BCD code for the day of the month, right digit.
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3327      	adds	r3, #39	; 0x27
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	b25a      	sxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3326      	adds	r3, #38	; 0x26
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	b25b      	sxtb	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b25a      	sxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3325      	adds	r3, #37	; 0x25
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b25b      	sxtb	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b25a      	sxtb	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3324      	adds	r3, #36	; 0x24
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b25b      	sxtb	r3, r3
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	b2d9      	uxtb	r1, r3
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	78d3      	ldrb	r3, [r2, #3]
 8004282:	f361 0303 	bfi	r3, r1, #0, #4
 8004286:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->dy_Dx		=                                         (tc_ary[41] << 1) | (tc_ary[40]);		// BCD code for the day of the month, left  digit.
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3329      	adds	r3, #41	; 0x29
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	b25a      	sxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3328      	adds	r3, #40	; 0x28
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b25b      	sxtb	r3, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	b25b      	sxtb	r3, r3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	b2d9      	uxtb	r1, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	78d3      	ldrb	r3, [r2, #3]
 80042a8:	f361 1305 	bfi	r3, r1, #4, #2
 80042ac:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->_22		= 0U;																			// filling the byte.
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	78d3      	ldrb	r3, [r2, #3]
 80042b2:	f36f 1387 	bfc	r3, #6, #2
 80042b6:	70d3      	strb	r3, [r2, #3]

		dcfNxtMinuteTime->wd_xD		=                     (tc_ary[44] << 2) | (tc_ary[43] << 1) | (tc_ary[42]);		// BCD code for the day of the week, 1=monday .. 7=sunday (ISO 8601).
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	332c      	adds	r3, #44	; 0x2c
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	b25a      	sxtb	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	332b      	adds	r3, #43	; 0x2b
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	4313      	orrs	r3, r2
 80042ce:	b25a      	sxtb	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	332a      	adds	r3, #42	; 0x2a
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	4313      	orrs	r3, r2
 80042da:	b25b      	sxtb	r3, r3
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	b2d9      	uxtb	r1, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	7913      	ldrb	r3, [r2, #4]
 80042e6:	f361 0302 	bfi	r3, r1, #0, #3
 80042ea:	7113      	strb	r3, [r2, #4]
		dcfNxtMinuteTime->_35		= 0U;																			// filling the byte.
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	7913      	ldrb	r3, [r2, #4]
 80042f0:	f36f 03c7 	bfc	r3, #3, #5
 80042f4:	7113      	strb	r3, [r2, #4]

		dcfNxtMinuteTime->mo_xM		= (tc_ary[48] << 3) | (tc_ary[47] << 2) | (tc_ary[46] << 1) | (tc_ary[45]);		// BCD code for the month, right digit.
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3330      	adds	r3, #48	; 0x30
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	b25a      	sxtb	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	332f      	adds	r3, #47	; 0x2f
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	b25b      	sxtb	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	b25a      	sxtb	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	332e      	adds	r3, #46	; 0x2e
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b25b      	sxtb	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b25a      	sxtb	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	332d      	adds	r3, #45	; 0x2d
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	4313      	orrs	r3, r2
 8004326:	b25b      	sxtb	r3, r3
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	b2d9      	uxtb	r1, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	7953      	ldrb	r3, [r2, #5]
 8004332:	f361 0303 	bfi	r3, r1, #0, #4
 8004336:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->mo_Mx		= (tc_ary[49]);																	// BCD code for the month, left  digit.
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3331      	adds	r3, #49	; 0x31
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	b2d9      	uxtb	r1, r3
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	7953      	ldrb	r3, [r2, #5]
 8004348:	f361 1304 	bfi	r3, r1, #4, #1
 800434c:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->_43		= 0U;																			// filling the byte.
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	7953      	ldrb	r3, [r2, #5]
 8004352:	f36f 1347 	bfc	r3, #5, #3
 8004356:	7153      	strb	r3, [r2, #5]

		dcfNxtMinuteTime->yr_xY		= (tc_ary[53] << 3) | (tc_ary[52] << 2) | (tc_ary[51] << 1) | (tc_ary[50]);		// BCD code for the last two digits of the year, right digit.
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3335      	adds	r3, #53	; 0x35
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	b25a      	sxtb	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3334      	adds	r3, #52	; 0x34
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	b25b      	sxtb	r3, r3
 800436c:	4313      	orrs	r3, r2
 800436e:	b25a      	sxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3333      	adds	r3, #51	; 0x33
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	b25b      	sxtb	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b25a      	sxtb	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3332      	adds	r3, #50	; 0x32
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b25b      	sxtb	r3, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	b25b      	sxtb	r3, r3
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	b2d9      	uxtb	r1, r3
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	7993      	ldrb	r3, [r2, #6]
 8004394:	f361 0303 	bfi	r3, r1, #0, #4
 8004398:	7193      	strb	r3, [r2, #6]
		dcfNxtMinuteTime->yr_Yx		= (tc_ary[57] << 3) | (tc_ary[56] << 2) | (tc_ary[55] << 1) | (tc_ary[54]);		// BCD code for the last two digits of the year, left  digit.
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3339      	adds	r3, #57	; 0x39
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	b25a      	sxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3338      	adds	r3, #56	; 0x38
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b25a      	sxtb	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3337      	adds	r3, #55	; 0x37
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	b25b      	sxtb	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b25a      	sxtb	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3336      	adds	r3, #54	; 0x36
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	7993      	ldrb	r3, [r2, #6]
 80043d6:	f361 1307 	bfi	r3, r1, #4, #4
 80043da:	7193      	strb	r3, [r2, #6]

		dcfNxtMinuteTime->hr_P3		= (tc_ary[58]);																	// Even parity for the date block.
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	333a      	adds	r3, #58	; 0x3a
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	b2d9      	uxtb	r1, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	79d3      	ldrb	r3, [r2, #7]
 80043ec:	f361 0300 	bfi	r3, r1, #0, #1
 80043f0:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->prn_59	= (tc_ary[59]);																	// b0:  Minute ends.
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	333b      	adds	r3, #59	; 0x3b
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	b2d9      	uxtb	r1, r3
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	79d3      	ldrb	r3, [r2, #7]
 8004402:	f361 0341 	bfi	r3, r1, #1, #1
 8004406:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->_57		= 0U;																			// filling the byte.
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	7a13      	ldrb	r3, [r2, #8]
 800440c:	f36f 0306 	bfc	r3, #0, #7
 8004410:	7213      	strb	r3, [r2, #8]
	}

	/* Parity checks */
	{
		if (!dcfNxtMinuteTime->s) {
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <calcDcfTelegram+0x394>
			return 11U;
 8004420:	230b      	movs	r3, #11
 8004422:	e0be      	b.n	80045a2 <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3318      	adds	r3, #24
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3317      	adds	r3, #23
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4053      	eors	r3, r2
 8004432:	b2da      	uxtb	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3316      	adds	r3, #22
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	4053      	eors	r3, r2
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3315      	adds	r3, #21
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4053      	eors	r3, r2
 8004446:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	331b      	adds	r3, #27
 800444c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 800444e:	4053      	eors	r3, r2
 8004450:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	331a      	adds	r3, #26
 8004456:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 8004458:	4053      	eors	r3, r2
 800445a:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3319      	adds	r3, #25
 8004460:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 8004462:	4053      	eors	r3, r2
 8004464:	b2da      	uxtb	r2, r3
				tc_ary[28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	331c      	adds	r3, #28
 800446a:	781b      	ldrb	r3, [r3, #0]
		if (
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <calcDcfTelegram+0x3e4>
		) {
			/* Bad parity P1 */
			return 1U;
 8004470:	2301      	movs	r3, #1
 8004472:	e096      	b.n	80045a2 <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3320      	adds	r3, #32
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	331f      	adds	r3, #31
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4053      	eors	r3, r2
 8004482:	b2da      	uxtb	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	331e      	adds	r3, #30
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	4053      	eors	r3, r2
 800448c:	b2da      	uxtb	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	331d      	adds	r3, #29
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4053      	eors	r3, r2
 8004496:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3322      	adds	r3, #34	; 0x22
 800449c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 800449e:	4053      	eors	r3, r2
 80044a0:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3321      	adds	r3, #33	; 0x21
 80044a6:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 80044a8:	4053      	eors	r3, r2
 80044aa:	b2da      	uxtb	r2, r3
				tc_ary[35]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3323      	adds	r3, #35	; 0x23
 80044b0:	781b      	ldrb	r3, [r3, #0]
		if (
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <calcDcfTelegram+0x42a>
		) {
			/* Bad parity P2 */
			return 2U;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e073      	b.n	80045a2 <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3327      	adds	r3, #39	; 0x27
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3326      	adds	r3, #38	; 0x26
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	4053      	eors	r3, r2
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3325      	adds	r3, #37	; 0x25
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	4053      	eors	r3, r2
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4053      	eors	r3, r2
 80044dc:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3329      	adds	r3, #41	; 0x29
 80044e2:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044e4:	4053      	eors	r3, r2
 80044e6:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3328      	adds	r3, #40	; 0x28
 80044ec:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044ee:	4053      	eors	r3, r2
 80044f0:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	332c      	adds	r3, #44	; 0x2c
 80044f6:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044f8:	4053      	eors	r3, r2
 80044fa:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	332b      	adds	r3, #43	; 0x2b
 8004500:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004502:	4053      	eors	r3, r2
 8004504:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	332a      	adds	r3, #42	; 0x2a
 800450a:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800450c:	4053      	eors	r3, r2
 800450e:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3330      	adds	r3, #48	; 0x30
 8004514:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004516:	4053      	eors	r3, r2
 8004518:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	332f      	adds	r3, #47	; 0x2f
 800451e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004520:	4053      	eors	r3, r2
 8004522:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	332e      	adds	r3, #46	; 0x2e
 8004528:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800452a:	4053      	eors	r3, r2
 800452c:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	332d      	adds	r3, #45	; 0x2d
 8004532:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004534:	4053      	eors	r3, r2
 8004536:	b2da      	uxtb	r2, r3
	                                                   tc_ary[49]  ^
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3331      	adds	r3, #49	; 0x31
 800453c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800453e:	4053      	eors	r3, r2
 8004540:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3335      	adds	r3, #53	; 0x35
 8004546:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004548:	4053      	eors	r3, r2
 800454a:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3334      	adds	r3, #52	; 0x34
 8004550:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004552:	4053      	eors	r3, r2
 8004554:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3333      	adds	r3, #51	; 0x33
 800455a:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800455c:	4053      	eors	r3, r2
 800455e:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004566:	4053      	eors	r3, r2
 8004568:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3339      	adds	r3, #57	; 0x39
 800456e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004570:	4053      	eors	r3, r2
 8004572:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3338      	adds	r3, #56	; 0x38
 8004578:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800457a:	4053      	eors	r3, r2
 800457c:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3337      	adds	r3, #55	; 0x37
 8004582:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004584:	4053      	eors	r3, r2
 8004586:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3336      	adds	r3, #54	; 0x36
 800458c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800458e:	4053      	eors	r3, r2
 8004590:	b2da      	uxtb	r2, r3
				tc_ary[58]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	333a      	adds	r3, #58	; 0x3a
 8004596:	781b      	ldrb	r3, [r3, #0]
		if (
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <calcDcfTelegram+0x510>
		) {
			/* Bad parity P3 */
			return 3U;
 800459c:	2303      	movs	r3, #3
 800459e:	e000      	b.n	80045a2 <calcDcfTelegram+0x512>
		}
	}

	/* All well */
	return 0U;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <main_get_MaidenheadLocator_from_LatLon>:


uint8_t main_get_MaidenheadLocator_from_LatLon(uint8_t maxLen, uint8_t* tgtStr, float lat, float lon)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80045be:	edc7 0a00 	vstr	s1, [r7]
 80045c2:	73fb      	strb	r3, [r7, #15]
	if (
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	f240 80d3 	bls.w	8004772 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(maxLen >= 7)   &&
 80045cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80045d0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004780 <main_get_MaidenheadLocator_from_LatLon+0x1d0>
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	f340 80c9 	ble.w	8004772 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			( -90.0f < lat) && (lat <  +90.0f) &&
 80045e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004784 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 80045e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	f140 80bf 	bpl.w	8004772 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
 80045f4:	edd7 7a00 	vldr	s15, [r7]
 80045f8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004788 <main_get_MaidenheadLocator_from_LatLon+0x1d8>
 80045fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	f340 80b5 	ble.w	8004772 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(-180.0f < lon) && (lon < +180.0f))
 8004608:	edd7 7a00 	vldr	s15, [r7]
 800460c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800478c <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8004610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	f140 80ab 	bpl.w	8004772 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
	{
		/* Grid movement */
		lon += 180.0f;
 800461c:	edd7 7a00 	vldr	s15, [r7]
 8004620:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800478c <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8004624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004628:	edc7 7a00 	vstr	s15, [r7]
		lat +=  90.0f;
 800462c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004630:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004784 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 8004634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004638:	edc7 7a01 	vstr	s15, [r7, #4]

		lon *= 25U;
 800463c:	edd7 7a00 	vldr	s15, [r7]
 8004640:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004648:	edc7 7a00 	vstr	s15, [r7]
		lon	-= 0.5f;
 800464c:	edd7 7a00 	vldr	s15, [r7]
 8004650:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004658:	edc7 7a00 	vstr	s15, [r7]
		lon /= 2U;
 800465c:	ed97 7a00 	vldr	s14, [r7]
 8004660:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004668:	edc7 7a00 	vstr	s15, [r7]
		uint32_t lon_i = (uint32_t) lon;
 800466c:	edd7 7a00 	vldr	s15, [r7]
 8004670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004674:	ee17 3a90 	vmov	r3, s15
 8004678:	61fb      	str	r3, [r7, #28]

		lat *= 25U;
 800467a:	edd7 7a01 	vldr	s15, [r7, #4]
 800467e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004686:	edc7 7a01 	vstr	s15, [r7, #4]
		lat	-= 0.5f;
 800468a:	edd7 7a01 	vldr	s15, [r7, #4]
 800468e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004696:	edc7 7a01 	vstr	s15, [r7, #4]
		uint32_t lat_i = (uint32_t) lat;
 800469a:	edd7 7a01 	vldr	s15, [r7, #4]
 800469e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a2:	ee17 3a90 	vmov	r3, s15
 80046a6:	61bb      	str	r3, [r7, #24]

		uint8_t	lon_p0	= (uint8_t) (lon_i / 250UL);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4a39      	ldr	r2, [pc, #228]	; (8004790 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	75fb      	strb	r3, [r7, #23]
		uint8_t	lat_p0	= (uint8_t) (lat_i / 250UL);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4a36      	ldr	r2, [pc, #216]	; (8004790 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	75bb      	strb	r3, [r7, #22]

		lon_i -= lon_p0 * 250UL;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	22fa      	movs	r2, #250	; 0xfa
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p0 * 250UL;
 80046ce:	7dbb      	ldrb	r3, [r7, #22]
 80046d0:	22fa      	movs	r2, #250	; 0xfa
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p1 = (uint8_t) (lon_i / 25UL);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	757b      	strb	r3, [r7, #21]
		uint8_t lat_p1 = (uint8_t) (lat_i / 25UL);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	753b      	strb	r3, [r7, #20]

		lon_i -= lon_p1 * 25UL;
 80046f4:	7d7a      	ldrb	r2, [r7, #21]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p1 * 25UL;
 8004706:	7d3a      	ldrb	r2, [r7, #20]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p2 = lon_i;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	74fb      	strb	r3, [r7, #19]
		uint8_t lat_p2 = lat_i;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	74bb      	strb	r3, [r7, #18]

		/* Output string */
		*(tgtStr + 0)	= 'A' + lon_p0;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	3341      	adds	r3, #65	; 0x41
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 1)	= 'A' + lat_p0;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3301      	adds	r3, #1
 800472e:	7dba      	ldrb	r2, [r7, #22]
 8004730:	3241      	adds	r2, #65	; 0x41
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 2)	= '0' + lon_p1;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3302      	adds	r3, #2
 800473a:	7d7a      	ldrb	r2, [r7, #21]
 800473c:	3230      	adds	r2, #48	; 0x30
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 3)	= '0' + lat_p1;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3303      	adds	r3, #3
 8004746:	7d3a      	ldrb	r2, [r7, #20]
 8004748:	3230      	adds	r2, #48	; 0x30
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 4)	= 'a' + lon_p2;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3304      	adds	r3, #4
 8004752:	7cfa      	ldrb	r2, [r7, #19]
 8004754:	3261      	adds	r2, #97	; 0x61
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 5)	= 'a' + lat_p2;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	3305      	adds	r3, #5
 800475e:	7cba      	ldrb	r2, [r7, #18]
 8004760:	3261      	adds	r2, #97	; 0x61
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 6)	= 0;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3306      	adds	r3, #6
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]

		return 0;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <main_get_MaidenheadLocator_from_LatLon+0x1c4>
	}

	/* Error */
	return 1;
 8004772:	2301      	movs	r3, #1
}
 8004774:	4618      	mov	r0, r3
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	c2b40000 	.word	0xc2b40000
 8004784:	42b40000 	.word	0x42b40000
 8004788:	c3340000 	.word	0xc3340000
 800478c:	43340000 	.word	0x43340000
 8004790:	10624dd3 	.word	0x10624dd3
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)
  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  gI2cDacMode = 0b00;
 80047a2:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <mainLoop_PLL_calc+0x210>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 80047a8:	4b80      	ldr	r3, [pc, #512]	; (80049ac <mainLoop_PLL_calc+0x214>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 80047b0:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <mainLoop_PLL_calc+0x218>)
 80047b2:	edd3 7a00 	vldr	s15, [r3]
 80047b6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80049b4 <mainLoop_PLL_calc+0x21c>
 80047ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	d508      	bpl.n	80047d6 <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  giTim15Ch2_TicksDiff 	= 0L;
 80047c4:	4b7c      	ldr	r3, [pc, #496]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
			  giTim15Ch2_TicksEvt	= 0UL;
 80047ca:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <mainLoop_PLL_calc+0x224>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 80047d0:	4b74      	ldr	r3, [pc, #464]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (gUbloxTimeAcc >= 500UL) {  // when worse than that stop time tracking
 80047d6:	4b7a      	ldr	r3, [pc, #488]	; (80049c0 <mainLoop_PLL_calc+0x228>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047de:	d308      	bcc.n	80047f2 <mainLoop_PLL_calc+0x5a>
		  /* Keep sum-up registers cleared */
		  giTim15Ch2_TicksDiff 	= 0L;
 80047e0:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
		  giTim15Ch2_TicksEvt	= 0UL;
 80047e6:	4b75      	ldr	r3, [pc, #468]	; (80049bc <mainLoop_PLL_calc+0x224>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 80047ec:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
	  }

	  if (giTim15Ch2_TicksEvt > 15) {
 80047f2:	4b72      	ldr	r3, [pc, #456]	; (80049bc <mainLoop_PLL_calc+0x224>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	f240 80c8 	bls.w	800498c <mainLoop_PLL_calc+0x1f4>
		  /* Fractions accounting */
		  if (0 < giTim15Ch2_TicksDiff) {
 80047fc:	4b6e      	ldr	r3, [pc, #440]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	dd2d      	ble.n	8004860 <mainLoop_PLL_calc+0xc8>
			  if (giTim15Ch2_ppm > 0.0f) {
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <mainLoop_PLL_calc+0x22c>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	dd12      	ble.n	800483a <mainLoop_PLL_calc+0xa2>
				  gI2cDacFraction -= giTim15Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 8004814:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004820:	eddf 6a69 	vldr	s13, [pc, #420]	; 80049c8 <mainLoop_PLL_calc+0x230>
 8004824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004828:	4b68      	ldr	r3, [pc, #416]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800482a:	ed93 7a00 	vldr	s14, [r3]
 800482e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004832:	4b66      	ldr	r3, [pc, #408]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
 8004838:	e043      	b.n	80048c2 <mainLoop_PLL_calc+0x12a>
			  } else {
				  gI2cDacFraction += giTim15Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 800483a:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004846:	eddf 6a62 	vldr	s13, [pc, #392]	; 80049d0 <mainLoop_PLL_calc+0x238>
 800484a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800484e:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004858:	4b5c      	ldr	r3, [pc, #368]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800485a:	edc3 7a00 	vstr	s15, [r3]
 800485e:	e030      	b.n	80048c2 <mainLoop_PLL_calc+0x12a>
			  }
		  }
		  else if (giTim15Ch2_TicksDiff < 0) {
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	da2c      	bge.n	80048c2 <mainLoop_PLL_calc+0x12a>
			  if (giTim15Ch2_ppm < 0.0f) {
 8004868:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <mainLoop_PLL_calc+0x22c>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d512      	bpl.n	800489e <mainLoop_PLL_calc+0x106>
				  gI2cDacFraction -= giTim15Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 8004878:	4b4f      	ldr	r3, [pc, #316]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004884:	eddf 6a50 	vldr	s13, [pc, #320]	; 80049c8 <mainLoop_PLL_calc+0x230>
 8004888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800488e:	ed93 7a00 	vldr	s14, [r3]
 8004892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004896:	4b4d      	ldr	r3, [pc, #308]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004898:	edc3 7a00 	vstr	s15, [r3]
 800489c:	e011      	b.n	80048c2 <mainLoop_PLL_calc+0x12a>
			  } else {
				  gI2cDacFraction += giTim15Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 800489e:	4b46      	ldr	r3, [pc, #280]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048aa:	eddf 6a49 	vldr	s13, [pc, #292]	; 80049d0 <mainLoop_PLL_calc+0x238>
 80048ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80048b2:	4b46      	ldr	r3, [pc, #280]	; (80049cc <mainLoop_PLL_calc+0x234>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <mainLoop_PLL_calc+0x234>)
 80048be:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (gI2cDacFraction > +0.501f) {
 80048c2:	4b42      	ldr	r3, [pc, #264]	; (80049cc <mainLoop_PLL_calc+0x234>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80049d4 <mainLoop_PLL_calc+0x23c>
 80048cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	dd28      	ble.n	8004928 <mainLoop_PLL_calc+0x190>
			  if (gI2cDacVal < 2046) {
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	f240 72fd 	movw	r2, #2045	; 0x7fd
 80048de:	4293      	cmp	r3, r2
 80048e0:	d805      	bhi.n	80048ee <mainLoop_PLL_calc+0x156>
				  ++gI2cDacVal;
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 80048ec:	801a      	strh	r2, [r3, #0]
			  }

			  gI2cDacFraction -= 1.0f;
 80048ee:	4b37      	ldr	r3, [pc, #220]	; (80049cc <mainLoop_PLL_calc+0x234>)
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <mainLoop_PLL_calc+0x234>)
 80048fe:	edc3 7a00 	vstr	s15, [r3]

			  if (gI2cDacFraction > +0.501f) {
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004904:	edd3 7a00 	vldr	s15, [r3]
 8004908:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80049d4 <mainLoop_PLL_calc+0x23c>
 800490c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	dc00      	bgt.n	8004918 <mainLoop_PLL_calc+0x180>
		  giTim15Ch2_TicksDiff	= 0UL;
	  }
  }

#endif
}
 8004916:	e03f      	b.n	8004998 <mainLoop_PLL_calc+0x200>
				  gI2cDacFraction = +0.5f;
 8004918:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800491a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800491e:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
}
 8004926:	e037      	b.n	8004998 <mainLoop_PLL_calc+0x200>
		  else if (gI2cDacFraction < -0.501f) {
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800492a:	edd3 7a00 	vldr	s15, [r3]
 800492e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80049dc <mainLoop_PLL_calc+0x244>
 8004932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d400      	bmi.n	800493e <mainLoop_PLL_calc+0x1a6>
}
 800493c:	e02c      	b.n	8004998 <mainLoop_PLL_calc+0x200>
			  if (gI2cDacVal > 0) {
 800493e:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <mainLoop_PLL_calc+0x1ba>
				  --gI2cDacVal;
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <mainLoop_PLL_calc+0x240>)
 8004950:	801a      	strh	r2, [r3, #0]
			  gI2cDacFraction += 1.0f;
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004962:	edc3 7a00 	vstr	s15, [r3]
			  if (gI2cDacFraction < -0.501f) {
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <mainLoop_PLL_calc+0x234>)
 8004968:	edd3 7a00 	vldr	s15, [r3]
 800496c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80049dc <mainLoop_PLL_calc+0x244>
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d400      	bmi.n	800497c <mainLoop_PLL_calc+0x1e4>
}
 800497a:	e00d      	b.n	8004998 <mainLoop_PLL_calc+0x200>
				  gI2cDacFraction = -0.5f;
 800497c:	4b13      	ldr	r3, [pc, #76]	; (80049cc <mainLoop_PLL_calc+0x234>)
 800497e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8004982:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
}
 800498a:	e005      	b.n	8004998 <mainLoop_PLL_calc+0x200>
		  giTim15Ch2_TicksDiff	= 0UL;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <mainLoop_PLL_calc+0x220>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
		  gpioLockedLED = GPIO_PIN_RESET;
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <mainLoop_PLL_calc+0x20c>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000244 	.word	0x20000244
 80049a8:	20000255 	.word	0x20000255
 80049ac:	20000247 	.word	0x20000247
 80049b0:	2000024c 	.word	0x2000024c
 80049b4:	42200000 	.word	0x42200000
 80049b8:	200005cc 	.word	0x200005cc
 80049bc:	200005c8 	.word	0x200005c8
 80049c0:	2000000c 	.word	0x2000000c
 80049c4:	200005d4 	.word	0x200005d4
 80049c8:	47435000 	.word	0x47435000
 80049cc:	2000025c 	.word	0x2000025c
 80049d0:	48435000 	.word	0x48435000
 80049d4:	3f004189 	.word	0x3f004189
 80049d8:	20000258 	.word	0x20000258
 80049dc:	bf004189 	.word	0xbf004189

080049e0 <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
	  }

# endif

#endif
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	}
#endif

	/* Request only when needed */
	{
		if (!gUbloxNavPosllh.iTOW) {
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <mainLoop_ublox_requests+0x40>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <mainLoop_ublox_requests+0x12>
			ublox_NavPosllh_req(&gUbloxNavPosllh);
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <mainLoop_ublox_requests+0x40>)
 80049fe:	f002 f9d3 	bl	8006da8 <ublox_NavPosllh_req>
		}

		if (!gUbloxNavClock.iTOW) {
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <mainLoop_ublox_requests+0x44>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <mainLoop_ublox_requests+0x20>
			ublox_NavClock_req(&gUbloxNavClock);
 8004a0a:	480a      	ldr	r0, [pc, #40]	; (8004a34 <mainLoop_ublox_requests+0x44>)
 8004a0c:	f002 fa08 	bl	8006e20 <ublox_NavClock_req>
		}

		if (!gUbloxNavDop.iTOW) {
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <mainLoop_ublox_requests+0x48>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <mainLoop_ublox_requests+0x2e>
			ublox_NavDop_req(&gUbloxNavDop);
 8004a18:	4807      	ldr	r0, [pc, #28]	; (8004a38 <mainLoop_ublox_requests+0x48>)
 8004a1a:	f002 fa3d 	bl	8006e98 <ublox_NavDop_req>
		}

		if (!gUbloxNavSvinfo.iTOW) {
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <mainLoop_ublox_requests+0x4c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <mainLoop_ublox_requests+0x3c>
			ublox_NavSvinfo_req(&gUbloxNavSvinfo);
 8004a26:	4805      	ldr	r0, [pc, #20]	; (8004a3c <mainLoop_ublox_requests+0x4c>)
 8004a28:	f002 fa72 	bl	8006f10 <ublox_NavSvinfo_req>
		}
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	2000320c 	.word	0x2000320c
 8004a34:	20003228 	.word	0x20003228
 8004a38:	2000323c 	.word	0x2000323c
 8004a3c:	20003250 	.word	0x20003250

08004a40 <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	gUbloxRespBf = ublox_All_resp();
 8004a44:	f002 faa0 	bl	8006f88 <ublox_All_resp>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <mainLoop_ublox_waitForResponses+0x1c>)
 8004a4c:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	gUbloxTimeAcc = gUbloxNavClock.tAcc;
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <mainLoop_ublox_waitForResponses+0x20>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <mainLoop_ublox_waitForResponses+0x24>)
 8004a54:	6013      	str	r3, [r2, #0]
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20003208 	.word	0x20003208
 8004a60:	20003228 	.word	0x20003228
 8004a64:	2000000c 	.word	0x2000000c

08004a68 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b08d      	sub	sp, #52	; 0x34
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8004a70:	2318      	movs	r3, #24
 8004a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004a82:	e013      	b.n	8004aac <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 8004a84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004a92:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8004a96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	22ff      	movs	r2, #255	; 0xff
 8004aa0:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004aa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004aac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ab0:	2b17      	cmp	r3, #23
 8004ab2:	d9e7      	bls.n	8004a84 <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004aba:	e098      	b.n	8004bee <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8004abc:	23ff      	movs	r3, #255	; 0xff
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 8004ac2:	2381      	movs	r3, #129	; 0x81
 8004ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004ad4:	e044      	b.n	8004b60 <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8004ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ada:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ade:	4413      	add	r3, r2
 8004ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= gUbloxNavSvinfo.elev[elevCh];
 8004ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004aec:	4a46      	ldr	r2, [pc, #280]	; (8004c08 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004aee:	4413      	add	r3, r2
 8004af0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (gUbloxNavSvinfo.quality[elevCh] & 0x0dU) && !(gUbloxNavSvinfo.quality[elevCh] & 0x10U);
 8004af8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004afc:	4a42      	ldr	r2, [pc, #264]	; (8004c08 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004afe:	4413      	add	r3, r2
 8004b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b04:	f003 030d 	and.w	r3, r3, #13
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <mainLoop_ublox_svinfo_sort+0xbc>
 8004b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b10:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004b12:	4413      	add	r3, r2
 8004b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <mainLoop_ublox_svinfo_sort+0xbc>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <mainLoop_ublox_svinfo_sort+0xbe>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 8004b2a:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 8004b2e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004b32:	429a      	cmp	r2, r3
 8004b34:	dd0f      	ble.n	8004b56 <mainLoop_ublox_svinfo_sort+0xee>
 8004b36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 8004b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8004b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 8004b4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004b60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3b4      	bcc.n	8004ad6 <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8004b6c:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dd04      	ble.n	8004b7e <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 8004b74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 8004b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004b8a:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8004b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004b96:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b9e:	e013      	b.n	8004bc8 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004baa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004bae:	440a      	add	r2, r1
 8004bb0:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8004bb4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004bb8:	440b      	add	r3, r1
 8004bba:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d3e5      	bcc.n	8004ba0 <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8004bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004bdc:	4413      	add	r3, r2
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004be8:	3301      	adds	r3, #1
 8004bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004bee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bf2:	2b17      	cmp	r3, #23
 8004bf4:	f67f af62 	bls.w	8004abc <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8004bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3734      	adds	r7, #52	; 0x34
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20003250 	.word	0x20003250

08004c0c <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
# if 0
		ublox_NavSvinfo_print(&gUbloxNavSvinfo);
# endif
	}
#endif
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <mainLoop_ow_temp_waitForResponse+0x54>)
 8004c2e:	4413      	add	r3, r2
 8004c30:	78fc      	ldrb	r4, [r7, #3]
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fd f831 	bl	8001c9c <onewireDS18B20_tempRead>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <mainLoop_ow_temp_waitForResponse+0x58>)
 8004c40:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <mainLoop_ow_temp_waitForResponse+0x58>)
 8004c48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5e:	4a06      	ldr	r2, [pc, #24]	; (8004c78 <mainLoop_ow_temp_waitForResponse+0x5c>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	edc3 7a00 	vstr	s15, [r3]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}
 8004c70:	2000543c 	.word	0x2000543c
 8004c74:	20000248 	.word	0x20000248
 8004c78:	2000024c 	.word	0x2000024c

08004c7c <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8004c92:	463b      	mov	r3, r7
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <mainLoop_ow_tempAlarm_req+0x30>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	463a      	mov	r2, r7
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f7fc fe36 	bl	8001918 <onewireMasterTree_search>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <mainLoop_ow_tempAlarm_req+0x34>)
 8004cb2:	701a      	strb	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000247 	.word	0x20000247
 8004cc0:	200002d5 	.word	0x200002d5

08004cc4 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	gAdc_VDDA 		= (3.0f * VREFINT_CAL) / gAdcVrefint_val;  // p. 448f
 8004cd8:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <mainLoop_adc_volts_resp+0xa0>)
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ce2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <mainLoop_adc_volts_resp+0xa4>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <mainLoop_adc_volts_resp+0xa8>)
 8004cf8:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh9_volts	= ( gAdcCh9_val * gAdc_VDDA / 65536.0f);
 8004cfc:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <mainLoop_adc_volts_resp+0xac>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <mainLoop_adc_volts_resp+0xa8>)
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d12:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004d84 <mainLoop_adc_volts_resp+0xb0>
 8004d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <mainLoop_adc_volts_resp+0xb4>)
 8004d1c:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh10_volts	= (gAdcCh10_val * gAdc_VDDA / 65536.0f);
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <mainLoop_adc_volts_resp+0xb8>)
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <mainLoop_adc_volts_resp+0xa8>)
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d36:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004d84 <mainLoop_adc_volts_resp+0xb0>
 8004d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <mainLoop_adc_volts_resp+0xbc>)
 8004d40:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh16_volts	= (gAdcCh16_val * gAdc_VDDA / 65536.0f);
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <mainLoop_adc_volts_resp+0xc0>)
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <mainLoop_adc_volts_resp+0xa8>)
 8004d52:	edd3 7a00 	vldr	s15, [r3]
 8004d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004d84 <mainLoop_adc_volts_resp+0xb0>
 8004d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <mainLoop_adc_volts_resp+0xc4>)
 8004d64:	edc3 7a00 	vstr	s15, [r3]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	08013fd8 	.word	0x08013fd8
 8004d78:	20000222 	.word	0x20000222
 8004d7c:	20000224 	.word	0x20000224
 8004d80:	2000021c 	.word	0x2000021c
 8004d84:	47800000 	.word	0x47800000
 8004d88:	20000228 	.word	0x20000228
 8004d8c:	2000021e 	.word	0x2000021e
 8004d90:	2000022c 	.word	0x2000022c
 8004d94:	20000220 	.word	0x20000220
 8004d98:	20000230 	.word	0x20000230

08004d9c <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
		  gAdcCh16_val,
		  gAdcCh16_val,
		  gAdcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
#endif
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
	if (giTim15Ch2_TicksEvt) {
 8004db0:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <mainLoop_tim_deviation_resp+0xe4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05e      	beq.n	8004e76 <mainLoop_tim_deviation_resp+0xca>
		/* Export accumulated deviation */
		if (giTim15Ch2_TicksDiff >= 0L) {
 8004db8:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <mainLoop_tim_deviation_resp+0xe8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db20      	blt.n	8004e02 <mainLoop_tim_deviation_resp+0x56>
			giTim2Ch2_TicksSumDev = (int32_t) (+0.5f + giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt));
 8004dc0:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <mainLoop_tim_deviation_resp+0xe8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dcc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004e98 <mainLoop_tim_deviation_resp+0xec>
 8004dd0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <mainLoop_tim_deviation_resp+0xe4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004de4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df8:	ee17 2a90 	vmov	r2, s15
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <mainLoop_tim_deviation_resp+0xf0>)
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e01f      	b.n	8004e42 <mainLoop_tim_deviation_resp+0x96>
		}
		else {
			giTim2Ch2_TicksSumDev = (int32_t) (-0.5f + giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt));
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <mainLoop_tim_deviation_resp+0xe8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e0e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e98 <mainLoop_tim_deviation_resp+0xec>
 8004e12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <mainLoop_tim_deviation_resp+0xe4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004e26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <mainLoop_tim_deviation_resp+0xf0>)
 8004e40:	601a      	str	r2, [r3, #0]
		}

		gMdevPsS = giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt);
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <mainLoop_tim_deviation_resp+0xe8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004e98 <mainLoop_tim_deviation_resp+0xec>
 8004e52:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <mainLoop_tim_deviation_resp+0xe4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004e66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <mainLoop_tim_deviation_resp+0xf4>)
 8004e70:	edc3 7a00 	vstr	s15, [r3]
	}
	else {
		giTim2Ch2_TicksSumDev 	= 0L;
		gMdevPsS 		= 0.0f;
	}
}
 8004e74:	e006      	b.n	8004e84 <mainLoop_tim_deviation_resp+0xd8>
		giTim2Ch2_TicksSumDev 	= 0L;
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <mainLoop_tim_deviation_resp+0xf0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
		gMdevPsS 		= 0.0f;
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <mainLoop_tim_deviation_resp+0xf4>)
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	200005c8 	.word	0x200005c8
 8004e94:	200005cc 	.word	0x200005cc
 8004e98:	42c80000 	.word	0x42c80000
 8004e9c:	200005d0 	.word	0x200005d0
 8004ea0:	200002fc 	.word	0x200002fc

08004ea4 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
			  gMdevPsS);
		msg[4] = chr;
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
# endif
#endif
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b091      	sub	sp, #68	; 0x44
 8004ec4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* Early setting, if possible */
  MX_GPIO_Init();
 8004ec6:	f7fc fb47 	bl	8001558 <MX_GPIO_Init>

  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004eca:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	e002      	b.n	8004ed8 <main+0x18>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f9      	bne.n	8004ed2 <main+0x12>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ede:	f002 fc7b 	bl	80077d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ee2:	f000 fbf9 	bl	80056d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ee6:	f7fc fb37 	bl	8001558 <MX_GPIO_Init>
  MX_RTC_Init();
 8004eea:	f000 fc6f 	bl	80057cc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004eee:	f001 fb19 	bl	8006524 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004ef2:	f001 fb47 	bl	8006584 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004ef6:	f7fc f87b 	bl	8000ff0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004efa:	f7fc ff2b 	bl	8001d54 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004efe:	f000 fcbd 	bl	800587c <MX_SPI1_Init>
  MX_DMA_Init();
 8004f02:	f7fc fb03 	bl	800150c <MX_DMA_Init>
  MX_TIM2_Init();
 8004f06:	f000 ff27 	bl	8005d58 <MX_TIM2_Init>
  MX_TIM15_Init();
 8004f0a:	f000 ff97 	bl	8005e3c <MX_TIM15_Init>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc ffc6 	bl	8001ea8 <i2cBusGetDeviceList>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	76fb      	strb	r3, [r7, #27]

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d015      	beq.n	8004f56 <main+0x96>
	  /* Switch DAC to high impedance (500kR) mode */
	  gI2cDacModeLast	= 0b11;
 8004f2a:	4b95      	ldr	r3, [pc, #596]	; (8005180 <main+0x2c0>)
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	701a      	strb	r2, [r3, #0]
	  gI2cDacMode		= 0b11;
 8004f30:	4b94      	ldr	r3, [pc, #592]	; (8005184 <main+0x2c4>)
 8004f32:	2203      	movs	r2, #3
 8004f34:	701a      	strb	r2, [r3, #0]
	  gI2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004f36:	4b94      	ldr	r3, [pc, #592]	; (8005188 <main+0x2c8>)
 8004f38:	f240 62cd 	movw	r2, #1741	; 0x6cd
 8004f3c:	801a      	strh	r2, [r3, #0]
	  gI2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8004f3e:	4b93      	ldr	r3, [pc, #588]	; (800518c <main+0x2cc>)
 8004f40:	f240 62cd 	movw	r2, #1741	; 0x6cd
 8004f44:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 8004f46:	4b8f      	ldr	r3, [pc, #572]	; (8005184 <main+0x2c4>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	4a90      	ldr	r2, [pc, #576]	; (800518c <main+0x2cc>)
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7fc ffff 	bl	8001f54 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <main+0xa4>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004f60:	f7fd f9c8 	bl	80022f4 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <main+0xb2>
	  i2cSmartLCD_Gfx240x128_Welcome();
 8004f6e:	f7fd ff19 	bl	8002da4 <i2cSmartLCD_Gfx240x128_Welcome>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
  }
#endif

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 8004f72:	4b87      	ldr	r3, [pc, #540]	; (8005190 <main+0x2d0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004f78:	4b85      	ldr	r3, [pc, #532]	; (8005190 <main+0x2d0>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2110      	movs	r1, #16
 8004f80:	4884      	ldr	r0, [pc, #528]	; (8005194 <main+0x2d4>)
 8004f82:	f004 feb3 	bl	8009cec <HAL_GPIO_WritePin>

  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8004f86:	4b84      	ldr	r3, [pc, #528]	; (8005198 <main+0x2d8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004f8c:	4b82      	ldr	r3, [pc, #520]	; (8005198 <main+0x2d8>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f9a:	f004 fea7 	bl	8009cec <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8004f9e:	f001 fedd 	bl	8006d5c <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8004fa2:	f001 fc8d 	bl	80068c0 <ubloxUartSpeedFast>

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	76bb      	strb	r3, [r7, #26]
  do {

#if defined(PLL_BY_SOFTWARE)
	  if (ubloxSetFrequency(1U)) {
 8004faa:	2001      	movs	r0, #1
 8004fac:	f001 fd8e 	bl	8006acc <ubloxSetFrequency>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <main+0x11a>
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		  }
#endif
		  if (!(--ubloxRetries)) {
 8004fb6:	7ebb      	ldrb	r3, [r7, #26]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	76bb      	strb	r3, [r7, #26]
 8004fbc:	7ebb      	ldrb	r3, [r7, #26]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <main+0x110>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8004fc2:	4b76      	ldr	r3, [pc, #472]	; (800519c <main+0x2dc>)
 8004fc4:	617b      	str	r3, [r7, #20]
			  uint32_t aircr_val = 0x05fa0304UL;
 8004fc6:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <main+0x2e0>)
 8004fc8:	613b      	str	r3, [r7, #16]
			  *AIRCR = aircr_val;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300UL);
 8004fd0:	f240 5014 	movw	r0, #1300	; 0x514
 8004fd4:	f002 fc40 	bl	8007858 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8004fd8:	e002      	b.n	8004fe0 <main+0x120>
		  gpioHoRelayOut = GPIO_PIN_SET;
 8004fda:	4b6d      	ldr	r3, [pc, #436]	; (8005190 <main+0x2d0>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
	  break;
 8004fe0:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004fe2:	4b6b      	ldr	r3, [pc, #428]	; (8005190 <main+0x2d0>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2110      	movs	r1, #16
 8004fea:	486a      	ldr	r0, [pc, #424]	; (8005194 <main+0x2d4>)
 8004fec:	f004 fe7e 	bl	8009cec <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8004ff0:	f7fc fa42 	bl	8001478 <adc_init>


  /* TIMER: Prepare the Time Capture for TIM2 CH2 (GPS PPS), TIM15 CH1 fractional reload and Time Capture of TIM15 CH2 (DCF77 Phase) */
  tim_start();
 8004ff4:	f001 f9d4 	bl	80063a0 <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <main+0x14a>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8005002:	2100      	movs	r1, #0
 8005004:	2000      	movs	r0, #0
 8005006:	f7fd f999 	bl	800233c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <main+0x15c>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 8005014:	2100      	movs	r1, #0
 8005016:	2000      	movs	r0, #0
 8005018:	f7fd fefc 	bl	8002e14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 800501c:	2110      	movs	r1, #16
 800501e:	4861      	ldr	r0, [pc, #388]	; (80051a4 <main+0x2e4>)
 8005020:	f7fe fdfc 	bl	8003c1c <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 8005024:	4a5f      	ldr	r2, [pc, #380]	; (80051a4 <main+0x2e4>)
 8005026:	2102      	movs	r1, #2
 8005028:	2000      	movs	r0, #0
 800502a:	f7fc fc75 	bl	8001918 <onewireMasterTree_search>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	4b5d      	ldr	r3, [pc, #372]	; (80051a8 <main+0x2e8>)
 8005034:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, msg, len, 25);
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8005036:	2300      	movs	r3, #0
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e00e      	b.n	800505c <main+0x19c>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 800503e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4a57      	ldr	r2, [pc, #348]	; (80051a4 <main+0x2e4>)
 8005046:	4413      	add	r3, r2
 8005048:	2228      	movs	r2, #40	; 0x28
 800504a:	2132      	movs	r1, #50	; 0x32
 800504c:	200c      	movs	r0, #12
 800504e:	f7fc fd5b 	bl	8001b08 <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8005052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005056:	3301      	adds	r3, #1
 8005058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505c:	4b52      	ldr	r3, [pc, #328]	; (80051a8 <main+0x2e8>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005064:	429a      	cmp	r2, r3
 8005066:	d3ea      	bcc.n	800503e <main+0x17e>
#endif
	  }
  }

  /* Generate DCF77 pseudo phase noise modulation */
  calcDcfPhasemod();
 8005068:	f7fe fdf0 	bl	8003c4c <calcDcfPhasemod>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t tim2Set 	= 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 8005078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 8131 	bne.w	80052e4 <main+0x424>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 8005082:	f7ff fcdd 	bl	8004a40 <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 8005086:	4849      	ldr	r0, [pc, #292]	; (80051ac <main+0x2ec>)
 8005088:	f001 f9aa 	bl	80063e0 <tim_get_timeStamp>
 800508c:	4603      	mov	r3, r0
 800508e:	4a48      	ldr	r2, [pc, #288]	; (80051b0 <main+0x2f0>)
 8005090:	6013      	str	r3, [r2, #0]

		  /* Hard sync TIM2 to GPS response */
		  if (tim2Set) {
 8005092:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <main+0x1ec>
			  tim2Set = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			  htim2.Instance->CNT = 0UL;
 80050a0:	4b42      	ldr	r3, [pc, #264]	; (80051ac <main+0x2ec>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24
			  tim_TIM2_IC2_DMA_restart();
 80050a8:	f001 f95c 	bl	8006364 <tim_TIM2_IC2_DMA_restart>
		  /* Decode PRN modulation */
		  {
			  static uint8_t lastPage	= 0U;

			  /* Wait for page change */
			  if (lastPage != giTim2Ch2_TS_PhaseDiff_ary_page)  {
 80050ac:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <main+0x2f4>)
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <main+0x2f8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d05e      	beq.n	8005178 <main+0x2b8>
				  lastPage = giTim2Ch2_TS_PhaseDiff_ary_page;
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <main+0x2f8>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b3c      	ldr	r3, [pc, #240]	; (80051b4 <main+0x2f4>)
 80050c2:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin);
 80050c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050cc:	f004 fe26 	bl	8009d1c <HAL_GPIO_TogglePin>

				  /* PRN decoder */
				  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = calcDcfPrnCorrelation(gMLoop_DCF_sub16Frm, giTim2Ch2_TS_PhaseDiff_ary, &gMLoop_DCF_shiftPos, &gMLoop_DCF_corSum);
 80050d0:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <main+0x2fc>)
 80050d2:	7818      	ldrb	r0, [r3, #0]
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <main+0x300>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	461c      	mov	r4, r3
 80050da:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <main+0x304>)
 80050dc:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <main+0x308>)
 80050de:	493b      	ldr	r1, [pc, #236]	; (80051cc <main+0x30c>)
 80050e0:	f7fe fdf4 	bl	8003ccc <calcDcfPrnCorrelation>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <main+0x310>)
 80050ea:	551a      	strb	r2, [r3, r4]

				  if (gMLoop_DCF_corSum < 5000U) {  // TODO: find working value
 80050ec:	4b35      	ldr	r3, [pc, #212]	; (80051c4 <main+0x304>)
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d813      	bhi.n	8005120 <main+0x260>
					  /* Clear non-valid data */
					  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = 0U;
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <main+0x300>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <main+0x310>)
 8005100:	2100      	movs	r1, #0
 8005102:	5499      	strb	r1, [r3, r2]

					  /* Try next two subframes */
					  gMLoop_DCF_sub16Frm += 2U;
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <main+0x2fc>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	3302      	adds	r3, #2
 800510a:	b2da      	uxtb	r2, r3
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <main+0x2fc>)
 800510e:	701a      	strb	r2, [r3, #0]
					  gMLoop_DCF_sub16Frm &= 0x0fU;
 8005110:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <main+0x2fc>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b28      	ldr	r3, [pc, #160]	; (80051bc <main+0x2fc>)
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e00b      	b.n	8005138 <main+0x278>
				  }  // if (gMLoop_DCF_corSum < ...)
				  else {
					  /* Subframe position fine tuning: start one subframe before the target point */
					  gMLoop_DCF_sub16Frm = ((gMLoop_DCF_shiftPos / 128U) + 0x0eU) & 0x0fU;
 8005120:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <main+0x308>)
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	b29b      	uxth	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	330e      	adds	r3, #14
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	b2da      	uxtb	r2, r3
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <main+0x2fc>)
 8005136:	701a      	strb	r2, [r3, #0]
				  }  // if (corSum < ...)  else

				  /* Sync to first 10 x '1' bits for seconds [0 .. 9] */
				  if (((gDcfTimeCode_ary[gDcfTimeCode_ary_idx]) != 1) && (gDcfTimeCode_ary_idx < 10)) {
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <main+0x300>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <main+0x310>)
 8005140:	5c9b      	ldrb	r3, [r3, r2]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d007      	beq.n	8005156 <main+0x296>
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <main+0x300>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b09      	cmp	r3, #9
 800514c:	d803      	bhi.n	8005156 <main+0x296>
					  /* Resync to next starting minute */
					  gDcfTimeCode_ary_idx = 0U;
 800514e:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <main+0x300>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e010      	b.n	8005178 <main+0x2b8>
				  }  // if (Sync to first 10 x '1' bits)
				  else {
					  /* Go ahead */
					  gDcfTimeCode_ary_idx++;
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <main+0x300>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <main+0x300>)
 8005160:	701a      	strb	r2, [r3, #0]

					  /* No more than 61 seconds in one minute (incl. extra second of a minute) */
					  if (gDcfTimeCode_ary_idx > 59U) {  // ignore any leap seconds
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <main+0x300>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b3b      	cmp	r3, #59	; 0x3b
 8005168:	d906      	bls.n	8005178 <main+0x2b8>
						  gDcfTimeCode_ary_idx = 0U;
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <main+0x300>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]

						  /* End of a minute, calculate next minute data */
						  /*uint8_t status =*/
						  calcDcfTelegram(gDcfTimeCode_ary, &gDcfNxtMinuteTime);
 8005170:	4918      	ldr	r1, [pc, #96]	; (80051d4 <main+0x314>)
 8005172:	4817      	ldr	r0, [pc, #92]	; (80051d0 <main+0x310>)
 8005174:	f7fe ff8c 	bl	8004090 <calcDcfTelegram>
		  }
#endif


		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3020 	strb.w	r3, [r7, #32]
 800517e:	e048      	b.n	8005212 <main+0x352>
 8005180:	20000254 	.word	0x20000254
 8005184:	20000255 	.word	0x20000255
 8005188:	20000256 	.word	0x20000256
 800518c:	20000258 	.word	0x20000258
 8005190:	20000246 	.word	0x20000246
 8005194:	48000400 	.word	0x48000400
 8005198:	20000244 	.word	0x20000244
 800519c:	e000ed0c 	.word	0xe000ed0c
 80051a0:	05fa0304 	.word	0x05fa0304
 80051a4:	2000543c 	.word	0x2000543c
 80051a8:	20000247 	.word	0x20000247
 80051ac:	20005600 	.word	0x20005600
 80051b0:	20000550 	.word	0x20000550
 80051b4:	20000590 	.word	0x20000590
 80051b8:	20002d10 	.word	0x20002d10
 80051bc:	20000549 	.word	0x20000549
 80051c0:	20000508 	.word	0x20000508
 80051c4:	2000054c 	.word	0x2000054c
 80051c8:	2000054a 	.word	0x2000054a
 80051cc:	20002d14 	.word	0x20002d14
 80051d0:	2000050c 	.word	0x2000050c
 80051d4:	200031f8 	.word	0x200031f8
			  if (gMtempWaitUntil[owDeviceIdx]) {
 80051d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051dc:	4aaa      	ldr	r2, [pc, #680]	; (8005488 <main+0x5c8>)
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d010      	beq.n	8005208 <main+0x348>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 80051e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051ea:	4aa7      	ldr	r2, [pc, #668]	; (8005488 <main+0x5c8>)
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fd10 	bl	8004c1c <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 80051fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005200:	4aa1      	ldr	r2, [pc, #644]	; (8005488 <main+0x5c8>)
 8005202:	2100      	movs	r1, #0
 8005204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800520c:	3301      	adds	r3, #1
 800520e:	f887 3020 	strb.w	r3, [r7, #32]
 8005212:	4b9e      	ldr	r3, [pc, #632]	; (800548c <main+0x5cc>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f897 2020 	ldrb.w	r2, [r7, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3dc      	bcc.n	80051d8 <main+0x318>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 800521e:	489c      	ldr	r0, [pc, #624]	; (8005490 <main+0x5d0>)
 8005220:	f001 f8de 	bl	80063e0 <tim_get_timeStamp>
 8005224:	4603      	mov	r3, r0
 8005226:	4a9b      	ldr	r2, [pc, #620]	; (8005494 <main+0x5d4>)
 8005228:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 800522a:	f7fc f951 	bl	80014d0 <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 800522e:	f7ff fd51 	bl	8004cd4 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 8005232:	4897      	ldr	r0, [pc, #604]	; (8005490 <main+0x5d0>)
 8005234:	f001 f8d4 	bl	80063e0 <tim_get_timeStamp>
 8005238:	4603      	mov	r3, r0
 800523a:	4a97      	ldr	r2, [pc, #604]	; (8005498 <main+0x5d8>)
 800523c:	6013      	str	r3, [r2, #0]


		  /* Calculate Maidenhead Locator if not done, yet */
		  if ((gLocator[0] == 0) && gUbloxNavPosllh.iTOW) {
 800523e:	4b97      	ldr	r3, [pc, #604]	; (800549c <main+0x5dc>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d12d      	bne.n	80052a2 <main+0x3e2>
 8005246:	4b96      	ldr	r3, [pc, #600]	; (80054a0 <main+0x5e0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d029      	beq.n	80052a2 <main+0x3e2>
			  main_get_MaidenheadLocator_from_LatLon(sizeof(gLocator), gLocator, gUbloxNavPosllh.lat * 1e-7, gUbloxNavPosllh.lon * 1e-7);
 800524e:	4b94      	ldr	r3, [pc, #592]	; (80054a0 <main+0x5e0>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f976 	bl	8000544 <__aeabi_i2d>
 8005258:	a389      	add	r3, pc, #548	; (adr r3, 8005480 <main+0x5c0>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fb f9db 	bl	8000618 <__aeabi_dmul>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	f7fb fccd 	bl	8000c08 <__aeabi_d2f>
 800526e:	4604      	mov	r4, r0
 8005270:	4b8b      	ldr	r3, [pc, #556]	; (80054a0 <main+0x5e0>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f965 	bl	8000544 <__aeabi_i2d>
 800527a:	a381      	add	r3, pc, #516	; (adr r3, 8005480 <main+0x5c0>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f9ca 	bl	8000618 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f7fb fcbc 	bl	8000c08 <__aeabi_d2f>
 8005290:	4603      	mov	r3, r0
 8005292:	ee00 3a90 	vmov	s1, r3
 8005296:	ee00 4a10 	vmov	s0, r4
 800529a:	4980      	ldr	r1, [pc, #512]	; (800549c <main+0x5dc>)
 800529c:	2007      	movs	r0, #7
 800529e:	f7ff f987 	bl	80045b0 <main_get_MaidenheadLocator_from_LatLon>
		  }

		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 80052a2:	f7ff fd83 	bl	8004dac <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 80052a6:	487a      	ldr	r0, [pc, #488]	; (8005490 <main+0x5d0>)
 80052a8:	f001 f89a 	bl	80063e0 <tim_get_timeStamp>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4a7d      	ldr	r2, [pc, #500]	; (80054a4 <main+0x5e4>)
 80052b0:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  gpioLockedLED_d1 = gpioLockedLED;
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <main+0x5e8>)
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	4b7d      	ldr	r3, [pc, #500]	; (80054ac <main+0x5ec>)
 80052b8:	701a      	strb	r2, [r3, #0]
		  mainLoop_PLL_calc();
 80052ba:	f7ff fa6d 	bl	8004798 <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 80052be:	4874      	ldr	r0, [pc, #464]	; (8005490 <main+0x5d0>)
 80052c0:	f001 f88e 	bl	80063e0 <tim_get_timeStamp>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4a7a      	ldr	r2, [pc, #488]	; (80054b0 <main+0x5f0>)
 80052c8:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 80052ca:	487a      	ldr	r0, [pc, #488]	; (80054b4 <main+0x5f4>)
 80052cc:	f7ff fbcc 	bl	8004a68 <mainLoop_ublox_svinfo_sort>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b78      	ldr	r3, [pc, #480]	; (80054b8 <main+0x5f8>)
 80052d6:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 80052d8:	486d      	ldr	r0, [pc, #436]	; (8005490 <main+0x5d0>)
 80052da:	f001 f881 	bl	80063e0 <tim_get_timeStamp>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a76      	ldr	r2, [pc, #472]	; (80054bc <main+0x5fc>)
 80052e2:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Request these frames */
		  gUbloxNavClock.iTOW	= 0UL;
 80052e4:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <main+0x600>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
		  gUbloxNavDop.iTOW		= 0UL;
 80052ea:	4b76      	ldr	r3, [pc, #472]	; (80054c4 <main+0x604>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
		  gUbloxNavSvinfo.iTOW	= 0UL;
 80052f0:	4b75      	ldr	r3, [pc, #468]	; (80054c8 <main+0x608>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 80052f6:	f7ff fb7b 	bl	80049f0 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 80052fa:	4865      	ldr	r0, [pc, #404]	; (8005490 <main+0x5d0>)
 80052fc:	f001 f870 	bl	80063e0 <tim_get_timeStamp>
 8005300:	4603      	mov	r3, r0
 8005302:	4a72      	ldr	r2, [pc, #456]	; (80054cc <main+0x60c>)
 8005304:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 8005306:	f7ff fcc1 	bl	8004c8c <mainLoop_ow_tempAlarm_req>

		  /* TIM2 set request */
		  if ((gpioLockedLED == GPIO_PIN_SET) && (gpioLockedLED_d1 == GPIO_PIN_RESET)) {
 800530a:	4b67      	ldr	r3, [pc, #412]	; (80054a8 <main+0x5e8>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d106      	bne.n	8005320 <main+0x460>
 8005312:	4b66      	ldr	r3, [pc, #408]	; (80054ac <main+0x5ec>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <main+0x460>
			  tim2Set = 1U;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		  }

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 8005320:	4b5a      	ldr	r3, [pc, #360]	; (800548c <main+0x5cc>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <main+0x4aa>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 8005328:	4b69      	ldr	r3, [pc, #420]	; (80054d0 <main+0x610>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	4b67      	ldr	r3, [pc, #412]	; (80054d0 <main+0x610>)
 8005332:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <main+0x610>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	4a54      	ldr	r2, [pc, #336]	; (800548c <main+0x5cc>)
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005340:	fb02 f201 	mul.w	r2, r2, r1
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <main+0x610>)
 800534a:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <main+0x610>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4a60      	ldr	r2, [pc, #384]	; (80054d4 <main+0x614>)
 8005354:	4413      	add	r3, r2
 8005356:	4a5e      	ldr	r2, [pc, #376]	; (80054d0 <main+0x610>)
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	4614      	mov	r4, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7fc fc48 	bl	8001bf2 <onewireDS18B20_tempReq>
 8005362:	4603      	mov	r3, r0
 8005364:	4a48      	ldr	r2, [pc, #288]	; (8005488 <main+0x5c8>)
 8005366:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 800536a:	4849      	ldr	r0, [pc, #292]	; (8005490 <main+0x5d0>)
 800536c:	f001 f838 	bl	80063e0 <tim_get_timeStamp>
 8005370:	4603      	mov	r3, r0
 8005372:	4a59      	ldr	r2, [pc, #356]	; (80054d8 <main+0x618>)
 8005374:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 8005376:	f7fc f88f 	bl	8001498 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 800537a:	f7ff fd9a 	bl	8004eb2 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 800537e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 817b 	bne.w	800567e <main+0x7be>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8005388:	4b54      	ldr	r3, [pc, #336]	; (80054dc <main+0x61c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	2110      	movs	r1, #16
 8005390:	4853      	ldr	r0, [pc, #332]	; (80054e0 <main+0x620>)
 8005392:	f004 fcab 	bl	8009cec <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8005396:	4b51      	ldr	r3, [pc, #324]	; (80054dc <main+0x61c>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d120      	bne.n	80053e0 <main+0x520>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01b      	beq.n	80053e0 <main+0x520>
				  if ((gI2cDacModeLast != gI2cDacMode) || (gI2cDacValLast != gI2cDacVal)) {
 80053a8:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <main+0x624>)
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	4b4e      	ldr	r3, [pc, #312]	; (80054e8 <main+0x628>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d105      	bne.n	80053c0 <main+0x500>
 80053b4:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <main+0x62c>)
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <main+0x630>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d00f      	beq.n	80053e0 <main+0x520>
					  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 80053c0:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <main+0x628>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4a4a      	ldr	r2, [pc, #296]	; (80054f0 <main+0x630>)
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fc fdc2 	bl	8001f54 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  gI2cDacModeLast 	= gI2cDacMode;
 80053d0:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <main+0x628>)
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <main+0x624>)
 80053d6:	701a      	strb	r2, [r3, #0]
					  gI2cDacValLast 	= gI2cDacVal;
 80053d8:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <main+0x630>)
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	4b43      	ldr	r3, [pc, #268]	; (80054ec <main+0x62c>)
 80053de:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 80053e0:	482b      	ldr	r0, [pc, #172]	; (8005490 <main+0x5d0>)
 80053e2:	f000 fffd 	bl	80063e0 <tim_get_timeStamp>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a42      	ldr	r2, [pc, #264]	; (80054f4 <main+0x634>)
 80053ea:	6013      	str	r3, [r2, #0]
		  /* Update Locked-LED */
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif

		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 80053ec:	f7ff fc0e 	bl	8004c0c <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 80053f0:	4827      	ldr	r0, [pc, #156]	; (8005490 <main+0x5d0>)
 80053f2:	f000 fff5 	bl	80063e0 <tim_get_timeStamp>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a3f      	ldr	r2, [pc, #252]	; (80054f8 <main+0x638>)
 80053fa:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 80053fc:	f7ff fd52 	bl	8004ea4 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 8005400:	4823      	ldr	r0, [pc, #140]	; (8005490 <main+0x5d0>)
 8005402:	f000 ffed 	bl	80063e0 <tim_get_timeStamp>
 8005406:	4603      	mov	r3, r0
 8005408:	4a3c      	ldr	r2, [pc, #240]	; (80054fc <main+0x63c>)
 800540a:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 800540c:	f7ff fae8 	bl	80049e0 <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 8005410:	481f      	ldr	r0, [pc, #124]	; (8005490 <main+0x5d0>)
 8005412:	f000 ffe5 	bl	80063e0 <tim_get_timeStamp>
 8005416:	4603      	mov	r3, r0
 8005418:	4a39      	ldr	r2, [pc, #228]	; (8005500 <main+0x640>)
 800541a:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 800541c:	f7ff fcbe 	bl	8004d9c <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 8005420:	481b      	ldr	r0, [pc, #108]	; (8005490 <main+0x5d0>)
 8005422:	f000 ffdd 	bl	80063e0 <tim_get_timeStamp>
 8005426:	4603      	mov	r3, r0
 8005428:	4a36      	ldr	r2, [pc, #216]	; (8005504 <main+0x644>)
 800542a:	6013      	str	r3, [r2, #0]


		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 800542c:	f7ff fc26 	bl	8004c7c <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 8005430:	f7ff fc48 	bl	8004cc4 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 8005434:	4816      	ldr	r0, [pc, #88]	; (8005490 <main+0x5d0>)
 8005436:	f000 ffd3 	bl	80063e0 <tim_get_timeStamp>
 800543a:	4603      	mov	r3, r0
 800543c:	4a32      	ldr	r2, [pc, #200]	; (8005508 <main+0x648>)
 800543e:	6013      	str	r3, [r2, #0]

		  float temp = (owDs18b20_Temp[gMowSensorIdx] >> 4) + 0.5f;
 8005440:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <main+0x610>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b31      	ldr	r3, [pc, #196]	; (800550c <main+0x64c>)
 8005448:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800544c:	111b      	asrs	r3, r3, #4
 800544e:	b21b      	sxth	r3, r3
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005458:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800545c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005460:	edc7 7a07 	vstr	s15, [r7, #28]
		  if (temp > 99.0f) {
 8005464:	edd7 7a07 	vldr	s15, [r7, #28]
 8005468:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005510 <main+0x650>
 800546c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	dd50      	ble.n	8005518 <main+0x658>
			  temp = 99.0f;
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <main+0x654>)
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e057      	b.n	800552c <main+0x66c>
 800547c:	f3af 8000 	nop.w
 8005480:	9abcaf48 	.word	0x9abcaf48
 8005484:	3e7ad7f2 	.word	0x3e7ad7f2
 8005488:	200002f0 	.word	0x200002f0
 800548c:	20000247 	.word	0x20000247
 8005490:	20005600 	.word	0x20005600
 8005494:	20000554 	.word	0x20000554
 8005498:	20000558 	.word	0x20000558
 800549c:	20000300 	.word	0x20000300
 80054a0:	2000320c 	.word	0x2000320c
 80054a4:	2000055c 	.word	0x2000055c
 80054a8:	20000244 	.word	0x20000244
 80054ac:	20000245 	.word	0x20000245
 80054b0:	20000560 	.word	0x20000560
 80054b4:	200002d8 	.word	0x200002d8
 80054b8:	200002d6 	.word	0x200002d6
 80054bc:	20000564 	.word	0x20000564
 80054c0:	20003228 	.word	0x20003228
 80054c4:	2000323c 	.word	0x2000323c
 80054c8:	20003250 	.word	0x20003250
 80054cc:	20000568 	.word	0x20000568
 80054d0:	200002f8 	.word	0x200002f8
 80054d4:	2000543c 	.word	0x2000543c
 80054d8:	2000056c 	.word	0x2000056c
 80054dc:	20000246 	.word	0x20000246
 80054e0:	48000400 	.word	0x48000400
 80054e4:	20000254 	.word	0x20000254
 80054e8:	20000255 	.word	0x20000255
 80054ec:	20000256 	.word	0x20000256
 80054f0:	20000258 	.word	0x20000258
 80054f4:	20000570 	.word	0x20000570
 80054f8:	20000574 	.word	0x20000574
 80054fc:	20000578 	.word	0x20000578
 8005500:	2000057c 	.word	0x2000057c
 8005504:	20000580 	.word	0x20000580
 8005508:	20000584 	.word	0x20000584
 800550c:	20000248 	.word	0x20000248
 8005510:	42c60000 	.word	0x42c60000
 8005514:	42c60000 	.word	0x42c60000
		  }
		  else if (temp < 0.0f) {
 8005518:	edd7 7a07 	vldr	s15, [r7, #28]
 800551c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005524:	d502      	bpl.n	800552c <main+0x66c>
			  temp = 0.0f;
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
		  }


		  /* Drop NEO data when falling back to out-of-lock state */
		  if (!gpioLockedLED) {
 800552c:	4b56      	ldr	r3, [pc, #344]	; (8005688 <main+0x7c8>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <main+0x680>
			  gUbloxNavPosllh.iTOW 	= 0UL;
 8005534:	4b55      	ldr	r3, [pc, #340]	; (800568c <main+0x7cc>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
			  gLocator[0] 			= 0x00U;
 800553a:	4b55      	ldr	r3, [pc, #340]	; (8005690 <main+0x7d0>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
		  }

		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01f      	beq.n	800558a <main+0x6ca>
			  if (!gpioLockedLED) {
 800554a:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <main+0x7c8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10d      	bne.n	800556e <main+0x6ae>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(((int16_t) temp), gUbloxTimeAcc);
 8005552:	edd7 7a07 	vldr	s15, [r7, #28]
 8005556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555a:	ee17 3a90 	vmov	r3, s15
 800555e:	b21b      	sxth	r3, r3
 8005560:	4a4c      	ldr	r2, [pc, #304]	; (8005694 <main+0x7d4>)
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc fee8 	bl	800233c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 800556c:	e00d      	b.n	800558a <main+0x6ca>
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked(((int16_t) temp), gUbloxTimeAcc, giTim2Ch2_TicksSumDev);
 800556e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005576:	ee17 3a90 	vmov	r3, s15
 800557a:	b21b      	sxth	r3, r3
 800557c:	4a45      	ldr	r2, [pc, #276]	; (8005694 <main+0x7d4>)
 800557e:	6811      	ldr	r1, [r2, #0]
 8005580:	4a45      	ldr	r2, [pc, #276]	; (8005698 <main+0x7d8>)
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fc ff29 	bl	80023dc <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 800558a:	4844      	ldr	r0, [pc, #272]	; (800569c <main+0x7dc>)
 800558c:	f000 ff28 	bl	80063e0 <tim_get_timeStamp>
 8005590:	4603      	mov	r3, r0
 8005592:	4a43      	ldr	r2, [pc, #268]	; (80056a0 <main+0x7e0>)
 8005594:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d068      	beq.n	8005672 <main+0x7b2>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 80055a0:	4b39      	ldr	r3, [pc, #228]	; (8005688 <main+0x7c8>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d116      	bne.n	80055d6 <main+0x716>
				  if (lcd1StateLast) {
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <main+0x7e4>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <main+0x6f4>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 80055b0:	f7fd fbf8 	bl	8002da4 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 80055b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80055b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055bc:	ee17 3a90 	vmov	r3, s15
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	4a34      	ldr	r2, [pc, #208]	; (8005694 <main+0x7d4>)
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd fc23 	bl	8002e14 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ((int16_t) temp),
						  gUbloxTimeAcc);
				  lcd1StateLast = 0U;
 80055ce:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <main+0x7e4>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e04d      	b.n	8005672 <main+0x7b2>
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <main+0x7e8>)
 80055d8:	60fb      	str	r3, [r7, #12]

				  if (!lcd1StateLast) {
 80055da:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <main+0x7e4>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <main+0x728>
					  /* Locked template */
#if defined(PLL_BY_SOFTWARE)
					  /* With DAC graph template */
					  i2cSmartLCD_Gfx240x128_Template(0x80000113UL);
 80055e2:	4832      	ldr	r0, [pc, #200]	; (80056ac <main+0x7ec>)
 80055e4:	f7fd fac6 	bl	8002b74 <i2cSmartLCD_Gfx240x128_Template>
					  i2cSmartLCD_Gfx240x128_Template(0x80000013UL);
#endif
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (700UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 80055e8:	f002 f92a 	bl	8007840 <HAL_GetTick>
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <main+0x7e0>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	441a      	add	r2, r3
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <main+0x7f0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	fb01 f202 	mul.w	r2, r1, r2
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <main+0x7f4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0b9b      	lsrs	r3, r3, #14
 8005610:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 8005612:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8005616:	edd7 7a07 	vldr	s15, [r7, #28]
 800561a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800561e:	ee17 3a90 	vmov	r3, s15
 8005622:	b21c      	sxth	r4, r3
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <main+0x7d4>)
 8005626:	681d      	ldr	r5, [r3, #0]
 8005628:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <main+0x7d8>)
 800562a:	681e      	ldr	r6, [r3, #0]
 800562c:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <main+0x7f8>)
 800562e:	edd3 7a00 	vldr	s15, [r3]
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <main+0x7fc>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <main+0x800>)
 800563a:	ed92 7a00 	vldr	s14, [r2]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <main+0x804>)
 8005640:	8892      	ldrh	r2, [r2, #4]
 8005642:	4921      	ldr	r1, [pc, #132]	; (80056c8 <main+0x808>)
 8005644:	7809      	ldrb	r1, [r1, #0]
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <main+0x7d0>)
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <main+0x80c>)
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <main+0x810>)
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	9102      	str	r1, [sp, #8]
 8005654:	9201      	str	r2, [sp, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	eef0 0a47 	vmov.f32	s1, s14
 800565e:	eeb0 0a67 	vmov.f32	s0, s15
 8005662:	4633      	mov	r3, r6
 8005664:	462a      	mov	r2, r5
 8005666:	4621      	mov	r1, r4
 8005668:	f7fd fc76 	bl	8002f58 <i2cSmartLCD_Gfx240x128_Locked>
						  gUbloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &gUbloxNavSvinfo,
						  gLocator);
				  lcd1StateLast = 1U;
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <main+0x7e4>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 8005672:	480a      	ldr	r0, [pc, #40]	; (800569c <main+0x7dc>)
 8005674:	f000 feb4 	bl	80063e0 <tim_get_timeStamp>
 8005678:	4603      	mov	r3, r0
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <main+0x814>)
 800567c:	6013      	str	r3, [r2, #0]
# if 0
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
# endif
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  if (!loopEntry) {
 8005684:	e4f8      	b.n	8005078 <main+0x1b8>
 8005686:	bf00      	nop
 8005688:	20000244 	.word	0x20000244
 800568c:	2000320c 	.word	0x2000320c
 8005690:	20000300 	.word	0x20000300
 8005694:	2000000c 	.word	0x2000000c
 8005698:	200005d0 	.word	0x200005d0
 800569c:	20005600 	.word	0x20005600
 80056a0:	20000588 	.word	0x20000588
 80056a4:	20000591 	.word	0x20000591
 80056a8:	03938700 	.word	0x03938700
 80056ac:	80000113 	.word	0x80000113
 80056b0:	20000550 	.word	0x20000550
 80056b4:	45e7b273 	.word	0x45e7b273
 80056b8:	200002fc 	.word	0x200002fc
 80056bc:	20000258 	.word	0x20000258
 80056c0:	2000025c 	.word	0x2000025c
 80056c4:	2000323c 	.word	0x2000323c
 80056c8:	200002d6 	.word	0x200002d6
 80056cc:	20003250 	.word	0x20003250
 80056d0:	200002d8 	.word	0x200002d8
 80056d4:	2000058c 	.word	0x2000058c

080056d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b096      	sub	sp, #88	; 0x58
 80056dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	2244      	movs	r2, #68	; 0x44
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f00a fab0 	bl	800fc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056ec:	463b      	mov	r3, r7
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	609a      	str	r2, [r3, #8]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80056fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80056fe:	f006 f9b5 	bl	800ba6c <HAL_PWREx_ControlVoltageScaling>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005708:	f000 f85a 	bl	80057c0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800570c:	f006 f990 	bl	800ba30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005710:	4b21      	ldr	r3, [pc, #132]	; (8005798 <SystemClock_Config+0xc0>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	4a20      	ldr	r2, [pc, #128]	; (8005798 <SystemClock_Config+0xc0>)
 8005718:	f023 0318 	bic.w	r3, r3, #24
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005720:	2307      	movs	r3, #7
 8005722:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005724:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800572e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005734:	2310      	movs	r3, #16
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005738:	2302      	movs	r3, #2
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800573c:	2303      	movs	r3, #3
 800573e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005740:	2301      	movs	r3, #1
 8005742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8005744:	230c      	movs	r3, #12
 8005746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005748:	2307      	movs	r3, #7
 800574a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800574c:	2302      	movs	r3, #2
 800574e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005750:	2302      	movs	r3, #2
 8005752:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4618      	mov	r0, r3
 800575a:	f006 f9dd 	bl	800bb18 <HAL_RCC_OscConfig>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005764:	f000 f82c 	bl	80057c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005768:	230f      	movs	r3, #15
 800576a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800576c:	2303      	movs	r3, #3
 800576e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005770:	2300      	movs	r3, #0
 8005772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800577c:	463b      	mov	r3, r7
 800577e:	2103      	movs	r1, #3
 8005780:	4618      	mov	r0, r3
 8005782:	f006 fde9 	bl	800c358 <HAL_RCC_ClockConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800578c:	f000 f818 	bl	80057c0 <Error_Handler>
  }
}
 8005790:	bf00      	nop
 8005792:	3758      	adds	r7, #88	; 0x58
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40021000 	.word	0x40021000

0800579c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a04      	ldr	r2, [pc, #16]	; (80057bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80057ae:	f002 f833 	bl	8007818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00

080057c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057c4:	b672      	cpsid	i
}
 80057c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057c8:	e7fe      	b.n	80057c8 <Error_Handler+0x8>
	...

080057cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <MX_RTC_Init+0x48>)
 80057d2:	4a11      	ldr	r2, [pc, #68]	; (8005818 <MX_RTC_Init+0x4c>)
 80057d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <MX_RTC_Init+0x48>)
 80057d8:	2200      	movs	r2, #0
 80057da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <MX_RTC_Init+0x48>)
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <MX_RTC_Init+0x48>)
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <MX_RTC_Init+0x48>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <MX_RTC_Init+0x48>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <MX_RTC_Init+0x48>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <MX_RTC_Init+0x48>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005800:	4804      	ldr	r0, [pc, #16]	; (8005814 <MX_RTC_Init+0x48>)
 8005802:	f007 fac7 	bl	800cd94 <HAL_RTC_Init>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800580c:	f7ff ffd8 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20005498 	.word	0x20005498
 8005818:	40002800 	.word	0x40002800

0800581c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b098      	sub	sp, #96	; 0x60
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	2254      	movs	r2, #84	; 0x54
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f00a fa0d 	bl	800fc4c <memset>
  if(rtcHandle->Instance==RTC)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a0f      	ldr	r2, [pc, #60]	; (8005874 <HAL_RTC_MspInit+0x58>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d117      	bne.n	800586c <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800583c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005840:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005846:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4618      	mov	r0, r3
 800584e:	f006 ffbb 	bl	800c7c8 <HAL_RCCEx_PeriphCLKConfig>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8005858:	f7ff ffb2 	bl	80057c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RTC_MspInit+0x5c>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	4a05      	ldr	r2, [pc, #20]	; (8005878 <HAL_RTC_MspInit+0x5c>)
 8005864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800586c:	bf00      	nop
 800586e:	3760      	adds	r7, #96	; 0x60
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40002800 	.word	0x40002800
 8005878:	40021000 	.word	0x40021000

0800587c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <MX_SPI1_Init+0x74>)
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <MX_SPI1_Init+0x78>)
 8005884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <MX_SPI1_Init+0x74>)
 8005888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800588c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800588e:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <MX_SPI1_Init+0x74>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <MX_SPI1_Init+0x74>)
 8005896:	f44f 7240 	mov.w	r2, #768	; 0x300
 800589a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <MX_SPI1_Init+0x74>)
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058be:	2200      	movs	r2, #0
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058ca:	2207      	movs	r2, #7
 80058cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058d6:	2208      	movs	r2, #8
 80058d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80058da:	4805      	ldr	r0, [pc, #20]	; (80058f0 <MX_SPI1_Init+0x74>)
 80058dc:	f007 fb6c 	bl	800cfb8 <HAL_SPI_Init>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80058e6:	f7ff ff6b 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	200054bc 	.word	0x200054bc
 80058f4:	40013000 	.word	0x40013000

080058f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a17      	ldr	r2, [pc, #92]	; (8005974 <HAL_SPI_MspInit+0x7c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d128      	bne.n	800596c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_SPI_MspInit+0x80>)
 800591c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <HAL_SPI_MspInit+0x80>)
 8005920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005924:	6613      	str	r3, [r2, #96]	; 0x60
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <HAL_SPI_MspInit+0x80>)
 8005928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_SPI_MspInit+0x80>)
 8005934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005936:	4a10      	ldr	r2, [pc, #64]	; (8005978 <HAL_SPI_MspInit+0x80>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HAL_SPI_MspInit+0x80>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 800594a:	23c2      	movs	r3, #194	; 0xc2
 800594c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594e:	2302      	movs	r3, #2
 8005950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005956:	2303      	movs	r3, #3
 8005958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800595a:	2305      	movs	r3, #5
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800595e:	f107 0314 	add.w	r3, r7, #20
 8005962:	4619      	mov	r1, r3
 8005964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005968:	f003 ff74 	bl	8009854 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800596c:	bf00      	nop
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40013000 	.word	0x40013000
 8005978:	40021000 	.word	0x40021000

0800597c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_MspInit+0x44>)
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	4a0e      	ldr	r2, [pc, #56]	; (80059c0 <HAL_MspInit+0x44>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6613      	str	r3, [r2, #96]	; 0x60
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <HAL_MspInit+0x44>)
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_MspInit+0x44>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <HAL_MspInit+0x44>)
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6593      	str	r3, [r2, #88]	; 0x58
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_MspInit+0x44>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80059d4:	2200      	movs	r2, #0
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	2019      	movs	r0, #25
 80059da:	f003 fc7f 	bl	80092dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059de:	2019      	movs	r0, #25
 80059e0:	f003 fc98 	bl	8009314 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80059e4:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_InitTick+0x9c>)
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_InitTick+0x9c>)
 80059ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059ee:	6613      	str	r3, [r2, #96]	; 0x60
 80059f0:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <HAL_InitTick+0x9c>)
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059fc:	f107 0210 	add.w	r2, r7, #16
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f006 fe4c 	bl	800c6a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a0c:	f006 fe34 	bl	800c678 <HAL_RCC_GetPCLK2Freq>
 8005a10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_InitTick+0xa0>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0c9b      	lsrs	r3, r3, #18
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_InitTick+0xa8>)
 8005a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a42:	f007 fb5c 	bl	800d0fe <HAL_TIM_Base_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005a4c:	4806      	ldr	r0, [pc, #24]	; (8005a68 <HAL_InitTick+0xa4>)
 8005a4e:	f007 fbad 	bl	800d1ac <HAL_TIM_Base_Start_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e000      	b.n	8005a58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3730      	adds	r7, #48	; 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	431bde83 	.word	0x431bde83
 8005a68:	20005520 	.word	0x20005520
 8005a6c:	40012c00 	.word	0x40012c00

08005a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a74:	e7fe      	b.n	8005a74 <NMI_Handler+0x4>

08005a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7a:	e7fe      	b.n	8005a7a <HardFault_Handler+0x4>

08005a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a80:	e7fe      	b.n	8005a80 <MemManage_Handler+0x4>

08005a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a86:	e7fe      	b.n	8005a86 <BusFault_Handler+0x4>

08005a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a8c:	e7fe      	b.n	8005a8c <UsageFault_Handler+0x4>

08005a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005acc:	4802      	ldr	r0, [pc, #8]	; (8005ad8 <DMA1_Channel1_IRQHandler+0x10>)
 8005ace:	f003 fdd4 	bl	800967a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200053f4 	.word	0x200053f4

08005adc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8005ae0:	4802      	ldr	r0, [pc, #8]	; (8005aec <DMA1_Channel7_IRQHandler+0x10>)
 8005ae2:	f003 fdca 	bl	800967a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200055b8 	.word	0x200055b8

08005af0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <ADC1_IRQHandler+0x10>)
 8005af6:	f002 fa90 	bl	800801a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20005390 	.word	0x20005390

08005b04 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005b08:	4802      	ldr	r0, [pc, #8]	; (8005b14 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005b0a:	f007 ffa1 	bl	800da50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000556c 	.word	0x2000556c

08005b18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b1c:	4802      	ldr	r0, [pc, #8]	; (8005b28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005b1e:	f007 ff97 	bl	800da50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20005520 	.word	0x20005520

08005b2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <I2C1_EV_IRQHandler+0x10>)
 8005b32:	f004 fc1d 	bl	800a370 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000544c 	.word	0x2000544c

08005b40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <I2C1_ER_IRQHandler+0x10>)
 8005b46:	f004 fc2d 	bl	800a3a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000544c 	.word	0x2000544c

08005b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <USART1_IRQHandler+0x10>)
 8005b5a:	f008 fff5 	bl	800eb48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000564c 	.word	0x2000564c

08005b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
	return 1;
 8005b6c:	2301      	movs	r3, #1
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <_kill>:

int _kill(int pid, int sig)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b82:	f00a f82b 	bl	800fbdc <__errno>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2216      	movs	r2, #22
 8005b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_exit>:

void _exit (int status)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ffe7 	bl	8005b78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005baa:	e7fe      	b.n	8005baa <_exit+0x12>

08005bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e00a      	b.n	8005bd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005bbe:	f3af 8000 	nop.w
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	60ba      	str	r2, [r7, #8]
 8005bca:	b2ca      	uxtb	r2, r1
 8005bcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	dbf0      	blt.n	8005bbe <_read+0x12>
	}

return len;
 8005bdc:	687b      	ldr	r3, [r7, #4]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e009      	b.n	8005c0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	60ba      	str	r2, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	dbf1      	blt.n	8005bf8 <_write+0x12>
	}
	return len;
 8005c14:	687b      	ldr	r3, [r7, #4]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <_close>:

int _close(int file)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	return -1;
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c46:	605a      	str	r2, [r3, #4]
	return 0;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <_isatty>:

int _isatty(int file)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8005c5e:	2301      	movs	r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
	return 0;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <_sbrk+0x5c>)
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <_sbrk+0x60>)
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <_sbrk+0x64>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <_sbrk+0x64>)
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <_sbrk+0x68>)
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <_sbrk+0x64>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d207      	bcs.n	8005cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cb8:	f009 ff90 	bl	800fbdc <__errno>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	220c      	movs	r2, #12
 8005cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	e009      	b.n	8005cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <_sbrk+0x64>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <_sbrk+0x64>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a05      	ldr	r2, [pc, #20]	; (8005cec <_sbrk+0x64>)
 8005cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	2000c000 	.word	0x2000c000
 8005ce8:	00000400 	.word	0x00000400
 8005cec:	20000594 	.word	0x20000594
 8005cf0:	20005768 	.word	0x20005768

08005cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005cf8:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <SystemInit+0x5c>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <SystemInit+0x5c>)
 8005d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <SystemInit+0x60>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <SystemInit+0x60>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <SystemInit+0x60>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <SystemInit+0x60>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <SystemInit+0x60>)
 8005d20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005d24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005d28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <SystemInit+0x60>)
 8005d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <SystemInit+0x60>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <SystemInit+0x60>)
 8005d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <SystemInit+0x60>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	619a      	str	r2, [r3, #24]
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	40021000 	.word	0x40021000

08005d58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08c      	sub	sp, #48	; 0x30
 8005d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d5e:	f107 0320 	add.w	r3, r7, #32
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d6c:	f107 0314 	add.w	r3, r7, #20
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
 8005d80:	609a      	str	r2, [r3, #8]
 8005d82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d84:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005d8c:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d92:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999999;
 8005d98:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005d9a:	4a27      	ldr	r2, [pc, #156]	; (8005e38 <MX_TIM2_Init+0xe0>)
 8005d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005da4:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005daa:	4822      	ldr	r0, [pc, #136]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005dac:	f007 f9a7 	bl	800d0fe <HAL_TIM_Base_Init>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8005db6:	f7ff fd03 	bl	80057c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005dc0:	f107 0320 	add.w	r3, r7, #32
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	481b      	ldr	r0, [pc, #108]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005dc8:	f007 fff5 	bl	800ddb6 <HAL_TIM_ConfigClockSource>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005dd2:	f7ff fcf5 	bl	80057c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005dd6:	4817      	ldr	r0, [pc, #92]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005dd8:	f007 fa3c 	bl	800d254 <HAL_TIM_IC_Init>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005de2:	f7ff fced 	bl	80057c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005dee:	f107 0314 	add.w	r3, r7, #20
 8005df2:	4619      	mov	r1, r3
 8005df4:	480f      	ldr	r0, [pc, #60]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005df6:	f008 fc23 	bl	800e640 <HAL_TIMEx_MasterConfigSynchronization>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8005e00:	f7ff fcde 	bl	80057c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV2;
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 3;
 8005e10:	2303      	movs	r3, #3
 8005e12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005e14:	1d3b      	adds	r3, r7, #4
 8005e16:	2204      	movs	r2, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4806      	ldr	r0, [pc, #24]	; (8005e34 <MX_TIM2_Init+0xdc>)
 8005e1c:	f007 ff37 	bl	800dc8e <HAL_TIM_IC_ConfigChannel>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005e26:	f7ff fccb 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005e2a:	bf00      	nop
 8005e2c:	3730      	adds	r7, #48	; 0x30
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20005600 	.word	0x20005600
 8005e38:	d693a3ff 	.word	0xd693a3ff

08005e3c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	; 0x30
 8005e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e42:	f107 0320 	add.w	r3, r7, #32
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	609a      	str	r2, [r3, #8]
 8005e66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005e68:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <MX_TIM15_Init+0xe4>)
 8005e6c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8005e6e:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 59999;
 8005e7a:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e7c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005e80:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e8e:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005e94:	4821      	ldr	r0, [pc, #132]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005e96:	f007 f932 	bl	800d0fe <HAL_TIM_Base_Init>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8005ea0:	f7ff fc8e 	bl	80057c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005eaa:	f107 0320 	add.w	r3, r7, #32
 8005eae:	4619      	mov	r1, r3
 8005eb0:	481a      	ldr	r0, [pc, #104]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005eb2:	f007 ff80 	bl	800ddb6 <HAL_TIM_ConfigClockSource>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8005ebc:	f7ff fc80 	bl	80057c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8005ec0:	4816      	ldr	r0, [pc, #88]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005ec2:	f007 f9c7 	bl	800d254 <HAL_TIM_IC_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005ecc:	f7ff fc78 	bl	80057c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	4619      	mov	r1, r3
 8005ede:	480f      	ldr	r0, [pc, #60]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005ee0:	f008 fbae 	bl	800e640 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8005eea:	f7ff fc69 	bl	80057c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 3;
 8005efa:	2303      	movs	r3, #3
 8005efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	2204      	movs	r2, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4805      	ldr	r0, [pc, #20]	; (8005f1c <MX_TIM15_Init+0xe0>)
 8005f06:	f007 fec2 	bl	800dc8e <HAL_TIM_IC_ConfigChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8005f10:	f7ff fc56 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005f14:	bf00      	nop
 8005f16:	3730      	adds	r7, #48	; 0x30
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	2000556c 	.word	0x2000556c
 8005f20:	40014000 	.word	0x40014000

08005f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08c      	sub	sp, #48	; 0x30
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2c:	f107 031c 	add.w	r3, r7, #28
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d15a      	bne.n	8005ffc <HAL_TIM_Base_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f46:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	4a49      	ldr	r2, [pc, #292]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6593      	str	r3, [r2, #88]	; 0x58
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5e:	4b44      	ldr	r3, [pc, #272]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	4a43      	ldr	r2, [pc, #268]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f6a:	4b41      	ldr	r3, [pc, #260]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = D13_DCF77_PHASE_TIM2_CH2_Pin;
 8005f76:	2308      	movs	r3, #8
 8005f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f82:	2300      	movs	r3, #0
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f86:	2301      	movs	r3, #1
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(D13_DCF77_PHASE_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005f8a:	f107 031c 	add.w	r3, r7, #28
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4838      	ldr	r0, [pc, #224]	; (8006074 <HAL_TIM_Base_MspInit+0x150>)
 8005f92:	f003 fc5f 	bl	8009854 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005f96:	4b38      	ldr	r3, [pc, #224]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <HAL_TIM_Base_MspInit+0x158>)
 8005f9a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005f9c:	4b36      	ldr	r3, [pc, #216]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fa2:	4b35      	ldr	r3, [pc, #212]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fa8:	4b33      	ldr	r3, [pc, #204]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005fae:	4b32      	ldr	r3, [pc, #200]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fb4:	4b30      	ldr	r3, [pc, #192]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005fd2:	4829      	ldr	r0, [pc, #164]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fd4:	f003 f9ba 	bl	800934c <HAL_DMA_Init>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8005fde:	f7ff fbef 	bl	80057c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a24      	ldr	r2, [pc, #144]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a21      	ldr	r2, [pc, #132]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff4:	4a20      	ldr	r2, [pc, #128]	; (8006078 <HAL_TIM_Base_MspInit+0x154>)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005ffa:	e035      	b.n	8006068 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <HAL_TIM_Base_MspInit+0x15c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d130      	bne.n	8006068 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8006008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6613      	str	r3, [r2, #96]	; 0x60
 8006012:	4b17      	ldr	r3, [pc, #92]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8006014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	4a13      	ldr	r2, [pc, #76]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_TIM_Base_MspInit+0x14c>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A2_GPS_PPS_TIM15_CH2_Pin;
 8006036:	2308      	movs	r3, #8
 8006038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603a:	2302      	movs	r3, #2
 800603c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800603e:	2302      	movs	r3, #2
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006042:	2300      	movs	r3, #0
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8006046:	230e      	movs	r3, #14
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A2_GPS_PPS_TIM15_CH2_GPIO_Port, &GPIO_InitStruct);
 800604a:	f107 031c 	add.w	r3, r7, #28
 800604e:	4619      	mov	r1, r3
 8006050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006054:	f003 fbfe 	bl	8009854 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8006058:	2200      	movs	r2, #0
 800605a:	2100      	movs	r1, #0
 800605c:	2018      	movs	r0, #24
 800605e:	f003 f93d 	bl	80092dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006062:	2018      	movs	r0, #24
 8006064:	f003 f956 	bl	8009314 <HAL_NVIC_EnableIRQ>
}
 8006068:	bf00      	nop
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000
 8006074:	48000400 	.word	0x48000400
 8006078:	200055b8 	.word	0x200055b8
 800607c:	40020080 	.word	0x40020080
 8006080:	40014000 	.word	0x40014000

08006084 <dcf_extract_seconds>:
  }
}

/* USER CODE BEGIN 1 */

static void dcf_extract_seconds(void) {
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	const uint32_t phaseTicksPerSec = 60000000UL;
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <dcf_extract_seconds+0x58>)
 800608c:	603b      	str	r3, [r7, #0]

	/* Timestamp @ 60 MHz */
	for (uint8_t mvIdx = 9U; mvIdx; mvIdx--) {
 800608e:	2309      	movs	r3, #9
 8006090:	71fb      	strb	r3, [r7, #7]
 8006092:	e00b      	b.n	80060ac <dcf_extract_seconds+0x28>
		giTim2Ch2_TS_ary[mvIdx] = giTim2Ch2_TS_ary[mvIdx - 1U];
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	4911      	ldr	r1, [pc, #68]	; (80060e0 <dcf_extract_seconds+0x5c>)
 800609c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80060a0:	490f      	ldr	r1, [pc, #60]	; (80060e0 <dcf_extract_seconds+0x5c>)
 80060a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t mvIdx = 9U; mvIdx; mvIdx--) {
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	71fb      	strb	r3, [r7, #7]
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <dcf_extract_seconds+0x10>
	}

	giTim2Ch2_TS_ary[0U] = giTim2Ch2_TS_Phase_ary[PRN_CORRELATION_SINGLE_BUF_SIZE] % phaseTicksPerSec;
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <dcf_extract_seconds+0x60>)
 80060b4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80060b8:	3308      	adds	r3, #8
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	fbb3 f2f2 	udiv	r2, r3, r2
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	fb01 f202 	mul.w	r2, r1, r2
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	4a05      	ldr	r2, [pc, #20]	; (80060e0 <dcf_extract_seconds+0x5c>)
 80060cc:	6013      	str	r3, [r2, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	03938700 	.word	0x03938700
 80060e0:	200005d8 	.word	0x200005d8
 80060e4:	20000600 	.word	0x20000600

080060e8 <HAL_TIM_IC_CaptureHalfCpltCallback>:

/* Every second half of the buffer gets ready */
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b5b0      	push	{r4, r5, r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	/* TIM2: DCF77 timer */
	if (htim == &htim2) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a25      	ldr	r2, [pc, #148]	; (8006188 <HAL_TIM_IC_CaptureHalfCpltCallback+0xa0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d142      	bne.n	800617e <HAL_TIM_IC_CaptureHalfCpltCallback+0x96>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7f1b      	ldrb	r3, [r3, #28]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d13e      	bne.n	800617e <HAL_TIM_IC_CaptureHalfCpltCallback+0x96>
			/* First half is complete */
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idx = 0; cnt; idx++, cnt--) {
 8006100:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006104:	81fb      	strh	r3, [r7, #14]
 8006106:	2300      	movs	r3, #0
 8006108:	81bb      	strh	r3, [r7, #12]
 800610a:	e02c      	b.n	8006166 <HAL_TIM_IC_CaptureHalfCpltCallback+0x7e>
				giTim2Ch2_TS_PhaseDiff_ary[idx] = (int8_t) (giTim2Ch2_TS_Phase_ary[idx] - giTim2Ch2_TS_Phase_ary[0] - ((idx * 2ULL * 31ULL * 60000000ULL) / 77500ULL));
 800610c:	89bb      	ldrh	r3, [r7, #12]
 800610e:	4a1f      	ldr	r2, [pc, #124]	; (800618c <HAL_TIM_IC_CaptureHalfCpltCallback+0xa4>)
 8006110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_TIM_IC_CaptureHalfCpltCallback+0xa4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b2dc      	uxtb	r4, r3
 8006120:	89ba      	ldrh	r2, [r7, #12]
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	491a      	ldr	r1, [pc, #104]	; (8006190 <HAL_TIM_IC_CaptureHalfCpltCallback+0xa8>)
 8006128:	fb01 f003 	mul.w	r0, r1, r3
 800612c:	2100      	movs	r1, #0
 800612e:	fb01 f102 	mul.w	r1, r1, r2
 8006132:	1845      	adds	r5, r0, r1
 8006134:	4916      	ldr	r1, [pc, #88]	; (8006190 <HAL_TIM_IC_CaptureHalfCpltCallback+0xa8>)
 8006136:	fba2 0101 	umull	r0, r1, r2, r1
 800613a:	186b      	adds	r3, r5, r1
 800613c:	4619      	mov	r1, r3
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_TIM_IC_CaptureHalfCpltCallback+0xac>)
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	f7fa fdb0 	bl	8000ca8 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	b2d3      	uxtb	r3, r2
 800614e:	1ae3      	subs	r3, r4, r3
 8006150:	b2da      	uxtb	r2, r3
 8006152:	89bb      	ldrh	r3, [r7, #12]
 8006154:	b251      	sxtb	r1, r2
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <HAL_TIM_IC_CaptureHalfCpltCallback+0xb0>)
 8006158:	54d1      	strb	r1, [r2, r3]
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idx = 0; cnt; idx++, cnt--) {
 800615a:	89bb      	ldrh	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	81bb      	strh	r3, [r7, #12]
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	3b01      	subs	r3, #1
 8006164:	81fb      	strh	r3, [r7, #14]
 8006166:	89fb      	ldrh	r3, [r7, #14]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1cf      	bne.n	800610c <HAL_TIM_IC_CaptureHalfCpltCallback+0x24>
			}

			/* Timestamp @ 60 MHz */
			dcf_extract_seconds();
 800616c:	f7ff ff8a 	bl	8006084 <dcf_extract_seconds>

			/* Page has changed */
			giTim2Ch2_TS_PhaseDiff_ary_page++;
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_TIM_IC_CaptureHalfCpltCallback+0xb4>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	3301      	adds	r3, #1
 8006178:	b2da      	uxtb	r2, r3
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <HAL_TIM_IC_CaptureHalfCpltCallback+0xb4>)
 800617c:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
		}  // if (CHANNEL_2)
	}  // if (&htim2)
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bdb0      	pop	{r4, r5, r7, pc}
 8006186:	bf00      	nop
 8006188:	20005600 	.word	0x20005600
 800618c:	20000600 	.word	0x20000600
 8006190:	ddbab200 	.word	0xddbab200
 8006194:	00012ebc 	.word	0x00012ebc
 8006198:	20002d14 	.word	0x20002d14
 800619c:	20002d10 	.word	0x20002d10

080061a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* TIM15: GPS timer */
	if (htim == &htim15) {
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a5e      	ldr	r2, [pc, #376]	; (8006324 <HAL_TIM_IC_CaptureCallback+0x184>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d165      	bne.n	800627c <HAL_TIM_IC_CaptureCallback+0xdc>
		if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7f1b      	ldrb	r3, [r3, #28]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d161      	bne.n	800627c <HAL_TIM_IC_CaptureCallback+0xdc>
			/* GPS 1PPS pulse captured */
			giTim15Ch2_TS = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80061b8:	2104      	movs	r1, #4
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f007 fec2 	bl	800df44 <HAL_TIM_ReadCapturedValue>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_TIM_IC_CaptureCallback+0x188>)
 80061c4:	6013      	str	r3, [r2, #0]
			if (giTim15Ch2_TS < 60000UL) {
#else
			/* 1 PPS mode */
			{
#endif
				int32_t diff = giTim15Ch2_TS - giTim15Ch2_TS_ary[giTim15Ch2_TS_ary_idx];
 80061c6:	4b58      	ldr	r3, [pc, #352]	; (8006328 <HAL_TIM_IC_CaptureCallback+0x188>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b58      	ldr	r3, [pc, #352]	; (800632c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	4619      	mov	r1, r3
 80061d2:	4b57      	ldr	r3, [pc, #348]	; (8006330 <HAL_TIM_IC_CaptureCallback+0x190>)
 80061d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	60fb      	str	r3, [r7, #12]

#if !defined(PLL_BY_SOFTWARE)
				if ((-100000 < diff) && (diff < +100000)) {
#else
				/* Clamp below +/-5 ppm */
				if ((-3000 < diff) && (diff < +3000)) {
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a55      	ldr	r2, [pc, #340]	; (8006334 <HAL_TIM_IC_CaptureCallback+0x194>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	db1b      	blt.n	800621c <HAL_TIM_IC_CaptureCallback+0x7c>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80061ea:	4293      	cmp	r3, r2
 80061ec:	dc16      	bgt.n	800621c <HAL_TIM_IC_CaptureCallback+0x7c>
#endif
					/* Store accumulated difference */
					++giTim15Ch2_TicksEvt;
 80061ee:	4b52      	ldr	r3, [pc, #328]	; (8006338 <HAL_TIM_IC_CaptureCallback+0x198>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a50      	ldr	r2, [pc, #320]	; (8006338 <HAL_TIM_IC_CaptureCallback+0x198>)
 80061f6:	6013      	str	r3, [r2, #0]
					giTim15Ch2_TicksDiff += diff;
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_TIM_IC_CaptureCallback+0x19c>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	4a4e      	ldr	r2, [pc, #312]	; (800633c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8006202:	6013      	str	r3, [r2, #0]

					/* Calculate PPMs */
					giTim15Ch2_ppm = diff / 600.0f;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800620e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8006340 <HAL_TIM_IC_CaptureCallback+0x1a0>
 8006212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006216:	4b4b      	ldr	r3, [pc, #300]	; (8006344 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8006218:	edc3 7a00 	vstr	s15, [r3]
				}

				if (giTim15Ch2_TicksEvt > 1UL) {
 800621c:	4b46      	ldr	r3, [pc, #280]	; (8006338 <HAL_TIM_IC_CaptureCallback+0x198>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d91c      	bls.n	800625e <HAL_TIM_IC_CaptureCallback+0xbe>
					/* Write back TimeStamp to 10 sec circle-buffer */
					giTim15Ch2_TS_ary[giTim15Ch2_TS_ary_idx++] = giTim15Ch2_TS;
 8006224:	4b41      	ldr	r3, [pc, #260]	; (800632c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	b2d1      	uxtb	r1, r2
 800622e:	4a3f      	ldr	r2, [pc, #252]	; (800632c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8006230:	7011      	strb	r1, [r2, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4b3c      	ldr	r3, [pc, #240]	; (8006328 <HAL_TIM_IC_CaptureCallback+0x188>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <HAL_TIM_IC_CaptureCallback+0x190>)
 800623a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					giTim15Ch2_TS_ary_idx %= 10;
 800623e:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b40      	ldr	r3, [pc, #256]	; (8006348 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8006246:	fba3 1302 	umull	r1, r3, r3, r2
 800624a:	08d9      	lsrs	r1, r3, #3
 800624c:	460b      	mov	r3, r1
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	b2da      	uxtb	r2, r3
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_TIM_IC_CaptureCallback+0x18c>)
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e00e      	b.n	800627c <HAL_TIM_IC_CaptureCallback+0xdc>
				}
				else {
					/* Fast fill of the timestamp buffer */
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
 8006262:	e008      	b.n	8006276 <HAL_TIM_IC_CaptureCallback+0xd6>
						giTim15Ch2_TS_ary[idx] = giTim15Ch2_TS;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	4a30      	ldr	r2, [pc, #192]	; (8006328 <HAL_TIM_IC_CaptureCallback+0x188>)
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	4931      	ldr	r1, [pc, #196]	; (8006330 <HAL_TIM_IC_CaptureCallback+0x190>)
 800626c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	3301      	adds	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b09      	cmp	r3, #9
 800627a:	d9f3      	bls.n	8006264 <HAL_TIM_IC_CaptureCallback+0xc4>
			}
		}  // if (CHANNEL_2)
	}  // if (htim == &htim15)

	/* TIM2: DCF77 timer */
	if (htim == &htim2) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a33      	ldr	r2, [pc, #204]	; (800634c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d14b      	bne.n	800631c <HAL_TIM_IC_CaptureCallback+0x17c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	7f1b      	ldrb	r3, [r3, #28]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d147      	bne.n	800631c <HAL_TIM_IC_CaptureCallback+0x17c>
			/* Second half is complete */
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idxA = 0, idxB = PRN_CORRELATION_SINGLE_BUF_SIZE; cnt; idxA++, idxB++, cnt--) {
 800628c:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006290:	82bb      	strh	r3, [r7, #20]
 8006292:	2300      	movs	r3, #0
 8006294:	827b      	strh	r3, [r7, #18]
 8006296:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800629a:	823b      	strh	r3, [r7, #16]
 800629c:	e032      	b.n	8006304 <HAL_TIM_IC_CaptureCallback+0x164>
				giTim2Ch2_TS_PhaseDiff_ary[idxA] = (int8_t) (giTim2Ch2_TS_Phase_ary[idxB] - giTim2Ch2_TS_Phase_ary[PRN_CORRELATION_SINGLE_BUF_SIZE]  - ((idxA * 2ULL * 31ULL * 60000000ULL) / 77500ULL));
 800629e:	8a3b      	ldrh	r3, [r7, #16]
 80062a0:	4a2b      	ldr	r2, [pc, #172]	; (8006350 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80062a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b29      	ldr	r3, [pc, #164]	; (8006350 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80062aa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80062ae:	3308      	adds	r3, #8
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	b2dc      	uxtb	r4, r3
 80062b8:	8a7a      	ldrh	r2, [r7, #18]
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	4925      	ldr	r1, [pc, #148]	; (8006354 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80062c0:	fb01 f003 	mul.w	r0, r1, r3
 80062c4:	2100      	movs	r1, #0
 80062c6:	fb01 f102 	mul.w	r1, r1, r2
 80062ca:	1845      	adds	r5, r0, r1
 80062cc:	4921      	ldr	r1, [pc, #132]	; (8006354 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80062ce:	fba2 0101 	umull	r0, r1, r2, r1
 80062d2:	186b      	adds	r3, r5, r1
 80062d4:	4619      	mov	r1, r3
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	f7fa fce4 	bl	8000ca8 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	b2d3      	uxtb	r3, r2
 80062e6:	1ae3      	subs	r3, r4, r3
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	8a7b      	ldrh	r3, [r7, #18]
 80062ec:	b251      	sxtb	r1, r2
 80062ee:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80062f0:	54d1      	strb	r1, [r2, r3]
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idxA = 0, idxB = PRN_CORRELATION_SINGLE_BUF_SIZE; cnt; idxA++, idxB++, cnt--) {
 80062f2:	8a7b      	ldrh	r3, [r7, #18]
 80062f4:	3301      	adds	r3, #1
 80062f6:	827b      	strh	r3, [r7, #18]
 80062f8:	8a3b      	ldrh	r3, [r7, #16]
 80062fa:	3301      	adds	r3, #1
 80062fc:	823b      	strh	r3, [r7, #16]
 80062fe:	8abb      	ldrh	r3, [r7, #20]
 8006300:	3b01      	subs	r3, #1
 8006302:	82bb      	strh	r3, [r7, #20]
 8006304:	8abb      	ldrh	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1c9      	bne.n	800629e <HAL_TIM_IC_CaptureCallback+0xfe>
			}

			/* Timestamp @ 60 MHz */
			dcf_extract_seconds();
 800630a:	f7ff febb 	bl	8006084 <dcf_extract_seconds>

			/* Page has changed */
			giTim2Ch2_TS_PhaseDiff_ary_page++;
 800630e:	4b14      	ldr	r3, [pc, #80]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	3301      	adds	r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800631a:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
		}  // if (CHANNEL_2)
	}  // if (htim == &htim2)
}
 800631c:	bf00      	nop
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bdb0      	pop	{r4, r5, r7, pc}
 8006324:	2000556c 	.word	0x2000556c
 8006328:	20000598 	.word	0x20000598
 800632c:	2000059c 	.word	0x2000059c
 8006330:	200005a0 	.word	0x200005a0
 8006334:	fffff449 	.word	0xfffff449
 8006338:	200005c8 	.word	0x200005c8
 800633c:	200005cc 	.word	0x200005cc
 8006340:	44160000 	.word	0x44160000
 8006344:	200005d4 	.word	0x200005d4
 8006348:	cccccccd 	.word	0xcccccccd
 800634c:	20005600 	.word	0x20005600
 8006350:	20000600 	.word	0x20000600
 8006354:	ddbab200 	.word	0xddbab200
 8006358:	00012ebc 	.word	0x00012ebc
 800635c:	20002d14 	.word	0x20002d14
 8006360:	20002d10 	.word	0x20002d10

08006364 <tim_TIM2_IC2_DMA_restart>:


void tim_TIM2_IC2_DMA_restart(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
	if (HAL_TIM_IC_Stop_DMA( &htim2, TIM_CHANNEL_2) != HAL_OK) {
 8006368:	2104      	movs	r1, #4
 800636a:	480b      	ldr	r0, [pc, #44]	; (8006398 <tim_TIM2_IC2_DMA_restart+0x34>)
 800636c:	f007 faa6 	bl	800d8bc <HAL_TIM_IC_Stop_DMA>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <tim_TIM2_IC2_DMA_restart+0x16>
		/* Starting Error */
		Error_Handler();
 8006376:	f7ff fa23 	bl	80057c0 <Error_Handler>
	}

	if (HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)giTim2Ch2_TS_Phase_ary, PRN_CORRELATION_DOUBLE_BUF_SIZE) != HAL_OK) {
 800637a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800637e:	4a07      	ldr	r2, [pc, #28]	; (800639c <tim_TIM2_IC2_DMA_restart+0x38>)
 8006380:	2104      	movs	r1, #4
 8006382:	4805      	ldr	r0, [pc, #20]	; (8006398 <tim_TIM2_IC2_DMA_restart+0x34>)
 8006384:	f007 f8ee 	bl	800d564 <HAL_TIM_IC_Start_DMA>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <tim_TIM2_IC2_DMA_restart+0x2e>
		/* Starting Error */
		Error_Handler();
 800638e:	f7ff fa17 	bl	80057c0 <Error_Handler>
	}
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20005600 	.word	0x20005600
 800639c:	20000600 	.word	0x20000600

080063a0 <tim_start>:

void tim_start(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
	/* TIM15 IC CH2 NEO-x */
	{
		if (HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2) != HAL_OK) {
 80063a4:	2104      	movs	r1, #4
 80063a6:	480b      	ldr	r0, [pc, #44]	; (80063d4 <tim_start+0x34>)
 80063a8:	f006 ffb6 	bl	800d318 <HAL_TIM_IC_Start_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <tim_start+0x16>
			/* Starting Error */
			Error_Handler();
 80063b2:	f7ff fa05 	bl	80057c0 <Error_Handler>
		}
	}

	/* TIM2 IC CH2 DCF77 PHASE */
	{
		if (HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)giTim2Ch2_TS_Phase_ary, PRN_CORRELATION_DOUBLE_BUF_SIZE) != HAL_OK) {
 80063b6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <tim_start+0x38>)
 80063bc:	2104      	movs	r1, #4
 80063be:	4807      	ldr	r0, [pc, #28]	; (80063dc <tim_start+0x3c>)
 80063c0:	f007 f8d0 	bl	800d564 <HAL_TIM_IC_Start_DMA>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <tim_start+0x2e>
			/* Starting Error */
			Error_Handler();
 80063ca:	f7ff f9f9 	bl	80057c0 <Error_Handler>
		}
	}
}
 80063ce:	bf00      	nop
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000556c 	.word	0x2000556c
 80063d8:	20000600 	.word	0x20000600
 80063dc:	20005600 	.word	0x20005600

080063e0 <tim_get_timeStamp>:

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <HAL_UART_TxCpltCallback+0x1c>)
 8006406:	2201      	movs	r2, #1
 8006408:	701a      	strb	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20003201 	.word	0x20003201

0800641c <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006430:	b29b      	uxth	r3, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	b29a      	uxth	r2, r3
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_UART_RxCpltCallback+0x30>)
 8006438:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_UART_RxCpltCallback+0x34>)
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20003204 	.word	0x20003204
 8006450:	20003202 	.word	0x20003202

08006454 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006462:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2b      	ldr	r2, [pc, #172]	; (8006514 <HAL_UART_ErrorCallback+0xc0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d148      	bne.n	80064fe <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00e      	beq.n	8006494 <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006482:	b29b      	uxth	r3, r3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	b29a      	uxth	r2, r3
 8006488:	4b23      	ldr	r3, [pc, #140]	; (8006518 <HAL_UART_ErrorCallback+0xc4>)
 800648a:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 800648c:	4b23      	ldr	r3, [pc, #140]	; (800651c <HAL_UART_ErrorCallback+0xc8>)
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8006492:	e03a      	b.n	800650a <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0301 	and.w	r3, r3, #1
		else if (
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00e      	beq.n	80064d0 <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	4b14      	ldr	r3, [pc, #80]	; (8006518 <HAL_UART_ErrorCallback+0xc4>)
 80064c6:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80064c8:	4b14      	ldr	r3, [pc, #80]	; (800651c <HAL_UART_ErrorCallback+0xc8>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
}
 80064ce:	e01c      	b.n	800650a <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00e      	beq.n	80064f8 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_UART_ErrorCallback+0xc4>)
 80064ee:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <HAL_UART_ErrorCallback+0xc8>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
}
 80064f6:	e008      	b.n	800650a <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 80064f8:	f7ff f962 	bl	80057c0 <Error_Handler>
}
 80064fc:	e005      	b.n	800650a <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_UART_ErrorCallback+0xcc>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 8006506:	f7ff f95b 	bl	80057c0 <Error_Handler>
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2000564c 	.word	0x2000564c
 8006518:	20003204 	.word	0x20003204
 800651c:	20003202 	.word	0x20003202
 8006520:	200056d0 	.word	0x200056d0

08006524 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <MX_USART1_UART_Init+0x58>)
 800652a:	4a15      	ldr	r2, [pc, #84]	; (8006580 <MX_USART1_UART_Init+0x5c>)
 800652c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006536:	4b11      	ldr	r3, [pc, #68]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006538:	2200      	movs	r2, #0
 800653a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <MX_USART1_UART_Init+0x58>)
 800653e:	2200      	movs	r2, #0
 8006540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006544:	2200      	movs	r2, #0
 8006546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <MX_USART1_UART_Init+0x58>)
 800654a:	220c      	movs	r2, #12
 800654c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800654e:	4b0b      	ldr	r3, [pc, #44]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <MX_USART1_UART_Init+0x58>)
 800655c:	2200      	movs	r2, #0
 800655e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006562:	2200      	movs	r2, #0
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <MX_USART1_UART_Init+0x58>)
 8006568:	f008 f8ee 	bl	800e748 <HAL_UART_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006572:	f7ff f925 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000564c 	.word	0x2000564c
 8006580:	40013800 	.word	0x40013800

08006584 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <MX_USART2_UART_Init+0x58>)
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <MX_USART2_UART_Init+0x5c>)
 800658c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <MX_USART2_UART_Init+0x58>)
 8006590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <MX_USART2_UART_Init+0x58>)
 8006598:	2200      	movs	r2, #0
 800659a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <MX_USART2_UART_Init+0x58>)
 800659e:	2200      	movs	r2, #0
 80065a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065aa:	220c      	movs	r2, #12
 80065ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065bc:	2200      	movs	r2, #0
 80065be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80065c6:	4805      	ldr	r0, [pc, #20]	; (80065dc <MX_USART2_UART_Init+0x58>)
 80065c8:	f008 f8be 	bl	800e748 <HAL_UART_Init>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80065d2:	f7ff f8f5 	bl	80057c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200056d0 	.word	0x200056d0
 80065e0:	40004400 	.word	0x40004400

080065e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b0a0      	sub	sp, #128	; 0x80
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065fc:	f107 0318 	add.w	r3, r7, #24
 8006600:	2254      	movs	r2, #84	; 0x54
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f009 fb21 	bl	800fc4c <memset>
  if(uartHandle->Instance==USART1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a54      	ldr	r2, [pc, #336]	; (8006760 <HAL_UART_MspInit+0x17c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d152      	bne.n	80066ba <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006614:	2301      	movs	r3, #1
 8006616:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8006618:	2302      	movs	r3, #2
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800661c:	f107 0318 	add.w	r3, r7, #24
 8006620:	4618      	mov	r0, r3
 8006622:	f006 f8d1 	bl	800c7c8 <HAL_RCCEx_PeriphCLKConfig>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800662c:	f7ff f8c8 	bl	80057c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006630:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <HAL_UART_MspInit+0x180>)
 8006632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006634:	4a4b      	ldr	r2, [pc, #300]	; (8006764 <HAL_UART_MspInit+0x180>)
 8006636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800663a:	6613      	str	r3, [r2, #96]	; 0x60
 800663c:	4b49      	ldr	r3, [pc, #292]	; (8006764 <HAL_UART_MspInit+0x180>)
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006648:	4b46      	ldr	r3, [pc, #280]	; (8006764 <HAL_UART_MspInit+0x180>)
 800664a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664c:	4a45      	ldr	r2, [pc, #276]	; (8006764 <HAL_UART_MspInit+0x180>)
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006654:	4b43      	ldr	r3, [pc, #268]	; (8006764 <HAL_UART_MspInit+0x180>)
 8006656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8006660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006664:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006666:	2302      	movs	r3, #2
 8006668:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666a:	2300      	movs	r3, #0
 800666c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800666e:	2300      	movs	r3, #0
 8006670:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006672:	2307      	movs	r3, #7
 8006674:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8006676:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800667a:	4619      	mov	r1, r3
 800667c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006680:	f003 f8e8 	bl	8009854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8006684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006688:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668a:	2302      	movs	r3, #2
 800668c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800668e:	2301      	movs	r3, #1
 8006690:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006692:	2300      	movs	r3, #0
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006696:	2307      	movs	r3, #7
 8006698:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800669a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800669e:	4619      	mov	r1, r3
 80066a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066a4:	f003 f8d6 	bl	8009854 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	2025      	movs	r0, #37	; 0x25
 80066ae:	f002 fe15 	bl	80092dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80066b2:	2025      	movs	r0, #37	; 0x25
 80066b4:	f002 fe2e 	bl	8009314 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80066b8:	e04d      	b.n	8006756 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <HAL_UART_MspInit+0x184>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d148      	bne.n	8006756 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80066c4:	2302      	movs	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80066c8:	2308      	movs	r3, #8
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066cc:	f107 0318 	add.w	r3, r7, #24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f006 f879 	bl	800c7c8 <HAL_RCCEx_PeriphCLKConfig>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80066dc:	f7ff f870 	bl	80057c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_UART_MspInit+0x180>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <HAL_UART_MspInit+0x180>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	6593      	str	r3, [r2, #88]	; 0x58
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <HAL_UART_MspInit+0x180>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f8:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <HAL_UART_MspInit+0x180>)
 80066fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fc:	4a19      	ldr	r2, [pc, #100]	; (8006764 <HAL_UART_MspInit+0x180>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <HAL_UART_MspInit+0x180>)
 8006706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8006710:	2304      	movs	r3, #4
 8006712:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006714:	2302      	movs	r3, #2
 8006716:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006718:	2300      	movs	r3, #0
 800671a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800671c:	2301      	movs	r3, #1
 800671e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006720:	2307      	movs	r3, #7
 8006722:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8006724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800672e:	f003 f891 	bl	8009854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006738:	2302      	movs	r3, #2
 800673a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006740:	2301      	movs	r3, #1
 8006742:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8006744:	2303      	movs	r3, #3
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8006748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800674c:	4619      	mov	r1, r3
 800674e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006752:	f003 f87f 	bl	8009854 <HAL_GPIO_Init>
}
 8006756:	bf00      	nop
 8006758:	3780      	adds	r7, #128	; 0x80
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40013800 	.word	0x40013800
 8006764:	40021000 	.word	0x40021000
 8006768:	40004400 	.word	0x40004400

0800676c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <HAL_UART_MspDeInit+0x5c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10f      	bne.n	800679e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <HAL_UART_MspDeInit+0x60>)
 8006780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <HAL_UART_MspDeInit+0x60>)
 8006784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006788:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 800678a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800678e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006792:	f003 f9c9 	bl	8009b28 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006796:	2025      	movs	r0, #37	; 0x25
 8006798:	f002 fdca 	bl	8009330 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800679c:	e010      	b.n	80067c0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <HAL_UART_MspDeInit+0x64>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d10b      	bne.n	80067c0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <HAL_UART_MspDeInit+0x60>)
 80067aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ac:	4a07      	ldr	r2, [pc, #28]	; (80067cc <HAL_UART_MspDeInit+0x60>)
 80067ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80067b4:	f248 0104 	movw	r1, #32772	; 0x8004
 80067b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067bc:	f003 f9b4 	bl	8009b28 <HAL_GPIO_DeInit>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40013800 	.word	0x40013800
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40004400 	.word	0x40004400

080067d4 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067da:	4a15      	ldr	r2, [pc, #84]	; (8006830 <MX_USART1_UART_Init_38400baud+0x5c>)
 80067dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80067e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067f2:	4b0e      	ldr	r3, [pc, #56]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 80067fa:	220c      	movs	r2, #12
 80067fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067fe:	4b0b      	ldr	r3, [pc, #44]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 800680c:	2200      	movs	r2, #0
 800680e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 8006812:	2200      	movs	r2, #0
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006816:	4805      	ldr	r0, [pc, #20]	; (800682c <MX_USART1_UART_Init_38400baud+0x58>)
 8006818:	f007 ff96 	bl	800e748 <HAL_UART_Init>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8006822:	f7fe ffcd 	bl	80057c0 <Error_Handler>
  }

}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000564c 	.word	0x2000564c
 8006830:	40013800 	.word	0x40013800

08006834 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	4613      	mov	r3, r2
 8006844:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	75fb      	strb	r3, [r7, #23]
 800684a:	2300      	movs	r3, #0
 800684c:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 800684e:	897b      	ldrh	r3, [r7, #10]
 8006850:	2b07      	cmp	r3, #7
 8006852:	d92f      	bls.n	80068b4 <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3302      	adds	r3, #2
 8006858:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 800685a:	897b      	ldrh	r3, [r7, #10]
 800685c:	3b04      	subs	r3, #4
 800685e:	82bb      	strh	r3, [r7, #20]
 8006860:	e00d      	b.n	800687e <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	60fa      	str	r2, [r7, #12]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	4413      	add	r3, r2
 800686e:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 8006870:	7dba      	ldrb	r2, [r7, #22]
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	4413      	add	r3, r2
 8006876:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006878:	8abb      	ldrh	r3, [r7, #20]
 800687a:	3b01      	subs	r3, #1
 800687c:	82bb      	strh	r3, [r7, #20]
 800687e:	8abb      	ldrh	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ee      	bne.n	8006862 <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 8006884:	7a7b      	ldrb	r3, [r7, #9]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	7dfa      	ldrb	r2, [r7, #23]
 8006892:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7dba      	ldrb	r2, [r7, #22]
 8006898:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <calcChecksumRFC1145+0x82>
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7dfa      	ldrb	r2, [r7, #23]
 80068aa:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	7dba      	ldrb	r2, [r7, #22]
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e000      	b.n	80068b6 <calcChecksumRFC1145+0x82>
		return;
 80068b4:	bf00      	nop
	}
}
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b092      	sub	sp, #72	; 0x48
 80068c4:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 80068c6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t cfg_Port1_Req[]		= {
 80068cc:	4a7a      	ldr	r2, [pc, #488]	; (8006ab8 <ubloxUartSpeedFast+0x1f8>)
 80068ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80068d4:	c303      	stmia	r3!, {r0, r1}
 80068d6:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 80068d8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068dc:	2300      	movs	r3, #0
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	2201      	movs	r2, #1
 80068e4:	2109      	movs	r1, #9
 80068e6:	f7ff ffa5 	bl	8006834 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	605a      	str	r2, [r3, #4]
 80068f8:	609a      	str	r2, [r3, #8]
 80068fa:	60da      	str	r2, [r3, #12]
 80068fc:	611a      	str	r2, [r3, #16]
 80068fe:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	b2db      	uxtb	r3, r3
 8006904:	713b      	strb	r3, [r7, #4]
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	b2db      	uxtb	r3, r3
 800690c:	717b      	strb	r3, [r7, #5]
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	71bb      	strb	r3, [r7, #6]
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	0e1b      	lsrs	r3, r3, #24
 800691a:	b2db      	uxtb	r3, r3
 800691c:	71fb      	strb	r3, [r7, #7]

	int cnt = 3;
 800691e:	2303      	movs	r3, #3
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 8006922:	e0bb      	b.n	8006a9c <ubloxUartSpeedFast+0x1dc>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8006924:	4b65      	ldr	r3, [pc, #404]	; (8006abc <ubloxUartSpeedFast+0x1fc>)
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800692a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692e:	2209      	movs	r2, #9
 8006930:	4619      	mov	r1, r3
 8006932:	4863      	ldr	r0, [pc, #396]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006934:	f007 ff90 	bl	800e858 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8006938:	bf00      	nop
 800693a:	4b60      	ldr	r3, [pc, #384]	; (8006abc <ubloxUartSpeedFast+0x1fc>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d1fa      	bne.n	800693a <ubloxUartSpeedFast+0x7a>
		}

		gUart1RxReady = RESET;
 8006944:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <ubloxUartSpeedFast+0x204>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800694a:	485d      	ldr	r0, [pc, #372]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 800694c:	f008 f87a 	bl	800ea44 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006950:	485b      	ldr	r0, [pc, #364]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006952:	f008 fb1b 	bl	800ef8c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800695a:	495b      	ldr	r1, [pc, #364]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 800695c:	4858      	ldr	r0, [pc, #352]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 800695e:	f007 ffd7 	bl	800e910 <HAL_UART_Receive_IT>
		int i = 11;
 8006962:	230b      	movs	r3, #11
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 8006966:	e005      	b.n	8006974 <ubloxUartSpeedFast+0xb4>
			HAL_Delay(100UL);
 8006968:	2064      	movs	r0, #100	; 0x64
 800696a:	f000 ff75 	bl	8007858 <HAL_Delay>
			--i;
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	3b01      	subs	r3, #1
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <ubloxUartSpeedFast+0xc4>
 800697a:	4b52      	ldr	r3, [pc, #328]	; (8006ac4 <ubloxUartSpeedFast+0x204>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d1f1      	bne.n	8006968 <ubloxUartSpeedFast+0xa8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006984:	4b50      	ldr	r3, [pc, #320]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2bb5      	cmp	r3, #181	; 0xb5
 800698a:	f040 8081 	bne.w	8006a90 <ubloxUartSpeedFast+0x1d0>
 800698e:	4b4e      	ldr	r3, [pc, #312]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b62      	cmp	r3, #98	; 0x62
 8006994:	d17c      	bne.n	8006a90 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8006996:	4b4c      	ldr	r3, [pc, #304]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006998:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800699a:	2b06      	cmp	r3, #6
 800699c:	d178      	bne.n	8006a90 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800699e:	4b4a      	ldr	r3, [pc, #296]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 80069a0:	78db      	ldrb	r3, [r3, #3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d174      	bne.n	8006a90 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80069a6:	4b48      	ldr	r3, [pc, #288]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 80069a8:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80069aa:	2b14      	cmp	r3, #20
 80069ac:	d170      	bne.n	8006a90 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80069ae:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 80069b0:	795b      	ldrb	r3, [r3, #5]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d16c      	bne.n	8006a90 <ubloxUartSpeedFast+0x1d0>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ba:	e00c      	b.n	80069d6 <ubloxUartSpeedFast+0x116>
				cfg_Port1_Set[i] = ublox_Response[i];
 80069bc:	4a42      	ldr	r2, [pc, #264]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	4413      	add	r3, r2
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	f107 0208 	add.w	r2, r7, #8
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	4413      	add	r3, r2
 80069cc:	460a      	mov	r2, r1
 80069ce:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	3301      	adds	r3, #1
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	2b1b      	cmp	r3, #27
 80069da:	d9ef      	bls.n	80069bc <ubloxUartSpeedFast+0xfc>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80069dc:	793b      	ldrb	r3, [r7, #4]
 80069de:	75bb      	strb	r3, [r7, #22]
			cfg_Port1_Set[6 +  9] = buf[1];
 80069e0:	797b      	ldrb	r3, [r7, #5]
 80069e2:	75fb      	strb	r3, [r7, #23]
			cfg_Port1_Set[6 + 10] = buf[2];
 80069e4:	79bb      	ldrb	r3, [r7, #6]
 80069e6:	763b      	strb	r3, [r7, #24]
			cfg_Port1_Set[6 + 11] = buf[3];
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	767b      	strb	r3, [r7, #25]

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 80069ec:	f107 0008 	add.w	r0, r7, #8
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	2201      	movs	r2, #1
 80069f8:	211c      	movs	r1, #28
 80069fa:	f7ff ff1b 	bl	8006834 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80069fe:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <ubloxUartSpeedFast+0x1fc>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	221c      	movs	r2, #28
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	482c      	ldr	r0, [pc, #176]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a0e:	f007 ff23 	bl	800e858 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006a12:	bf00      	nop
 8006a14:	4b29      	ldr	r3, [pc, #164]	; (8006abc <ubloxUartSpeedFast+0x1fc>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d1fa      	bne.n	8006a14 <ubloxUartSpeedFast+0x154>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006a1e:	4828      	ldr	r0, [pc, #160]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a20:	f007 ffba 	bl	800e998 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8006a24:	4826      	ldr	r0, [pc, #152]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a26:	f007 fedd 	bl	800e7e4 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 8006a2a:	f7ff fed3 	bl	80067d4 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8006a2e:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <ubloxUartSpeedFast+0x204>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8006a34:	4822      	ldr	r0, [pc, #136]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a36:	f008 f805 	bl	800ea44 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006a3a:	4821      	ldr	r0, [pc, #132]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a3c:	f008 faa6 	bl	800ef8c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a44:	4920      	ldr	r1, [pc, #128]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a46:	481e      	ldr	r0, [pc, #120]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006a48:	f007 ff62 	bl	800e910 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006a4c:	bf00      	nop
 8006a4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <ubloxUartSpeedFast+0x204>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d1fa      	bne.n	8006a4e <ubloxUartSpeedFast+0x18e>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2bb5      	cmp	r3, #181	; 0xb5
 8006a5e:	d127      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
 8006a60:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b62      	cmp	r3, #98	; 0x62
 8006a66:	d123      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a6a:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d11f      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006a70:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d11b      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a7a:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d117      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006a80:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a82:	795b      	ldrb	r3, [r3, #5]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d113      	bne.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <ubloxUartSpeedFast+0x208>)
 8006a8a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006a8c:	2b06      	cmp	r3, #6
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100UL);
				}
#endif
			}
			return;
 8006a8e:	e00f      	b.n	8006ab0 <ubloxUartSpeedFast+0x1f0>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200UL);
 8006a90:	20c8      	movs	r0, #200	; 0xc8
 8006a92:	f000 fee1 	bl	8007858 <HAL_Delay>
			--cnt;
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f47f af40 	bne.w	8006924 <ubloxUartSpeedFast+0x64>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 8006aa4:	4806      	ldr	r0, [pc, #24]	; (8006ac0 <ubloxUartSpeedFast+0x200>)
 8006aa6:	f007 fe9d 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006aaa:	f7ff fe93 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
 8006aae:	e000      	b.n	8006ab2 <ubloxUartSpeedFast+0x1f2>
			return;
 8006ab0:	bf00      	nop
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		HAL_Delay(100UL);
	}
#endif
}
 8006ab2:	3740      	adds	r7, #64	; 0x40
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	08013bdc 	.word	0x08013bdc
 8006abc:	20003201 	.word	0x20003201
 8006ac0:	2000564c 	.word	0x2000564c
 8006ac4:	20003202 	.word	0x20003202
 8006ac8:	20003388 	.word	0x20003388

08006acc <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b094      	sub	sp, #80	; 0x50
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	f107 0318 	add.w	r3, r7, #24
 8006ade:	2224      	movs	r2, #36	; 0x24
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f009 f8b2 	bl	800fc4c <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	743b      	strb	r3, [r7, #16]
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	747b      	strb	r3, [r7, #17]
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8006af8:	2300      	movs	r3, #0
 8006afa:	74bb      	strb	r3, [r7, #18]
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8006afc:	2300      	movs	r3, #0
 8006afe:	74fb      	strb	r3, [r7, #19]

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8006b00:	4a91      	ldr	r2, [pc, #580]	; (8006d48 <ubloxSetFrequency+0x27c>)
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b0a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 8006b0e:	f107 0008 	add.w	r0, r7, #8
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	2201      	movs	r2, #1
 8006b1a:	2108      	movs	r1, #8
 8006b1c:	f7ff fe8a 	bl	8006834 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8006b20:	2303      	movs	r3, #3
 8006b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while (tryCtr) {
 8006b26:	e104      	b.n	8006d32 <ubloxSetFrequency+0x266>
			HAL_Delay(100);
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8006b28:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <ubloxSetFrequency+0x280>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8006b2e:	4888      	ldr	r0, [pc, #544]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006b30:	f007 ff88 	bl	800ea44 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006b34:	4886      	ldr	r0, [pc, #536]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006b36:	f008 fa29 	bl	800ef8c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b3e:	4985      	ldr	r1, [pc, #532]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006b40:	4883      	ldr	r0, [pc, #524]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006b42:	f007 fee5 	bl	800e910 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8006b46:	4b84      	ldr	r3, [pc, #528]	; (8006d58 <ubloxSetFrequency+0x28c>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8006b4c:	f107 0308 	add.w	r3, r7, #8
 8006b50:	2208      	movs	r2, #8
 8006b52:	4619      	mov	r1, r3
 8006b54:	487e      	ldr	r0, [pc, #504]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006b56:	f007 fe7f 	bl	800e858 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8006b5a:	bf00      	nop
 8006b5c:	4b7e      	ldr	r3, [pc, #504]	; (8006d58 <ubloxSetFrequency+0x28c>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d1fa      	bne.n	8006b5c <ubloxSetFrequency+0x90>
		}

		/* Wait for the response */
		int i = 11;
 8006b66:	230b      	movs	r3, #11
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 8006b6a:	e005      	b.n	8006b78 <ubloxSetFrequency+0xac>
			HAL_Delay(100UL);
 8006b6c:	2064      	movs	r0, #100	; 0x64
 8006b6e:	f000 fe73 	bl	8007858 <HAL_Delay>
			--i;
 8006b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b74:	3b01      	subs	r3, #1
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 8006b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <ubloxSetFrequency+0xbc>
 8006b7e:	4b73      	ldr	r3, [pc, #460]	; (8006d4c <ubloxSetFrequency+0x280>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d1f1      	bne.n	8006b6c <ubloxSetFrequency+0xa0>
			HAL_Delay(100);
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006b88:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2bb5      	cmp	r3, #181	; 0xb5
 8006b8e:	f040 80c7 	bne.w	8006d20 <ubloxSetFrequency+0x254>
 8006b92:	4b70      	ldr	r3, [pc, #448]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b62      	cmp	r3, #98	; 0x62
 8006b98:	f040 80c2 	bne.w	8006d20 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006b9c:	4b6d      	ldr	r3, [pc, #436]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006b9e:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006ba0:	2b06      	cmp	r3, #6
 8006ba2:	f040 80bd 	bne.w	8006d20 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006ba6:	4b6b      	ldr	r3, [pc, #428]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006ba8:	78db      	ldrb	r3, [r3, #3]
 8006baa:	2b31      	cmp	r3, #49	; 0x31
 8006bac:	f040 80b8 	bne.w	8006d20 <ubloxSetFrequency+0x254>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb4:	e00c      	b.n	8006bd0 <ubloxSetFrequency+0x104>
				cfg_tp5_Set[i] = ublox_Response[i];
 8006bb6:	4a67      	ldr	r2, [pc, #412]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	4413      	add	r3, r2
 8006bbc:	7819      	ldrb	r1, [r3, #0]
 8006bbe:	f107 0214 	add.w	r2, r7, #20
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc4:	4413      	add	r3, r2
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bcc:	3301      	adds	r3, #1
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	2b27      	cmp	r3, #39	; 0x27
 8006bd4:	d9ef      	bls.n	8006bb6 <ubloxSetFrequency+0xea>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8006bd6:	7c3b      	ldrb	r3, [r7, #16]
 8006bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cfg_tp5_Set[6 +  9] = buf[1];
 8006bdc:	7c7b      	ldrb	r3, [r7, #17]
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cfg_tp5_Set[6 + 10] = buf[2];
 8006be2:	7cbb      	ldrb	r3, [r7, #18]
 8006be4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			cfg_tp5_Set[6 + 11] = buf[3];
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8006bee:	7c3b      	ldrb	r3, [r7, #16]
 8006bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			cfg_tp5_Set[6 + 13] = buf[1];
 8006bf4:	7c7b      	ldrb	r3, [r7, #17]
 8006bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			cfg_tp5_Set[6 + 14] = buf[2];
 8006bfa:	7cbb      	ldrb	r3, [r7, #18]
 8006bfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			cfg_tp5_Set[6 + 15] = buf[3];
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			if (frequency > 1) {
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d918      	bls.n	8006c3e <ubloxSetFrequency+0x172>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x00;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x00;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x80;
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x00;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x00;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x80;
 8006c36:	2380      	movs	r3, #128	; 0x80
 8006c38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006c3c:	e017      	b.n	8006c6e <ubloxSetFrequency+0x1a2>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 8006c3e:	2399      	movs	r3, #153	; 0x99
 8006c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x99;
 8006c44:	2399      	movs	r3, #153	; 0x99
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x99;
 8006c4a:	2399      	movs	r3, #153	; 0x99
 8006c4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x19;
 8006c50:	2319      	movs	r3, #25
 8006c52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 8006c56:	2399      	movs	r3, #153	; 0x99
 8006c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x99;
 8006c5c:	2399      	movs	r3, #153	; 0x99
 8006c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x99;
 8006c62:	2399      	movs	r3, #153	; 0x99
 8006c64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x19;
 8006c68:	2319      	movs	r3, #25
 8006c6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8006c6e:	23cf      	movs	r3, #207	; 0xcf
 8006c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8006c74:	f107 0014 	add.w	r0, r7, #20
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2201      	movs	r2, #1
 8006c80:	2128      	movs	r1, #40	; 0x28
 8006c82:	f7ff fdd7 	bl	8006834 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8006c86:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <ubloxSetFrequency+0x28c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8006c8c:	4830      	ldr	r0, [pc, #192]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006c8e:	f007 fe83 	bl	800e998 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8006c92:	f107 0314 	add.w	r3, r7, #20
 8006c96:	2228      	movs	r2, #40	; 0x28
 8006c98:	4619      	mov	r1, r3
 8006c9a:	482d      	ldr	r0, [pc, #180]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006c9c:	f007 fddc 	bl	800e858 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006ca0:	bf00      	nop
 8006ca2:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <ubloxSetFrequency+0x28c>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d1fa      	bne.n	8006ca2 <ubloxSetFrequency+0x1d6>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006cac:	4828      	ldr	r0, [pc, #160]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006cae:	f007 fe73 	bl	800e998 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8006cb2:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <ubloxSetFrequency+0x280>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006cb8:	4825      	ldr	r0, [pc, #148]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006cba:	f008 f967 	bl	800ef8c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006cc2:	4924      	ldr	r1, [pc, #144]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006cc4:	4822      	ldr	r0, [pc, #136]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006cc6:	f007 fe23 	bl	800e910 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006cca:	bf00      	nop
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <ubloxSetFrequency+0x280>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d1fa      	bne.n	8006ccc <ubloxSetFrequency+0x200>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8006cd6:	481e      	ldr	r0, [pc, #120]	; (8006d50 <ubloxSetFrequency+0x284>)
 8006cd8:	f007 feb4 	bl	800ea44 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2bb5      	cmp	r3, #181	; 0xb5
 8006ce2:	d11d      	bne.n	8006d20 <ubloxSetFrequency+0x254>
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b62      	cmp	r3, #98	; 0x62
 8006cea:	d119      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006cee:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006cf0:	2b05      	cmp	r3, #5
 8006cf2:	d115      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006cf4:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006cf6:	78db      	ldrb	r3, [r3, #3]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d111      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006cfc:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006cfe:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d10d      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006d04:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006d06:	795b      	ldrb	r3, [r3, #5]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006d0c:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006d0e:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d105      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006d14:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <ubloxSetFrequency+0x288>)
 8006d16:	79db      	ldrb	r3, [r3, #7]
 8006d18:	2b31      	cmp	r3, #49	; 0x31
 8006d1a:	d101      	bne.n	8006d20 <ubloxSetFrequency+0x254>
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100);
				}
#endif
				return 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e00e      	b.n	8006d3e <ubloxSetFrequency+0x272>
			HAL_Delay(100);
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8006d20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d24:	3b01      	subs	r3, #1
 8006d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		HAL_Delay(1500UL);
 8006d2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006d2e:	f000 fd93 	bl	8007858 <HAL_Delay>
	while (tryCtr) {
 8006d32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f47f aef6 	bne.w	8006b28 <ubloxSetFrequency+0x5c>
	}

	return 1;
 8006d3c:	2301      	movs	r3, #1
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3748      	adds	r7, #72	; 0x48
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	08013be8 	.word	0x08013be8
 8006d4c:	20003202 	.word	0x20003202
 8006d50:	2000564c 	.word	0x2000564c
 8006d54:	20003388 	.word	0x20003388
 8006d58:	20003201 	.word	0x20003201

08006d5c <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b0ac      	sub	sp, #176	; 0xb0
 8006d60:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8006d62:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <ubloxMsgsTurnOff+0x40>)
 8006d64:	463b      	mov	r3, r7
 8006d66:	4611      	mov	r1, r2
 8006d68:	22af      	movs	r2, #175	; 0xaf
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f008 ff60 	bl	800fc30 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <ubloxMsgsTurnOff+0x44>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8006d76:	463b      	mov	r3, r7
 8006d78:	22af      	movs	r2, #175	; 0xaf
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4809      	ldr	r0, [pc, #36]	; (8006da4 <ubloxMsgsTurnOff+0x48>)
 8006d7e:	f007 fd6b 	bl	800e858 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006d82:	bf00      	nop
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <ubloxMsgsTurnOff+0x44>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d1fa      	bne.n	8006d84 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8006d8e:	4805      	ldr	r0, [pc, #20]	; (8006da4 <ubloxMsgsTurnOff+0x48>)
 8006d90:	f007 fe02 	bl	800e998 <HAL_UART_AbortTransmit_IT>
}
 8006d94:	bf00      	nop
 8006d96:	37b0      	adds	r7, #176	; 0xb0
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	08013bf0 	.word	0x08013bf0
 8006da0:	20003201 	.word	0x20003201
 8006da4:	2000564c 	.word	0x2000564c

08006da8 <ublox_NavPosllh_req>:

void ublox_NavPosllh_req(UbloxNavPosllh_t* ubloxNavPosllh)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	6078      	str	r0, [r7, #4]
	uint8_t nav_Posllh_Req[] 		= {
 8006db0:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <ublox_NavPosllh_req+0x68>)
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dba:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x02,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Posllh_Req, sizeof(nav_Posllh_Req), 1, 0, 0);
 8006dbe:	f107 0008 	add.w	r0, r7, #8
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2201      	movs	r2, #1
 8006dca:	2108      	movs	r1, #8
 8006dcc:	f7ff fd32 	bl	8006834 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavPosllh) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d018      	beq.n	8006e08 <ublox_NavPosllh_req+0x60>
		gUbloxNavPosllh_resp = ubloxNavPosllh;
 8006dd6:	4a0f      	ldr	r2, [pc, #60]	; (8006e14 <ublox_NavPosllh_req+0x6c>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006ddc:	480e      	ldr	r0, [pc, #56]	; (8006e18 <ublox_NavPosllh_req+0x70>)
 8006dde:	f007 fd01 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006de2:	f7ff fcf7 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-POSLLH request */
	gUart1TxReady = RESET;
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <ublox_NavPosllh_req+0x74>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Posllh_Req, sizeof(nav_Posllh_Req));
 8006dec:	f107 0308 	add.w	r3, r7, #8
 8006df0:	2208      	movs	r2, #8
 8006df2:	4619      	mov	r1, r3
 8006df4:	4808      	ldr	r0, [pc, #32]	; (8006e18 <ublox_NavPosllh_req+0x70>)
 8006df6:	f007 fd2f 	bl	800e858 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006dfa:	bf00      	nop
 8006dfc:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <ublox_NavPosllh_req+0x74>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d1fa      	bne.n	8006dfc <ublox_NavPosllh_req+0x54>
 8006e06:	e000      	b.n	8006e0a <ublox_NavPosllh_req+0x62>
		return;
 8006e08:	bf00      	nop
	}
}
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	08013ca0 	.word	0x08013ca0
 8006e14:	20003378 	.word	0x20003378
 8006e18:	2000564c 	.word	0x2000564c
 8006e1c:	20003201 	.word	0x20003201

08006e20 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <ublox_NavClock_req+0x68>)
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e32:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006e36:	f107 0008 	add.w	r0, r7, #8
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2201      	movs	r2, #1
 8006e42:	2108      	movs	r1, #8
 8006e44:	f7ff fcf6 	bl	8006834 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <ublox_NavClock_req+0x60>
		gUbloxNavClock_resp = ubloxNavClock;
 8006e4e:	4a0f      	ldr	r2, [pc, #60]	; (8006e8c <ublox_NavClock_req+0x6c>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006e54:	480e      	ldr	r0, [pc, #56]	; (8006e90 <ublox_NavClock_req+0x70>)
 8006e56:	f007 fcc5 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006e5a:	f7ff fcbb 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <ublox_NavClock_req+0x74>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	2208      	movs	r2, #8
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4808      	ldr	r0, [pc, #32]	; (8006e90 <ublox_NavClock_req+0x70>)
 8006e6e:	f007 fcf3 	bl	800e858 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006e72:	bf00      	nop
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <ublox_NavClock_req+0x74>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d1fa      	bne.n	8006e74 <ublox_NavClock_req+0x54>
 8006e7e:	e000      	b.n	8006e82 <ublox_NavClock_req+0x62>
		return;
 8006e80:	bf00      	nop
	}
}
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	08013ca8 	.word	0x08013ca8
 8006e8c:	2000337c 	.word	0x2000337c
 8006e90:	2000564c 	.word	0x2000564c
 8006e94:	20003201 	.word	0x20003201

08006e98 <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8006ea0:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <ublox_NavDop_req+0x68>)
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006eaa:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8006eae:	f107 0008 	add.w	r0, r7, #8
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2108      	movs	r1, #8
 8006ebc:	f7ff fcba 	bl	8006834 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <ublox_NavDop_req+0x60>
		gUbloxNavDop_resp = ubloxNavDop;
 8006ec6:	4a0f      	ldr	r2, [pc, #60]	; (8006f04 <ublox_NavDop_req+0x6c>)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006ecc:	480e      	ldr	r0, [pc, #56]	; (8006f08 <ublox_NavDop_req+0x70>)
 8006ece:	f007 fc89 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006ed2:	f7ff fc7f 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <ublox_NavDop_req+0x74>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006edc:	f107 0308 	add.w	r3, r7, #8
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4808      	ldr	r0, [pc, #32]	; (8006f08 <ublox_NavDop_req+0x70>)
 8006ee6:	f007 fcb7 	bl	800e858 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006eea:	bf00      	nop
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <ublox_NavDop_req+0x74>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d1fa      	bne.n	8006eec <ublox_NavDop_req+0x54>
 8006ef6:	e000      	b.n	8006efa <ublox_NavDop_req+0x62>
		return;
 8006ef8:	bf00      	nop
	}
}
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08013cb0 	.word	0x08013cb0
 8006f04:	20003380 	.word	0x20003380
 8006f08:	2000564c 	.word	0x2000564c
 8006f0c:	20003201 	.word	0x20003201

08006f10 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <ublox_NavSvinfo_req+0x68>)
 8006f1a:	f107 0308 	add.w	r3, r7, #8
 8006f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f22:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 8006f26:	f107 0008 	add.w	r0, r7, #8
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2201      	movs	r2, #1
 8006f32:	2108      	movs	r1, #8
 8006f34:	f7ff fc7e 	bl	8006834 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d018      	beq.n	8006f70 <ublox_NavSvinfo_req+0x60>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8006f3e:	4a0f      	ldr	r2, [pc, #60]	; (8006f7c <ublox_NavSvinfo_req+0x6c>)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006f44:	480e      	ldr	r0, [pc, #56]	; (8006f80 <ublox_NavSvinfo_req+0x70>)
 8006f46:	f007 fc4d 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006f4a:	f7ff fc43 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <ublox_NavSvinfo_req+0x74>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006f54:	f107 0308 	add.w	r3, r7, #8
 8006f58:	2208      	movs	r2, #8
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4808      	ldr	r0, [pc, #32]	; (8006f80 <ublox_NavSvinfo_req+0x70>)
 8006f5e:	f007 fc7b 	bl	800e858 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006f62:	bf00      	nop
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <ublox_NavSvinfo_req+0x74>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d1fa      	bne.n	8006f64 <ublox_NavSvinfo_req+0x54>
 8006f6e:	e000      	b.n	8006f72 <ublox_NavSvinfo_req+0x62>
		return;
 8006f70:	bf00      	nop
	}
}
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	08013cb8 	.word	0x08013cb8
 8006f7c:	20003384 	.word	0x20003384
 8006f80:	2000564c 	.word	0x2000564c
 8006f84:	20003201 	.word	0x20003201

08006f88 <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	; 0x30
 8006f8c:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006f92:	4859      	ldr	r0, [pc, #356]	; (80070f8 <ublox_All_resp+0x170>)
 8006f94:	f007 fc26 	bl	800e7e4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006f98:	f7ff fc1c 	bl	80067d4 <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8006f9c:	4856      	ldr	r0, [pc, #344]	; (80070f8 <ublox_All_resp+0x170>)
 8006f9e:	f007 fff5 	bl	800ef8c <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8006fa2:	4b56      	ldr	r3, [pc, #344]	; (80070fc <ublox_All_resp+0x174>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fac:	4954      	ldr	r1, [pc, #336]	; (8007100 <ublox_All_resp+0x178>)
 8006fae:	4852      	ldr	r0, [pc, #328]	; (80070f8 <ublox_All_resp+0x170>)
 8006fb0:	f007 fcae 	bl	800e910 <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8006fb4:	2364      	movs	r3, #100	; 0x64
 8006fb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006fba:	e007      	b.n	8006fcc <ublox_All_resp+0x44>
			HAL_Delay(10UL);
 8006fbc:	200a      	movs	r0, #10
 8006fbe:	f000 fc4b 	bl	8007858 <HAL_Delay>
			--cnt;
 8006fc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <ublox_All_resp+0x56>
 8006fd4:	4b49      	ldr	r3, [pc, #292]	; (80070fc <ublox_All_resp+0x174>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d1ee      	bne.n	8006fbc <ublox_All_resp+0x34>
		}

		if (gUart1RxCnt) {
 8006fde:	4b49      	ldr	r3, [pc, #292]	; (8007104 <ublox_All_resp+0x17c>)
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0dc      	beq.n	8006fa2 <ublox_All_resp+0x1a>
			dataIdx		= 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	847b      	strh	r3, [r7, #34]	; 0x22
			dataCnt 	= gUart1RxCnt;
 8006fec:	4b45      	ldr	r3, [pc, #276]	; (8007104 <ublox_All_resp+0x17c>)
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	827b      	strh	r3, [r7, #18]
			break;
 8006ff2:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8006ff4:	e3b4      	b.n	8007760 <ublox_All_resp+0x7d8>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ff8:	4a41      	ldr	r2, [pc, #260]	; (8007100 <ublox_All_resp+0x178>)
 8006ffa:	5cd3      	ldrb	r3, [r2, r3]
 8006ffc:	747b      	strb	r3, [r7, #17]
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8006ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007000:	3301      	adds	r3, #1
 8007002:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <ublox_All_resp+0x178>)
 8007004:	5cd3      	ldrb	r3, [r2, r3]
 8007006:	743b      	strb	r3, [r7, #16]

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8007008:	7c7b      	ldrb	r3, [r7, #17]
 800700a:	2bb5      	cmp	r3, #181	; 0xb5
 800700c:	d102      	bne.n	8007014 <ublox_All_resp+0x8c>
 800700e:	7c3b      	ldrb	r3, [r7, #16]
 8007010:	2b62      	cmp	r3, #98	; 0x62
 8007012:	d003      	beq.n	800701c <ublox_All_resp+0x94>
			dataIdx++;
 8007014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007016:	3301      	adds	r3, #1
 8007018:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 800701a:	e3a1      	b.n	8007760 <ublox_All_resp+0x7d8>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 800701c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800701e:	3302      	adds	r3, #2
 8007020:	4a37      	ldr	r2, [pc, #220]	; (8007100 <ublox_All_resp+0x178>)
 8007022:	5cd3      	ldrb	r3, [r2, r3]
 8007024:	73fb      	strb	r3, [r7, #15]
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8007026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007028:	3303      	adds	r3, #3
 800702a:	4a35      	ldr	r2, [pc, #212]	; (8007100 <ublox_All_resp+0x178>)
 800702c:	5cd3      	ldrb	r3, [r2, r3]
 800702e:	73bb      	strb	r3, [r7, #14]
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8007030:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007032:	3304      	adds	r3, #4
 8007034:	4a32      	ldr	r2, [pc, #200]	; (8007100 <ublox_All_resp+0x178>)
 8007036:	5cd3      	ldrb	r3, [r2, r3]
 8007038:	b21a      	sxth	r2, r3
 800703a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800703c:	3305      	adds	r3, #5
 800703e:	4930      	ldr	r1, [pc, #192]	; (8007100 <ublox_All_resp+0x178>)
 8007040:	5ccb      	ldrb	r3, [r1, r3]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	b21b      	sxth	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b21b      	sxth	r3, r3
 800704a:	81bb      	strh	r3, [r7, #12]

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 800704c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800704e:	1d9a      	adds	r2, r3, #6
 8007050:	89bb      	ldrh	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	8a7b      	ldrh	r3, [r7, #18]
 8007058:	429a      	cmp	r2, r3
 800705a:	f280 8388 	bge.w	800776e <ublox_All_resp+0x7e6>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 800705e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007060:	89bb      	ldrh	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	3306      	adds	r3, #6
 8007066:	4a26      	ldr	r2, [pc, #152]	; (8007100 <ublox_All_resp+0x178>)
 8007068:	5cd3      	ldrb	r3, [r2, r3]
 800706a:	72fb      	strb	r3, [r7, #11]
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 800706c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800706e:	89bb      	ldrh	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	3307      	adds	r3, #7
 8007074:	4a22      	ldr	r2, [pc, #136]	; (8007100 <ublox_All_resp+0x178>)
 8007076:	5cd3      	ldrb	r3, [r2, r3]
 8007078:	72bb      	strb	r3, [r7, #10]

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	71fb      	strb	r3, [r7, #7]
 800707e:	2300      	movs	r3, #0
 8007080:	71bb      	strb	r3, [r7, #6]
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8007082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <ublox_All_resp+0x178>)
 8007086:	1898      	adds	r0, r3, r2
 8007088:	89bb      	ldrh	r3, [r7, #12]
 800708a:	3308      	adds	r3, #8
 800708c:	b299      	uxth	r1, r3
 800708e:	1dfa      	adds	r2, r7, #7
 8007090:	1dbb      	adds	r3, r7, #6
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	f7ff fbcc 	bl	8006834 <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	7afa      	ldrb	r2, [r7, #11]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d103      	bne.n	80070ac <ublox_All_resp+0x124>
 80070a4:	79bb      	ldrb	r3, [r7, #6]
 80070a6:	7aba      	ldrb	r2, [r7, #10]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d003      	beq.n	80070b4 <ublox_All_resp+0x12c>
			dataIdx++;
 80070ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070ae:	3301      	adds	r3, #1
 80070b0:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 80070b2:	e355      	b.n	8007760 <ublox_All_resp+0x7d8>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	b21a      	sxth	r2, r3
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	b21b      	sxth	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	813b      	strh	r3, [r7, #8]
		switch (clsID)
 80070c4:	893b      	ldrh	r3, [r7, #8]
 80070c6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80070ca:	f000 8218 	beq.w	80074fe <ublox_All_resp+0x576>
 80070ce:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80070d2:	f300 833f 	bgt.w	8007754 <ublox_All_resp+0x7cc>
 80070d6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80070da:	f000 817e 	beq.w	80073da <ublox_All_resp+0x452>
 80070de:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80070e2:	f300 8337 	bgt.w	8007754 <ublox_All_resp+0x7cc>
 80070e6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80070ea:	d00d      	beq.n	8007108 <ublox_All_resp+0x180>
 80070ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f0:	f000 80d8 	beq.w	80072a4 <ublox_All_resp+0x31c>
 80070f4:	e32e      	b.n	8007754 <ublox_All_resp+0x7cc>
 80070f6:	bf00      	nop
 80070f8:	2000564c 	.word	0x2000564c
 80070fc:	20003202 	.word	0x20003202
 8007100:	20003388 	.word	0x20003388
 8007104:	20003204 	.word	0x20003204
		{
		case 0x0102:
		{
			/* NavPosllh */
			if (len == 0x001c) {
 8007108:	89bb      	ldrh	r3, [r7, #12]
 800710a:	2b1c      	cmp	r3, #28
 800710c:	f040 831d 	bne.w	800774a <ublox_All_resp+0x7c2>
				gUbloxNavPosllh_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007112:	3306      	adds	r3, #6
 8007114:	4a61      	ldr	r2, [pc, #388]	; (800729c <ublox_All_resp+0x314>)
 8007116:	5cd3      	ldrb	r3, [r2, r3]
 8007118:	4619      	mov	r1, r3
 800711a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800711c:	3307      	adds	r3, #7
 800711e:	4a5f      	ldr	r2, [pc, #380]	; (800729c <ublox_All_resp+0x314>)
 8007120:	5cd3      	ldrb	r3, [r2, r3]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	ea41 0203 	orr.w	r2, r1, r3
 8007128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800712a:	3308      	adds	r3, #8
 800712c:	495b      	ldr	r1, [pc, #364]	; (800729c <ublox_All_resp+0x314>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	431a      	orrs	r2, r3
 8007134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007136:	3309      	adds	r3, #9
 8007138:	4958      	ldr	r1, [pc, #352]	; (800729c <ublox_All_resp+0x314>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	431a      	orrs	r2, r3
 8007140:	4b57      	ldr	r3, [pc, #348]	; (80072a0 <ublox_All_resp+0x318>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	601a      	str	r2, [r3, #0]
				gUbloxNavPosllh_resp->lon		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24);
 8007146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007148:	330a      	adds	r3, #10
 800714a:	4a54      	ldr	r2, [pc, #336]	; (800729c <ublox_All_resp+0x314>)
 800714c:	5cd3      	ldrb	r3, [r2, r3]
 800714e:	4619      	mov	r1, r3
 8007150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007152:	330b      	adds	r3, #11
 8007154:	4a51      	ldr	r2, [pc, #324]	; (800729c <ublox_All_resp+0x314>)
 8007156:	5cd3      	ldrb	r3, [r2, r3]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	ea41 0203 	orr.w	r2, r1, r3
 800715e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007160:	330c      	adds	r3, #12
 8007162:	494e      	ldr	r1, [pc, #312]	; (800729c <ublox_All_resp+0x314>)
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	ea42 0103 	orr.w	r1, r2, r3
 800716c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800716e:	330d      	adds	r3, #13
 8007170:	4a4a      	ldr	r2, [pc, #296]	; (800729c <ublox_All_resp+0x314>)
 8007172:	5cd3      	ldrb	r3, [r2, r3]
 8007174:	061a      	lsls	r2, r3, #24
 8007176:	4b4a      	ldr	r3, [pc, #296]	; (80072a0 <ublox_All_resp+0x318>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
				gUbloxNavPosllh_resp->lat		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24);
 800717e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007180:	330e      	adds	r3, #14
 8007182:	4a46      	ldr	r2, [pc, #280]	; (800729c <ublox_All_resp+0x314>)
 8007184:	5cd3      	ldrb	r3, [r2, r3]
 8007186:	4619      	mov	r1, r3
 8007188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800718a:	330f      	adds	r3, #15
 800718c:	4a43      	ldr	r2, [pc, #268]	; (800729c <ublox_All_resp+0x314>)
 800718e:	5cd3      	ldrb	r3, [r2, r3]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	ea41 0203 	orr.w	r2, r1, r3
 8007196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007198:	3310      	adds	r3, #16
 800719a:	4940      	ldr	r1, [pc, #256]	; (800729c <ublox_All_resp+0x314>)
 800719c:	5ccb      	ldrb	r3, [r1, r3]
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	ea42 0103 	orr.w	r1, r2, r3
 80071a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071a6:	3311      	adds	r3, #17
 80071a8:	4a3c      	ldr	r2, [pc, #240]	; (800729c <ublox_All_resp+0x314>)
 80071aa:	5cd3      	ldrb	r3, [r2, r3]
 80071ac:	061a      	lsls	r2, r3, #24
 80071ae:	4b3c      	ldr	r3, [pc, #240]	; (80072a0 <ublox_All_resp+0x318>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	609a      	str	r2, [r3, #8]
				gUbloxNavPosllh_resp->height	= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 80071b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071b8:	3312      	adds	r3, #18
 80071ba:	4a38      	ldr	r2, [pc, #224]	; (800729c <ublox_All_resp+0x314>)
 80071bc:	5cd3      	ldrb	r3, [r2, r3]
 80071be:	4619      	mov	r1, r3
 80071c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071c2:	3313      	adds	r3, #19
 80071c4:	4a35      	ldr	r2, [pc, #212]	; (800729c <ublox_All_resp+0x314>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	ea41 0203 	orr.w	r2, r1, r3
 80071ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071d0:	3314      	adds	r3, #20
 80071d2:	4932      	ldr	r1, [pc, #200]	; (800729c <ublox_All_resp+0x314>)
 80071d4:	5ccb      	ldrb	r3, [r1, r3]
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	ea42 0103 	orr.w	r1, r2, r3
 80071dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071de:	3315      	adds	r3, #21
 80071e0:	4a2e      	ldr	r2, [pc, #184]	; (800729c <ublox_All_resp+0x314>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	061a      	lsls	r2, r3, #24
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <ublox_All_resp+0x318>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	60da      	str	r2, [r3, #12]
				gUbloxNavPosllh_resp->hMSL		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80071ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071f0:	3316      	adds	r3, #22
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <ublox_All_resp+0x314>)
 80071f4:	5cd3      	ldrb	r3, [r2, r3]
 80071f6:	4619      	mov	r1, r3
 80071f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071fa:	3317      	adds	r3, #23
 80071fc:	4a27      	ldr	r2, [pc, #156]	; (800729c <ublox_All_resp+0x314>)
 80071fe:	5cd3      	ldrb	r3, [r2, r3]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	ea41 0203 	orr.w	r2, r1, r3
 8007206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007208:	3318      	adds	r3, #24
 800720a:	4924      	ldr	r1, [pc, #144]	; (800729c <ublox_All_resp+0x314>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	ea42 0103 	orr.w	r1, r2, r3
 8007214:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007216:	3319      	adds	r3, #25
 8007218:	4a20      	ldr	r2, [pc, #128]	; (800729c <ublox_All_resp+0x314>)
 800721a:	5cd3      	ldrb	r3, [r2, r3]
 800721c:	061a      	lsls	r2, r3, #24
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <ublox_All_resp+0x318>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	611a      	str	r2, [r3, #16]
				gUbloxNavPosllh_resp->hAcc		= ublox_Response[dataIdx + 6 + 20] | (ublox_Response[dataIdx + 6 + 21] << 8) | (ublox_Response[dataIdx + 6 + 22] << 16) | (ublox_Response[dataIdx + 6 + 23] << 24);
 8007226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007228:	331a      	adds	r3, #26
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <ublox_All_resp+0x314>)
 800722c:	5cd3      	ldrb	r3, [r2, r3]
 800722e:	4619      	mov	r1, r3
 8007230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007232:	331b      	adds	r3, #27
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <ublox_All_resp+0x314>)
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	ea41 0203 	orr.w	r2, r1, r3
 800723e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007240:	331c      	adds	r3, #28
 8007242:	4916      	ldr	r1, [pc, #88]	; (800729c <ublox_All_resp+0x314>)
 8007244:	5ccb      	ldrb	r3, [r1, r3]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	431a      	orrs	r2, r3
 800724a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800724c:	331d      	adds	r3, #29
 800724e:	4913      	ldr	r1, [pc, #76]	; (800729c <ublox_All_resp+0x314>)
 8007250:	5ccb      	ldrb	r3, [r1, r3]
 8007252:	061b      	lsls	r3, r3, #24
 8007254:	431a      	orrs	r2, r3
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <ublox_All_resp+0x318>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	615a      	str	r2, [r3, #20]
				gUbloxNavPosllh_resp->vAcc		= ublox_Response[dataIdx + 6 + 24] | (ublox_Response[dataIdx + 6 + 25] << 8) | (ublox_Response[dataIdx + 6 + 26] << 16) | (ublox_Response[dataIdx + 6 + 27] << 24);
 800725c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800725e:	331e      	adds	r3, #30
 8007260:	4a0e      	ldr	r2, [pc, #56]	; (800729c <ublox_All_resp+0x314>)
 8007262:	5cd3      	ldrb	r3, [r2, r3]
 8007264:	4619      	mov	r1, r3
 8007266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007268:	331f      	adds	r3, #31
 800726a:	4a0c      	ldr	r2, [pc, #48]	; (800729c <ublox_All_resp+0x314>)
 800726c:	5cd3      	ldrb	r3, [r2, r3]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	ea41 0203 	orr.w	r2, r1, r3
 8007274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007276:	3320      	adds	r3, #32
 8007278:	4908      	ldr	r1, [pc, #32]	; (800729c <ublox_All_resp+0x314>)
 800727a:	5ccb      	ldrb	r3, [r1, r3]
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	431a      	orrs	r2, r3
 8007280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007282:	3321      	adds	r3, #33	; 0x21
 8007284:	4905      	ldr	r1, [pc, #20]	; (800729c <ublox_All_resp+0x314>)
 8007286:	5ccb      	ldrb	r3, [r1, r3]
 8007288:	061b      	lsls	r3, r3, #24
 800728a:	431a      	orrs	r2, r3
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <ublox_All_resp+0x318>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	619a      	str	r2, [r3, #24]

				bf |= USART_UBLOX_RESP_BF_NAV_POSLLH;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 800729a:	e256      	b.n	800774a <ublox_All_resp+0x7c2>
 800729c:	20003388 	.word	0x20003388
 80072a0:	20003378 	.word	0x20003378

		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 80072a4:	89bb      	ldrh	r3, [r7, #12]
 80072a6:	2b12      	cmp	r3, #18
 80072a8:	f040 8251 	bne.w	800774e <ublox_All_resp+0x7c6>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80072ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072ae:	3306      	adds	r3, #6
 80072b0:	4a96      	ldr	r2, [pc, #600]	; (800750c <ublox_All_resp+0x584>)
 80072b2:	5cd3      	ldrb	r3, [r2, r3]
 80072b4:	4619      	mov	r1, r3
 80072b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b8:	3307      	adds	r3, #7
 80072ba:	4a94      	ldr	r2, [pc, #592]	; (800750c <ublox_All_resp+0x584>)
 80072bc:	5cd3      	ldrb	r3, [r2, r3]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	ea41 0203 	orr.w	r2, r1, r3
 80072c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c6:	3308      	adds	r3, #8
 80072c8:	4990      	ldr	r1, [pc, #576]	; (800750c <ublox_All_resp+0x584>)
 80072ca:	5ccb      	ldrb	r3, [r1, r3]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	431a      	orrs	r2, r3
 80072d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072d2:	3309      	adds	r3, #9
 80072d4:	498d      	ldr	r1, [pc, #564]	; (800750c <ublox_All_resp+0x584>)
 80072d6:	5ccb      	ldrb	r3, [r1, r3]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	431a      	orrs	r2, r3
 80072dc:	4b8c      	ldr	r3, [pc, #560]	; (8007510 <ublox_All_resp+0x588>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 80072e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072e4:	330a      	adds	r3, #10
 80072e6:	4a89      	ldr	r2, [pc, #548]	; (800750c <ublox_All_resp+0x584>)
 80072e8:	5cd3      	ldrb	r3, [r2, r3]
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072ee:	330b      	adds	r3, #11
 80072f0:	4986      	ldr	r1, [pc, #536]	; (800750c <ublox_All_resp+0x584>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	b21a      	sxth	r2, r3
 80072fc:	4b84      	ldr	r3, [pc, #528]	; (8007510 <ublox_All_resp+0x588>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	b292      	uxth	r2, r2
 8007302:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8007304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007306:	330c      	adds	r3, #12
 8007308:	4a80      	ldr	r2, [pc, #512]	; (800750c <ublox_All_resp+0x584>)
 800730a:	5cd3      	ldrb	r3, [r2, r3]
 800730c:	b21a      	sxth	r2, r3
 800730e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007310:	330d      	adds	r3, #13
 8007312:	497e      	ldr	r1, [pc, #504]	; (800750c <ublox_All_resp+0x584>)
 8007314:	5ccb      	ldrb	r3, [r1, r3]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	b21b      	sxth	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b21a      	sxth	r2, r3
 800731e:	4b7c      	ldr	r3, [pc, #496]	; (8007510 <ublox_All_resp+0x588>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	b292      	uxth	r2, r2
 8007324:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 8007326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007328:	330e      	adds	r3, #14
 800732a:	4a78      	ldr	r2, [pc, #480]	; (800750c <ublox_All_resp+0x584>)
 800732c:	5cd3      	ldrb	r3, [r2, r3]
 800732e:	b21a      	sxth	r2, r3
 8007330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007332:	330f      	adds	r3, #15
 8007334:	4975      	ldr	r1, [pc, #468]	; (800750c <ublox_All_resp+0x584>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	b21b      	sxth	r3, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	b21a      	sxth	r2, r3
 8007340:	4b73      	ldr	r3, [pc, #460]	; (8007510 <ublox_All_resp+0x588>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b292      	uxth	r2, r2
 8007346:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 8007348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800734a:	3310      	adds	r3, #16
 800734c:	4a6f      	ldr	r2, [pc, #444]	; (800750c <ublox_All_resp+0x584>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	b21a      	sxth	r2, r3
 8007352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007354:	3311      	adds	r3, #17
 8007356:	496d      	ldr	r1, [pc, #436]	; (800750c <ublox_All_resp+0x584>)
 8007358:	5ccb      	ldrb	r3, [r1, r3]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b21b      	sxth	r3, r3
 800735e:	4313      	orrs	r3, r2
 8007360:	b21a      	sxth	r2, r3
 8007362:	4b6b      	ldr	r3, [pc, #428]	; (8007510 <ublox_All_resp+0x588>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	b292      	uxth	r2, r2
 8007368:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 800736a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800736c:	3312      	adds	r3, #18
 800736e:	4a67      	ldr	r2, [pc, #412]	; (800750c <ublox_All_resp+0x584>)
 8007370:	5cd3      	ldrb	r3, [r2, r3]
 8007372:	b21a      	sxth	r2, r3
 8007374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007376:	3313      	adds	r3, #19
 8007378:	4964      	ldr	r1, [pc, #400]	; (800750c <ublox_All_resp+0x584>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	b21b      	sxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b21a      	sxth	r2, r3
 8007384:	4b62      	ldr	r3, [pc, #392]	; (8007510 <ublox_All_resp+0x588>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	b292      	uxth	r2, r2
 800738a:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 800738c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800738e:	3314      	adds	r3, #20
 8007390:	4a5e      	ldr	r2, [pc, #376]	; (800750c <ublox_All_resp+0x584>)
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	b21a      	sxth	r2, r3
 8007396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007398:	3315      	adds	r3, #21
 800739a:	495c      	ldr	r1, [pc, #368]	; (800750c <ublox_All_resp+0x584>)
 800739c:	5ccb      	ldrb	r3, [r1, r3]
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	b21b      	sxth	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	4b5a      	ldr	r3, [pc, #360]	; (8007510 <ublox_All_resp+0x588>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	b292      	uxth	r2, r2
 80073ac:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 80073ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b0:	3316      	adds	r3, #22
 80073b2:	4a56      	ldr	r2, [pc, #344]	; (800750c <ublox_All_resp+0x584>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
 80073b6:	b21a      	sxth	r2, r3
 80073b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ba:	3317      	adds	r3, #23
 80073bc:	4953      	ldr	r1, [pc, #332]	; (800750c <ublox_All_resp+0x584>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b21a      	sxth	r2, r3
 80073c8:	4b51      	ldr	r3, [pc, #324]	; (8007510 <ublox_All_resp+0x588>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	b292      	uxth	r2, r2
 80073ce:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	f043 0304 	orr.w	r3, r3, #4
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80073d8:	e1b9      	b.n	800774e <ublox_All_resp+0x7c6>

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 80073da:	89bb      	ldrh	r3, [r7, #12]
 80073dc:	2b14      	cmp	r3, #20
 80073de:	f040 81b8 	bne.w	8007752 <ublox_All_resp+0x7ca>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80073e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073e4:	3306      	adds	r3, #6
 80073e6:	4a49      	ldr	r2, [pc, #292]	; (800750c <ublox_All_resp+0x584>)
 80073e8:	5cd3      	ldrb	r3, [r2, r3]
 80073ea:	4619      	mov	r1, r3
 80073ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ee:	3307      	adds	r3, #7
 80073f0:	4a46      	ldr	r2, [pc, #280]	; (800750c <ublox_All_resp+0x584>)
 80073f2:	5cd3      	ldrb	r3, [r2, r3]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	ea41 0203 	orr.w	r2, r1, r3
 80073fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073fc:	3308      	adds	r3, #8
 80073fe:	4943      	ldr	r1, [pc, #268]	; (800750c <ublox_All_resp+0x584>)
 8007400:	5ccb      	ldrb	r3, [r1, r3]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	431a      	orrs	r2, r3
 8007406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007408:	3309      	adds	r3, #9
 800740a:	4940      	ldr	r1, [pc, #256]	; (800750c <ublox_All_resp+0x584>)
 800740c:	5ccb      	ldrb	r3, [r1, r3]
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	431a      	orrs	r2, r3
 8007412:	4b40      	ldr	r3, [pc, #256]	; (8007514 <ublox_All_resp+0x58c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 8007418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800741a:	330a      	adds	r3, #10
 800741c:	4a3b      	ldr	r2, [pc, #236]	; (800750c <ublox_All_resp+0x584>)
 800741e:	5cd3      	ldrb	r3, [r2, r3]
 8007420:	4619      	mov	r1, r3
 8007422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007424:	330b      	adds	r3, #11
 8007426:	4a39      	ldr	r2, [pc, #228]	; (800750c <ublox_All_resp+0x584>)
 8007428:	5cd3      	ldrb	r3, [r2, r3]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	ea41 0203 	orr.w	r2, r1, r3
 8007430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007432:	330c      	adds	r3, #12
 8007434:	4935      	ldr	r1, [pc, #212]	; (800750c <ublox_All_resp+0x584>)
 8007436:	5ccb      	ldrb	r3, [r1, r3]
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	ea42 0103 	orr.w	r1, r2, r3
 800743e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007440:	330d      	adds	r3, #13
 8007442:	4a32      	ldr	r2, [pc, #200]	; (800750c <ublox_All_resp+0x584>)
 8007444:	5cd3      	ldrb	r3, [r2, r3]
 8007446:	061a      	lsls	r2, r3, #24
 8007448:	4b32      	ldr	r3, [pc, #200]	; (8007514 <ublox_All_resp+0x58c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 8007450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007452:	330e      	adds	r3, #14
 8007454:	4a2d      	ldr	r2, [pc, #180]	; (800750c <ublox_All_resp+0x584>)
 8007456:	5cd3      	ldrb	r3, [r2, r3]
 8007458:	4619      	mov	r1, r3
 800745a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800745c:	330f      	adds	r3, #15
 800745e:	4a2b      	ldr	r2, [pc, #172]	; (800750c <ublox_All_resp+0x584>)
 8007460:	5cd3      	ldrb	r3, [r2, r3]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	ea41 0203 	orr.w	r2, r1, r3
 8007468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800746a:	3310      	adds	r3, #16
 800746c:	4927      	ldr	r1, [pc, #156]	; (800750c <ublox_All_resp+0x584>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	ea42 0103 	orr.w	r1, r2, r3
 8007476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007478:	3311      	adds	r3, #17
 800747a:	4a24      	ldr	r2, [pc, #144]	; (800750c <ublox_All_resp+0x584>)
 800747c:	5cd3      	ldrb	r3, [r2, r3]
 800747e:	061a      	lsls	r2, r3, #24
 8007480:	4b24      	ldr	r3, [pc, #144]	; (8007514 <ublox_All_resp+0x58c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8007488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800748a:	3312      	adds	r3, #18
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <ublox_All_resp+0x584>)
 800748e:	5cd3      	ldrb	r3, [r2, r3]
 8007490:	4619      	mov	r1, r3
 8007492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007494:	3313      	adds	r3, #19
 8007496:	4a1d      	ldr	r2, [pc, #116]	; (800750c <ublox_All_resp+0x584>)
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	ea41 0203 	orr.w	r2, r1, r3
 80074a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074a2:	3314      	adds	r3, #20
 80074a4:	4919      	ldr	r1, [pc, #100]	; (800750c <ublox_All_resp+0x584>)
 80074a6:	5ccb      	ldrb	r3, [r1, r3]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	431a      	orrs	r2, r3
 80074ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ae:	3315      	adds	r3, #21
 80074b0:	4916      	ldr	r1, [pc, #88]	; (800750c <ublox_All_resp+0x584>)
 80074b2:	5ccb      	ldrb	r3, [r1, r3]
 80074b4:	061b      	lsls	r3, r3, #24
 80074b6:	431a      	orrs	r2, r3
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <ublox_All_resp+0x58c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80074be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074c0:	3316      	adds	r3, #22
 80074c2:	4a12      	ldr	r2, [pc, #72]	; (800750c <ublox_All_resp+0x584>)
 80074c4:	5cd3      	ldrb	r3, [r2, r3]
 80074c6:	4619      	mov	r1, r3
 80074c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ca:	3317      	adds	r3, #23
 80074cc:	4a0f      	ldr	r2, [pc, #60]	; (800750c <ublox_All_resp+0x584>)
 80074ce:	5cd3      	ldrb	r3, [r2, r3]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	ea41 0203 	orr.w	r2, r1, r3
 80074d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074d8:	3318      	adds	r3, #24
 80074da:	490c      	ldr	r1, [pc, #48]	; (800750c <ublox_All_resp+0x584>)
 80074dc:	5ccb      	ldrb	r3, [r1, r3]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074e4:	3319      	adds	r3, #25
 80074e6:	4909      	ldr	r1, [pc, #36]	; (800750c <ublox_All_resp+0x584>)
 80074e8:	5ccb      	ldrb	r3, [r1, r3]
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	431a      	orrs	r2, r3
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <ublox_All_resp+0x58c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	f043 0302 	orr.w	r3, r3, #2
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80074fc:	e129      	b.n	8007752 <ublox_All_resp+0x7ca>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <ublox_All_resp+0x590>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61fb      	str	r3, [r7, #28]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007504:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e00f      	b.n	800752c <ublox_All_resp+0x5a4>
 800750c:	20003388 	.word	0x20003388
 8007510:	20003380 	.word	0x20003380
 8007514:	2000337c 	.word	0x2000337c
 8007518:	20003384 	.word	0x20003384
						*(ptr++) = 0U;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	61fa      	str	r2, [r7, #28]
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	3b01      	subs	r3, #1
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f4      	bne.n	800751c <ublox_All_resp+0x594>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007534:	3306      	adds	r3, #6
 8007536:	4a91      	ldr	r2, [pc, #580]	; (800777c <ublox_All_resp+0x7f4>)
 8007538:	5cd3      	ldrb	r3, [r2, r3]
 800753a:	4619      	mov	r1, r3
 800753c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800753e:	3307      	adds	r3, #7
 8007540:	4a8e      	ldr	r2, [pc, #568]	; (800777c <ublox_All_resp+0x7f4>)
 8007542:	5cd3      	ldrb	r3, [r2, r3]
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	ea41 0203 	orr.w	r2, r1, r3
 800754a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800754c:	3308      	adds	r3, #8
 800754e:	498b      	ldr	r1, [pc, #556]	; (800777c <ublox_All_resp+0x7f4>)
 8007550:	5ccb      	ldrb	r3, [r1, r3]
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	431a      	orrs	r2, r3
 8007556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007558:	3309      	adds	r3, #9
 800755a:	4988      	ldr	r1, [pc, #544]	; (800777c <ublox_All_resp+0x7f4>)
 800755c:	5ccb      	ldrb	r3, [r1, r3]
 800755e:	061b      	lsls	r3, r3, #24
 8007560:	431a      	orrs	r2, r3
 8007562:	4b87      	ldr	r3, [pc, #540]	; (8007780 <ublox_All_resp+0x7f8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 8007568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800756a:	f103 020a 	add.w	r2, r3, #10
 800756e:	4b84      	ldr	r3, [pc, #528]	; (8007780 <ublox_All_resp+0x7f8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4982      	ldr	r1, [pc, #520]	; (800777c <ublox_All_resp+0x7f4>)
 8007574:	5c8a      	ldrb	r2, [r1, r2]
 8007576:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 8007578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800757a:	f103 020b 	add.w	r2, r3, #11
 800757e:	4b80      	ldr	r3, [pc, #512]	; (8007780 <ublox_All_resp+0x7f8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	497e      	ldr	r1, [pc, #504]	; (800777c <ublox_All_resp+0x7f4>)
 8007584:	5c8a      	ldrb	r2, [r1, r2]
 8007586:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8007588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800758a:	330c      	adds	r3, #12
 800758c:	4a7b      	ldr	r2, [pc, #492]	; (800777c <ublox_All_resp+0x7f4>)
 800758e:	5cd3      	ldrb	r3, [r2, r3]
 8007590:	b21a      	sxth	r2, r3
 8007592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007594:	330d      	adds	r3, #13
 8007596:	4979      	ldr	r1, [pc, #484]	; (800777c <ublox_All_resp+0x7f4>)
 8007598:	5ccb      	ldrb	r3, [r1, r3]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b21b      	sxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b21a      	sxth	r2, r3
 80075a2:	4b77      	ldr	r3, [pc, #476]	; (8007780 <ublox_All_resp+0x7f8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b292      	uxth	r2, r2
 80075a8:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 80075aa:	4b75      	ldr	r3, [pc, #468]	; (8007780 <ublox_All_resp+0x7f8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	791b      	ldrb	r3, [r3, #4]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b18      	cmp	r3, #24
 80075b4:	d903      	bls.n	80075be <ublox_All_resp+0x636>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 80075b6:	4b72      	ldr	r3, [pc, #456]	; (8007780 <ublox_All_resp+0x7f8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2218      	movs	r2, #24
 80075bc:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	e0b4      	b.n	800772e <ublox_All_resp+0x7a6>
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 80075c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075c6:	f103 010e 	add.w	r1, r3, #14
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	4a6a      	ldr	r2, [pc, #424]	; (8007780 <ublox_All_resp+0x7f8>)
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	4968      	ldr	r1, [pc, #416]	; (800777c <ublox_All_resp+0x7f4>)
 80075dc:	5cc9      	ldrb	r1, [r1, r3]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	4413      	add	r3, r2
 80075e2:	3308      	adds	r3, #8
 80075e4:	460a      	mov	r2, r1
 80075e6:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 80075e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075ea:	f103 010f 	add.w	r1, r3, #15
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4613      	mov	r3, r2
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	4a61      	ldr	r2, [pc, #388]	; (8007780 <ublox_All_resp+0x7f8>)
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	495f      	ldr	r1, [pc, #380]	; (800777c <ublox_All_resp+0x7f4>)
 8007600:	5cc9      	ldrb	r1, [r1, r3]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	4413      	add	r3, r2
 8007606:	3320      	adds	r3, #32
 8007608:	460a      	mov	r2, r1
 800760a:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 800760c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800760e:	f103 0110 	add.w	r1, r3, #16
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	4a58      	ldr	r2, [pc, #352]	; (8007780 <ublox_All_resp+0x7f8>)
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	4956      	ldr	r1, [pc, #344]	; (800777c <ublox_All_resp+0x7f4>)
 8007624:	5cc9      	ldrb	r1, [r1, r3]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	3338      	adds	r3, #56	; 0x38
 800762c:	460a      	mov	r2, r1
 800762e:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 8007630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007632:	f103 0111 	add.w	r1, r3, #17
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	4a4f      	ldr	r2, [pc, #316]	; (8007780 <ublox_All_resp+0x7f8>)
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	494d      	ldr	r1, [pc, #308]	; (800777c <ublox_All_resp+0x7f4>)
 8007648:	5cc9      	ldrb	r1, [r1, r3]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4413      	add	r3, r2
 800764e:	3350      	adds	r3, #80	; 0x50
 8007650:	460a      	mov	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 8007654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007656:	f103 0112 	add.w	r1, r3, #18
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4613      	mov	r3, r2
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	4a46      	ldr	r2, [pc, #280]	; (8007780 <ublox_All_resp+0x7f8>)
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	4944      	ldr	r1, [pc, #272]	; (800777c <ublox_All_resp+0x7f4>)
 800766c:	5cc9      	ldrb	r1, [r1, r3]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	4413      	add	r3, r2
 8007672:	3368      	adds	r3, #104	; 0x68
 8007674:	460a      	mov	r2, r1
 8007676:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 8007678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800767a:	f103 0113 	add.w	r1, r3, #19
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4613      	mov	r3, r2
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	4a3c      	ldr	r2, [pc, #240]	; (800777c <ublox_All_resp+0x7f4>)
 800768c:	5cd1      	ldrb	r1, [r2, r3]
 800768e:	4b3c      	ldr	r3, [pc, #240]	; (8007780 <ublox_All_resp+0x7f8>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	b249      	sxtb	r1, r1
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	3380      	adds	r3, #128	; 0x80
 800769a:	460a      	mov	r2, r1
 800769c:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 800769e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076a0:	f103 0114 	add.w	r1, r3, #20
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4613      	mov	r3, r2
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	4a32      	ldr	r2, [pc, #200]	; (800777c <ublox_All_resp+0x7f4>)
 80076b2:	5cd3      	ldrb	r3, [r2, r3]
 80076b4:	b219      	sxth	r1, r3
 80076b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076b8:	f103 0015 	add.w	r0, r3, #21
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4403      	add	r3, r0
 80076c8:	4a2c      	ldr	r2, [pc, #176]	; (800777c <ublox_All_resp+0x7f4>)
 80076ca:	5cd3      	ldrb	r3, [r2, r3]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b21a      	sxth	r2, r3
 80076d0:	4b2b      	ldr	r3, [pc, #172]	; (8007780 <ublox_All_resp+0x7f8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	b211      	sxth	r1, r2
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	324c      	adds	r2, #76	; 0x4c
 80076dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 80076e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076e2:	f103 0116 	add.w	r1, r3, #22
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4613      	mov	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	4a22      	ldr	r2, [pc, #136]	; (800777c <ublox_All_resp+0x7f4>)
 80076f4:	5cd3      	ldrb	r3, [r2, r3]
 80076f6:	b299      	uxth	r1, r3
 80076f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076fa:	f103 0017 	add.w	r0, r3, #23
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4613      	mov	r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4403      	add	r3, r0
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <ublox_All_resp+0x7f4>)
 800770c:	5cd3      	ldrb	r3, [r2, r3]
 800770e:	b29b      	uxth	r3, r3
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	b29b      	uxth	r3, r3
 8007714:	430b      	orrs	r3, r1
 8007716:	b29b      	uxth	r3, r3
 8007718:	b21a      	sxth	r2, r3
 800771a:	4b19      	ldr	r3, [pc, #100]	; (8007780 <ublox_All_resp+0x7f8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4611      	mov	r1, r2
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	3232      	adds	r2, #50	; 0x32
 8007724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	3301      	adds	r3, #1
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	4b14      	ldr	r3, [pc, #80]	; (8007780 <ublox_All_resp+0x7f8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	791b      	ldrb	r3, [r3, #4]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4293      	cmp	r3, r2
 800773c:	f6ff af42 	blt.w	80075c4 <ublox_All_resp+0x63c>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	f043 0308 	orr.w	r3, r3, #8
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 8007748:	e004      	b.n	8007754 <ublox_All_resp+0x7cc>
			break;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <ublox_All_resp+0x7cc>
			break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <ublox_All_resp+0x7cc>
			break;
 8007752:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 8007754:	89ba      	ldrh	r2, [r7, #12]
 8007756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007758:	4413      	add	r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	3308      	adds	r3, #8
 800775e:	847b      	strh	r3, [r7, #34]	; 0x22
	while (dataIdx < (dataCnt - 8)) {
 8007760:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007762:	8a7b      	ldrh	r3, [r7, #18]
 8007764:	3b08      	subs	r3, #8
 8007766:	429a      	cmp	r2, r3
 8007768:	f6ff ac45 	blt.w	8006ff6 <ublox_All_resp+0x6e>
 800776c:	e000      	b.n	8007770 <ublox_All_resp+0x7e8>
			break;
 800776e:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007772:	4618      	mov	r0, r3
 8007774:	3728      	adds	r7, #40	; 0x28
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20003388 	.word	0x20003388
 8007780:	20003384 	.word	0x20003384

08007784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007788:	f7fe fab4 	bl	8005cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800778c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800778e:	e003      	b.n	8007798 <LoopCopyDataInit>

08007790 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007792:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007794:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007796:	3104      	adds	r1, #4

08007798 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007798:	480a      	ldr	r0, [pc, #40]	; (80077c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800779c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800779e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80077a0:	d3f6      	bcc.n	8007790 <CopyDataInit>
	ldr	r2, =_sbss
 80077a2:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80077a4:	e002      	b.n	80077ac <LoopFillZerobss>

080077a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80077a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80077a8:	f842 3b04 	str.w	r3, [r2], #4

080077ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80077ac:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <LoopForever+0x16>)
	cmp	r2, r3
 80077ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80077b0:	d3f9      	bcc.n	80077a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80077b2:	f008 fa19 	bl	800fbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80077b6:	f7fd fb83 	bl	8004ec0 <main>

080077ba <LoopForever>:

LoopForever:
    b LoopForever
 80077ba:	e7fe      	b.n	80077ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80077bc:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80077c0:	080146a0 	.word	0x080146a0
	ldr	r0, =_sdata
 80077c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80077c8:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80077cc:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80077d0:	20005768 	.word	0x20005768

080077d4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80077d4:	e7fe      	b.n	80077d4 <CAN1_RX0_IRQHandler>
	...

080077d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <HAL_Init+0x3c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a0b      	ldr	r2, [pc, #44]	; (8007814 <HAL_Init+0x3c>)
 80077e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077ee:	2003      	movs	r0, #3
 80077f0:	f001 fd69 	bl	80092c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80077f4:	200f      	movs	r0, #15
 80077f6:	f7fe f8e5 	bl	80059c4 <HAL_InitTick>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	71fb      	strb	r3, [r7, #7]
 8007804:	e001      	b.n	800780a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007806:	f7fe f8b9 	bl	800597c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800780a:	79fb      	ldrb	r3, [r7, #7]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40022000 	.word	0x40022000

08007818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_IncTick+0x20>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_IncTick+0x24>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4413      	add	r3, r2
 8007828:	4a04      	ldr	r2, [pc, #16]	; (800783c <HAL_IncTick+0x24>)
 800782a:	6013      	str	r3, [r2, #0]
}
 800782c:	bf00      	nop
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000014 	.word	0x20000014
 800783c:	20005754 	.word	0x20005754

08007840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return uwTick;
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <HAL_GetTick+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20005754 	.word	0x20005754

08007858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007860:	f7ff ffee 	bl	8007840 <HAL_GetTick>
 8007864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d005      	beq.n	800787e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007872:	4b0a      	ldr	r3, [pc, #40]	; (800789c <HAL_Delay+0x44>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800787e:	bf00      	nop
 8007880:	f7ff ffde 	bl	8007840 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d8f7      	bhi.n	8007880 <HAL_Delay+0x28>
  {
  }
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000014 	.word	0x20000014

080078a0 <LL_ADC_SetCommonClock>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	609a      	str	r2, [r3, #8]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <LL_ADC_SetCommonPathInternalCh>:
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	609a      	str	r2, [r3, #8]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <LL_ADC_GetCommonPathInternalCh>:
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_ADC_SetOffset>:
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3360      	adds	r3, #96	; 0x60
 800791a:	461a      	mov	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <LL_ADC_SetOffset+0x44>)
 800792a:	4013      	ands	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	601a      	str	r2, [r3, #0]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	03fff000 	.word	0x03fff000

08007950 <LL_ADC_GetOffsetChannel>:
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3360      	adds	r3, #96	; 0x60
 800795e:	461a      	mov	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <LL_ADC_SetOffsetState>:
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3360      	adds	r3, #96	; 0x60
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	601a      	str	r2, [r3, #0]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <LL_ADC_REG_SetSequencerRanks>:
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3330      	adds	r3, #48	; 0x30
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	4413      	add	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 031f 	and.w	r3, r3, #31
 8007a02:	211f      	movs	r1, #31
 8007a04:	fa01 f303 	lsl.w	r3, r1, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0e9b      	lsrs	r3, r3, #26
 8007a10:	f003 011f 	and.w	r1, r3, #31
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <LL_ADC_SetChannelSamplingTime>:
{
 8007a56:	b480      	push	{r7}
 8007a58:	b087      	sub	sp, #28
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3314      	adds	r3, #20
 8007a66:	461a      	mov	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	0e5b      	lsrs	r3, r3, #25
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	4413      	add	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	0d1b      	lsrs	r3, r3, #20
 8007a7e:	f003 031f 	and.w	r3, r3, #31
 8007a82:	2107      	movs	r1, #7
 8007a84:	fa01 f303 	lsl.w	r3, r1, r3
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	401a      	ands	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	0d1b      	lsrs	r3, r3, #20
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <LL_ADC_SetChannelSingleDiff>:
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f003 0318 	and.w	r3, r3, #24
 8007ace:	4908      	ldr	r1, [pc, #32]	; (8007af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007ad0:	40d9      	lsrs	r1, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	0007ffff 	.word	0x0007ffff

08007af4 <LL_ADC_DisableDeepPowerDown>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6093      	str	r3, [r2, #8]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2c:	d101      	bne.n	8007b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <LL_ADC_EnableInternalRegulator>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b7c:	d101      	bne.n	8007b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <LL_ADC_Enable>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ba4:	f043 0201 	orr.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	609a      	str	r2, [r3, #8]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_ADC_Disable>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bcc:	f043 0202 	orr.w	r2, r3, #2
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <LL_ADC_IsEnabled>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <LL_ADC_IsEnabled+0x18>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <LL_ADC_IsEnabled+0x1a>
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <LL_ADC_IsDisableOngoing>:
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d101      	bne.n	8007c1e <LL_ADC_IsDisableOngoing+0x18>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <LL_ADC_IsDisableOngoing+0x1a>
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <LL_ADC_REG_StopConversion>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c40:	f043 0210 	orr.w	r2, r3, #16
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <LL_ADC_REG_IsConversionOngoing>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d101      	bne.n	8007c6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d101      	bne.n	8007cba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e12c      	b.n	8007f3c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 fa47 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff ff05 	bl	8007b18 <LL_ADC_IsDeepPowerDownEnabled>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff feeb 	bl	8007af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ff20 	bl	8007b68 <LL_ADC_IsInternalRegulatorEnabled>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d115      	bne.n	8007d5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff ff04 	bl	8007b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d38:	4b82      	ldr	r3, [pc, #520]	; (8007f44 <HAL_ADC_Init+0x27c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	099b      	lsrs	r3, r3, #6
 8007d3e:	4a82      	ldr	r2, [pc, #520]	; (8007f48 <HAL_ADC_Init+0x280>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	3301      	adds	r3, #1
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d4c:	e002      	b.n	8007d54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f9      	bne.n	8007d4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff ff02 	bl	8007b68 <LL_ADC_IsInternalRegulatorEnabled>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	f043 0210 	orr.w	r2, r3, #16
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7a:	f043 0201 	orr.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff ff62 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 8007d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 80c5 	bne.w	8007f2a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f040 80c1 	bne.w	8007f2a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007db0:	f043 0202 	orr.w	r2, r3, #2
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff ff0f 	bl	8007be0 <LL_ADC_IsEnabled>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007dc8:	4860      	ldr	r0, [pc, #384]	; (8007f4c <HAL_ADC_Init+0x284>)
 8007dca:	f7ff ff09 	bl	8007be0 <LL_ADC_IsEnabled>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	485d      	ldr	r0, [pc, #372]	; (8007f50 <HAL_ADC_Init+0x288>)
 8007ddc:	f7ff fd60 	bl	80078a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7e5b      	ldrb	r3, [r3, #25]
 8007de4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007dea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007df0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007df6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dfe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d106      	bne.n	8007e1c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	3b01      	subs	r3, #1
 8007e14:	045b      	lsls	r3, r3, #17
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	4b45      	ldr	r3, [pc, #276]	; (8007f54 <HAL_ADC_Init+0x28c>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	69b9      	ldr	r1, [r7, #24]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff feff 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 8007e56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff ff20 	bl	8007ca2 <LL_ADC_INJ_IsConversionOngoing>
 8007e62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d13d      	bne.n	8007ee6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d13a      	bne.n	8007ee6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007e74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8c:	f023 0302 	bic.w	r3, r3, #2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	430b      	orrs	r3, r1
 8007e98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d118      	bne.n	8007ed6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007eae:	f023 0304 	bic.w	r3, r3, #4
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007eba:	4311      	orrs	r1, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ec0:	4311      	orrs	r1, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	611a      	str	r2, [r3, #16]
 8007ed4:	e007      	b.n	8007ee6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d10c      	bne.n	8007f08 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	f023 010f 	bic.w	r1, r3, #15
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
 8007f06:	e007      	b.n	8007f18 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 020f 	bic.w	r2, r2, #15
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	f023 0303 	bic.w	r3, r3, #3
 8007f20:	f043 0201 	orr.w	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	655a      	str	r2, [r3, #84]	; 0x54
 8007f28:	e007      	b.n	8007f3a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2e:	f043 0210 	orr.w	r2, r3, #16
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000008 	.word	0x20000008
 8007f48:	053e2d63 	.word	0x053e2d63
 8007f4c:	50040000 	.word	0x50040000
 8007f50:	50040300 	.word	0x50040300
 8007f54:	fff0c007 	.word	0xfff0c007

08007f58 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_ADC_Stop_DMA+0x16>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e051      	b.n	8008012 <HAL_ADC_Stop_DMA+0xba>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007f76:	2103      	movs	r1, #3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fe03 	bl	8008b84 <ADC_ConversionStop>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d13f      	bne.n	8008008 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d10f      	bne.n	8007fc6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 fae6 	bl	800957c <HAL_DMA_Abort>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0210 	bic.w	r2, r2, #16
 8007fd4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 feef 	bl	8008dc0 <ADC_Disable>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
 8007fe6:	e002      	b.n	8007fee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fee9 	bl	8008dc0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d109      	bne.n	8008008 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	f043 0201 	orr.w	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b088      	sub	sp, #32
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <HAL_ADC_IRQHandler+0x56>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f854 	bl	8009110 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2202      	movs	r2, #2
 800806e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <HAL_ADC_IRQHandler+0x6a>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800808a:	2b00      	cmp	r3, #0
 800808c:	d05e      	beq.n	800814c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d059      	beq.n	800814c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fc7c 	bl	80079b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d03e      	beq.n	800813e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d135      	bne.n	800813e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d12e      	bne.n	800813e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fdb5 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11a      	bne.n	8008126 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 020c 	bic.w	r2, r2, #12
 80080fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d112      	bne.n	800813e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	f043 0201 	orr.w	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
 8008124:	e00b      	b.n	800813e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	f043 0210 	orr.w	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f043 0201 	orr.w	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 f950 	bl	80013e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	220c      	movs	r2, #12
 800814a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <HAL_ADC_IRQHandler+0x146>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008166:	2b00      	cmp	r3, #0
 8008168:	d072      	beq.n	8008250 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d06d      	beq.n	8008250 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d105      	bne.n	800818c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fc4d 	bl	8007a30 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008196:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fc08 	bl	80079b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80081a2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d047      	beq.n	8008242 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <HAL_ADC_IRQHandler+0x1b2>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d03f      	beq.n	8008242 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d13a      	bne.n	8008242 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d133      	bne.n	8008242 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d12e      	bne.n	8008242 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fd5a 	bl	8007ca2 <LL_ADC_INJ_IsConversionOngoing>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11a      	bne.n	800822a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008202:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008208:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008218:	2b00      	cmp	r3, #0
 800821a:	d112      	bne.n	8008242 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008220:	f043 0201 	orr.w	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
 8008228:	e00b      	b.n	8008242 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f043 0210 	orr.w	r2, r3, #16
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 ff3c 	bl	80090c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2260      	movs	r2, #96	; 0x60
 800824e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008256:	2b00      	cmp	r3, #0
 8008258:	d011      	beq.n	800827e <HAL_ADC_IRQHandler+0x264>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00c      	beq.n	800827e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f890 	bl	8008396 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d012      	beq.n	80082ae <HAL_ADC_IRQHandler+0x294>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 ff22 	bl	80090e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d012      	beq.n	80082de <HAL_ADC_IRQHandler+0x2c4>
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00d      	beq.n	80082de <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 ff14 	bl	80090fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02a      	beq.n	800833e <HAL_ADC_IRQHandler+0x324>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d025      	beq.n	800833e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80082fa:	2301      	movs	r3, #1
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	e008      	b.n	8008312 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10e      	bne.n	8008336 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008328:	f043 0202 	orr.w	r2, r3, #2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7f9 f88f 	bl	8001454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2210      	movs	r2, #16
 800833c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008344:	2b00      	cmp	r3, #0
 8008346:	d018      	beq.n	800837a <HAL_ADC_IRQHandler+0x360>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800834e:	2b00      	cmp	r3, #0
 8008350:	d013      	beq.n	800837a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008372:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fead 	bl	80090d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800837a:	bf00      	nop
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
	...

080083ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b0b6      	sub	sp, #216	; 0xd8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x22>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e3b9      	b.n	8008b42 <HAL_ADC_ConfigChannel+0x796>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fc3a 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 839e 	bne.w	8008b24 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d824      	bhi.n	800843a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	3b02      	subs	r3, #2
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d81b      	bhi.n	8008432 <HAL_ADC_ConfigChannel+0x86>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <HAL_ADC_ConfigChannel+0x54>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008411 	.word	0x08008411
 8008404:	08008419 	.word	0x08008419
 8008408:	08008421 	.word	0x08008421
 800840c:	08008429 	.word	0x08008429
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	220c      	movs	r2, #12
 8008414:	605a      	str	r2, [r3, #4]
          break;
 8008416:	e011      	b.n	800843c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2212      	movs	r2, #18
 800841c:	605a      	str	r2, [r3, #4]
          break;
 800841e:	e00d      	b.n	800843c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2218      	movs	r2, #24
 8008424:	605a      	str	r2, [r3, #4]
          break;
 8008426:	e009      	b.n	800843c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800842e:	605a      	str	r2, [r3, #4]
          break;
 8008430:	e004      	b.n	800843c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2206      	movs	r2, #6
 8008436:	605a      	str	r2, [r3, #4]
          break;
 8008438:	e000      	b.n	800843c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800843a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	6859      	ldr	r1, [r3, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	f7ff fac5 	bl	80079d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fbfe 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 8008458:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fc1e 	bl	8007ca2 <LL_ADC_INJ_IsConversionOngoing>
 8008466:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800846a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800846e:	2b00      	cmp	r3, #0
 8008470:	f040 81a6 	bne.w	80087c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 81a1 	bne.w	80087c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6819      	ldr	r1, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	461a      	mov	r2, r3
 800848c:	f7ff fae3 	bl	8007a56 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	695a      	ldr	r2, [r3, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	fa02 f303 	lsl.w	r3, r2, r3
 80084a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d00a      	beq.n	80084c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6919      	ldr	r1, [r3, #16]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084c2:	f7ff fa21 	bl	8007908 <LL_ADC_SetOffset>
 80084c6:	e17b      	b.n	80087c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fa3e 	bl	8007950 <LL_ADC_GetOffsetChannel>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <HAL_ADC_ConfigChannel+0x148>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fa33 	bl	8007950 <LL_ADC_GetOffsetChannel>
 80084ea:	4603      	mov	r3, r0
 80084ec:	0e9b      	lsrs	r3, r3, #26
 80084ee:	f003 021f 	and.w	r2, r3, #31
 80084f2:	e01e      	b.n	8008532 <HAL_ADC_ConfigChannel+0x186>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff fa28 	bl	8007950 <LL_ADC_GetOffsetChannel>
 8008500:	4603      	mov	r3, r0
 8008502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800850a:	fa93 f3a3 	rbit	r3, r3
 800850e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800851a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8008522:	2320      	movs	r3, #32
 8008524:	e004      	b.n	8008530 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8008526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800852a:	fab3 f383 	clz	r3, r3
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <HAL_ADC_ConfigChannel+0x19e>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	0e9b      	lsrs	r3, r3, #26
 8008544:	f003 031f 	and.w	r3, r3, #31
 8008548:	e018      	b.n	800857c <HAL_ADC_ConfigChannel+0x1d0>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008556:	fa93 f3a3 	rbit	r3, r3
 800855a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800855e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800856e:	2320      	movs	r3, #32
 8008570:	e004      	b.n	800857c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8008572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008576:	fab3 f383 	clz	r3, r3
 800857a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800857c:	429a      	cmp	r2, r3
 800857e:	d106      	bne.n	800858e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2200      	movs	r2, #0
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff f9f7 	bl	800797c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff f9db 	bl	8007950 <LL_ADC_GetOffsetChannel>
 800859a:	4603      	mov	r3, r0
 800859c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <HAL_ADC_ConfigChannel+0x20e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2101      	movs	r1, #1
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff f9d0 	bl	8007950 <LL_ADC_GetOffsetChannel>
 80085b0:	4603      	mov	r3, r0
 80085b2:	0e9b      	lsrs	r3, r3, #26
 80085b4:	f003 021f 	and.w	r2, r3, #31
 80085b8:	e01e      	b.n	80085f8 <HAL_ADC_ConfigChannel+0x24c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2101      	movs	r1, #1
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff f9c5 	bl	8007950 <LL_ADC_GetOffsetChannel>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085d0:	fa93 f3a3 	rbit	r3, r3
 80085d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80085d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80085e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80085e8:	2320      	movs	r3, #32
 80085ea:	e004      	b.n	80085f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80085ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085f0:	fab3 f383 	clz	r3, r3
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_ADC_ConfigChannel+0x264>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	0e9b      	lsrs	r3, r3, #26
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	e018      	b.n	8008642 <HAL_ADC_ConfigChannel+0x296>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800861c:	fa93 f3a3 	rbit	r3, r3
 8008620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800862c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8008634:	2320      	movs	r3, #32
 8008636:	e004      	b.n	8008642 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8008638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800863c:	fab3 f383 	clz	r3, r3
 8008640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008642:	429a      	cmp	r2, r3
 8008644:	d106      	bne.n	8008654 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	2101      	movs	r1, #1
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f994 	bl	800797c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2102      	movs	r1, #2
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff f978 	bl	8007950 <LL_ADC_GetOffsetChannel>
 8008660:	4603      	mov	r3, r0
 8008662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <HAL_ADC_ConfigChannel+0x2d4>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2102      	movs	r1, #2
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff f96d 	bl	8007950 <LL_ADC_GetOffsetChannel>
 8008676:	4603      	mov	r3, r0
 8008678:	0e9b      	lsrs	r3, r3, #26
 800867a:	f003 021f 	and.w	r2, r3, #31
 800867e:	e01e      	b.n	80086be <HAL_ADC_ConfigChannel+0x312>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2102      	movs	r1, #2
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff f962 	bl	8007950 <LL_ADC_GetOffsetChannel>
 800868c:	4603      	mov	r3, r0
 800868e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008696:	fa93 f3a3 	rbit	r3, r3
 800869a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800869e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80086a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80086ae:	2320      	movs	r3, #32
 80086b0:	e004      	b.n	80086bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80086b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086b6:	fab3 f383 	clz	r3, r3
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <HAL_ADC_ConfigChannel+0x32a>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	0e9b      	lsrs	r3, r3, #26
 80086d0:	f003 031f 	and.w	r3, r3, #31
 80086d4:	e016      	b.n	8008704 <HAL_ADC_ConfigChannel+0x358>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086e2:	fa93 f3a3 	rbit	r3, r3
 80086e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80086e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80086ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80086f6:	2320      	movs	r3, #32
 80086f8:	e004      	b.n	8008704 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80086fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086fe:	fab3 f383 	clz	r3, r3
 8008702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008704:	429a      	cmp	r2, r3
 8008706:	d106      	bne.n	8008716 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	2102      	movs	r1, #2
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff f933 	bl	800797c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2103      	movs	r1, #3
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff f917 	bl	8007950 <LL_ADC_GetOffsetChannel>
 8008722:	4603      	mov	r3, r0
 8008724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <HAL_ADC_ConfigChannel+0x396>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2103      	movs	r1, #3
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff f90c 	bl	8007950 <LL_ADC_GetOffsetChannel>
 8008738:	4603      	mov	r3, r0
 800873a:	0e9b      	lsrs	r3, r3, #26
 800873c:	f003 021f 	and.w	r2, r3, #31
 8008740:	e017      	b.n	8008772 <HAL_ADC_ConfigChannel+0x3c6>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2103      	movs	r1, #3
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff f901 	bl	8007950 <LL_ADC_GetOffsetChannel>
 800874e:	4603      	mov	r3, r0
 8008750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008754:	fa93 f3a3 	rbit	r3, r3
 8008758:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800875a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800875c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800875e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8008764:	2320      	movs	r3, #32
 8008766:	e003      	b.n	8008770 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876a:	fab3 f383 	clz	r3, r3
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <HAL_ADC_ConfigChannel+0x3de>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	0e9b      	lsrs	r3, r3, #26
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	e011      	b.n	80087ae <HAL_ADC_ConfigChannel+0x402>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008792:	fa93 f3a3 	rbit	r3, r3
 8008796:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800879c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80087a2:	2320      	movs	r3, #32
 80087a4:	e003      	b.n	80087ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	fab3 f383 	clz	r3, r3
 80087ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d106      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	2103      	movs	r1, #3
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff f8de 	bl	800797c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fa0b 	bl	8007be0 <LL_ADC_IsEnabled>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f040 813f 	bne.w	8008a50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6819      	ldr	r1, [r3, #0]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7ff f964 	bl	8007aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a8e      	ldr	r2, [pc, #568]	; (8008a24 <HAL_ADC_ConfigChannel+0x678>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f040 8130 	bne.w	8008a50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <HAL_ADC_ConfigChannel+0x46c>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	0e9b      	lsrs	r3, r3, #26
 8008806:	3301      	adds	r3, #1
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	2b09      	cmp	r3, #9
 800880e:	bf94      	ite	ls
 8008810:	2301      	movls	r3, #1
 8008812:	2300      	movhi	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	e019      	b.n	800884c <HAL_ADC_ConfigChannel+0x4a0>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008820:	fa93 f3a3 	rbit	r3, r3
 8008824:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008828:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800882a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008830:	2320      	movs	r3, #32
 8008832:	e003      	b.n	800883c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008836:	fab3 f383 	clz	r3, r3
 800883a:	b2db      	uxtb	r3, r3
 800883c:	3301      	adds	r3, #1
 800883e:	f003 031f 	and.w	r3, r3, #31
 8008842:	2b09      	cmp	r3, #9
 8008844:	bf94      	ite	ls
 8008846:	2301      	movls	r3, #1
 8008848:	2300      	movhi	r3, #0
 800884a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800884c:	2b00      	cmp	r3, #0
 800884e:	d079      	beq.n	8008944 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008858:	2b00      	cmp	r3, #0
 800885a:	d107      	bne.n	800886c <HAL_ADC_ConfigChannel+0x4c0>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	0e9b      	lsrs	r3, r3, #26
 8008862:	3301      	adds	r3, #1
 8008864:	069b      	lsls	r3, r3, #26
 8008866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800886a:	e015      	b.n	8008898 <HAL_ADC_ConfigChannel+0x4ec>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008874:	fa93 f3a3 	rbit	r3, r3
 8008878:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800887e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008884:	2320      	movs	r3, #32
 8008886:	e003      	b.n	8008890 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800888a:	fab3 f383 	clz	r3, r3
 800888e:	b2db      	uxtb	r3, r3
 8008890:	3301      	adds	r3, #1
 8008892:	069b      	lsls	r3, r3, #26
 8008894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d109      	bne.n	80088b8 <HAL_ADC_ConfigChannel+0x50c>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	0e9b      	lsrs	r3, r3, #26
 80088aa:	3301      	adds	r3, #1
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	e017      	b.n	80088e8 <HAL_ADC_ConfigChannel+0x53c>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c0:	fa93 f3a3 	rbit	r3, r3
 80088c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80088c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80088ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80088d0:	2320      	movs	r3, #32
 80088d2:	e003      	b.n	80088dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80088d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d6:	fab3 f383 	clz	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	3301      	adds	r3, #1
 80088de:	f003 031f 	and.w	r3, r3, #31
 80088e2:	2101      	movs	r1, #1
 80088e4:	fa01 f303 	lsl.w	r3, r1, r3
 80088e8:	ea42 0103 	orr.w	r1, r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <HAL_ADC_ConfigChannel+0x562>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	0e9b      	lsrs	r3, r3, #26
 80088fe:	3301      	adds	r3, #1
 8008900:	f003 021f 	and.w	r2, r3, #31
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	e018      	b.n	8008940 <HAL_ADC_ConfigChannel+0x594>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	fa93 f3a3 	rbit	r3, r3
 800891a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8008926:	2320      	movs	r3, #32
 8008928:	e003      	b.n	8008932 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800892a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892c:	fab3 f383 	clz	r3, r3
 8008930:	b2db      	uxtb	r3, r3
 8008932:	3301      	adds	r3, #1
 8008934:	f003 021f 	and.w	r2, r3, #31
 8008938:	4613      	mov	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4413      	add	r3, r2
 800893e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008940:	430b      	orrs	r3, r1
 8008942:	e080      	b.n	8008a46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800894c:	2b00      	cmp	r3, #0
 800894e:	d107      	bne.n	8008960 <HAL_ADC_ConfigChannel+0x5b4>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0e9b      	lsrs	r3, r3, #26
 8008956:	3301      	adds	r3, #1
 8008958:	069b      	lsls	r3, r3, #26
 800895a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800895e:	e015      	b.n	800898c <HAL_ADC_ConfigChannel+0x5e0>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	fa93 f3a3 	rbit	r3, r3
 800896c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008978:	2320      	movs	r3, #32
 800897a:	e003      	b.n	8008984 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	fab3 f383 	clz	r3, r3
 8008982:	b2db      	uxtb	r3, r3
 8008984:	3301      	adds	r3, #1
 8008986:	069b      	lsls	r3, r3, #26
 8008988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_ADC_ConfigChannel+0x600>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	0e9b      	lsrs	r3, r3, #26
 800899e:	3301      	adds	r3, #1
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	2101      	movs	r1, #1
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	e017      	b.n	80089dc <HAL_ADC_ConfigChannel+0x630>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	fa93 f3a3 	rbit	r3, r3
 80089b8:	61fb      	str	r3, [r7, #28]
  return result;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80089c4:	2320      	movs	r3, #32
 80089c6:	e003      	b.n	80089d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	fab3 f383 	clz	r3, r3
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	3301      	adds	r3, #1
 80089d2:	f003 031f 	and.w	r3, r3, #31
 80089d6:	2101      	movs	r1, #1
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	ea42 0103 	orr.w	r1, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10d      	bne.n	8008a08 <HAL_ADC_ConfigChannel+0x65c>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0e9b      	lsrs	r3, r3, #26
 80089f2:	3301      	adds	r3, #1
 80089f4:	f003 021f 	and.w	r2, r3, #31
 80089f8:	4613      	mov	r3, r2
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	4413      	add	r3, r2
 80089fe:	3b1e      	subs	r3, #30
 8008a00:	051b      	lsls	r3, r3, #20
 8008a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a06:	e01d      	b.n	8008a44 <HAL_ADC_ConfigChannel+0x698>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	fa93 f3a3 	rbit	r3, r3
 8008a14:	613b      	str	r3, [r7, #16]
  return result;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008a20:	2320      	movs	r3, #32
 8008a22:	e005      	b.n	8008a30 <HAL_ADC_ConfigChannel+0x684>
 8008a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	fab3 f383 	clz	r3, r3
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	3301      	adds	r3, #1
 8008a32:	f003 021f 	and.w	r2, r3, #31
 8008a36:	4613      	mov	r3, r2
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3b1e      	subs	r3, #30
 8008a3e:	051b      	lsls	r3, r3, #20
 8008a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a44:	430b      	orrs	r3, r1
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	6892      	ldr	r2, [r2, #8]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f7ff f803 	bl	8007a56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_ADC_ConfigChannel+0x7a0>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d06c      	beq.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008a5c:	483c      	ldr	r0, [pc, #240]	; (8008b50 <HAL_ADC_ConfigChannel+0x7a4>)
 8008a5e:	f7fe ff45 	bl	80078ec <LL_ADC_GetCommonPathInternalCh>
 8008a62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a3a      	ldr	r2, [pc, #232]	; (8008b54 <HAL_ADC_ConfigChannel+0x7a8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d127      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d121      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a35      	ldr	r2, [pc, #212]	; (8008b58 <HAL_ADC_ConfigChannel+0x7ac>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d157      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a8e:	4619      	mov	r1, r3
 8008a90:	482f      	ldr	r0, [pc, #188]	; (8008b50 <HAL_ADC_ConfigChannel+0x7a4>)
 8008a92:	f7fe ff18 	bl	80078c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a96:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <HAL_ADC_ConfigChannel+0x7b0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	099b      	lsrs	r3, r3, #6
 8008a9c:	4a30      	ldr	r2, [pc, #192]	; (8008b60 <HAL_ADC_ConfigChannel+0x7b4>)
 8008a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa2:	099b      	lsrs	r3, r3, #6
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008ab0:	e002      	b.n	8008ab8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f9      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008abe:	e03a      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <HAL_ADC_ConfigChannel+0x7b8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d113      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x746>
 8008aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10d      	bne.n	8008af2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a1f      	ldr	r2, [pc, #124]	; (8008b58 <HAL_ADC_ConfigChannel+0x7ac>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d12a      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4819      	ldr	r0, [pc, #100]	; (8008b50 <HAL_ADC_ConfigChannel+0x7a4>)
 8008aec:	f7fe feeb 	bl	80078c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008af0:	e021      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <HAL_ADC_ConfigChannel+0x7bc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d11c      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d116      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a12      	ldr	r2, [pc, #72]	; (8008b58 <HAL_ADC_ConfigChannel+0x7ac>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d111      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	480c      	ldr	r0, [pc, #48]	; (8008b50 <HAL_ADC_ConfigChannel+0x7a4>)
 8008b1e:	f7fe fed2 	bl	80078c6 <LL_ADC_SetCommonPathInternalCh>
 8008b22:	e008      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008b3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	37d8      	adds	r7, #216	; 0xd8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	80080000 	.word	0x80080000
 8008b50:	50040300 	.word	0x50040300
 8008b54:	c7520000 	.word	0xc7520000
 8008b58:	50040000 	.word	0x50040000
 8008b5c:	20000008 	.word	0x20000008
 8008b60:	053e2d63 	.word	0x053e2d63
 8008b64:	cb840000 	.word	0xcb840000
 8008b68:	80000001 	.word	0x80000001

08008b6c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff f85a 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 8008ba0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff f87b 	bl	8007ca2 <LL_ADC_INJ_IsConversionOngoing>
 8008bac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d103      	bne.n	8008bbc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 8098 	beq.w	8008cec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d02a      	beq.n	8008c20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7e5b      	ldrb	r3, [r3, #25]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d126      	bne.n	8008c20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7e1b      	ldrb	r3, [r3, #24]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d122      	bne.n	8008c20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008bde:	e014      	b.n	8008c0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	4a45      	ldr	r2, [pc, #276]	; (8008cf8 <ADC_ConversionStop+0x174>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d90d      	bls.n	8008c04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bec:	f043 0210 	orr.w	r2, r3, #16
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e074      	b.n	8008cee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	d1e3      	bne.n	8008be0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2240      	movs	r2, #64	; 0x40
 8008c1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d014      	beq.n	8008c50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff f812 	bl	8007c54 <LL_ADC_REG_IsConversionOngoing>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe ffe3 	bl	8007c06 <LL_ADC_IsDisableOngoing>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe ffee 	bl	8007c2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d014      	beq.n	8008c80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff f821 	bl	8007ca2 <LL_ADC_INJ_IsConversionOngoing>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe ffcb 	bl	8007c06 <LL_ADC_IsDisableOngoing>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fffd 	bl	8007c7a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d005      	beq.n	8008c92 <ADC_ConversionStop+0x10e>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d105      	bne.n	8008c98 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008c8c:	230c      	movs	r3, #12
 8008c8e:	617b      	str	r3, [r7, #20]
        break;
 8008c90:	e005      	b.n	8008c9e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008c92:	2308      	movs	r3, #8
 8008c94:	617b      	str	r3, [r7, #20]
        break;
 8008c96:	e002      	b.n	8008c9e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008c98:	2304      	movs	r3, #4
 8008c9a:	617b      	str	r3, [r7, #20]
        break;
 8008c9c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008c9e:	f7fe fdcf 	bl	8007840 <HAL_GetTick>
 8008ca2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008ca4:	e01b      	b.n	8008cde <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008ca6:	f7fe fdcb 	bl	8007840 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d914      	bls.n	8008cde <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	f043 0210 	orr.w	r2, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	f043 0201 	orr.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e007      	b.n	8008cee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1dc      	bne.n	8008ca6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	a33fffff 	.word	0xa33fffff

08008cfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe ff69 	bl	8007be0 <LL_ADC_IsEnabled>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d14d      	bne.n	8008db0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	4b28      	ldr	r3, [pc, #160]	; (8008dbc <ADC_Enable+0xc0>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	f043 0210 	orr.w	r2, r3, #16
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	f043 0201 	orr.w	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e039      	b.n	8008db2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe ff24 	bl	8007b90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008d48:	f7fe fd7a 	bl	8007840 <HAL_GetTick>
 8008d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008d4e:	e028      	b.n	8008da2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe ff43 	bl	8007be0 <LL_ADC_IsEnabled>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d104      	bne.n	8008d6a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe ff13 	bl	8007b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008d6a:	f7fe fd69 	bl	8007840 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d914      	bls.n	8008da2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d00d      	beq.n	8008da2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	f043 0210 	orr.w	r2, r3, #16
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	f043 0201 	orr.w	r2, r3, #1
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e007      	b.n	8008db2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d1cf      	bne.n	8008d50 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	8000003f 	.word	0x8000003f

08008dc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe ff1a 	bl	8007c06 <LL_ADC_IsDisableOngoing>
 8008dd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe ff01 	bl	8007be0 <LL_ADC_IsEnabled>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d047      	beq.n	8008e74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d144      	bne.n	8008e74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 030d 	and.w	r3, r3, #13
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d10c      	bne.n	8008e12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fedb 	bl	8007bb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2203      	movs	r2, #3
 8008e08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008e0a:	f7fe fd19 	bl	8007840 <HAL_GetTick>
 8008e0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008e10:	e029      	b.n	8008e66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e16:	f043 0210 	orr.w	r2, r3, #16
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	f043 0201 	orr.w	r2, r3, #1
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e023      	b.n	8008e76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008e2e:	f7fe fd07 	bl	8007840 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d914      	bls.n	8008e66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	f043 0210 	orr.w	r2, r3, #16
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e007      	b.n	8008e76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1dc      	bne.n	8008e2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d14b      	bne.n	8008f30 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d021      	beq.n	8008ef6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fd7b 	bl	80079b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d032      	beq.n	8008f28 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d12b      	bne.n	8008f28 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11f      	bne.n	8008f28 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eec:	f043 0201 	orr.w	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ef4:	e018      	b.n	8008f28 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d111      	bne.n	8008f28 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f20:	f043 0201 	orr.w	r2, r3, #1
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7f8 fa5b 	bl	80013e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f2e:	e00e      	b.n	8008f4e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7f8 fa89 	bl	8001454 <HAL_ADC_ErrorCallback>
}
 8008f42:	e004      	b.n	8008f4e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fa0c 	bl	8008382 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f90:	f043 0204 	orr.w	r2, r3, #4
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7f8 fa5b 	bl	8001454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <LL_ADC_StartCalibration>:
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <LL_ADC_IsCalibrationOnGoing>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fec:	d101      	bne.n	8008ff2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_ADCEx_Calibration_Start+0x1c>
 8009018:	2302      	movs	r3, #2
 800901a:	e04d      	b.n	80090b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff fecb 	bl	8008dc0 <ADC_Disable>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d136      	bne.n	80090a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800903c:	f023 0302 	bic.w	r3, r3, #2
 8009040:	f043 0202 	orr.w	r2, r3, #2
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff ffa9 	bl	8008fa6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009054:	e014      	b.n	8009080 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3301      	adds	r3, #1
 800905a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8009062:	d30d      	bcc.n	8009080 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009068:	f023 0312 	bic.w	r3, r3, #18
 800906c:	f043 0210 	orr.w	r2, r3, #16
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e01b      	b.n	80090b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff ffa7 	bl	8008fd8 <LL_ADC_IsCalibrationOnGoing>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e2      	bne.n	8009056 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009094:	f023 0303 	bic.w	r3, r3, #3
 8009098:	f043 0201 	orr.w	r2, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	655a      	str	r2, [r3, #84]	; 0x54
 80090a0:	e005      	b.n	80090ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a6:	f043 0210 	orr.w	r2, r3, #16
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009134:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <__NVIC_SetPriorityGrouping+0x44>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009140:	4013      	ands	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800914c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009156:	4a04      	ldr	r2, [pc, #16]	; (8009168 <__NVIC_SetPriorityGrouping+0x44>)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	60d3      	str	r3, [r2, #12]
}
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	e000ed00 	.word	0xe000ed00

0800916c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__NVIC_GetPriorityGrouping+0x18>)
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	0a1b      	lsrs	r3, r3, #8
 8009176:	f003 0307 	and.w	r3, r3, #7
}
 800917a:	4618      	mov	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	e000ed00 	.word	0xe000ed00

08009188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009196:	2b00      	cmp	r3, #0
 8009198:	db0b      	blt.n	80091b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	f003 021f 	and.w	r2, r3, #31
 80091a0:	4907      	ldr	r1, [pc, #28]	; (80091c0 <__NVIC_EnableIRQ+0x38>)
 80091a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	2001      	movs	r0, #1
 80091aa:	fa00 f202 	lsl.w	r2, r0, r2
 80091ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e100 	.word	0xe000e100

080091c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db12      	blt.n	80091fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	f003 021f 	and.w	r2, r3, #31
 80091dc:	490a      	ldr	r1, [pc, #40]	; (8009208 <__NVIC_DisableIRQ+0x44>)
 80091de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	2001      	movs	r0, #1
 80091e6:	fa00 f202 	lsl.w	r2, r0, r2
 80091ea:	3320      	adds	r3, #32
 80091ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80091f0:	f3bf 8f4f 	dsb	sy
}
 80091f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091f6:	f3bf 8f6f 	isb	sy
}
 80091fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	e000e100 	.word	0xe000e100

0800920c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921c:	2b00      	cmp	r3, #0
 800921e:	db0a      	blt.n	8009236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	490c      	ldr	r1, [pc, #48]	; (8009258 <__NVIC_SetPriority+0x4c>)
 8009226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922a:	0112      	lsls	r2, r2, #4
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	440b      	add	r3, r1
 8009230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009234:	e00a      	b.n	800924c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4908      	ldr	r1, [pc, #32]	; (800925c <__NVIC_SetPriority+0x50>)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	3b04      	subs	r3, #4
 8009244:	0112      	lsls	r2, r2, #4
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	440b      	add	r3, r1
 800924a:	761a      	strb	r2, [r3, #24]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	e000e100 	.word	0xe000e100
 800925c:	e000ed00 	.word	0xe000ed00

08009260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009260:	b480      	push	{r7}
 8009262:	b089      	sub	sp, #36	; 0x24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f1c3 0307 	rsb	r3, r3, #7
 800927a:	2b04      	cmp	r3, #4
 800927c:	bf28      	it	cs
 800927e:	2304      	movcs	r3, #4
 8009280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	3304      	adds	r3, #4
 8009286:	2b06      	cmp	r3, #6
 8009288:	d902      	bls.n	8009290 <NVIC_EncodePriority+0x30>
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	3b03      	subs	r3, #3
 800928e:	e000      	b.n	8009292 <NVIC_EncodePriority+0x32>
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	fa02 f303 	lsl.w	r3, r2, r3
 800929e:	43da      	mvns	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	401a      	ands	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092a8:	f04f 31ff 	mov.w	r1, #4294967295
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	fa01 f303 	lsl.w	r3, r1, r3
 80092b2:	43d9      	mvns	r1, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b8:	4313      	orrs	r3, r2
         );
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3724      	adds	r7, #36	; 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ff28 	bl	8009124 <__NVIC_SetPriorityGrouping>
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80092ee:	f7ff ff3d 	bl	800916c <__NVIC_GetPriorityGrouping>
 80092f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	f7ff ffb1 	bl	8009260 <NVIC_EncodePriority>
 80092fe:	4602      	mov	r2, r0
 8009300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff ff80 	bl	800920c <__NVIC_SetPriority>
}
 800930c:	bf00      	nop
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800931e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff ff30 	bl	8009188 <__NVIC_EnableIRQ>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800933a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ff40 	bl	80091c4 <__NVIC_DisableIRQ>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e098      	b.n	8009490 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	4b4d      	ldr	r3, [pc, #308]	; (800949c <HAL_DMA_Init+0x150>)
 8009366:	429a      	cmp	r2, r3
 8009368:	d80f      	bhi.n	800938a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	4b4b      	ldr	r3, [pc, #300]	; (80094a0 <HAL_DMA_Init+0x154>)
 8009372:	4413      	add	r3, r2
 8009374:	4a4b      	ldr	r2, [pc, #300]	; (80094a4 <HAL_DMA_Init+0x158>)
 8009376:	fba2 2303 	umull	r2, r3, r2, r3
 800937a:	091b      	lsrs	r3, r3, #4
 800937c:	009a      	lsls	r2, r3, #2
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a48      	ldr	r2, [pc, #288]	; (80094a8 <HAL_DMA_Init+0x15c>)
 8009386:	641a      	str	r2, [r3, #64]	; 0x40
 8009388:	e00e      	b.n	80093a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	4b46      	ldr	r3, [pc, #280]	; (80094ac <HAL_DMA_Init+0x160>)
 8009392:	4413      	add	r3, r2
 8009394:	4a43      	ldr	r2, [pc, #268]	; (80094a4 <HAL_DMA_Init+0x158>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	091b      	lsrs	r3, r3, #4
 800939c:	009a      	lsls	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a42      	ldr	r2, [pc, #264]	; (80094b0 <HAL_DMA_Init+0x164>)
 80093a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80093be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80093cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009402:	d039      	beq.n	8009478 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009408:	4a27      	ldr	r2, [pc, #156]	; (80094a8 <HAL_DMA_Init+0x15c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d11a      	bne.n	8009444 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800940e:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <HAL_DMA_Init+0x168>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009416:	f003 031c 	and.w	r3, r3, #28
 800941a:	210f      	movs	r1, #15
 800941c:	fa01 f303 	lsl.w	r3, r1, r3
 8009420:	43db      	mvns	r3, r3
 8009422:	4924      	ldr	r1, [pc, #144]	; (80094b4 <HAL_DMA_Init+0x168>)
 8009424:	4013      	ands	r3, r2
 8009426:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009428:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <HAL_DMA_Init+0x168>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6859      	ldr	r1, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009434:	f003 031c 	and.w	r3, r3, #28
 8009438:	fa01 f303 	lsl.w	r3, r1, r3
 800943c:	491d      	ldr	r1, [pc, #116]	; (80094b4 <HAL_DMA_Init+0x168>)
 800943e:	4313      	orrs	r3, r2
 8009440:	600b      	str	r3, [r1, #0]
 8009442:	e019      	b.n	8009478 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009444:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <HAL_DMA_Init+0x16c>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944c:	f003 031c 	and.w	r3, r3, #28
 8009450:	210f      	movs	r1, #15
 8009452:	fa01 f303 	lsl.w	r3, r1, r3
 8009456:	43db      	mvns	r3, r3
 8009458:	4917      	ldr	r1, [pc, #92]	; (80094b8 <HAL_DMA_Init+0x16c>)
 800945a:	4013      	ands	r3, r2
 800945c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800945e:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <HAL_DMA_Init+0x16c>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6859      	ldr	r1, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	f003 031c 	and.w	r3, r3, #28
 800946e:	fa01 f303 	lsl.w	r3, r1, r3
 8009472:	4911      	ldr	r1, [pc, #68]	; (80094b8 <HAL_DMA_Init+0x16c>)
 8009474:	4313      	orrs	r3, r2
 8009476:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	40020407 	.word	0x40020407
 80094a0:	bffdfff8 	.word	0xbffdfff8
 80094a4:	cccccccd 	.word	0xcccccccd
 80094a8:	40020000 	.word	0x40020000
 80094ac:	bffdfbf8 	.word	0xbffdfbf8
 80094b0:	40020400 	.word	0x40020400
 80094b4:	400200a8 	.word	0x400200a8
 80094b8:	400204a8 	.word	0x400204a8

080094bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <HAL_DMA_Start_IT+0x20>
 80094d8:	2302      	movs	r3, #2
 80094da:	e04b      	b.n	8009574 <HAL_DMA_Start_IT+0xb8>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d13a      	bne.n	8009566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f96d 	bl	80097f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951e:	2b00      	cmp	r3, #0
 8009520:	d008      	beq.n	8009534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 020e 	orr.w	r2, r2, #14
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e00f      	b.n	8009554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0204 	bic.w	r2, r2, #4
 8009542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 020a 	orr.w	r2, r2, #10
 8009552:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e005      	b.n	8009572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800956e:	2302      	movs	r3, #2
 8009570:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d008      	beq.n	80095a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2204      	movs	r2, #4
 8009598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e022      	b.n	80095ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 020e 	bic.w	r2, r2, #14
 80095b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0201 	bic.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	f003 021c 	and.w	r2, r3, #28
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	2101      	movs	r1, #1
 80095d4:	fa01 f202 	lsl.w	r2, r1, r2
 80095d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d005      	beq.n	800961c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]
 800961a:	e029      	b.n	8009670 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 020e 	bic.w	r2, r2, #14
 800962a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009640:	f003 021c 	and.w	r2, r3, #28
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	2101      	movs	r1, #1
 800964a:	fa01 f202 	lsl.w	r2, r1, r2
 800964e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
    }
  }
  return status;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009696:	f003 031c 	and.w	r3, r3, #28
 800969a:	2204      	movs	r2, #4
 800969c:	409a      	lsls	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d026      	beq.n	80096f4 <HAL_DMA_IRQHandler+0x7a>
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d021      	beq.n	80096f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d107      	bne.n	80096ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0204 	bic.w	r2, r2, #4
 80096cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	f003 021c 	and.w	r2, r3, #28
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	2104      	movs	r1, #4
 80096dc:	fa01 f202 	lsl.w	r2, r1, r2
 80096e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d071      	beq.n	80097ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80096f2:	e06c      	b.n	80097ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f8:	f003 031c 	and.w	r3, r3, #28
 80096fc:	2202      	movs	r2, #2
 80096fe:	409a      	lsls	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4013      	ands	r3, r2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d02e      	beq.n	8009766 <HAL_DMA_IRQHandler+0xec>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d029      	beq.n	8009766 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 020a 	bic.w	r2, r2, #10
 800972e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973c:	f003 021c 	and.w	r2, r3, #28
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009744:	2102      	movs	r1, #2
 8009746:	fa01 f202 	lsl.w	r2, r1, r2
 800974a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d038      	beq.n	80097ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009764:	e033      	b.n	80097ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976a:	f003 031c 	and.w	r3, r3, #28
 800976e:	2208      	movs	r2, #8
 8009770:	409a      	lsls	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4013      	ands	r3, r2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d02a      	beq.n	80097d0 <HAL_DMA_IRQHandler+0x156>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d025      	beq.n	80097d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 020e 	bic.w	r2, r2, #14
 8009792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009798:	f003 021c 	and.w	r2, r3, #28
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f202 	lsl.w	r2, r1, r2
 80097a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
}
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80097e6:	b2db      	uxtb	r3, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009806:	f003 021c 	and.w	r2, r3, #28
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	2101      	movs	r1, #1
 8009810:	fa01 f202 	lsl.w	r2, r1, r2
 8009814:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b10      	cmp	r3, #16
 8009824:	d108      	bne.n	8009838 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009836:	e007      	b.n	8009848 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	60da      	str	r2, [r3, #12]
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009862:	e148      	b.n	8009af6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	2101      	movs	r1, #1
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	fa01 f303 	lsl.w	r3, r1, r3
 8009870:	4013      	ands	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 813a 	beq.w	8009af0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d00b      	beq.n	800989c <HAL_GPIO_Init+0x48>
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d007      	beq.n	800989c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009890:	2b11      	cmp	r3, #17
 8009892:	d003      	beq.n	800989c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b12      	cmp	r3, #18
 800989a:	d130      	bne.n	80098fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	2203      	movs	r2, #3
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	43db      	mvns	r3, r3
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4013      	ands	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80098d2:	2201      	movs	r2, #1
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	fa02 f303 	lsl.w	r3, r2, r3
 80098da:	43db      	mvns	r3, r3
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4013      	ands	r3, r2
 80098e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	091b      	lsrs	r3, r3, #4
 80098e8:	f003 0201 	and.w	r2, r3, #1
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	2203      	movs	r2, #3
 800990a:	fa02 f303 	lsl.w	r3, r2, r3
 800990e:	43db      	mvns	r3, r3
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4013      	ands	r3, r2
 8009914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d003      	beq.n	800993e <HAL_GPIO_Init+0xea>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b12      	cmp	r3, #18
 800993c:	d123      	bne.n	8009986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	08da      	lsrs	r2, r3, #3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3208      	adds	r2, #8
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	220f      	movs	r2, #15
 8009956:	fa02 f303 	lsl.w	r3, r2, r3
 800995a:	43db      	mvns	r3, r3
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4013      	ands	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	691a      	ldr	r2, [r3, #16]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	fa02 f303 	lsl.w	r3, r2, r3
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	08da      	lsrs	r2, r3, #3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3208      	adds	r2, #8
 8009980:	6939      	ldr	r1, [r7, #16]
 8009982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	2203      	movs	r2, #3
 8009992:	fa02 f303 	lsl.w	r3, r2, r3
 8009996:	43db      	mvns	r3, r3
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4013      	ands	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f003 0203 	and.w	r2, r3, #3
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8094 	beq.w	8009af0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099c8:	4b52      	ldr	r3, [pc, #328]	; (8009b14 <HAL_GPIO_Init+0x2c0>)
 80099ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099cc:	4a51      	ldr	r2, [pc, #324]	; (8009b14 <HAL_GPIO_Init+0x2c0>)
 80099ce:	f043 0301 	orr.w	r3, r3, #1
 80099d2:	6613      	str	r3, [r2, #96]	; 0x60
 80099d4:	4b4f      	ldr	r3, [pc, #316]	; (8009b14 <HAL_GPIO_Init+0x2c0>)
 80099d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	60bb      	str	r3, [r7, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80099e0:	4a4d      	ldr	r2, [pc, #308]	; (8009b18 <HAL_GPIO_Init+0x2c4>)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	089b      	lsrs	r3, r3, #2
 80099e6:	3302      	adds	r3, #2
 80099e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	220f      	movs	r2, #15
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4013      	ands	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009a0a:	d00d      	beq.n	8009a28 <HAL_GPIO_Init+0x1d4>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a43      	ldr	r2, [pc, #268]	; (8009b1c <HAL_GPIO_Init+0x2c8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d007      	beq.n	8009a24 <HAL_GPIO_Init+0x1d0>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a42      	ldr	r2, [pc, #264]	; (8009b20 <HAL_GPIO_Init+0x2cc>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d101      	bne.n	8009a20 <HAL_GPIO_Init+0x1cc>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e004      	b.n	8009a2a <HAL_GPIO_Init+0x1d6>
 8009a20:	2307      	movs	r3, #7
 8009a22:	e002      	b.n	8009a2a <HAL_GPIO_Init+0x1d6>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <HAL_GPIO_Init+0x1d6>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	f002 0203 	and.w	r2, r2, #3
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	4093      	lsls	r3, r2
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009a3a:	4937      	ldr	r1, [pc, #220]	; (8009b18 <HAL_GPIO_Init+0x2c4>)
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	3302      	adds	r3, #2
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009a48:	4b36      	ldr	r3, [pc, #216]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4013      	ands	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a6c:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009a72:	4b2c      	ldr	r3, [pc, #176]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a96:	4a23      	ldr	r2, [pc, #140]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a9c:	4b21      	ldr	r3, [pc, #132]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	43db      	mvns	r3, r3
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009ac0:	4a18      	ldr	r2, [pc, #96]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009ac6:	4b17      	ldr	r3, [pc, #92]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	43db      	mvns	r3, r3
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009aea:	4a0e      	ldr	r2, [pc, #56]	; (8009b24 <HAL_GPIO_Init+0x2d0>)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	3301      	adds	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	fa22 f303 	lsr.w	r3, r2, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f47f aeaf 	bne.w	8009864 <HAL_GPIO_Init+0x10>
  }
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40021000 	.word	0x40021000
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	48000400 	.word	0x48000400
 8009b20:	48000800 	.word	0x48000800
 8009b24:	40010400 	.word	0x40010400

08009b28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009b36:	e0ab      	b.n	8009c90 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009b38:	2201      	movs	r2, #1
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	4013      	ands	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 809e 	beq.w	8009c8a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009b4e:	4a57      	ldr	r2, [pc, #348]	; (8009cac <HAL_GPIO_DeInit+0x184>)
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	089b      	lsrs	r3, r3, #2
 8009b54:	3302      	adds	r3, #2
 8009b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	220f      	movs	r2, #15
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009b76:	d00d      	beq.n	8009b94 <HAL_GPIO_DeInit+0x6c>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a4d      	ldr	r2, [pc, #308]	; (8009cb0 <HAL_GPIO_DeInit+0x188>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d007      	beq.n	8009b90 <HAL_GPIO_DeInit+0x68>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a4c      	ldr	r2, [pc, #304]	; (8009cb4 <HAL_GPIO_DeInit+0x18c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d101      	bne.n	8009b8c <HAL_GPIO_DeInit+0x64>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e004      	b.n	8009b96 <HAL_GPIO_DeInit+0x6e>
 8009b8c:	2307      	movs	r3, #7
 8009b8e:	e002      	b.n	8009b96 <HAL_GPIO_DeInit+0x6e>
 8009b90:	2301      	movs	r3, #1
 8009b92:	e000      	b.n	8009b96 <HAL_GPIO_DeInit+0x6e>
 8009b94:	2300      	movs	r3, #0
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	f002 0203 	and.w	r2, r2, #3
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	4093      	lsls	r3, r2
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d132      	bne.n	8009c0c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009ba6:	4b44      	ldr	r3, [pc, #272]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	43db      	mvns	r3, r3
 8009bae:	4942      	ldr	r1, [pc, #264]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009bb4:	4b40      	ldr	r3, [pc, #256]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	43db      	mvns	r3, r3
 8009bbc:	493e      	ldr	r1, [pc, #248]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009bc2:	4b3d      	ldr	r3, [pc, #244]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	43db      	mvns	r3, r3
 8009bca:	493b      	ldr	r1, [pc, #236]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8009bd0:	4b39      	ldr	r3, [pc, #228]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	43db      	mvns	r3, r3
 8009bd8:	4937      	ldr	r1, [pc, #220]	; (8009cb8 <HAL_GPIO_DeInit+0x190>)
 8009bda:	4013      	ands	r3, r2
 8009bdc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	220f      	movs	r2, #15
 8009be8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009bee:	4a2f      	ldr	r2, [pc, #188]	; (8009cac <HAL_GPIO_DeInit+0x184>)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	089b      	lsrs	r3, r3, #2
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	43da      	mvns	r2, r3
 8009bfe:	482b      	ldr	r0, [pc, #172]	; (8009cac <HAL_GPIO_DeInit+0x184>)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	089b      	lsrs	r3, r3, #2
 8009c04:	400a      	ands	r2, r1
 8009c06:	3302      	adds	r3, #2
 8009c08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	2103      	movs	r1, #3
 8009c16:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	08da      	lsrs	r2, r3, #3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3208      	adds	r2, #8
 8009c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	220f      	movs	r2, #15
 8009c36:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3a:	43db      	mvns	r3, r3
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	08d2      	lsrs	r2, r2, #3
 8009c40:	4019      	ands	r1, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3208      	adds	r2, #8
 8009c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	2103      	movs	r1, #3
 8009c54:	fa01 f303 	lsl.w	r3, r1, r3
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	2101      	movs	r1, #1
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6c:	43db      	mvns	r3, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	2103      	movs	r1, #3
 8009c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c82:	43db      	mvns	r3, r3
 8009c84:	401a      	ands	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f af4d 	bne.w	8009b38 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	40010000 	.word	0x40010000
 8009cb0:	48000400 	.word	0x48000400
 8009cb4:	48000800 	.word	0x48000800
 8009cb8:	40010400 	.word	0x40010400

08009cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	887b      	ldrh	r3, [r7, #2]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
 8009cd8:	e001      	b.n	8009cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	807b      	strh	r3, [r7, #2]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009cfc:	787b      	ldrb	r3, [r7, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d02:	887a      	ldrh	r2, [r7, #2]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009d08:	e002      	b.n	8009d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d2e:	887a      	ldrh	r2, [r7, #2]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4013      	ands	r3, r2
 8009d34:	041a      	lsls	r2, r3, #16
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	43d9      	mvns	r1, r3
 8009d3a:	887b      	ldrh	r3, [r7, #2]
 8009d3c:	400b      	ands	r3, r1
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	619a      	str	r2, [r3, #24]
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e081      	b.n	8009e66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f8 f82c 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	; 0x24
 8009d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0201 	bic.w	r2, r2, #1
 8009d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d107      	bne.n	8009dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	e006      	b.n	8009dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d104      	bne.n	8009dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	ea42 0103 	orr.w	r1, r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	021a      	lsls	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	69d9      	ldr	r1, [r3, #28]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a1a      	ldr	r2, [r3, #32]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0201 	orr.w	r2, r2, #1
 8009e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b088      	sub	sp, #32
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	817b      	strh	r3, [r7, #10]
 8009e80:	4613      	mov	r3, r2
 8009e82:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d153      	bne.n	8009f38 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e9e:	d101      	bne.n	8009ea4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e04a      	b.n	8009f3a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_I2C_Master_Transmit_IT+0x42>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e043      	b.n	8009f3a <HAL_I2C_Master_Transmit_IT+0xca>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2221      	movs	r2, #33	; 0x21
 8009ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	893a      	ldrh	r2, [r7, #8]
 8009eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a19      	ldr	r2, [pc, #100]	; (8009f44 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8009ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a18      	ldr	r2, [pc, #96]	; (8009f48 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009ee6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	2bff      	cmp	r3, #255	; 0xff
 8009ef0:	d906      	bls.n	8009f00 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	22ff      	movs	r2, #255	; 0xff
 8009ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	e007      	b.n	8009f10 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f0e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	8979      	ldrh	r1, [r7, #10]
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <HAL_I2C_Master_Transmit_IT+0xdc>)
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f001 fbe4 	bl	800b6ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f001 fc0a 	bl	800b748 <I2C_Enable_IRQ>

    return HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	e000      	b.n	8009f3a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009f38:	2302      	movs	r3, #2
  }
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	ffff0000 	.word	0xffff0000
 8009f48:	0800a56b 	.word	0x0800a56b
 8009f4c:	80002000 	.word	0x80002000

08009f50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	f040 80f1 	bne.w	800a154 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f80:	d101      	bne.n	8009f86 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009f82:	2302      	movs	r3, #2
 8009f84:	e0e7      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_I2C_IsDeviceReady+0x44>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e0e0      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2224      	movs	r2, #36	; 0x24
 8009fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d107      	bne.n	8009fc2 <HAL_I2C_IsDeviceReady+0x72>
 8009fb2:	897b      	ldrh	r3, [r7, #10]
 8009fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fc0:	e004      	b.n	8009fcc <HAL_I2C_IsDeviceReady+0x7c>
 8009fc2:	897b      	ldrh	r3, [r7, #10]
 8009fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	6812      	ldr	r2, [r2, #0]
 8009fd0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009fd2:	f7fd fc35 	bl	8007840 <HAL_GetTick>
 8009fd6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	bf0c      	ite	eq
 8009fe6:	2301      	moveq	r3, #1
 8009fe8:	2300      	movne	r3, #0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	bf0c      	ite	eq
 8009ffc:	2301      	moveq	r3, #1
 8009ffe:	2300      	movne	r3, #0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a004:	e034      	b.n	800a070 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00c:	d01a      	beq.n	800a044 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a00e:	f7fd fc17 	bl	8007840 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d302      	bcc.n	800a024 <HAL_I2C_IsDeviceReady+0xd4>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10f      	bne.n	800a044 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a030:	f043 0220 	orr.w	r2, r3, #32
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e088      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b20      	cmp	r3, #32
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2300      	movne	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b10      	cmp	r3, #16
 800a066:	bf0c      	ite	eq
 800a068:	2301      	moveq	r3, #1
 800a06a:	2300      	movne	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a070:	7ffb      	ldrb	r3, [r7, #31]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d102      	bne.n	800a07c <HAL_I2C_IsDeviceReady+0x12c>
 800a076:	7fbb      	ldrb	r3, [r7, #30]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0c4      	beq.n	800a006 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f003 0310 	and.w	r3, r3, #16
 800a086:	2b10      	cmp	r3, #16
 800a088:	d01a      	beq.n	800a0c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2200      	movs	r2, #0
 800a092:	2120      	movs	r1, #32
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f001 fae8 	bl	800b66a <I2C_WaitOnFlagUntilTimeout>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e058      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e04a      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2120      	movs	r1, #32
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f001 facd 	bl	800b66a <I2C_WaitOnFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e03d      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2210      	movs	r2, #16
 800a0e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d118      	bne.n	800a124 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a100:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2200      	movs	r2, #0
 800a10a:	2120      	movs	r1, #32
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f001 faac 	bl	800b66a <I2C_WaitOnFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e01c      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2220      	movs	r2, #32
 800a122:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	3301      	adds	r3, #1
 800a128:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	429a      	cmp	r2, r3
 800a130:	f63f af3b 	bhi.w	8009faa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a140:	f043 0220 	orr.w	r2, r3, #32
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e000      	b.n	800a156 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800a154:	2302      	movs	r3, #2
  }
}
 800a156:	4618      	mov	r0, r3
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	461a      	mov	r2, r3
 800a16c:	460b      	mov	r3, r1
 800a16e:	817b      	strh	r3, [r7, #10]
 800a170:	4613      	mov	r3, r2
 800a172:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800a174:	4b3a      	ldr	r3, [pc, #232]	; (800a260 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 800a176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b20      	cmp	r3, #32
 800a182:	d167      	bne.n	800a254 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 800a18e:	2302      	movs	r3, #2
 800a190:	e061      	b.n	800a256 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2221      	movs	r2, #33	; 0x21
 800a19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2210      	movs	r2, #16
 800a1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	893a      	ldrh	r2, [r7, #8]
 800a1ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6a3a      	ldr	r2, [r7, #32]
 800a1c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4a27      	ldr	r2, [pc, #156]	; (800a264 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 800a1c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2bff      	cmp	r3, #255	; 0xff
 800a1d0:	d906      	bls.n	800a1e0 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	22ff      	movs	r2, #255	; 0xff
 800a1d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a1d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e007      	b.n	800a1f0 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	2b11      	cmp	r3, #17
 800a1f6:	d10e      	bne.n	800a216 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	2baa      	cmp	r3, #170	; 0xaa
 800a1fc:	d003      	beq.n	800a206 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a204:	d101      	bne.n	800a20a <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 800a20a:	2300      	movs	r3, #0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	e00a      	b.n	800a22c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f001 fb58 	bl	800b8cc <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a220:	b29b      	uxth	r3, r3
 800a222:	2bff      	cmp	r3, #255	; 0xff
 800a224:	d802      	bhi.n	800a22c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a230:	b2da      	uxtb	r2, r3
 800a232:	8979      	ldrh	r1, [r7, #10]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f001 fa56 	bl	800b6ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a248:	2101      	movs	r1, #1
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f001 fa7c 	bl	800b748 <I2C_Enable_IRQ>

    return HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	e000      	b.n	800a256 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a254:	2302      	movs	r3, #2
  }
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	80002000 	.word	0x80002000
 800a264:	0800a56b 	.word	0x0800a56b

0800a268 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	607a      	str	r2, [r7, #4]
 800a272:	461a      	mov	r2, r3
 800a274:	460b      	mov	r3, r1
 800a276:	817b      	strh	r3, [r7, #10]
 800a278:	4613      	mov	r3, r2
 800a27a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800a27c:	4b3a      	ldr	r3, [pc, #232]	; (800a368 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800a27e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d167      	bne.n	800a35c <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_I2C_Master_Seq_Receive_IT+0x32>
 800a296:	2302      	movs	r3, #2
 800a298:	e061      	b.n	800a35e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2222      	movs	r2, #34	; 0x22
 800a2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2210      	movs	r2, #16
 800a2ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	893a      	ldrh	r2, [r7, #8]
 800a2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6a3a      	ldr	r2, [r7, #32]
 800a2c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4a27      	ldr	r2, [pc, #156]	; (800a36c <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800a2ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2bff      	cmp	r3, #255	; 0xff
 800a2d8:	d906      	bls.n	800a2e8 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	22ff      	movs	r2, #255	; 0xff
 800a2de:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a2e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e007      	b.n	800a2f8 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	2b12      	cmp	r3, #18
 800a2fe:	d10e      	bne.n	800a31e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	2baa      	cmp	r3, #170	; 0xaa
 800a304:	d003      	beq.n	800a30e <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a30c:	d101      	bne.n	800a312 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a318:	2300      	movs	r3, #0
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	e00a      	b.n	800a334 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 fad4 	bl	800b8cc <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2bff      	cmp	r3, #255	; 0xff
 800a32c:	d802      	bhi.n	800a334 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	8979      	ldrh	r1, [r7, #10]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f001 f9d2 	bl	800b6ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a350:	2102      	movs	r1, #2
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f001 f9f8 	bl	800b748 <I2C_Enable_IRQ>

    return HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	e000      	b.n	800a35e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a35c:	2302      	movs	r3, #2
  }
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	80002400 	.word	0x80002400
 800a36c:	0800a56b 	.word	0x0800a56b

0800a370 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
  }
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d010      	beq.n	800a3ea <HAL_I2C_ER_IRQHandler+0x46>
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	09db      	lsrs	r3, r3, #7
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00a      	beq.n	800a3ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d8:	f043 0201 	orr.w	r2, r3, #1
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	0a9b      	lsrs	r3, r3, #10
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d010      	beq.n	800a418 <HAL_I2C_ER_IRQHandler+0x74>
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	09db      	lsrs	r3, r3, #7
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00a      	beq.n	800a418 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a406:	f043 0208 	orr.w	r2, r3, #8
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a416:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	0a5b      	lsrs	r3, r3, #9
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d010      	beq.n	800a446 <HAL_I2C_ER_IRQHandler+0xa2>
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	09db      	lsrs	r3, r3, #7
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00a      	beq.n	800a446 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a434:	f043 0202 	orr.w	r2, r3, #2
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a444:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f003 030b 	and.w	r3, r3, #11
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 ffcd 	bl	800b3f8 <I2C_ITError>
  }
}
 800a45e:	bf00      	nop
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a544:	b2db      	uxtb	r3, r3
}
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b088      	sub	sp, #32
 800a56e:	af02      	add	r7, sp, #8
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <I2C_Master_ISR_IT+0x1e>
 800a584:	2302      	movs	r3, #2
 800a586:	e114      	b.n	800a7b2 <I2C_Master_ISR_IT+0x248>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	091b      	lsrs	r3, r3, #4
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d013      	beq.n	800a5c4 <I2C_Master_ISR_IT+0x5a>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	091b      	lsrs	r3, r3, #4
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2210      	movs	r2, #16
 800a5ae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b4:	f043 0204 	orr.w	r2, r3, #4
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f001 f812 	bl	800b5e6 <I2C_Flush_TXDR>
 800a5c2:	e0e1      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	089b      	lsrs	r3, r3, #2
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d023      	beq.n	800a618 <I2C_Master_ISR_IT+0xae>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	089b      	lsrs	r3, r3, #2
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01d      	beq.n	800a618 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f023 0304 	bic.w	r3, r3, #4
 800a5e2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	b29a      	uxth	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a616:	e0b7      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	085b      	lsrs	r3, r3, #1
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01e      	beq.n	800a662 <I2C_Master_ISR_IT+0xf8>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	085b      	lsrs	r3, r3, #1
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d018      	beq.n	800a662 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	781a      	ldrb	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a64a:	3b01      	subs	r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a656:	b29b      	uxth	r3, r3
 800a658:	3b01      	subs	r3, #1
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a660:	e092      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	09db      	lsrs	r3, r3, #7
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d05d      	beq.n	800a72a <I2C_Master_ISR_IT+0x1c0>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	099b      	lsrs	r3, r3, #6
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d057      	beq.n	800a72a <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d040      	beq.n	800a706 <I2C_Master_ISR_IT+0x19c>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d13c      	bne.n	800a706 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a698:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2bff      	cmp	r3, #255	; 0xff
 800a6a2:	d90e      	bls.n	800a6c2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	22ff      	movs	r2, #255	; 0xff
 800a6a8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	8a79      	ldrh	r1, [r7, #18]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f001 f816 	bl	800b6ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6c0:	e032      	b.n	800a728 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6d4:	d00b      	beq.n	800a6ee <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	8a79      	ldrh	r1, [r7, #18]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	9000      	str	r0, [sp, #0]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f001 f800 	bl	800b6ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6ec:	e01c      	b.n	800a728 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	8a79      	ldrh	r1, [r7, #18]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fff4 	bl	800b6ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a704:	e010      	b.n	800a728 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a714:	d003      	beq.n	800a71e <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fba9 	bl	800ae6e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a71c:	e034      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a71e:	2140      	movs	r1, #64	; 0x40
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fe69 	bl	800b3f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a726:	e02f      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
 800a728:	e02e      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	099b      	lsrs	r3, r3, #6
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d028      	beq.n	800a788 <I2C_Master_ISR_IT+0x21e>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	099b      	lsrs	r3, r3, #6
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d022      	beq.n	800a788 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a746:	b29b      	uxth	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d119      	bne.n	800a780 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a75a:	d015      	beq.n	800a788 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a764:	d108      	bne.n	800a778 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a774:	605a      	str	r2, [r3, #4]
 800a776:	e007      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 fb78 	bl	800ae6e <I2C_ITMasterSeqCplt>
 800a77e:	e003      	b.n	800a788 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a780:	2140      	movs	r1, #64	; 0x40
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f000 fe38 	bl	800b3f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d009      	beq.n	800a7a8 <I2C_Master_ISR_IT+0x23e>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a7a0:	6979      	ldr	r1, [r7, #20]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 fbfe 	bl	800afa4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d101      	bne.n	800a7de <I2C_Slave_ISR_IT+0x24>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e0ec      	b.n	800a9b8 <I2C_Slave_ISR_IT+0x1fe>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	095b      	lsrs	r3, r3, #5
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <I2C_Slave_ISR_IT+0x4c>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	095b      	lsrs	r3, r3, #5
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a7fe:	6939      	ldr	r1, [r7, #16]
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fc99 	bl	800b138 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	091b      	lsrs	r3, r3, #4
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d04d      	beq.n	800a8ae <I2C_Slave_ISR_IT+0xf4>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	091b      	lsrs	r3, r3, #4
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d047      	beq.n	800a8ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a822:	b29b      	uxth	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	d128      	bne.n	800a87a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b28      	cmp	r3, #40	; 0x28
 800a832:	d108      	bne.n	800a846 <I2C_Slave_ISR_IT+0x8c>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a83a:	d104      	bne.n	800a846 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a83c:	6939      	ldr	r1, [r7, #16]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fd84 	bl	800b34c <I2C_ITListenCplt>
 800a844:	e032      	b.n	800a8ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b29      	cmp	r3, #41	; 0x29
 800a850:	d10e      	bne.n	800a870 <I2C_Slave_ISR_IT+0xb6>
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a858:	d00a      	beq.n	800a870 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2210      	movs	r2, #16
 800a860:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 febf 	bl	800b5e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fb3d 	bl	800aee8 <I2C_ITSlaveSeqCplt>
 800a86e:	e01d      	b.n	800a8ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2210      	movs	r2, #16
 800a876:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a878:	e096      	b.n	800a9a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2210      	movs	r2, #16
 800a880:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a886:	f043 0204 	orr.w	r2, r3, #4
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <I2C_Slave_ISR_IT+0xe4>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a89a:	f040 8085 	bne.w	800a9a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fda7 	bl	800b3f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a8aa:	e07d      	b.n	800a9a8 <I2C_Slave_ISR_IT+0x1ee>
 800a8ac:	e07c      	b.n	800a9a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	089b      	lsrs	r3, r3, #2
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d030      	beq.n	800a91c <I2C_Slave_ISR_IT+0x162>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	089b      	lsrs	r3, r3, #2
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02a      	beq.n	800a91c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d018      	beq.n	800a902 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d14f      	bne.n	800a9ac <I2C_Slave_ISR_IT+0x1f2>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a912:	d04b      	beq.n	800a9ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 fae7 	bl	800aee8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a91a:	e047      	b.n	800a9ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	08db      	lsrs	r3, r3, #3
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00a      	beq.n	800a93e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	08db      	lsrs	r3, r3, #3
 800a92c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a930:	2b00      	cmp	r3, #0
 800a932:	d004      	beq.n	800a93e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a934:	6939      	ldr	r1, [r7, #16]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fa15 	bl	800ad66 <I2C_ITAddrCplt>
 800a93c:	e037      	b.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	085b      	lsrs	r3, r3, #1
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d031      	beq.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	085b      	lsrs	r3, r3, #1
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d02b      	beq.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d018      	beq.n	800a992 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	851a      	strh	r2, [r3, #40]	; 0x28
 800a990:	e00d      	b.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a998:	d002      	beq.n	800a9a0 <I2C_Slave_ISR_IT+0x1e6>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d106      	bne.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 faa1 	bl	800aee8 <I2C_ITSlaveSeqCplt>
 800a9a6:	e002      	b.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a9a8:	bf00      	nop
 800a9aa:	e000      	b.n	800a9ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a9ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <I2C_Master_ISR_DMA+0x1a>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e0e1      	b.n	800ab9e <I2C_Master_ISR_DMA+0x1de>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	091b      	lsrs	r3, r3, #4
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d017      	beq.n	800aa1e <I2C_Master_ISR_DMA+0x5e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	091b      	lsrs	r3, r3, #4
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d011      	beq.n	800aa1e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2210      	movs	r2, #16
 800aa00:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa06:	f043 0204 	orr.w	r2, r3, #4
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aa0e:	2120      	movs	r1, #32
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 fe99 	bl	800b748 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 fde5 	bl	800b5e6 <I2C_Flush_TXDR>
 800aa1c:	e0ba      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	09db      	lsrs	r3, r3, #7
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d072      	beq.n	800ab10 <I2C_Master_ISR_DMA+0x150>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	099b      	lsrs	r3, r3, #6
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d06c      	beq.n	800ab10 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa44:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d04e      	beq.n	800aaee <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa5c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	2bff      	cmp	r3, #255	; 0xff
 800aa66:	d906      	bls.n	800aa76 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	22ff      	movs	r2, #255	; 0xff
 800aa6c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800aa6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	e010      	b.n	800aa98 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa88:	d003      	beq.n	800aa92 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	e002      	b.n	800aa98 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800aa92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa96:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	8a79      	ldrh	r1, [r7, #18]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 fe20 	bl	800b6ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b22      	cmp	r3, #34	; 0x22
 800aac8:	d108      	bne.n	800aadc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aad8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aada:	e05b      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aaec:	e052      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aafc:	d003      	beq.n	800ab06 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f9b5 	bl	800ae6e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800ab04:	e046      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ab06:	2140      	movs	r1, #64	; 0x40
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 fc75 	bl	800b3f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ab0e:	e041      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	099b      	lsrs	r3, r3, #6
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d029      	beq.n	800ab70 <I2C_Master_ISR_DMA+0x1b0>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	099b      	lsrs	r3, r3, #6
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d023      	beq.n	800ab70 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d119      	bne.n	800ab66 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab40:	d027      	beq.n	800ab92 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab4a:	d108      	bne.n	800ab5e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab5a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ab5c:	e019      	b.n	800ab92 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f985 	bl	800ae6e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ab64:	e015      	b.n	800ab92 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ab66:	2140      	movs	r1, #64	; 0x40
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fc45 	bl	800b3f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ab6e:	e010      	b.n	800ab92 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	095b      	lsrs	r3, r3, #5
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ab88:	68b9      	ldr	r1, [r7, #8]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fa0a 	bl	800afa4 <I2C_ITMasterCplt>
 800ab90:	e000      	b.n	800ab94 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800ab92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <I2C_Slave_ISR_DMA+0x24>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e0c9      	b.n	800ad5e <I2C_Slave_ISR_DMA+0x1b8>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	095b      	lsrs	r3, r3, #5
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <I2C_Slave_ISR_DMA+0x4c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	095b      	lsrs	r3, r3, #5
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 faa3 	bl	800b138 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 809a 	beq.w	800ad34 <I2C_Slave_ISR_DMA+0x18e>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	091b      	lsrs	r3, r3, #4
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 8093 	beq.w	800ad34 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	0b9b      	lsrs	r3, r3, #14
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	0bdb      	lsrs	r3, r3, #15
 800ac1e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d07f      	beq.n	800ad26 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00d      	beq.n	800ac4a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	0bdb      	lsrs	r3, r3, #15
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800ac46:	2301      	movs	r3, #1
 800ac48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00d      	beq.n	800ac6e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	0b9b      	lsrs	r3, r3, #14
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d128      	bne.n	800acc6 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b28      	cmp	r3, #40	; 0x28
 800ac7e:	d108      	bne.n	800ac92 <I2C_Slave_ISR_DMA+0xec>
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac86:	d104      	bne.n	800ac92 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 fb5e 	bl	800b34c <I2C_ITListenCplt>
 800ac90:	e048      	b.n	800ad24 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b29      	cmp	r3, #41	; 0x29
 800ac9c:	d10e      	bne.n	800acbc <I2C_Slave_ISR_DMA+0x116>
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aca4:	d00a      	beq.n	800acbc <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2210      	movs	r2, #16
 800acac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 fc99 	bl	800b5e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f917 	bl	800aee8 <I2C_ITSlaveSeqCplt>
 800acba:	e033      	b.n	800ad24 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2210      	movs	r2, #16
 800acc2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800acc4:	e034      	b.n	800ad30 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2210      	movs	r2, #16
 800accc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	f043 0204 	orr.w	r2, r3, #4
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ace0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <I2C_Slave_ISR_DMA+0x14a>
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acee:	d11f      	bne.n	800ad30 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	2b21      	cmp	r3, #33	; 0x21
 800acf4:	d002      	beq.n	800acfc <I2C_Slave_ISR_DMA+0x156>
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b29      	cmp	r3, #41	; 0x29
 800acfa:	d103      	bne.n	800ad04 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2221      	movs	r2, #33	; 0x21
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30
 800ad02:	e008      	b.n	800ad16 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
 800ad06:	2b22      	cmp	r3, #34	; 0x22
 800ad08:	d002      	beq.n	800ad10 <I2C_Slave_ISR_DMA+0x16a>
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0e:	d102      	bne.n	800ad16 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2222      	movs	r2, #34	; 0x22
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fb6b 	bl	800b3f8 <I2C_ITError>
      if (treatdmanack == 1U)
 800ad22:	e005      	b.n	800ad30 <I2C_Slave_ISR_DMA+0x18a>
 800ad24:	e004      	b.n	800ad30 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ad2e:	e011      	b.n	800ad54 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800ad30:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ad32:	e00f      	b.n	800ad54 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	08db      	lsrs	r3, r3, #3
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <I2C_Slave_ISR_DMA+0x1ae>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	08db      	lsrs	r3, r3, #3
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 f809 	bl	800ad66 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ad7c:	2b28      	cmp	r3, #40	; 0x28
 800ad7e:	d16a      	bne.n	800ae56 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	0c1b      	lsrs	r3, r3, #16
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ad9e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800adba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d138      	bne.n	800ae36 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	09db      	lsrs	r3, r3, #7
 800adc8:	b29a      	uxth	r2, r3
 800adca:	89bb      	ldrh	r3, [r7, #12]
 800adcc:	4053      	eors	r3, r2
 800adce:	b29b      	uxth	r3, r3
 800add0:	f003 0306 	and.w	r3, r3, #6
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11c      	bne.n	800ae12 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800add8:	897b      	ldrh	r3, [r7, #10]
 800adda:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adea:	2b02      	cmp	r3, #2
 800adec:	d13b      	bne.n	800ae66 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2208      	movs	r2, #8
 800adfa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae04:	89ba      	ldrh	r2, [r7, #12]
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fb53 	bl	800a4b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ae10:	e029      	b.n	800ae66 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ae12:	893b      	ldrh	r3, [r7, #8]
 800ae14:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fcf8 	bl	800b810 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae28:	89ba      	ldrh	r2, [r7, #12]
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fb41 	bl	800a4b6 <HAL_I2C_AddrCallback>
}
 800ae34:	e017      	b.n	800ae66 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fce8 	bl	800b810 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae48:	89ba      	ldrh	r2, [r7, #12]
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff fb31 	bl	800a4b6 <HAL_I2C_AddrCallback>
}
 800ae54:	e007      	b.n	800ae66 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b21      	cmp	r3, #33	; 0x21
 800ae88:	d115      	bne.n	800aeb6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2211      	movs	r2, #17
 800ae96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae9e:	2101      	movs	r1, #1
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fcb5 	bl	800b810 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fad9 	bl	800a466 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aeb4:	e014      	b.n	800aee0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2212      	movs	r2, #18
 800aec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aeca:	2102      	movs	r1, #2
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fc9f 	bl	800b810 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff facd 	bl	800a47a <HAL_I2C_MasterRxCpltCallback>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	0b9b      	lsrs	r3, r3, #14
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d008      	beq.n	800af1e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	e00d      	b.n	800af3a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	0bdb      	lsrs	r3, r3, #15
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b29      	cmp	r3, #41	; 0x29
 800af44:	d112      	bne.n	800af6c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2228      	movs	r2, #40	; 0x28
 800af4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2221      	movs	r2, #33	; 0x21
 800af52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800af54:	2101      	movs	r1, #1
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fc5a 	bl	800b810 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fa92 	bl	800a48e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800af6a:	e017      	b.n	800af9c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b2a      	cmp	r3, #42	; 0x2a
 800af76:	d111      	bne.n	800af9c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2228      	movs	r2, #40	; 0x28
 800af7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2222      	movs	r2, #34	; 0x22
 800af84:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af86:	2102      	movs	r1, #2
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fc41 	bl	800b810 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fa83 	bl	800a4a2 <HAL_I2C_SlaveRxCpltCallback>
}
 800af9c:	bf00      	nop
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2220      	movs	r2, #32
 800afb8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b21      	cmp	r3, #33	; 0x21
 800afc4:	d107      	bne.n	800afd6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800afc6:	2101      	movs	r1, #1
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fc21 	bl	800b810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2211      	movs	r2, #17
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
 800afd4:	e00c      	b.n	800aff0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b22      	cmp	r3, #34	; 0x22
 800afe0:	d106      	bne.n	800aff0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800afe2:	2102      	movs	r1, #2
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fc13 	bl	800b810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2212      	movs	r2, #18
 800afee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6859      	ldr	r1, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b4d      	ldr	r3, [pc, #308]	; (800b130 <I2C_ITMasterCplt+0x18c>)
 800affc:	400b      	ands	r3, r1
 800affe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a4a      	ldr	r2, [pc, #296]	; (800b134 <I2C_ITMasterCplt+0x190>)
 800b00a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	091b      	lsrs	r3, r3, #4
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2210      	movs	r2, #16
 800b01e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b024:	f043 0204 	orr.w	r2, r3, #4
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b60      	cmp	r3, #96	; 0x60
 800b036:	d10b      	bne.n	800b050 <I2C_ITMasterCplt+0xac>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	089b      	lsrs	r3, r3, #2
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b04e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fac8 	bl	800b5e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b60      	cmp	r3, #96	; 0x60
 800b066:	d002      	beq.n	800b06e <I2C_ITMasterCplt+0xca>
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d006      	beq.n	800b07c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f9bf 	bl	800b3f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b07a:	e054      	b.n	800b126 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b21      	cmp	r3, #33	; 0x21
 800b086:	d124      	bne.n	800b0d2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2220      	movs	r2, #32
 800b08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b40      	cmp	r3, #64	; 0x40
 800b0a0:	d10b      	bne.n	800b0ba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fa17 	bl	800a4e6 <HAL_I2C_MemTxCpltCallback>
}
 800b0b8:	e035      	b.n	800b126 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff f9cb 	bl	800a466 <HAL_I2C_MasterTxCpltCallback>
}
 800b0d0:	e029      	b.n	800b126 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b22      	cmp	r3, #34	; 0x22
 800b0dc:	d123      	bne.n	800b126 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d10b      	bne.n	800b110 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff f9f6 	bl	800a4fa <HAL_I2C_MemRxCpltCallback>
}
 800b10e:	e00a      	b.n	800b126 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff f9aa 	bl	800a47a <HAL_I2C_MasterRxCpltCallback>
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	fe00e800 	.word	0xfe00e800
 800b134:	ffff0000 	.word	0xffff0000

0800b138 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b154:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2220      	movs	r2, #32
 800b15c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b21      	cmp	r3, #33	; 0x21
 800b162:	d002      	beq.n	800b16a <I2C_ITSlaveCplt+0x32>
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	2b29      	cmp	r3, #41	; 0x29
 800b168:	d108      	bne.n	800b17c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b16a:	f248 0101 	movw	r1, #32769	; 0x8001
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fb4e 	bl	800b810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2221      	movs	r2, #33	; 0x21
 800b178:	631a      	str	r2, [r3, #48]	; 0x30
 800b17a:	e00d      	b.n	800b198 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	2b22      	cmp	r3, #34	; 0x22
 800b180:	d002      	beq.n	800b188 <I2C_ITSlaveCplt+0x50>
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	2b2a      	cmp	r3, #42	; 0x2a
 800b186:	d107      	bne.n	800b198 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b188:	f248 0102 	movw	r1, #32770	; 0x8002
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fb3f 	bl	800b810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2222      	movs	r2, #34	; 0x22
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6859      	ldr	r1, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b64      	ldr	r3, [pc, #400]	; (800b344 <I2C_ITSlaveCplt+0x20c>)
 800b1b4:	400b      	ands	r3, r1
 800b1b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fa14 	bl	800b5e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	0b9b      	lsrs	r3, r3, #14
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d013      	beq.n	800b1f2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b1d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d020      	beq.n	800b224 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1f0:	e018      	b.n	800b224 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	0bdb      	lsrs	r3, r3, #15
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d012      	beq.n	800b224 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b20c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d006      	beq.n	800b224 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	089b      	lsrs	r3, r3, #2
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d020      	beq.n	800b272 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f023 0304 	bic.w	r3, r3, #4
 800b236:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	b2d2      	uxtb	r2, r2
 800b244:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b01      	subs	r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b276:	b29b      	uxth	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b280:	f043 0204 	orr.w	r2, r3, #4
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f8a7 	bl	800b3f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b28      	cmp	r3, #40	; 0x28
 800b2b4:	d141      	bne.n	800b33a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b2b6:	6979      	ldr	r1, [r7, #20]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f847 	bl	800b34c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b2be:	e03c      	b.n	800b33a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b2c8:	d014      	beq.n	800b2f4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff fe0c 	bl	800aee8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a1d      	ldr	r2, [pc, #116]	; (800b348 <I2C_ITSlaveCplt+0x210>)
 800b2d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff f8f0 	bl	800a4d2 <HAL_I2C_ListenCpltCallback>
}
 800b2f2:	e022      	b.n	800b33a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b22      	cmp	r3, #34	; 0x22
 800b2fe:	d10e      	bne.n	800b31e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2220      	movs	r2, #32
 800b304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff f8c3 	bl	800a4a2 <HAL_I2C_SlaveRxCpltCallback>
}
 800b31c:	e00d      	b.n	800b33a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff f8aa 	bl	800a48e <HAL_I2C_SlaveTxCpltCallback>
}
 800b33a:	bf00      	nop
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	fe00e800 	.word	0xfe00e800
 800b348:	ffff0000 	.word	0xffff0000

0800b34c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a26      	ldr	r2, [pc, #152]	; (800b3f4 <I2C_ITListenCplt+0xa8>)
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2220      	movs	r2, #32
 800b366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	089b      	lsrs	r3, r3, #2
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d022      	beq.n	800b3ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d012      	beq.n	800b3ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c2:	f043 0204 	orr.w	r2, r3, #4
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b3ca:	f248 0103 	movw	r1, #32771	; 0x8003
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa1e 	bl	800b810 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2210      	movs	r2, #16
 800b3da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff f874 	bl	800a4d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	ffff0000 	.word	0xffff0000

0800b3f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a5d      	ldr	r2, [pc, #372]	; (800b58c <I2C_ITError+0x194>)
 800b416:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	2b28      	cmp	r3, #40	; 0x28
 800b42e:	d005      	beq.n	800b43c <I2C_ITError+0x44>
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	2b29      	cmp	r3, #41	; 0x29
 800b434:	d002      	beq.n	800b43c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	2b2a      	cmp	r3, #42	; 0x2a
 800b43a:	d10b      	bne.n	800b454 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b43c:	2103      	movs	r1, #3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f9e6 	bl	800b810 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2228      	movs	r2, #40	; 0x28
 800b448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a50      	ldr	r2, [pc, #320]	; (800b590 <I2C_ITError+0x198>)
 800b450:	635a      	str	r2, [r3, #52]	; 0x34
 800b452:	e011      	b.n	800b478 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b454:	f248 0103 	movw	r1, #32771	; 0x8003
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f9d9 	bl	800b810 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b60      	cmp	r3, #96	; 0x60
 800b468:	d003      	beq.n	800b472 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b482:	2b00      	cmp	r3, #0
 800b484:	d039      	beq.n	800b4fa <I2C_ITError+0x102>
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2b11      	cmp	r3, #17
 800b48a:	d002      	beq.n	800b492 <I2C_ITError+0x9a>
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2b21      	cmp	r3, #33	; 0x21
 800b490:	d133      	bne.n	800b4fa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b49c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a0:	d107      	bne.n	800b4b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b4b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe f98e 	bl	80097d8 <HAL_DMA_GetState>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d017      	beq.n	800b4f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	4a33      	ldr	r2, [pc, #204]	; (800b594 <I2C_ITError+0x19c>)
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe f88e 	bl	80095f8 <HAL_DMA_Abort_IT>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d04d      	beq.n	800b57e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b4f0:	e045      	b.n	800b57e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f850 	bl	800b598 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b4f8:	e041      	b.n	800b57e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d039      	beq.n	800b576 <I2C_ITError+0x17e>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b12      	cmp	r3, #18
 800b506:	d002      	beq.n	800b50e <I2C_ITError+0x116>
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	2b22      	cmp	r3, #34	; 0x22
 800b50c:	d133      	bne.n	800b576 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b51c:	d107      	bne.n	800b52e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b52c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe f950 	bl	80097d8 <HAL_DMA_GetState>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d017      	beq.n	800b56e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b542:	4a14      	ldr	r2, [pc, #80]	; (800b594 <I2C_ITError+0x19c>)
 800b544:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe f850 	bl	80095f8 <HAL_DMA_Abort_IT>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d011      	beq.n	800b582 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b56c:	e009      	b.n	800b582 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f812 	bl	800b598 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b574:	e005      	b.n	800b582 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f80e 	bl	800b598 <I2C_TreatErrorCallback>
  }
}
 800b57c:	e002      	b.n	800b584 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b582:	bf00      	nop
}
 800b584:	bf00      	nop
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	ffff0000 	.word	0xffff0000
 800b590:	0800a7bb 	.word	0x0800a7bb
 800b594:	0800b62f 	.word	0x0800b62f

0800b598 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b60      	cmp	r3, #96	; 0x60
 800b5aa:	d10e      	bne.n	800b5ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fe ffad 	bl	800a522 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b5c8:	e009      	b.n	800b5de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fe ff98 	bl	800a50e <HAL_I2C_ErrorCallback>
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	f003 0302 	and.w	r3, r3, #2
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d103      	bne.n	800b604 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2200      	movs	r2, #0
 800b602:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d007      	beq.n	800b622 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	699a      	ldr	r2, [r3, #24]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f042 0201 	orr.w	r2, r2, #1
 800b620:	619a      	str	r2, [r3, #24]
  }
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b648:	2200      	movs	r2, #0
 800b64a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b658:	2200      	movs	r2, #0
 800b65a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff ff9b 	bl	800b598 <I2C_TreatErrorCallback>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	4613      	mov	r3, r2
 800b678:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b67a:	e022      	b.n	800b6c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d01e      	beq.n	800b6c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b684:	f7fc f8dc 	bl	8007840 <HAL_GetTick>
 800b688:	4602      	mov	r2, r0
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d302      	bcc.n	800b69a <I2C_WaitOnFlagUntilTimeout+0x30>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d113      	bne.n	800b6c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69e:	f043 0220 	orr.w	r2, r3, #32
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e00f      	b.n	800b6e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	699a      	ldr	r2, [r3, #24]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	bf0c      	ite	eq
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	2300      	movne	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d0cd      	beq.n	800b67c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	607b      	str	r3, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	817b      	strh	r3, [r7, #10]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	0d5b      	lsrs	r3, r3, #21
 800b708:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b70c:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <I2C_TransferConfig+0x58>)
 800b70e:	430b      	orrs	r3, r1
 800b710:	43db      	mvns	r3, r3
 800b712:	ea02 0103 	and.w	r1, r2, r3
 800b716:	897b      	ldrh	r3, [r7, #10]
 800b718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b71c:	7a7b      	ldrb	r3, [r7, #9]
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b724:	431a      	orrs	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	431a      	orrs	r2, r3
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	03ff63ff 	.word	0x03ff63ff

0800b748 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75c:	4a2a      	ldr	r2, [pc, #168]	; (800b808 <I2C_Enable_IRQ+0xc0>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d004      	beq.n	800b76c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b766:	4a29      	ldr	r2, [pc, #164]	; (800b80c <I2C_Enable_IRQ+0xc4>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d11d      	bne.n	800b7a8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b76c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b770:	2b00      	cmp	r3, #0
 800b772:	da03      	bge.n	800b77c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b77a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b77c:	887b      	ldrh	r3, [r7, #2]
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d103      	bne.n	800b78a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b788:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b78a:	887b      	ldrh	r3, [r7, #2]
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d103      	bne.n	800b798 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b796:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b798:	887b      	ldrh	r3, [r7, #2]
 800b79a:	2b40      	cmp	r3, #64	; 0x40
 800b79c:	d125      	bne.n	800b7ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b7a6:	e020      	b.n	800b7ea <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b7a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	da03      	bge.n	800b7b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b7b6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b7b8:	887b      	ldrh	r3, [r7, #2]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b7c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b7ca:	887b      	ldrh	r3, [r7, #2]
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b7da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b7dc:	887b      	ldrh	r3, [r7, #2]
 800b7de:	2b20      	cmp	r3, #32
 800b7e0:	d103      	bne.n	800b7ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f043 0320 	orr.w	r3, r3, #32
 800b7e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6819      	ldr	r1, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	601a      	str	r2, [r3, #0]
}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	0800a9c1 	.word	0x0800a9c1
 800b80c:	0800aba7 	.word	0x0800aba7

0800b810 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b820:	887b      	ldrh	r3, [r7, #2]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00f      	beq.n	800b84a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b830:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b83e:	2b28      	cmp	r3, #40	; 0x28
 800b840:	d003      	beq.n	800b84a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b848:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b84a:	887b      	ldrh	r3, [r7, #2]
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00f      	beq.n	800b874 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b85a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b862:	b2db      	uxtb	r3, r3
 800b864:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b868:	2b28      	cmp	r3, #40	; 0x28
 800b86a:	d003      	beq.n	800b874 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b872:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b874:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	da03      	bge.n	800b884 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b882:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b884:	887b      	ldrh	r3, [r7, #2]
 800b886:	2b10      	cmp	r3, #16
 800b888:	d103      	bne.n	800b892 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b890:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b892:	887b      	ldrh	r3, [r7, #2]
 800b894:	2b20      	cmp	r3, #32
 800b896:	d103      	bne.n	800b8a0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f043 0320 	orr.w	r3, r3, #32
 800b89e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b8a0:	887b      	ldrh	r3, [r7, #2]
 800b8a2:	2b40      	cmp	r3, #64	; 0x40
 800b8a4:	d103      	bne.n	800b8ae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6819      	ldr	r1, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	43da      	mvns	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	400a      	ands	r2, r1
 800b8be:	601a      	str	r2, [r3, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d8:	2baa      	cmp	r3, #170	; 0xaa
 800b8da:	d103      	bne.n	800b8e4 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b8e2:	e008      	b.n	800b8f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800b8ec:	d103      	bne.n	800b8f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b8f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b902:	b480      	push	{r7}
 800b904:	b083      	sub	sp, #12
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b20      	cmp	r3, #32
 800b916:	d138      	bne.n	800b98a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b922:	2302      	movs	r3, #2
 800b924:	e032      	b.n	800b98c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2224      	movs	r2, #36	; 0x24
 800b932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 0201 	bic.w	r2, r2, #1
 800b944:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b954:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6819      	ldr	r1, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f042 0201 	orr.w	r2, r2, #1
 800b974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2220      	movs	r2, #32
 800b97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	e000      	b.n	800b98c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b98a:	2302      	movs	r3, #2
  }
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d139      	bne.n	800ba22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e033      	b.n	800ba24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2224      	movs	r2, #36	; 0x24
 800b9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0201 	bic.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b9ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f042 0201 	orr.w	r2, r2, #1
 800ba0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2220      	movs	r2, #32
 800ba12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e000      	b.n	800ba24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
  }
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a04      	ldr	r2, [pc, #16]	; (800ba4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba3e:	6013      	str	r3, [r2, #0]
}
 800ba40:	bf00      	nop
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	40007000 	.word	0x40007000

0800ba50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ba50:	b480      	push	{r7}
 800ba52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <HAL_PWREx_GetVoltageRange+0x18>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	40007000 	.word	0x40007000

0800ba6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba7a:	d130      	bne.n	800bade <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba7c:	4b23      	ldr	r3, [pc, #140]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba88:	d038      	beq.n	800bafc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba8a:	4b20      	ldr	r3, [pc, #128]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ba92:	4a1e      	ldr	r2, [pc, #120]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2232      	movs	r2, #50	; 0x32
 800baa0:	fb02 f303 	mul.w	r3, r2, r3
 800baa4:	4a1b      	ldr	r2, [pc, #108]	; (800bb14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800baa6:	fba2 2303 	umull	r2, r3, r2, r3
 800baaa:	0c9b      	lsrs	r3, r3, #18
 800baac:	3301      	adds	r3, #1
 800baae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bab0:	e002      	b.n	800bab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bab8:	4b14      	ldr	r3, [pc, #80]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bac4:	d102      	bne.n	800bacc <HAL_PWREx_ControlVoltageScaling+0x60>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1f2      	bne.n	800bab2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad8:	d110      	bne.n	800bafc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e00f      	b.n	800bafe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baea:	d007      	beq.n	800bafc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800baec:	4b07      	ldr	r3, [pc, #28]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800baf4:	4a05      	ldr	r2, [pc, #20]	; (800bb0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800baf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bafa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40007000 	.word	0x40007000
 800bb10:	20000008 	.word	0x20000008
 800bb14:	431bde83 	.word	0x431bde83

0800bb18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d102      	bne.n	800bb2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f000 bc11 	b.w	800c34e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb2c:	4ba0      	ldr	r3, [pc, #640]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f003 030c 	and.w	r3, r3, #12
 800bb34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb36:	4b9e      	ldr	r3, [pc, #632]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	f003 0303 	and.w	r3, r3, #3
 800bb3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 80e4 	beq.w	800bd16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <HAL_RCC_OscConfig+0x4c>
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	2b0c      	cmp	r3, #12
 800bb58:	f040 808b 	bne.w	800bc72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	f040 8087 	bne.w	800bc72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb64:	4b92      	ldr	r3, [pc, #584]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <HAL_RCC_OscConfig+0x64>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e3e8      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a1a      	ldr	r2, [r3, #32]
 800bb80:	4b8b      	ldr	r3, [pc, #556]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0308 	and.w	r3, r3, #8
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <HAL_RCC_OscConfig+0x7e>
 800bb8c:	4b88      	ldr	r3, [pc, #544]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb94:	e005      	b.n	800bba2 <HAL_RCC_OscConfig+0x8a>
 800bb96:	4b86      	ldr	r3, [pc, #536]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bb98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb9c:	091b      	lsrs	r3, r3, #4
 800bb9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d223      	bcs.n	800bbee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fdac 	bl	800c708 <RCC_SetFlashLatencyFromMSIRange>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e3c9      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bbba:	4b7d      	ldr	r3, [pc, #500]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a7c      	ldr	r2, [pc, #496]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbc0:	f043 0308 	orr.w	r3, r3, #8
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	4b7a      	ldr	r3, [pc, #488]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	4977      	ldr	r1, [pc, #476]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bbd8:	4b75      	ldr	r3, [pc, #468]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	4972      	ldr	r1, [pc, #456]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	604b      	str	r3, [r1, #4]
 800bbec:	e025      	b.n	800bc3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bbee:	4b70      	ldr	r3, [pc, #448]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a6f      	ldr	r2, [pc, #444]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbf4:	f043 0308 	orr.w	r3, r3, #8
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	4b6d      	ldr	r3, [pc, #436]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	496a      	ldr	r1, [pc, #424]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc0c:	4b68      	ldr	r3, [pc, #416]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	021b      	lsls	r3, r3, #8
 800bc1a:	4965      	ldr	r1, [pc, #404]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 fd6c 	bl	800c708 <RCC_SetFlashLatencyFromMSIRange>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e389      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc3a:	f000 fc6f 	bl	800c51c <HAL_RCC_GetSysClockFreq>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	4b5b      	ldr	r3, [pc, #364]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	091b      	lsrs	r3, r3, #4
 800bc46:	f003 030f 	and.w	r3, r3, #15
 800bc4a:	495a      	ldr	r1, [pc, #360]	; (800bdb4 <HAL_RCC_OscConfig+0x29c>)
 800bc4c:	5ccb      	ldrb	r3, [r1, r3]
 800bc4e:	f003 031f 	and.w	r3, r3, #31
 800bc52:	fa22 f303 	lsr.w	r3, r2, r3
 800bc56:	4a58      	ldr	r2, [pc, #352]	; (800bdb8 <HAL_RCC_OscConfig+0x2a0>)
 800bc58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bc5a:	4b58      	ldr	r3, [pc, #352]	; (800bdbc <HAL_RCC_OscConfig+0x2a4>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f9 feb0 	bl	80059c4 <HAL_InitTick>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d052      	beq.n	800bd14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	e36d      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d032      	beq.n	800bce0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bc7a:	4b4d      	ldr	r3, [pc, #308]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a4c      	ldr	r2, [pc, #304]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bc80:	f043 0301 	orr.w	r3, r3, #1
 800bc84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bc86:	f7fb fddb 	bl	8007840 <HAL_GetTick>
 800bc8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc8c:	e008      	b.n	800bca0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc8e:	f7fb fdd7 	bl	8007840 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e356      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bca0:	4b43      	ldr	r3, [pc, #268]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f0      	beq.n	800bc8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bcac:	4b40      	ldr	r3, [pc, #256]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a3f      	ldr	r2, [pc, #252]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bcb2:	f043 0308 	orr.w	r3, r3, #8
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	4b3d      	ldr	r3, [pc, #244]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	493a      	ldr	r1, [pc, #232]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bcca:	4b39      	ldr	r3, [pc, #228]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	021b      	lsls	r3, r3, #8
 800bcd8:	4935      	ldr	r1, [pc, #212]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	604b      	str	r3, [r1, #4]
 800bcde:	e01a      	b.n	800bd16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bce0:	4b33      	ldr	r3, [pc, #204]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a32      	ldr	r2, [pc, #200]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bce6:	f023 0301 	bic.w	r3, r3, #1
 800bcea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bcec:	f7fb fda8 	bl	8007840 <HAL_GetTick>
 800bcf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bcf2:	e008      	b.n	800bd06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bcf4:	f7fb fda4 	bl	8007840 <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d901      	bls.n	800bd06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e323      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bd06:	4b2a      	ldr	r3, [pc, #168]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0302 	and.w	r3, r3, #2
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f0      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x1dc>
 800bd12:	e000      	b.n	800bd16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bd14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d073      	beq.n	800be0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d005      	beq.n	800bd34 <HAL_RCC_OscConfig+0x21c>
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	2b0c      	cmp	r3, #12
 800bd2c:	d10e      	bne.n	800bd4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d10b      	bne.n	800bd4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd34:	4b1e      	ldr	r3, [pc, #120]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d063      	beq.n	800be08 <HAL_RCC_OscConfig+0x2f0>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d15f      	bne.n	800be08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e300      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd54:	d106      	bne.n	800bd64 <HAL_RCC_OscConfig+0x24c>
 800bd56:	4b16      	ldr	r3, [pc, #88]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a15      	ldr	r2, [pc, #84]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	e01d      	b.n	800bda0 <HAL_RCC_OscConfig+0x288>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd6c:	d10c      	bne.n	800bd88 <HAL_RCC_OscConfig+0x270>
 800bd6e:	4b10      	ldr	r3, [pc, #64]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a0f      	ldr	r2, [pc, #60]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	e00b      	b.n	800bda0 <HAL_RCC_OscConfig+0x288>
 800bd88:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a08      	ldr	r2, [pc, #32]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <HAL_RCC_OscConfig+0x298>)
 800bd9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01b      	beq.n	800bde0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda8:	f7fb fd4a 	bl	8007840 <HAL_GetTick>
 800bdac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bdae:	e010      	b.n	800bdd2 <HAL_RCC_OscConfig+0x2ba>
 800bdb0:	40021000 	.word	0x40021000
 800bdb4:	08014088 	.word	0x08014088
 800bdb8:	20000008 	.word	0x20000008
 800bdbc:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bdc0:	f7fb fd3e 	bl	8007840 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	2b64      	cmp	r3, #100	; 0x64
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e2bd      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bdd2:	4baf      	ldr	r3, [pc, #700]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0f0      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x2a8>
 800bdde:	e014      	b.n	800be0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde0:	f7fb fd2e 	bl	8007840 <HAL_GetTick>
 800bde4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bde6:	e008      	b.n	800bdfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bde8:	f7fb fd2a 	bl	8007840 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b64      	cmp	r3, #100	; 0x64
 800bdf4:	d901      	bls.n	800bdfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e2a9      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bdfa:	4ba5      	ldr	r3, [pc, #660]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1f0      	bne.n	800bde8 <HAL_RCC_OscConfig+0x2d0>
 800be06:	e000      	b.n	800be0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d060      	beq.n	800bed8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b04      	cmp	r3, #4
 800be1a:	d005      	beq.n	800be28 <HAL_RCC_OscConfig+0x310>
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	2b0c      	cmp	r3, #12
 800be20:	d119      	bne.n	800be56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b02      	cmp	r3, #2
 800be26:	d116      	bne.n	800be56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be28:	4b99      	ldr	r3, [pc, #612]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <HAL_RCC_OscConfig+0x328>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e286      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be40:	4b93      	ldr	r3, [pc, #588]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	061b      	lsls	r3, r3, #24
 800be4e:	4990      	ldr	r1, [pc, #576]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be50:	4313      	orrs	r3, r2
 800be52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be54:	e040      	b.n	800bed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d023      	beq.n	800bea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800be5e:	4b8c      	ldr	r3, [pc, #560]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a8b      	ldr	r2, [pc, #556]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be6a:	f7fb fce9 	bl	8007840 <HAL_GetTick>
 800be6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be70:	e008      	b.n	800be84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be72:	f7fb fce5 	bl	8007840 <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d901      	bls.n	800be84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e264      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be84:	4b82      	ldr	r3, [pc, #520]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0f0      	beq.n	800be72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be90:	4b7f      	ldr	r3, [pc, #508]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	061b      	lsls	r3, r3, #24
 800be9e:	497c      	ldr	r1, [pc, #496]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bea0:	4313      	orrs	r3, r2
 800bea2:	604b      	str	r3, [r1, #4]
 800bea4:	e018      	b.n	800bed8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bea6:	4b7a      	ldr	r3, [pc, #488]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a79      	ldr	r2, [pc, #484]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800beac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beb2:	f7fb fcc5 	bl	8007840 <HAL_GetTick>
 800beb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800beb8:	e008      	b.n	800becc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800beba:	f7fb fcc1 	bl	8007840 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e240      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800becc:	4b70      	ldr	r3, [pc, #448]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1f0      	bne.n	800beba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d03c      	beq.n	800bf5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01c      	beq.n	800bf26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800beec:	4b68      	ldr	r3, [pc, #416]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800beee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bef2:	4a67      	ldr	r2, [pc, #412]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bef4:	f043 0301 	orr.w	r3, r3, #1
 800bef8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800befc:	f7fb fca0 	bl	8007840 <HAL_GetTick>
 800bf00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf02:	e008      	b.n	800bf16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf04:	f7fb fc9c 	bl	8007840 <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d901      	bls.n	800bf16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e21b      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf16:	4b5e      	ldr	r3, [pc, #376]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf1c:	f003 0302 	and.w	r3, r3, #2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0ef      	beq.n	800bf04 <HAL_RCC_OscConfig+0x3ec>
 800bf24:	e01b      	b.n	800bf5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf26:	4b5a      	ldr	r3, [pc, #360]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf2c:	4a58      	ldr	r2, [pc, #352]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf36:	f7fb fc83 	bl	8007840 <HAL_GetTick>
 800bf3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bf3c:	e008      	b.n	800bf50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf3e:	f7fb fc7f 	bl	8007840 <HAL_GetTick>
 800bf42:	4602      	mov	r2, r0
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d901      	bls.n	800bf50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e1fe      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bf50:	4b4f      	ldr	r3, [pc, #316]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1ef      	bne.n	800bf3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 80a6 	beq.w	800c0b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bf70:	4b47      	ldr	r3, [pc, #284]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10d      	bne.n	800bf98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf7c:	4b44      	ldr	r3, [pc, #272]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf80:	4a43      	ldr	r2, [pc, #268]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf86:	6593      	str	r3, [r2, #88]	; 0x58
 800bf88:	4b41      	ldr	r3, [pc, #260]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bf8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf90:	60bb      	str	r3, [r7, #8]
 800bf92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf94:	2301      	movs	r3, #1
 800bf96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf98:	4b3e      	ldr	r3, [pc, #248]	; (800c094 <HAL_RCC_OscConfig+0x57c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d118      	bne.n	800bfd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bfa4:	4b3b      	ldr	r3, [pc, #236]	; (800c094 <HAL_RCC_OscConfig+0x57c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a3a      	ldr	r2, [pc, #232]	; (800c094 <HAL_RCC_OscConfig+0x57c>)
 800bfaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bfb0:	f7fb fc46 	bl	8007840 <HAL_GetTick>
 800bfb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfb8:	f7fb fc42 	bl	8007840 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e1c1      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfca:	4b32      	ldr	r3, [pc, #200]	; (800c094 <HAL_RCC_OscConfig+0x57c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0f0      	beq.n	800bfb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d108      	bne.n	800bff0 <HAL_RCC_OscConfig+0x4d8>
 800bfde:	4b2c      	ldr	r3, [pc, #176]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe4:	4a2a      	ldr	r2, [pc, #168]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bfe6:	f043 0301 	orr.w	r3, r3, #1
 800bfea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bfee:	e024      	b.n	800c03a <HAL_RCC_OscConfig+0x522>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	2b05      	cmp	r3, #5
 800bff6:	d110      	bne.n	800c01a <HAL_RCC_OscConfig+0x502>
 800bff8:	4b25      	ldr	r3, [pc, #148]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800bffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bffe:	4a24      	ldr	r2, [pc, #144]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c000:	f043 0304 	orr.w	r3, r3, #4
 800c004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c008:	4b21      	ldr	r3, [pc, #132]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c00e:	4a20      	ldr	r2, [pc, #128]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c010:	f043 0301 	orr.w	r3, r3, #1
 800c014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c018:	e00f      	b.n	800c03a <HAL_RCC_OscConfig+0x522>
 800c01a:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c020:	4a1b      	ldr	r2, [pc, #108]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c02a:	4b19      	ldr	r3, [pc, #100]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c030:	4a17      	ldr	r2, [pc, #92]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c032:	f023 0304 	bic.w	r3, r3, #4
 800c036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d016      	beq.n	800c070 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c042:	f7fb fbfd 	bl	8007840 <HAL_GetTick>
 800c046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c048:	e00a      	b.n	800c060 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c04a:	f7fb fbf9 	bl	8007840 <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	f241 3288 	movw	r2, #5000	; 0x1388
 800c058:	4293      	cmp	r3, r2
 800c05a:	d901      	bls.n	800c060 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e176      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <HAL_RCC_OscConfig+0x578>)
 800c062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0ed      	beq.n	800c04a <HAL_RCC_OscConfig+0x532>
 800c06e:	e01a      	b.n	800c0a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c070:	f7fb fbe6 	bl	8007840 <HAL_GetTick>
 800c074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c076:	e00f      	b.n	800c098 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c078:	f7fb fbe2 	bl	8007840 <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f241 3288 	movw	r2, #5000	; 0x1388
 800c086:	4293      	cmp	r3, r2
 800c088:	d906      	bls.n	800c098 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e15f      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
 800c08e:	bf00      	nop
 800c090:	40021000 	.word	0x40021000
 800c094:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c098:	4baa      	ldr	r3, [pc, #680]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e8      	bne.n	800c078 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c0a6:	7ffb      	ldrb	r3, [r7, #31]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d105      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0ac:	4ba5      	ldr	r3, [pc, #660]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b0:	4aa4      	ldr	r2, [pc, #656]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c0b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d03c      	beq.n	800c13e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01c      	beq.n	800c106 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c0cc:	4b9d      	ldr	r3, [pc, #628]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c0ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0d2:	4a9c      	ldr	r2, [pc, #624]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c0d4:	f043 0301 	orr.w	r3, r3, #1
 800c0d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0dc:	f7fb fbb0 	bl	8007840 <HAL_GetTick>
 800c0e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c0e2:	e008      	b.n	800c0f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0e4:	f7fb fbac 	bl	8007840 <HAL_GetTick>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d901      	bls.n	800c0f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e12b      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c0f6:	4b93      	ldr	r3, [pc, #588]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c0f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	2b00      	cmp	r3, #0
 800c102:	d0ef      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x5cc>
 800c104:	e01b      	b.n	800c13e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c106:	4b8f      	ldr	r3, [pc, #572]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c10c:	4a8d      	ldr	r2, [pc, #564]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c10e:	f023 0301 	bic.w	r3, r3, #1
 800c112:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c116:	f7fb fb93 	bl	8007840 <HAL_GetTick>
 800c11a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c11c:	e008      	b.n	800c130 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c11e:	f7fb fb8f 	bl	8007840 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d901      	bls.n	800c130 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e10e      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c130:	4b84      	ldr	r3, [pc, #528]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1ef      	bne.n	800c11e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 8102 	beq.w	800c34c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	f040 80c5 	bne.w	800c2dc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c152:	4b7c      	ldr	r3, [pc, #496]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f003 0203 	and.w	r2, r3, #3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	429a      	cmp	r2, r3
 800c164:	d12c      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	3b01      	subs	r3, #1
 800c172:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c174:	429a      	cmp	r2, r3
 800c176:	d123      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c182:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c184:	429a      	cmp	r2, r3
 800c186:	d11b      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c192:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c194:	429a      	cmp	r2, r3
 800c196:	d113      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d109      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d067      	beq.n	800c290 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	2b0c      	cmp	r3, #12
 800c1c4:	d062      	beq.n	800c28c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c1c6:	4b5f      	ldr	r3, [pc, #380]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e0bb      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c1d6:	4b5b      	ldr	r3, [pc, #364]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a5a      	ldr	r2, [pc, #360]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c1dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c1e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c1e2:	f7fb fb2d 	bl	8007840 <HAL_GetTick>
 800c1e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1e8:	e008      	b.n	800c1fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1ea:	f7fb fb29 	bl	8007840 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d901      	bls.n	800c1fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	e0a8      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1fc:	4b51      	ldr	r3, [pc, #324]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1f0      	bne.n	800c1ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c208:	4b4e      	ldr	r3, [pc, #312]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	4b4e      	ldr	r3, [pc, #312]	; (800c348 <HAL_RCC_OscConfig+0x830>)
 800c20e:	4013      	ands	r3, r2
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c218:	3a01      	subs	r2, #1
 800c21a:	0112      	lsls	r2, r2, #4
 800c21c:	4311      	orrs	r1, r2
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c222:	0212      	lsls	r2, r2, #8
 800c224:	4311      	orrs	r1, r2
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c22a:	0852      	lsrs	r2, r2, #1
 800c22c:	3a01      	subs	r2, #1
 800c22e:	0552      	lsls	r2, r2, #21
 800c230:	4311      	orrs	r1, r2
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c236:	0852      	lsrs	r2, r2, #1
 800c238:	3a01      	subs	r2, #1
 800c23a:	0652      	lsls	r2, r2, #25
 800c23c:	4311      	orrs	r1, r2
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c242:	06d2      	lsls	r2, r2, #27
 800c244:	430a      	orrs	r2, r1
 800c246:	493f      	ldr	r1, [pc, #252]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c248:	4313      	orrs	r3, r2
 800c24a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c24c:	4b3d      	ldr	r3, [pc, #244]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a3c      	ldr	r2, [pc, #240]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c258:	4b3a      	ldr	r3, [pc, #232]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	4a39      	ldr	r2, [pc, #228]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c25e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c264:	f7fb faec 	bl	8007840 <HAL_GetTick>
 800c268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c26a:	e008      	b.n	800c27e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c26c:	f7fb fae8 	bl	8007840 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	2b02      	cmp	r3, #2
 800c278:	d901      	bls.n	800c27e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e067      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c27e:	4b31      	ldr	r3, [pc, #196]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0f0      	beq.n	800c26c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c28a:	e05f      	b.n	800c34c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e05e      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c290:	4b2c      	ldr	r3, [pc, #176]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d157      	bne.n	800c34c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c29c:	4b29      	ldr	r3, [pc, #164]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a28      	ldr	r2, [pc, #160]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c2a8:	4b26      	ldr	r3, [pc, #152]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	4a25      	ldr	r2, [pc, #148]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c2b4:	f7fb fac4 	bl	8007840 <HAL_GetTick>
 800c2b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2ba:	e008      	b.n	800c2ce <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2bc:	f7fb fac0 	bl	8007840 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d901      	bls.n	800c2ce <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e03f      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2ce:	4b1d      	ldr	r3, [pc, #116]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0f0      	beq.n	800c2bc <HAL_RCC_OscConfig+0x7a4>
 800c2da:	e037      	b.n	800c34c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b0c      	cmp	r3, #12
 800c2e0:	d02d      	beq.n	800c33e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2e2:	4b18      	ldr	r3, [pc, #96]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a17      	ldr	r2, [pc, #92]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c2ec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c2ee:	4b15      	ldr	r3, [pc, #84]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d105      	bne.n	800c306 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c2fa:	4b12      	ldr	r3, [pc, #72]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	4a11      	ldr	r2, [pc, #68]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c300:	f023 0303 	bic.w	r3, r3, #3
 800c304:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c306:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	4a0e      	ldr	r2, [pc, #56]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c30c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c314:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c316:	f7fb fa93 	bl	8007840 <HAL_GetTick>
 800c31a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c31c:	e008      	b.n	800c330 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c31e:	f7fb fa8f 	bl	8007840 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d901      	bls.n	800c330 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e00e      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <HAL_RCC_OscConfig+0x82c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f0      	bne.n	800c31e <HAL_RCC_OscConfig+0x806>
 800c33c:	e006      	b.n	800c34c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e005      	b.n	800c34e <HAL_RCC_OscConfig+0x836>
 800c342:	bf00      	nop
 800c344:	40021000 	.word	0x40021000
 800c348:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3720      	adds	r7, #32
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop

0800c358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e0c8      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c36c:	4b66      	ldr	r3, [pc, #408]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d910      	bls.n	800c39c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c37a:	4b63      	ldr	r3, [pc, #396]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f023 0207 	bic.w	r2, r3, #7
 800c382:	4961      	ldr	r1, [pc, #388]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	4313      	orrs	r3, r2
 800c388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c38a:	4b5f      	ldr	r3, [pc, #380]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d001      	beq.n	800c39c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e0b0      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0301 	and.w	r3, r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d04c      	beq.n	800c442 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d107      	bne.n	800c3c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3b0:	4b56      	ldr	r3, [pc, #344]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d121      	bne.n	800c400 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e09e      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d107      	bne.n	800c3d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3c8:	4b50      	ldr	r3, [pc, #320]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d115      	bne.n	800c400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e092      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d107      	bne.n	800c3f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c3e0:	4b4a      	ldr	r3, [pc, #296]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d109      	bne.n	800c400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e086      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3f0:	4b46      	ldr	r3, [pc, #280]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e07e      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c400:	4b42      	ldr	r3, [pc, #264]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	f023 0203 	bic.w	r2, r3, #3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	493f      	ldr	r1, [pc, #252]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c412:	f7fb fa15 	bl	8007840 <HAL_GetTick>
 800c416:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c418:	e00a      	b.n	800c430 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c41a:	f7fb fa11 	bl	8007840 <HAL_GetTick>
 800c41e:	4602      	mov	r2, r0
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	f241 3288 	movw	r2, #5000	; 0x1388
 800c428:	4293      	cmp	r3, r2
 800c42a:	d901      	bls.n	800c430 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	e066      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c430:	4b36      	ldr	r3, [pc, #216]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	f003 020c 	and.w	r2, r3, #12
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	429a      	cmp	r2, r3
 800c440:	d1eb      	bne.n	800c41a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d008      	beq.n	800c460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c44e:	4b2f      	ldr	r3, [pc, #188]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	492c      	ldr	r1, [pc, #176]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c460:	4b29      	ldr	r3, [pc, #164]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0307 	and.w	r3, r3, #7
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d210      	bcs.n	800c490 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c46e:	4b26      	ldr	r3, [pc, #152]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f023 0207 	bic.w	r2, r3, #7
 800c476:	4924      	ldr	r1, [pc, #144]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c47e:	4b22      	ldr	r3, [pc, #136]	; (800c508 <HAL_RCC_ClockConfig+0x1b0>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d001      	beq.n	800c490 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e036      	b.n	800c4fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0304 	and.w	r3, r3, #4
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d008      	beq.n	800c4ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c49c:	4b1b      	ldr	r3, [pc, #108]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	4918      	ldr	r1, [pc, #96]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0308 	and.w	r3, r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d009      	beq.n	800c4ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c4ba:	4b14      	ldr	r3, [pc, #80]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4910      	ldr	r1, [pc, #64]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c4ce:	f000 f825 	bl	800c51c <HAL_RCC_GetSysClockFreq>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <HAL_RCC_ClockConfig+0x1b4>)
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	091b      	lsrs	r3, r3, #4
 800c4da:	f003 030f 	and.w	r3, r3, #15
 800c4de:	490c      	ldr	r1, [pc, #48]	; (800c510 <HAL_RCC_ClockConfig+0x1b8>)
 800c4e0:	5ccb      	ldrb	r3, [r1, r3]
 800c4e2:	f003 031f 	and.w	r3, r3, #31
 800c4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ea:	4a0a      	ldr	r2, [pc, #40]	; (800c514 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <HAL_RCC_ClockConfig+0x1c0>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7f9 fa66 	bl	80059c4 <HAL_InitTick>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	72fb      	strb	r3, [r7, #11]

  return status;
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	40022000 	.word	0x40022000
 800c50c:	40021000 	.word	0x40021000
 800c510:	08014088 	.word	0x08014088
 800c514:	20000008 	.word	0x20000008
 800c518:	20000010 	.word	0x20000010

0800c51c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b089      	sub	sp, #36	; 0x24
 800c520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c522:	2300      	movs	r3, #0
 800c524:	61fb      	str	r3, [r7, #28]
 800c526:	2300      	movs	r3, #0
 800c528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c52a:	4b3e      	ldr	r3, [pc, #248]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 030c 	and.w	r3, r3, #12
 800c532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c534:	4b3b      	ldr	r3, [pc, #236]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f003 0303 	and.w	r3, r3, #3
 800c53c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <HAL_RCC_GetSysClockFreq+0x34>
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	2b0c      	cmp	r3, #12
 800c548:	d121      	bne.n	800c58e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d11e      	bne.n	800c58e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c550:	4b34      	ldr	r3, [pc, #208]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 0308 	and.w	r3, r3, #8
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d107      	bne.n	800c56c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c55c:	4b31      	ldr	r3, [pc, #196]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c55e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c562:	0a1b      	lsrs	r3, r3, #8
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	e005      	b.n	800c578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c56c:	4b2d      	ldr	r3, [pc, #180]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	091b      	lsrs	r3, r3, #4
 800c572:	f003 030f 	and.w	r3, r3, #15
 800c576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c578:	4a2b      	ldr	r2, [pc, #172]	; (800c628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10d      	bne.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c58c:	e00a      	b.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2b04      	cmp	r3, #4
 800c592:	d102      	bne.n	800c59a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c594:	4b25      	ldr	r3, [pc, #148]	; (800c62c <HAL_RCC_GetSysClockFreq+0x110>)
 800c596:	61bb      	str	r3, [r7, #24]
 800c598:	e004      	b.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d101      	bne.n	800c5a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c5a0:	4b23      	ldr	r3, [pc, #140]	; (800c630 <HAL_RCC_GetSysClockFreq+0x114>)
 800c5a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	2b0c      	cmp	r3, #12
 800c5a8:	d134      	bne.n	800c614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c5aa:	4b1e      	ldr	r3, [pc, #120]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d003      	beq.n	800c5c2 <HAL_RCC_GetSysClockFreq+0xa6>
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d003      	beq.n	800c5c8 <HAL_RCC_GetSysClockFreq+0xac>
 800c5c0:	e005      	b.n	800c5ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c5c2:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <HAL_RCC_GetSysClockFreq+0x110>)
 800c5c4:	617b      	str	r3, [r7, #20]
      break;
 800c5c6:	e005      	b.n	800c5d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c5c8:	4b19      	ldr	r3, [pc, #100]	; (800c630 <HAL_RCC_GetSysClockFreq+0x114>)
 800c5ca:	617b      	str	r3, [r7, #20]
      break;
 800c5cc:	e002      	b.n	800c5d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	617b      	str	r3, [r7, #20]
      break;
 800c5d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c5d4:	4b13      	ldr	r3, [pc, #76]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	091b      	lsrs	r3, r3, #4
 800c5da:	f003 0307 	and.w	r3, r3, #7
 800c5de:	3301      	adds	r3, #1
 800c5e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c5e2:	4b10      	ldr	r3, [pc, #64]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	0a1b      	lsrs	r3, r3, #8
 800c5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	fb02 f203 	mul.w	r2, r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c5fa:	4b0a      	ldr	r3, [pc, #40]	; (800c624 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	0e5b      	lsrs	r3, r3, #25
 800c600:	f003 0303 	and.w	r3, r3, #3
 800c604:	3301      	adds	r3, #1
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c614:	69bb      	ldr	r3, [r7, #24]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3724      	adds	r7, #36	; 0x24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40021000 	.word	0x40021000
 800c628:	080140a0 	.word	0x080140a0
 800c62c:	00f42400 	.word	0x00f42400
 800c630:	00989680 	.word	0x00989680

0800c634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c638:	4b03      	ldr	r3, [pc, #12]	; (800c648 <HAL_RCC_GetHCLKFreq+0x14>)
 800c63a:	681b      	ldr	r3, [r3, #0]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	20000008 	.word	0x20000008

0800c64c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c650:	f7ff fff0 	bl	800c634 <HAL_RCC_GetHCLKFreq>
 800c654:	4602      	mov	r2, r0
 800c656:	4b06      	ldr	r3, [pc, #24]	; (800c670 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	f003 0307 	and.w	r3, r3, #7
 800c660:	4904      	ldr	r1, [pc, #16]	; (800c674 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c662:	5ccb      	ldrb	r3, [r1, r3]
 800c664:	f003 031f 	and.w	r3, r3, #31
 800c668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	40021000 	.word	0x40021000
 800c674:	08014098 	.word	0x08014098

0800c678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c67c:	f7ff ffda 	bl	800c634 <HAL_RCC_GetHCLKFreq>
 800c680:	4602      	mov	r2, r0
 800c682:	4b06      	ldr	r3, [pc, #24]	; (800c69c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	0adb      	lsrs	r3, r3, #11
 800c688:	f003 0307 	and.w	r3, r3, #7
 800c68c:	4904      	ldr	r1, [pc, #16]	; (800c6a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c68e:	5ccb      	ldrb	r3, [r1, r3]
 800c690:	f003 031f 	and.w	r3, r3, #31
 800c694:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c698:	4618      	mov	r0, r3
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	40021000 	.word	0x40021000
 800c6a0:	08014098 	.word	0x08014098

0800c6a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	220f      	movs	r2, #15
 800c6b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c6b4:	4b12      	ldr	r3, [pc, #72]	; (800c700 <HAL_RCC_GetClockConfig+0x5c>)
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f003 0203 	and.w	r2, r3, #3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <HAL_RCC_GetClockConfig+0x5c>)
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <HAL_RCC_GetClockConfig+0x5c>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c6d8:	4b09      	ldr	r3, [pc, #36]	; (800c700 <HAL_RCC_GetClockConfig+0x5c>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	08db      	lsrs	r3, r3, #3
 800c6de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c6e6:	4b07      	ldr	r3, [pc, #28]	; (800c704 <HAL_RCC_GetClockConfig+0x60>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 0207 	and.w	r2, r3, #7
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
}
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	40021000 	.word	0x40021000
 800c704:	40022000 	.word	0x40022000

0800c708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c710:	2300      	movs	r3, #0
 800c712:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c714:	4b2a      	ldr	r3, [pc, #168]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c720:	f7ff f996 	bl	800ba50 <HAL_PWREx_GetVoltageRange>
 800c724:	6178      	str	r0, [r7, #20]
 800c726:	e014      	b.n	800c752 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c728:	4b25      	ldr	r3, [pc, #148]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c72a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c72c:	4a24      	ldr	r2, [pc, #144]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c72e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c732:	6593      	str	r3, [r2, #88]	; 0x58
 800c734:	4b22      	ldr	r3, [pc, #136]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c740:	f7ff f986 	bl	800ba50 <HAL_PWREx_GetVoltageRange>
 800c744:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c746:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74a:	4a1d      	ldr	r2, [pc, #116]	; (800c7c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c74c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c750:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c758:	d10b      	bne.n	800c772 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b80      	cmp	r3, #128	; 0x80
 800c75e:	d919      	bls.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2ba0      	cmp	r3, #160	; 0xa0
 800c764:	d902      	bls.n	800c76c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c766:	2302      	movs	r3, #2
 800c768:	613b      	str	r3, [r7, #16]
 800c76a:	e013      	b.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c76c:	2301      	movs	r3, #1
 800c76e:	613b      	str	r3, [r7, #16]
 800c770:	e010      	b.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b80      	cmp	r3, #128	; 0x80
 800c776:	d902      	bls.n	800c77e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c778:	2303      	movs	r3, #3
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	e00a      	b.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b80      	cmp	r3, #128	; 0x80
 800c782:	d102      	bne.n	800c78a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c784:	2302      	movs	r3, #2
 800c786:	613b      	str	r3, [r7, #16]
 800c788:	e004      	b.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b70      	cmp	r3, #112	; 0x70
 800c78e:	d101      	bne.n	800c794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c790:	2301      	movs	r3, #1
 800c792:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c794:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f023 0207 	bic.w	r2, r3, #7
 800c79c:	4909      	ldr	r1, [pc, #36]	; (800c7c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c7a4:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 0307 	and.w	r3, r3, #7
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d001      	beq.n	800c7b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	40021000 	.word	0x40021000
 800c7c4:	40022000 	.word	0x40022000

0800c7c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d031      	beq.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c7ec:	d01a      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c7ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c7f2:	d814      	bhi.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d009      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c7f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7fc:	d10f      	bne.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c7fe:	4bac      	ldr	r3, [pc, #688]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	4aab      	ldr	r2, [pc, #684]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c808:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c80a:	e00c      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3304      	adds	r3, #4
 800c810:	2100      	movs	r1, #0
 800c812:	4618      	mov	r0, r3
 800c814:	f000 f9cc 	bl	800cbb0 <RCCEx_PLLSAI1_Config>
 800c818:	4603      	mov	r3, r0
 800c81a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c81c:	e003      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	74fb      	strb	r3, [r7, #19]
      break;
 800c822:	e000      	b.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c824:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c826:	7cfb      	ldrb	r3, [r7, #19]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10b      	bne.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c82c:	4ba0      	ldr	r3, [pc, #640]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83a:	499d      	ldr	r1, [pc, #628]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c83c:	4313      	orrs	r3, r2
 800c83e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c842:	e001      	b.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c844:	7cfb      	ldrb	r3, [r7, #19]
 800c846:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 8099 	beq.w	800c988 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c856:	2300      	movs	r3, #0
 800c858:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c85a:	4b95      	ldr	r3, [pc, #596]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c85e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c866:	2301      	movs	r3, #1
 800c868:	e000      	b.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c86a:	2300      	movs	r3, #0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00d      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c870:	4b8f      	ldr	r3, [pc, #572]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c874:	4a8e      	ldr	r2, [pc, #568]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c87a:	6593      	str	r3, [r2, #88]	; 0x58
 800c87c:	4b8c      	ldr	r3, [pc, #560]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c884:	60bb      	str	r3, [r7, #8]
 800c886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c888:	2301      	movs	r3, #1
 800c88a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c88c:	4b89      	ldr	r3, [pc, #548]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a88      	ldr	r2, [pc, #544]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c898:	f7fa ffd2 	bl	8007840 <HAL_GetTick>
 800c89c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c89e:	e009      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8a0:	f7fa ffce 	bl	8007840 <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d902      	bls.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	74fb      	strb	r3, [r7, #19]
        break;
 800c8b2:	e005      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c8b4:	4b7f      	ldr	r3, [pc, #508]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d0ef      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c8c0:	7cfb      	ldrb	r3, [r7, #19]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d155      	bne.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c8c6:	4b7a      	ldr	r3, [pc, #488]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01e      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d019      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c8e2:	4b73      	ldr	r3, [pc, #460]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c8ee:	4b70      	ldr	r3, [pc, #448]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8f4:	4a6e      	ldr	r2, [pc, #440]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c8f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8fe:	4b6c      	ldr	r3, [pc, #432]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c904:	4a6a      	ldr	r2, [pc, #424]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c90a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c90e:	4a68      	ldr	r2, [pc, #416]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d016      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c920:	f7fa ff8e 	bl	8007840 <HAL_GetTick>
 800c924:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c926:	e00b      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c928:	f7fa ff8a 	bl	8007840 <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	f241 3288 	movw	r2, #5000	; 0x1388
 800c936:	4293      	cmp	r3, r2
 800c938:	d902      	bls.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	74fb      	strb	r3, [r7, #19]
            break;
 800c93e:	e006      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c940:	4b5b      	ldr	r3, [pc, #364]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c946:	f003 0302 	and.w	r3, r3, #2
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0ec      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c94e:	7cfb      	ldrb	r3, [r7, #19]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10b      	bne.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c954:	4b56      	ldr	r3, [pc, #344]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c95a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c962:	4953      	ldr	r1, [pc, #332]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c964:	4313      	orrs	r3, r2
 800c966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c96a:	e004      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c96c:	7cfb      	ldrb	r3, [r7, #19]
 800c96e:	74bb      	strb	r3, [r7, #18]
 800c970:	e001      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c972:	7cfb      	ldrb	r3, [r7, #19]
 800c974:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c976:	7c7b      	ldrb	r3, [r7, #17]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d105      	bne.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c97c:	4b4c      	ldr	r3, [pc, #304]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c980:	4a4b      	ldr	r2, [pc, #300]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c986:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00a      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c994:	4b46      	ldr	r3, [pc, #280]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c99a:	f023 0203 	bic.w	r2, r3, #3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	4943      	ldr	r1, [pc, #268]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0302 	and.w	r3, r3, #2
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00a      	beq.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c9b6:	4b3e      	ldr	r3, [pc, #248]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9bc:	f023 020c 	bic.w	r2, r3, #12
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c4:	493a      	ldr	r1, [pc, #232]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0320 	and.w	r3, r3, #32
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00a      	beq.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c9d8:	4b35      	ldr	r3, [pc, #212]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e6:	4932      	ldr	r1, [pc, #200]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c9fa:	4b2d      	ldr	r3, [pc, #180]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca08:	4929      	ldr	r1, [pc, #164]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ca1c:	4b24      	ldr	r3, [pc, #144]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	4921      	ldr	r1, [pc, #132]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	4918      	ldr	r1, [pc, #96]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ca60:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	4910      	ldr	r1, [pc, #64]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d02c      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca82:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca90:	4907      	ldr	r1, [pc, #28]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caa0:	d10a      	bne.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800caa2:	4b03      	ldr	r3, [pc, #12]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	4a02      	ldr	r2, [pc, #8]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800caa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caac:	60d3      	str	r3, [r2, #12]
 800caae:	e015      	b.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x314>
 800cab0:	40021000 	.word	0x40021000
 800cab4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cac0:	d10c      	bne.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3304      	adds	r3, #4
 800cac6:	2101      	movs	r1, #1
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 f871 	bl	800cbb0 <RCCEx_PLLSAI1_Config>
 800cace:	4603      	mov	r3, r0
 800cad0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cad2:	7cfb      	ldrb	r3, [r7, #19]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800cad8:	7cfb      	ldrb	r3, [r7, #19]
 800cada:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d028      	beq.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cae8:	4b30      	ldr	r3, [pc, #192]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800caea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf6:	492d      	ldr	r1, [pc, #180]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb06:	d106      	bne.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb08:	4b28      	ldr	r3, [pc, #160]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	4a27      	ldr	r2, [pc, #156]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb12:	60d3      	str	r3, [r2, #12]
 800cb14:	e011      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb1e:	d10c      	bne.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3304      	adds	r3, #4
 800cb24:	2101      	movs	r1, #1
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f842 	bl	800cbb0 <RCCEx_PLLSAI1_Config>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cb30:	7cfb      	ldrb	r3, [r7, #19]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800cb36:	7cfb      	ldrb	r3, [r7, #19]
 800cb38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d01c      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cb46:	4b19      	ldr	r3, [pc, #100]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb54:	4915      	ldr	r1, [pc, #84]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb64:	d10c      	bne.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f81f 	bl	800cbb0 <RCCEx_PLLSAI1_Config>
 800cb72:	4603      	mov	r3, r0
 800cb74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cb76:	7cfb      	ldrb	r3, [r7, #19]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800cb7c:	7cfb      	ldrb	r3, [r7, #19]
 800cb7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb8c:	4b07      	ldr	r3, [pc, #28]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb9a:	4904      	ldr	r1, [pc, #16]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cba2:	7cbb      	ldrb	r3, [r7, #18]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	40021000 	.word	0x40021000

0800cbb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cbbe:	4b74      	ldr	r3, [pc, #464]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d018      	beq.n	800cbfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cbca:	4b71      	ldr	r3, [pc, #452]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	f003 0203 	and.w	r2, r3, #3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d10d      	bne.n	800cbf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
       ||
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d009      	beq.n	800cbf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cbe2:	4b6b      	ldr	r3, [pc, #428]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	091b      	lsrs	r3, r3, #4
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	685b      	ldr	r3, [r3, #4]
       ||
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d047      	beq.n	800cc86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	73fb      	strb	r3, [r7, #15]
 800cbfa:	e044      	b.n	800cc86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d018      	beq.n	800cc36 <RCCEx_PLLSAI1_Config+0x86>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d825      	bhi.n	800cc54 <RCCEx_PLLSAI1_Config+0xa4>
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d002      	beq.n	800cc12 <RCCEx_PLLSAI1_Config+0x62>
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d009      	beq.n	800cc24 <RCCEx_PLLSAI1_Config+0x74>
 800cc10:	e020      	b.n	800cc54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cc12:	4b5f      	ldr	r3, [pc, #380]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0302 	and.w	r3, r3, #2
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d11d      	bne.n	800cc5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc22:	e01a      	b.n	800cc5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cc24:	4b5a      	ldr	r3, [pc, #360]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d116      	bne.n	800cc5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc34:	e013      	b.n	800cc5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc36:	4b56      	ldr	r3, [pc, #344]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10f      	bne.n	800cc62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc42:	4b53      	ldr	r3, [pc, #332]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d109      	bne.n	800cc62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc52:	e006      	b.n	800cc62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]
      break;
 800cc58:	e004      	b.n	800cc64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc5a:	bf00      	nop
 800cc5c:	e002      	b.n	800cc64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc5e:	bf00      	nop
 800cc60:	e000      	b.n	800cc64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc62:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10d      	bne.n	800cc86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cc6a:	4b49      	ldr	r3, [pc, #292]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6819      	ldr	r1, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	4943      	ldr	r1, [pc, #268]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d17c      	bne.n	800cd86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc8c:	4b40      	ldr	r3, [pc, #256]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a3f      	ldr	r2, [pc, #252]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc98:	f7fa fdd2 	bl	8007840 <HAL_GetTick>
 800cc9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc9e:	e009      	b.n	800ccb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cca0:	f7fa fdce 	bl	8007840 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d902      	bls.n	800ccb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	73fb      	strb	r3, [r7, #15]
        break;
 800ccb2:	e005      	b.n	800ccc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ccb4:	4b36      	ldr	r3, [pc, #216]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1ef      	bne.n	800cca0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d15f      	bne.n	800cd86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d110      	bne.n	800ccee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cccc:	4b30      	ldr	r3, [pc, #192]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ccd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	6892      	ldr	r2, [r2, #8]
 800ccdc:	0211      	lsls	r1, r2, #8
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68d2      	ldr	r2, [r2, #12]
 800cce2:	06d2      	lsls	r2, r2, #27
 800cce4:	430a      	orrs	r2, r1
 800cce6:	492a      	ldr	r1, [pc, #168]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cce8:	4313      	orrs	r3, r2
 800ccea:	610b      	str	r3, [r1, #16]
 800ccec:	e027      	b.n	800cd3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d112      	bne.n	800cd1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccf4:	4b26      	ldr	r3, [pc, #152]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ccfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	6892      	ldr	r2, [r2, #8]
 800cd04:	0211      	lsls	r1, r2, #8
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	6912      	ldr	r2, [r2, #16]
 800cd0a:	0852      	lsrs	r2, r2, #1
 800cd0c:	3a01      	subs	r2, #1
 800cd0e:	0552      	lsls	r2, r2, #21
 800cd10:	430a      	orrs	r2, r1
 800cd12:	491f      	ldr	r1, [pc, #124]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	610b      	str	r3, [r1, #16]
 800cd18:	e011      	b.n	800cd3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cd1a:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cd22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	6892      	ldr	r2, [r2, #8]
 800cd2a:	0211      	lsls	r1, r2, #8
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	6952      	ldr	r2, [r2, #20]
 800cd30:	0852      	lsrs	r2, r2, #1
 800cd32:	3a01      	subs	r2, #1
 800cd34:	0652      	lsls	r2, r2, #25
 800cd36:	430a      	orrs	r2, r1
 800cd38:	4915      	ldr	r1, [pc, #84]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd4a:	f7fa fd79 	bl	8007840 <HAL_GetTick>
 800cd4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd50:	e009      	b.n	800cd66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd52:	f7fa fd75 	bl	8007840 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d902      	bls.n	800cd66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	73fb      	strb	r3, [r7, #15]
          break;
 800cd64:	e005      	b.n	800cd72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0ef      	beq.n	800cd52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cd78:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	4903      	ldr	r1, [pc, #12]	; (800cd90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd82:	4313      	orrs	r3, r2
 800cd84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	40021000 	.word	0x40021000

0800cd94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d06c      	beq.n	800ce80 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7f8 fd2e 	bl	800581c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	22ca      	movs	r2, #202	; 0xca
 800cdce:	625a      	str	r2, [r3, #36]	; 0x24
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2253      	movs	r2, #83	; 0x53
 800cdd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f87c 	bl	800ced6 <RTC_EnterInitMode>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d14b      	bne.n	800ce80 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	6812      	ldr	r2, [r2, #0]
 800cdf2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdfa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6899      	ldr	r1, [r3, #8]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	699b      	ldr	r3, [r3, #24]
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	68d2      	ldr	r2, [r2, #12]
 800ce22:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6919      	ldr	r1, [r3, #16]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	041a      	lsls	r2, r3, #16
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f87f 	bl	800cf3c <RTC_ExitInitMode>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d11b      	bne.n	800ce80 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f022 0203 	bic.w	r2, r2, #3
 800ce56:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	69da      	ldr	r2, [r3, #28]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	431a      	orrs	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	430a      	orrs	r2, r1
 800ce6e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	22ff      	movs	r2, #255	; 0xff
 800ce76:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cea0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800cea2:	f7fa fccd 	bl	8007840 <HAL_GetTick>
 800cea6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cea8:	e009      	b.n	800cebe <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ceaa:	f7fa fcc9 	bl	8007840 <HAL_GetTick>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ceb8:	d901      	bls.n	800cebe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e007      	b.n	800cece <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d0ee      	beq.n	800ceaa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b084      	sub	sp, #16
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d120      	bne.n	800cf32 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295
 800cef8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cefa:	f7fa fca1 	bl	8007840 <HAL_GetTick>
 800cefe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cf00:	e00d      	b.n	800cf1e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cf02:	f7fa fc9d 	bl	8007840 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf10:	d905      	bls.n	800cf1e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2203      	movs	r2, #3
 800cf1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d102      	bne.n	800cf32 <RTC_EnterInitMode+0x5c>
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d1e7      	bne.n	800cf02 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cf48:	4b1a      	ldr	r3, [pc, #104]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	4a19      	ldr	r2, [pc, #100]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cf4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf52:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cf54:	4b17      	ldr	r3, [pc, #92]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	f003 0320 	and.w	r3, r3, #32
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10c      	bne.n	800cf7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff ff92 	bl	800ce8a <HAL_RTC_WaitForSynchro>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d01e      	beq.n	800cfaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2203      	movs	r2, #3
 800cf70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	73fb      	strb	r3, [r7, #15]
 800cf78:	e017      	b.n	800cfaa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cf7a:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	4a0d      	ldr	r2, [pc, #52]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cf80:	f023 0320 	bic.w	r3, r3, #32
 800cf84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff ff7f 	bl	800ce8a <HAL_RTC_WaitForSynchro>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d005      	beq.n	800cf9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2203      	movs	r2, #3
 800cf96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <RTC_ExitInitMode+0x78>)
 800cfa4:	f043 0320 	orr.w	r3, r3, #32
 800cfa8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	40002800 	.word	0x40002800

0800cfb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e095      	b.n	800d0f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d108      	bne.n	800cfe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfda:	d009      	beq.n	800cff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	61da      	str	r2, [r3, #28]
 800cfe2:	e005      	b.n	800cff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7f8 fc74 	bl	80058f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2202      	movs	r2, #2
 800d014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d026:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d030:	d902      	bls.n	800d038 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
 800d036:	e002      	b.n	800d03e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d03c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d046:	d007      	beq.n	800d058 <HAL_SPI_Init+0xa0>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d050:	d002      	beq.n	800d058 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d068:	431a      	orrs	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	f003 0302 	and.w	r3, r3, #2
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	431a      	orrs	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d090:	431a      	orrs	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09a:	ea42 0103 	orr.w	r1, r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	0c1b      	lsrs	r3, r3, #16
 800d0b4:	f003 0204 	and.w	r2, r3, #4
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	f003 0310 	and.w	r3, r3, #16
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c6:	f003 0308 	and.w	r3, r3, #8
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d0d4:	ea42 0103 	orr.w	r1, r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e049      	b.n	800d1a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d106      	bne.n	800d12a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f8 fefd 	bl	8005f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2202      	movs	r2, #2
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3304      	adds	r3, #4
 800d13a:	4619      	mov	r1, r3
 800d13c:	4610      	mov	r0, r2
 800d13e:	f001 f84f 	bl	800e1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2201      	movs	r2, #1
 800d18e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d001      	beq.n	800d1c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e03b      	b.n	800d23c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f042 0201 	orr.w	r2, r2, #1
 800d1da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a19      	ldr	r2, [pc, #100]	; (800d248 <HAL_TIM_Base_Start_IT+0x9c>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d009      	beq.n	800d1fa <HAL_TIM_Base_Start_IT+0x4e>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ee:	d004      	beq.n	800d1fa <HAL_TIM_Base_Start_IT+0x4e>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a15      	ldr	r2, [pc, #84]	; (800d24c <HAL_TIM_Base_Start_IT+0xa0>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d115      	bne.n	800d226 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	4b13      	ldr	r3, [pc, #76]	; (800d250 <HAL_TIM_Base_Start_IT+0xa4>)
 800d202:	4013      	ands	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b06      	cmp	r3, #6
 800d20a:	d015      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x8c>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d212:	d011      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0201 	orr.w	r2, r2, #1
 800d222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d224:	e008      	b.n	800d238 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f042 0201 	orr.w	r2, r2, #1
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	e000      	b.n	800d23a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	40012c00 	.word	0x40012c00
 800d24c:	40014000 	.word	0x40014000
 800d250:	00010007 	.word	0x00010007

0800d254 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d262:	2301      	movs	r3, #1
 800d264:	e049      	b.n	800d2fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f841 	bl	800d302 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3304      	adds	r3, #4
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f000 ffa4 	bl	800e1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d30a:	bf00      	nop
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
	...

0800d318 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d104      	bne.n	800d332 <HAL_TIM_IC_Start_IT+0x1a>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	e023      	b.n	800d37a <HAL_TIM_IC_Start_IT+0x62>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b04      	cmp	r3, #4
 800d336:	d104      	bne.n	800d342 <HAL_TIM_IC_Start_IT+0x2a>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	e01b      	b.n	800d37a <HAL_TIM_IC_Start_IT+0x62>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b08      	cmp	r3, #8
 800d346:	d104      	bne.n	800d352 <HAL_TIM_IC_Start_IT+0x3a>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	e013      	b.n	800d37a <HAL_TIM_IC_Start_IT+0x62>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b0c      	cmp	r3, #12
 800d356:	d104      	bne.n	800d362 <HAL_TIM_IC_Start_IT+0x4a>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	e00b      	b.n	800d37a <HAL_TIM_IC_Start_IT+0x62>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b10      	cmp	r3, #16
 800d366:	d104      	bne.n	800d372 <HAL_TIM_IC_Start_IT+0x5a>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	e003      	b.n	800d37a <HAL_TIM_IC_Start_IT+0x62>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d104      	bne.n	800d38c <HAL_TIM_IC_Start_IT+0x74>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	e013      	b.n	800d3b4 <HAL_TIM_IC_Start_IT+0x9c>
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b04      	cmp	r3, #4
 800d390:	d104      	bne.n	800d39c <HAL_TIM_IC_Start_IT+0x84>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	e00b      	b.n	800d3b4 <HAL_TIM_IC_Start_IT+0x9c>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b08      	cmp	r3, #8
 800d3a0:	d104      	bne.n	800d3ac <HAL_TIM_IC_Start_IT+0x94>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	e003      	b.n	800d3b4 <HAL_TIM_IC_Start_IT+0x9c>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d102      	bne.n	800d3c2 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d001      	beq.n	800d3c6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e0c4      	b.n	800d550 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d104      	bne.n	800d3d6 <HAL_TIM_IC_Start_IT+0xbe>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3d4:	e023      	b.n	800d41e <HAL_TIM_IC_Start_IT+0x106>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d104      	bne.n	800d3e6 <HAL_TIM_IC_Start_IT+0xce>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2202      	movs	r2, #2
 800d3e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3e4:	e01b      	b.n	800d41e <HAL_TIM_IC_Start_IT+0x106>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b08      	cmp	r3, #8
 800d3ea:	d104      	bne.n	800d3f6 <HAL_TIM_IC_Start_IT+0xde>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3f4:	e013      	b.n	800d41e <HAL_TIM_IC_Start_IT+0x106>
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b0c      	cmp	r3, #12
 800d3fa:	d104      	bne.n	800d406 <HAL_TIM_IC_Start_IT+0xee>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2202      	movs	r2, #2
 800d400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d404:	e00b      	b.n	800d41e <HAL_TIM_IC_Start_IT+0x106>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b10      	cmp	r3, #16
 800d40a:	d104      	bne.n	800d416 <HAL_TIM_IC_Start_IT+0xfe>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d414:	e003      	b.n	800d41e <HAL_TIM_IC_Start_IT+0x106>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2202      	movs	r2, #2
 800d41a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d104      	bne.n	800d42e <HAL_TIM_IC_Start_IT+0x116>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d42c:	e013      	b.n	800d456 <HAL_TIM_IC_Start_IT+0x13e>
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b04      	cmp	r3, #4
 800d432:	d104      	bne.n	800d43e <HAL_TIM_IC_Start_IT+0x126>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2202      	movs	r2, #2
 800d438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d43c:	e00b      	b.n	800d456 <HAL_TIM_IC_Start_IT+0x13e>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b08      	cmp	r3, #8
 800d442:	d104      	bne.n	800d44e <HAL_TIM_IC_Start_IT+0x136>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2202      	movs	r2, #2
 800d448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d44c:	e003      	b.n	800d456 <HAL_TIM_IC_Start_IT+0x13e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2202      	movs	r2, #2
 800d452:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b0c      	cmp	r3, #12
 800d45a:	d841      	bhi.n	800d4e0 <HAL_TIM_IC_Start_IT+0x1c8>
 800d45c:	a201      	add	r2, pc, #4	; (adr r2, 800d464 <HAL_TIM_IC_Start_IT+0x14c>)
 800d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d499 	.word	0x0800d499
 800d468:	0800d4e1 	.word	0x0800d4e1
 800d46c:	0800d4e1 	.word	0x0800d4e1
 800d470:	0800d4e1 	.word	0x0800d4e1
 800d474:	0800d4ab 	.word	0x0800d4ab
 800d478:	0800d4e1 	.word	0x0800d4e1
 800d47c:	0800d4e1 	.word	0x0800d4e1
 800d480:	0800d4e1 	.word	0x0800d4e1
 800d484:	0800d4bd 	.word	0x0800d4bd
 800d488:	0800d4e1 	.word	0x0800d4e1
 800d48c:	0800d4e1 	.word	0x0800d4e1
 800d490:	0800d4e1 	.word	0x0800d4e1
 800d494:	0800d4cf 	.word	0x0800d4cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68da      	ldr	r2, [r3, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f042 0202 	orr.w	r2, r2, #2
 800d4a6:	60da      	str	r2, [r3, #12]
      break;
 800d4a8:	e01b      	b.n	800d4e2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68da      	ldr	r2, [r3, #12]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f042 0204 	orr.w	r2, r2, #4
 800d4b8:	60da      	str	r2, [r3, #12]
      break;
 800d4ba:	e012      	b.n	800d4e2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68da      	ldr	r2, [r3, #12]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f042 0208 	orr.w	r2, r2, #8
 800d4ca:	60da      	str	r2, [r3, #12]
      break;
 800d4cc:	e009      	b.n	800d4e2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f042 0210 	orr.w	r2, r2, #16
 800d4dc:	60da      	str	r2, [r3, #12]
      break;
 800d4de:	e000      	b.n	800d4e2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800d4e0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f001 f882 	bl	800e5f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a18      	ldr	r2, [pc, #96]	; (800d558 <HAL_TIM_IC_Start_IT+0x240>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d009      	beq.n	800d50e <HAL_TIM_IC_Start_IT+0x1f6>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d502:	d004      	beq.n	800d50e <HAL_TIM_IC_Start_IT+0x1f6>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a14      	ldr	r2, [pc, #80]	; (800d55c <HAL_TIM_IC_Start_IT+0x244>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d115      	bne.n	800d53a <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	689a      	ldr	r2, [r3, #8]
 800d514:	4b12      	ldr	r3, [pc, #72]	; (800d560 <HAL_TIM_IC_Start_IT+0x248>)
 800d516:	4013      	ands	r3, r2
 800d518:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b06      	cmp	r3, #6
 800d51e:	d015      	beq.n	800d54c <HAL_TIM_IC_Start_IT+0x234>
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d526:	d011      	beq.n	800d54c <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f042 0201 	orr.w	r2, r2, #1
 800d536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d538:	e008      	b.n	800d54c <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f042 0201 	orr.w	r2, r2, #1
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	e000      	b.n	800d54e <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d54c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	40012c00 	.word	0x40012c00
 800d55c:	40014000 	.word	0x40014000
 800d560:	00010007 	.word	0x00010007

0800d564 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d104      	bne.n	800d582 <HAL_TIM_IC_Start_DMA+0x1e>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	e023      	b.n	800d5ca <HAL_TIM_IC_Start_DMA+0x66>
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b04      	cmp	r3, #4
 800d586:	d104      	bne.n	800d592 <HAL_TIM_IC_Start_DMA+0x2e>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	e01b      	b.n	800d5ca <HAL_TIM_IC_Start_DMA+0x66>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b08      	cmp	r3, #8
 800d596:	d104      	bne.n	800d5a2 <HAL_TIM_IC_Start_DMA+0x3e>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	e013      	b.n	800d5ca <HAL_TIM_IC_Start_DMA+0x66>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2b0c      	cmp	r3, #12
 800d5a6:	d104      	bne.n	800d5b2 <HAL_TIM_IC_Start_DMA+0x4e>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	e00b      	b.n	800d5ca <HAL_TIM_IC_Start_DMA+0x66>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b10      	cmp	r3, #16
 800d5b6:	d104      	bne.n	800d5c2 <HAL_TIM_IC_Start_DMA+0x5e>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	e003      	b.n	800d5ca <HAL_TIM_IC_Start_DMA+0x66>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d104      	bne.n	800d5dc <HAL_TIM_IC_Start_DMA+0x78>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	e013      	b.n	800d604 <HAL_TIM_IC_Start_DMA+0xa0>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b04      	cmp	r3, #4
 800d5e0:	d104      	bne.n	800d5ec <HAL_TIM_IC_Start_DMA+0x88>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	e00b      	b.n	800d604 <HAL_TIM_IC_Start_DMA+0xa0>
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b08      	cmp	r3, #8
 800d5f0:	d104      	bne.n	800d5fc <HAL_TIM_IC_Start_DMA+0x98>
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	e003      	b.n	800d604 <HAL_TIM_IC_Start_DMA+0xa0>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d602:	b2db      	uxtb	r3, r3
 800d604:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800d606:	7dfb      	ldrb	r3, [r7, #23]
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d002      	beq.n	800d612 <HAL_TIM_IC_Start_DMA+0xae>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800d60c:	7dbb      	ldrb	r3, [r7, #22]
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d101      	bne.n	800d616 <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800d612:	2302      	movs	r3, #2
 800d614:	e142      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d153      	bne.n	800d6c4 <HAL_TIM_IC_Start_DMA+0x160>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800d61c:	7dbb      	ldrb	r3, [r7, #22]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d150      	bne.n	800d6c4 <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d104      	bne.n	800d632 <HAL_TIM_IC_Start_DMA+0xce>
 800d628:	887b      	ldrh	r3, [r7, #2]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e134      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d104      	bne.n	800d642 <HAL_TIM_IC_Start_DMA+0xde>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d640:	e023      	b.n	800d68a <HAL_TIM_IC_Start_DMA+0x126>
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b04      	cmp	r3, #4
 800d646:	d104      	bne.n	800d652 <HAL_TIM_IC_Start_DMA+0xee>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2202      	movs	r2, #2
 800d64c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d650:	e01b      	b.n	800d68a <HAL_TIM_IC_Start_DMA+0x126>
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	2b08      	cmp	r3, #8
 800d656:	d104      	bne.n	800d662 <HAL_TIM_IC_Start_DMA+0xfe>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2202      	movs	r2, #2
 800d65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d660:	e013      	b.n	800d68a <HAL_TIM_IC_Start_DMA+0x126>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b0c      	cmp	r3, #12
 800d666:	d104      	bne.n	800d672 <HAL_TIM_IC_Start_DMA+0x10e>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d670:	e00b      	b.n	800d68a <HAL_TIM_IC_Start_DMA+0x126>
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b10      	cmp	r3, #16
 800d676:	d104      	bne.n	800d682 <HAL_TIM_IC_Start_DMA+0x11e>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2202      	movs	r2, #2
 800d67c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d680:	e003      	b.n	800d68a <HAL_TIM_IC_Start_DMA+0x126>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2202      	movs	r2, #2
 800d686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d104      	bne.n	800d69a <HAL_TIM_IC_Start_DMA+0x136>
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2202      	movs	r2, #2
 800d694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800d698:	e016      	b.n	800d6c8 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	d104      	bne.n	800d6aa <HAL_TIM_IC_Start_DMA+0x146>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2202      	movs	r2, #2
 800d6a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800d6a8:	e00e      	b.n	800d6c8 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d104      	bne.n	800d6ba <HAL_TIM_IC_Start_DMA+0x156>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2202      	movs	r2, #2
 800d6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800d6b8:	e006      	b.n	800d6c8 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800d6c2:	e001      	b.n	800d6c8 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e0e9      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f000 ff8f 	bl	800e5f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a72      	ldr	r2, [pc, #456]	; (800d8a4 <HAL_TIM_IC_Start_DMA+0x340>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d009      	beq.n	800d6f4 <HAL_TIM_IC_Start_DMA+0x190>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6e8:	d004      	beq.n	800d6f4 <HAL_TIM_IC_Start_DMA+0x190>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a6e      	ldr	r2, [pc, #440]	; (800d8a8 <HAL_TIM_IC_Start_DMA+0x344>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d115      	bne.n	800d720 <HAL_TIM_IC_Start_DMA+0x1bc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	689a      	ldr	r2, [r3, #8]
 800d6fa:	4b6c      	ldr	r3, [pc, #432]	; (800d8ac <HAL_TIM_IC_Start_DMA+0x348>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b06      	cmp	r3, #6
 800d704:	d015      	beq.n	800d732 <HAL_TIM_IC_Start_DMA+0x1ce>
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d70c:	d011      	beq.n	800d732 <HAL_TIM_IC_Start_DMA+0x1ce>
    {
      __HAL_TIM_ENABLE(htim);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f042 0201 	orr.w	r2, r2, #1
 800d71c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d71e:	e008      	b.n	800d732 <HAL_TIM_IC_Start_DMA+0x1ce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f042 0201 	orr.w	r2, r2, #1
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	e000      	b.n	800d734 <HAL_TIM_IC_Start_DMA+0x1d0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d732:	bf00      	nop
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b0c      	cmp	r3, #12
 800d738:	f200 80ae 	bhi.w	800d898 <HAL_TIM_IC_Start_DMA+0x334>
 800d73c:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <HAL_TIM_IC_Start_DMA+0x1e0>)
 800d73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d742:	bf00      	nop
 800d744:	0800d779 	.word	0x0800d779
 800d748:	0800d899 	.word	0x0800d899
 800d74c:	0800d899 	.word	0x0800d899
 800d750:	0800d899 	.word	0x0800d899
 800d754:	0800d7c1 	.word	0x0800d7c1
 800d758:	0800d899 	.word	0x0800d899
 800d75c:	0800d899 	.word	0x0800d899
 800d760:	0800d899 	.word	0x0800d899
 800d764:	0800d809 	.word	0x0800d809
 800d768:	0800d899 	.word	0x0800d899
 800d76c:	0800d899 	.word	0x0800d899
 800d770:	0800d899 	.word	0x0800d899
 800d774:	0800d851 	.word	0x0800d851
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	4a4c      	ldr	r2, [pc, #304]	; (800d8b0 <HAL_TIM_IC_Start_DMA+0x34c>)
 800d77e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d784:	4a4b      	ldr	r2, [pc, #300]	; (800d8b4 <HAL_TIM_IC_Start_DMA+0x350>)
 800d786:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	4a4a      	ldr	r2, [pc, #296]	; (800d8b8 <HAL_TIM_IC_Start_DMA+0x354>)
 800d78e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3334      	adds	r3, #52	; 0x34
 800d79a:	4619      	mov	r1, r3
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	887b      	ldrh	r3, [r7, #2]
 800d7a0:	f7fb fe8c 	bl	80094bc <HAL_DMA_Start_IT>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <HAL_TIM_IC_Start_DMA+0x24a>
      {
        /* Return error status */
        return HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e076      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68da      	ldr	r2, [r3, #12]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7bc:	60da      	str	r2, [r3, #12]
      break;
 800d7be:	e06c      	b.n	800d89a <HAL_TIM_IC_Start_DMA+0x336>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c4:	4a3a      	ldr	r2, [pc, #232]	; (800d8b0 <HAL_TIM_IC_Start_DMA+0x34c>)
 800d7c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7cc:	4a39      	ldr	r2, [pc, #228]	; (800d8b4 <HAL_TIM_IC_Start_DMA+0x350>)
 800d7ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d4:	4a38      	ldr	r2, [pc, #224]	; (800d8b8 <HAL_TIM_IC_Start_DMA+0x354>)
 800d7d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3338      	adds	r3, #56	; 0x38
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	887b      	ldrh	r3, [r7, #2]
 800d7e8:	f7fb fe68 	bl	80094bc <HAL_DMA_Start_IT>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <HAL_TIM_IC_Start_DMA+0x292>
      {
        /* Return error status */
        return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e052      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	68da      	ldr	r2, [r3, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d804:	60da      	str	r2, [r3, #12]
      break;
 800d806:	e048      	b.n	800d89a <HAL_TIM_IC_Start_DMA+0x336>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4a28      	ldr	r2, [pc, #160]	; (800d8b0 <HAL_TIM_IC_Start_DMA+0x34c>)
 800d80e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	4a27      	ldr	r2, [pc, #156]	; (800d8b4 <HAL_TIM_IC_Start_DMA+0x350>)
 800d816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	4a26      	ldr	r2, [pc, #152]	; (800d8b8 <HAL_TIM_IC_Start_DMA+0x354>)
 800d81e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	333c      	adds	r3, #60	; 0x3c
 800d82a:	4619      	mov	r1, r3
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	887b      	ldrh	r3, [r7, #2]
 800d830:	f7fb fe44 	bl	80094bc <HAL_DMA_Start_IT>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <HAL_TIM_IC_Start_DMA+0x2da>
      {
        /* Return error status */
        return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e02e      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d84c:	60da      	str	r2, [r3, #12]
      break;
 800d84e:	e024      	b.n	800d89a <HAL_TIM_IC_Start_DMA+0x336>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d854:	4a16      	ldr	r2, [pc, #88]	; (800d8b0 <HAL_TIM_IC_Start_DMA+0x34c>)
 800d856:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85c:	4a15      	ldr	r2, [pc, #84]	; (800d8b4 <HAL_TIM_IC_Start_DMA+0x350>)
 800d85e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d864:	4a14      	ldr	r2, [pc, #80]	; (800d8b8 <HAL_TIM_IC_Start_DMA+0x354>)
 800d866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3340      	adds	r3, #64	; 0x40
 800d872:	4619      	mov	r1, r3
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	887b      	ldrh	r3, [r7, #2]
 800d878:	f7fb fe20 	bl	80094bc <HAL_DMA_Start_IT>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <HAL_TIM_IC_Start_DMA+0x322>
      {
        /* Return error status */
        return HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	e00a      	b.n	800d89c <HAL_TIM_IC_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d894:	60da      	str	r2, [r3, #12]
      break;
 800d896:	e000      	b.n	800d89a <HAL_TIM_IC_Start_DMA+0x336>
    }

    default:
      break;
 800d898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3718      	adds	r7, #24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	40012c00 	.word	0x40012c00
 800d8a8:	40014000 	.word	0x40014000
 800d8ac:	00010007 	.word	0x00010007
 800d8b0:	0800e0af 	.word	0x0800e0af
 800d8b4:	0800e177 	.word	0x0800e177
 800d8b8:	0800e01d 	.word	0x0800e01d

0800d8bc <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 fe90 	bl	800e5f4 <TIM_CCxChannelCmd>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2b0c      	cmp	r3, #12
 800d8d8:	d854      	bhi.n	800d984 <HAL_TIM_IC_Stop_DMA+0xc8>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <HAL_TIM_IC_Stop_DMA+0x24>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d915 	.word	0x0800d915
 800d8e4:	0800d985 	.word	0x0800d985
 800d8e8:	0800d985 	.word	0x0800d985
 800d8ec:	0800d985 	.word	0x0800d985
 800d8f0:	0800d931 	.word	0x0800d931
 800d8f4:	0800d985 	.word	0x0800d985
 800d8f8:	0800d985 	.word	0x0800d985
 800d8fc:	0800d985 	.word	0x0800d985
 800d900:	0800d94d 	.word	0x0800d94d
 800d904:	0800d985 	.word	0x0800d985
 800d908:	0800d985 	.word	0x0800d985
 800d90c:	0800d985 	.word	0x0800d985
 800d910:	0800d969 	.word	0x0800d969
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d922:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fb fe65 	bl	80095f8 <HAL_DMA_Abort_IT>
      break;
 800d92e:	e02a      	b.n	800d986 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68da      	ldr	r2, [r3, #12]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d93e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d944:	4618      	mov	r0, r3
 800d946:	f7fb fe57 	bl	80095f8 <HAL_DMA_Abort_IT>
      break;
 800d94a:	e01c      	b.n	800d986 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68da      	ldr	r2, [r3, #12]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d95a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	4618      	mov	r0, r3
 800d962:	f7fb fe49 	bl	80095f8 <HAL_DMA_Abort_IT>
      break;
 800d966:	e00e      	b.n	800d986 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68da      	ldr	r2, [r3, #12]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d976:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fb fe3b 	bl	80095f8 <HAL_DMA_Abort_IT>
      break;
 800d982:	e000      	b.n	800d986 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 800d984:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6a1a      	ldr	r2, [r3, #32]
 800d98c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d990:	4013      	ands	r3, r2
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10f      	bne.n	800d9b6 <HAL_TIM_IC_Stop_DMA+0xfa>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6a1a      	ldr	r2, [r3, #32]
 800d99c:	f240 4344 	movw	r3, #1092	; 0x444
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d107      	bne.n	800d9b6 <HAL_TIM_IC_Stop_DMA+0xfa>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f022 0201 	bic.w	r2, r2, #1
 800d9b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d104      	bne.n	800d9c6 <HAL_TIM_IC_Stop_DMA+0x10a>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9c4:	e023      	b.n	800da0e <HAL_TIM_IC_Stop_DMA+0x152>
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2b04      	cmp	r3, #4
 800d9ca:	d104      	bne.n	800d9d6 <HAL_TIM_IC_Stop_DMA+0x11a>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9d4:	e01b      	b.n	800da0e <HAL_TIM_IC_Stop_DMA+0x152>
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b08      	cmp	r3, #8
 800d9da:	d104      	bne.n	800d9e6 <HAL_TIM_IC_Stop_DMA+0x12a>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9e4:	e013      	b.n	800da0e <HAL_TIM_IC_Stop_DMA+0x152>
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b0c      	cmp	r3, #12
 800d9ea:	d104      	bne.n	800d9f6 <HAL_TIM_IC_Stop_DMA+0x13a>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d9f4:	e00b      	b.n	800da0e <HAL_TIM_IC_Stop_DMA+0x152>
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b10      	cmp	r3, #16
 800d9fa:	d104      	bne.n	800da06 <HAL_TIM_IC_Stop_DMA+0x14a>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da04:	e003      	b.n	800da0e <HAL_TIM_IC_Stop_DMA+0x152>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d104      	bne.n	800da1e <HAL_TIM_IC_Stop_DMA+0x162>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da1c:	e013      	b.n	800da46 <HAL_TIM_IC_Stop_DMA+0x18a>
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b04      	cmp	r3, #4
 800da22:	d104      	bne.n	800da2e <HAL_TIM_IC_Stop_DMA+0x172>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da2c:	e00b      	b.n	800da46 <HAL_TIM_IC_Stop_DMA+0x18a>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b08      	cmp	r3, #8
 800da32:	d104      	bne.n	800da3e <HAL_TIM_IC_Stop_DMA+0x182>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da3c:	e003      	b.n	800da46 <HAL_TIM_IC_Stop_DMA+0x18a>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b02      	cmp	r3, #2
 800da64:	d122      	bne.n	800daac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0302 	and.w	r3, r3, #2
 800da70:	2b02      	cmp	r3, #2
 800da72:	d11b      	bne.n	800daac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f06f 0202 	mvn.w	r2, #2
 800da7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7f8 fb84 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 800da98:	e005      	b.n	800daa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fa96 	bl	800dfcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa9d 	bl	800dfe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	f003 0304 	and.w	r3, r3, #4
 800dab6:	2b04      	cmp	r3, #4
 800dab8:	d122      	bne.n	800db00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d11b      	bne.n	800db00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f06f 0204 	mvn.w	r2, #4
 800dad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2202      	movs	r2, #2
 800dad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7f8 fb5a 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 800daec:	e005      	b.n	800dafa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fa6c 	bl	800dfcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fa73 	bl	800dfe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	f003 0308 	and.w	r3, r3, #8
 800db0a:	2b08      	cmp	r3, #8
 800db0c:	d122      	bne.n	800db54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	f003 0308 	and.w	r3, r3, #8
 800db18:	2b08      	cmp	r3, #8
 800db1a:	d11b      	bne.n	800db54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f06f 0208 	mvn.w	r2, #8
 800db24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2204      	movs	r2, #4
 800db2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	f003 0303 	and.w	r3, r3, #3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7f8 fb30 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 800db40:	e005      	b.n	800db4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fa42 	bl	800dfcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fa49 	bl	800dfe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	f003 0310 	and.w	r3, r3, #16
 800db5e:	2b10      	cmp	r3, #16
 800db60:	d122      	bne.n	800dba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	f003 0310 	and.w	r3, r3, #16
 800db6c:	2b10      	cmp	r3, #16
 800db6e:	d11b      	bne.n	800dba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f06f 0210 	mvn.w	r2, #16
 800db78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2208      	movs	r2, #8
 800db7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d003      	beq.n	800db96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f8 fb06 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 800db94:	e005      	b.n	800dba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa18 	bl	800dfcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fa1f 	bl	800dfe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d10e      	bne.n	800dbd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d107      	bne.n	800dbd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f06f 0201 	mvn.w	r2, #1
 800dbcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7f7 fde4 	bl	800579c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbde:	2b80      	cmp	r3, #128	; 0x80
 800dbe0:	d10e      	bne.n	800dc00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbec:	2b80      	cmp	r3, #128	; 0x80
 800dbee:	d107      	bne.n	800dc00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fd90 	bl	800e720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc0e:	d10e      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1a:	2b80      	cmp	r3, #128	; 0x80
 800dc1c:	d107      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fd83 	bl	800e734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc38:	2b40      	cmp	r3, #64	; 0x40
 800dc3a:	d10e      	bne.n	800dc5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc46:	2b40      	cmp	r3, #64	; 0x40
 800dc48:	d107      	bne.n	800dc5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f9cd 	bl	800dff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	f003 0320 	and.w	r3, r3, #32
 800dc64:	2b20      	cmp	r3, #32
 800dc66:	d10e      	bne.n	800dc86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b20      	cmp	r3, #32
 800dc74:	d107      	bne.n	800dc86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f06f 0220 	mvn.w	r2, #32
 800dc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fd43 	bl	800e70c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc86:	bf00      	nop
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b084      	sub	sp, #16
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d101      	bne.n	800dca8 <HAL_TIM_IC_ConfigChannel+0x1a>
 800dca4:	2302      	movs	r3, #2
 800dca6:	e082      	b.n	800ddae <HAL_TIM_IC_ConfigChannel+0x120>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d11b      	bne.n	800dcee <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6818      	ldr	r0, [r3, #0]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6819      	ldr	r1, [r3, #0]
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f000 faef 	bl	800e2a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	699a      	ldr	r2, [r3, #24]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f022 020c 	bic.w	r2, r2, #12
 800dcd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6999      	ldr	r1, [r3, #24]
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	689a      	ldr	r2, [r3, #8]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	619a      	str	r2, [r3, #24]
 800dcec:	e05a      	b.n	800dda4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b04      	cmp	r3, #4
 800dcf2:	d11c      	bne.n	800dd2e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	6819      	ldr	r1, [r3, #0]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f000 fb55 	bl	800e3b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	699a      	ldr	r2, [r3, #24]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dd16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6999      	ldr	r1, [r3, #24]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	021a      	lsls	r2, r3, #8
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	619a      	str	r2, [r3, #24]
 800dd2c:	e03a      	b.n	800dda4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b08      	cmp	r3, #8
 800dd32:	d11b      	bne.n	800dd6c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6818      	ldr	r0, [r3, #0]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	6819      	ldr	r1, [r3, #0]
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	f000 fba2 	bl	800e48c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	69da      	ldr	r2, [r3, #28]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f022 020c 	bic.w	r2, r2, #12
 800dd56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	69d9      	ldr	r1, [r3, #28]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	430a      	orrs	r2, r1
 800dd68:	61da      	str	r2, [r3, #28]
 800dd6a:	e01b      	b.n	800dda4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	6819      	ldr	r1, [r3, #0]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	f000 fbc2 	bl	800e504 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	69da      	ldr	r2, [r3, #28]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dd8e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69d9      	ldr	r1, [r3, #28]
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	021a      	lsls	r2, r3, #8
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	430a      	orrs	r2, r1
 800dda2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d101      	bne.n	800ddce <HAL_TIM_ConfigClockSource+0x18>
 800ddca:	2302      	movs	r3, #2
 800ddcc:	e0b5      	b.n	800df3a <HAL_TIM_ConfigClockSource+0x184>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2202      	movs	r2, #2
 800ddda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ddf0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddf8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de0a:	d03e      	beq.n	800de8a <HAL_TIM_ConfigClockSource+0xd4>
 800de0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de10:	f200 8087 	bhi.w	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de18:	f000 8085 	beq.w	800df26 <HAL_TIM_ConfigClockSource+0x170>
 800de1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de20:	d87f      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de22:	2b70      	cmp	r3, #112	; 0x70
 800de24:	d01a      	beq.n	800de5c <HAL_TIM_ConfigClockSource+0xa6>
 800de26:	2b70      	cmp	r3, #112	; 0x70
 800de28:	d87b      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de2a:	2b60      	cmp	r3, #96	; 0x60
 800de2c:	d050      	beq.n	800ded0 <HAL_TIM_ConfigClockSource+0x11a>
 800de2e:	2b60      	cmp	r3, #96	; 0x60
 800de30:	d877      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de32:	2b50      	cmp	r3, #80	; 0x50
 800de34:	d03c      	beq.n	800deb0 <HAL_TIM_ConfigClockSource+0xfa>
 800de36:	2b50      	cmp	r3, #80	; 0x50
 800de38:	d873      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de3a:	2b40      	cmp	r3, #64	; 0x40
 800de3c:	d058      	beq.n	800def0 <HAL_TIM_ConfigClockSource+0x13a>
 800de3e:	2b40      	cmp	r3, #64	; 0x40
 800de40:	d86f      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de42:	2b30      	cmp	r3, #48	; 0x30
 800de44:	d064      	beq.n	800df10 <HAL_TIM_ConfigClockSource+0x15a>
 800de46:	2b30      	cmp	r3, #48	; 0x30
 800de48:	d86b      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	d060      	beq.n	800df10 <HAL_TIM_ConfigClockSource+0x15a>
 800de4e:	2b20      	cmp	r3, #32
 800de50:	d867      	bhi.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d05c      	beq.n	800df10 <HAL_TIM_ConfigClockSource+0x15a>
 800de56:	2b10      	cmp	r3, #16
 800de58:	d05a      	beq.n	800df10 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800de5a:	e062      	b.n	800df22 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	6899      	ldr	r1, [r3, #8]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	f000 fba2 	bl	800e5b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	609a      	str	r2, [r3, #8]
      break;
 800de88:	e04e      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	6899      	ldr	r1, [r3, #8]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	f000 fb8b 	bl	800e5b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	689a      	ldr	r2, [r3, #8]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800deac:	609a      	str	r2, [r3, #8]
      break;
 800deae:	e03b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	6859      	ldr	r1, [r3, #4]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	461a      	mov	r2, r3
 800debe:	f000 fa49 	bl	800e354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2150      	movs	r1, #80	; 0x50
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 fb58 	bl	800e57e <TIM_ITRx_SetConfig>
      break;
 800dece:	e02b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6818      	ldr	r0, [r3, #0]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	6859      	ldr	r1, [r3, #4]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	461a      	mov	r2, r3
 800dede:	f000 faa5 	bl	800e42c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2160      	movs	r1, #96	; 0x60
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 fb48 	bl	800e57e <TIM_ITRx_SetConfig>
      break;
 800deee:	e01b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6818      	ldr	r0, [r3, #0]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	6859      	ldr	r1, [r3, #4]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	461a      	mov	r2, r3
 800defe:	f000 fa29 	bl	800e354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2140      	movs	r1, #64	; 0x40
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 fb38 	bl	800e57e <TIM_ITRx_SetConfig>
      break;
 800df0e:	e00b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4619      	mov	r1, r3
 800df1a:	4610      	mov	r0, r2
 800df1c:	f000 fb2f 	bl	800e57e <TIM_ITRx_SetConfig>
        break;
 800df20:	e002      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800df22:	bf00      	nop
 800df24:	e000      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800df26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b0c      	cmp	r3, #12
 800df56:	d831      	bhi.n	800dfbc <HAL_TIM_ReadCapturedValue+0x78>
 800df58:	a201      	add	r2, pc, #4	; (adr r2, 800df60 <HAL_TIM_ReadCapturedValue+0x1c>)
 800df5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5e:	bf00      	nop
 800df60:	0800df95 	.word	0x0800df95
 800df64:	0800dfbd 	.word	0x0800dfbd
 800df68:	0800dfbd 	.word	0x0800dfbd
 800df6c:	0800dfbd 	.word	0x0800dfbd
 800df70:	0800df9f 	.word	0x0800df9f
 800df74:	0800dfbd 	.word	0x0800dfbd
 800df78:	0800dfbd 	.word	0x0800dfbd
 800df7c:	0800dfbd 	.word	0x0800dfbd
 800df80:	0800dfa9 	.word	0x0800dfa9
 800df84:	0800dfbd 	.word	0x0800dfbd
 800df88:	0800dfbd 	.word	0x0800dfbd
 800df8c:	0800dfbd 	.word	0x0800dfbd
 800df90:	0800dfb3 	.word	0x0800dfb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	60fb      	str	r3, [r7, #12]

      break;
 800df9c:	e00f      	b.n	800dfbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	60fb      	str	r3, [r7, #12]

      break;
 800dfa6:	e00a      	b.n	800dfbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfae:	60fb      	str	r3, [r7, #12]

      break;
 800dfb0:	e005      	b.n	800dfbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb8:	60fb      	str	r3, [r7, #12]

      break;
 800dfba:	e000      	b.n	800dfbe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800dfbc:	bf00      	nop
  }

  return tmpreg;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e028:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d107      	bne.n	800e044 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2201      	movs	r2, #1
 800e038:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e042:	e02a      	b.n	800e09a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d107      	bne.n	800e05e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2202      	movs	r2, #2
 800e052:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e05c:	e01d      	b.n	800e09a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	d107      	bne.n	800e078 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2204      	movs	r2, #4
 800e06c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2201      	movs	r2, #1
 800e072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e076:	e010      	b.n	800e09a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d107      	bne.n	800e092 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2208      	movs	r2, #8
 800e086:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e090:	e003      	b.n	800e09a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f7ff ffb4 	bl	800e008 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	771a      	strb	r2, [r3, #28]
}
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b084      	sub	sp, #16
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d10f      	bne.n	800e0e6 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d146      	bne.n	800e162 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0e4:	e03d      	b.n	800e162 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d10f      	bne.n	800e110 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d131      	bne.n	800e162 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e10e:	e028      	b.n	800e162 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	429a      	cmp	r2, r3
 800e118:	d10f      	bne.n	800e13a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2204      	movs	r2, #4
 800e11e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d11c      	bne.n	800e162 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e138:	e013      	b.n	800e162 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	429a      	cmp	r2, r3
 800e142:	d10e      	bne.n	800e162 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2208      	movs	r2, #8
 800e148:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d107      	bne.n	800e162 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7f8 f81c 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	771a      	strb	r2, [r3, #28]
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d103      	bne.n	800e196 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2201      	movs	r2, #1
 800e192:	771a      	strb	r2, [r3, #28]
 800e194:	e019      	b.n	800e1ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d103      	bne.n	800e1a8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	771a      	strb	r2, [r3, #28]
 800e1a6:	e010      	b.n	800e1ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d103      	bne.n	800e1ba <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2204      	movs	r2, #4
 800e1b6:	771a      	strb	r2, [r3, #28]
 800e1b8:	e007      	b.n	800e1ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d102      	bne.n	800e1ca <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2208      	movs	r2, #8
 800e1c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7f7 ff8c 	bl	80060e8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	771a      	strb	r2, [r3, #28]
}
 800e1d6:	bf00      	nop
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a2a      	ldr	r2, [pc, #168]	; (800e29c <TIM_Base_SetConfig+0xbc>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d003      	beq.n	800e200 <TIM_Base_SetConfig+0x20>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1fe:	d108      	bne.n	800e212 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	4313      	orrs	r3, r2
 800e210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a21      	ldr	r2, [pc, #132]	; (800e29c <TIM_Base_SetConfig+0xbc>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d00b      	beq.n	800e232 <TIM_Base_SetConfig+0x52>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e220:	d007      	beq.n	800e232 <TIM_Base_SetConfig+0x52>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a1e      	ldr	r2, [pc, #120]	; (800e2a0 <TIM_Base_SetConfig+0xc0>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d003      	beq.n	800e232 <TIM_Base_SetConfig+0x52>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4a1d      	ldr	r2, [pc, #116]	; (800e2a4 <TIM_Base_SetConfig+0xc4>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d108      	bne.n	800e244 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	4313      	orrs	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	4313      	orrs	r3, r2
 800e250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	689a      	ldr	r2, [r3, #8]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4a0c      	ldr	r2, [pc, #48]	; (800e29c <TIM_Base_SetConfig+0xbc>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d007      	beq.n	800e280 <TIM_Base_SetConfig+0xa0>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4a0b      	ldr	r2, [pc, #44]	; (800e2a0 <TIM_Base_SetConfig+0xc0>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d003      	beq.n	800e280 <TIM_Base_SetConfig+0xa0>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a0a      	ldr	r2, [pc, #40]	; (800e2a4 <TIM_Base_SetConfig+0xc4>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d103      	bne.n	800e288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	691a      	ldr	r2, [r3, #16]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	615a      	str	r2, [r3, #20]
}
 800e28e:	bf00      	nop
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	40012c00 	.word	0x40012c00
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	40014400 	.word	0x40014400

0800e2a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	f023 0201 	bic.w	r2, r3, #1
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <TIM_TI1_SetConfig+0xa4>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d007      	beq.n	800e2e6 <TIM_TI1_SetConfig+0x3e>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2dc:	d003      	beq.n	800e2e6 <TIM_TI1_SetConfig+0x3e>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4a1b      	ldr	r2, [pc, #108]	; (800e350 <TIM_TI1_SetConfig+0xa8>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d101      	bne.n	800e2ea <TIM_TI1_SetConfig+0x42>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e000      	b.n	800e2ec <TIM_TI1_SetConfig+0x44>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d008      	beq.n	800e302 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f023 0303 	bic.w	r3, r3, #3
 800e2f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	617b      	str	r3, [r7, #20]
 800e300:	e003      	b.n	800e30a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	011b      	lsls	r3, r3, #4
 800e316:	b2db      	uxtb	r3, r3
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f023 030a 	bic.w	r3, r3, #10
 800e324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	f003 030a 	and.w	r3, r3, #10
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	4313      	orrs	r3, r2
 800e330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	697a      	ldr	r2, [r7, #20]
 800e336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	621a      	str	r2, [r3, #32]
}
 800e33e:	bf00      	nop
 800e340:	371c      	adds	r7, #28
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	40012c00 	.word	0x40012c00
 800e350:	40014000 	.word	0x40014000

0800e354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e354:	b480      	push	{r7}
 800e356:	b087      	sub	sp, #28
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6a1b      	ldr	r3, [r3, #32]
 800e364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6a1b      	ldr	r3, [r3, #32]
 800e36a:	f023 0201 	bic.w	r2, r3, #1
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e37e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	011b      	lsls	r3, r3, #4
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	4313      	orrs	r3, r2
 800e388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	f023 030a 	bic.w	r3, r3, #10
 800e390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e392:	697a      	ldr	r2, [r7, #20]
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	4313      	orrs	r3, r2
 800e398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	693a      	ldr	r2, [r7, #16]
 800e39e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	621a      	str	r2, [r3, #32]
}
 800e3a6:	bf00      	nop
 800e3a8:	371c      	adds	r7, #28
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr

0800e3b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e3b2:	b480      	push	{r7}
 800e3b4:	b087      	sub	sp, #28
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
 800e3be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6a1b      	ldr	r3, [r3, #32]
 800e3c4:	f023 0210 	bic.w	r2, r3, #16
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	021b      	lsls	r3, r3, #8
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	031b      	lsls	r3, r3, #12
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e404:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	4313      	orrs	r3, r2
 800e412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	621a      	str	r2, [r3, #32]
}
 800e420:	bf00      	nop
 800e422:	371c      	adds	r7, #28
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b087      	sub	sp, #28
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	f023 0210 	bic.w	r2, r3, #16
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	031b      	lsls	r3, r3, #12
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	4313      	orrs	r3, r2
 800e460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e468:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	011b      	lsls	r3, r3, #4
 800e46e:	693a      	ldr	r2, [r7, #16]
 800e470:	4313      	orrs	r3, r2
 800e472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	621a      	str	r2, [r3, #32]
}
 800e480:	bf00      	nop
 800e482:	371c      	adds	r7, #28
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b087      	sub	sp, #28
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6a1b      	ldr	r3, [r3, #32]
 800e4b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f023 0303 	bic.w	r3, r3, #3
 800e4b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	011b      	lsls	r3, r3, #4
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	697a      	ldr	r2, [r7, #20]
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e4dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	621a      	str	r2, [r3, #32]
}
 800e4f8:	bf00      	nop
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6a1b      	ldr	r3, [r3, #32]
 800e528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	021b      	lsls	r3, r3, #8
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	4313      	orrs	r3, r2
 800e53a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e542:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	031b      	lsls	r3, r3, #12
 800e548:	b29b      	uxth	r3, r3
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e556:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	031b      	lsls	r3, r3, #12
 800e55c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e560:	693a      	ldr	r2, [r7, #16]
 800e562:	4313      	orrs	r3, r2
 800e564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	621a      	str	r2, [r3, #32]
}
 800e572:	bf00      	nop
 800e574:	371c      	adds	r7, #28
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e57e:	b480      	push	{r7}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	f043 0307 	orr.w	r3, r3, #7
 800e5a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	609a      	str	r2, [r3, #8]
}
 800e5a8:	bf00      	nop
 800e5aa:	3714      	adds	r7, #20
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e5ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	021a      	lsls	r2, r3, #8
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	609a      	str	r2, [r3, #8]
}
 800e5e8:	bf00      	nop
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	f003 031f 	and.w	r3, r3, #31
 800e606:	2201      	movs	r2, #1
 800e608:	fa02 f303 	lsl.w	r3, r2, r3
 800e60c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6a1a      	ldr	r2, [r3, #32]
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	43db      	mvns	r3, r3
 800e616:	401a      	ands	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6a1a      	ldr	r2, [r3, #32]
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	f003 031f 	and.w	r3, r3, #31
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	fa01 f303 	lsl.w	r3, r1, r3
 800e62c:	431a      	orrs	r2, r3
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	621a      	str	r2, [r3, #32]
}
 800e632:	bf00      	nop
 800e634:	371c      	adds	r7, #28
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e650:	2b01      	cmp	r3, #1
 800e652:	d101      	bne.n	800e658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e654:	2302      	movs	r3, #2
 800e656:	e04f      	b.n	800e6f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2202      	movs	r2, #2
 800e664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a21      	ldr	r2, [pc, #132]	; (800e704 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d108      	bne.n	800e694 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e688:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	4313      	orrs	r3, r2
 800e692:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a14      	ldr	r2, [pc, #80]	; (800e704 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d009      	beq.n	800e6cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6c0:	d004      	beq.n	800e6cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a10      	ldr	r2, [pc, #64]	; (800e708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d10c      	bne.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr
 800e704:	40012c00 	.word	0x40012c00
 800e708:	40014000 	.word	0x40014000

0800e70c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e040      	b.n	800e7dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d106      	bne.n	800e770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7f7 ff3a 	bl	80065e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2224      	movs	r2, #36	; 0x24
 800e774:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f022 0201 	bic.w	r2, r2, #1
 800e784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fc38 	bl	800effc <UART_SetConfig>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d101      	bne.n	800e796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e022      	b.n	800e7dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fe38 	bl	800f414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685a      	ldr	r2, [r3, #4]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	689a      	ldr	r2, [r3, #8]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f042 0201 	orr.w	r2, r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 febf 	bl	800f558 <UART_CheckIdleState>
 800e7da:	4603      	mov	r3, r0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e02b      	b.n	800e84e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2224      	movs	r2, #36	; 0x24
 800e7fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f022 0201 	bic.w	r2, r2, #1
 800e80a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2200      	movs	r2, #0
 800e81a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2200      	movs	r2, #0
 800e822:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7f7 ffa1 	bl	800676c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	4613      	mov	r3, r2
 800e864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e86a:	2b20      	cmp	r3, #32
 800e86c:	d145      	bne.n	800e8fa <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <HAL_UART_Transmit_IT+0x22>
 800e874:	88fb      	ldrh	r3, [r7, #6]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e03e      	b.n	800e8fc <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e884:	2b01      	cmp	r3, #1
 800e886:	d101      	bne.n	800e88c <HAL_UART_Transmit_IT+0x34>
 800e888:	2302      	movs	r3, #2
 800e88a:	e037      	b.n	800e8fc <HAL_UART_Transmit_IT+0xa4>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	88fa      	ldrh	r2, [r7, #6]
 800e89e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	88fa      	ldrh	r2, [r7, #6]
 800e8a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2221      	movs	r2, #33	; 0x21
 800e8bc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c6:	d107      	bne.n	800e8d8 <HAL_UART_Transmit_IT+0x80>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d103      	bne.n	800e8d8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4a0d      	ldr	r2, [pc, #52]	; (800e908 <HAL_UART_Transmit_IT+0xb0>)
 800e8d4:	669a      	str	r2, [r3, #104]	; 0x68
 800e8d6:	e002      	b.n	800e8de <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4a0c      	ldr	r2, [pc, #48]	; (800e90c <HAL_UART_Transmit_IT+0xb4>)
 800e8dc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e8f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e000      	b.n	800e8fc <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800e8fa:	2302      	movs	r3, #2
  }
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	0800f969 	.word	0x0800f969
 800e90c:	0800f8f5 	.word	0x0800f8f5

0800e910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	4613      	mov	r3, r2
 800e91c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e922:	2b20      	cmp	r3, #32
 800e924:	d131      	bne.n	800e98a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <HAL_UART_Receive_IT+0x22>
 800e92c:	88fb      	ldrh	r3, [r7, #6]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d101      	bne.n	800e936 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	e02a      	b.n	800e98c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d101      	bne.n	800e944 <HAL_UART_Receive_IT+0x34>
 800e940:	2302      	movs	r3, #2
 800e942:	e023      	b.n	800e98c <HAL_UART_Receive_IT+0x7c>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a0f      	ldr	r2, [pc, #60]	; (800e994 <HAL_UART_Receive_IT+0x84>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00e      	beq.n	800e97a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d007      	beq.n	800e97a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e978:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800e97a:	88fb      	ldrh	r3, [r7, #6]
 800e97c:	461a      	mov	r2, r3
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 feaf 	bl	800f6e4 <UART_Start_Receive_IT>
 800e986:	4603      	mov	r3, r0
 800e988:	e000      	b.n	800e98c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800e98a:	2302      	movs	r3, #2
  }
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	40008000 	.word	0x40008000

0800e998 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e9ae:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ba:	2b80      	cmp	r3, #128	; 0x80
 800e9bc:	d12d      	bne.n	800ea1a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9cc:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d013      	beq.n	800e9fe <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9da:	4a19      	ldr	r2, [pc, #100]	; (800ea40 <HAL_UART_AbortTransmit_IT+0xa8>)
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fa fe08 	bl	80095f8 <HAL_DMA_Abort_IT>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d022      	beq.n	800ea34 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	4798      	blx	r3
 800e9fc:	e01a      	b.n	800ea34 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2220      	movs	r2, #32
 800ea10:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 fa9a 	bl	800ef4c <HAL_UART_AbortTransmitCpltCallback>
 800ea18:	e00c      	b.n	800ea34 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2220      	movs	r2, #32
 800ea2c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fa8c 	bl	800ef4c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	0800f87f 	.word	0x0800f87f

0800ea44 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	689a      	ldr	r2, [r3, #8]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f022 0201 	bic.w	r2, r2, #1
 800ea6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d107      	bne.n	800ea84 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f022 0210 	bic.w	r2, r2, #16
 800ea82:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea8e:	2b40      	cmp	r3, #64	; 0x40
 800ea90:	d13e      	bne.n	800eb10 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	689a      	ldr	r2, [r3, #8]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaa0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d013      	beq.n	800ead2 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaae:	4a25      	ldr	r2, [pc, #148]	; (800eb44 <HAL_UART_AbortReceive_IT+0x100>)
 800eab0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fa fd9e 	bl	80095f8 <HAL_DMA_Abort_IT>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d03a      	beq.n	800eb38 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800eacc:	4610      	mov	r0, r2
 800eace:	4798      	blx	r3
 800ead0:	e032      	b.n	800eb38 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	220f      	movs	r2, #15
 800eae6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	8b1b      	ldrh	r3, [r3, #24]
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f042 0208 	orr.w	r2, r2, #8
 800eaf8:	b292      	uxth	r2, r2
 800eafa:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2220      	movs	r2, #32
 800eb00:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fa29 	bl	800ef60 <HAL_UART_AbortReceiveCpltCallback>
 800eb0e:	e013      	b.n	800eb38 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	220f      	movs	r2, #15
 800eb24:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2220      	movs	r2, #32
 800eb2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fa14 	bl	800ef60 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3708      	adds	r7, #8
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	0800f8a9 	.word	0x0800f8a9

0800eb48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b088      	sub	sp, #32
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb68:	69fa      	ldr	r2, [r7, #28]
 800eb6a:	f640 030f 	movw	r3, #2063	; 0x80f
 800eb6e:	4013      	ands	r3, r2
 800eb70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d113      	bne.n	800eba0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	f003 0320 	and.w	r3, r3, #32
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00e      	beq.n	800eba0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d009      	beq.n	800eba0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 81ce 	beq.w	800ef32 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	4798      	blx	r3
      }
      return;
 800eb9e:	e1c8      	b.n	800ef32 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80e3 	beq.w	800ed6e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d105      	bne.n	800ebbe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	4ba6      	ldr	r3, [pc, #664]	; (800ee50 <HAL_UART_IRQHandler+0x308>)
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 80d8 	beq.w	800ed6e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d010      	beq.n	800ebea <HAL_UART_IRQHandler+0xa2>
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00b      	beq.n	800ebea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebe0:	f043 0201 	orr.w	r2, r3, #1
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d010      	beq.n	800ec16 <HAL_UART_IRQHandler+0xce>
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00b      	beq.n	800ec16 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2202      	movs	r2, #2
 800ec04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec0c:	f043 0204 	orr.w	r2, r3, #4
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	f003 0304 	and.w	r3, r3, #4
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d010      	beq.n	800ec42 <HAL_UART_IRQHandler+0xfa>
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f003 0301 	and.w	r3, r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00b      	beq.n	800ec42 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2204      	movs	r2, #4
 800ec30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec38:	f043 0202 	orr.w	r2, r3, #2
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	f003 0308 	and.w	r3, r3, #8
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d015      	beq.n	800ec78 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f003 0320 	and.w	r3, r3, #32
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d104      	bne.n	800ec60 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00b      	beq.n	800ec78 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2208      	movs	r2, #8
 800ec66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec6e:	f043 0208 	orr.w	r2, r3, #8
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d011      	beq.n	800eca6 <HAL_UART_IRQHandler+0x15e>
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00c      	beq.n	800eca6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec9c:	f043 0220 	orr.w	r2, r3, #32
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 8142 	beq.w	800ef36 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	f003 0320 	and.w	r3, r3, #32
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00c      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	f003 0320 	and.w	r3, r3, #32
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecdc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece8:	2b40      	cmp	r3, #64	; 0x40
 800ecea:	d004      	beq.n	800ecf6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d031      	beq.n	800ed5a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 fd7c 	bl	800f7f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed06:	2b40      	cmp	r3, #64	; 0x40
 800ed08:	d123      	bne.n	800ed52 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689a      	ldr	r2, [r3, #8]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed18:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d013      	beq.n	800ed4a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed26:	4a4b      	ldr	r2, [pc, #300]	; (800ee54 <HAL_UART_IRQHandler+0x30c>)
 800ed28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fa fc62 	bl	80095f8 <HAL_DMA_Abort_IT>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d017      	beq.n	800ed6a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ed44:	4610      	mov	r0, r2
 800ed46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed48:	e00f      	b.n	800ed6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7f7 fb82 	bl	8006454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed50:	e00b      	b.n	800ed6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7f7 fb7e 	bl	8006454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed58:	e007      	b.n	800ed6a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7f7 fb7a 	bl	8006454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ed68:	e0e5      	b.n	800ef36 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed6a:	bf00      	nop
    return;
 800ed6c:	e0e3      	b.n	800ef36 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	f040 80a9 	bne.w	800eeca <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	f003 0310 	and.w	r3, r3, #16
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 80a3 	beq.w	800eeca <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	f003 0310 	and.w	r3, r3, #16
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 809d 	beq.w	800eeca <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2210      	movs	r2, #16
 800ed96:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda2:	2b40      	cmp	r3, #64	; 0x40
 800eda4:	d158      	bne.n	800ee58 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800edb0:	893b      	ldrh	r3, [r7, #8]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f000 80c1 	beq.w	800ef3a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800edbe:	893a      	ldrh	r2, [r7, #8]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	f080 80ba 	bcs.w	800ef3a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	893a      	ldrh	r2, [r7, #8]
 800edca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f003 0320 	and.w	r3, r3, #32
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d12a      	bne.n	800ee34 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800edec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f022 0201 	bic.w	r2, r2, #1
 800edfc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	689a      	ldr	r2, [r3, #8]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee0c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2220      	movs	r2, #32
 800ee12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f022 0210 	bic.w	r2, r2, #16
 800ee28:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fa fba4 	bl	800957c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f893 	bl	800ef74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ee4e:	e074      	b.n	800ef3a <HAL_UART_IRQHandler+0x3f2>
 800ee50:	04000120 	.word	0x04000120
 800ee54:	0800f853 	.word	0x0800f853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d063      	beq.n	800ef3e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800ee76:	897b      	ldrh	r3, [r7, #10]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d060      	beq.n	800ef3e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689a      	ldr	r2, [r3, #8]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f022 0201 	bic.w	r2, r2, #1
 800ee9a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2220      	movs	r2, #32
 800eea0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0210 	bic.w	r2, r2, #16
 800eebc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eebe:	897b      	ldrh	r3, [r7, #10]
 800eec0:	4619      	mov	r1, r3
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f856 	bl	800ef74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800eec8:	e039      	b.n	800ef3e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00d      	beq.n	800eef0 <HAL_UART_IRQHandler+0x3a8>
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d008      	beq.n	800eef0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fe6c 	bl	800fbc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eeee:	e029      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00d      	beq.n	800ef16 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d008      	beq.n	800ef16 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d01a      	beq.n	800ef42 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	4798      	blx	r3
    }
    return;
 800ef14:	e015      	b.n	800ef42 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d011      	beq.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00c      	beq.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fd5a 	bl	800f9e4 <UART_EndTransmit_IT>
    return;
 800ef30:	e008      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ef32:	bf00      	nop
 800ef34:	e006      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
    return;
 800ef36:	bf00      	nop
 800ef38:	e004      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ef3a:	bf00      	nop
 800ef3c:	e002      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ef3e:	bf00      	nop
 800ef40:	e000      	b.n	800ef44 <HAL_UART_IRQHandler+0x3fc>
    return;
 800ef42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ef44:	3720      	adds	r7, #32
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop

0800ef4c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d024      	beq.n	800efe8 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efa2:	2b20      	cmp	r3, #32
 800efa4:	d11e      	bne.n	800efe4 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800efac:	2b01      	cmp	r3, #1
 800efae:	d101      	bne.n	800efb4 <HAL_UART_EnableReceiverTimeout+0x28>
 800efb0:	2302      	movs	r3, #2
 800efb2:	e01a      	b.n	800efea <HAL_UART_EnableReceiverTimeout+0x5e>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2224      	movs	r2, #36	; 0x24
 800efc0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	685a      	ldr	r2, [r3, #4]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800efd0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2220      	movs	r2, #32
 800efd6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	e002      	b.n	800efea <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800efe4:	2302      	movs	r3, #2
 800efe6:	e000      	b.n	800efea <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800efe8:	2301      	movs	r3, #1
  }
}
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	40008000 	.word	0x40008000

0800effc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800effc:	b5b0      	push	{r4, r5, r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	689a      	ldr	r2, [r3, #8]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	431a      	orrs	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	695b      	ldr	r3, [r3, #20]
 800f016:	431a      	orrs	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	69db      	ldr	r3, [r3, #28]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	4baf      	ldr	r3, [pc, #700]	; (800f2e4 <UART_SetConfig+0x2e8>)
 800f028:	4013      	ands	r3, r2
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	6812      	ldr	r2, [r2, #0]
 800f02e:	69f9      	ldr	r1, [r7, #28]
 800f030:	430b      	orrs	r3, r1
 800f032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	430a      	orrs	r2, r1
 800f048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4aa4      	ldr	r2, [pc, #656]	; (800f2e8 <UART_SetConfig+0x2ec>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d004      	beq.n	800f064 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	4313      	orrs	r3, r2
 800f062:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	430a      	orrs	r2, r1
 800f076:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a9b      	ldr	r2, [pc, #620]	; (800f2ec <UART_SetConfig+0x2f0>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d121      	bne.n	800f0c6 <UART_SetConfig+0xca>
 800f082:	4b9b      	ldr	r3, [pc, #620]	; (800f2f0 <UART_SetConfig+0x2f4>)
 800f084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f088:	f003 0303 	and.w	r3, r3, #3
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d817      	bhi.n	800f0c0 <UART_SetConfig+0xc4>
 800f090:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <UART_SetConfig+0x9c>)
 800f092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f096:	bf00      	nop
 800f098:	0800f0a9 	.word	0x0800f0a9
 800f09c:	0800f0b5 	.word	0x0800f0b5
 800f0a0:	0800f0af 	.word	0x0800f0af
 800f0a4:	0800f0bb 	.word	0x0800f0bb
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	76fb      	strb	r3, [r7, #27]
 800f0ac:	e070      	b.n	800f190 <UART_SetConfig+0x194>
 800f0ae:	2302      	movs	r3, #2
 800f0b0:	76fb      	strb	r3, [r7, #27]
 800f0b2:	e06d      	b.n	800f190 <UART_SetConfig+0x194>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	76fb      	strb	r3, [r7, #27]
 800f0b8:	e06a      	b.n	800f190 <UART_SetConfig+0x194>
 800f0ba:	2308      	movs	r3, #8
 800f0bc:	76fb      	strb	r3, [r7, #27]
 800f0be:	e067      	b.n	800f190 <UART_SetConfig+0x194>
 800f0c0:	2310      	movs	r3, #16
 800f0c2:	76fb      	strb	r3, [r7, #27]
 800f0c4:	e064      	b.n	800f190 <UART_SetConfig+0x194>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a8a      	ldr	r2, [pc, #552]	; (800f2f4 <UART_SetConfig+0x2f8>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d132      	bne.n	800f136 <UART_SetConfig+0x13a>
 800f0d0:	4b87      	ldr	r3, [pc, #540]	; (800f2f0 <UART_SetConfig+0x2f4>)
 800f0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0d6:	f003 030c 	and.w	r3, r3, #12
 800f0da:	2b0c      	cmp	r3, #12
 800f0dc:	d828      	bhi.n	800f130 <UART_SetConfig+0x134>
 800f0de:	a201      	add	r2, pc, #4	; (adr r2, 800f0e4 <UART_SetConfig+0xe8>)
 800f0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e4:	0800f119 	.word	0x0800f119
 800f0e8:	0800f131 	.word	0x0800f131
 800f0ec:	0800f131 	.word	0x0800f131
 800f0f0:	0800f131 	.word	0x0800f131
 800f0f4:	0800f125 	.word	0x0800f125
 800f0f8:	0800f131 	.word	0x0800f131
 800f0fc:	0800f131 	.word	0x0800f131
 800f100:	0800f131 	.word	0x0800f131
 800f104:	0800f11f 	.word	0x0800f11f
 800f108:	0800f131 	.word	0x0800f131
 800f10c:	0800f131 	.word	0x0800f131
 800f110:	0800f131 	.word	0x0800f131
 800f114:	0800f12b 	.word	0x0800f12b
 800f118:	2300      	movs	r3, #0
 800f11a:	76fb      	strb	r3, [r7, #27]
 800f11c:	e038      	b.n	800f190 <UART_SetConfig+0x194>
 800f11e:	2302      	movs	r3, #2
 800f120:	76fb      	strb	r3, [r7, #27]
 800f122:	e035      	b.n	800f190 <UART_SetConfig+0x194>
 800f124:	2304      	movs	r3, #4
 800f126:	76fb      	strb	r3, [r7, #27]
 800f128:	e032      	b.n	800f190 <UART_SetConfig+0x194>
 800f12a:	2308      	movs	r3, #8
 800f12c:	76fb      	strb	r3, [r7, #27]
 800f12e:	e02f      	b.n	800f190 <UART_SetConfig+0x194>
 800f130:	2310      	movs	r3, #16
 800f132:	76fb      	strb	r3, [r7, #27]
 800f134:	e02c      	b.n	800f190 <UART_SetConfig+0x194>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a6b      	ldr	r2, [pc, #428]	; (800f2e8 <UART_SetConfig+0x2ec>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d125      	bne.n	800f18c <UART_SetConfig+0x190>
 800f140:	4b6b      	ldr	r3, [pc, #428]	; (800f2f0 <UART_SetConfig+0x2f4>)
 800f142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f146:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f14a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f14e:	d017      	beq.n	800f180 <UART_SetConfig+0x184>
 800f150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f154:	d817      	bhi.n	800f186 <UART_SetConfig+0x18a>
 800f156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f15a:	d00b      	beq.n	800f174 <UART_SetConfig+0x178>
 800f15c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f160:	d811      	bhi.n	800f186 <UART_SetConfig+0x18a>
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <UART_SetConfig+0x172>
 800f166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f16a:	d006      	beq.n	800f17a <UART_SetConfig+0x17e>
 800f16c:	e00b      	b.n	800f186 <UART_SetConfig+0x18a>
 800f16e:	2300      	movs	r3, #0
 800f170:	76fb      	strb	r3, [r7, #27]
 800f172:	e00d      	b.n	800f190 <UART_SetConfig+0x194>
 800f174:	2302      	movs	r3, #2
 800f176:	76fb      	strb	r3, [r7, #27]
 800f178:	e00a      	b.n	800f190 <UART_SetConfig+0x194>
 800f17a:	2304      	movs	r3, #4
 800f17c:	76fb      	strb	r3, [r7, #27]
 800f17e:	e007      	b.n	800f190 <UART_SetConfig+0x194>
 800f180:	2308      	movs	r3, #8
 800f182:	76fb      	strb	r3, [r7, #27]
 800f184:	e004      	b.n	800f190 <UART_SetConfig+0x194>
 800f186:	2310      	movs	r3, #16
 800f188:	76fb      	strb	r3, [r7, #27]
 800f18a:	e001      	b.n	800f190 <UART_SetConfig+0x194>
 800f18c:	2310      	movs	r3, #16
 800f18e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a54      	ldr	r2, [pc, #336]	; (800f2e8 <UART_SetConfig+0x2ec>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d173      	bne.n	800f282 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f19a:	7efb      	ldrb	r3, [r7, #27]
 800f19c:	2b08      	cmp	r3, #8
 800f19e:	d824      	bhi.n	800f1ea <UART_SetConfig+0x1ee>
 800f1a0:	a201      	add	r2, pc, #4	; (adr r2, 800f1a8 <UART_SetConfig+0x1ac>)
 800f1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a6:	bf00      	nop
 800f1a8:	0800f1cd 	.word	0x0800f1cd
 800f1ac:	0800f1eb 	.word	0x0800f1eb
 800f1b0:	0800f1d5 	.word	0x0800f1d5
 800f1b4:	0800f1eb 	.word	0x0800f1eb
 800f1b8:	0800f1db 	.word	0x0800f1db
 800f1bc:	0800f1eb 	.word	0x0800f1eb
 800f1c0:	0800f1eb 	.word	0x0800f1eb
 800f1c4:	0800f1eb 	.word	0x0800f1eb
 800f1c8:	0800f1e3 	.word	0x0800f1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1cc:	f7fd fa3e 	bl	800c64c <HAL_RCC_GetPCLK1Freq>
 800f1d0:	6178      	str	r0, [r7, #20]
        break;
 800f1d2:	e00f      	b.n	800f1f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1d4:	4b48      	ldr	r3, [pc, #288]	; (800f2f8 <UART_SetConfig+0x2fc>)
 800f1d6:	617b      	str	r3, [r7, #20]
        break;
 800f1d8:	e00c      	b.n	800f1f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1da:	f7fd f99f 	bl	800c51c <HAL_RCC_GetSysClockFreq>
 800f1de:	6178      	str	r0, [r7, #20]
        break;
 800f1e0:	e008      	b.n	800f1f4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1e6:	617b      	str	r3, [r7, #20]
        break;
 800f1e8:	e004      	b.n	800f1f4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	76bb      	strb	r3, [r7, #26]
        break;
 800f1f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 80fe 	beq.w	800f3f8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	4613      	mov	r3, r2
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	4413      	add	r3, r2
 800f206:	697a      	ldr	r2, [r7, #20]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d305      	bcc.n	800f218 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f212:	697a      	ldr	r2, [r7, #20]
 800f214:	429a      	cmp	r2, r3
 800f216:	d902      	bls.n	800f21e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800f218:	2301      	movs	r3, #1
 800f21a:	76bb      	strb	r3, [r7, #26]
 800f21c:	e0ec      	b.n	800f3f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	4618      	mov	r0, r3
 800f222:	f04f 0100 	mov.w	r1, #0
 800f226:	f04f 0200 	mov.w	r2, #0
 800f22a:	f04f 0300 	mov.w	r3, #0
 800f22e:	020b      	lsls	r3, r1, #8
 800f230:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f234:	0202      	lsls	r2, r0, #8
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	6849      	ldr	r1, [r1, #4]
 800f23a:	0849      	lsrs	r1, r1, #1
 800f23c:	4608      	mov	r0, r1
 800f23e:	f04f 0100 	mov.w	r1, #0
 800f242:	1814      	adds	r4, r2, r0
 800f244:	eb43 0501 	adc.w	r5, r3, r1
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	461a      	mov	r2, r3
 800f24e:	f04f 0300 	mov.w	r3, #0
 800f252:	4620      	mov	r0, r4
 800f254:	4629      	mov	r1, r5
 800f256:	f7f1 fd27 	bl	8000ca8 <__aeabi_uldivmod>
 800f25a:	4602      	mov	r2, r0
 800f25c:	460b      	mov	r3, r1
 800f25e:	4613      	mov	r3, r2
 800f260:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f268:	d308      	bcc.n	800f27c <UART_SetConfig+0x280>
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f270:	d204      	bcs.n	800f27c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	60da      	str	r2, [r3, #12]
 800f27a:	e0bd      	b.n	800f3f8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	76bb      	strb	r3, [r7, #26]
 800f280:	e0ba      	b.n	800f3f8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	69db      	ldr	r3, [r3, #28]
 800f286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f28a:	d168      	bne.n	800f35e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800f28c:	7efb      	ldrb	r3, [r7, #27]
 800f28e:	2b08      	cmp	r3, #8
 800f290:	d834      	bhi.n	800f2fc <UART_SetConfig+0x300>
 800f292:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <UART_SetConfig+0x29c>)
 800f294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f298:	0800f2bd 	.word	0x0800f2bd
 800f29c:	0800f2c5 	.word	0x0800f2c5
 800f2a0:	0800f2cd 	.word	0x0800f2cd
 800f2a4:	0800f2fd 	.word	0x0800f2fd
 800f2a8:	0800f2d3 	.word	0x0800f2d3
 800f2ac:	0800f2fd 	.word	0x0800f2fd
 800f2b0:	0800f2fd 	.word	0x0800f2fd
 800f2b4:	0800f2fd 	.word	0x0800f2fd
 800f2b8:	0800f2db 	.word	0x0800f2db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2bc:	f7fd f9c6 	bl	800c64c <HAL_RCC_GetPCLK1Freq>
 800f2c0:	6178      	str	r0, [r7, #20]
        break;
 800f2c2:	e020      	b.n	800f306 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2c4:	f7fd f9d8 	bl	800c678 <HAL_RCC_GetPCLK2Freq>
 800f2c8:	6178      	str	r0, [r7, #20]
        break;
 800f2ca:	e01c      	b.n	800f306 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <UART_SetConfig+0x2fc>)
 800f2ce:	617b      	str	r3, [r7, #20]
        break;
 800f2d0:	e019      	b.n	800f306 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2d2:	f7fd f923 	bl	800c51c <HAL_RCC_GetSysClockFreq>
 800f2d6:	6178      	str	r0, [r7, #20]
        break;
 800f2d8:	e015      	b.n	800f306 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2de:	617b      	str	r3, [r7, #20]
        break;
 800f2e0:	e011      	b.n	800f306 <UART_SetConfig+0x30a>
 800f2e2:	bf00      	nop
 800f2e4:	efff69f3 	.word	0xefff69f3
 800f2e8:	40008000 	.word	0x40008000
 800f2ec:	40013800 	.word	0x40013800
 800f2f0:	40021000 	.word	0x40021000
 800f2f4:	40004400 	.word	0x40004400
 800f2f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f300:	2301      	movs	r3, #1
 800f302:	76bb      	strb	r3, [r7, #26]
        break;
 800f304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d075      	beq.n	800f3f8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	005a      	lsls	r2, r3, #1
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	085b      	lsrs	r3, r3, #1
 800f316:	441a      	add	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f320:	b29b      	uxth	r3, r3
 800f322:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	2b0f      	cmp	r3, #15
 800f328:	d916      	bls.n	800f358 <UART_SetConfig+0x35c>
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f330:	d212      	bcs.n	800f358 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	b29b      	uxth	r3, r3
 800f336:	f023 030f 	bic.w	r3, r3, #15
 800f33a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	085b      	lsrs	r3, r3, #1
 800f340:	b29b      	uxth	r3, r3
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	b29a      	uxth	r2, r3
 800f348:	89fb      	ldrh	r3, [r7, #14]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	89fa      	ldrh	r2, [r7, #14]
 800f354:	60da      	str	r2, [r3, #12]
 800f356:	e04f      	b.n	800f3f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	76bb      	strb	r3, [r7, #26]
 800f35c:	e04c      	b.n	800f3f8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f35e:	7efb      	ldrb	r3, [r7, #27]
 800f360:	2b08      	cmp	r3, #8
 800f362:	d828      	bhi.n	800f3b6 <UART_SetConfig+0x3ba>
 800f364:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <UART_SetConfig+0x370>)
 800f366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36a:	bf00      	nop
 800f36c:	0800f391 	.word	0x0800f391
 800f370:	0800f399 	.word	0x0800f399
 800f374:	0800f3a1 	.word	0x0800f3a1
 800f378:	0800f3b7 	.word	0x0800f3b7
 800f37c:	0800f3a7 	.word	0x0800f3a7
 800f380:	0800f3b7 	.word	0x0800f3b7
 800f384:	0800f3b7 	.word	0x0800f3b7
 800f388:	0800f3b7 	.word	0x0800f3b7
 800f38c:	0800f3af 	.word	0x0800f3af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f390:	f7fd f95c 	bl	800c64c <HAL_RCC_GetPCLK1Freq>
 800f394:	6178      	str	r0, [r7, #20]
        break;
 800f396:	e013      	b.n	800f3c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f398:	f7fd f96e 	bl	800c678 <HAL_RCC_GetPCLK2Freq>
 800f39c:	6178      	str	r0, [r7, #20]
        break;
 800f39e:	e00f      	b.n	800f3c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3a0:	4b1b      	ldr	r3, [pc, #108]	; (800f410 <UART_SetConfig+0x414>)
 800f3a2:	617b      	str	r3, [r7, #20]
        break;
 800f3a4:	e00c      	b.n	800f3c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3a6:	f7fd f8b9 	bl	800c51c <HAL_RCC_GetSysClockFreq>
 800f3aa:	6178      	str	r0, [r7, #20]
        break;
 800f3ac:	e008      	b.n	800f3c0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3b2:	617b      	str	r3, [r7, #20]
        break;
 800f3b4:	e004      	b.n	800f3c0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	76bb      	strb	r3, [r7, #26]
        break;
 800f3be:	bf00      	nop
    }

    if (pclk != 0U)
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d018      	beq.n	800f3f8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	085a      	lsrs	r2, r3, #1
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	441a      	add	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	2b0f      	cmp	r3, #15
 800f3e0:	d908      	bls.n	800f3f4 <UART_SetConfig+0x3f8>
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e8:	d204      	bcs.n	800f3f4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	693a      	ldr	r2, [r7, #16]
 800f3f0:	60da      	str	r2, [r3, #12]
 800f3f2:	e001      	b.n	800f3f8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f404:	7ebb      	ldrb	r3, [r7, #26]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3720      	adds	r7, #32
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bdb0      	pop	{r4, r5, r7, pc}
 800f40e:	bf00      	nop
 800f410:	00f42400 	.word	0x00f42400

0800f414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00a      	beq.n	800f43e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	430a      	orrs	r2, r1
 800f43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f442:	f003 0302 	and.w	r3, r3, #2
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00a      	beq.n	800f460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	430a      	orrs	r2, r1
 800f45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f464:	f003 0304 	and.w	r3, r3, #4
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00a      	beq.n	800f482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	430a      	orrs	r2, r1
 800f480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f486:	f003 0308 	and.w	r3, r3, #8
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00a      	beq.n	800f4a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	f003 0310 	and.w	r3, r3, #16
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00a      	beq.n	800f4c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	430a      	orrs	r2, r1
 800f4c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ca:	f003 0320 	and.w	r3, r3, #32
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00a      	beq.n	800f4e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	430a      	orrs	r2, r1
 800f4e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d01a      	beq.n	800f52a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	430a      	orrs	r2, r1
 800f508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f512:	d10a      	bne.n	800f52a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	430a      	orrs	r2, r1
 800f528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	430a      	orrs	r2, r1
 800f54a:	605a      	str	r2, [r3, #4]
  }
}
 800f54c:	bf00      	nop
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af02      	add	r7, sp, #8
 800f55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f568:	f7f8 f96a 	bl	8007840 <HAL_GetTick>
 800f56c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f003 0308 	and.w	r3, r3, #8
 800f578:	2b08      	cmp	r3, #8
 800f57a:	d10e      	bne.n	800f59a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f57c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f82d 	bl	800f5ea <UART_WaitOnFlagUntilTimeout>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d001      	beq.n	800f59a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f596:	2303      	movs	r3, #3
 800f598:	e023      	b.n	800f5e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f003 0304 	and.w	r3, r3, #4
 800f5a4:	2b04      	cmp	r3, #4
 800f5a6:	d10e      	bne.n	800f5c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 f817 	bl	800f5ea <UART_WaitOnFlagUntilTimeout>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d001      	beq.n	800f5c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	e00d      	b.n	800f5e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2220      	movs	r2, #32
 800f5d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b084      	sub	sp, #16
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	60b9      	str	r1, [r7, #8]
 800f5f4:	603b      	str	r3, [r7, #0]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5fa:	e05e      	b.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f602:	d05a      	beq.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f604:	f7f8 f91c 	bl	8007840 <HAL_GetTick>
 800f608:	4602      	mov	r2, r0
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	69ba      	ldr	r2, [r7, #24]
 800f610:	429a      	cmp	r2, r3
 800f612:	d302      	bcc.n	800f61a <UART_WaitOnFlagUntilTimeout+0x30>
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d11b      	bne.n	800f652 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f628:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	689a      	ldr	r2, [r3, #8]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f022 0201 	bic.w	r2, r2, #1
 800f638:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2220      	movs	r2, #32
 800f63e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2220      	movs	r2, #32
 800f644:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f64e:	2303      	movs	r3, #3
 800f650:	e043      	b.n	800f6da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 0304 	and.w	r3, r3, #4
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d02c      	beq.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	69db      	ldr	r3, [r3, #28]
 800f666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f66e:	d124      	bne.n	800f6ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f678:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f688:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	689a      	ldr	r2, [r3, #8]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f022 0201 	bic.w	r2, r2, #1
 800f698:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2220      	movs	r2, #32
 800f69e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2220      	movs	r2, #32
 800f6a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2220      	movs	r2, #32
 800f6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f6b6:	2303      	movs	r3, #3
 800f6b8:	e00f      	b.n	800f6da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	69da      	ldr	r2, [r3, #28]
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	bf0c      	ite	eq
 800f6ca:	2301      	moveq	r3, #1
 800f6cc:	2300      	movne	r3, #0
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d091      	beq.n	800f5fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
	...

0800f6e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	88fa      	ldrh	r2, [r7, #6]
 800f6fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	88fa      	ldrh	r2, [r7, #6]
 800f704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f716:	d10e      	bne.n	800f736 <UART_Start_Receive_IT+0x52>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d105      	bne.n	800f72c <UART_Start_Receive_IT+0x48>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f72a:	e02d      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	22ff      	movs	r2, #255	; 0xff
 800f730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f734:	e028      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10d      	bne.n	800f75a <UART_Start_Receive_IT+0x76>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d104      	bne.n	800f750 <UART_Start_Receive_IT+0x6c>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	22ff      	movs	r2, #255	; 0xff
 800f74a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f74e:	e01b      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	227f      	movs	r2, #127	; 0x7f
 800f754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f758:	e016      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f762:	d10d      	bne.n	800f780 <UART_Start_Receive_IT+0x9c>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <UART_Start_Receive_IT+0x92>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	227f      	movs	r2, #127	; 0x7f
 800f770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f774:	e008      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	223f      	movs	r2, #63	; 0x3f
 800f77a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f77e:	e003      	b.n	800f788 <UART_Start_Receive_IT+0xa4>
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2200      	movs	r2, #0
 800f784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2222      	movs	r2, #34	; 0x22
 800f794:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689a      	ldr	r2, [r3, #8]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f042 0201 	orr.w	r2, r2, #1
 800f7a4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ae:	d107      	bne.n	800f7c0 <UART_Start_Receive_IT+0xdc>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d103      	bne.n	800f7c0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	4a0c      	ldr	r2, [pc, #48]	; (800f7ec <UART_Start_Receive_IT+0x108>)
 800f7bc:	665a      	str	r2, [r3, #100]	; 0x64
 800f7be:	e002      	b.n	800f7c6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4a0b      	ldr	r2, [pc, #44]	; (800f7f0 <UART_Start_Receive_IT+0x10c>)
 800f7c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f7dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3714      	adds	r7, #20
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	0800faef 	.word	0x0800faef
 800f7f0:	0800fa17 	.word	0x0800fa17

0800f7f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f80a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	689a      	ldr	r2, [r3, #8]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f022 0201 	bic.w	r2, r2, #1
 800f81a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f820:	2b01      	cmp	r3, #1
 800f822:	d107      	bne.n	800f834 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f022 0210 	bic.w	r2, r2, #16
 800f832:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2220      	movs	r2, #32
 800f838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f846:	bf00      	nop
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b084      	sub	sp, #16
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f85e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2200      	movs	r2, #0
 800f864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7f6 fdef 	bl	8006454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f876:	bf00      	nop
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b084      	sub	sp, #16
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2200      	movs	r2, #0
 800f890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2220      	movs	r2, #32
 800f898:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7ff fb56 	bl	800ef4c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8a0:	bf00      	nop
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	220f      	movs	r2, #15
 800f8c4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	8b1b      	ldrh	r3, [r3, #24]
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f042 0208 	orr.w	r2, r2, #8
 800f8d6:	b292      	uxth	r2, r2
 800f8d8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f7ff fb3a 	bl	800ef60 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8ec:	bf00      	nop
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f900:	2b21      	cmp	r3, #33	; 0x21
 800f902:	d12b      	bne.n	800f95c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d110      	bne.n	800f932 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f91e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f92e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f930:	e014      	b.n	800f95c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f936:	781a      	ldrb	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	b292      	uxth	r2, r2
 800f93e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f950:	b29b      	uxth	r3, r3
 800f952:	3b01      	subs	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f974:	2b21      	cmp	r3, #33	; 0x21
 800f976:	d12f      	bne.n	800f9d8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f97e:	b29b      	uxth	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d110      	bne.n	800f9a6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f992:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9a2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f9a4:	e018      	b.n	800f9d8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	881a      	ldrh	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9b8:	b292      	uxth	r2, r2
 800f9ba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9c0:	1c9a      	adds	r2, r3, #2
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f9d8:	bf00      	nop
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2220      	movs	r2, #32
 800fa00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7f6 fcf7 	bl	80063fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa24:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa2a:	2b22      	cmp	r3, #34	; 0x22
 800fa2c:	d151      	bne.n	800fad2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa34:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fa36:	89bb      	ldrh	r3, [r7, #12]
 800fa38:	b2d9      	uxtb	r1, r3
 800fa3a:	89fb      	ldrh	r3, [r7, #14]
 800fa3c:	b2da      	uxtb	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa42:	400a      	ands	r2, r1
 800fa44:	b2d2      	uxtb	r2, r2
 800fa46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa4c:	1c5a      	adds	r2, r3, #1
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d13a      	bne.n	800fae6 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fa7e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f022 0201 	bic.w	r2, r2, #1
 800fa8e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2220      	movs	r2, #32
 800fa94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d10f      	bne.n	800fac4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f022 0210 	bic.w	r2, r2, #16
 800fab2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff fa59 	bl	800ef74 <HAL_UARTEx_RxEventCallback>
 800fac2:	e002      	b.n	800faca <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7f6 fca9 	bl	800641c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fad0:	e009      	b.n	800fae6 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	8b1b      	ldrh	r3, [r3, #24]
 800fad8:	b29a      	uxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f042 0208 	orr.w	r2, r2, #8
 800fae2:	b292      	uxth	r2, r2
 800fae4:	831a      	strh	r2, [r3, #24]
}
 800fae6:	bf00      	nop
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fafc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb02:	2b22      	cmp	r3, #34	; 0x22
 800fb04:	d151      	bne.n	800fbaa <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb0c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb12:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800fb14:	89ba      	ldrh	r2, [r7, #12]
 800fb16:	89fb      	ldrh	r3, [r7, #14]
 800fb18:	4013      	ands	r3, r2
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb24:	1c9a      	adds	r2, r3, #2
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	3b01      	subs	r3, #1
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d13a      	bne.n	800fbbe <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fb56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	689a      	ldr	r2, [r3, #8]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f022 0201 	bic.w	r2, r2, #1
 800fb66:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d10f      	bne.n	800fb9c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f022 0210 	bic.w	r2, r2, #16
 800fb8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fb92:	4619      	mov	r1, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff f9ed 	bl	800ef74 <HAL_UARTEx_RxEventCallback>
 800fb9a:	e002      	b.n	800fba2 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7f6 fc3d 	bl	800641c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fba8:	e009      	b.n	800fbbe <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	8b1b      	ldrh	r3, [r3, #24]
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f042 0208 	orr.w	r2, r2, #8
 800fbba:	b292      	uxth	r2, r2
 800fbbc:	831a      	strh	r2, [r3, #24]
}
 800fbbe:	bf00      	nop
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b083      	sub	sp, #12
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fbce:	bf00      	nop
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
	...

0800fbdc <__errno>:
 800fbdc:	4b01      	ldr	r3, [pc, #4]	; (800fbe4 <__errno+0x8>)
 800fbde:	6818      	ldr	r0, [r3, #0]
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20000018 	.word	0x20000018

0800fbe8 <__libc_init_array>:
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	4d0d      	ldr	r5, [pc, #52]	; (800fc20 <__libc_init_array+0x38>)
 800fbec:	4c0d      	ldr	r4, [pc, #52]	; (800fc24 <__libc_init_array+0x3c>)
 800fbee:	1b64      	subs	r4, r4, r5
 800fbf0:	10a4      	asrs	r4, r4, #2
 800fbf2:	2600      	movs	r6, #0
 800fbf4:	42a6      	cmp	r6, r4
 800fbf6:	d109      	bne.n	800fc0c <__libc_init_array+0x24>
 800fbf8:	4d0b      	ldr	r5, [pc, #44]	; (800fc28 <__libc_init_array+0x40>)
 800fbfa:	4c0c      	ldr	r4, [pc, #48]	; (800fc2c <__libc_init_array+0x44>)
 800fbfc:	f003 ff62 	bl	8013ac4 <_init>
 800fc00:	1b64      	subs	r4, r4, r5
 800fc02:	10a4      	asrs	r4, r4, #2
 800fc04:	2600      	movs	r6, #0
 800fc06:	42a6      	cmp	r6, r4
 800fc08:	d105      	bne.n	800fc16 <__libc_init_array+0x2e>
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc10:	4798      	blx	r3
 800fc12:	3601      	adds	r6, #1
 800fc14:	e7ee      	b.n	800fbf4 <__libc_init_array+0xc>
 800fc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc1a:	4798      	blx	r3
 800fc1c:	3601      	adds	r6, #1
 800fc1e:	e7f2      	b.n	800fc06 <__libc_init_array+0x1e>
 800fc20:	08014698 	.word	0x08014698
 800fc24:	08014698 	.word	0x08014698
 800fc28:	08014698 	.word	0x08014698
 800fc2c:	0801469c 	.word	0x0801469c

0800fc30 <memcpy>:
 800fc30:	440a      	add	r2, r1
 800fc32:	4291      	cmp	r1, r2
 800fc34:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc38:	d100      	bne.n	800fc3c <memcpy+0xc>
 800fc3a:	4770      	bx	lr
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc46:	4291      	cmp	r1, r2
 800fc48:	d1f9      	bne.n	800fc3e <memcpy+0xe>
 800fc4a:	bd10      	pop	{r4, pc}

0800fc4c <memset>:
 800fc4c:	4402      	add	r2, r0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d100      	bne.n	800fc56 <memset+0xa>
 800fc54:	4770      	bx	lr
 800fc56:	f803 1b01 	strb.w	r1, [r3], #1
 800fc5a:	e7f9      	b.n	800fc50 <memset+0x4>

0800fc5c <__cvt>:
 800fc5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc60:	ec55 4b10 	vmov	r4, r5, d0
 800fc64:	2d00      	cmp	r5, #0
 800fc66:	460e      	mov	r6, r1
 800fc68:	4619      	mov	r1, r3
 800fc6a:	462b      	mov	r3, r5
 800fc6c:	bfbb      	ittet	lt
 800fc6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc72:	461d      	movlt	r5, r3
 800fc74:	2300      	movge	r3, #0
 800fc76:	232d      	movlt	r3, #45	; 0x2d
 800fc78:	700b      	strb	r3, [r1, #0]
 800fc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc80:	4691      	mov	r9, r2
 800fc82:	f023 0820 	bic.w	r8, r3, #32
 800fc86:	bfbc      	itt	lt
 800fc88:	4622      	movlt	r2, r4
 800fc8a:	4614      	movlt	r4, r2
 800fc8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc90:	d005      	beq.n	800fc9e <__cvt+0x42>
 800fc92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc96:	d100      	bne.n	800fc9a <__cvt+0x3e>
 800fc98:	3601      	adds	r6, #1
 800fc9a:	2102      	movs	r1, #2
 800fc9c:	e000      	b.n	800fca0 <__cvt+0x44>
 800fc9e:	2103      	movs	r1, #3
 800fca0:	ab03      	add	r3, sp, #12
 800fca2:	9301      	str	r3, [sp, #4]
 800fca4:	ab02      	add	r3, sp, #8
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	ec45 4b10 	vmov	d0, r4, r5
 800fcac:	4653      	mov	r3, sl
 800fcae:	4632      	mov	r2, r6
 800fcb0:	f000 fd12 	bl	80106d8 <_dtoa_r>
 800fcb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fcb8:	4607      	mov	r7, r0
 800fcba:	d102      	bne.n	800fcc2 <__cvt+0x66>
 800fcbc:	f019 0f01 	tst.w	r9, #1
 800fcc0:	d022      	beq.n	800fd08 <__cvt+0xac>
 800fcc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcc6:	eb07 0906 	add.w	r9, r7, r6
 800fcca:	d110      	bne.n	800fcee <__cvt+0x92>
 800fccc:	783b      	ldrb	r3, [r7, #0]
 800fcce:	2b30      	cmp	r3, #48	; 0x30
 800fcd0:	d10a      	bne.n	800fce8 <__cvt+0x8c>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	4629      	mov	r1, r5
 800fcda:	f7f0 ff05 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcde:	b918      	cbnz	r0, 800fce8 <__cvt+0x8c>
 800fce0:	f1c6 0601 	rsb	r6, r6, #1
 800fce4:	f8ca 6000 	str.w	r6, [sl]
 800fce8:	f8da 3000 	ldr.w	r3, [sl]
 800fcec:	4499      	add	r9, r3
 800fcee:	2200      	movs	r2, #0
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	f7f0 fef7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcfa:	b108      	cbz	r0, 800fd00 <__cvt+0xa4>
 800fcfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd00:	2230      	movs	r2, #48	; 0x30
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	454b      	cmp	r3, r9
 800fd06:	d307      	bcc.n	800fd18 <__cvt+0xbc>
 800fd08:	9b03      	ldr	r3, [sp, #12]
 800fd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd0c:	1bdb      	subs	r3, r3, r7
 800fd0e:	4638      	mov	r0, r7
 800fd10:	6013      	str	r3, [r2, #0]
 800fd12:	b004      	add	sp, #16
 800fd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd18:	1c59      	adds	r1, r3, #1
 800fd1a:	9103      	str	r1, [sp, #12]
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	e7f0      	b.n	800fd02 <__cvt+0xa6>

0800fd20 <__exponent>:
 800fd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd22:	4603      	mov	r3, r0
 800fd24:	2900      	cmp	r1, #0
 800fd26:	bfb8      	it	lt
 800fd28:	4249      	neglt	r1, r1
 800fd2a:	f803 2b02 	strb.w	r2, [r3], #2
 800fd2e:	bfb4      	ite	lt
 800fd30:	222d      	movlt	r2, #45	; 0x2d
 800fd32:	222b      	movge	r2, #43	; 0x2b
 800fd34:	2909      	cmp	r1, #9
 800fd36:	7042      	strb	r2, [r0, #1]
 800fd38:	dd2a      	ble.n	800fd90 <__exponent+0x70>
 800fd3a:	f10d 0407 	add.w	r4, sp, #7
 800fd3e:	46a4      	mov	ip, r4
 800fd40:	270a      	movs	r7, #10
 800fd42:	46a6      	mov	lr, r4
 800fd44:	460a      	mov	r2, r1
 800fd46:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd4a:	fb07 1516 	mls	r5, r7, r6, r1
 800fd4e:	3530      	adds	r5, #48	; 0x30
 800fd50:	2a63      	cmp	r2, #99	; 0x63
 800fd52:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd5a:	4631      	mov	r1, r6
 800fd5c:	dcf1      	bgt.n	800fd42 <__exponent+0x22>
 800fd5e:	3130      	adds	r1, #48	; 0x30
 800fd60:	f1ae 0502 	sub.w	r5, lr, #2
 800fd64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd68:	1c44      	adds	r4, r0, #1
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	4561      	cmp	r1, ip
 800fd6e:	d30a      	bcc.n	800fd86 <__exponent+0x66>
 800fd70:	f10d 0209 	add.w	r2, sp, #9
 800fd74:	eba2 020e 	sub.w	r2, r2, lr
 800fd78:	4565      	cmp	r5, ip
 800fd7a:	bf88      	it	hi
 800fd7c:	2200      	movhi	r2, #0
 800fd7e:	4413      	add	r3, r2
 800fd80:	1a18      	subs	r0, r3, r0
 800fd82:	b003      	add	sp, #12
 800fd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd8e:	e7ed      	b.n	800fd6c <__exponent+0x4c>
 800fd90:	2330      	movs	r3, #48	; 0x30
 800fd92:	3130      	adds	r1, #48	; 0x30
 800fd94:	7083      	strb	r3, [r0, #2]
 800fd96:	70c1      	strb	r1, [r0, #3]
 800fd98:	1d03      	adds	r3, r0, #4
 800fd9a:	e7f1      	b.n	800fd80 <__exponent+0x60>

0800fd9c <_printf_float>:
 800fd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda0:	ed2d 8b02 	vpush	{d8}
 800fda4:	b08d      	sub	sp, #52	; 0x34
 800fda6:	460c      	mov	r4, r1
 800fda8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fdac:	4616      	mov	r6, r2
 800fdae:	461f      	mov	r7, r3
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	f001 fa7d 	bl	80112b0 <_localeconv_r>
 800fdb6:	f8d0 a000 	ldr.w	sl, [r0]
 800fdba:	4650      	mov	r0, sl
 800fdbc:	f7f0 fa12 	bl	80001e4 <strlen>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	930a      	str	r3, [sp, #40]	; 0x28
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	9305      	str	r3, [sp, #20]
 800fdc8:	f8d8 3000 	ldr.w	r3, [r8]
 800fdcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fdd0:	3307      	adds	r3, #7
 800fdd2:	f023 0307 	bic.w	r3, r3, #7
 800fdd6:	f103 0208 	add.w	r2, r3, #8
 800fdda:	f8c8 2000 	str.w	r2, [r8]
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fde6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fdea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fdee:	9307      	str	r3, [sp, #28]
 800fdf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800fdf4:	ee08 0a10 	vmov	s16, r0
 800fdf8:	4b9f      	ldr	r3, [pc, #636]	; (8010078 <_printf_float+0x2dc>)
 800fdfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fe02:	f7f0 fea3 	bl	8000b4c <__aeabi_dcmpun>
 800fe06:	bb88      	cbnz	r0, 800fe6c <_printf_float+0xd0>
 800fe08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe0c:	4b9a      	ldr	r3, [pc, #616]	; (8010078 <_printf_float+0x2dc>)
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe12:	f7f0 fe7d 	bl	8000b10 <__aeabi_dcmple>
 800fe16:	bb48      	cbnz	r0, 800fe6c <_printf_float+0xd0>
 800fe18:	2200      	movs	r2, #0
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	4649      	mov	r1, r9
 800fe20:	f7f0 fe6c 	bl	8000afc <__aeabi_dcmplt>
 800fe24:	b110      	cbz	r0, 800fe2c <_printf_float+0x90>
 800fe26:	232d      	movs	r3, #45	; 0x2d
 800fe28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe2c:	4b93      	ldr	r3, [pc, #588]	; (801007c <_printf_float+0x2e0>)
 800fe2e:	4894      	ldr	r0, [pc, #592]	; (8010080 <_printf_float+0x2e4>)
 800fe30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe34:	bf94      	ite	ls
 800fe36:	4698      	movls	r8, r3
 800fe38:	4680      	movhi	r8, r0
 800fe3a:	2303      	movs	r3, #3
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	9b05      	ldr	r3, [sp, #20]
 800fe40:	f023 0204 	bic.w	r2, r3, #4
 800fe44:	6022      	str	r2, [r4, #0]
 800fe46:	f04f 0900 	mov.w	r9, #0
 800fe4a:	9700      	str	r7, [sp, #0]
 800fe4c:	4633      	mov	r3, r6
 800fe4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe50:	4621      	mov	r1, r4
 800fe52:	4628      	mov	r0, r5
 800fe54:	f000 f9d8 	bl	8010208 <_printf_common>
 800fe58:	3001      	adds	r0, #1
 800fe5a:	f040 8090 	bne.w	800ff7e <_printf_float+0x1e2>
 800fe5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe62:	b00d      	add	sp, #52	; 0x34
 800fe64:	ecbd 8b02 	vpop	{d8}
 800fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6c:	4642      	mov	r2, r8
 800fe6e:	464b      	mov	r3, r9
 800fe70:	4640      	mov	r0, r8
 800fe72:	4649      	mov	r1, r9
 800fe74:	f7f0 fe6a 	bl	8000b4c <__aeabi_dcmpun>
 800fe78:	b140      	cbz	r0, 800fe8c <_printf_float+0xf0>
 800fe7a:	464b      	mov	r3, r9
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bfbc      	itt	lt
 800fe80:	232d      	movlt	r3, #45	; 0x2d
 800fe82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe86:	487f      	ldr	r0, [pc, #508]	; (8010084 <_printf_float+0x2e8>)
 800fe88:	4b7f      	ldr	r3, [pc, #508]	; (8010088 <_printf_float+0x2ec>)
 800fe8a:	e7d1      	b.n	800fe30 <_printf_float+0x94>
 800fe8c:	6863      	ldr	r3, [r4, #4]
 800fe8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe92:	9206      	str	r2, [sp, #24]
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	d13f      	bne.n	800ff18 <_printf_float+0x17c>
 800fe98:	2306      	movs	r3, #6
 800fe9a:	6063      	str	r3, [r4, #4]
 800fe9c:	9b05      	ldr	r3, [sp, #20]
 800fe9e:	6861      	ldr	r1, [r4, #4]
 800fea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fea4:	2300      	movs	r3, #0
 800fea6:	9303      	str	r3, [sp, #12]
 800fea8:	ab0a      	add	r3, sp, #40	; 0x28
 800feaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800feae:	ab09      	add	r3, sp, #36	; 0x24
 800feb0:	ec49 8b10 	vmov	d0, r8, r9
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	6022      	str	r2, [r4, #0]
 800feb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800febc:	4628      	mov	r0, r5
 800febe:	f7ff fecd 	bl	800fc5c <__cvt>
 800fec2:	9b06      	ldr	r3, [sp, #24]
 800fec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fec6:	2b47      	cmp	r3, #71	; 0x47
 800fec8:	4680      	mov	r8, r0
 800feca:	d108      	bne.n	800fede <_printf_float+0x142>
 800fecc:	1cc8      	adds	r0, r1, #3
 800fece:	db02      	blt.n	800fed6 <_printf_float+0x13a>
 800fed0:	6863      	ldr	r3, [r4, #4]
 800fed2:	4299      	cmp	r1, r3
 800fed4:	dd41      	ble.n	800ff5a <_printf_float+0x1be>
 800fed6:	f1ab 0b02 	sub.w	fp, fp, #2
 800feda:	fa5f fb8b 	uxtb.w	fp, fp
 800fede:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fee2:	d820      	bhi.n	800ff26 <_printf_float+0x18a>
 800fee4:	3901      	subs	r1, #1
 800fee6:	465a      	mov	r2, fp
 800fee8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800feec:	9109      	str	r1, [sp, #36]	; 0x24
 800feee:	f7ff ff17 	bl	800fd20 <__exponent>
 800fef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fef4:	1813      	adds	r3, r2, r0
 800fef6:	2a01      	cmp	r2, #1
 800fef8:	4681      	mov	r9, r0
 800fefa:	6123      	str	r3, [r4, #16]
 800fefc:	dc02      	bgt.n	800ff04 <_printf_float+0x168>
 800fefe:	6822      	ldr	r2, [r4, #0]
 800ff00:	07d2      	lsls	r2, r2, #31
 800ff02:	d501      	bpl.n	800ff08 <_printf_float+0x16c>
 800ff04:	3301      	adds	r3, #1
 800ff06:	6123      	str	r3, [r4, #16]
 800ff08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d09c      	beq.n	800fe4a <_printf_float+0xae>
 800ff10:	232d      	movs	r3, #45	; 0x2d
 800ff12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff16:	e798      	b.n	800fe4a <_printf_float+0xae>
 800ff18:	9a06      	ldr	r2, [sp, #24]
 800ff1a:	2a47      	cmp	r2, #71	; 0x47
 800ff1c:	d1be      	bne.n	800fe9c <_printf_float+0x100>
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1bc      	bne.n	800fe9c <_printf_float+0x100>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e7b9      	b.n	800fe9a <_printf_float+0xfe>
 800ff26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ff2a:	d118      	bne.n	800ff5e <_printf_float+0x1c2>
 800ff2c:	2900      	cmp	r1, #0
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	dd0b      	ble.n	800ff4a <_printf_float+0x1ae>
 800ff32:	6121      	str	r1, [r4, #16]
 800ff34:	b913      	cbnz	r3, 800ff3c <_printf_float+0x1a0>
 800ff36:	6822      	ldr	r2, [r4, #0]
 800ff38:	07d0      	lsls	r0, r2, #31
 800ff3a:	d502      	bpl.n	800ff42 <_printf_float+0x1a6>
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	440b      	add	r3, r1
 800ff40:	6123      	str	r3, [r4, #16]
 800ff42:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff44:	f04f 0900 	mov.w	r9, #0
 800ff48:	e7de      	b.n	800ff08 <_printf_float+0x16c>
 800ff4a:	b913      	cbnz	r3, 800ff52 <_printf_float+0x1b6>
 800ff4c:	6822      	ldr	r2, [r4, #0]
 800ff4e:	07d2      	lsls	r2, r2, #31
 800ff50:	d501      	bpl.n	800ff56 <_printf_float+0x1ba>
 800ff52:	3302      	adds	r3, #2
 800ff54:	e7f4      	b.n	800ff40 <_printf_float+0x1a4>
 800ff56:	2301      	movs	r3, #1
 800ff58:	e7f2      	b.n	800ff40 <_printf_float+0x1a4>
 800ff5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff60:	4299      	cmp	r1, r3
 800ff62:	db05      	blt.n	800ff70 <_printf_float+0x1d4>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	6121      	str	r1, [r4, #16]
 800ff68:	07d8      	lsls	r0, r3, #31
 800ff6a:	d5ea      	bpl.n	800ff42 <_printf_float+0x1a6>
 800ff6c:	1c4b      	adds	r3, r1, #1
 800ff6e:	e7e7      	b.n	800ff40 <_printf_float+0x1a4>
 800ff70:	2900      	cmp	r1, #0
 800ff72:	bfd4      	ite	le
 800ff74:	f1c1 0202 	rsble	r2, r1, #2
 800ff78:	2201      	movgt	r2, #1
 800ff7a:	4413      	add	r3, r2
 800ff7c:	e7e0      	b.n	800ff40 <_printf_float+0x1a4>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	055a      	lsls	r2, r3, #21
 800ff82:	d407      	bmi.n	800ff94 <_printf_float+0x1f8>
 800ff84:	6923      	ldr	r3, [r4, #16]
 800ff86:	4642      	mov	r2, r8
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	d12c      	bne.n	800ffec <_printf_float+0x250>
 800ff92:	e764      	b.n	800fe5e <_printf_float+0xc2>
 800ff94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff98:	f240 80e0 	bls.w	801015c <_printf_float+0x3c0>
 800ff9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f7f0 fda0 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d034      	beq.n	8010016 <_printf_float+0x27a>
 800ffac:	4a37      	ldr	r2, [pc, #220]	; (801008c <_printf_float+0x2f0>)
 800ffae:	2301      	movs	r3, #1
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	47b8      	blx	r7
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	f43f af51 	beq.w	800fe5e <_printf_float+0xc2>
 800ffbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	db02      	blt.n	800ffca <_printf_float+0x22e>
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	07d8      	lsls	r0, r3, #31
 800ffc8:	d510      	bpl.n	800ffec <_printf_float+0x250>
 800ffca:	ee18 3a10 	vmov	r3, s16
 800ffce:	4652      	mov	r2, sl
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f af41 	beq.w	800fe5e <_printf_float+0xc2>
 800ffdc:	f04f 0800 	mov.w	r8, #0
 800ffe0:	f104 091a 	add.w	r9, r4, #26
 800ffe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	4543      	cmp	r3, r8
 800ffea:	dc09      	bgt.n	8010000 <_printf_float+0x264>
 800ffec:	6823      	ldr	r3, [r4, #0]
 800ffee:	079b      	lsls	r3, r3, #30
 800fff0:	f100 8105 	bmi.w	80101fe <_printf_float+0x462>
 800fff4:	68e0      	ldr	r0, [r4, #12]
 800fff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fff8:	4298      	cmp	r0, r3
 800fffa:	bfb8      	it	lt
 800fffc:	4618      	movlt	r0, r3
 800fffe:	e730      	b.n	800fe62 <_printf_float+0xc6>
 8010000:	2301      	movs	r3, #1
 8010002:	464a      	mov	r2, r9
 8010004:	4631      	mov	r1, r6
 8010006:	4628      	mov	r0, r5
 8010008:	47b8      	blx	r7
 801000a:	3001      	adds	r0, #1
 801000c:	f43f af27 	beq.w	800fe5e <_printf_float+0xc2>
 8010010:	f108 0801 	add.w	r8, r8, #1
 8010014:	e7e6      	b.n	800ffe4 <_printf_float+0x248>
 8010016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010018:	2b00      	cmp	r3, #0
 801001a:	dc39      	bgt.n	8010090 <_printf_float+0x2f4>
 801001c:	4a1b      	ldr	r2, [pc, #108]	; (801008c <_printf_float+0x2f0>)
 801001e:	2301      	movs	r3, #1
 8010020:	4631      	mov	r1, r6
 8010022:	4628      	mov	r0, r5
 8010024:	47b8      	blx	r7
 8010026:	3001      	adds	r0, #1
 8010028:	f43f af19 	beq.w	800fe5e <_printf_float+0xc2>
 801002c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010030:	4313      	orrs	r3, r2
 8010032:	d102      	bne.n	801003a <_printf_float+0x29e>
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	07d9      	lsls	r1, r3, #31
 8010038:	d5d8      	bpl.n	800ffec <_printf_float+0x250>
 801003a:	ee18 3a10 	vmov	r3, s16
 801003e:	4652      	mov	r2, sl
 8010040:	4631      	mov	r1, r6
 8010042:	4628      	mov	r0, r5
 8010044:	47b8      	blx	r7
 8010046:	3001      	adds	r0, #1
 8010048:	f43f af09 	beq.w	800fe5e <_printf_float+0xc2>
 801004c:	f04f 0900 	mov.w	r9, #0
 8010050:	f104 0a1a 	add.w	sl, r4, #26
 8010054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010056:	425b      	negs	r3, r3
 8010058:	454b      	cmp	r3, r9
 801005a:	dc01      	bgt.n	8010060 <_printf_float+0x2c4>
 801005c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801005e:	e792      	b.n	800ff86 <_printf_float+0x1ea>
 8010060:	2301      	movs	r3, #1
 8010062:	4652      	mov	r2, sl
 8010064:	4631      	mov	r1, r6
 8010066:	4628      	mov	r0, r5
 8010068:	47b8      	blx	r7
 801006a:	3001      	adds	r0, #1
 801006c:	f43f aef7 	beq.w	800fe5e <_printf_float+0xc2>
 8010070:	f109 0901 	add.w	r9, r9, #1
 8010074:	e7ee      	b.n	8010054 <_printf_float+0x2b8>
 8010076:	bf00      	nop
 8010078:	7fefffff 	.word	0x7fefffff
 801007c:	080140d4 	.word	0x080140d4
 8010080:	080140d8 	.word	0x080140d8
 8010084:	080140e0 	.word	0x080140e0
 8010088:	080140dc 	.word	0x080140dc
 801008c:	080140e4 	.word	0x080140e4
 8010090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010094:	429a      	cmp	r2, r3
 8010096:	bfa8      	it	ge
 8010098:	461a      	movge	r2, r3
 801009a:	2a00      	cmp	r2, #0
 801009c:	4691      	mov	r9, r2
 801009e:	dc37      	bgt.n	8010110 <_printf_float+0x374>
 80100a0:	f04f 0b00 	mov.w	fp, #0
 80100a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100a8:	f104 021a 	add.w	r2, r4, #26
 80100ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100ae:	9305      	str	r3, [sp, #20]
 80100b0:	eba3 0309 	sub.w	r3, r3, r9
 80100b4:	455b      	cmp	r3, fp
 80100b6:	dc33      	bgt.n	8010120 <_printf_float+0x384>
 80100b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100bc:	429a      	cmp	r2, r3
 80100be:	db3b      	blt.n	8010138 <_printf_float+0x39c>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	07da      	lsls	r2, r3, #31
 80100c4:	d438      	bmi.n	8010138 <_printf_float+0x39c>
 80100c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	eba2 0901 	sub.w	r9, r2, r1
 80100d2:	4599      	cmp	r9, r3
 80100d4:	bfa8      	it	ge
 80100d6:	4699      	movge	r9, r3
 80100d8:	f1b9 0f00 	cmp.w	r9, #0
 80100dc:	dc35      	bgt.n	801014a <_printf_float+0x3ae>
 80100de:	f04f 0800 	mov.w	r8, #0
 80100e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100e6:	f104 0a1a 	add.w	sl, r4, #26
 80100ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100ee:	1a9b      	subs	r3, r3, r2
 80100f0:	eba3 0309 	sub.w	r3, r3, r9
 80100f4:	4543      	cmp	r3, r8
 80100f6:	f77f af79 	ble.w	800ffec <_printf_float+0x250>
 80100fa:	2301      	movs	r3, #1
 80100fc:	4652      	mov	r2, sl
 80100fe:	4631      	mov	r1, r6
 8010100:	4628      	mov	r0, r5
 8010102:	47b8      	blx	r7
 8010104:	3001      	adds	r0, #1
 8010106:	f43f aeaa 	beq.w	800fe5e <_printf_float+0xc2>
 801010a:	f108 0801 	add.w	r8, r8, #1
 801010e:	e7ec      	b.n	80100ea <_printf_float+0x34e>
 8010110:	4613      	mov	r3, r2
 8010112:	4631      	mov	r1, r6
 8010114:	4642      	mov	r2, r8
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	d1c0      	bne.n	80100a0 <_printf_float+0x304>
 801011e:	e69e      	b.n	800fe5e <_printf_float+0xc2>
 8010120:	2301      	movs	r3, #1
 8010122:	4631      	mov	r1, r6
 8010124:	4628      	mov	r0, r5
 8010126:	9205      	str	r2, [sp, #20]
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f ae97 	beq.w	800fe5e <_printf_float+0xc2>
 8010130:	9a05      	ldr	r2, [sp, #20]
 8010132:	f10b 0b01 	add.w	fp, fp, #1
 8010136:	e7b9      	b.n	80100ac <_printf_float+0x310>
 8010138:	ee18 3a10 	vmov	r3, s16
 801013c:	4652      	mov	r2, sl
 801013e:	4631      	mov	r1, r6
 8010140:	4628      	mov	r0, r5
 8010142:	47b8      	blx	r7
 8010144:	3001      	adds	r0, #1
 8010146:	d1be      	bne.n	80100c6 <_printf_float+0x32a>
 8010148:	e689      	b.n	800fe5e <_printf_float+0xc2>
 801014a:	9a05      	ldr	r2, [sp, #20]
 801014c:	464b      	mov	r3, r9
 801014e:	4442      	add	r2, r8
 8010150:	4631      	mov	r1, r6
 8010152:	4628      	mov	r0, r5
 8010154:	47b8      	blx	r7
 8010156:	3001      	adds	r0, #1
 8010158:	d1c1      	bne.n	80100de <_printf_float+0x342>
 801015a:	e680      	b.n	800fe5e <_printf_float+0xc2>
 801015c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801015e:	2a01      	cmp	r2, #1
 8010160:	dc01      	bgt.n	8010166 <_printf_float+0x3ca>
 8010162:	07db      	lsls	r3, r3, #31
 8010164:	d538      	bpl.n	80101d8 <_printf_float+0x43c>
 8010166:	2301      	movs	r3, #1
 8010168:	4642      	mov	r2, r8
 801016a:	4631      	mov	r1, r6
 801016c:	4628      	mov	r0, r5
 801016e:	47b8      	blx	r7
 8010170:	3001      	adds	r0, #1
 8010172:	f43f ae74 	beq.w	800fe5e <_printf_float+0xc2>
 8010176:	ee18 3a10 	vmov	r3, s16
 801017a:	4652      	mov	r2, sl
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	47b8      	blx	r7
 8010182:	3001      	adds	r0, #1
 8010184:	f43f ae6b 	beq.w	800fe5e <_printf_float+0xc2>
 8010188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801018c:	2200      	movs	r2, #0
 801018e:	2300      	movs	r3, #0
 8010190:	f7f0 fcaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8010194:	b9d8      	cbnz	r0, 80101ce <_printf_float+0x432>
 8010196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010198:	f108 0201 	add.w	r2, r8, #1
 801019c:	3b01      	subs	r3, #1
 801019e:	4631      	mov	r1, r6
 80101a0:	4628      	mov	r0, r5
 80101a2:	47b8      	blx	r7
 80101a4:	3001      	adds	r0, #1
 80101a6:	d10e      	bne.n	80101c6 <_printf_float+0x42a>
 80101a8:	e659      	b.n	800fe5e <_printf_float+0xc2>
 80101aa:	2301      	movs	r3, #1
 80101ac:	4652      	mov	r2, sl
 80101ae:	4631      	mov	r1, r6
 80101b0:	4628      	mov	r0, r5
 80101b2:	47b8      	blx	r7
 80101b4:	3001      	adds	r0, #1
 80101b6:	f43f ae52 	beq.w	800fe5e <_printf_float+0xc2>
 80101ba:	f108 0801 	add.w	r8, r8, #1
 80101be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c0:	3b01      	subs	r3, #1
 80101c2:	4543      	cmp	r3, r8
 80101c4:	dcf1      	bgt.n	80101aa <_printf_float+0x40e>
 80101c6:	464b      	mov	r3, r9
 80101c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101cc:	e6dc      	b.n	800ff88 <_printf_float+0x1ec>
 80101ce:	f04f 0800 	mov.w	r8, #0
 80101d2:	f104 0a1a 	add.w	sl, r4, #26
 80101d6:	e7f2      	b.n	80101be <_printf_float+0x422>
 80101d8:	2301      	movs	r3, #1
 80101da:	4642      	mov	r2, r8
 80101dc:	e7df      	b.n	801019e <_printf_float+0x402>
 80101de:	2301      	movs	r3, #1
 80101e0:	464a      	mov	r2, r9
 80101e2:	4631      	mov	r1, r6
 80101e4:	4628      	mov	r0, r5
 80101e6:	47b8      	blx	r7
 80101e8:	3001      	adds	r0, #1
 80101ea:	f43f ae38 	beq.w	800fe5e <_printf_float+0xc2>
 80101ee:	f108 0801 	add.w	r8, r8, #1
 80101f2:	68e3      	ldr	r3, [r4, #12]
 80101f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101f6:	1a5b      	subs	r3, r3, r1
 80101f8:	4543      	cmp	r3, r8
 80101fa:	dcf0      	bgt.n	80101de <_printf_float+0x442>
 80101fc:	e6fa      	b.n	800fff4 <_printf_float+0x258>
 80101fe:	f04f 0800 	mov.w	r8, #0
 8010202:	f104 0919 	add.w	r9, r4, #25
 8010206:	e7f4      	b.n	80101f2 <_printf_float+0x456>

08010208 <_printf_common>:
 8010208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801020c:	4616      	mov	r6, r2
 801020e:	4699      	mov	r9, r3
 8010210:	688a      	ldr	r2, [r1, #8]
 8010212:	690b      	ldr	r3, [r1, #16]
 8010214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010218:	4293      	cmp	r3, r2
 801021a:	bfb8      	it	lt
 801021c:	4613      	movlt	r3, r2
 801021e:	6033      	str	r3, [r6, #0]
 8010220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010224:	4607      	mov	r7, r0
 8010226:	460c      	mov	r4, r1
 8010228:	b10a      	cbz	r2, 801022e <_printf_common+0x26>
 801022a:	3301      	adds	r3, #1
 801022c:	6033      	str	r3, [r6, #0]
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	0699      	lsls	r1, r3, #26
 8010232:	bf42      	ittt	mi
 8010234:	6833      	ldrmi	r3, [r6, #0]
 8010236:	3302      	addmi	r3, #2
 8010238:	6033      	strmi	r3, [r6, #0]
 801023a:	6825      	ldr	r5, [r4, #0]
 801023c:	f015 0506 	ands.w	r5, r5, #6
 8010240:	d106      	bne.n	8010250 <_printf_common+0x48>
 8010242:	f104 0a19 	add.w	sl, r4, #25
 8010246:	68e3      	ldr	r3, [r4, #12]
 8010248:	6832      	ldr	r2, [r6, #0]
 801024a:	1a9b      	subs	r3, r3, r2
 801024c:	42ab      	cmp	r3, r5
 801024e:	dc26      	bgt.n	801029e <_printf_common+0x96>
 8010250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010254:	1e13      	subs	r3, r2, #0
 8010256:	6822      	ldr	r2, [r4, #0]
 8010258:	bf18      	it	ne
 801025a:	2301      	movne	r3, #1
 801025c:	0692      	lsls	r2, r2, #26
 801025e:	d42b      	bmi.n	80102b8 <_printf_common+0xb0>
 8010260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010264:	4649      	mov	r1, r9
 8010266:	4638      	mov	r0, r7
 8010268:	47c0      	blx	r8
 801026a:	3001      	adds	r0, #1
 801026c:	d01e      	beq.n	80102ac <_printf_common+0xa4>
 801026e:	6823      	ldr	r3, [r4, #0]
 8010270:	68e5      	ldr	r5, [r4, #12]
 8010272:	6832      	ldr	r2, [r6, #0]
 8010274:	f003 0306 	and.w	r3, r3, #6
 8010278:	2b04      	cmp	r3, #4
 801027a:	bf08      	it	eq
 801027c:	1aad      	subeq	r5, r5, r2
 801027e:	68a3      	ldr	r3, [r4, #8]
 8010280:	6922      	ldr	r2, [r4, #16]
 8010282:	bf0c      	ite	eq
 8010284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010288:	2500      	movne	r5, #0
 801028a:	4293      	cmp	r3, r2
 801028c:	bfc4      	itt	gt
 801028e:	1a9b      	subgt	r3, r3, r2
 8010290:	18ed      	addgt	r5, r5, r3
 8010292:	2600      	movs	r6, #0
 8010294:	341a      	adds	r4, #26
 8010296:	42b5      	cmp	r5, r6
 8010298:	d11a      	bne.n	80102d0 <_printf_common+0xc8>
 801029a:	2000      	movs	r0, #0
 801029c:	e008      	b.n	80102b0 <_printf_common+0xa8>
 801029e:	2301      	movs	r3, #1
 80102a0:	4652      	mov	r2, sl
 80102a2:	4649      	mov	r1, r9
 80102a4:	4638      	mov	r0, r7
 80102a6:	47c0      	blx	r8
 80102a8:	3001      	adds	r0, #1
 80102aa:	d103      	bne.n	80102b4 <_printf_common+0xac>
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295
 80102b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b4:	3501      	adds	r5, #1
 80102b6:	e7c6      	b.n	8010246 <_printf_common+0x3e>
 80102b8:	18e1      	adds	r1, r4, r3
 80102ba:	1c5a      	adds	r2, r3, #1
 80102bc:	2030      	movs	r0, #48	; 0x30
 80102be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102c2:	4422      	add	r2, r4
 80102c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102cc:	3302      	adds	r3, #2
 80102ce:	e7c7      	b.n	8010260 <_printf_common+0x58>
 80102d0:	2301      	movs	r3, #1
 80102d2:	4622      	mov	r2, r4
 80102d4:	4649      	mov	r1, r9
 80102d6:	4638      	mov	r0, r7
 80102d8:	47c0      	blx	r8
 80102da:	3001      	adds	r0, #1
 80102dc:	d0e6      	beq.n	80102ac <_printf_common+0xa4>
 80102de:	3601      	adds	r6, #1
 80102e0:	e7d9      	b.n	8010296 <_printf_common+0x8e>
	...

080102e4 <_printf_i>:
 80102e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102e8:	460c      	mov	r4, r1
 80102ea:	4691      	mov	r9, r2
 80102ec:	7e27      	ldrb	r7, [r4, #24]
 80102ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102f0:	2f78      	cmp	r7, #120	; 0x78
 80102f2:	4680      	mov	r8, r0
 80102f4:	469a      	mov	sl, r3
 80102f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102fa:	d807      	bhi.n	801030c <_printf_i+0x28>
 80102fc:	2f62      	cmp	r7, #98	; 0x62
 80102fe:	d80a      	bhi.n	8010316 <_printf_i+0x32>
 8010300:	2f00      	cmp	r7, #0
 8010302:	f000 80d8 	beq.w	80104b6 <_printf_i+0x1d2>
 8010306:	2f58      	cmp	r7, #88	; 0x58
 8010308:	f000 80a3 	beq.w	8010452 <_printf_i+0x16e>
 801030c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010314:	e03a      	b.n	801038c <_printf_i+0xa8>
 8010316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801031a:	2b15      	cmp	r3, #21
 801031c:	d8f6      	bhi.n	801030c <_printf_i+0x28>
 801031e:	a001      	add	r0, pc, #4	; (adr r0, 8010324 <_printf_i+0x40>)
 8010320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010324:	0801037d 	.word	0x0801037d
 8010328:	08010391 	.word	0x08010391
 801032c:	0801030d 	.word	0x0801030d
 8010330:	0801030d 	.word	0x0801030d
 8010334:	0801030d 	.word	0x0801030d
 8010338:	0801030d 	.word	0x0801030d
 801033c:	08010391 	.word	0x08010391
 8010340:	0801030d 	.word	0x0801030d
 8010344:	0801030d 	.word	0x0801030d
 8010348:	0801030d 	.word	0x0801030d
 801034c:	0801030d 	.word	0x0801030d
 8010350:	0801049d 	.word	0x0801049d
 8010354:	080103c1 	.word	0x080103c1
 8010358:	0801047f 	.word	0x0801047f
 801035c:	0801030d 	.word	0x0801030d
 8010360:	0801030d 	.word	0x0801030d
 8010364:	080104bf 	.word	0x080104bf
 8010368:	0801030d 	.word	0x0801030d
 801036c:	080103c1 	.word	0x080103c1
 8010370:	0801030d 	.word	0x0801030d
 8010374:	0801030d 	.word	0x0801030d
 8010378:	08010487 	.word	0x08010487
 801037c:	680b      	ldr	r3, [r1, #0]
 801037e:	1d1a      	adds	r2, r3, #4
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	600a      	str	r2, [r1, #0]
 8010384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801038c:	2301      	movs	r3, #1
 801038e:	e0a3      	b.n	80104d8 <_printf_i+0x1f4>
 8010390:	6825      	ldr	r5, [r4, #0]
 8010392:	6808      	ldr	r0, [r1, #0]
 8010394:	062e      	lsls	r6, r5, #24
 8010396:	f100 0304 	add.w	r3, r0, #4
 801039a:	d50a      	bpl.n	80103b2 <_printf_i+0xce>
 801039c:	6805      	ldr	r5, [r0, #0]
 801039e:	600b      	str	r3, [r1, #0]
 80103a0:	2d00      	cmp	r5, #0
 80103a2:	da03      	bge.n	80103ac <_printf_i+0xc8>
 80103a4:	232d      	movs	r3, #45	; 0x2d
 80103a6:	426d      	negs	r5, r5
 80103a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103ac:	485e      	ldr	r0, [pc, #376]	; (8010528 <_printf_i+0x244>)
 80103ae:	230a      	movs	r3, #10
 80103b0:	e019      	b.n	80103e6 <_printf_i+0x102>
 80103b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80103b6:	6805      	ldr	r5, [r0, #0]
 80103b8:	600b      	str	r3, [r1, #0]
 80103ba:	bf18      	it	ne
 80103bc:	b22d      	sxthne	r5, r5
 80103be:	e7ef      	b.n	80103a0 <_printf_i+0xbc>
 80103c0:	680b      	ldr	r3, [r1, #0]
 80103c2:	6825      	ldr	r5, [r4, #0]
 80103c4:	1d18      	adds	r0, r3, #4
 80103c6:	6008      	str	r0, [r1, #0]
 80103c8:	0628      	lsls	r0, r5, #24
 80103ca:	d501      	bpl.n	80103d0 <_printf_i+0xec>
 80103cc:	681d      	ldr	r5, [r3, #0]
 80103ce:	e002      	b.n	80103d6 <_printf_i+0xf2>
 80103d0:	0669      	lsls	r1, r5, #25
 80103d2:	d5fb      	bpl.n	80103cc <_printf_i+0xe8>
 80103d4:	881d      	ldrh	r5, [r3, #0]
 80103d6:	4854      	ldr	r0, [pc, #336]	; (8010528 <_printf_i+0x244>)
 80103d8:	2f6f      	cmp	r7, #111	; 0x6f
 80103da:	bf0c      	ite	eq
 80103dc:	2308      	moveq	r3, #8
 80103de:	230a      	movne	r3, #10
 80103e0:	2100      	movs	r1, #0
 80103e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103e6:	6866      	ldr	r6, [r4, #4]
 80103e8:	60a6      	str	r6, [r4, #8]
 80103ea:	2e00      	cmp	r6, #0
 80103ec:	bfa2      	ittt	ge
 80103ee:	6821      	ldrge	r1, [r4, #0]
 80103f0:	f021 0104 	bicge.w	r1, r1, #4
 80103f4:	6021      	strge	r1, [r4, #0]
 80103f6:	b90d      	cbnz	r5, 80103fc <_printf_i+0x118>
 80103f8:	2e00      	cmp	r6, #0
 80103fa:	d04d      	beq.n	8010498 <_printf_i+0x1b4>
 80103fc:	4616      	mov	r6, r2
 80103fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010402:	fb03 5711 	mls	r7, r3, r1, r5
 8010406:	5dc7      	ldrb	r7, [r0, r7]
 8010408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801040c:	462f      	mov	r7, r5
 801040e:	42bb      	cmp	r3, r7
 8010410:	460d      	mov	r5, r1
 8010412:	d9f4      	bls.n	80103fe <_printf_i+0x11a>
 8010414:	2b08      	cmp	r3, #8
 8010416:	d10b      	bne.n	8010430 <_printf_i+0x14c>
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	07df      	lsls	r7, r3, #31
 801041c:	d508      	bpl.n	8010430 <_printf_i+0x14c>
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	6861      	ldr	r1, [r4, #4]
 8010422:	4299      	cmp	r1, r3
 8010424:	bfde      	ittt	le
 8010426:	2330      	movle	r3, #48	; 0x30
 8010428:	f806 3c01 	strble.w	r3, [r6, #-1]
 801042c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010430:	1b92      	subs	r2, r2, r6
 8010432:	6122      	str	r2, [r4, #16]
 8010434:	f8cd a000 	str.w	sl, [sp]
 8010438:	464b      	mov	r3, r9
 801043a:	aa03      	add	r2, sp, #12
 801043c:	4621      	mov	r1, r4
 801043e:	4640      	mov	r0, r8
 8010440:	f7ff fee2 	bl	8010208 <_printf_common>
 8010444:	3001      	adds	r0, #1
 8010446:	d14c      	bne.n	80104e2 <_printf_i+0x1fe>
 8010448:	f04f 30ff 	mov.w	r0, #4294967295
 801044c:	b004      	add	sp, #16
 801044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010452:	4835      	ldr	r0, [pc, #212]	; (8010528 <_printf_i+0x244>)
 8010454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	680e      	ldr	r6, [r1, #0]
 801045c:	061f      	lsls	r7, r3, #24
 801045e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010462:	600e      	str	r6, [r1, #0]
 8010464:	d514      	bpl.n	8010490 <_printf_i+0x1ac>
 8010466:	07d9      	lsls	r1, r3, #31
 8010468:	bf44      	itt	mi
 801046a:	f043 0320 	orrmi.w	r3, r3, #32
 801046e:	6023      	strmi	r3, [r4, #0]
 8010470:	b91d      	cbnz	r5, 801047a <_printf_i+0x196>
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	f023 0320 	bic.w	r3, r3, #32
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	2310      	movs	r3, #16
 801047c:	e7b0      	b.n	80103e0 <_printf_i+0xfc>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	f043 0320 	orr.w	r3, r3, #32
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	2378      	movs	r3, #120	; 0x78
 8010488:	4828      	ldr	r0, [pc, #160]	; (801052c <_printf_i+0x248>)
 801048a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801048e:	e7e3      	b.n	8010458 <_printf_i+0x174>
 8010490:	065e      	lsls	r6, r3, #25
 8010492:	bf48      	it	mi
 8010494:	b2ad      	uxthmi	r5, r5
 8010496:	e7e6      	b.n	8010466 <_printf_i+0x182>
 8010498:	4616      	mov	r6, r2
 801049a:	e7bb      	b.n	8010414 <_printf_i+0x130>
 801049c:	680b      	ldr	r3, [r1, #0]
 801049e:	6826      	ldr	r6, [r4, #0]
 80104a0:	6960      	ldr	r0, [r4, #20]
 80104a2:	1d1d      	adds	r5, r3, #4
 80104a4:	600d      	str	r5, [r1, #0]
 80104a6:	0635      	lsls	r5, r6, #24
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	d501      	bpl.n	80104b0 <_printf_i+0x1cc>
 80104ac:	6018      	str	r0, [r3, #0]
 80104ae:	e002      	b.n	80104b6 <_printf_i+0x1d2>
 80104b0:	0671      	lsls	r1, r6, #25
 80104b2:	d5fb      	bpl.n	80104ac <_printf_i+0x1c8>
 80104b4:	8018      	strh	r0, [r3, #0]
 80104b6:	2300      	movs	r3, #0
 80104b8:	6123      	str	r3, [r4, #16]
 80104ba:	4616      	mov	r6, r2
 80104bc:	e7ba      	b.n	8010434 <_printf_i+0x150>
 80104be:	680b      	ldr	r3, [r1, #0]
 80104c0:	1d1a      	adds	r2, r3, #4
 80104c2:	600a      	str	r2, [r1, #0]
 80104c4:	681e      	ldr	r6, [r3, #0]
 80104c6:	6862      	ldr	r2, [r4, #4]
 80104c8:	2100      	movs	r1, #0
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7ef fe98 	bl	8000200 <memchr>
 80104d0:	b108      	cbz	r0, 80104d6 <_printf_i+0x1f2>
 80104d2:	1b80      	subs	r0, r0, r6
 80104d4:	6060      	str	r0, [r4, #4]
 80104d6:	6863      	ldr	r3, [r4, #4]
 80104d8:	6123      	str	r3, [r4, #16]
 80104da:	2300      	movs	r3, #0
 80104dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104e0:	e7a8      	b.n	8010434 <_printf_i+0x150>
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	4632      	mov	r2, r6
 80104e6:	4649      	mov	r1, r9
 80104e8:	4640      	mov	r0, r8
 80104ea:	47d0      	blx	sl
 80104ec:	3001      	adds	r0, #1
 80104ee:	d0ab      	beq.n	8010448 <_printf_i+0x164>
 80104f0:	6823      	ldr	r3, [r4, #0]
 80104f2:	079b      	lsls	r3, r3, #30
 80104f4:	d413      	bmi.n	801051e <_printf_i+0x23a>
 80104f6:	68e0      	ldr	r0, [r4, #12]
 80104f8:	9b03      	ldr	r3, [sp, #12]
 80104fa:	4298      	cmp	r0, r3
 80104fc:	bfb8      	it	lt
 80104fe:	4618      	movlt	r0, r3
 8010500:	e7a4      	b.n	801044c <_printf_i+0x168>
 8010502:	2301      	movs	r3, #1
 8010504:	4632      	mov	r2, r6
 8010506:	4649      	mov	r1, r9
 8010508:	4640      	mov	r0, r8
 801050a:	47d0      	blx	sl
 801050c:	3001      	adds	r0, #1
 801050e:	d09b      	beq.n	8010448 <_printf_i+0x164>
 8010510:	3501      	adds	r5, #1
 8010512:	68e3      	ldr	r3, [r4, #12]
 8010514:	9903      	ldr	r1, [sp, #12]
 8010516:	1a5b      	subs	r3, r3, r1
 8010518:	42ab      	cmp	r3, r5
 801051a:	dcf2      	bgt.n	8010502 <_printf_i+0x21e>
 801051c:	e7eb      	b.n	80104f6 <_printf_i+0x212>
 801051e:	2500      	movs	r5, #0
 8010520:	f104 0619 	add.w	r6, r4, #25
 8010524:	e7f5      	b.n	8010512 <_printf_i+0x22e>
 8010526:	bf00      	nop
 8010528:	080140e6 	.word	0x080140e6
 801052c:	080140f7 	.word	0x080140f7

08010530 <sniprintf>:
 8010530:	b40c      	push	{r2, r3}
 8010532:	b530      	push	{r4, r5, lr}
 8010534:	4b17      	ldr	r3, [pc, #92]	; (8010594 <sniprintf+0x64>)
 8010536:	1e0c      	subs	r4, r1, #0
 8010538:	681d      	ldr	r5, [r3, #0]
 801053a:	b09d      	sub	sp, #116	; 0x74
 801053c:	da08      	bge.n	8010550 <sniprintf+0x20>
 801053e:	238b      	movs	r3, #139	; 0x8b
 8010540:	602b      	str	r3, [r5, #0]
 8010542:	f04f 30ff 	mov.w	r0, #4294967295
 8010546:	b01d      	add	sp, #116	; 0x74
 8010548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801054c:	b002      	add	sp, #8
 801054e:	4770      	bx	lr
 8010550:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010558:	bf14      	ite	ne
 801055a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801055e:	4623      	moveq	r3, r4
 8010560:	9304      	str	r3, [sp, #16]
 8010562:	9307      	str	r3, [sp, #28]
 8010564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010568:	9002      	str	r0, [sp, #8]
 801056a:	9006      	str	r0, [sp, #24]
 801056c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010570:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010572:	ab21      	add	r3, sp, #132	; 0x84
 8010574:	a902      	add	r1, sp, #8
 8010576:	4628      	mov	r0, r5
 8010578:	9301      	str	r3, [sp, #4]
 801057a:	f001 fb39 	bl	8011bf0 <_svfiprintf_r>
 801057e:	1c43      	adds	r3, r0, #1
 8010580:	bfbc      	itt	lt
 8010582:	238b      	movlt	r3, #139	; 0x8b
 8010584:	602b      	strlt	r3, [r5, #0]
 8010586:	2c00      	cmp	r4, #0
 8010588:	d0dd      	beq.n	8010546 <sniprintf+0x16>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	2200      	movs	r2, #0
 801058e:	701a      	strb	r2, [r3, #0]
 8010590:	e7d9      	b.n	8010546 <sniprintf+0x16>
 8010592:	bf00      	nop
 8010594:	20000018 	.word	0x20000018

08010598 <strncpy>:
 8010598:	b510      	push	{r4, lr}
 801059a:	3901      	subs	r1, #1
 801059c:	4603      	mov	r3, r0
 801059e:	b132      	cbz	r2, 80105ae <strncpy+0x16>
 80105a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80105a4:	f803 4b01 	strb.w	r4, [r3], #1
 80105a8:	3a01      	subs	r2, #1
 80105aa:	2c00      	cmp	r4, #0
 80105ac:	d1f7      	bne.n	801059e <strncpy+0x6>
 80105ae:	441a      	add	r2, r3
 80105b0:	2100      	movs	r1, #0
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d100      	bne.n	80105b8 <strncpy+0x20>
 80105b6:	bd10      	pop	{r4, pc}
 80105b8:	f803 1b01 	strb.w	r1, [r3], #1
 80105bc:	e7f9      	b.n	80105b2 <strncpy+0x1a>

080105be <quorem>:
 80105be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c2:	6903      	ldr	r3, [r0, #16]
 80105c4:	690c      	ldr	r4, [r1, #16]
 80105c6:	42a3      	cmp	r3, r4
 80105c8:	4607      	mov	r7, r0
 80105ca:	f2c0 8081 	blt.w	80106d0 <quorem+0x112>
 80105ce:	3c01      	subs	r4, #1
 80105d0:	f101 0814 	add.w	r8, r1, #20
 80105d4:	f100 0514 	add.w	r5, r0, #20
 80105d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105dc:	9301      	str	r3, [sp, #4]
 80105de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105e6:	3301      	adds	r3, #1
 80105e8:	429a      	cmp	r2, r3
 80105ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80105f6:	d331      	bcc.n	801065c <quorem+0x9e>
 80105f8:	f04f 0e00 	mov.w	lr, #0
 80105fc:	4640      	mov	r0, r8
 80105fe:	46ac      	mov	ip, r5
 8010600:	46f2      	mov	sl, lr
 8010602:	f850 2b04 	ldr.w	r2, [r0], #4
 8010606:	b293      	uxth	r3, r2
 8010608:	fb06 e303 	mla	r3, r6, r3, lr
 801060c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010610:	b29b      	uxth	r3, r3
 8010612:	ebaa 0303 	sub.w	r3, sl, r3
 8010616:	0c12      	lsrs	r2, r2, #16
 8010618:	f8dc a000 	ldr.w	sl, [ip]
 801061c:	fb06 e202 	mla	r2, r6, r2, lr
 8010620:	fa13 f38a 	uxtah	r3, r3, sl
 8010624:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010628:	fa1f fa82 	uxth.w	sl, r2
 801062c:	f8dc 2000 	ldr.w	r2, [ip]
 8010630:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010638:	b29b      	uxth	r3, r3
 801063a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801063e:	4581      	cmp	r9, r0
 8010640:	f84c 3b04 	str.w	r3, [ip], #4
 8010644:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010648:	d2db      	bcs.n	8010602 <quorem+0x44>
 801064a:	f855 300b 	ldr.w	r3, [r5, fp]
 801064e:	b92b      	cbnz	r3, 801065c <quorem+0x9e>
 8010650:	9b01      	ldr	r3, [sp, #4]
 8010652:	3b04      	subs	r3, #4
 8010654:	429d      	cmp	r5, r3
 8010656:	461a      	mov	r2, r3
 8010658:	d32e      	bcc.n	80106b8 <quorem+0xfa>
 801065a:	613c      	str	r4, [r7, #16]
 801065c:	4638      	mov	r0, r7
 801065e:	f001 f8b1 	bl	80117c4 <__mcmp>
 8010662:	2800      	cmp	r0, #0
 8010664:	db24      	blt.n	80106b0 <quorem+0xf2>
 8010666:	3601      	adds	r6, #1
 8010668:	4628      	mov	r0, r5
 801066a:	f04f 0c00 	mov.w	ip, #0
 801066e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010672:	f8d0 e000 	ldr.w	lr, [r0]
 8010676:	b293      	uxth	r3, r2
 8010678:	ebac 0303 	sub.w	r3, ip, r3
 801067c:	0c12      	lsrs	r2, r2, #16
 801067e:	fa13 f38e 	uxtah	r3, r3, lr
 8010682:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801068a:	b29b      	uxth	r3, r3
 801068c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010690:	45c1      	cmp	r9, r8
 8010692:	f840 3b04 	str.w	r3, [r0], #4
 8010696:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801069a:	d2e8      	bcs.n	801066e <quorem+0xb0>
 801069c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106a4:	b922      	cbnz	r2, 80106b0 <quorem+0xf2>
 80106a6:	3b04      	subs	r3, #4
 80106a8:	429d      	cmp	r5, r3
 80106aa:	461a      	mov	r2, r3
 80106ac:	d30a      	bcc.n	80106c4 <quorem+0x106>
 80106ae:	613c      	str	r4, [r7, #16]
 80106b0:	4630      	mov	r0, r6
 80106b2:	b003      	add	sp, #12
 80106b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b8:	6812      	ldr	r2, [r2, #0]
 80106ba:	3b04      	subs	r3, #4
 80106bc:	2a00      	cmp	r2, #0
 80106be:	d1cc      	bne.n	801065a <quorem+0x9c>
 80106c0:	3c01      	subs	r4, #1
 80106c2:	e7c7      	b.n	8010654 <quorem+0x96>
 80106c4:	6812      	ldr	r2, [r2, #0]
 80106c6:	3b04      	subs	r3, #4
 80106c8:	2a00      	cmp	r2, #0
 80106ca:	d1f0      	bne.n	80106ae <quorem+0xf0>
 80106cc:	3c01      	subs	r4, #1
 80106ce:	e7eb      	b.n	80106a8 <quorem+0xea>
 80106d0:	2000      	movs	r0, #0
 80106d2:	e7ee      	b.n	80106b2 <quorem+0xf4>
 80106d4:	0000      	movs	r0, r0
	...

080106d8 <_dtoa_r>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	ed2d 8b02 	vpush	{d8}
 80106e0:	ec57 6b10 	vmov	r6, r7, d0
 80106e4:	b095      	sub	sp, #84	; 0x54
 80106e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106ec:	9105      	str	r1, [sp, #20]
 80106ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80106f2:	4604      	mov	r4, r0
 80106f4:	9209      	str	r2, [sp, #36]	; 0x24
 80106f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80106f8:	b975      	cbnz	r5, 8010718 <_dtoa_r+0x40>
 80106fa:	2010      	movs	r0, #16
 80106fc:	f000 fddc 	bl	80112b8 <malloc>
 8010700:	4602      	mov	r2, r0
 8010702:	6260      	str	r0, [r4, #36]	; 0x24
 8010704:	b920      	cbnz	r0, 8010710 <_dtoa_r+0x38>
 8010706:	4bb2      	ldr	r3, [pc, #712]	; (80109d0 <_dtoa_r+0x2f8>)
 8010708:	21ea      	movs	r1, #234	; 0xea
 801070a:	48b2      	ldr	r0, [pc, #712]	; (80109d4 <_dtoa_r+0x2fc>)
 801070c:	f001 fb80 	bl	8011e10 <__assert_func>
 8010710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010714:	6005      	str	r5, [r0, #0]
 8010716:	60c5      	str	r5, [r0, #12]
 8010718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801071a:	6819      	ldr	r1, [r3, #0]
 801071c:	b151      	cbz	r1, 8010734 <_dtoa_r+0x5c>
 801071e:	685a      	ldr	r2, [r3, #4]
 8010720:	604a      	str	r2, [r1, #4]
 8010722:	2301      	movs	r3, #1
 8010724:	4093      	lsls	r3, r2
 8010726:	608b      	str	r3, [r1, #8]
 8010728:	4620      	mov	r0, r4
 801072a:	f000 fe0d 	bl	8011348 <_Bfree>
 801072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010730:	2200      	movs	r2, #0
 8010732:	601a      	str	r2, [r3, #0]
 8010734:	1e3b      	subs	r3, r7, #0
 8010736:	bfb9      	ittee	lt
 8010738:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801073c:	9303      	strlt	r3, [sp, #12]
 801073e:	2300      	movge	r3, #0
 8010740:	f8c8 3000 	strge.w	r3, [r8]
 8010744:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010748:	4ba3      	ldr	r3, [pc, #652]	; (80109d8 <_dtoa_r+0x300>)
 801074a:	bfbc      	itt	lt
 801074c:	2201      	movlt	r2, #1
 801074e:	f8c8 2000 	strlt.w	r2, [r8]
 8010752:	ea33 0309 	bics.w	r3, r3, r9
 8010756:	d11b      	bne.n	8010790 <_dtoa_r+0xb8>
 8010758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801075a:	f242 730f 	movw	r3, #9999	; 0x270f
 801075e:	6013      	str	r3, [r2, #0]
 8010760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010764:	4333      	orrs	r3, r6
 8010766:	f000 857a 	beq.w	801125e <_dtoa_r+0xb86>
 801076a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801076c:	b963      	cbnz	r3, 8010788 <_dtoa_r+0xb0>
 801076e:	4b9b      	ldr	r3, [pc, #620]	; (80109dc <_dtoa_r+0x304>)
 8010770:	e024      	b.n	80107bc <_dtoa_r+0xe4>
 8010772:	4b9b      	ldr	r3, [pc, #620]	; (80109e0 <_dtoa_r+0x308>)
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	3308      	adds	r3, #8
 8010778:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	9800      	ldr	r0, [sp, #0]
 801077e:	b015      	add	sp, #84	; 0x54
 8010780:	ecbd 8b02 	vpop	{d8}
 8010784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010788:	4b94      	ldr	r3, [pc, #592]	; (80109dc <_dtoa_r+0x304>)
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	3303      	adds	r3, #3
 801078e:	e7f3      	b.n	8010778 <_dtoa_r+0xa0>
 8010790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010794:	2200      	movs	r2, #0
 8010796:	ec51 0b17 	vmov	r0, r1, d7
 801079a:	2300      	movs	r3, #0
 801079c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80107a0:	f7f0 f9a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80107a4:	4680      	mov	r8, r0
 80107a6:	b158      	cbz	r0, 80107c0 <_dtoa_r+0xe8>
 80107a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80107aa:	2301      	movs	r3, #1
 80107ac:	6013      	str	r3, [r2, #0]
 80107ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 8551 	beq.w	8011258 <_dtoa_r+0xb80>
 80107b6:	488b      	ldr	r0, [pc, #556]	; (80109e4 <_dtoa_r+0x30c>)
 80107b8:	6018      	str	r0, [r3, #0]
 80107ba:	1e43      	subs	r3, r0, #1
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	e7dd      	b.n	801077c <_dtoa_r+0xa4>
 80107c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80107c4:	aa12      	add	r2, sp, #72	; 0x48
 80107c6:	a913      	add	r1, sp, #76	; 0x4c
 80107c8:	4620      	mov	r0, r4
 80107ca:	f001 f89f 	bl	801190c <__d2b>
 80107ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80107d2:	4683      	mov	fp, r0
 80107d4:	2d00      	cmp	r5, #0
 80107d6:	d07c      	beq.n	80108d2 <_dtoa_r+0x1fa>
 80107d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80107de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80107e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107f2:	4b7d      	ldr	r3, [pc, #500]	; (80109e8 <_dtoa_r+0x310>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	f7ef fd55 	bl	80002a8 <__aeabi_dsub>
 80107fe:	a36e      	add	r3, pc, #440	; (adr r3, 80109b8 <_dtoa_r+0x2e0>)
 8010800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010804:	f7ef ff08 	bl	8000618 <__aeabi_dmul>
 8010808:	a36d      	add	r3, pc, #436	; (adr r3, 80109c0 <_dtoa_r+0x2e8>)
 801080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080e:	f7ef fd4d 	bl	80002ac <__adddf3>
 8010812:	4606      	mov	r6, r0
 8010814:	4628      	mov	r0, r5
 8010816:	460f      	mov	r7, r1
 8010818:	f7ef fe94 	bl	8000544 <__aeabi_i2d>
 801081c:	a36a      	add	r3, pc, #424	; (adr r3, 80109c8 <_dtoa_r+0x2f0>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	f7ef fef9 	bl	8000618 <__aeabi_dmul>
 8010826:	4602      	mov	r2, r0
 8010828:	460b      	mov	r3, r1
 801082a:	4630      	mov	r0, r6
 801082c:	4639      	mov	r1, r7
 801082e:	f7ef fd3d 	bl	80002ac <__adddf3>
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	f7f0 f99f 	bl	8000b78 <__aeabi_d2iz>
 801083a:	2200      	movs	r2, #0
 801083c:	4682      	mov	sl, r0
 801083e:	2300      	movs	r3, #0
 8010840:	4630      	mov	r0, r6
 8010842:	4639      	mov	r1, r7
 8010844:	f7f0 f95a 	bl	8000afc <__aeabi_dcmplt>
 8010848:	b148      	cbz	r0, 801085e <_dtoa_r+0x186>
 801084a:	4650      	mov	r0, sl
 801084c:	f7ef fe7a 	bl	8000544 <__aeabi_i2d>
 8010850:	4632      	mov	r2, r6
 8010852:	463b      	mov	r3, r7
 8010854:	f7f0 f948 	bl	8000ae8 <__aeabi_dcmpeq>
 8010858:	b908      	cbnz	r0, 801085e <_dtoa_r+0x186>
 801085a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801085e:	f1ba 0f16 	cmp.w	sl, #22
 8010862:	d854      	bhi.n	801090e <_dtoa_r+0x236>
 8010864:	4b61      	ldr	r3, [pc, #388]	; (80109ec <_dtoa_r+0x314>)
 8010866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010872:	f7f0 f943 	bl	8000afc <__aeabi_dcmplt>
 8010876:	2800      	cmp	r0, #0
 8010878:	d04b      	beq.n	8010912 <_dtoa_r+0x23a>
 801087a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801087e:	2300      	movs	r3, #0
 8010880:	930e      	str	r3, [sp, #56]	; 0x38
 8010882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010884:	1b5d      	subs	r5, r3, r5
 8010886:	1e6b      	subs	r3, r5, #1
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	bf43      	ittte	mi
 801088c:	2300      	movmi	r3, #0
 801088e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010892:	9304      	strmi	r3, [sp, #16]
 8010894:	f04f 0800 	movpl.w	r8, #0
 8010898:	f1ba 0f00 	cmp.w	sl, #0
 801089c:	db3b      	blt.n	8010916 <_dtoa_r+0x23e>
 801089e:	9b04      	ldr	r3, [sp, #16]
 80108a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80108a4:	4453      	add	r3, sl
 80108a6:	9304      	str	r3, [sp, #16]
 80108a8:	2300      	movs	r3, #0
 80108aa:	9306      	str	r3, [sp, #24]
 80108ac:	9b05      	ldr	r3, [sp, #20]
 80108ae:	2b09      	cmp	r3, #9
 80108b0:	d869      	bhi.n	8010986 <_dtoa_r+0x2ae>
 80108b2:	2b05      	cmp	r3, #5
 80108b4:	bfc4      	itt	gt
 80108b6:	3b04      	subgt	r3, #4
 80108b8:	9305      	strgt	r3, [sp, #20]
 80108ba:	9b05      	ldr	r3, [sp, #20]
 80108bc:	f1a3 0302 	sub.w	r3, r3, #2
 80108c0:	bfcc      	ite	gt
 80108c2:	2500      	movgt	r5, #0
 80108c4:	2501      	movle	r5, #1
 80108c6:	2b03      	cmp	r3, #3
 80108c8:	d869      	bhi.n	801099e <_dtoa_r+0x2c6>
 80108ca:	e8df f003 	tbb	[pc, r3]
 80108ce:	4e2c      	.short	0x4e2c
 80108d0:	5a4c      	.short	0x5a4c
 80108d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80108d6:	441d      	add	r5, r3
 80108d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108dc:	2b20      	cmp	r3, #32
 80108de:	bfc1      	itttt	gt
 80108e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80108ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80108f0:	bfda      	itte	le
 80108f2:	f1c3 0320 	rsble	r3, r3, #32
 80108f6:	fa06 f003 	lslle.w	r0, r6, r3
 80108fa:	4318      	orrgt	r0, r3
 80108fc:	f7ef fe12 	bl	8000524 <__aeabi_ui2d>
 8010900:	2301      	movs	r3, #1
 8010902:	4606      	mov	r6, r0
 8010904:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010908:	3d01      	subs	r5, #1
 801090a:	9310      	str	r3, [sp, #64]	; 0x40
 801090c:	e771      	b.n	80107f2 <_dtoa_r+0x11a>
 801090e:	2301      	movs	r3, #1
 8010910:	e7b6      	b.n	8010880 <_dtoa_r+0x1a8>
 8010912:	900e      	str	r0, [sp, #56]	; 0x38
 8010914:	e7b5      	b.n	8010882 <_dtoa_r+0x1aa>
 8010916:	f1ca 0300 	rsb	r3, sl, #0
 801091a:	9306      	str	r3, [sp, #24]
 801091c:	2300      	movs	r3, #0
 801091e:	eba8 080a 	sub.w	r8, r8, sl
 8010922:	930d      	str	r3, [sp, #52]	; 0x34
 8010924:	e7c2      	b.n	80108ac <_dtoa_r+0x1d4>
 8010926:	2300      	movs	r3, #0
 8010928:	9308      	str	r3, [sp, #32]
 801092a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	dc39      	bgt.n	80109a4 <_dtoa_r+0x2cc>
 8010930:	f04f 0901 	mov.w	r9, #1
 8010934:	f8cd 9004 	str.w	r9, [sp, #4]
 8010938:	464b      	mov	r3, r9
 801093a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801093e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010940:	2200      	movs	r2, #0
 8010942:	6042      	str	r2, [r0, #4]
 8010944:	2204      	movs	r2, #4
 8010946:	f102 0614 	add.w	r6, r2, #20
 801094a:	429e      	cmp	r6, r3
 801094c:	6841      	ldr	r1, [r0, #4]
 801094e:	d92f      	bls.n	80109b0 <_dtoa_r+0x2d8>
 8010950:	4620      	mov	r0, r4
 8010952:	f000 fcb9 	bl	80112c8 <_Balloc>
 8010956:	9000      	str	r0, [sp, #0]
 8010958:	2800      	cmp	r0, #0
 801095a:	d14b      	bne.n	80109f4 <_dtoa_r+0x31c>
 801095c:	4b24      	ldr	r3, [pc, #144]	; (80109f0 <_dtoa_r+0x318>)
 801095e:	4602      	mov	r2, r0
 8010960:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010964:	e6d1      	b.n	801070a <_dtoa_r+0x32>
 8010966:	2301      	movs	r3, #1
 8010968:	e7de      	b.n	8010928 <_dtoa_r+0x250>
 801096a:	2300      	movs	r3, #0
 801096c:	9308      	str	r3, [sp, #32]
 801096e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010970:	eb0a 0903 	add.w	r9, sl, r3
 8010974:	f109 0301 	add.w	r3, r9, #1
 8010978:	2b01      	cmp	r3, #1
 801097a:	9301      	str	r3, [sp, #4]
 801097c:	bfb8      	it	lt
 801097e:	2301      	movlt	r3, #1
 8010980:	e7dd      	b.n	801093e <_dtoa_r+0x266>
 8010982:	2301      	movs	r3, #1
 8010984:	e7f2      	b.n	801096c <_dtoa_r+0x294>
 8010986:	2501      	movs	r5, #1
 8010988:	2300      	movs	r3, #0
 801098a:	9305      	str	r3, [sp, #20]
 801098c:	9508      	str	r5, [sp, #32]
 801098e:	f04f 39ff 	mov.w	r9, #4294967295
 8010992:	2200      	movs	r2, #0
 8010994:	f8cd 9004 	str.w	r9, [sp, #4]
 8010998:	2312      	movs	r3, #18
 801099a:	9209      	str	r2, [sp, #36]	; 0x24
 801099c:	e7cf      	b.n	801093e <_dtoa_r+0x266>
 801099e:	2301      	movs	r3, #1
 80109a0:	9308      	str	r3, [sp, #32]
 80109a2:	e7f4      	b.n	801098e <_dtoa_r+0x2b6>
 80109a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80109a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80109ac:	464b      	mov	r3, r9
 80109ae:	e7c6      	b.n	801093e <_dtoa_r+0x266>
 80109b0:	3101      	adds	r1, #1
 80109b2:	6041      	str	r1, [r0, #4]
 80109b4:	0052      	lsls	r2, r2, #1
 80109b6:	e7c6      	b.n	8010946 <_dtoa_r+0x26e>
 80109b8:	636f4361 	.word	0x636f4361
 80109bc:	3fd287a7 	.word	0x3fd287a7
 80109c0:	8b60c8b3 	.word	0x8b60c8b3
 80109c4:	3fc68a28 	.word	0x3fc68a28
 80109c8:	509f79fb 	.word	0x509f79fb
 80109cc:	3fd34413 	.word	0x3fd34413
 80109d0:	08014115 	.word	0x08014115
 80109d4:	0801412c 	.word	0x0801412c
 80109d8:	7ff00000 	.word	0x7ff00000
 80109dc:	08014111 	.word	0x08014111
 80109e0:	08014108 	.word	0x08014108
 80109e4:	080140e5 	.word	0x080140e5
 80109e8:	3ff80000 	.word	0x3ff80000
 80109ec:	08014228 	.word	0x08014228
 80109f0:	0801418b 	.word	0x0801418b
 80109f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109f6:	9a00      	ldr	r2, [sp, #0]
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	2b0e      	cmp	r3, #14
 80109fe:	f200 80ad 	bhi.w	8010b5c <_dtoa_r+0x484>
 8010a02:	2d00      	cmp	r5, #0
 8010a04:	f000 80aa 	beq.w	8010b5c <_dtoa_r+0x484>
 8010a08:	f1ba 0f00 	cmp.w	sl, #0
 8010a0c:	dd36      	ble.n	8010a7c <_dtoa_r+0x3a4>
 8010a0e:	4ac3      	ldr	r2, [pc, #780]	; (8010d1c <_dtoa_r+0x644>)
 8010a10:	f00a 030f 	and.w	r3, sl, #15
 8010a14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a18:	ed93 7b00 	vldr	d7, [r3]
 8010a1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010a20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010a24:	eeb0 8a47 	vmov.f32	s16, s14
 8010a28:	eef0 8a67 	vmov.f32	s17, s15
 8010a2c:	d016      	beq.n	8010a5c <_dtoa_r+0x384>
 8010a2e:	4bbc      	ldr	r3, [pc, #752]	; (8010d20 <_dtoa_r+0x648>)
 8010a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a38:	f7ef ff18 	bl	800086c <__aeabi_ddiv>
 8010a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a40:	f007 070f 	and.w	r7, r7, #15
 8010a44:	2503      	movs	r5, #3
 8010a46:	4eb6      	ldr	r6, [pc, #728]	; (8010d20 <_dtoa_r+0x648>)
 8010a48:	b957      	cbnz	r7, 8010a60 <_dtoa_r+0x388>
 8010a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a4e:	ec53 2b18 	vmov	r2, r3, d8
 8010a52:	f7ef ff0b 	bl	800086c <__aeabi_ddiv>
 8010a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a5a:	e029      	b.n	8010ab0 <_dtoa_r+0x3d8>
 8010a5c:	2502      	movs	r5, #2
 8010a5e:	e7f2      	b.n	8010a46 <_dtoa_r+0x36e>
 8010a60:	07f9      	lsls	r1, r7, #31
 8010a62:	d508      	bpl.n	8010a76 <_dtoa_r+0x39e>
 8010a64:	ec51 0b18 	vmov	r0, r1, d8
 8010a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a6c:	f7ef fdd4 	bl	8000618 <__aeabi_dmul>
 8010a70:	ec41 0b18 	vmov	d8, r0, r1
 8010a74:	3501      	adds	r5, #1
 8010a76:	107f      	asrs	r7, r7, #1
 8010a78:	3608      	adds	r6, #8
 8010a7a:	e7e5      	b.n	8010a48 <_dtoa_r+0x370>
 8010a7c:	f000 80a6 	beq.w	8010bcc <_dtoa_r+0x4f4>
 8010a80:	f1ca 0600 	rsb	r6, sl, #0
 8010a84:	4ba5      	ldr	r3, [pc, #660]	; (8010d1c <_dtoa_r+0x644>)
 8010a86:	4fa6      	ldr	r7, [pc, #664]	; (8010d20 <_dtoa_r+0x648>)
 8010a88:	f006 020f 	and.w	r2, r6, #15
 8010a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a98:	f7ef fdbe 	bl	8000618 <__aeabi_dmul>
 8010a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010aa0:	1136      	asrs	r6, r6, #4
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	2502      	movs	r5, #2
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	f040 8085 	bne.w	8010bb6 <_dtoa_r+0x4de>
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1d2      	bne.n	8010a56 <_dtoa_r+0x37e>
 8010ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f000 808c 	beq.w	8010bd0 <_dtoa_r+0x4f8>
 8010ab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010abc:	4b99      	ldr	r3, [pc, #612]	; (8010d24 <_dtoa_r+0x64c>)
 8010abe:	2200      	movs	r2, #0
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	f7f0 f81a 	bl	8000afc <__aeabi_dcmplt>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	f000 8081 	beq.w	8010bd0 <_dtoa_r+0x4f8>
 8010ace:	9b01      	ldr	r3, [sp, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d07d      	beq.n	8010bd0 <_dtoa_r+0x4f8>
 8010ad4:	f1b9 0f00 	cmp.w	r9, #0
 8010ad8:	dd3c      	ble.n	8010b54 <_dtoa_r+0x47c>
 8010ada:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010ade:	9307      	str	r3, [sp, #28]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	4b91      	ldr	r3, [pc, #580]	; (8010d28 <_dtoa_r+0x650>)
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	4639      	mov	r1, r7
 8010ae8:	f7ef fd96 	bl	8000618 <__aeabi_dmul>
 8010aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010af0:	3501      	adds	r5, #1
 8010af2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010af6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010afa:	4628      	mov	r0, r5
 8010afc:	f7ef fd22 	bl	8000544 <__aeabi_i2d>
 8010b00:	4632      	mov	r2, r6
 8010b02:	463b      	mov	r3, r7
 8010b04:	f7ef fd88 	bl	8000618 <__aeabi_dmul>
 8010b08:	4b88      	ldr	r3, [pc, #544]	; (8010d2c <_dtoa_r+0x654>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f7ef fbce 	bl	80002ac <__adddf3>
 8010b10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b18:	9303      	str	r3, [sp, #12]
 8010b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d15c      	bne.n	8010bda <_dtoa_r+0x502>
 8010b20:	4b83      	ldr	r3, [pc, #524]	; (8010d30 <_dtoa_r+0x658>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	4630      	mov	r0, r6
 8010b26:	4639      	mov	r1, r7
 8010b28:	f7ef fbbe 	bl	80002a8 <__aeabi_dsub>
 8010b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b30:	4606      	mov	r6, r0
 8010b32:	460f      	mov	r7, r1
 8010b34:	f7f0 f800 	bl	8000b38 <__aeabi_dcmpgt>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	f040 8296 	bne.w	801106a <_dtoa_r+0x992>
 8010b3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b42:	4630      	mov	r0, r6
 8010b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b48:	4639      	mov	r1, r7
 8010b4a:	f7ef ffd7 	bl	8000afc <__aeabi_dcmplt>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	f040 8288 	bne.w	8011064 <_dtoa_r+0x98c>
 8010b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f2c0 8158 	blt.w	8010e14 <_dtoa_r+0x73c>
 8010b64:	f1ba 0f0e 	cmp.w	sl, #14
 8010b68:	f300 8154 	bgt.w	8010e14 <_dtoa_r+0x73c>
 8010b6c:	4b6b      	ldr	r3, [pc, #428]	; (8010d1c <_dtoa_r+0x644>)
 8010b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f280 80e3 	bge.w	8010d44 <_dtoa_r+0x66c>
 8010b7e:	9b01      	ldr	r3, [sp, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f300 80df 	bgt.w	8010d44 <_dtoa_r+0x66c>
 8010b86:	f040 826d 	bne.w	8011064 <_dtoa_r+0x98c>
 8010b8a:	4b69      	ldr	r3, [pc, #420]	; (8010d30 <_dtoa_r+0x658>)
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	4640      	mov	r0, r8
 8010b90:	4649      	mov	r1, r9
 8010b92:	f7ef fd41 	bl	8000618 <__aeabi_dmul>
 8010b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b9a:	f7ef ffc3 	bl	8000b24 <__aeabi_dcmpge>
 8010b9e:	9e01      	ldr	r6, [sp, #4]
 8010ba0:	4637      	mov	r7, r6
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f040 8243 	bne.w	801102e <_dtoa_r+0x956>
 8010ba8:	9d00      	ldr	r5, [sp, #0]
 8010baa:	2331      	movs	r3, #49	; 0x31
 8010bac:	f805 3b01 	strb.w	r3, [r5], #1
 8010bb0:	f10a 0a01 	add.w	sl, sl, #1
 8010bb4:	e23f      	b.n	8011036 <_dtoa_r+0x95e>
 8010bb6:	07f2      	lsls	r2, r6, #31
 8010bb8:	d505      	bpl.n	8010bc6 <_dtoa_r+0x4ee>
 8010bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bbe:	f7ef fd2b 	bl	8000618 <__aeabi_dmul>
 8010bc2:	3501      	adds	r5, #1
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	1076      	asrs	r6, r6, #1
 8010bc8:	3708      	adds	r7, #8
 8010bca:	e76c      	b.n	8010aa6 <_dtoa_r+0x3ce>
 8010bcc:	2502      	movs	r5, #2
 8010bce:	e76f      	b.n	8010ab0 <_dtoa_r+0x3d8>
 8010bd0:	9b01      	ldr	r3, [sp, #4]
 8010bd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8010bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd8:	e78d      	b.n	8010af6 <_dtoa_r+0x41e>
 8010bda:	9900      	ldr	r1, [sp, #0]
 8010bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010be0:	4b4e      	ldr	r3, [pc, #312]	; (8010d1c <_dtoa_r+0x644>)
 8010be2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010be6:	4401      	add	r1, r0
 8010be8:	9102      	str	r1, [sp, #8]
 8010bea:	9908      	ldr	r1, [sp, #32]
 8010bec:	eeb0 8a47 	vmov.f32	s16, s14
 8010bf0:	eef0 8a67 	vmov.f32	s17, s15
 8010bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bfc:	2900      	cmp	r1, #0
 8010bfe:	d045      	beq.n	8010c8c <_dtoa_r+0x5b4>
 8010c00:	494c      	ldr	r1, [pc, #304]	; (8010d34 <_dtoa_r+0x65c>)
 8010c02:	2000      	movs	r0, #0
 8010c04:	f7ef fe32 	bl	800086c <__aeabi_ddiv>
 8010c08:	ec53 2b18 	vmov	r2, r3, d8
 8010c0c:	f7ef fb4c 	bl	80002a8 <__aeabi_dsub>
 8010c10:	9d00      	ldr	r5, [sp, #0]
 8010c12:	ec41 0b18 	vmov	d8, r0, r1
 8010c16:	4639      	mov	r1, r7
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f7ef ffad 	bl	8000b78 <__aeabi_d2iz>
 8010c1e:	900c      	str	r0, [sp, #48]	; 0x30
 8010c20:	f7ef fc90 	bl	8000544 <__aeabi_i2d>
 8010c24:	4602      	mov	r2, r0
 8010c26:	460b      	mov	r3, r1
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef fb3c 	bl	80002a8 <__aeabi_dsub>
 8010c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c32:	3330      	adds	r3, #48	; 0x30
 8010c34:	f805 3b01 	strb.w	r3, [r5], #1
 8010c38:	ec53 2b18 	vmov	r2, r3, d8
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	460f      	mov	r7, r1
 8010c40:	f7ef ff5c 	bl	8000afc <__aeabi_dcmplt>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d165      	bne.n	8010d14 <_dtoa_r+0x63c>
 8010c48:	4632      	mov	r2, r6
 8010c4a:	463b      	mov	r3, r7
 8010c4c:	4935      	ldr	r1, [pc, #212]	; (8010d24 <_dtoa_r+0x64c>)
 8010c4e:	2000      	movs	r0, #0
 8010c50:	f7ef fb2a 	bl	80002a8 <__aeabi_dsub>
 8010c54:	ec53 2b18 	vmov	r2, r3, d8
 8010c58:	f7ef ff50 	bl	8000afc <__aeabi_dcmplt>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	f040 80b9 	bne.w	8010dd4 <_dtoa_r+0x6fc>
 8010c62:	9b02      	ldr	r3, [sp, #8]
 8010c64:	429d      	cmp	r5, r3
 8010c66:	f43f af75 	beq.w	8010b54 <_dtoa_r+0x47c>
 8010c6a:	4b2f      	ldr	r3, [pc, #188]	; (8010d28 <_dtoa_r+0x650>)
 8010c6c:	ec51 0b18 	vmov	r0, r1, d8
 8010c70:	2200      	movs	r2, #0
 8010c72:	f7ef fcd1 	bl	8000618 <__aeabi_dmul>
 8010c76:	4b2c      	ldr	r3, [pc, #176]	; (8010d28 <_dtoa_r+0x650>)
 8010c78:	ec41 0b18 	vmov	d8, r0, r1
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	4630      	mov	r0, r6
 8010c80:	4639      	mov	r1, r7
 8010c82:	f7ef fcc9 	bl	8000618 <__aeabi_dmul>
 8010c86:	4606      	mov	r6, r0
 8010c88:	460f      	mov	r7, r1
 8010c8a:	e7c4      	b.n	8010c16 <_dtoa_r+0x53e>
 8010c8c:	ec51 0b17 	vmov	r0, r1, d7
 8010c90:	f7ef fcc2 	bl	8000618 <__aeabi_dmul>
 8010c94:	9b02      	ldr	r3, [sp, #8]
 8010c96:	9d00      	ldr	r5, [sp, #0]
 8010c98:	930c      	str	r3, [sp, #48]	; 0x30
 8010c9a:	ec41 0b18 	vmov	d8, r0, r1
 8010c9e:	4639      	mov	r1, r7
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ef ff69 	bl	8000b78 <__aeabi_d2iz>
 8010ca6:	9011      	str	r0, [sp, #68]	; 0x44
 8010ca8:	f7ef fc4c 	bl	8000544 <__aeabi_i2d>
 8010cac:	4602      	mov	r2, r0
 8010cae:	460b      	mov	r3, r1
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	f7ef faf8 	bl	80002a8 <__aeabi_dsub>
 8010cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cba:	3330      	adds	r3, #48	; 0x30
 8010cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8010cc0:	9b02      	ldr	r3, [sp, #8]
 8010cc2:	429d      	cmp	r5, r3
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	460f      	mov	r7, r1
 8010cc8:	f04f 0200 	mov.w	r2, #0
 8010ccc:	d134      	bne.n	8010d38 <_dtoa_r+0x660>
 8010cce:	4b19      	ldr	r3, [pc, #100]	; (8010d34 <_dtoa_r+0x65c>)
 8010cd0:	ec51 0b18 	vmov	r0, r1, d8
 8010cd4:	f7ef faea 	bl	80002ac <__adddf3>
 8010cd8:	4602      	mov	r2, r0
 8010cda:	460b      	mov	r3, r1
 8010cdc:	4630      	mov	r0, r6
 8010cde:	4639      	mov	r1, r7
 8010ce0:	f7ef ff2a 	bl	8000b38 <__aeabi_dcmpgt>
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d175      	bne.n	8010dd4 <_dtoa_r+0x6fc>
 8010ce8:	ec53 2b18 	vmov	r2, r3, d8
 8010cec:	4911      	ldr	r1, [pc, #68]	; (8010d34 <_dtoa_r+0x65c>)
 8010cee:	2000      	movs	r0, #0
 8010cf0:	f7ef fada 	bl	80002a8 <__aeabi_dsub>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4639      	mov	r1, r7
 8010cfc:	f7ef fefe 	bl	8000afc <__aeabi_dcmplt>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	f43f af27 	beq.w	8010b54 <_dtoa_r+0x47c>
 8010d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d08:	1e6b      	subs	r3, r5, #1
 8010d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d10:	2b30      	cmp	r3, #48	; 0x30
 8010d12:	d0f8      	beq.n	8010d06 <_dtoa_r+0x62e>
 8010d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010d18:	e04a      	b.n	8010db0 <_dtoa_r+0x6d8>
 8010d1a:	bf00      	nop
 8010d1c:	08014228 	.word	0x08014228
 8010d20:	08014200 	.word	0x08014200
 8010d24:	3ff00000 	.word	0x3ff00000
 8010d28:	40240000 	.word	0x40240000
 8010d2c:	401c0000 	.word	0x401c0000
 8010d30:	40140000 	.word	0x40140000
 8010d34:	3fe00000 	.word	0x3fe00000
 8010d38:	4baf      	ldr	r3, [pc, #700]	; (8010ff8 <_dtoa_r+0x920>)
 8010d3a:	f7ef fc6d 	bl	8000618 <__aeabi_dmul>
 8010d3e:	4606      	mov	r6, r0
 8010d40:	460f      	mov	r7, r1
 8010d42:	e7ac      	b.n	8010c9e <_dtoa_r+0x5c6>
 8010d44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d48:	9d00      	ldr	r5, [sp, #0]
 8010d4a:	4642      	mov	r2, r8
 8010d4c:	464b      	mov	r3, r9
 8010d4e:	4630      	mov	r0, r6
 8010d50:	4639      	mov	r1, r7
 8010d52:	f7ef fd8b 	bl	800086c <__aeabi_ddiv>
 8010d56:	f7ef ff0f 	bl	8000b78 <__aeabi_d2iz>
 8010d5a:	9002      	str	r0, [sp, #8]
 8010d5c:	f7ef fbf2 	bl	8000544 <__aeabi_i2d>
 8010d60:	4642      	mov	r2, r8
 8010d62:	464b      	mov	r3, r9
 8010d64:	f7ef fc58 	bl	8000618 <__aeabi_dmul>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	4639      	mov	r1, r7
 8010d70:	f7ef fa9a 	bl	80002a8 <__aeabi_dsub>
 8010d74:	9e02      	ldr	r6, [sp, #8]
 8010d76:	9f01      	ldr	r7, [sp, #4]
 8010d78:	3630      	adds	r6, #48	; 0x30
 8010d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8010d7e:	9e00      	ldr	r6, [sp, #0]
 8010d80:	1bae      	subs	r6, r5, r6
 8010d82:	42b7      	cmp	r7, r6
 8010d84:	4602      	mov	r2, r0
 8010d86:	460b      	mov	r3, r1
 8010d88:	d137      	bne.n	8010dfa <_dtoa_r+0x722>
 8010d8a:	f7ef fa8f 	bl	80002ac <__adddf3>
 8010d8e:	4642      	mov	r2, r8
 8010d90:	464b      	mov	r3, r9
 8010d92:	4606      	mov	r6, r0
 8010d94:	460f      	mov	r7, r1
 8010d96:	f7ef fecf 	bl	8000b38 <__aeabi_dcmpgt>
 8010d9a:	b9c8      	cbnz	r0, 8010dd0 <_dtoa_r+0x6f8>
 8010d9c:	4642      	mov	r2, r8
 8010d9e:	464b      	mov	r3, r9
 8010da0:	4630      	mov	r0, r6
 8010da2:	4639      	mov	r1, r7
 8010da4:	f7ef fea0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010da8:	b110      	cbz	r0, 8010db0 <_dtoa_r+0x6d8>
 8010daa:	9b02      	ldr	r3, [sp, #8]
 8010dac:	07d9      	lsls	r1, r3, #31
 8010dae:	d40f      	bmi.n	8010dd0 <_dtoa_r+0x6f8>
 8010db0:	4620      	mov	r0, r4
 8010db2:	4659      	mov	r1, fp
 8010db4:	f000 fac8 	bl	8011348 <_Bfree>
 8010db8:	2300      	movs	r3, #0
 8010dba:	702b      	strb	r3, [r5, #0]
 8010dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dbe:	f10a 0001 	add.w	r0, sl, #1
 8010dc2:	6018      	str	r0, [r3, #0]
 8010dc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f43f acd8 	beq.w	801077c <_dtoa_r+0xa4>
 8010dcc:	601d      	str	r5, [r3, #0]
 8010dce:	e4d5      	b.n	801077c <_dtoa_r+0xa4>
 8010dd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8010dd4:	462b      	mov	r3, r5
 8010dd6:	461d      	mov	r5, r3
 8010dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ddc:	2a39      	cmp	r2, #57	; 0x39
 8010dde:	d108      	bne.n	8010df2 <_dtoa_r+0x71a>
 8010de0:	9a00      	ldr	r2, [sp, #0]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d1f7      	bne.n	8010dd6 <_dtoa_r+0x6fe>
 8010de6:	9a07      	ldr	r2, [sp, #28]
 8010de8:	9900      	ldr	r1, [sp, #0]
 8010dea:	3201      	adds	r2, #1
 8010dec:	9207      	str	r2, [sp, #28]
 8010dee:	2230      	movs	r2, #48	; 0x30
 8010df0:	700a      	strb	r2, [r1, #0]
 8010df2:	781a      	ldrb	r2, [r3, #0]
 8010df4:	3201      	adds	r2, #1
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	e78c      	b.n	8010d14 <_dtoa_r+0x63c>
 8010dfa:	4b7f      	ldr	r3, [pc, #508]	; (8010ff8 <_dtoa_r+0x920>)
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	f7ef fc0b 	bl	8000618 <__aeabi_dmul>
 8010e02:	2200      	movs	r2, #0
 8010e04:	2300      	movs	r3, #0
 8010e06:	4606      	mov	r6, r0
 8010e08:	460f      	mov	r7, r1
 8010e0a:	f7ef fe6d 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d09b      	beq.n	8010d4a <_dtoa_r+0x672>
 8010e12:	e7cd      	b.n	8010db0 <_dtoa_r+0x6d8>
 8010e14:	9a08      	ldr	r2, [sp, #32]
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	f000 80c4 	beq.w	8010fa4 <_dtoa_r+0x8cc>
 8010e1c:	9a05      	ldr	r2, [sp, #20]
 8010e1e:	2a01      	cmp	r2, #1
 8010e20:	f300 80a8 	bgt.w	8010f74 <_dtoa_r+0x89c>
 8010e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	f000 80a0 	beq.w	8010f6c <_dtoa_r+0x894>
 8010e2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e30:	9e06      	ldr	r6, [sp, #24]
 8010e32:	4645      	mov	r5, r8
 8010e34:	9a04      	ldr	r2, [sp, #16]
 8010e36:	2101      	movs	r1, #1
 8010e38:	441a      	add	r2, r3
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	4498      	add	r8, r3
 8010e3e:	9204      	str	r2, [sp, #16]
 8010e40:	f000 fb3e 	bl	80114c0 <__i2b>
 8010e44:	4607      	mov	r7, r0
 8010e46:	2d00      	cmp	r5, #0
 8010e48:	dd0b      	ble.n	8010e62 <_dtoa_r+0x78a>
 8010e4a:	9b04      	ldr	r3, [sp, #16]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dd08      	ble.n	8010e62 <_dtoa_r+0x78a>
 8010e50:	42ab      	cmp	r3, r5
 8010e52:	9a04      	ldr	r2, [sp, #16]
 8010e54:	bfa8      	it	ge
 8010e56:	462b      	movge	r3, r5
 8010e58:	eba8 0803 	sub.w	r8, r8, r3
 8010e5c:	1aed      	subs	r5, r5, r3
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	9304      	str	r3, [sp, #16]
 8010e62:	9b06      	ldr	r3, [sp, #24]
 8010e64:	b1fb      	cbz	r3, 8010ea6 <_dtoa_r+0x7ce>
 8010e66:	9b08      	ldr	r3, [sp, #32]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 809f 	beq.w	8010fac <_dtoa_r+0x8d4>
 8010e6e:	2e00      	cmp	r6, #0
 8010e70:	dd11      	ble.n	8010e96 <_dtoa_r+0x7be>
 8010e72:	4639      	mov	r1, r7
 8010e74:	4632      	mov	r2, r6
 8010e76:	4620      	mov	r0, r4
 8010e78:	f000 fbde 	bl	8011638 <__pow5mult>
 8010e7c:	465a      	mov	r2, fp
 8010e7e:	4601      	mov	r1, r0
 8010e80:	4607      	mov	r7, r0
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fb32 	bl	80114ec <__multiply>
 8010e88:	4659      	mov	r1, fp
 8010e8a:	9007      	str	r0, [sp, #28]
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f000 fa5b 	bl	8011348 <_Bfree>
 8010e92:	9b07      	ldr	r3, [sp, #28]
 8010e94:	469b      	mov	fp, r3
 8010e96:	9b06      	ldr	r3, [sp, #24]
 8010e98:	1b9a      	subs	r2, r3, r6
 8010e9a:	d004      	beq.n	8010ea6 <_dtoa_r+0x7ce>
 8010e9c:	4659      	mov	r1, fp
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f000 fbca 	bl	8011638 <__pow5mult>
 8010ea4:	4683      	mov	fp, r0
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f000 fb09 	bl	80114c0 <__i2b>
 8010eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	dd7c      	ble.n	8010fb0 <_dtoa_r+0x8d8>
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4601      	mov	r1, r0
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 fbbc 	bl	8011638 <__pow5mult>
 8010ec0:	9b05      	ldr	r3, [sp, #20]
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	dd76      	ble.n	8010fb6 <_dtoa_r+0x8de>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	9306      	str	r3, [sp, #24]
 8010ecc:	6933      	ldr	r3, [r6, #16]
 8010ece:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ed2:	6918      	ldr	r0, [r3, #16]
 8010ed4:	f000 faa4 	bl	8011420 <__hi0bits>
 8010ed8:	f1c0 0020 	rsb	r0, r0, #32
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	4418      	add	r0, r3
 8010ee0:	f010 001f 	ands.w	r0, r0, #31
 8010ee4:	f000 8086 	beq.w	8010ff4 <_dtoa_r+0x91c>
 8010ee8:	f1c0 0320 	rsb	r3, r0, #32
 8010eec:	2b04      	cmp	r3, #4
 8010eee:	dd7f      	ble.n	8010ff0 <_dtoa_r+0x918>
 8010ef0:	f1c0 001c 	rsb	r0, r0, #28
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	4403      	add	r3, r0
 8010ef8:	4480      	add	r8, r0
 8010efa:	4405      	add	r5, r0
 8010efc:	9304      	str	r3, [sp, #16]
 8010efe:	f1b8 0f00 	cmp.w	r8, #0
 8010f02:	dd05      	ble.n	8010f10 <_dtoa_r+0x838>
 8010f04:	4659      	mov	r1, fp
 8010f06:	4642      	mov	r2, r8
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f000 fbef 	bl	80116ec <__lshift>
 8010f0e:	4683      	mov	fp, r0
 8010f10:	9b04      	ldr	r3, [sp, #16]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	dd05      	ble.n	8010f22 <_dtoa_r+0x84a>
 8010f16:	4631      	mov	r1, r6
 8010f18:	461a      	mov	r2, r3
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f000 fbe6 	bl	80116ec <__lshift>
 8010f20:	4606      	mov	r6, r0
 8010f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d069      	beq.n	8010ffc <_dtoa_r+0x924>
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4658      	mov	r0, fp
 8010f2c:	f000 fc4a 	bl	80117c4 <__mcmp>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	da63      	bge.n	8010ffc <_dtoa_r+0x924>
 8010f34:	2300      	movs	r3, #0
 8010f36:	4659      	mov	r1, fp
 8010f38:	220a      	movs	r2, #10
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f000 fa26 	bl	801138c <__multadd>
 8010f40:	9b08      	ldr	r3, [sp, #32]
 8010f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f46:	4683      	mov	fp, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 818f 	beq.w	801126c <_dtoa_r+0xb94>
 8010f4e:	4639      	mov	r1, r7
 8010f50:	2300      	movs	r3, #0
 8010f52:	220a      	movs	r2, #10
 8010f54:	4620      	mov	r0, r4
 8010f56:	f000 fa19 	bl	801138c <__multadd>
 8010f5a:	f1b9 0f00 	cmp.w	r9, #0
 8010f5e:	4607      	mov	r7, r0
 8010f60:	f300 808e 	bgt.w	8011080 <_dtoa_r+0x9a8>
 8010f64:	9b05      	ldr	r3, [sp, #20]
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	dc50      	bgt.n	801100c <_dtoa_r+0x934>
 8010f6a:	e089      	b.n	8011080 <_dtoa_r+0x9a8>
 8010f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f72:	e75d      	b.n	8010e30 <_dtoa_r+0x758>
 8010f74:	9b01      	ldr	r3, [sp, #4]
 8010f76:	1e5e      	subs	r6, r3, #1
 8010f78:	9b06      	ldr	r3, [sp, #24]
 8010f7a:	42b3      	cmp	r3, r6
 8010f7c:	bfbf      	itttt	lt
 8010f7e:	9b06      	ldrlt	r3, [sp, #24]
 8010f80:	9606      	strlt	r6, [sp, #24]
 8010f82:	1af2      	sublt	r2, r6, r3
 8010f84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010f86:	bfb6      	itet	lt
 8010f88:	189b      	addlt	r3, r3, r2
 8010f8a:	1b9e      	subge	r6, r3, r6
 8010f8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	bfb8      	it	lt
 8010f92:	2600      	movlt	r6, #0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	bfb5      	itete	lt
 8010f98:	eba8 0503 	sublt.w	r5, r8, r3
 8010f9c:	9b01      	ldrge	r3, [sp, #4]
 8010f9e:	2300      	movlt	r3, #0
 8010fa0:	4645      	movge	r5, r8
 8010fa2:	e747      	b.n	8010e34 <_dtoa_r+0x75c>
 8010fa4:	9e06      	ldr	r6, [sp, #24]
 8010fa6:	9f08      	ldr	r7, [sp, #32]
 8010fa8:	4645      	mov	r5, r8
 8010faa:	e74c      	b.n	8010e46 <_dtoa_r+0x76e>
 8010fac:	9a06      	ldr	r2, [sp, #24]
 8010fae:	e775      	b.n	8010e9c <_dtoa_r+0x7c4>
 8010fb0:	9b05      	ldr	r3, [sp, #20]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	dc18      	bgt.n	8010fe8 <_dtoa_r+0x910>
 8010fb6:	9b02      	ldr	r3, [sp, #8]
 8010fb8:	b9b3      	cbnz	r3, 8010fe8 <_dtoa_r+0x910>
 8010fba:	9b03      	ldr	r3, [sp, #12]
 8010fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fc0:	b9a3      	cbnz	r3, 8010fec <_dtoa_r+0x914>
 8010fc2:	9b03      	ldr	r3, [sp, #12]
 8010fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fc8:	0d1b      	lsrs	r3, r3, #20
 8010fca:	051b      	lsls	r3, r3, #20
 8010fcc:	b12b      	cbz	r3, 8010fda <_dtoa_r+0x902>
 8010fce:	9b04      	ldr	r3, [sp, #16]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	9304      	str	r3, [sp, #16]
 8010fd4:	f108 0801 	add.w	r8, r8, #1
 8010fd8:	2301      	movs	r3, #1
 8010fda:	9306      	str	r3, [sp, #24]
 8010fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f47f af74 	bne.w	8010ecc <_dtoa_r+0x7f4>
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	e779      	b.n	8010edc <_dtoa_r+0x804>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	e7f6      	b.n	8010fda <_dtoa_r+0x902>
 8010fec:	9b02      	ldr	r3, [sp, #8]
 8010fee:	e7f4      	b.n	8010fda <_dtoa_r+0x902>
 8010ff0:	d085      	beq.n	8010efe <_dtoa_r+0x826>
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	301c      	adds	r0, #28
 8010ff6:	e77d      	b.n	8010ef4 <_dtoa_r+0x81c>
 8010ff8:	40240000 	.word	0x40240000
 8010ffc:	9b01      	ldr	r3, [sp, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	dc38      	bgt.n	8011074 <_dtoa_r+0x99c>
 8011002:	9b05      	ldr	r3, [sp, #20]
 8011004:	2b02      	cmp	r3, #2
 8011006:	dd35      	ble.n	8011074 <_dtoa_r+0x99c>
 8011008:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801100c:	f1b9 0f00 	cmp.w	r9, #0
 8011010:	d10d      	bne.n	801102e <_dtoa_r+0x956>
 8011012:	4631      	mov	r1, r6
 8011014:	464b      	mov	r3, r9
 8011016:	2205      	movs	r2, #5
 8011018:	4620      	mov	r0, r4
 801101a:	f000 f9b7 	bl	801138c <__multadd>
 801101e:	4601      	mov	r1, r0
 8011020:	4606      	mov	r6, r0
 8011022:	4658      	mov	r0, fp
 8011024:	f000 fbce 	bl	80117c4 <__mcmp>
 8011028:	2800      	cmp	r0, #0
 801102a:	f73f adbd 	bgt.w	8010ba8 <_dtoa_r+0x4d0>
 801102e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011030:	9d00      	ldr	r5, [sp, #0]
 8011032:	ea6f 0a03 	mvn.w	sl, r3
 8011036:	f04f 0800 	mov.w	r8, #0
 801103a:	4631      	mov	r1, r6
 801103c:	4620      	mov	r0, r4
 801103e:	f000 f983 	bl	8011348 <_Bfree>
 8011042:	2f00      	cmp	r7, #0
 8011044:	f43f aeb4 	beq.w	8010db0 <_dtoa_r+0x6d8>
 8011048:	f1b8 0f00 	cmp.w	r8, #0
 801104c:	d005      	beq.n	801105a <_dtoa_r+0x982>
 801104e:	45b8      	cmp	r8, r7
 8011050:	d003      	beq.n	801105a <_dtoa_r+0x982>
 8011052:	4641      	mov	r1, r8
 8011054:	4620      	mov	r0, r4
 8011056:	f000 f977 	bl	8011348 <_Bfree>
 801105a:	4639      	mov	r1, r7
 801105c:	4620      	mov	r0, r4
 801105e:	f000 f973 	bl	8011348 <_Bfree>
 8011062:	e6a5      	b.n	8010db0 <_dtoa_r+0x6d8>
 8011064:	2600      	movs	r6, #0
 8011066:	4637      	mov	r7, r6
 8011068:	e7e1      	b.n	801102e <_dtoa_r+0x956>
 801106a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801106c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011070:	4637      	mov	r7, r6
 8011072:	e599      	b.n	8010ba8 <_dtoa_r+0x4d0>
 8011074:	9b08      	ldr	r3, [sp, #32]
 8011076:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	f000 80fd 	beq.w	801127a <_dtoa_r+0xba2>
 8011080:	2d00      	cmp	r5, #0
 8011082:	dd05      	ble.n	8011090 <_dtoa_r+0x9b8>
 8011084:	4639      	mov	r1, r7
 8011086:	462a      	mov	r2, r5
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fb2f 	bl	80116ec <__lshift>
 801108e:	4607      	mov	r7, r0
 8011090:	9b06      	ldr	r3, [sp, #24]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d05c      	beq.n	8011150 <_dtoa_r+0xa78>
 8011096:	6879      	ldr	r1, [r7, #4]
 8011098:	4620      	mov	r0, r4
 801109a:	f000 f915 	bl	80112c8 <_Balloc>
 801109e:	4605      	mov	r5, r0
 80110a0:	b928      	cbnz	r0, 80110ae <_dtoa_r+0x9d6>
 80110a2:	4b80      	ldr	r3, [pc, #512]	; (80112a4 <_dtoa_r+0xbcc>)
 80110a4:	4602      	mov	r2, r0
 80110a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110aa:	f7ff bb2e 	b.w	801070a <_dtoa_r+0x32>
 80110ae:	693a      	ldr	r2, [r7, #16]
 80110b0:	3202      	adds	r2, #2
 80110b2:	0092      	lsls	r2, r2, #2
 80110b4:	f107 010c 	add.w	r1, r7, #12
 80110b8:	300c      	adds	r0, #12
 80110ba:	f7fe fdb9 	bl	800fc30 <memcpy>
 80110be:	2201      	movs	r2, #1
 80110c0:	4629      	mov	r1, r5
 80110c2:	4620      	mov	r0, r4
 80110c4:	f000 fb12 	bl	80116ec <__lshift>
 80110c8:	9b00      	ldr	r3, [sp, #0]
 80110ca:	3301      	adds	r3, #1
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	9b00      	ldr	r3, [sp, #0]
 80110d0:	444b      	add	r3, r9
 80110d2:	9307      	str	r3, [sp, #28]
 80110d4:	9b02      	ldr	r3, [sp, #8]
 80110d6:	f003 0301 	and.w	r3, r3, #1
 80110da:	46b8      	mov	r8, r7
 80110dc:	9306      	str	r3, [sp, #24]
 80110de:	4607      	mov	r7, r0
 80110e0:	9b01      	ldr	r3, [sp, #4]
 80110e2:	4631      	mov	r1, r6
 80110e4:	3b01      	subs	r3, #1
 80110e6:	4658      	mov	r0, fp
 80110e8:	9302      	str	r3, [sp, #8]
 80110ea:	f7ff fa68 	bl	80105be <quorem>
 80110ee:	4603      	mov	r3, r0
 80110f0:	3330      	adds	r3, #48	; 0x30
 80110f2:	9004      	str	r0, [sp, #16]
 80110f4:	4641      	mov	r1, r8
 80110f6:	4658      	mov	r0, fp
 80110f8:	9308      	str	r3, [sp, #32]
 80110fa:	f000 fb63 	bl	80117c4 <__mcmp>
 80110fe:	463a      	mov	r2, r7
 8011100:	4681      	mov	r9, r0
 8011102:	4631      	mov	r1, r6
 8011104:	4620      	mov	r0, r4
 8011106:	f000 fb79 	bl	80117fc <__mdiff>
 801110a:	68c2      	ldr	r2, [r0, #12]
 801110c:	9b08      	ldr	r3, [sp, #32]
 801110e:	4605      	mov	r5, r0
 8011110:	bb02      	cbnz	r2, 8011154 <_dtoa_r+0xa7c>
 8011112:	4601      	mov	r1, r0
 8011114:	4658      	mov	r0, fp
 8011116:	f000 fb55 	bl	80117c4 <__mcmp>
 801111a:	9b08      	ldr	r3, [sp, #32]
 801111c:	4602      	mov	r2, r0
 801111e:	4629      	mov	r1, r5
 8011120:	4620      	mov	r0, r4
 8011122:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011126:	f000 f90f 	bl	8011348 <_Bfree>
 801112a:	9b05      	ldr	r3, [sp, #20]
 801112c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801112e:	9d01      	ldr	r5, [sp, #4]
 8011130:	ea43 0102 	orr.w	r1, r3, r2
 8011134:	9b06      	ldr	r3, [sp, #24]
 8011136:	430b      	orrs	r3, r1
 8011138:	9b08      	ldr	r3, [sp, #32]
 801113a:	d10d      	bne.n	8011158 <_dtoa_r+0xa80>
 801113c:	2b39      	cmp	r3, #57	; 0x39
 801113e:	d029      	beq.n	8011194 <_dtoa_r+0xabc>
 8011140:	f1b9 0f00 	cmp.w	r9, #0
 8011144:	dd01      	ble.n	801114a <_dtoa_r+0xa72>
 8011146:	9b04      	ldr	r3, [sp, #16]
 8011148:	3331      	adds	r3, #49	; 0x31
 801114a:	9a02      	ldr	r2, [sp, #8]
 801114c:	7013      	strb	r3, [r2, #0]
 801114e:	e774      	b.n	801103a <_dtoa_r+0x962>
 8011150:	4638      	mov	r0, r7
 8011152:	e7b9      	b.n	80110c8 <_dtoa_r+0x9f0>
 8011154:	2201      	movs	r2, #1
 8011156:	e7e2      	b.n	801111e <_dtoa_r+0xa46>
 8011158:	f1b9 0f00 	cmp.w	r9, #0
 801115c:	db06      	blt.n	801116c <_dtoa_r+0xa94>
 801115e:	9905      	ldr	r1, [sp, #20]
 8011160:	ea41 0909 	orr.w	r9, r1, r9
 8011164:	9906      	ldr	r1, [sp, #24]
 8011166:	ea59 0101 	orrs.w	r1, r9, r1
 801116a:	d120      	bne.n	80111ae <_dtoa_r+0xad6>
 801116c:	2a00      	cmp	r2, #0
 801116e:	ddec      	ble.n	801114a <_dtoa_r+0xa72>
 8011170:	4659      	mov	r1, fp
 8011172:	2201      	movs	r2, #1
 8011174:	4620      	mov	r0, r4
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	f000 fab8 	bl	80116ec <__lshift>
 801117c:	4631      	mov	r1, r6
 801117e:	4683      	mov	fp, r0
 8011180:	f000 fb20 	bl	80117c4 <__mcmp>
 8011184:	2800      	cmp	r0, #0
 8011186:	9b01      	ldr	r3, [sp, #4]
 8011188:	dc02      	bgt.n	8011190 <_dtoa_r+0xab8>
 801118a:	d1de      	bne.n	801114a <_dtoa_r+0xa72>
 801118c:	07da      	lsls	r2, r3, #31
 801118e:	d5dc      	bpl.n	801114a <_dtoa_r+0xa72>
 8011190:	2b39      	cmp	r3, #57	; 0x39
 8011192:	d1d8      	bne.n	8011146 <_dtoa_r+0xa6e>
 8011194:	9a02      	ldr	r2, [sp, #8]
 8011196:	2339      	movs	r3, #57	; 0x39
 8011198:	7013      	strb	r3, [r2, #0]
 801119a:	462b      	mov	r3, r5
 801119c:	461d      	mov	r5, r3
 801119e:	3b01      	subs	r3, #1
 80111a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111a4:	2a39      	cmp	r2, #57	; 0x39
 80111a6:	d050      	beq.n	801124a <_dtoa_r+0xb72>
 80111a8:	3201      	adds	r2, #1
 80111aa:	701a      	strb	r2, [r3, #0]
 80111ac:	e745      	b.n	801103a <_dtoa_r+0x962>
 80111ae:	2a00      	cmp	r2, #0
 80111b0:	dd03      	ble.n	80111ba <_dtoa_r+0xae2>
 80111b2:	2b39      	cmp	r3, #57	; 0x39
 80111b4:	d0ee      	beq.n	8011194 <_dtoa_r+0xabc>
 80111b6:	3301      	adds	r3, #1
 80111b8:	e7c7      	b.n	801114a <_dtoa_r+0xa72>
 80111ba:	9a01      	ldr	r2, [sp, #4]
 80111bc:	9907      	ldr	r1, [sp, #28]
 80111be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111c2:	428a      	cmp	r2, r1
 80111c4:	d02a      	beq.n	801121c <_dtoa_r+0xb44>
 80111c6:	4659      	mov	r1, fp
 80111c8:	2300      	movs	r3, #0
 80111ca:	220a      	movs	r2, #10
 80111cc:	4620      	mov	r0, r4
 80111ce:	f000 f8dd 	bl	801138c <__multadd>
 80111d2:	45b8      	cmp	r8, r7
 80111d4:	4683      	mov	fp, r0
 80111d6:	f04f 0300 	mov.w	r3, #0
 80111da:	f04f 020a 	mov.w	r2, #10
 80111de:	4641      	mov	r1, r8
 80111e0:	4620      	mov	r0, r4
 80111e2:	d107      	bne.n	80111f4 <_dtoa_r+0xb1c>
 80111e4:	f000 f8d2 	bl	801138c <__multadd>
 80111e8:	4680      	mov	r8, r0
 80111ea:	4607      	mov	r7, r0
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	3301      	adds	r3, #1
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	e775      	b.n	80110e0 <_dtoa_r+0xa08>
 80111f4:	f000 f8ca 	bl	801138c <__multadd>
 80111f8:	4639      	mov	r1, r7
 80111fa:	4680      	mov	r8, r0
 80111fc:	2300      	movs	r3, #0
 80111fe:	220a      	movs	r2, #10
 8011200:	4620      	mov	r0, r4
 8011202:	f000 f8c3 	bl	801138c <__multadd>
 8011206:	4607      	mov	r7, r0
 8011208:	e7f0      	b.n	80111ec <_dtoa_r+0xb14>
 801120a:	f1b9 0f00 	cmp.w	r9, #0
 801120e:	9a00      	ldr	r2, [sp, #0]
 8011210:	bfcc      	ite	gt
 8011212:	464d      	movgt	r5, r9
 8011214:	2501      	movle	r5, #1
 8011216:	4415      	add	r5, r2
 8011218:	f04f 0800 	mov.w	r8, #0
 801121c:	4659      	mov	r1, fp
 801121e:	2201      	movs	r2, #1
 8011220:	4620      	mov	r0, r4
 8011222:	9301      	str	r3, [sp, #4]
 8011224:	f000 fa62 	bl	80116ec <__lshift>
 8011228:	4631      	mov	r1, r6
 801122a:	4683      	mov	fp, r0
 801122c:	f000 faca 	bl	80117c4 <__mcmp>
 8011230:	2800      	cmp	r0, #0
 8011232:	dcb2      	bgt.n	801119a <_dtoa_r+0xac2>
 8011234:	d102      	bne.n	801123c <_dtoa_r+0xb64>
 8011236:	9b01      	ldr	r3, [sp, #4]
 8011238:	07db      	lsls	r3, r3, #31
 801123a:	d4ae      	bmi.n	801119a <_dtoa_r+0xac2>
 801123c:	462b      	mov	r3, r5
 801123e:	461d      	mov	r5, r3
 8011240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011244:	2a30      	cmp	r2, #48	; 0x30
 8011246:	d0fa      	beq.n	801123e <_dtoa_r+0xb66>
 8011248:	e6f7      	b.n	801103a <_dtoa_r+0x962>
 801124a:	9a00      	ldr	r2, [sp, #0]
 801124c:	429a      	cmp	r2, r3
 801124e:	d1a5      	bne.n	801119c <_dtoa_r+0xac4>
 8011250:	f10a 0a01 	add.w	sl, sl, #1
 8011254:	2331      	movs	r3, #49	; 0x31
 8011256:	e779      	b.n	801114c <_dtoa_r+0xa74>
 8011258:	4b13      	ldr	r3, [pc, #76]	; (80112a8 <_dtoa_r+0xbd0>)
 801125a:	f7ff baaf 	b.w	80107bc <_dtoa_r+0xe4>
 801125e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011260:	2b00      	cmp	r3, #0
 8011262:	f47f aa86 	bne.w	8010772 <_dtoa_r+0x9a>
 8011266:	4b11      	ldr	r3, [pc, #68]	; (80112ac <_dtoa_r+0xbd4>)
 8011268:	f7ff baa8 	b.w	80107bc <_dtoa_r+0xe4>
 801126c:	f1b9 0f00 	cmp.w	r9, #0
 8011270:	dc03      	bgt.n	801127a <_dtoa_r+0xba2>
 8011272:	9b05      	ldr	r3, [sp, #20]
 8011274:	2b02      	cmp	r3, #2
 8011276:	f73f aec9 	bgt.w	801100c <_dtoa_r+0x934>
 801127a:	9d00      	ldr	r5, [sp, #0]
 801127c:	4631      	mov	r1, r6
 801127e:	4658      	mov	r0, fp
 8011280:	f7ff f99d 	bl	80105be <quorem>
 8011284:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011288:	f805 3b01 	strb.w	r3, [r5], #1
 801128c:	9a00      	ldr	r2, [sp, #0]
 801128e:	1aaa      	subs	r2, r5, r2
 8011290:	4591      	cmp	r9, r2
 8011292:	ddba      	ble.n	801120a <_dtoa_r+0xb32>
 8011294:	4659      	mov	r1, fp
 8011296:	2300      	movs	r3, #0
 8011298:	220a      	movs	r2, #10
 801129a:	4620      	mov	r0, r4
 801129c:	f000 f876 	bl	801138c <__multadd>
 80112a0:	4683      	mov	fp, r0
 80112a2:	e7eb      	b.n	801127c <_dtoa_r+0xba4>
 80112a4:	0801418b 	.word	0x0801418b
 80112a8:	080140e4 	.word	0x080140e4
 80112ac:	08014108 	.word	0x08014108

080112b0 <_localeconv_r>:
 80112b0:	4800      	ldr	r0, [pc, #0]	; (80112b4 <_localeconv_r+0x4>)
 80112b2:	4770      	bx	lr
 80112b4:	2000016c 	.word	0x2000016c

080112b8 <malloc>:
 80112b8:	4b02      	ldr	r3, [pc, #8]	; (80112c4 <malloc+0xc>)
 80112ba:	4601      	mov	r1, r0
 80112bc:	6818      	ldr	r0, [r3, #0]
 80112be:	f000 bbe1 	b.w	8011a84 <_malloc_r>
 80112c2:	bf00      	nop
 80112c4:	20000018 	.word	0x20000018

080112c8 <_Balloc>:
 80112c8:	b570      	push	{r4, r5, r6, lr}
 80112ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112cc:	4604      	mov	r4, r0
 80112ce:	460d      	mov	r5, r1
 80112d0:	b976      	cbnz	r6, 80112f0 <_Balloc+0x28>
 80112d2:	2010      	movs	r0, #16
 80112d4:	f7ff fff0 	bl	80112b8 <malloc>
 80112d8:	4602      	mov	r2, r0
 80112da:	6260      	str	r0, [r4, #36]	; 0x24
 80112dc:	b920      	cbnz	r0, 80112e8 <_Balloc+0x20>
 80112de:	4b18      	ldr	r3, [pc, #96]	; (8011340 <_Balloc+0x78>)
 80112e0:	4818      	ldr	r0, [pc, #96]	; (8011344 <_Balloc+0x7c>)
 80112e2:	2166      	movs	r1, #102	; 0x66
 80112e4:	f000 fd94 	bl	8011e10 <__assert_func>
 80112e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112ec:	6006      	str	r6, [r0, #0]
 80112ee:	60c6      	str	r6, [r0, #12]
 80112f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80112f2:	68f3      	ldr	r3, [r6, #12]
 80112f4:	b183      	cbz	r3, 8011318 <_Balloc+0x50>
 80112f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112fe:	b9b8      	cbnz	r0, 8011330 <_Balloc+0x68>
 8011300:	2101      	movs	r1, #1
 8011302:	fa01 f605 	lsl.w	r6, r1, r5
 8011306:	1d72      	adds	r2, r6, #5
 8011308:	0092      	lsls	r2, r2, #2
 801130a:	4620      	mov	r0, r4
 801130c:	f000 fb5a 	bl	80119c4 <_calloc_r>
 8011310:	b160      	cbz	r0, 801132c <_Balloc+0x64>
 8011312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011316:	e00e      	b.n	8011336 <_Balloc+0x6e>
 8011318:	2221      	movs	r2, #33	; 0x21
 801131a:	2104      	movs	r1, #4
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fb51 	bl	80119c4 <_calloc_r>
 8011322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011324:	60f0      	str	r0, [r6, #12]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1e4      	bne.n	80112f6 <_Balloc+0x2e>
 801132c:	2000      	movs	r0, #0
 801132e:	bd70      	pop	{r4, r5, r6, pc}
 8011330:	6802      	ldr	r2, [r0, #0]
 8011332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011336:	2300      	movs	r3, #0
 8011338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801133c:	e7f7      	b.n	801132e <_Balloc+0x66>
 801133e:	bf00      	nop
 8011340:	08014115 	.word	0x08014115
 8011344:	0801419c 	.word	0x0801419c

08011348 <_Bfree>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801134c:	4605      	mov	r5, r0
 801134e:	460c      	mov	r4, r1
 8011350:	b976      	cbnz	r6, 8011370 <_Bfree+0x28>
 8011352:	2010      	movs	r0, #16
 8011354:	f7ff ffb0 	bl	80112b8 <malloc>
 8011358:	4602      	mov	r2, r0
 801135a:	6268      	str	r0, [r5, #36]	; 0x24
 801135c:	b920      	cbnz	r0, 8011368 <_Bfree+0x20>
 801135e:	4b09      	ldr	r3, [pc, #36]	; (8011384 <_Bfree+0x3c>)
 8011360:	4809      	ldr	r0, [pc, #36]	; (8011388 <_Bfree+0x40>)
 8011362:	218a      	movs	r1, #138	; 0x8a
 8011364:	f000 fd54 	bl	8011e10 <__assert_func>
 8011368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801136c:	6006      	str	r6, [r0, #0]
 801136e:	60c6      	str	r6, [r0, #12]
 8011370:	b13c      	cbz	r4, 8011382 <_Bfree+0x3a>
 8011372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011374:	6862      	ldr	r2, [r4, #4]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801137c:	6021      	str	r1, [r4, #0]
 801137e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011382:	bd70      	pop	{r4, r5, r6, pc}
 8011384:	08014115 	.word	0x08014115
 8011388:	0801419c 	.word	0x0801419c

0801138c <__multadd>:
 801138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011390:	690e      	ldr	r6, [r1, #16]
 8011392:	4607      	mov	r7, r0
 8011394:	4698      	mov	r8, r3
 8011396:	460c      	mov	r4, r1
 8011398:	f101 0014 	add.w	r0, r1, #20
 801139c:	2300      	movs	r3, #0
 801139e:	6805      	ldr	r5, [r0, #0]
 80113a0:	b2a9      	uxth	r1, r5
 80113a2:	fb02 8101 	mla	r1, r2, r1, r8
 80113a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80113aa:	0c2d      	lsrs	r5, r5, #16
 80113ac:	fb02 c505 	mla	r5, r2, r5, ip
 80113b0:	b289      	uxth	r1, r1
 80113b2:	3301      	adds	r3, #1
 80113b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80113b8:	429e      	cmp	r6, r3
 80113ba:	f840 1b04 	str.w	r1, [r0], #4
 80113be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80113c2:	dcec      	bgt.n	801139e <__multadd+0x12>
 80113c4:	f1b8 0f00 	cmp.w	r8, #0
 80113c8:	d022      	beq.n	8011410 <__multadd+0x84>
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	42b3      	cmp	r3, r6
 80113ce:	dc19      	bgt.n	8011404 <__multadd+0x78>
 80113d0:	6861      	ldr	r1, [r4, #4]
 80113d2:	4638      	mov	r0, r7
 80113d4:	3101      	adds	r1, #1
 80113d6:	f7ff ff77 	bl	80112c8 <_Balloc>
 80113da:	4605      	mov	r5, r0
 80113dc:	b928      	cbnz	r0, 80113ea <__multadd+0x5e>
 80113de:	4602      	mov	r2, r0
 80113e0:	4b0d      	ldr	r3, [pc, #52]	; (8011418 <__multadd+0x8c>)
 80113e2:	480e      	ldr	r0, [pc, #56]	; (801141c <__multadd+0x90>)
 80113e4:	21b5      	movs	r1, #181	; 0xb5
 80113e6:	f000 fd13 	bl	8011e10 <__assert_func>
 80113ea:	6922      	ldr	r2, [r4, #16]
 80113ec:	3202      	adds	r2, #2
 80113ee:	f104 010c 	add.w	r1, r4, #12
 80113f2:	0092      	lsls	r2, r2, #2
 80113f4:	300c      	adds	r0, #12
 80113f6:	f7fe fc1b 	bl	800fc30 <memcpy>
 80113fa:	4621      	mov	r1, r4
 80113fc:	4638      	mov	r0, r7
 80113fe:	f7ff ffa3 	bl	8011348 <_Bfree>
 8011402:	462c      	mov	r4, r5
 8011404:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011408:	3601      	adds	r6, #1
 801140a:	f8c3 8014 	str.w	r8, [r3, #20]
 801140e:	6126      	str	r6, [r4, #16]
 8011410:	4620      	mov	r0, r4
 8011412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011416:	bf00      	nop
 8011418:	0801418b 	.word	0x0801418b
 801141c:	0801419c 	.word	0x0801419c

08011420 <__hi0bits>:
 8011420:	0c03      	lsrs	r3, r0, #16
 8011422:	041b      	lsls	r3, r3, #16
 8011424:	b9d3      	cbnz	r3, 801145c <__hi0bits+0x3c>
 8011426:	0400      	lsls	r0, r0, #16
 8011428:	2310      	movs	r3, #16
 801142a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801142e:	bf04      	itt	eq
 8011430:	0200      	lsleq	r0, r0, #8
 8011432:	3308      	addeq	r3, #8
 8011434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011438:	bf04      	itt	eq
 801143a:	0100      	lsleq	r0, r0, #4
 801143c:	3304      	addeq	r3, #4
 801143e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011442:	bf04      	itt	eq
 8011444:	0080      	lsleq	r0, r0, #2
 8011446:	3302      	addeq	r3, #2
 8011448:	2800      	cmp	r0, #0
 801144a:	db05      	blt.n	8011458 <__hi0bits+0x38>
 801144c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011450:	f103 0301 	add.w	r3, r3, #1
 8011454:	bf08      	it	eq
 8011456:	2320      	moveq	r3, #32
 8011458:	4618      	mov	r0, r3
 801145a:	4770      	bx	lr
 801145c:	2300      	movs	r3, #0
 801145e:	e7e4      	b.n	801142a <__hi0bits+0xa>

08011460 <__lo0bits>:
 8011460:	6803      	ldr	r3, [r0, #0]
 8011462:	f013 0207 	ands.w	r2, r3, #7
 8011466:	4601      	mov	r1, r0
 8011468:	d00b      	beq.n	8011482 <__lo0bits+0x22>
 801146a:	07da      	lsls	r2, r3, #31
 801146c:	d424      	bmi.n	80114b8 <__lo0bits+0x58>
 801146e:	0798      	lsls	r0, r3, #30
 8011470:	bf49      	itett	mi
 8011472:	085b      	lsrmi	r3, r3, #1
 8011474:	089b      	lsrpl	r3, r3, #2
 8011476:	2001      	movmi	r0, #1
 8011478:	600b      	strmi	r3, [r1, #0]
 801147a:	bf5c      	itt	pl
 801147c:	600b      	strpl	r3, [r1, #0]
 801147e:	2002      	movpl	r0, #2
 8011480:	4770      	bx	lr
 8011482:	b298      	uxth	r0, r3
 8011484:	b9b0      	cbnz	r0, 80114b4 <__lo0bits+0x54>
 8011486:	0c1b      	lsrs	r3, r3, #16
 8011488:	2010      	movs	r0, #16
 801148a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801148e:	bf04      	itt	eq
 8011490:	0a1b      	lsreq	r3, r3, #8
 8011492:	3008      	addeq	r0, #8
 8011494:	071a      	lsls	r2, r3, #28
 8011496:	bf04      	itt	eq
 8011498:	091b      	lsreq	r3, r3, #4
 801149a:	3004      	addeq	r0, #4
 801149c:	079a      	lsls	r2, r3, #30
 801149e:	bf04      	itt	eq
 80114a0:	089b      	lsreq	r3, r3, #2
 80114a2:	3002      	addeq	r0, #2
 80114a4:	07da      	lsls	r2, r3, #31
 80114a6:	d403      	bmi.n	80114b0 <__lo0bits+0x50>
 80114a8:	085b      	lsrs	r3, r3, #1
 80114aa:	f100 0001 	add.w	r0, r0, #1
 80114ae:	d005      	beq.n	80114bc <__lo0bits+0x5c>
 80114b0:	600b      	str	r3, [r1, #0]
 80114b2:	4770      	bx	lr
 80114b4:	4610      	mov	r0, r2
 80114b6:	e7e8      	b.n	801148a <__lo0bits+0x2a>
 80114b8:	2000      	movs	r0, #0
 80114ba:	4770      	bx	lr
 80114bc:	2020      	movs	r0, #32
 80114be:	4770      	bx	lr

080114c0 <__i2b>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	460c      	mov	r4, r1
 80114c4:	2101      	movs	r1, #1
 80114c6:	f7ff feff 	bl	80112c8 <_Balloc>
 80114ca:	4602      	mov	r2, r0
 80114cc:	b928      	cbnz	r0, 80114da <__i2b+0x1a>
 80114ce:	4b05      	ldr	r3, [pc, #20]	; (80114e4 <__i2b+0x24>)
 80114d0:	4805      	ldr	r0, [pc, #20]	; (80114e8 <__i2b+0x28>)
 80114d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114d6:	f000 fc9b 	bl	8011e10 <__assert_func>
 80114da:	2301      	movs	r3, #1
 80114dc:	6144      	str	r4, [r0, #20]
 80114de:	6103      	str	r3, [r0, #16]
 80114e0:	bd10      	pop	{r4, pc}
 80114e2:	bf00      	nop
 80114e4:	0801418b 	.word	0x0801418b
 80114e8:	0801419c 	.word	0x0801419c

080114ec <__multiply>:
 80114ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	4614      	mov	r4, r2
 80114f2:	690a      	ldr	r2, [r1, #16]
 80114f4:	6923      	ldr	r3, [r4, #16]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	bfb8      	it	lt
 80114fa:	460b      	movlt	r3, r1
 80114fc:	460d      	mov	r5, r1
 80114fe:	bfbc      	itt	lt
 8011500:	4625      	movlt	r5, r4
 8011502:	461c      	movlt	r4, r3
 8011504:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011508:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801150c:	68ab      	ldr	r3, [r5, #8]
 801150e:	6869      	ldr	r1, [r5, #4]
 8011510:	eb0a 0709 	add.w	r7, sl, r9
 8011514:	42bb      	cmp	r3, r7
 8011516:	b085      	sub	sp, #20
 8011518:	bfb8      	it	lt
 801151a:	3101      	addlt	r1, #1
 801151c:	f7ff fed4 	bl	80112c8 <_Balloc>
 8011520:	b930      	cbnz	r0, 8011530 <__multiply+0x44>
 8011522:	4602      	mov	r2, r0
 8011524:	4b42      	ldr	r3, [pc, #264]	; (8011630 <__multiply+0x144>)
 8011526:	4843      	ldr	r0, [pc, #268]	; (8011634 <__multiply+0x148>)
 8011528:	f240 115d 	movw	r1, #349	; 0x15d
 801152c:	f000 fc70 	bl	8011e10 <__assert_func>
 8011530:	f100 0614 	add.w	r6, r0, #20
 8011534:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011538:	4633      	mov	r3, r6
 801153a:	2200      	movs	r2, #0
 801153c:	4543      	cmp	r3, r8
 801153e:	d31e      	bcc.n	801157e <__multiply+0x92>
 8011540:	f105 0c14 	add.w	ip, r5, #20
 8011544:	f104 0314 	add.w	r3, r4, #20
 8011548:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801154c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011550:	9202      	str	r2, [sp, #8]
 8011552:	ebac 0205 	sub.w	r2, ip, r5
 8011556:	3a15      	subs	r2, #21
 8011558:	f022 0203 	bic.w	r2, r2, #3
 801155c:	3204      	adds	r2, #4
 801155e:	f105 0115 	add.w	r1, r5, #21
 8011562:	458c      	cmp	ip, r1
 8011564:	bf38      	it	cc
 8011566:	2204      	movcc	r2, #4
 8011568:	9201      	str	r2, [sp, #4]
 801156a:	9a02      	ldr	r2, [sp, #8]
 801156c:	9303      	str	r3, [sp, #12]
 801156e:	429a      	cmp	r2, r3
 8011570:	d808      	bhi.n	8011584 <__multiply+0x98>
 8011572:	2f00      	cmp	r7, #0
 8011574:	dc55      	bgt.n	8011622 <__multiply+0x136>
 8011576:	6107      	str	r7, [r0, #16]
 8011578:	b005      	add	sp, #20
 801157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157e:	f843 2b04 	str.w	r2, [r3], #4
 8011582:	e7db      	b.n	801153c <__multiply+0x50>
 8011584:	f8b3 a000 	ldrh.w	sl, [r3]
 8011588:	f1ba 0f00 	cmp.w	sl, #0
 801158c:	d020      	beq.n	80115d0 <__multiply+0xe4>
 801158e:	f105 0e14 	add.w	lr, r5, #20
 8011592:	46b1      	mov	r9, r6
 8011594:	2200      	movs	r2, #0
 8011596:	f85e 4b04 	ldr.w	r4, [lr], #4
 801159a:	f8d9 b000 	ldr.w	fp, [r9]
 801159e:	b2a1      	uxth	r1, r4
 80115a0:	fa1f fb8b 	uxth.w	fp, fp
 80115a4:	fb0a b101 	mla	r1, sl, r1, fp
 80115a8:	4411      	add	r1, r2
 80115aa:	f8d9 2000 	ldr.w	r2, [r9]
 80115ae:	0c24      	lsrs	r4, r4, #16
 80115b0:	0c12      	lsrs	r2, r2, #16
 80115b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80115b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80115ba:	b289      	uxth	r1, r1
 80115bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80115c0:	45f4      	cmp	ip, lr
 80115c2:	f849 1b04 	str.w	r1, [r9], #4
 80115c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80115ca:	d8e4      	bhi.n	8011596 <__multiply+0xaa>
 80115cc:	9901      	ldr	r1, [sp, #4]
 80115ce:	5072      	str	r2, [r6, r1]
 80115d0:	9a03      	ldr	r2, [sp, #12]
 80115d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115d6:	3304      	adds	r3, #4
 80115d8:	f1b9 0f00 	cmp.w	r9, #0
 80115dc:	d01f      	beq.n	801161e <__multiply+0x132>
 80115de:	6834      	ldr	r4, [r6, #0]
 80115e0:	f105 0114 	add.w	r1, r5, #20
 80115e4:	46b6      	mov	lr, r6
 80115e6:	f04f 0a00 	mov.w	sl, #0
 80115ea:	880a      	ldrh	r2, [r1, #0]
 80115ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80115f0:	fb09 b202 	mla	r2, r9, r2, fp
 80115f4:	4492      	add	sl, r2
 80115f6:	b2a4      	uxth	r4, r4
 80115f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80115fc:	f84e 4b04 	str.w	r4, [lr], #4
 8011600:	f851 4b04 	ldr.w	r4, [r1], #4
 8011604:	f8be 2000 	ldrh.w	r2, [lr]
 8011608:	0c24      	lsrs	r4, r4, #16
 801160a:	fb09 2404 	mla	r4, r9, r4, r2
 801160e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011612:	458c      	cmp	ip, r1
 8011614:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011618:	d8e7      	bhi.n	80115ea <__multiply+0xfe>
 801161a:	9a01      	ldr	r2, [sp, #4]
 801161c:	50b4      	str	r4, [r6, r2]
 801161e:	3604      	adds	r6, #4
 8011620:	e7a3      	b.n	801156a <__multiply+0x7e>
 8011622:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1a5      	bne.n	8011576 <__multiply+0x8a>
 801162a:	3f01      	subs	r7, #1
 801162c:	e7a1      	b.n	8011572 <__multiply+0x86>
 801162e:	bf00      	nop
 8011630:	0801418b 	.word	0x0801418b
 8011634:	0801419c 	.word	0x0801419c

08011638 <__pow5mult>:
 8011638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801163c:	4615      	mov	r5, r2
 801163e:	f012 0203 	ands.w	r2, r2, #3
 8011642:	4606      	mov	r6, r0
 8011644:	460f      	mov	r7, r1
 8011646:	d007      	beq.n	8011658 <__pow5mult+0x20>
 8011648:	4c25      	ldr	r4, [pc, #148]	; (80116e0 <__pow5mult+0xa8>)
 801164a:	3a01      	subs	r2, #1
 801164c:	2300      	movs	r3, #0
 801164e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011652:	f7ff fe9b 	bl	801138c <__multadd>
 8011656:	4607      	mov	r7, r0
 8011658:	10ad      	asrs	r5, r5, #2
 801165a:	d03d      	beq.n	80116d8 <__pow5mult+0xa0>
 801165c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801165e:	b97c      	cbnz	r4, 8011680 <__pow5mult+0x48>
 8011660:	2010      	movs	r0, #16
 8011662:	f7ff fe29 	bl	80112b8 <malloc>
 8011666:	4602      	mov	r2, r0
 8011668:	6270      	str	r0, [r6, #36]	; 0x24
 801166a:	b928      	cbnz	r0, 8011678 <__pow5mult+0x40>
 801166c:	4b1d      	ldr	r3, [pc, #116]	; (80116e4 <__pow5mult+0xac>)
 801166e:	481e      	ldr	r0, [pc, #120]	; (80116e8 <__pow5mult+0xb0>)
 8011670:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011674:	f000 fbcc 	bl	8011e10 <__assert_func>
 8011678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801167c:	6004      	str	r4, [r0, #0]
 801167e:	60c4      	str	r4, [r0, #12]
 8011680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011688:	b94c      	cbnz	r4, 801169e <__pow5mult+0x66>
 801168a:	f240 2171 	movw	r1, #625	; 0x271
 801168e:	4630      	mov	r0, r6
 8011690:	f7ff ff16 	bl	80114c0 <__i2b>
 8011694:	2300      	movs	r3, #0
 8011696:	f8c8 0008 	str.w	r0, [r8, #8]
 801169a:	4604      	mov	r4, r0
 801169c:	6003      	str	r3, [r0, #0]
 801169e:	f04f 0900 	mov.w	r9, #0
 80116a2:	07eb      	lsls	r3, r5, #31
 80116a4:	d50a      	bpl.n	80116bc <__pow5mult+0x84>
 80116a6:	4639      	mov	r1, r7
 80116a8:	4622      	mov	r2, r4
 80116aa:	4630      	mov	r0, r6
 80116ac:	f7ff ff1e 	bl	80114ec <__multiply>
 80116b0:	4639      	mov	r1, r7
 80116b2:	4680      	mov	r8, r0
 80116b4:	4630      	mov	r0, r6
 80116b6:	f7ff fe47 	bl	8011348 <_Bfree>
 80116ba:	4647      	mov	r7, r8
 80116bc:	106d      	asrs	r5, r5, #1
 80116be:	d00b      	beq.n	80116d8 <__pow5mult+0xa0>
 80116c0:	6820      	ldr	r0, [r4, #0]
 80116c2:	b938      	cbnz	r0, 80116d4 <__pow5mult+0x9c>
 80116c4:	4622      	mov	r2, r4
 80116c6:	4621      	mov	r1, r4
 80116c8:	4630      	mov	r0, r6
 80116ca:	f7ff ff0f 	bl	80114ec <__multiply>
 80116ce:	6020      	str	r0, [r4, #0]
 80116d0:	f8c0 9000 	str.w	r9, [r0]
 80116d4:	4604      	mov	r4, r0
 80116d6:	e7e4      	b.n	80116a2 <__pow5mult+0x6a>
 80116d8:	4638      	mov	r0, r7
 80116da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116de:	bf00      	nop
 80116e0:	080142f0 	.word	0x080142f0
 80116e4:	08014115 	.word	0x08014115
 80116e8:	0801419c 	.word	0x0801419c

080116ec <__lshift>:
 80116ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f0:	460c      	mov	r4, r1
 80116f2:	6849      	ldr	r1, [r1, #4]
 80116f4:	6923      	ldr	r3, [r4, #16]
 80116f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116fa:	68a3      	ldr	r3, [r4, #8]
 80116fc:	4607      	mov	r7, r0
 80116fe:	4691      	mov	r9, r2
 8011700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011704:	f108 0601 	add.w	r6, r8, #1
 8011708:	42b3      	cmp	r3, r6
 801170a:	db0b      	blt.n	8011724 <__lshift+0x38>
 801170c:	4638      	mov	r0, r7
 801170e:	f7ff fddb 	bl	80112c8 <_Balloc>
 8011712:	4605      	mov	r5, r0
 8011714:	b948      	cbnz	r0, 801172a <__lshift+0x3e>
 8011716:	4602      	mov	r2, r0
 8011718:	4b28      	ldr	r3, [pc, #160]	; (80117bc <__lshift+0xd0>)
 801171a:	4829      	ldr	r0, [pc, #164]	; (80117c0 <__lshift+0xd4>)
 801171c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011720:	f000 fb76 	bl	8011e10 <__assert_func>
 8011724:	3101      	adds	r1, #1
 8011726:	005b      	lsls	r3, r3, #1
 8011728:	e7ee      	b.n	8011708 <__lshift+0x1c>
 801172a:	2300      	movs	r3, #0
 801172c:	f100 0114 	add.w	r1, r0, #20
 8011730:	f100 0210 	add.w	r2, r0, #16
 8011734:	4618      	mov	r0, r3
 8011736:	4553      	cmp	r3, sl
 8011738:	db33      	blt.n	80117a2 <__lshift+0xb6>
 801173a:	6920      	ldr	r0, [r4, #16]
 801173c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011740:	f104 0314 	add.w	r3, r4, #20
 8011744:	f019 091f 	ands.w	r9, r9, #31
 8011748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801174c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011750:	d02b      	beq.n	80117aa <__lshift+0xbe>
 8011752:	f1c9 0e20 	rsb	lr, r9, #32
 8011756:	468a      	mov	sl, r1
 8011758:	2200      	movs	r2, #0
 801175a:	6818      	ldr	r0, [r3, #0]
 801175c:	fa00 f009 	lsl.w	r0, r0, r9
 8011760:	4302      	orrs	r2, r0
 8011762:	f84a 2b04 	str.w	r2, [sl], #4
 8011766:	f853 2b04 	ldr.w	r2, [r3], #4
 801176a:	459c      	cmp	ip, r3
 801176c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011770:	d8f3      	bhi.n	801175a <__lshift+0x6e>
 8011772:	ebac 0304 	sub.w	r3, ip, r4
 8011776:	3b15      	subs	r3, #21
 8011778:	f023 0303 	bic.w	r3, r3, #3
 801177c:	3304      	adds	r3, #4
 801177e:	f104 0015 	add.w	r0, r4, #21
 8011782:	4584      	cmp	ip, r0
 8011784:	bf38      	it	cc
 8011786:	2304      	movcc	r3, #4
 8011788:	50ca      	str	r2, [r1, r3]
 801178a:	b10a      	cbz	r2, 8011790 <__lshift+0xa4>
 801178c:	f108 0602 	add.w	r6, r8, #2
 8011790:	3e01      	subs	r6, #1
 8011792:	4638      	mov	r0, r7
 8011794:	612e      	str	r6, [r5, #16]
 8011796:	4621      	mov	r1, r4
 8011798:	f7ff fdd6 	bl	8011348 <_Bfree>
 801179c:	4628      	mov	r0, r5
 801179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80117a6:	3301      	adds	r3, #1
 80117a8:	e7c5      	b.n	8011736 <__lshift+0x4a>
 80117aa:	3904      	subs	r1, #4
 80117ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80117b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80117b4:	459c      	cmp	ip, r3
 80117b6:	d8f9      	bhi.n	80117ac <__lshift+0xc0>
 80117b8:	e7ea      	b.n	8011790 <__lshift+0xa4>
 80117ba:	bf00      	nop
 80117bc:	0801418b 	.word	0x0801418b
 80117c0:	0801419c 	.word	0x0801419c

080117c4 <__mcmp>:
 80117c4:	b530      	push	{r4, r5, lr}
 80117c6:	6902      	ldr	r2, [r0, #16]
 80117c8:	690c      	ldr	r4, [r1, #16]
 80117ca:	1b12      	subs	r2, r2, r4
 80117cc:	d10e      	bne.n	80117ec <__mcmp+0x28>
 80117ce:	f100 0314 	add.w	r3, r0, #20
 80117d2:	3114      	adds	r1, #20
 80117d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117e4:	42a5      	cmp	r5, r4
 80117e6:	d003      	beq.n	80117f0 <__mcmp+0x2c>
 80117e8:	d305      	bcc.n	80117f6 <__mcmp+0x32>
 80117ea:	2201      	movs	r2, #1
 80117ec:	4610      	mov	r0, r2
 80117ee:	bd30      	pop	{r4, r5, pc}
 80117f0:	4283      	cmp	r3, r0
 80117f2:	d3f3      	bcc.n	80117dc <__mcmp+0x18>
 80117f4:	e7fa      	b.n	80117ec <__mcmp+0x28>
 80117f6:	f04f 32ff 	mov.w	r2, #4294967295
 80117fa:	e7f7      	b.n	80117ec <__mcmp+0x28>

080117fc <__mdiff>:
 80117fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011800:	460c      	mov	r4, r1
 8011802:	4606      	mov	r6, r0
 8011804:	4611      	mov	r1, r2
 8011806:	4620      	mov	r0, r4
 8011808:	4617      	mov	r7, r2
 801180a:	f7ff ffdb 	bl	80117c4 <__mcmp>
 801180e:	1e05      	subs	r5, r0, #0
 8011810:	d110      	bne.n	8011834 <__mdiff+0x38>
 8011812:	4629      	mov	r1, r5
 8011814:	4630      	mov	r0, r6
 8011816:	f7ff fd57 	bl	80112c8 <_Balloc>
 801181a:	b930      	cbnz	r0, 801182a <__mdiff+0x2e>
 801181c:	4b39      	ldr	r3, [pc, #228]	; (8011904 <__mdiff+0x108>)
 801181e:	4602      	mov	r2, r0
 8011820:	f240 2132 	movw	r1, #562	; 0x232
 8011824:	4838      	ldr	r0, [pc, #224]	; (8011908 <__mdiff+0x10c>)
 8011826:	f000 faf3 	bl	8011e10 <__assert_func>
 801182a:	2301      	movs	r3, #1
 801182c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	bfa4      	itt	ge
 8011836:	463b      	movge	r3, r7
 8011838:	4627      	movge	r7, r4
 801183a:	4630      	mov	r0, r6
 801183c:	6879      	ldr	r1, [r7, #4]
 801183e:	bfa6      	itte	ge
 8011840:	461c      	movge	r4, r3
 8011842:	2500      	movge	r5, #0
 8011844:	2501      	movlt	r5, #1
 8011846:	f7ff fd3f 	bl	80112c8 <_Balloc>
 801184a:	b920      	cbnz	r0, 8011856 <__mdiff+0x5a>
 801184c:	4b2d      	ldr	r3, [pc, #180]	; (8011904 <__mdiff+0x108>)
 801184e:	4602      	mov	r2, r0
 8011850:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011854:	e7e6      	b.n	8011824 <__mdiff+0x28>
 8011856:	693e      	ldr	r6, [r7, #16]
 8011858:	60c5      	str	r5, [r0, #12]
 801185a:	6925      	ldr	r5, [r4, #16]
 801185c:	f107 0114 	add.w	r1, r7, #20
 8011860:	f104 0914 	add.w	r9, r4, #20
 8011864:	f100 0e14 	add.w	lr, r0, #20
 8011868:	f107 0210 	add.w	r2, r7, #16
 801186c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011870:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011874:	46f2      	mov	sl, lr
 8011876:	2700      	movs	r7, #0
 8011878:	f859 3b04 	ldr.w	r3, [r9], #4
 801187c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011880:	fa1f f883 	uxth.w	r8, r3
 8011884:	fa17 f78b 	uxtah	r7, r7, fp
 8011888:	0c1b      	lsrs	r3, r3, #16
 801188a:	eba7 0808 	sub.w	r8, r7, r8
 801188e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011892:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011896:	fa1f f888 	uxth.w	r8, r8
 801189a:	141f      	asrs	r7, r3, #16
 801189c:	454d      	cmp	r5, r9
 801189e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80118a2:	f84a 3b04 	str.w	r3, [sl], #4
 80118a6:	d8e7      	bhi.n	8011878 <__mdiff+0x7c>
 80118a8:	1b2b      	subs	r3, r5, r4
 80118aa:	3b15      	subs	r3, #21
 80118ac:	f023 0303 	bic.w	r3, r3, #3
 80118b0:	3304      	adds	r3, #4
 80118b2:	3415      	adds	r4, #21
 80118b4:	42a5      	cmp	r5, r4
 80118b6:	bf38      	it	cc
 80118b8:	2304      	movcc	r3, #4
 80118ba:	4419      	add	r1, r3
 80118bc:	4473      	add	r3, lr
 80118be:	469e      	mov	lr, r3
 80118c0:	460d      	mov	r5, r1
 80118c2:	4565      	cmp	r5, ip
 80118c4:	d30e      	bcc.n	80118e4 <__mdiff+0xe8>
 80118c6:	f10c 0203 	add.w	r2, ip, #3
 80118ca:	1a52      	subs	r2, r2, r1
 80118cc:	f022 0203 	bic.w	r2, r2, #3
 80118d0:	3903      	subs	r1, #3
 80118d2:	458c      	cmp	ip, r1
 80118d4:	bf38      	it	cc
 80118d6:	2200      	movcc	r2, #0
 80118d8:	441a      	add	r2, r3
 80118da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80118de:	b17b      	cbz	r3, 8011900 <__mdiff+0x104>
 80118e0:	6106      	str	r6, [r0, #16]
 80118e2:	e7a5      	b.n	8011830 <__mdiff+0x34>
 80118e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80118e8:	fa17 f488 	uxtah	r4, r7, r8
 80118ec:	1422      	asrs	r2, r4, #16
 80118ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80118f2:	b2a4      	uxth	r4, r4
 80118f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80118f8:	f84e 4b04 	str.w	r4, [lr], #4
 80118fc:	1417      	asrs	r7, r2, #16
 80118fe:	e7e0      	b.n	80118c2 <__mdiff+0xc6>
 8011900:	3e01      	subs	r6, #1
 8011902:	e7ea      	b.n	80118da <__mdiff+0xde>
 8011904:	0801418b 	.word	0x0801418b
 8011908:	0801419c 	.word	0x0801419c

0801190c <__d2b>:
 801190c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011910:	4689      	mov	r9, r1
 8011912:	2101      	movs	r1, #1
 8011914:	ec57 6b10 	vmov	r6, r7, d0
 8011918:	4690      	mov	r8, r2
 801191a:	f7ff fcd5 	bl	80112c8 <_Balloc>
 801191e:	4604      	mov	r4, r0
 8011920:	b930      	cbnz	r0, 8011930 <__d2b+0x24>
 8011922:	4602      	mov	r2, r0
 8011924:	4b25      	ldr	r3, [pc, #148]	; (80119bc <__d2b+0xb0>)
 8011926:	4826      	ldr	r0, [pc, #152]	; (80119c0 <__d2b+0xb4>)
 8011928:	f240 310a 	movw	r1, #778	; 0x30a
 801192c:	f000 fa70 	bl	8011e10 <__assert_func>
 8011930:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011934:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011938:	bb35      	cbnz	r5, 8011988 <__d2b+0x7c>
 801193a:	2e00      	cmp	r6, #0
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	d028      	beq.n	8011992 <__d2b+0x86>
 8011940:	4668      	mov	r0, sp
 8011942:	9600      	str	r6, [sp, #0]
 8011944:	f7ff fd8c 	bl	8011460 <__lo0bits>
 8011948:	9900      	ldr	r1, [sp, #0]
 801194a:	b300      	cbz	r0, 801198e <__d2b+0x82>
 801194c:	9a01      	ldr	r2, [sp, #4]
 801194e:	f1c0 0320 	rsb	r3, r0, #32
 8011952:	fa02 f303 	lsl.w	r3, r2, r3
 8011956:	430b      	orrs	r3, r1
 8011958:	40c2      	lsrs	r2, r0
 801195a:	6163      	str	r3, [r4, #20]
 801195c:	9201      	str	r2, [sp, #4]
 801195e:	9b01      	ldr	r3, [sp, #4]
 8011960:	61a3      	str	r3, [r4, #24]
 8011962:	2b00      	cmp	r3, #0
 8011964:	bf14      	ite	ne
 8011966:	2202      	movne	r2, #2
 8011968:	2201      	moveq	r2, #1
 801196a:	6122      	str	r2, [r4, #16]
 801196c:	b1d5      	cbz	r5, 80119a4 <__d2b+0x98>
 801196e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011972:	4405      	add	r5, r0
 8011974:	f8c9 5000 	str.w	r5, [r9]
 8011978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801197c:	f8c8 0000 	str.w	r0, [r8]
 8011980:	4620      	mov	r0, r4
 8011982:	b003      	add	sp, #12
 8011984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801198c:	e7d5      	b.n	801193a <__d2b+0x2e>
 801198e:	6161      	str	r1, [r4, #20]
 8011990:	e7e5      	b.n	801195e <__d2b+0x52>
 8011992:	a801      	add	r0, sp, #4
 8011994:	f7ff fd64 	bl	8011460 <__lo0bits>
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	6163      	str	r3, [r4, #20]
 801199c:	2201      	movs	r2, #1
 801199e:	6122      	str	r2, [r4, #16]
 80119a0:	3020      	adds	r0, #32
 80119a2:	e7e3      	b.n	801196c <__d2b+0x60>
 80119a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119ac:	f8c9 0000 	str.w	r0, [r9]
 80119b0:	6918      	ldr	r0, [r3, #16]
 80119b2:	f7ff fd35 	bl	8011420 <__hi0bits>
 80119b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119ba:	e7df      	b.n	801197c <__d2b+0x70>
 80119bc:	0801418b 	.word	0x0801418b
 80119c0:	0801419c 	.word	0x0801419c

080119c4 <_calloc_r>:
 80119c4:	b513      	push	{r0, r1, r4, lr}
 80119c6:	434a      	muls	r2, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	9201      	str	r2, [sp, #4]
 80119cc:	f000 f85a 	bl	8011a84 <_malloc_r>
 80119d0:	4604      	mov	r4, r0
 80119d2:	b118      	cbz	r0, 80119dc <_calloc_r+0x18>
 80119d4:	9a01      	ldr	r2, [sp, #4]
 80119d6:	2100      	movs	r1, #0
 80119d8:	f7fe f938 	bl	800fc4c <memset>
 80119dc:	4620      	mov	r0, r4
 80119de:	b002      	add	sp, #8
 80119e0:	bd10      	pop	{r4, pc}
	...

080119e4 <_free_r>:
 80119e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119e6:	2900      	cmp	r1, #0
 80119e8:	d048      	beq.n	8011a7c <_free_r+0x98>
 80119ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ee:	9001      	str	r0, [sp, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f1a1 0404 	sub.w	r4, r1, #4
 80119f6:	bfb8      	it	lt
 80119f8:	18e4      	addlt	r4, r4, r3
 80119fa:	f000 fa65 	bl	8011ec8 <__malloc_lock>
 80119fe:	4a20      	ldr	r2, [pc, #128]	; (8011a80 <_free_r+0x9c>)
 8011a00:	9801      	ldr	r0, [sp, #4]
 8011a02:	6813      	ldr	r3, [r2, #0]
 8011a04:	4615      	mov	r5, r2
 8011a06:	b933      	cbnz	r3, 8011a16 <_free_r+0x32>
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	6014      	str	r4, [r2, #0]
 8011a0c:	b003      	add	sp, #12
 8011a0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a12:	f000 ba5f 	b.w	8011ed4 <__malloc_unlock>
 8011a16:	42a3      	cmp	r3, r4
 8011a18:	d90b      	bls.n	8011a32 <_free_r+0x4e>
 8011a1a:	6821      	ldr	r1, [r4, #0]
 8011a1c:	1862      	adds	r2, r4, r1
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bf04      	itt	eq
 8011a22:	681a      	ldreq	r2, [r3, #0]
 8011a24:	685b      	ldreq	r3, [r3, #4]
 8011a26:	6063      	str	r3, [r4, #4]
 8011a28:	bf04      	itt	eq
 8011a2a:	1852      	addeq	r2, r2, r1
 8011a2c:	6022      	streq	r2, [r4, #0]
 8011a2e:	602c      	str	r4, [r5, #0]
 8011a30:	e7ec      	b.n	8011a0c <_free_r+0x28>
 8011a32:	461a      	mov	r2, r3
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	b10b      	cbz	r3, 8011a3c <_free_r+0x58>
 8011a38:	42a3      	cmp	r3, r4
 8011a3a:	d9fa      	bls.n	8011a32 <_free_r+0x4e>
 8011a3c:	6811      	ldr	r1, [r2, #0]
 8011a3e:	1855      	adds	r5, r2, r1
 8011a40:	42a5      	cmp	r5, r4
 8011a42:	d10b      	bne.n	8011a5c <_free_r+0x78>
 8011a44:	6824      	ldr	r4, [r4, #0]
 8011a46:	4421      	add	r1, r4
 8011a48:	1854      	adds	r4, r2, r1
 8011a4a:	42a3      	cmp	r3, r4
 8011a4c:	6011      	str	r1, [r2, #0]
 8011a4e:	d1dd      	bne.n	8011a0c <_free_r+0x28>
 8011a50:	681c      	ldr	r4, [r3, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	6053      	str	r3, [r2, #4]
 8011a56:	4421      	add	r1, r4
 8011a58:	6011      	str	r1, [r2, #0]
 8011a5a:	e7d7      	b.n	8011a0c <_free_r+0x28>
 8011a5c:	d902      	bls.n	8011a64 <_free_r+0x80>
 8011a5e:	230c      	movs	r3, #12
 8011a60:	6003      	str	r3, [r0, #0]
 8011a62:	e7d3      	b.n	8011a0c <_free_r+0x28>
 8011a64:	6825      	ldr	r5, [r4, #0]
 8011a66:	1961      	adds	r1, r4, r5
 8011a68:	428b      	cmp	r3, r1
 8011a6a:	bf04      	itt	eq
 8011a6c:	6819      	ldreq	r1, [r3, #0]
 8011a6e:	685b      	ldreq	r3, [r3, #4]
 8011a70:	6063      	str	r3, [r4, #4]
 8011a72:	bf04      	itt	eq
 8011a74:	1949      	addeq	r1, r1, r5
 8011a76:	6021      	streq	r1, [r4, #0]
 8011a78:	6054      	str	r4, [r2, #4]
 8011a7a:	e7c7      	b.n	8011a0c <_free_r+0x28>
 8011a7c:	b003      	add	sp, #12
 8011a7e:	bd30      	pop	{r4, r5, pc}
 8011a80:	20005388 	.word	0x20005388

08011a84 <_malloc_r>:
 8011a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a86:	1ccd      	adds	r5, r1, #3
 8011a88:	f025 0503 	bic.w	r5, r5, #3
 8011a8c:	3508      	adds	r5, #8
 8011a8e:	2d0c      	cmp	r5, #12
 8011a90:	bf38      	it	cc
 8011a92:	250c      	movcc	r5, #12
 8011a94:	2d00      	cmp	r5, #0
 8011a96:	4606      	mov	r6, r0
 8011a98:	db01      	blt.n	8011a9e <_malloc_r+0x1a>
 8011a9a:	42a9      	cmp	r1, r5
 8011a9c:	d903      	bls.n	8011aa6 <_malloc_r+0x22>
 8011a9e:	230c      	movs	r3, #12
 8011aa0:	6033      	str	r3, [r6, #0]
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa6:	f000 fa0f 	bl	8011ec8 <__malloc_lock>
 8011aaa:	4921      	ldr	r1, [pc, #132]	; (8011b30 <_malloc_r+0xac>)
 8011aac:	680a      	ldr	r2, [r1, #0]
 8011aae:	4614      	mov	r4, r2
 8011ab0:	b99c      	cbnz	r4, 8011ada <_malloc_r+0x56>
 8011ab2:	4f20      	ldr	r7, [pc, #128]	; (8011b34 <_malloc_r+0xb0>)
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	b923      	cbnz	r3, 8011ac2 <_malloc_r+0x3e>
 8011ab8:	4621      	mov	r1, r4
 8011aba:	4630      	mov	r0, r6
 8011abc:	f000 f998 	bl	8011df0 <_sbrk_r>
 8011ac0:	6038      	str	r0, [r7, #0]
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	f000 f993 	bl	8011df0 <_sbrk_r>
 8011aca:	1c43      	adds	r3, r0, #1
 8011acc:	d123      	bne.n	8011b16 <_malloc_r+0x92>
 8011ace:	230c      	movs	r3, #12
 8011ad0:	6033      	str	r3, [r6, #0]
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f000 f9fe 	bl	8011ed4 <__malloc_unlock>
 8011ad8:	e7e3      	b.n	8011aa2 <_malloc_r+0x1e>
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	1b5b      	subs	r3, r3, r5
 8011ade:	d417      	bmi.n	8011b10 <_malloc_r+0x8c>
 8011ae0:	2b0b      	cmp	r3, #11
 8011ae2:	d903      	bls.n	8011aec <_malloc_r+0x68>
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	441c      	add	r4, r3
 8011ae8:	6025      	str	r5, [r4, #0]
 8011aea:	e004      	b.n	8011af6 <_malloc_r+0x72>
 8011aec:	6863      	ldr	r3, [r4, #4]
 8011aee:	42a2      	cmp	r2, r4
 8011af0:	bf0c      	ite	eq
 8011af2:	600b      	streq	r3, [r1, #0]
 8011af4:	6053      	strne	r3, [r2, #4]
 8011af6:	4630      	mov	r0, r6
 8011af8:	f000 f9ec 	bl	8011ed4 <__malloc_unlock>
 8011afc:	f104 000b 	add.w	r0, r4, #11
 8011b00:	1d23      	adds	r3, r4, #4
 8011b02:	f020 0007 	bic.w	r0, r0, #7
 8011b06:	1ac2      	subs	r2, r0, r3
 8011b08:	d0cc      	beq.n	8011aa4 <_malloc_r+0x20>
 8011b0a:	1a1b      	subs	r3, r3, r0
 8011b0c:	50a3      	str	r3, [r4, r2]
 8011b0e:	e7c9      	b.n	8011aa4 <_malloc_r+0x20>
 8011b10:	4622      	mov	r2, r4
 8011b12:	6864      	ldr	r4, [r4, #4]
 8011b14:	e7cc      	b.n	8011ab0 <_malloc_r+0x2c>
 8011b16:	1cc4      	adds	r4, r0, #3
 8011b18:	f024 0403 	bic.w	r4, r4, #3
 8011b1c:	42a0      	cmp	r0, r4
 8011b1e:	d0e3      	beq.n	8011ae8 <_malloc_r+0x64>
 8011b20:	1a21      	subs	r1, r4, r0
 8011b22:	4630      	mov	r0, r6
 8011b24:	f000 f964 	bl	8011df0 <_sbrk_r>
 8011b28:	3001      	adds	r0, #1
 8011b2a:	d1dd      	bne.n	8011ae8 <_malloc_r+0x64>
 8011b2c:	e7cf      	b.n	8011ace <_malloc_r+0x4a>
 8011b2e:	bf00      	nop
 8011b30:	20005388 	.word	0x20005388
 8011b34:	2000538c 	.word	0x2000538c

08011b38 <__ssputs_r>:
 8011b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3c:	688e      	ldr	r6, [r1, #8]
 8011b3e:	429e      	cmp	r6, r3
 8011b40:	4682      	mov	sl, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	4690      	mov	r8, r2
 8011b46:	461f      	mov	r7, r3
 8011b48:	d838      	bhi.n	8011bbc <__ssputs_r+0x84>
 8011b4a:	898a      	ldrh	r2, [r1, #12]
 8011b4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b50:	d032      	beq.n	8011bb8 <__ssputs_r+0x80>
 8011b52:	6825      	ldr	r5, [r4, #0]
 8011b54:	6909      	ldr	r1, [r1, #16]
 8011b56:	eba5 0901 	sub.w	r9, r5, r1
 8011b5a:	6965      	ldr	r5, [r4, #20]
 8011b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b64:	3301      	adds	r3, #1
 8011b66:	444b      	add	r3, r9
 8011b68:	106d      	asrs	r5, r5, #1
 8011b6a:	429d      	cmp	r5, r3
 8011b6c:	bf38      	it	cc
 8011b6e:	461d      	movcc	r5, r3
 8011b70:	0553      	lsls	r3, r2, #21
 8011b72:	d531      	bpl.n	8011bd8 <__ssputs_r+0xa0>
 8011b74:	4629      	mov	r1, r5
 8011b76:	f7ff ff85 	bl	8011a84 <_malloc_r>
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	b950      	cbnz	r0, 8011b94 <__ssputs_r+0x5c>
 8011b7e:	230c      	movs	r3, #12
 8011b80:	f8ca 3000 	str.w	r3, [sl]
 8011b84:	89a3      	ldrh	r3, [r4, #12]
 8011b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b94:	6921      	ldr	r1, [r4, #16]
 8011b96:	464a      	mov	r2, r9
 8011b98:	f7fe f84a 	bl	800fc30 <memcpy>
 8011b9c:	89a3      	ldrh	r3, [r4, #12]
 8011b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba6:	81a3      	strh	r3, [r4, #12]
 8011ba8:	6126      	str	r6, [r4, #16]
 8011baa:	6165      	str	r5, [r4, #20]
 8011bac:	444e      	add	r6, r9
 8011bae:	eba5 0509 	sub.w	r5, r5, r9
 8011bb2:	6026      	str	r6, [r4, #0]
 8011bb4:	60a5      	str	r5, [r4, #8]
 8011bb6:	463e      	mov	r6, r7
 8011bb8:	42be      	cmp	r6, r7
 8011bba:	d900      	bls.n	8011bbe <__ssputs_r+0x86>
 8011bbc:	463e      	mov	r6, r7
 8011bbe:	4632      	mov	r2, r6
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	4641      	mov	r1, r8
 8011bc4:	f000 f966 	bl	8011e94 <memmove>
 8011bc8:	68a3      	ldr	r3, [r4, #8]
 8011bca:	6822      	ldr	r2, [r4, #0]
 8011bcc:	1b9b      	subs	r3, r3, r6
 8011bce:	4432      	add	r2, r6
 8011bd0:	60a3      	str	r3, [r4, #8]
 8011bd2:	6022      	str	r2, [r4, #0]
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e7db      	b.n	8011b90 <__ssputs_r+0x58>
 8011bd8:	462a      	mov	r2, r5
 8011bda:	f000 f981 	bl	8011ee0 <_realloc_r>
 8011bde:	4606      	mov	r6, r0
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d1e1      	bne.n	8011ba8 <__ssputs_r+0x70>
 8011be4:	6921      	ldr	r1, [r4, #16]
 8011be6:	4650      	mov	r0, sl
 8011be8:	f7ff fefc 	bl	80119e4 <_free_r>
 8011bec:	e7c7      	b.n	8011b7e <__ssputs_r+0x46>
	...

08011bf0 <_svfiprintf_r>:
 8011bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf4:	4698      	mov	r8, r3
 8011bf6:	898b      	ldrh	r3, [r1, #12]
 8011bf8:	061b      	lsls	r3, r3, #24
 8011bfa:	b09d      	sub	sp, #116	; 0x74
 8011bfc:	4607      	mov	r7, r0
 8011bfe:	460d      	mov	r5, r1
 8011c00:	4614      	mov	r4, r2
 8011c02:	d50e      	bpl.n	8011c22 <_svfiprintf_r+0x32>
 8011c04:	690b      	ldr	r3, [r1, #16]
 8011c06:	b963      	cbnz	r3, 8011c22 <_svfiprintf_r+0x32>
 8011c08:	2140      	movs	r1, #64	; 0x40
 8011c0a:	f7ff ff3b 	bl	8011a84 <_malloc_r>
 8011c0e:	6028      	str	r0, [r5, #0]
 8011c10:	6128      	str	r0, [r5, #16]
 8011c12:	b920      	cbnz	r0, 8011c1e <_svfiprintf_r+0x2e>
 8011c14:	230c      	movs	r3, #12
 8011c16:	603b      	str	r3, [r7, #0]
 8011c18:	f04f 30ff 	mov.w	r0, #4294967295
 8011c1c:	e0d1      	b.n	8011dc2 <_svfiprintf_r+0x1d2>
 8011c1e:	2340      	movs	r3, #64	; 0x40
 8011c20:	616b      	str	r3, [r5, #20]
 8011c22:	2300      	movs	r3, #0
 8011c24:	9309      	str	r3, [sp, #36]	; 0x24
 8011c26:	2320      	movs	r3, #32
 8011c28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c30:	2330      	movs	r3, #48	; 0x30
 8011c32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ddc <_svfiprintf_r+0x1ec>
 8011c36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c3a:	f04f 0901 	mov.w	r9, #1
 8011c3e:	4623      	mov	r3, r4
 8011c40:	469a      	mov	sl, r3
 8011c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c46:	b10a      	cbz	r2, 8011c4c <_svfiprintf_r+0x5c>
 8011c48:	2a25      	cmp	r2, #37	; 0x25
 8011c4a:	d1f9      	bne.n	8011c40 <_svfiprintf_r+0x50>
 8011c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c50:	d00b      	beq.n	8011c6a <_svfiprintf_r+0x7a>
 8011c52:	465b      	mov	r3, fp
 8011c54:	4622      	mov	r2, r4
 8011c56:	4629      	mov	r1, r5
 8011c58:	4638      	mov	r0, r7
 8011c5a:	f7ff ff6d 	bl	8011b38 <__ssputs_r>
 8011c5e:	3001      	adds	r0, #1
 8011c60:	f000 80aa 	beq.w	8011db8 <_svfiprintf_r+0x1c8>
 8011c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c66:	445a      	add	r2, fp
 8011c68:	9209      	str	r2, [sp, #36]	; 0x24
 8011c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 80a2 	beq.w	8011db8 <_svfiprintf_r+0x1c8>
 8011c74:	2300      	movs	r3, #0
 8011c76:	f04f 32ff 	mov.w	r2, #4294967295
 8011c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c7e:	f10a 0a01 	add.w	sl, sl, #1
 8011c82:	9304      	str	r3, [sp, #16]
 8011c84:	9307      	str	r3, [sp, #28]
 8011c86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c8a:	931a      	str	r3, [sp, #104]	; 0x68
 8011c8c:	4654      	mov	r4, sl
 8011c8e:	2205      	movs	r2, #5
 8011c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c94:	4851      	ldr	r0, [pc, #324]	; (8011ddc <_svfiprintf_r+0x1ec>)
 8011c96:	f7ee fab3 	bl	8000200 <memchr>
 8011c9a:	9a04      	ldr	r2, [sp, #16]
 8011c9c:	b9d8      	cbnz	r0, 8011cd6 <_svfiprintf_r+0xe6>
 8011c9e:	06d0      	lsls	r0, r2, #27
 8011ca0:	bf44      	itt	mi
 8011ca2:	2320      	movmi	r3, #32
 8011ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ca8:	0711      	lsls	r1, r2, #28
 8011caa:	bf44      	itt	mi
 8011cac:	232b      	movmi	r3, #43	; 0x2b
 8011cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cb8:	d015      	beq.n	8011ce6 <_svfiprintf_r+0xf6>
 8011cba:	9a07      	ldr	r2, [sp, #28]
 8011cbc:	4654      	mov	r4, sl
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	f04f 0c0a 	mov.w	ip, #10
 8011cc4:	4621      	mov	r1, r4
 8011cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cca:	3b30      	subs	r3, #48	; 0x30
 8011ccc:	2b09      	cmp	r3, #9
 8011cce:	d94e      	bls.n	8011d6e <_svfiprintf_r+0x17e>
 8011cd0:	b1b0      	cbz	r0, 8011d00 <_svfiprintf_r+0x110>
 8011cd2:	9207      	str	r2, [sp, #28]
 8011cd4:	e014      	b.n	8011d00 <_svfiprintf_r+0x110>
 8011cd6:	eba0 0308 	sub.w	r3, r0, r8
 8011cda:	fa09 f303 	lsl.w	r3, r9, r3
 8011cde:	4313      	orrs	r3, r2
 8011ce0:	9304      	str	r3, [sp, #16]
 8011ce2:	46a2      	mov	sl, r4
 8011ce4:	e7d2      	b.n	8011c8c <_svfiprintf_r+0x9c>
 8011ce6:	9b03      	ldr	r3, [sp, #12]
 8011ce8:	1d19      	adds	r1, r3, #4
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	9103      	str	r1, [sp, #12]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	bfbb      	ittet	lt
 8011cf2:	425b      	neglt	r3, r3
 8011cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8011cf8:	9307      	strge	r3, [sp, #28]
 8011cfa:	9307      	strlt	r3, [sp, #28]
 8011cfc:	bfb8      	it	lt
 8011cfe:	9204      	strlt	r2, [sp, #16]
 8011d00:	7823      	ldrb	r3, [r4, #0]
 8011d02:	2b2e      	cmp	r3, #46	; 0x2e
 8011d04:	d10c      	bne.n	8011d20 <_svfiprintf_r+0x130>
 8011d06:	7863      	ldrb	r3, [r4, #1]
 8011d08:	2b2a      	cmp	r3, #42	; 0x2a
 8011d0a:	d135      	bne.n	8011d78 <_svfiprintf_r+0x188>
 8011d0c:	9b03      	ldr	r3, [sp, #12]
 8011d0e:	1d1a      	adds	r2, r3, #4
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	9203      	str	r2, [sp, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bfb8      	it	lt
 8011d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d1c:	3402      	adds	r4, #2
 8011d1e:	9305      	str	r3, [sp, #20]
 8011d20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011dec <_svfiprintf_r+0x1fc>
 8011d24:	7821      	ldrb	r1, [r4, #0]
 8011d26:	2203      	movs	r2, #3
 8011d28:	4650      	mov	r0, sl
 8011d2a:	f7ee fa69 	bl	8000200 <memchr>
 8011d2e:	b140      	cbz	r0, 8011d42 <_svfiprintf_r+0x152>
 8011d30:	2340      	movs	r3, #64	; 0x40
 8011d32:	eba0 000a 	sub.w	r0, r0, sl
 8011d36:	fa03 f000 	lsl.w	r0, r3, r0
 8011d3a:	9b04      	ldr	r3, [sp, #16]
 8011d3c:	4303      	orrs	r3, r0
 8011d3e:	3401      	adds	r4, #1
 8011d40:	9304      	str	r3, [sp, #16]
 8011d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d46:	4826      	ldr	r0, [pc, #152]	; (8011de0 <_svfiprintf_r+0x1f0>)
 8011d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d4c:	2206      	movs	r2, #6
 8011d4e:	f7ee fa57 	bl	8000200 <memchr>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d038      	beq.n	8011dc8 <_svfiprintf_r+0x1d8>
 8011d56:	4b23      	ldr	r3, [pc, #140]	; (8011de4 <_svfiprintf_r+0x1f4>)
 8011d58:	bb1b      	cbnz	r3, 8011da2 <_svfiprintf_r+0x1b2>
 8011d5a:	9b03      	ldr	r3, [sp, #12]
 8011d5c:	3307      	adds	r3, #7
 8011d5e:	f023 0307 	bic.w	r3, r3, #7
 8011d62:	3308      	adds	r3, #8
 8011d64:	9303      	str	r3, [sp, #12]
 8011d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d68:	4433      	add	r3, r6
 8011d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d6c:	e767      	b.n	8011c3e <_svfiprintf_r+0x4e>
 8011d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d72:	460c      	mov	r4, r1
 8011d74:	2001      	movs	r0, #1
 8011d76:	e7a5      	b.n	8011cc4 <_svfiprintf_r+0xd4>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	3401      	adds	r4, #1
 8011d7c:	9305      	str	r3, [sp, #20]
 8011d7e:	4619      	mov	r1, r3
 8011d80:	f04f 0c0a 	mov.w	ip, #10
 8011d84:	4620      	mov	r0, r4
 8011d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d8a:	3a30      	subs	r2, #48	; 0x30
 8011d8c:	2a09      	cmp	r2, #9
 8011d8e:	d903      	bls.n	8011d98 <_svfiprintf_r+0x1a8>
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d0c5      	beq.n	8011d20 <_svfiprintf_r+0x130>
 8011d94:	9105      	str	r1, [sp, #20]
 8011d96:	e7c3      	b.n	8011d20 <_svfiprintf_r+0x130>
 8011d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e7f0      	b.n	8011d84 <_svfiprintf_r+0x194>
 8011da2:	ab03      	add	r3, sp, #12
 8011da4:	9300      	str	r3, [sp, #0]
 8011da6:	462a      	mov	r2, r5
 8011da8:	4b0f      	ldr	r3, [pc, #60]	; (8011de8 <_svfiprintf_r+0x1f8>)
 8011daa:	a904      	add	r1, sp, #16
 8011dac:	4638      	mov	r0, r7
 8011dae:	f7fd fff5 	bl	800fd9c <_printf_float>
 8011db2:	1c42      	adds	r2, r0, #1
 8011db4:	4606      	mov	r6, r0
 8011db6:	d1d6      	bne.n	8011d66 <_svfiprintf_r+0x176>
 8011db8:	89ab      	ldrh	r3, [r5, #12]
 8011dba:	065b      	lsls	r3, r3, #25
 8011dbc:	f53f af2c 	bmi.w	8011c18 <_svfiprintf_r+0x28>
 8011dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dc2:	b01d      	add	sp, #116	; 0x74
 8011dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc8:	ab03      	add	r3, sp, #12
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	462a      	mov	r2, r5
 8011dce:	4b06      	ldr	r3, [pc, #24]	; (8011de8 <_svfiprintf_r+0x1f8>)
 8011dd0:	a904      	add	r1, sp, #16
 8011dd2:	4638      	mov	r0, r7
 8011dd4:	f7fe fa86 	bl	80102e4 <_printf_i>
 8011dd8:	e7eb      	b.n	8011db2 <_svfiprintf_r+0x1c2>
 8011dda:	bf00      	nop
 8011ddc:	080142fc 	.word	0x080142fc
 8011de0:	08014306 	.word	0x08014306
 8011de4:	0800fd9d 	.word	0x0800fd9d
 8011de8:	08011b39 	.word	0x08011b39
 8011dec:	08014302 	.word	0x08014302

08011df0 <_sbrk_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d06      	ldr	r5, [pc, #24]	; (8011e0c <_sbrk_r+0x1c>)
 8011df4:	2300      	movs	r3, #0
 8011df6:	4604      	mov	r4, r0
 8011df8:	4608      	mov	r0, r1
 8011dfa:	602b      	str	r3, [r5, #0]
 8011dfc:	f7f3 ff44 	bl	8005c88 <_sbrk>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d102      	bne.n	8011e0a <_sbrk_r+0x1a>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	b103      	cbz	r3, 8011e0a <_sbrk_r+0x1a>
 8011e08:	6023      	str	r3, [r4, #0]
 8011e0a:	bd38      	pop	{r3, r4, r5, pc}
 8011e0c:	20005758 	.word	0x20005758

08011e10 <__assert_func>:
 8011e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e12:	4614      	mov	r4, r2
 8011e14:	461a      	mov	r2, r3
 8011e16:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <__assert_func+0x2c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	68d8      	ldr	r0, [r3, #12]
 8011e1e:	b14c      	cbz	r4, 8011e34 <__assert_func+0x24>
 8011e20:	4b07      	ldr	r3, [pc, #28]	; (8011e40 <__assert_func+0x30>)
 8011e22:	9100      	str	r1, [sp, #0]
 8011e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e28:	4906      	ldr	r1, [pc, #24]	; (8011e44 <__assert_func+0x34>)
 8011e2a:	462b      	mov	r3, r5
 8011e2c:	f000 f80e 	bl	8011e4c <fiprintf>
 8011e30:	f000 faa4 	bl	801237c <abort>
 8011e34:	4b04      	ldr	r3, [pc, #16]	; (8011e48 <__assert_func+0x38>)
 8011e36:	461c      	mov	r4, r3
 8011e38:	e7f3      	b.n	8011e22 <__assert_func+0x12>
 8011e3a:	bf00      	nop
 8011e3c:	20000018 	.word	0x20000018
 8011e40:	0801430d 	.word	0x0801430d
 8011e44:	0801431a 	.word	0x0801431a
 8011e48:	08014348 	.word	0x08014348

08011e4c <fiprintf>:
 8011e4c:	b40e      	push	{r1, r2, r3}
 8011e4e:	b503      	push	{r0, r1, lr}
 8011e50:	4601      	mov	r1, r0
 8011e52:	ab03      	add	r3, sp, #12
 8011e54:	4805      	ldr	r0, [pc, #20]	; (8011e6c <fiprintf+0x20>)
 8011e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5a:	6800      	ldr	r0, [r0, #0]
 8011e5c:	9301      	str	r3, [sp, #4]
 8011e5e:	f000 f88f 	bl	8011f80 <_vfiprintf_r>
 8011e62:	b002      	add	sp, #8
 8011e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e68:	b003      	add	sp, #12
 8011e6a:	4770      	bx	lr
 8011e6c:	20000018 	.word	0x20000018

08011e70 <__ascii_mbtowc>:
 8011e70:	b082      	sub	sp, #8
 8011e72:	b901      	cbnz	r1, 8011e76 <__ascii_mbtowc+0x6>
 8011e74:	a901      	add	r1, sp, #4
 8011e76:	b142      	cbz	r2, 8011e8a <__ascii_mbtowc+0x1a>
 8011e78:	b14b      	cbz	r3, 8011e8e <__ascii_mbtowc+0x1e>
 8011e7a:	7813      	ldrb	r3, [r2, #0]
 8011e7c:	600b      	str	r3, [r1, #0]
 8011e7e:	7812      	ldrb	r2, [r2, #0]
 8011e80:	1e10      	subs	r0, r2, #0
 8011e82:	bf18      	it	ne
 8011e84:	2001      	movne	r0, #1
 8011e86:	b002      	add	sp, #8
 8011e88:	4770      	bx	lr
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	e7fb      	b.n	8011e86 <__ascii_mbtowc+0x16>
 8011e8e:	f06f 0001 	mvn.w	r0, #1
 8011e92:	e7f8      	b.n	8011e86 <__ascii_mbtowc+0x16>

08011e94 <memmove>:
 8011e94:	4288      	cmp	r0, r1
 8011e96:	b510      	push	{r4, lr}
 8011e98:	eb01 0402 	add.w	r4, r1, r2
 8011e9c:	d902      	bls.n	8011ea4 <memmove+0x10>
 8011e9e:	4284      	cmp	r4, r0
 8011ea0:	4623      	mov	r3, r4
 8011ea2:	d807      	bhi.n	8011eb4 <memmove+0x20>
 8011ea4:	1e43      	subs	r3, r0, #1
 8011ea6:	42a1      	cmp	r1, r4
 8011ea8:	d008      	beq.n	8011ebc <memmove+0x28>
 8011eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eb2:	e7f8      	b.n	8011ea6 <memmove+0x12>
 8011eb4:	4402      	add	r2, r0
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	428a      	cmp	r2, r1
 8011eba:	d100      	bne.n	8011ebe <memmove+0x2a>
 8011ebc:	bd10      	pop	{r4, pc}
 8011ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ec6:	e7f7      	b.n	8011eb8 <memmove+0x24>

08011ec8 <__malloc_lock>:
 8011ec8:	4801      	ldr	r0, [pc, #4]	; (8011ed0 <__malloc_lock+0x8>)
 8011eca:	f000 bc17 	b.w	80126fc <__retarget_lock_acquire_recursive>
 8011ece:	bf00      	nop
 8011ed0:	20005760 	.word	0x20005760

08011ed4 <__malloc_unlock>:
 8011ed4:	4801      	ldr	r0, [pc, #4]	; (8011edc <__malloc_unlock+0x8>)
 8011ed6:	f000 bc12 	b.w	80126fe <__retarget_lock_release_recursive>
 8011eda:	bf00      	nop
 8011edc:	20005760 	.word	0x20005760

08011ee0 <_realloc_r>:
 8011ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee2:	4607      	mov	r7, r0
 8011ee4:	4614      	mov	r4, r2
 8011ee6:	460e      	mov	r6, r1
 8011ee8:	b921      	cbnz	r1, 8011ef4 <_realloc_r+0x14>
 8011eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011eee:	4611      	mov	r1, r2
 8011ef0:	f7ff bdc8 	b.w	8011a84 <_malloc_r>
 8011ef4:	b922      	cbnz	r2, 8011f00 <_realloc_r+0x20>
 8011ef6:	f7ff fd75 	bl	80119e4 <_free_r>
 8011efa:	4625      	mov	r5, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f00:	f000 fc62 	bl	80127c8 <_malloc_usable_size_r>
 8011f04:	42a0      	cmp	r0, r4
 8011f06:	d20f      	bcs.n	8011f28 <_realloc_r+0x48>
 8011f08:	4621      	mov	r1, r4
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f7ff fdba 	bl	8011a84 <_malloc_r>
 8011f10:	4605      	mov	r5, r0
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d0f2      	beq.n	8011efc <_realloc_r+0x1c>
 8011f16:	4631      	mov	r1, r6
 8011f18:	4622      	mov	r2, r4
 8011f1a:	f7fd fe89 	bl	800fc30 <memcpy>
 8011f1e:	4631      	mov	r1, r6
 8011f20:	4638      	mov	r0, r7
 8011f22:	f7ff fd5f 	bl	80119e4 <_free_r>
 8011f26:	e7e9      	b.n	8011efc <_realloc_r+0x1c>
 8011f28:	4635      	mov	r5, r6
 8011f2a:	e7e7      	b.n	8011efc <_realloc_r+0x1c>

08011f2c <__sfputc_r>:
 8011f2c:	6893      	ldr	r3, [r2, #8]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	b410      	push	{r4}
 8011f34:	6093      	str	r3, [r2, #8]
 8011f36:	da08      	bge.n	8011f4a <__sfputc_r+0x1e>
 8011f38:	6994      	ldr	r4, [r2, #24]
 8011f3a:	42a3      	cmp	r3, r4
 8011f3c:	db01      	blt.n	8011f42 <__sfputc_r+0x16>
 8011f3e:	290a      	cmp	r1, #10
 8011f40:	d103      	bne.n	8011f4a <__sfputc_r+0x1e>
 8011f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f46:	f000 b94b 	b.w	80121e0 <__swbuf_r>
 8011f4a:	6813      	ldr	r3, [r2, #0]
 8011f4c:	1c58      	adds	r0, r3, #1
 8011f4e:	6010      	str	r0, [r2, #0]
 8011f50:	7019      	strb	r1, [r3, #0]
 8011f52:	4608      	mov	r0, r1
 8011f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <__sfputs_r>:
 8011f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	460f      	mov	r7, r1
 8011f60:	4614      	mov	r4, r2
 8011f62:	18d5      	adds	r5, r2, r3
 8011f64:	42ac      	cmp	r4, r5
 8011f66:	d101      	bne.n	8011f6c <__sfputs_r+0x12>
 8011f68:	2000      	movs	r0, #0
 8011f6a:	e007      	b.n	8011f7c <__sfputs_r+0x22>
 8011f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f70:	463a      	mov	r2, r7
 8011f72:	4630      	mov	r0, r6
 8011f74:	f7ff ffda 	bl	8011f2c <__sfputc_r>
 8011f78:	1c43      	adds	r3, r0, #1
 8011f7a:	d1f3      	bne.n	8011f64 <__sfputs_r+0xa>
 8011f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f80 <_vfiprintf_r>:
 8011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	460d      	mov	r5, r1
 8011f86:	b09d      	sub	sp, #116	; 0x74
 8011f88:	4614      	mov	r4, r2
 8011f8a:	4698      	mov	r8, r3
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	b118      	cbz	r0, 8011f98 <_vfiprintf_r+0x18>
 8011f90:	6983      	ldr	r3, [r0, #24]
 8011f92:	b90b      	cbnz	r3, 8011f98 <_vfiprintf_r+0x18>
 8011f94:	f000 fb14 	bl	80125c0 <__sinit>
 8011f98:	4b89      	ldr	r3, [pc, #548]	; (80121c0 <_vfiprintf_r+0x240>)
 8011f9a:	429d      	cmp	r5, r3
 8011f9c:	d11b      	bne.n	8011fd6 <_vfiprintf_r+0x56>
 8011f9e:	6875      	ldr	r5, [r6, #4]
 8011fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fa2:	07d9      	lsls	r1, r3, #31
 8011fa4:	d405      	bmi.n	8011fb2 <_vfiprintf_r+0x32>
 8011fa6:	89ab      	ldrh	r3, [r5, #12]
 8011fa8:	059a      	lsls	r2, r3, #22
 8011faa:	d402      	bmi.n	8011fb2 <_vfiprintf_r+0x32>
 8011fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fae:	f000 fba5 	bl	80126fc <__retarget_lock_acquire_recursive>
 8011fb2:	89ab      	ldrh	r3, [r5, #12]
 8011fb4:	071b      	lsls	r3, r3, #28
 8011fb6:	d501      	bpl.n	8011fbc <_vfiprintf_r+0x3c>
 8011fb8:	692b      	ldr	r3, [r5, #16]
 8011fba:	b9eb      	cbnz	r3, 8011ff8 <_vfiprintf_r+0x78>
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	f000 f96e 	bl	80122a0 <__swsetup_r>
 8011fc4:	b1c0      	cbz	r0, 8011ff8 <_vfiprintf_r+0x78>
 8011fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fc8:	07dc      	lsls	r4, r3, #31
 8011fca:	d50e      	bpl.n	8011fea <_vfiprintf_r+0x6a>
 8011fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd0:	b01d      	add	sp, #116	; 0x74
 8011fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd6:	4b7b      	ldr	r3, [pc, #492]	; (80121c4 <_vfiprintf_r+0x244>)
 8011fd8:	429d      	cmp	r5, r3
 8011fda:	d101      	bne.n	8011fe0 <_vfiprintf_r+0x60>
 8011fdc:	68b5      	ldr	r5, [r6, #8]
 8011fde:	e7df      	b.n	8011fa0 <_vfiprintf_r+0x20>
 8011fe0:	4b79      	ldr	r3, [pc, #484]	; (80121c8 <_vfiprintf_r+0x248>)
 8011fe2:	429d      	cmp	r5, r3
 8011fe4:	bf08      	it	eq
 8011fe6:	68f5      	ldreq	r5, [r6, #12]
 8011fe8:	e7da      	b.n	8011fa0 <_vfiprintf_r+0x20>
 8011fea:	89ab      	ldrh	r3, [r5, #12]
 8011fec:	0598      	lsls	r0, r3, #22
 8011fee:	d4ed      	bmi.n	8011fcc <_vfiprintf_r+0x4c>
 8011ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ff2:	f000 fb84 	bl	80126fe <__retarget_lock_release_recursive>
 8011ff6:	e7e9      	b.n	8011fcc <_vfiprintf_r+0x4c>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8011ffc:	2320      	movs	r3, #32
 8011ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012002:	f8cd 800c 	str.w	r8, [sp, #12]
 8012006:	2330      	movs	r3, #48	; 0x30
 8012008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121cc <_vfiprintf_r+0x24c>
 801200c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012010:	f04f 0901 	mov.w	r9, #1
 8012014:	4623      	mov	r3, r4
 8012016:	469a      	mov	sl, r3
 8012018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801201c:	b10a      	cbz	r2, 8012022 <_vfiprintf_r+0xa2>
 801201e:	2a25      	cmp	r2, #37	; 0x25
 8012020:	d1f9      	bne.n	8012016 <_vfiprintf_r+0x96>
 8012022:	ebba 0b04 	subs.w	fp, sl, r4
 8012026:	d00b      	beq.n	8012040 <_vfiprintf_r+0xc0>
 8012028:	465b      	mov	r3, fp
 801202a:	4622      	mov	r2, r4
 801202c:	4629      	mov	r1, r5
 801202e:	4630      	mov	r0, r6
 8012030:	f7ff ff93 	bl	8011f5a <__sfputs_r>
 8012034:	3001      	adds	r0, #1
 8012036:	f000 80aa 	beq.w	801218e <_vfiprintf_r+0x20e>
 801203a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801203c:	445a      	add	r2, fp
 801203e:	9209      	str	r2, [sp, #36]	; 0x24
 8012040:	f89a 3000 	ldrb.w	r3, [sl]
 8012044:	2b00      	cmp	r3, #0
 8012046:	f000 80a2 	beq.w	801218e <_vfiprintf_r+0x20e>
 801204a:	2300      	movs	r3, #0
 801204c:	f04f 32ff 	mov.w	r2, #4294967295
 8012050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012054:	f10a 0a01 	add.w	sl, sl, #1
 8012058:	9304      	str	r3, [sp, #16]
 801205a:	9307      	str	r3, [sp, #28]
 801205c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012060:	931a      	str	r3, [sp, #104]	; 0x68
 8012062:	4654      	mov	r4, sl
 8012064:	2205      	movs	r2, #5
 8012066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801206a:	4858      	ldr	r0, [pc, #352]	; (80121cc <_vfiprintf_r+0x24c>)
 801206c:	f7ee f8c8 	bl	8000200 <memchr>
 8012070:	9a04      	ldr	r2, [sp, #16]
 8012072:	b9d8      	cbnz	r0, 80120ac <_vfiprintf_r+0x12c>
 8012074:	06d1      	lsls	r1, r2, #27
 8012076:	bf44      	itt	mi
 8012078:	2320      	movmi	r3, #32
 801207a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801207e:	0713      	lsls	r3, r2, #28
 8012080:	bf44      	itt	mi
 8012082:	232b      	movmi	r3, #43	; 0x2b
 8012084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012088:	f89a 3000 	ldrb.w	r3, [sl]
 801208c:	2b2a      	cmp	r3, #42	; 0x2a
 801208e:	d015      	beq.n	80120bc <_vfiprintf_r+0x13c>
 8012090:	9a07      	ldr	r2, [sp, #28]
 8012092:	4654      	mov	r4, sl
 8012094:	2000      	movs	r0, #0
 8012096:	f04f 0c0a 	mov.w	ip, #10
 801209a:	4621      	mov	r1, r4
 801209c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120a0:	3b30      	subs	r3, #48	; 0x30
 80120a2:	2b09      	cmp	r3, #9
 80120a4:	d94e      	bls.n	8012144 <_vfiprintf_r+0x1c4>
 80120a6:	b1b0      	cbz	r0, 80120d6 <_vfiprintf_r+0x156>
 80120a8:	9207      	str	r2, [sp, #28]
 80120aa:	e014      	b.n	80120d6 <_vfiprintf_r+0x156>
 80120ac:	eba0 0308 	sub.w	r3, r0, r8
 80120b0:	fa09 f303 	lsl.w	r3, r9, r3
 80120b4:	4313      	orrs	r3, r2
 80120b6:	9304      	str	r3, [sp, #16]
 80120b8:	46a2      	mov	sl, r4
 80120ba:	e7d2      	b.n	8012062 <_vfiprintf_r+0xe2>
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	1d19      	adds	r1, r3, #4
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	9103      	str	r1, [sp, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	bfbb      	ittet	lt
 80120c8:	425b      	neglt	r3, r3
 80120ca:	f042 0202 	orrlt.w	r2, r2, #2
 80120ce:	9307      	strge	r3, [sp, #28]
 80120d0:	9307      	strlt	r3, [sp, #28]
 80120d2:	bfb8      	it	lt
 80120d4:	9204      	strlt	r2, [sp, #16]
 80120d6:	7823      	ldrb	r3, [r4, #0]
 80120d8:	2b2e      	cmp	r3, #46	; 0x2e
 80120da:	d10c      	bne.n	80120f6 <_vfiprintf_r+0x176>
 80120dc:	7863      	ldrb	r3, [r4, #1]
 80120de:	2b2a      	cmp	r3, #42	; 0x2a
 80120e0:	d135      	bne.n	801214e <_vfiprintf_r+0x1ce>
 80120e2:	9b03      	ldr	r3, [sp, #12]
 80120e4:	1d1a      	adds	r2, r3, #4
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	9203      	str	r2, [sp, #12]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	bfb8      	it	lt
 80120ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80120f2:	3402      	adds	r4, #2
 80120f4:	9305      	str	r3, [sp, #20]
 80120f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121dc <_vfiprintf_r+0x25c>
 80120fa:	7821      	ldrb	r1, [r4, #0]
 80120fc:	2203      	movs	r2, #3
 80120fe:	4650      	mov	r0, sl
 8012100:	f7ee f87e 	bl	8000200 <memchr>
 8012104:	b140      	cbz	r0, 8012118 <_vfiprintf_r+0x198>
 8012106:	2340      	movs	r3, #64	; 0x40
 8012108:	eba0 000a 	sub.w	r0, r0, sl
 801210c:	fa03 f000 	lsl.w	r0, r3, r0
 8012110:	9b04      	ldr	r3, [sp, #16]
 8012112:	4303      	orrs	r3, r0
 8012114:	3401      	adds	r4, #1
 8012116:	9304      	str	r3, [sp, #16]
 8012118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211c:	482c      	ldr	r0, [pc, #176]	; (80121d0 <_vfiprintf_r+0x250>)
 801211e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012122:	2206      	movs	r2, #6
 8012124:	f7ee f86c 	bl	8000200 <memchr>
 8012128:	2800      	cmp	r0, #0
 801212a:	d03f      	beq.n	80121ac <_vfiprintf_r+0x22c>
 801212c:	4b29      	ldr	r3, [pc, #164]	; (80121d4 <_vfiprintf_r+0x254>)
 801212e:	bb1b      	cbnz	r3, 8012178 <_vfiprintf_r+0x1f8>
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	3307      	adds	r3, #7
 8012134:	f023 0307 	bic.w	r3, r3, #7
 8012138:	3308      	adds	r3, #8
 801213a:	9303      	str	r3, [sp, #12]
 801213c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801213e:	443b      	add	r3, r7
 8012140:	9309      	str	r3, [sp, #36]	; 0x24
 8012142:	e767      	b.n	8012014 <_vfiprintf_r+0x94>
 8012144:	fb0c 3202 	mla	r2, ip, r2, r3
 8012148:	460c      	mov	r4, r1
 801214a:	2001      	movs	r0, #1
 801214c:	e7a5      	b.n	801209a <_vfiprintf_r+0x11a>
 801214e:	2300      	movs	r3, #0
 8012150:	3401      	adds	r4, #1
 8012152:	9305      	str	r3, [sp, #20]
 8012154:	4619      	mov	r1, r3
 8012156:	f04f 0c0a 	mov.w	ip, #10
 801215a:	4620      	mov	r0, r4
 801215c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012160:	3a30      	subs	r2, #48	; 0x30
 8012162:	2a09      	cmp	r2, #9
 8012164:	d903      	bls.n	801216e <_vfiprintf_r+0x1ee>
 8012166:	2b00      	cmp	r3, #0
 8012168:	d0c5      	beq.n	80120f6 <_vfiprintf_r+0x176>
 801216a:	9105      	str	r1, [sp, #20]
 801216c:	e7c3      	b.n	80120f6 <_vfiprintf_r+0x176>
 801216e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012172:	4604      	mov	r4, r0
 8012174:	2301      	movs	r3, #1
 8012176:	e7f0      	b.n	801215a <_vfiprintf_r+0x1da>
 8012178:	ab03      	add	r3, sp, #12
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	462a      	mov	r2, r5
 801217e:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <_vfiprintf_r+0x258>)
 8012180:	a904      	add	r1, sp, #16
 8012182:	4630      	mov	r0, r6
 8012184:	f7fd fe0a 	bl	800fd9c <_printf_float>
 8012188:	4607      	mov	r7, r0
 801218a:	1c78      	adds	r0, r7, #1
 801218c:	d1d6      	bne.n	801213c <_vfiprintf_r+0x1bc>
 801218e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012190:	07d9      	lsls	r1, r3, #31
 8012192:	d405      	bmi.n	80121a0 <_vfiprintf_r+0x220>
 8012194:	89ab      	ldrh	r3, [r5, #12]
 8012196:	059a      	lsls	r2, r3, #22
 8012198:	d402      	bmi.n	80121a0 <_vfiprintf_r+0x220>
 801219a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801219c:	f000 faaf 	bl	80126fe <__retarget_lock_release_recursive>
 80121a0:	89ab      	ldrh	r3, [r5, #12]
 80121a2:	065b      	lsls	r3, r3, #25
 80121a4:	f53f af12 	bmi.w	8011fcc <_vfiprintf_r+0x4c>
 80121a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121aa:	e711      	b.n	8011fd0 <_vfiprintf_r+0x50>
 80121ac:	ab03      	add	r3, sp, #12
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	462a      	mov	r2, r5
 80121b2:	4b09      	ldr	r3, [pc, #36]	; (80121d8 <_vfiprintf_r+0x258>)
 80121b4:	a904      	add	r1, sp, #16
 80121b6:	4630      	mov	r0, r6
 80121b8:	f7fe f894 	bl	80102e4 <_printf_i>
 80121bc:	e7e4      	b.n	8012188 <_vfiprintf_r+0x208>
 80121be:	bf00      	nop
 80121c0:	08014474 	.word	0x08014474
 80121c4:	08014494 	.word	0x08014494
 80121c8:	08014454 	.word	0x08014454
 80121cc:	080142fc 	.word	0x080142fc
 80121d0:	08014306 	.word	0x08014306
 80121d4:	0800fd9d 	.word	0x0800fd9d
 80121d8:	08011f5b 	.word	0x08011f5b
 80121dc:	08014302 	.word	0x08014302

080121e0 <__swbuf_r>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	460e      	mov	r6, r1
 80121e4:	4614      	mov	r4, r2
 80121e6:	4605      	mov	r5, r0
 80121e8:	b118      	cbz	r0, 80121f2 <__swbuf_r+0x12>
 80121ea:	6983      	ldr	r3, [r0, #24]
 80121ec:	b90b      	cbnz	r3, 80121f2 <__swbuf_r+0x12>
 80121ee:	f000 f9e7 	bl	80125c0 <__sinit>
 80121f2:	4b21      	ldr	r3, [pc, #132]	; (8012278 <__swbuf_r+0x98>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	d12b      	bne.n	8012250 <__swbuf_r+0x70>
 80121f8:	686c      	ldr	r4, [r5, #4]
 80121fa:	69a3      	ldr	r3, [r4, #24]
 80121fc:	60a3      	str	r3, [r4, #8]
 80121fe:	89a3      	ldrh	r3, [r4, #12]
 8012200:	071a      	lsls	r2, r3, #28
 8012202:	d52f      	bpl.n	8012264 <__swbuf_r+0x84>
 8012204:	6923      	ldr	r3, [r4, #16]
 8012206:	b36b      	cbz	r3, 8012264 <__swbuf_r+0x84>
 8012208:	6923      	ldr	r3, [r4, #16]
 801220a:	6820      	ldr	r0, [r4, #0]
 801220c:	1ac0      	subs	r0, r0, r3
 801220e:	6963      	ldr	r3, [r4, #20]
 8012210:	b2f6      	uxtb	r6, r6
 8012212:	4283      	cmp	r3, r0
 8012214:	4637      	mov	r7, r6
 8012216:	dc04      	bgt.n	8012222 <__swbuf_r+0x42>
 8012218:	4621      	mov	r1, r4
 801221a:	4628      	mov	r0, r5
 801221c:	f000 f93c 	bl	8012498 <_fflush_r>
 8012220:	bb30      	cbnz	r0, 8012270 <__swbuf_r+0x90>
 8012222:	68a3      	ldr	r3, [r4, #8]
 8012224:	3b01      	subs	r3, #1
 8012226:	60a3      	str	r3, [r4, #8]
 8012228:	6823      	ldr	r3, [r4, #0]
 801222a:	1c5a      	adds	r2, r3, #1
 801222c:	6022      	str	r2, [r4, #0]
 801222e:	701e      	strb	r6, [r3, #0]
 8012230:	6963      	ldr	r3, [r4, #20]
 8012232:	3001      	adds	r0, #1
 8012234:	4283      	cmp	r3, r0
 8012236:	d004      	beq.n	8012242 <__swbuf_r+0x62>
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	07db      	lsls	r3, r3, #31
 801223c:	d506      	bpl.n	801224c <__swbuf_r+0x6c>
 801223e:	2e0a      	cmp	r6, #10
 8012240:	d104      	bne.n	801224c <__swbuf_r+0x6c>
 8012242:	4621      	mov	r1, r4
 8012244:	4628      	mov	r0, r5
 8012246:	f000 f927 	bl	8012498 <_fflush_r>
 801224a:	b988      	cbnz	r0, 8012270 <__swbuf_r+0x90>
 801224c:	4638      	mov	r0, r7
 801224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012250:	4b0a      	ldr	r3, [pc, #40]	; (801227c <__swbuf_r+0x9c>)
 8012252:	429c      	cmp	r4, r3
 8012254:	d101      	bne.n	801225a <__swbuf_r+0x7a>
 8012256:	68ac      	ldr	r4, [r5, #8]
 8012258:	e7cf      	b.n	80121fa <__swbuf_r+0x1a>
 801225a:	4b09      	ldr	r3, [pc, #36]	; (8012280 <__swbuf_r+0xa0>)
 801225c:	429c      	cmp	r4, r3
 801225e:	bf08      	it	eq
 8012260:	68ec      	ldreq	r4, [r5, #12]
 8012262:	e7ca      	b.n	80121fa <__swbuf_r+0x1a>
 8012264:	4621      	mov	r1, r4
 8012266:	4628      	mov	r0, r5
 8012268:	f000 f81a 	bl	80122a0 <__swsetup_r>
 801226c:	2800      	cmp	r0, #0
 801226e:	d0cb      	beq.n	8012208 <__swbuf_r+0x28>
 8012270:	f04f 37ff 	mov.w	r7, #4294967295
 8012274:	e7ea      	b.n	801224c <__swbuf_r+0x6c>
 8012276:	bf00      	nop
 8012278:	08014474 	.word	0x08014474
 801227c:	08014494 	.word	0x08014494
 8012280:	08014454 	.word	0x08014454

08012284 <__ascii_wctomb>:
 8012284:	b149      	cbz	r1, 801229a <__ascii_wctomb+0x16>
 8012286:	2aff      	cmp	r2, #255	; 0xff
 8012288:	bf85      	ittet	hi
 801228a:	238a      	movhi	r3, #138	; 0x8a
 801228c:	6003      	strhi	r3, [r0, #0]
 801228e:	700a      	strbls	r2, [r1, #0]
 8012290:	f04f 30ff 	movhi.w	r0, #4294967295
 8012294:	bf98      	it	ls
 8012296:	2001      	movls	r0, #1
 8012298:	4770      	bx	lr
 801229a:	4608      	mov	r0, r1
 801229c:	4770      	bx	lr
	...

080122a0 <__swsetup_r>:
 80122a0:	4b32      	ldr	r3, [pc, #200]	; (801236c <__swsetup_r+0xcc>)
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	681d      	ldr	r5, [r3, #0]
 80122a6:	4606      	mov	r6, r0
 80122a8:	460c      	mov	r4, r1
 80122aa:	b125      	cbz	r5, 80122b6 <__swsetup_r+0x16>
 80122ac:	69ab      	ldr	r3, [r5, #24]
 80122ae:	b913      	cbnz	r3, 80122b6 <__swsetup_r+0x16>
 80122b0:	4628      	mov	r0, r5
 80122b2:	f000 f985 	bl	80125c0 <__sinit>
 80122b6:	4b2e      	ldr	r3, [pc, #184]	; (8012370 <__swsetup_r+0xd0>)
 80122b8:	429c      	cmp	r4, r3
 80122ba:	d10f      	bne.n	80122dc <__swsetup_r+0x3c>
 80122bc:	686c      	ldr	r4, [r5, #4]
 80122be:	89a3      	ldrh	r3, [r4, #12]
 80122c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122c4:	0719      	lsls	r1, r3, #28
 80122c6:	d42c      	bmi.n	8012322 <__swsetup_r+0x82>
 80122c8:	06dd      	lsls	r5, r3, #27
 80122ca:	d411      	bmi.n	80122f0 <__swsetup_r+0x50>
 80122cc:	2309      	movs	r3, #9
 80122ce:	6033      	str	r3, [r6, #0]
 80122d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122d4:	81a3      	strh	r3, [r4, #12]
 80122d6:	f04f 30ff 	mov.w	r0, #4294967295
 80122da:	e03e      	b.n	801235a <__swsetup_r+0xba>
 80122dc:	4b25      	ldr	r3, [pc, #148]	; (8012374 <__swsetup_r+0xd4>)
 80122de:	429c      	cmp	r4, r3
 80122e0:	d101      	bne.n	80122e6 <__swsetup_r+0x46>
 80122e2:	68ac      	ldr	r4, [r5, #8]
 80122e4:	e7eb      	b.n	80122be <__swsetup_r+0x1e>
 80122e6:	4b24      	ldr	r3, [pc, #144]	; (8012378 <__swsetup_r+0xd8>)
 80122e8:	429c      	cmp	r4, r3
 80122ea:	bf08      	it	eq
 80122ec:	68ec      	ldreq	r4, [r5, #12]
 80122ee:	e7e6      	b.n	80122be <__swsetup_r+0x1e>
 80122f0:	0758      	lsls	r0, r3, #29
 80122f2:	d512      	bpl.n	801231a <__swsetup_r+0x7a>
 80122f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122f6:	b141      	cbz	r1, 801230a <__swsetup_r+0x6a>
 80122f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122fc:	4299      	cmp	r1, r3
 80122fe:	d002      	beq.n	8012306 <__swsetup_r+0x66>
 8012300:	4630      	mov	r0, r6
 8012302:	f7ff fb6f 	bl	80119e4 <_free_r>
 8012306:	2300      	movs	r3, #0
 8012308:	6363      	str	r3, [r4, #52]	; 0x34
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012310:	81a3      	strh	r3, [r4, #12]
 8012312:	2300      	movs	r3, #0
 8012314:	6063      	str	r3, [r4, #4]
 8012316:	6923      	ldr	r3, [r4, #16]
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	89a3      	ldrh	r3, [r4, #12]
 801231c:	f043 0308 	orr.w	r3, r3, #8
 8012320:	81a3      	strh	r3, [r4, #12]
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	b94b      	cbnz	r3, 801233a <__swsetup_r+0x9a>
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012330:	d003      	beq.n	801233a <__swsetup_r+0x9a>
 8012332:	4621      	mov	r1, r4
 8012334:	4630      	mov	r0, r6
 8012336:	f000 fa07 	bl	8012748 <__smakebuf_r>
 801233a:	89a0      	ldrh	r0, [r4, #12]
 801233c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012340:	f010 0301 	ands.w	r3, r0, #1
 8012344:	d00a      	beq.n	801235c <__swsetup_r+0xbc>
 8012346:	2300      	movs	r3, #0
 8012348:	60a3      	str	r3, [r4, #8]
 801234a:	6963      	ldr	r3, [r4, #20]
 801234c:	425b      	negs	r3, r3
 801234e:	61a3      	str	r3, [r4, #24]
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	b943      	cbnz	r3, 8012366 <__swsetup_r+0xc6>
 8012354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012358:	d1ba      	bne.n	80122d0 <__swsetup_r+0x30>
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	0781      	lsls	r1, r0, #30
 801235e:	bf58      	it	pl
 8012360:	6963      	ldrpl	r3, [r4, #20]
 8012362:	60a3      	str	r3, [r4, #8]
 8012364:	e7f4      	b.n	8012350 <__swsetup_r+0xb0>
 8012366:	2000      	movs	r0, #0
 8012368:	e7f7      	b.n	801235a <__swsetup_r+0xba>
 801236a:	bf00      	nop
 801236c:	20000018 	.word	0x20000018
 8012370:	08014474 	.word	0x08014474
 8012374:	08014494 	.word	0x08014494
 8012378:	08014454 	.word	0x08014454

0801237c <abort>:
 801237c:	b508      	push	{r3, lr}
 801237e:	2006      	movs	r0, #6
 8012380:	f000 fa52 	bl	8012828 <raise>
 8012384:	2001      	movs	r0, #1
 8012386:	f7f3 fc07 	bl	8005b98 <_exit>
	...

0801238c <__sflush_r>:
 801238c:	898a      	ldrh	r2, [r1, #12]
 801238e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012392:	4605      	mov	r5, r0
 8012394:	0710      	lsls	r0, r2, #28
 8012396:	460c      	mov	r4, r1
 8012398:	d458      	bmi.n	801244c <__sflush_r+0xc0>
 801239a:	684b      	ldr	r3, [r1, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	dc05      	bgt.n	80123ac <__sflush_r+0x20>
 80123a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	dc02      	bgt.n	80123ac <__sflush_r+0x20>
 80123a6:	2000      	movs	r0, #0
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123ae:	2e00      	cmp	r6, #0
 80123b0:	d0f9      	beq.n	80123a6 <__sflush_r+0x1a>
 80123b2:	2300      	movs	r3, #0
 80123b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123b8:	682f      	ldr	r7, [r5, #0]
 80123ba:	602b      	str	r3, [r5, #0]
 80123bc:	d032      	beq.n	8012424 <__sflush_r+0x98>
 80123be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123c0:	89a3      	ldrh	r3, [r4, #12]
 80123c2:	075a      	lsls	r2, r3, #29
 80123c4:	d505      	bpl.n	80123d2 <__sflush_r+0x46>
 80123c6:	6863      	ldr	r3, [r4, #4]
 80123c8:	1ac0      	subs	r0, r0, r3
 80123ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123cc:	b10b      	cbz	r3, 80123d2 <__sflush_r+0x46>
 80123ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123d0:	1ac0      	subs	r0, r0, r3
 80123d2:	2300      	movs	r3, #0
 80123d4:	4602      	mov	r2, r0
 80123d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123d8:	6a21      	ldr	r1, [r4, #32]
 80123da:	4628      	mov	r0, r5
 80123dc:	47b0      	blx	r6
 80123de:	1c43      	adds	r3, r0, #1
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	d106      	bne.n	80123f2 <__sflush_r+0x66>
 80123e4:	6829      	ldr	r1, [r5, #0]
 80123e6:	291d      	cmp	r1, #29
 80123e8:	d82c      	bhi.n	8012444 <__sflush_r+0xb8>
 80123ea:	4a2a      	ldr	r2, [pc, #168]	; (8012494 <__sflush_r+0x108>)
 80123ec:	40ca      	lsrs	r2, r1
 80123ee:	07d6      	lsls	r6, r2, #31
 80123f0:	d528      	bpl.n	8012444 <__sflush_r+0xb8>
 80123f2:	2200      	movs	r2, #0
 80123f4:	6062      	str	r2, [r4, #4]
 80123f6:	04d9      	lsls	r1, r3, #19
 80123f8:	6922      	ldr	r2, [r4, #16]
 80123fa:	6022      	str	r2, [r4, #0]
 80123fc:	d504      	bpl.n	8012408 <__sflush_r+0x7c>
 80123fe:	1c42      	adds	r2, r0, #1
 8012400:	d101      	bne.n	8012406 <__sflush_r+0x7a>
 8012402:	682b      	ldr	r3, [r5, #0]
 8012404:	b903      	cbnz	r3, 8012408 <__sflush_r+0x7c>
 8012406:	6560      	str	r0, [r4, #84]	; 0x54
 8012408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801240a:	602f      	str	r7, [r5, #0]
 801240c:	2900      	cmp	r1, #0
 801240e:	d0ca      	beq.n	80123a6 <__sflush_r+0x1a>
 8012410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012414:	4299      	cmp	r1, r3
 8012416:	d002      	beq.n	801241e <__sflush_r+0x92>
 8012418:	4628      	mov	r0, r5
 801241a:	f7ff fae3 	bl	80119e4 <_free_r>
 801241e:	2000      	movs	r0, #0
 8012420:	6360      	str	r0, [r4, #52]	; 0x34
 8012422:	e7c1      	b.n	80123a8 <__sflush_r+0x1c>
 8012424:	6a21      	ldr	r1, [r4, #32]
 8012426:	2301      	movs	r3, #1
 8012428:	4628      	mov	r0, r5
 801242a:	47b0      	blx	r6
 801242c:	1c41      	adds	r1, r0, #1
 801242e:	d1c7      	bne.n	80123c0 <__sflush_r+0x34>
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d0c4      	beq.n	80123c0 <__sflush_r+0x34>
 8012436:	2b1d      	cmp	r3, #29
 8012438:	d001      	beq.n	801243e <__sflush_r+0xb2>
 801243a:	2b16      	cmp	r3, #22
 801243c:	d101      	bne.n	8012442 <__sflush_r+0xb6>
 801243e:	602f      	str	r7, [r5, #0]
 8012440:	e7b1      	b.n	80123a6 <__sflush_r+0x1a>
 8012442:	89a3      	ldrh	r3, [r4, #12]
 8012444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012448:	81a3      	strh	r3, [r4, #12]
 801244a:	e7ad      	b.n	80123a8 <__sflush_r+0x1c>
 801244c:	690f      	ldr	r7, [r1, #16]
 801244e:	2f00      	cmp	r7, #0
 8012450:	d0a9      	beq.n	80123a6 <__sflush_r+0x1a>
 8012452:	0793      	lsls	r3, r2, #30
 8012454:	680e      	ldr	r6, [r1, #0]
 8012456:	bf08      	it	eq
 8012458:	694b      	ldreq	r3, [r1, #20]
 801245a:	600f      	str	r7, [r1, #0]
 801245c:	bf18      	it	ne
 801245e:	2300      	movne	r3, #0
 8012460:	eba6 0807 	sub.w	r8, r6, r7
 8012464:	608b      	str	r3, [r1, #8]
 8012466:	f1b8 0f00 	cmp.w	r8, #0
 801246a:	dd9c      	ble.n	80123a6 <__sflush_r+0x1a>
 801246c:	6a21      	ldr	r1, [r4, #32]
 801246e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012470:	4643      	mov	r3, r8
 8012472:	463a      	mov	r2, r7
 8012474:	4628      	mov	r0, r5
 8012476:	47b0      	blx	r6
 8012478:	2800      	cmp	r0, #0
 801247a:	dc06      	bgt.n	801248a <__sflush_r+0xfe>
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012482:	81a3      	strh	r3, [r4, #12]
 8012484:	f04f 30ff 	mov.w	r0, #4294967295
 8012488:	e78e      	b.n	80123a8 <__sflush_r+0x1c>
 801248a:	4407      	add	r7, r0
 801248c:	eba8 0800 	sub.w	r8, r8, r0
 8012490:	e7e9      	b.n	8012466 <__sflush_r+0xda>
 8012492:	bf00      	nop
 8012494:	20400001 	.word	0x20400001

08012498 <_fflush_r>:
 8012498:	b538      	push	{r3, r4, r5, lr}
 801249a:	690b      	ldr	r3, [r1, #16]
 801249c:	4605      	mov	r5, r0
 801249e:	460c      	mov	r4, r1
 80124a0:	b913      	cbnz	r3, 80124a8 <_fflush_r+0x10>
 80124a2:	2500      	movs	r5, #0
 80124a4:	4628      	mov	r0, r5
 80124a6:	bd38      	pop	{r3, r4, r5, pc}
 80124a8:	b118      	cbz	r0, 80124b2 <_fflush_r+0x1a>
 80124aa:	6983      	ldr	r3, [r0, #24]
 80124ac:	b90b      	cbnz	r3, 80124b2 <_fflush_r+0x1a>
 80124ae:	f000 f887 	bl	80125c0 <__sinit>
 80124b2:	4b14      	ldr	r3, [pc, #80]	; (8012504 <_fflush_r+0x6c>)
 80124b4:	429c      	cmp	r4, r3
 80124b6:	d11b      	bne.n	80124f0 <_fflush_r+0x58>
 80124b8:	686c      	ldr	r4, [r5, #4]
 80124ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d0ef      	beq.n	80124a2 <_fflush_r+0xa>
 80124c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124c4:	07d0      	lsls	r0, r2, #31
 80124c6:	d404      	bmi.n	80124d2 <_fflush_r+0x3a>
 80124c8:	0599      	lsls	r1, r3, #22
 80124ca:	d402      	bmi.n	80124d2 <_fflush_r+0x3a>
 80124cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ce:	f000 f915 	bl	80126fc <__retarget_lock_acquire_recursive>
 80124d2:	4628      	mov	r0, r5
 80124d4:	4621      	mov	r1, r4
 80124d6:	f7ff ff59 	bl	801238c <__sflush_r>
 80124da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124dc:	07da      	lsls	r2, r3, #31
 80124de:	4605      	mov	r5, r0
 80124e0:	d4e0      	bmi.n	80124a4 <_fflush_r+0xc>
 80124e2:	89a3      	ldrh	r3, [r4, #12]
 80124e4:	059b      	lsls	r3, r3, #22
 80124e6:	d4dd      	bmi.n	80124a4 <_fflush_r+0xc>
 80124e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ea:	f000 f908 	bl	80126fe <__retarget_lock_release_recursive>
 80124ee:	e7d9      	b.n	80124a4 <_fflush_r+0xc>
 80124f0:	4b05      	ldr	r3, [pc, #20]	; (8012508 <_fflush_r+0x70>)
 80124f2:	429c      	cmp	r4, r3
 80124f4:	d101      	bne.n	80124fa <_fflush_r+0x62>
 80124f6:	68ac      	ldr	r4, [r5, #8]
 80124f8:	e7df      	b.n	80124ba <_fflush_r+0x22>
 80124fa:	4b04      	ldr	r3, [pc, #16]	; (801250c <_fflush_r+0x74>)
 80124fc:	429c      	cmp	r4, r3
 80124fe:	bf08      	it	eq
 8012500:	68ec      	ldreq	r4, [r5, #12]
 8012502:	e7da      	b.n	80124ba <_fflush_r+0x22>
 8012504:	08014474 	.word	0x08014474
 8012508:	08014494 	.word	0x08014494
 801250c:	08014454 	.word	0x08014454

08012510 <std>:
 8012510:	2300      	movs	r3, #0
 8012512:	b510      	push	{r4, lr}
 8012514:	4604      	mov	r4, r0
 8012516:	e9c0 3300 	strd	r3, r3, [r0]
 801251a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801251e:	6083      	str	r3, [r0, #8]
 8012520:	8181      	strh	r1, [r0, #12]
 8012522:	6643      	str	r3, [r0, #100]	; 0x64
 8012524:	81c2      	strh	r2, [r0, #14]
 8012526:	6183      	str	r3, [r0, #24]
 8012528:	4619      	mov	r1, r3
 801252a:	2208      	movs	r2, #8
 801252c:	305c      	adds	r0, #92	; 0x5c
 801252e:	f7fd fb8d 	bl	800fc4c <memset>
 8012532:	4b05      	ldr	r3, [pc, #20]	; (8012548 <std+0x38>)
 8012534:	6263      	str	r3, [r4, #36]	; 0x24
 8012536:	4b05      	ldr	r3, [pc, #20]	; (801254c <std+0x3c>)
 8012538:	62a3      	str	r3, [r4, #40]	; 0x28
 801253a:	4b05      	ldr	r3, [pc, #20]	; (8012550 <std+0x40>)
 801253c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801253e:	4b05      	ldr	r3, [pc, #20]	; (8012554 <std+0x44>)
 8012540:	6224      	str	r4, [r4, #32]
 8012542:	6323      	str	r3, [r4, #48]	; 0x30
 8012544:	bd10      	pop	{r4, pc}
 8012546:	bf00      	nop
 8012548:	08012861 	.word	0x08012861
 801254c:	08012883 	.word	0x08012883
 8012550:	080128bb 	.word	0x080128bb
 8012554:	080128df 	.word	0x080128df

08012558 <_cleanup_r>:
 8012558:	4901      	ldr	r1, [pc, #4]	; (8012560 <_cleanup_r+0x8>)
 801255a:	f000 b8af 	b.w	80126bc <_fwalk_reent>
 801255e:	bf00      	nop
 8012560:	08012499 	.word	0x08012499

08012564 <__sfmoreglue>:
 8012564:	b570      	push	{r4, r5, r6, lr}
 8012566:	1e4a      	subs	r2, r1, #1
 8012568:	2568      	movs	r5, #104	; 0x68
 801256a:	4355      	muls	r5, r2
 801256c:	460e      	mov	r6, r1
 801256e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012572:	f7ff fa87 	bl	8011a84 <_malloc_r>
 8012576:	4604      	mov	r4, r0
 8012578:	b140      	cbz	r0, 801258c <__sfmoreglue+0x28>
 801257a:	2100      	movs	r1, #0
 801257c:	e9c0 1600 	strd	r1, r6, [r0]
 8012580:	300c      	adds	r0, #12
 8012582:	60a0      	str	r0, [r4, #8]
 8012584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012588:	f7fd fb60 	bl	800fc4c <memset>
 801258c:	4620      	mov	r0, r4
 801258e:	bd70      	pop	{r4, r5, r6, pc}

08012590 <__sfp_lock_acquire>:
 8012590:	4801      	ldr	r0, [pc, #4]	; (8012598 <__sfp_lock_acquire+0x8>)
 8012592:	f000 b8b3 	b.w	80126fc <__retarget_lock_acquire_recursive>
 8012596:	bf00      	nop
 8012598:	20005764 	.word	0x20005764

0801259c <__sfp_lock_release>:
 801259c:	4801      	ldr	r0, [pc, #4]	; (80125a4 <__sfp_lock_release+0x8>)
 801259e:	f000 b8ae 	b.w	80126fe <__retarget_lock_release_recursive>
 80125a2:	bf00      	nop
 80125a4:	20005764 	.word	0x20005764

080125a8 <__sinit_lock_acquire>:
 80125a8:	4801      	ldr	r0, [pc, #4]	; (80125b0 <__sinit_lock_acquire+0x8>)
 80125aa:	f000 b8a7 	b.w	80126fc <__retarget_lock_acquire_recursive>
 80125ae:	bf00      	nop
 80125b0:	2000575f 	.word	0x2000575f

080125b4 <__sinit_lock_release>:
 80125b4:	4801      	ldr	r0, [pc, #4]	; (80125bc <__sinit_lock_release+0x8>)
 80125b6:	f000 b8a2 	b.w	80126fe <__retarget_lock_release_recursive>
 80125ba:	bf00      	nop
 80125bc:	2000575f 	.word	0x2000575f

080125c0 <__sinit>:
 80125c0:	b510      	push	{r4, lr}
 80125c2:	4604      	mov	r4, r0
 80125c4:	f7ff fff0 	bl	80125a8 <__sinit_lock_acquire>
 80125c8:	69a3      	ldr	r3, [r4, #24]
 80125ca:	b11b      	cbz	r3, 80125d4 <__sinit+0x14>
 80125cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d0:	f7ff bff0 	b.w	80125b4 <__sinit_lock_release>
 80125d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125d8:	6523      	str	r3, [r4, #80]	; 0x50
 80125da:	4b13      	ldr	r3, [pc, #76]	; (8012628 <__sinit+0x68>)
 80125dc:	4a13      	ldr	r2, [pc, #76]	; (801262c <__sinit+0x6c>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80125e2:	42a3      	cmp	r3, r4
 80125e4:	bf04      	itt	eq
 80125e6:	2301      	moveq	r3, #1
 80125e8:	61a3      	streq	r3, [r4, #24]
 80125ea:	4620      	mov	r0, r4
 80125ec:	f000 f820 	bl	8012630 <__sfp>
 80125f0:	6060      	str	r0, [r4, #4]
 80125f2:	4620      	mov	r0, r4
 80125f4:	f000 f81c 	bl	8012630 <__sfp>
 80125f8:	60a0      	str	r0, [r4, #8]
 80125fa:	4620      	mov	r0, r4
 80125fc:	f000 f818 	bl	8012630 <__sfp>
 8012600:	2200      	movs	r2, #0
 8012602:	60e0      	str	r0, [r4, #12]
 8012604:	2104      	movs	r1, #4
 8012606:	6860      	ldr	r0, [r4, #4]
 8012608:	f7ff ff82 	bl	8012510 <std>
 801260c:	68a0      	ldr	r0, [r4, #8]
 801260e:	2201      	movs	r2, #1
 8012610:	2109      	movs	r1, #9
 8012612:	f7ff ff7d 	bl	8012510 <std>
 8012616:	68e0      	ldr	r0, [r4, #12]
 8012618:	2202      	movs	r2, #2
 801261a:	2112      	movs	r1, #18
 801261c:	f7ff ff78 	bl	8012510 <std>
 8012620:	2301      	movs	r3, #1
 8012622:	61a3      	str	r3, [r4, #24]
 8012624:	e7d2      	b.n	80125cc <__sinit+0xc>
 8012626:	bf00      	nop
 8012628:	080140d0 	.word	0x080140d0
 801262c:	08012559 	.word	0x08012559

08012630 <__sfp>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	4607      	mov	r7, r0
 8012634:	f7ff ffac 	bl	8012590 <__sfp_lock_acquire>
 8012638:	4b1e      	ldr	r3, [pc, #120]	; (80126b4 <__sfp+0x84>)
 801263a:	681e      	ldr	r6, [r3, #0]
 801263c:	69b3      	ldr	r3, [r6, #24]
 801263e:	b913      	cbnz	r3, 8012646 <__sfp+0x16>
 8012640:	4630      	mov	r0, r6
 8012642:	f7ff ffbd 	bl	80125c0 <__sinit>
 8012646:	3648      	adds	r6, #72	; 0x48
 8012648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801264c:	3b01      	subs	r3, #1
 801264e:	d503      	bpl.n	8012658 <__sfp+0x28>
 8012650:	6833      	ldr	r3, [r6, #0]
 8012652:	b30b      	cbz	r3, 8012698 <__sfp+0x68>
 8012654:	6836      	ldr	r6, [r6, #0]
 8012656:	e7f7      	b.n	8012648 <__sfp+0x18>
 8012658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801265c:	b9d5      	cbnz	r5, 8012694 <__sfp+0x64>
 801265e:	4b16      	ldr	r3, [pc, #88]	; (80126b8 <__sfp+0x88>)
 8012660:	60e3      	str	r3, [r4, #12]
 8012662:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012666:	6665      	str	r5, [r4, #100]	; 0x64
 8012668:	f000 f847 	bl	80126fa <__retarget_lock_init_recursive>
 801266c:	f7ff ff96 	bl	801259c <__sfp_lock_release>
 8012670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012678:	6025      	str	r5, [r4, #0]
 801267a:	61a5      	str	r5, [r4, #24]
 801267c:	2208      	movs	r2, #8
 801267e:	4629      	mov	r1, r5
 8012680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012684:	f7fd fae2 	bl	800fc4c <memset>
 8012688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801268c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012690:	4620      	mov	r0, r4
 8012692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012694:	3468      	adds	r4, #104	; 0x68
 8012696:	e7d9      	b.n	801264c <__sfp+0x1c>
 8012698:	2104      	movs	r1, #4
 801269a:	4638      	mov	r0, r7
 801269c:	f7ff ff62 	bl	8012564 <__sfmoreglue>
 80126a0:	4604      	mov	r4, r0
 80126a2:	6030      	str	r0, [r6, #0]
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d1d5      	bne.n	8012654 <__sfp+0x24>
 80126a8:	f7ff ff78 	bl	801259c <__sfp_lock_release>
 80126ac:	230c      	movs	r3, #12
 80126ae:	603b      	str	r3, [r7, #0]
 80126b0:	e7ee      	b.n	8012690 <__sfp+0x60>
 80126b2:	bf00      	nop
 80126b4:	080140d0 	.word	0x080140d0
 80126b8:	ffff0001 	.word	0xffff0001

080126bc <_fwalk_reent>:
 80126bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c0:	4606      	mov	r6, r0
 80126c2:	4688      	mov	r8, r1
 80126c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126c8:	2700      	movs	r7, #0
 80126ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126ce:	f1b9 0901 	subs.w	r9, r9, #1
 80126d2:	d505      	bpl.n	80126e0 <_fwalk_reent+0x24>
 80126d4:	6824      	ldr	r4, [r4, #0]
 80126d6:	2c00      	cmp	r4, #0
 80126d8:	d1f7      	bne.n	80126ca <_fwalk_reent+0xe>
 80126da:	4638      	mov	r0, r7
 80126dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126e0:	89ab      	ldrh	r3, [r5, #12]
 80126e2:	2b01      	cmp	r3, #1
 80126e4:	d907      	bls.n	80126f6 <_fwalk_reent+0x3a>
 80126e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126ea:	3301      	adds	r3, #1
 80126ec:	d003      	beq.n	80126f6 <_fwalk_reent+0x3a>
 80126ee:	4629      	mov	r1, r5
 80126f0:	4630      	mov	r0, r6
 80126f2:	47c0      	blx	r8
 80126f4:	4307      	orrs	r7, r0
 80126f6:	3568      	adds	r5, #104	; 0x68
 80126f8:	e7e9      	b.n	80126ce <_fwalk_reent+0x12>

080126fa <__retarget_lock_init_recursive>:
 80126fa:	4770      	bx	lr

080126fc <__retarget_lock_acquire_recursive>:
 80126fc:	4770      	bx	lr

080126fe <__retarget_lock_release_recursive>:
 80126fe:	4770      	bx	lr

08012700 <__swhatbuf_r>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	460e      	mov	r6, r1
 8012704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012708:	2900      	cmp	r1, #0
 801270a:	b096      	sub	sp, #88	; 0x58
 801270c:	4614      	mov	r4, r2
 801270e:	461d      	mov	r5, r3
 8012710:	da07      	bge.n	8012722 <__swhatbuf_r+0x22>
 8012712:	2300      	movs	r3, #0
 8012714:	602b      	str	r3, [r5, #0]
 8012716:	89b3      	ldrh	r3, [r6, #12]
 8012718:	061a      	lsls	r2, r3, #24
 801271a:	d410      	bmi.n	801273e <__swhatbuf_r+0x3e>
 801271c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012720:	e00e      	b.n	8012740 <__swhatbuf_r+0x40>
 8012722:	466a      	mov	r2, sp
 8012724:	f000 f902 	bl	801292c <_fstat_r>
 8012728:	2800      	cmp	r0, #0
 801272a:	dbf2      	blt.n	8012712 <__swhatbuf_r+0x12>
 801272c:	9a01      	ldr	r2, [sp, #4]
 801272e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012732:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012736:	425a      	negs	r2, r3
 8012738:	415a      	adcs	r2, r3
 801273a:	602a      	str	r2, [r5, #0]
 801273c:	e7ee      	b.n	801271c <__swhatbuf_r+0x1c>
 801273e:	2340      	movs	r3, #64	; 0x40
 8012740:	2000      	movs	r0, #0
 8012742:	6023      	str	r3, [r4, #0]
 8012744:	b016      	add	sp, #88	; 0x58
 8012746:	bd70      	pop	{r4, r5, r6, pc}

08012748 <__smakebuf_r>:
 8012748:	898b      	ldrh	r3, [r1, #12]
 801274a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801274c:	079d      	lsls	r5, r3, #30
 801274e:	4606      	mov	r6, r0
 8012750:	460c      	mov	r4, r1
 8012752:	d507      	bpl.n	8012764 <__smakebuf_r+0x1c>
 8012754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	6123      	str	r3, [r4, #16]
 801275c:	2301      	movs	r3, #1
 801275e:	6163      	str	r3, [r4, #20]
 8012760:	b002      	add	sp, #8
 8012762:	bd70      	pop	{r4, r5, r6, pc}
 8012764:	ab01      	add	r3, sp, #4
 8012766:	466a      	mov	r2, sp
 8012768:	f7ff ffca 	bl	8012700 <__swhatbuf_r>
 801276c:	9900      	ldr	r1, [sp, #0]
 801276e:	4605      	mov	r5, r0
 8012770:	4630      	mov	r0, r6
 8012772:	f7ff f987 	bl	8011a84 <_malloc_r>
 8012776:	b948      	cbnz	r0, 801278c <__smakebuf_r+0x44>
 8012778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801277c:	059a      	lsls	r2, r3, #22
 801277e:	d4ef      	bmi.n	8012760 <__smakebuf_r+0x18>
 8012780:	f023 0303 	bic.w	r3, r3, #3
 8012784:	f043 0302 	orr.w	r3, r3, #2
 8012788:	81a3      	strh	r3, [r4, #12]
 801278a:	e7e3      	b.n	8012754 <__smakebuf_r+0xc>
 801278c:	4b0d      	ldr	r3, [pc, #52]	; (80127c4 <__smakebuf_r+0x7c>)
 801278e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012790:	89a3      	ldrh	r3, [r4, #12]
 8012792:	6020      	str	r0, [r4, #0]
 8012794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012798:	81a3      	strh	r3, [r4, #12]
 801279a:	9b00      	ldr	r3, [sp, #0]
 801279c:	6163      	str	r3, [r4, #20]
 801279e:	9b01      	ldr	r3, [sp, #4]
 80127a0:	6120      	str	r0, [r4, #16]
 80127a2:	b15b      	cbz	r3, 80127bc <__smakebuf_r+0x74>
 80127a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127a8:	4630      	mov	r0, r6
 80127aa:	f000 f8d1 	bl	8012950 <_isatty_r>
 80127ae:	b128      	cbz	r0, 80127bc <__smakebuf_r+0x74>
 80127b0:	89a3      	ldrh	r3, [r4, #12]
 80127b2:	f023 0303 	bic.w	r3, r3, #3
 80127b6:	f043 0301 	orr.w	r3, r3, #1
 80127ba:	81a3      	strh	r3, [r4, #12]
 80127bc:	89a0      	ldrh	r0, [r4, #12]
 80127be:	4305      	orrs	r5, r0
 80127c0:	81a5      	strh	r5, [r4, #12]
 80127c2:	e7cd      	b.n	8012760 <__smakebuf_r+0x18>
 80127c4:	08012559 	.word	0x08012559

080127c8 <_malloc_usable_size_r>:
 80127c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127cc:	1f18      	subs	r0, r3, #4
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	bfbc      	itt	lt
 80127d2:	580b      	ldrlt	r3, [r1, r0]
 80127d4:	18c0      	addlt	r0, r0, r3
 80127d6:	4770      	bx	lr

080127d8 <_raise_r>:
 80127d8:	291f      	cmp	r1, #31
 80127da:	b538      	push	{r3, r4, r5, lr}
 80127dc:	4604      	mov	r4, r0
 80127de:	460d      	mov	r5, r1
 80127e0:	d904      	bls.n	80127ec <_raise_r+0x14>
 80127e2:	2316      	movs	r3, #22
 80127e4:	6003      	str	r3, [r0, #0]
 80127e6:	f04f 30ff 	mov.w	r0, #4294967295
 80127ea:	bd38      	pop	{r3, r4, r5, pc}
 80127ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80127ee:	b112      	cbz	r2, 80127f6 <_raise_r+0x1e>
 80127f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127f4:	b94b      	cbnz	r3, 801280a <_raise_r+0x32>
 80127f6:	4620      	mov	r0, r4
 80127f8:	f000 f830 	bl	801285c <_getpid_r>
 80127fc:	462a      	mov	r2, r5
 80127fe:	4601      	mov	r1, r0
 8012800:	4620      	mov	r0, r4
 8012802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012806:	f000 b817 	b.w	8012838 <_kill_r>
 801280a:	2b01      	cmp	r3, #1
 801280c:	d00a      	beq.n	8012824 <_raise_r+0x4c>
 801280e:	1c59      	adds	r1, r3, #1
 8012810:	d103      	bne.n	801281a <_raise_r+0x42>
 8012812:	2316      	movs	r3, #22
 8012814:	6003      	str	r3, [r0, #0]
 8012816:	2001      	movs	r0, #1
 8012818:	e7e7      	b.n	80127ea <_raise_r+0x12>
 801281a:	2400      	movs	r4, #0
 801281c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012820:	4628      	mov	r0, r5
 8012822:	4798      	blx	r3
 8012824:	2000      	movs	r0, #0
 8012826:	e7e0      	b.n	80127ea <_raise_r+0x12>

08012828 <raise>:
 8012828:	4b02      	ldr	r3, [pc, #8]	; (8012834 <raise+0xc>)
 801282a:	4601      	mov	r1, r0
 801282c:	6818      	ldr	r0, [r3, #0]
 801282e:	f7ff bfd3 	b.w	80127d8 <_raise_r>
 8012832:	bf00      	nop
 8012834:	20000018 	.word	0x20000018

08012838 <_kill_r>:
 8012838:	b538      	push	{r3, r4, r5, lr}
 801283a:	4d07      	ldr	r5, [pc, #28]	; (8012858 <_kill_r+0x20>)
 801283c:	2300      	movs	r3, #0
 801283e:	4604      	mov	r4, r0
 8012840:	4608      	mov	r0, r1
 8012842:	4611      	mov	r1, r2
 8012844:	602b      	str	r3, [r5, #0]
 8012846:	f7f3 f997 	bl	8005b78 <_kill>
 801284a:	1c43      	adds	r3, r0, #1
 801284c:	d102      	bne.n	8012854 <_kill_r+0x1c>
 801284e:	682b      	ldr	r3, [r5, #0]
 8012850:	b103      	cbz	r3, 8012854 <_kill_r+0x1c>
 8012852:	6023      	str	r3, [r4, #0]
 8012854:	bd38      	pop	{r3, r4, r5, pc}
 8012856:	bf00      	nop
 8012858:	20005758 	.word	0x20005758

0801285c <_getpid_r>:
 801285c:	f7f3 b984 	b.w	8005b68 <_getpid>

08012860 <__sread>:
 8012860:	b510      	push	{r4, lr}
 8012862:	460c      	mov	r4, r1
 8012864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012868:	f000 f894 	bl	8012994 <_read_r>
 801286c:	2800      	cmp	r0, #0
 801286e:	bfab      	itete	ge
 8012870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012872:	89a3      	ldrhlt	r3, [r4, #12]
 8012874:	181b      	addge	r3, r3, r0
 8012876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801287a:	bfac      	ite	ge
 801287c:	6563      	strge	r3, [r4, #84]	; 0x54
 801287e:	81a3      	strhlt	r3, [r4, #12]
 8012880:	bd10      	pop	{r4, pc}

08012882 <__swrite>:
 8012882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012886:	461f      	mov	r7, r3
 8012888:	898b      	ldrh	r3, [r1, #12]
 801288a:	05db      	lsls	r3, r3, #23
 801288c:	4605      	mov	r5, r0
 801288e:	460c      	mov	r4, r1
 8012890:	4616      	mov	r6, r2
 8012892:	d505      	bpl.n	80128a0 <__swrite+0x1e>
 8012894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012898:	2302      	movs	r3, #2
 801289a:	2200      	movs	r2, #0
 801289c:	f000 f868 	bl	8012970 <_lseek_r>
 80128a0:	89a3      	ldrh	r3, [r4, #12]
 80128a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128aa:	81a3      	strh	r3, [r4, #12]
 80128ac:	4632      	mov	r2, r6
 80128ae:	463b      	mov	r3, r7
 80128b0:	4628      	mov	r0, r5
 80128b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128b6:	f000 b817 	b.w	80128e8 <_write_r>

080128ba <__sseek>:
 80128ba:	b510      	push	{r4, lr}
 80128bc:	460c      	mov	r4, r1
 80128be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c2:	f000 f855 	bl	8012970 <_lseek_r>
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	bf15      	itete	ne
 80128cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80128ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128d6:	81a3      	strheq	r3, [r4, #12]
 80128d8:	bf18      	it	ne
 80128da:	81a3      	strhne	r3, [r4, #12]
 80128dc:	bd10      	pop	{r4, pc}

080128de <__sclose>:
 80128de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e2:	f000 b813 	b.w	801290c <_close_r>
	...

080128e8 <_write_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4d07      	ldr	r5, [pc, #28]	; (8012908 <_write_r+0x20>)
 80128ec:	4604      	mov	r4, r0
 80128ee:	4608      	mov	r0, r1
 80128f0:	4611      	mov	r1, r2
 80128f2:	2200      	movs	r2, #0
 80128f4:	602a      	str	r2, [r5, #0]
 80128f6:	461a      	mov	r2, r3
 80128f8:	f7f3 f975 	bl	8005be6 <_write>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d102      	bne.n	8012906 <_write_r+0x1e>
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	b103      	cbz	r3, 8012906 <_write_r+0x1e>
 8012904:	6023      	str	r3, [r4, #0]
 8012906:	bd38      	pop	{r3, r4, r5, pc}
 8012908:	20005758 	.word	0x20005758

0801290c <_close_r>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	4d06      	ldr	r5, [pc, #24]	; (8012928 <_close_r+0x1c>)
 8012910:	2300      	movs	r3, #0
 8012912:	4604      	mov	r4, r0
 8012914:	4608      	mov	r0, r1
 8012916:	602b      	str	r3, [r5, #0]
 8012918:	f7f3 f981 	bl	8005c1e <_close>
 801291c:	1c43      	adds	r3, r0, #1
 801291e:	d102      	bne.n	8012926 <_close_r+0x1a>
 8012920:	682b      	ldr	r3, [r5, #0]
 8012922:	b103      	cbz	r3, 8012926 <_close_r+0x1a>
 8012924:	6023      	str	r3, [r4, #0]
 8012926:	bd38      	pop	{r3, r4, r5, pc}
 8012928:	20005758 	.word	0x20005758

0801292c <_fstat_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	4d07      	ldr	r5, [pc, #28]	; (801294c <_fstat_r+0x20>)
 8012930:	2300      	movs	r3, #0
 8012932:	4604      	mov	r4, r0
 8012934:	4608      	mov	r0, r1
 8012936:	4611      	mov	r1, r2
 8012938:	602b      	str	r3, [r5, #0]
 801293a:	f7f3 f97c 	bl	8005c36 <_fstat>
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	d102      	bne.n	8012948 <_fstat_r+0x1c>
 8012942:	682b      	ldr	r3, [r5, #0]
 8012944:	b103      	cbz	r3, 8012948 <_fstat_r+0x1c>
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	bd38      	pop	{r3, r4, r5, pc}
 801294a:	bf00      	nop
 801294c:	20005758 	.word	0x20005758

08012950 <_isatty_r>:
 8012950:	b538      	push	{r3, r4, r5, lr}
 8012952:	4d06      	ldr	r5, [pc, #24]	; (801296c <_isatty_r+0x1c>)
 8012954:	2300      	movs	r3, #0
 8012956:	4604      	mov	r4, r0
 8012958:	4608      	mov	r0, r1
 801295a:	602b      	str	r3, [r5, #0]
 801295c:	f7f3 f97b 	bl	8005c56 <_isatty>
 8012960:	1c43      	adds	r3, r0, #1
 8012962:	d102      	bne.n	801296a <_isatty_r+0x1a>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	b103      	cbz	r3, 801296a <_isatty_r+0x1a>
 8012968:	6023      	str	r3, [r4, #0]
 801296a:	bd38      	pop	{r3, r4, r5, pc}
 801296c:	20005758 	.word	0x20005758

08012970 <_lseek_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4d07      	ldr	r5, [pc, #28]	; (8012990 <_lseek_r+0x20>)
 8012974:	4604      	mov	r4, r0
 8012976:	4608      	mov	r0, r1
 8012978:	4611      	mov	r1, r2
 801297a:	2200      	movs	r2, #0
 801297c:	602a      	str	r2, [r5, #0]
 801297e:	461a      	mov	r2, r3
 8012980:	f7f3 f974 	bl	8005c6c <_lseek>
 8012984:	1c43      	adds	r3, r0, #1
 8012986:	d102      	bne.n	801298e <_lseek_r+0x1e>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	b103      	cbz	r3, 801298e <_lseek_r+0x1e>
 801298c:	6023      	str	r3, [r4, #0]
 801298e:	bd38      	pop	{r3, r4, r5, pc}
 8012990:	20005758 	.word	0x20005758

08012994 <_read_r>:
 8012994:	b538      	push	{r3, r4, r5, lr}
 8012996:	4d07      	ldr	r5, [pc, #28]	; (80129b4 <_read_r+0x20>)
 8012998:	4604      	mov	r4, r0
 801299a:	4608      	mov	r0, r1
 801299c:	4611      	mov	r1, r2
 801299e:	2200      	movs	r2, #0
 80129a0:	602a      	str	r2, [r5, #0]
 80129a2:	461a      	mov	r2, r3
 80129a4:	f7f3 f902 	bl	8005bac <_read>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	d102      	bne.n	80129b2 <_read_r+0x1e>
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	b103      	cbz	r3, 80129b2 <_read_r+0x1e>
 80129b0:	6023      	str	r3, [r4, #0]
 80129b2:	bd38      	pop	{r3, r4, r5, pc}
 80129b4:	20005758 	.word	0x20005758

080129b8 <cos>:
 80129b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129ba:	ec53 2b10 	vmov	r2, r3, d0
 80129be:	4824      	ldr	r0, [pc, #144]	; (8012a50 <cos+0x98>)
 80129c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80129c4:	4281      	cmp	r1, r0
 80129c6:	dc06      	bgt.n	80129d6 <cos+0x1e>
 80129c8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012a48 <cos+0x90>
 80129cc:	f000 faa4 	bl	8012f18 <__kernel_cos>
 80129d0:	ec51 0b10 	vmov	r0, r1, d0
 80129d4:	e007      	b.n	80129e6 <cos+0x2e>
 80129d6:	481f      	ldr	r0, [pc, #124]	; (8012a54 <cos+0x9c>)
 80129d8:	4281      	cmp	r1, r0
 80129da:	dd09      	ble.n	80129f0 <cos+0x38>
 80129dc:	ee10 0a10 	vmov	r0, s0
 80129e0:	4619      	mov	r1, r3
 80129e2:	f7ed fc61 	bl	80002a8 <__aeabi_dsub>
 80129e6:	ec41 0b10 	vmov	d0, r0, r1
 80129ea:	b005      	add	sp, #20
 80129ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80129f0:	4668      	mov	r0, sp
 80129f2:	f000 f885 	bl	8012b00 <__ieee754_rem_pio2>
 80129f6:	f000 0003 	and.w	r0, r0, #3
 80129fa:	2801      	cmp	r0, #1
 80129fc:	d007      	beq.n	8012a0e <cos+0x56>
 80129fe:	2802      	cmp	r0, #2
 8012a00:	d012      	beq.n	8012a28 <cos+0x70>
 8012a02:	b9c0      	cbnz	r0, 8012a36 <cos+0x7e>
 8012a04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a08:	ed9d 0b00 	vldr	d0, [sp]
 8012a0c:	e7de      	b.n	80129cc <cos+0x14>
 8012a0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a12:	ed9d 0b00 	vldr	d0, [sp]
 8012a16:	f000 fe87 	bl	8013728 <__kernel_sin>
 8012a1a:	ec53 2b10 	vmov	r2, r3, d0
 8012a1e:	ee10 0a10 	vmov	r0, s0
 8012a22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012a26:	e7de      	b.n	80129e6 <cos+0x2e>
 8012a28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a2c:	ed9d 0b00 	vldr	d0, [sp]
 8012a30:	f000 fa72 	bl	8012f18 <__kernel_cos>
 8012a34:	e7f1      	b.n	8012a1a <cos+0x62>
 8012a36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a3a:	ed9d 0b00 	vldr	d0, [sp]
 8012a3e:	2001      	movs	r0, #1
 8012a40:	f000 fe72 	bl	8013728 <__kernel_sin>
 8012a44:	e7c4      	b.n	80129d0 <cos+0x18>
 8012a46:	bf00      	nop
	...
 8012a50:	3fe921fb 	.word	0x3fe921fb
 8012a54:	7fefffff 	.word	0x7fefffff

08012a58 <sin>:
 8012a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a5a:	ec53 2b10 	vmov	r2, r3, d0
 8012a5e:	4826      	ldr	r0, [pc, #152]	; (8012af8 <sin+0xa0>)
 8012a60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012a64:	4281      	cmp	r1, r0
 8012a66:	dc07      	bgt.n	8012a78 <sin+0x20>
 8012a68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012af0 <sin+0x98>
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	f000 fe5b 	bl	8013728 <__kernel_sin>
 8012a72:	ec51 0b10 	vmov	r0, r1, d0
 8012a76:	e007      	b.n	8012a88 <sin+0x30>
 8012a78:	4820      	ldr	r0, [pc, #128]	; (8012afc <sin+0xa4>)
 8012a7a:	4281      	cmp	r1, r0
 8012a7c:	dd09      	ble.n	8012a92 <sin+0x3a>
 8012a7e:	ee10 0a10 	vmov	r0, s0
 8012a82:	4619      	mov	r1, r3
 8012a84:	f7ed fc10 	bl	80002a8 <__aeabi_dsub>
 8012a88:	ec41 0b10 	vmov	d0, r0, r1
 8012a8c:	b005      	add	sp, #20
 8012a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a92:	4668      	mov	r0, sp
 8012a94:	f000 f834 	bl	8012b00 <__ieee754_rem_pio2>
 8012a98:	f000 0003 	and.w	r0, r0, #3
 8012a9c:	2801      	cmp	r0, #1
 8012a9e:	d008      	beq.n	8012ab2 <sin+0x5a>
 8012aa0:	2802      	cmp	r0, #2
 8012aa2:	d00d      	beq.n	8012ac0 <sin+0x68>
 8012aa4:	b9d0      	cbnz	r0, 8012adc <sin+0x84>
 8012aa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012aaa:	ed9d 0b00 	vldr	d0, [sp]
 8012aae:	2001      	movs	r0, #1
 8012ab0:	e7dd      	b.n	8012a6e <sin+0x16>
 8012ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ab6:	ed9d 0b00 	vldr	d0, [sp]
 8012aba:	f000 fa2d 	bl	8012f18 <__kernel_cos>
 8012abe:	e7d8      	b.n	8012a72 <sin+0x1a>
 8012ac0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ac4:	ed9d 0b00 	vldr	d0, [sp]
 8012ac8:	2001      	movs	r0, #1
 8012aca:	f000 fe2d 	bl	8013728 <__kernel_sin>
 8012ace:	ec53 2b10 	vmov	r2, r3, d0
 8012ad2:	ee10 0a10 	vmov	r0, s0
 8012ad6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012ada:	e7d5      	b.n	8012a88 <sin+0x30>
 8012adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ae0:	ed9d 0b00 	vldr	d0, [sp]
 8012ae4:	f000 fa18 	bl	8012f18 <__kernel_cos>
 8012ae8:	e7f1      	b.n	8012ace <sin+0x76>
 8012aea:	bf00      	nop
 8012aec:	f3af 8000 	nop.w
	...
 8012af8:	3fe921fb 	.word	0x3fe921fb
 8012afc:	7fefffff 	.word	0x7fefffff

08012b00 <__ieee754_rem_pio2>:
 8012b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b04:	ed2d 8b02 	vpush	{d8}
 8012b08:	ec55 4b10 	vmov	r4, r5, d0
 8012b0c:	4bca      	ldr	r3, [pc, #808]	; (8012e38 <__ieee754_rem_pio2+0x338>)
 8012b0e:	b08b      	sub	sp, #44	; 0x2c
 8012b10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012b14:	4598      	cmp	r8, r3
 8012b16:	4682      	mov	sl, r0
 8012b18:	9502      	str	r5, [sp, #8]
 8012b1a:	dc08      	bgt.n	8012b2e <__ieee754_rem_pio2+0x2e>
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2300      	movs	r3, #0
 8012b20:	ed80 0b00 	vstr	d0, [r0]
 8012b24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012b28:	f04f 0b00 	mov.w	fp, #0
 8012b2c:	e028      	b.n	8012b80 <__ieee754_rem_pio2+0x80>
 8012b2e:	4bc3      	ldr	r3, [pc, #780]	; (8012e3c <__ieee754_rem_pio2+0x33c>)
 8012b30:	4598      	cmp	r8, r3
 8012b32:	dc78      	bgt.n	8012c26 <__ieee754_rem_pio2+0x126>
 8012b34:	9b02      	ldr	r3, [sp, #8]
 8012b36:	4ec2      	ldr	r6, [pc, #776]	; (8012e40 <__ieee754_rem_pio2+0x340>)
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	ee10 0a10 	vmov	r0, s0
 8012b3e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x300>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	4629      	mov	r1, r5
 8012b46:	dd39      	ble.n	8012bbc <__ieee754_rem_pio2+0xbc>
 8012b48:	f7ed fbae 	bl	80002a8 <__aeabi_dsub>
 8012b4c:	45b0      	cmp	r8, r6
 8012b4e:	4604      	mov	r4, r0
 8012b50:	460d      	mov	r5, r1
 8012b52:	d01b      	beq.n	8012b8c <__ieee754_rem_pio2+0x8c>
 8012b54:	a3ac      	add	r3, pc, #688	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x308>)
 8012b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5a:	f7ed fba5 	bl	80002a8 <__aeabi_dsub>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	460b      	mov	r3, r1
 8012b62:	e9ca 2300 	strd	r2, r3, [sl]
 8012b66:	4620      	mov	r0, r4
 8012b68:	4629      	mov	r1, r5
 8012b6a:	f7ed fb9d 	bl	80002a8 <__aeabi_dsub>
 8012b6e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x308>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	f7ed fb98 	bl	80002a8 <__aeabi_dsub>
 8012b78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b7c:	f04f 0b01 	mov.w	fp, #1
 8012b80:	4658      	mov	r0, fp
 8012b82:	b00b      	add	sp, #44	; 0x2c
 8012b84:	ecbd 8b02 	vpop	{d8}
 8012b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012e10 <__ieee754_rem_pio2+0x310>)
 8012b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b92:	f7ed fb89 	bl	80002a8 <__aeabi_dsub>
 8012b96:	a3a0      	add	r3, pc, #640	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x318>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	460d      	mov	r5, r1
 8012ba0:	f7ed fb82 	bl	80002a8 <__aeabi_dsub>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	e9ca 2300 	strd	r2, r3, [sl]
 8012bac:	4620      	mov	r0, r4
 8012bae:	4629      	mov	r1, r5
 8012bb0:	f7ed fb7a 	bl	80002a8 <__aeabi_dsub>
 8012bb4:	a398      	add	r3, pc, #608	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x318>)
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	e7db      	b.n	8012b74 <__ieee754_rem_pio2+0x74>
 8012bbc:	f7ed fb76 	bl	80002ac <__adddf3>
 8012bc0:	45b0      	cmp	r8, r6
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	460d      	mov	r5, r1
 8012bc6:	d016      	beq.n	8012bf6 <__ieee754_rem_pio2+0xf6>
 8012bc8:	a38f      	add	r3, pc, #572	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x308>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	f7ed fb6d 	bl	80002ac <__adddf3>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	e9ca 2300 	strd	r2, r3, [sl]
 8012bda:	4620      	mov	r0, r4
 8012bdc:	4629      	mov	r1, r5
 8012bde:	f7ed fb63 	bl	80002a8 <__aeabi_dsub>
 8012be2:	a389      	add	r3, pc, #548	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x308>)
 8012be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be8:	f7ed fb60 	bl	80002ac <__adddf3>
 8012bec:	f04f 3bff 	mov.w	fp, #4294967295
 8012bf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bf4:	e7c4      	b.n	8012b80 <__ieee754_rem_pio2+0x80>
 8012bf6:	a386      	add	r3, pc, #536	; (adr r3, 8012e10 <__ieee754_rem_pio2+0x310>)
 8012bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfc:	f7ed fb56 	bl	80002ac <__adddf3>
 8012c00:	a385      	add	r3, pc, #532	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x318>)
 8012c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c06:	4604      	mov	r4, r0
 8012c08:	460d      	mov	r5, r1
 8012c0a:	f7ed fb4f 	bl	80002ac <__adddf3>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	460b      	mov	r3, r1
 8012c12:	e9ca 2300 	strd	r2, r3, [sl]
 8012c16:	4620      	mov	r0, r4
 8012c18:	4629      	mov	r1, r5
 8012c1a:	f7ed fb45 	bl	80002a8 <__aeabi_dsub>
 8012c1e:	a37e      	add	r3, pc, #504	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x318>)
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	e7e0      	b.n	8012be8 <__ieee754_rem_pio2+0xe8>
 8012c26:	4b87      	ldr	r3, [pc, #540]	; (8012e44 <__ieee754_rem_pio2+0x344>)
 8012c28:	4598      	cmp	r8, r3
 8012c2a:	f300 80d9 	bgt.w	8012de0 <__ieee754_rem_pio2+0x2e0>
 8012c2e:	f000 fe39 	bl	80138a4 <fabs>
 8012c32:	ec55 4b10 	vmov	r4, r5, d0
 8012c36:	ee10 0a10 	vmov	r0, s0
 8012c3a:	a379      	add	r3, pc, #484	; (adr r3, 8012e20 <__ieee754_rem_pio2+0x320>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	4629      	mov	r1, r5
 8012c42:	f7ed fce9 	bl	8000618 <__aeabi_dmul>
 8012c46:	4b80      	ldr	r3, [pc, #512]	; (8012e48 <__ieee754_rem_pio2+0x348>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f7ed fb2f 	bl	80002ac <__adddf3>
 8012c4e:	f7ed ff93 	bl	8000b78 <__aeabi_d2iz>
 8012c52:	4683      	mov	fp, r0
 8012c54:	f7ed fc76 	bl	8000544 <__aeabi_i2d>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	ec43 2b18 	vmov	d8, r2, r3
 8012c60:	a367      	add	r3, pc, #412	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x300>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fcd7 	bl	8000618 <__aeabi_dmul>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	4620      	mov	r0, r4
 8012c70:	4629      	mov	r1, r5
 8012c72:	f7ed fb19 	bl	80002a8 <__aeabi_dsub>
 8012c76:	a364      	add	r3, pc, #400	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x308>)
 8012c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	ec51 0b18 	vmov	r0, r1, d8
 8012c84:	f7ed fcc8 	bl	8000618 <__aeabi_dmul>
 8012c88:	f1bb 0f1f 	cmp.w	fp, #31
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	460d      	mov	r5, r1
 8012c90:	dc0d      	bgt.n	8012cae <__ieee754_rem_pio2+0x1ae>
 8012c92:	4b6e      	ldr	r3, [pc, #440]	; (8012e4c <__ieee754_rem_pio2+0x34c>)
 8012c94:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c9c:	4543      	cmp	r3, r8
 8012c9e:	d006      	beq.n	8012cae <__ieee754_rem_pio2+0x1ae>
 8012ca0:	4622      	mov	r2, r4
 8012ca2:	462b      	mov	r3, r5
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	f7ed fafe 	bl	80002a8 <__aeabi_dsub>
 8012cac:	e00f      	b.n	8012cce <__ieee754_rem_pio2+0x1ce>
 8012cae:	462b      	mov	r3, r5
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	f7ed faf7 	bl	80002a8 <__aeabi_dsub>
 8012cba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012cbe:	9303      	str	r3, [sp, #12]
 8012cc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012cc4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012cc8:	f1b8 0f10 	cmp.w	r8, #16
 8012ccc:	dc02      	bgt.n	8012cd4 <__ieee754_rem_pio2+0x1d4>
 8012cce:	e9ca 0100 	strd	r0, r1, [sl]
 8012cd2:	e039      	b.n	8012d48 <__ieee754_rem_pio2+0x248>
 8012cd4:	a34e      	add	r3, pc, #312	; (adr r3, 8012e10 <__ieee754_rem_pio2+0x310>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	ec51 0b18 	vmov	r0, r1, d8
 8012cde:	f7ed fc9b 	bl	8000618 <__aeabi_dmul>
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	460d      	mov	r5, r1
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	4630      	mov	r0, r6
 8012cec:	4639      	mov	r1, r7
 8012cee:	f7ed fadb 	bl	80002a8 <__aeabi_dsub>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	4680      	mov	r8, r0
 8012cf8:	4689      	mov	r9, r1
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	4639      	mov	r1, r7
 8012cfe:	f7ed fad3 	bl	80002a8 <__aeabi_dsub>
 8012d02:	4622      	mov	r2, r4
 8012d04:	462b      	mov	r3, r5
 8012d06:	f7ed facf 	bl	80002a8 <__aeabi_dsub>
 8012d0a:	a343      	add	r3, pc, #268	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x318>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	4604      	mov	r4, r0
 8012d12:	460d      	mov	r5, r1
 8012d14:	ec51 0b18 	vmov	r0, r1, d8
 8012d18:	f7ed fc7e 	bl	8000618 <__aeabi_dmul>
 8012d1c:	4622      	mov	r2, r4
 8012d1e:	462b      	mov	r3, r5
 8012d20:	f7ed fac2 	bl	80002a8 <__aeabi_dsub>
 8012d24:	4602      	mov	r2, r0
 8012d26:	460b      	mov	r3, r1
 8012d28:	4604      	mov	r4, r0
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	4640      	mov	r0, r8
 8012d2e:	4649      	mov	r1, r9
 8012d30:	f7ed faba 	bl	80002a8 <__aeabi_dsub>
 8012d34:	9a03      	ldr	r2, [sp, #12]
 8012d36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	2b31      	cmp	r3, #49	; 0x31
 8012d3e:	dc24      	bgt.n	8012d8a <__ieee754_rem_pio2+0x28a>
 8012d40:	e9ca 0100 	strd	r0, r1, [sl]
 8012d44:	4646      	mov	r6, r8
 8012d46:	464f      	mov	r7, r9
 8012d48:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	4642      	mov	r2, r8
 8012d50:	464b      	mov	r3, r9
 8012d52:	4639      	mov	r1, r7
 8012d54:	f7ed faa8 	bl	80002a8 <__aeabi_dsub>
 8012d58:	462b      	mov	r3, r5
 8012d5a:	4622      	mov	r2, r4
 8012d5c:	f7ed faa4 	bl	80002a8 <__aeabi_dsub>
 8012d60:	9b02      	ldr	r3, [sp, #8]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d68:	f6bf af0a 	bge.w	8012b80 <__ieee754_rem_pio2+0x80>
 8012d6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012d70:	f8ca 3004 	str.w	r3, [sl, #4]
 8012d74:	f8ca 8000 	str.w	r8, [sl]
 8012d78:	f8ca 0008 	str.w	r0, [sl, #8]
 8012d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d80:	f8ca 300c 	str.w	r3, [sl, #12]
 8012d84:	f1cb 0b00 	rsb	fp, fp, #0
 8012d88:	e6fa      	b.n	8012b80 <__ieee754_rem_pio2+0x80>
 8012d8a:	a327      	add	r3, pc, #156	; (adr r3, 8012e28 <__ieee754_rem_pio2+0x328>)
 8012d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d90:	ec51 0b18 	vmov	r0, r1, d8
 8012d94:	f7ed fc40 	bl	8000618 <__aeabi_dmul>
 8012d98:	4604      	mov	r4, r0
 8012d9a:	460d      	mov	r5, r1
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	460b      	mov	r3, r1
 8012da0:	4640      	mov	r0, r8
 8012da2:	4649      	mov	r1, r9
 8012da4:	f7ed fa80 	bl	80002a8 <__aeabi_dsub>
 8012da8:	4602      	mov	r2, r0
 8012daa:	460b      	mov	r3, r1
 8012dac:	4606      	mov	r6, r0
 8012dae:	460f      	mov	r7, r1
 8012db0:	4640      	mov	r0, r8
 8012db2:	4649      	mov	r1, r9
 8012db4:	f7ed fa78 	bl	80002a8 <__aeabi_dsub>
 8012db8:	4622      	mov	r2, r4
 8012dba:	462b      	mov	r3, r5
 8012dbc:	f7ed fa74 	bl	80002a8 <__aeabi_dsub>
 8012dc0:	a31b      	add	r3, pc, #108	; (adr r3, 8012e30 <__ieee754_rem_pio2+0x330>)
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	460d      	mov	r5, r1
 8012dca:	ec51 0b18 	vmov	r0, r1, d8
 8012dce:	f7ed fc23 	bl	8000618 <__aeabi_dmul>
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	f7ed fa67 	bl	80002a8 <__aeabi_dsub>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	460d      	mov	r5, r1
 8012dde:	e75f      	b.n	8012ca0 <__ieee754_rem_pio2+0x1a0>
 8012de0:	4b1b      	ldr	r3, [pc, #108]	; (8012e50 <__ieee754_rem_pio2+0x350>)
 8012de2:	4598      	cmp	r8, r3
 8012de4:	dd36      	ble.n	8012e54 <__ieee754_rem_pio2+0x354>
 8012de6:	ee10 2a10 	vmov	r2, s0
 8012dea:	462b      	mov	r3, r5
 8012dec:	4620      	mov	r0, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fa5a 	bl	80002a8 <__aeabi_dsub>
 8012df4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012df8:	e9ca 0100 	strd	r0, r1, [sl]
 8012dfc:	e694      	b.n	8012b28 <__ieee754_rem_pio2+0x28>
 8012dfe:	bf00      	nop
 8012e00:	54400000 	.word	0x54400000
 8012e04:	3ff921fb 	.word	0x3ff921fb
 8012e08:	1a626331 	.word	0x1a626331
 8012e0c:	3dd0b461 	.word	0x3dd0b461
 8012e10:	1a600000 	.word	0x1a600000
 8012e14:	3dd0b461 	.word	0x3dd0b461
 8012e18:	2e037073 	.word	0x2e037073
 8012e1c:	3ba3198a 	.word	0x3ba3198a
 8012e20:	6dc9c883 	.word	0x6dc9c883
 8012e24:	3fe45f30 	.word	0x3fe45f30
 8012e28:	2e000000 	.word	0x2e000000
 8012e2c:	3ba3198a 	.word	0x3ba3198a
 8012e30:	252049c1 	.word	0x252049c1
 8012e34:	397b839a 	.word	0x397b839a
 8012e38:	3fe921fb 	.word	0x3fe921fb
 8012e3c:	4002d97b 	.word	0x4002d97b
 8012e40:	3ff921fb 	.word	0x3ff921fb
 8012e44:	413921fb 	.word	0x413921fb
 8012e48:	3fe00000 	.word	0x3fe00000
 8012e4c:	080144b4 	.word	0x080144b4
 8012e50:	7fefffff 	.word	0x7fefffff
 8012e54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012e58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012e5c:	ee10 0a10 	vmov	r0, s0
 8012e60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012e64:	ee10 6a10 	vmov	r6, s0
 8012e68:	460f      	mov	r7, r1
 8012e6a:	f7ed fe85 	bl	8000b78 <__aeabi_d2iz>
 8012e6e:	f7ed fb69 	bl	8000544 <__aeabi_i2d>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	4630      	mov	r0, r6
 8012e78:	4639      	mov	r1, r7
 8012e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e7e:	f7ed fa13 	bl	80002a8 <__aeabi_dsub>
 8012e82:	4b22      	ldr	r3, [pc, #136]	; (8012f0c <__ieee754_rem_pio2+0x40c>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	f7ed fbc7 	bl	8000618 <__aeabi_dmul>
 8012e8a:	460f      	mov	r7, r1
 8012e8c:	4606      	mov	r6, r0
 8012e8e:	f7ed fe73 	bl	8000b78 <__aeabi_d2iz>
 8012e92:	f7ed fb57 	bl	8000544 <__aeabi_i2d>
 8012e96:	4602      	mov	r2, r0
 8012e98:	460b      	mov	r3, r1
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	4639      	mov	r1, r7
 8012e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ea2:	f7ed fa01 	bl	80002a8 <__aeabi_dsub>
 8012ea6:	4b19      	ldr	r3, [pc, #100]	; (8012f0c <__ieee754_rem_pio2+0x40c>)
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f7ed fbb5 	bl	8000618 <__aeabi_dmul>
 8012eae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012eb2:	ad04      	add	r5, sp, #16
 8012eb4:	f04f 0803 	mov.w	r8, #3
 8012eb8:	46a9      	mov	r9, r5
 8012eba:	2600      	movs	r6, #0
 8012ebc:	2700      	movs	r7, #0
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	463b      	mov	r3, r7
 8012ec2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012ec6:	46c3      	mov	fp, r8
 8012ec8:	3d08      	subs	r5, #8
 8012eca:	f108 38ff 	add.w	r8, r8, #4294967295
 8012ece:	f7ed fe0b 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d1f3      	bne.n	8012ebe <__ieee754_rem_pio2+0x3be>
 8012ed6:	4b0e      	ldr	r3, [pc, #56]	; (8012f10 <__ieee754_rem_pio2+0x410>)
 8012ed8:	9301      	str	r3, [sp, #4]
 8012eda:	2302      	movs	r3, #2
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	4622      	mov	r2, r4
 8012ee0:	465b      	mov	r3, fp
 8012ee2:	4651      	mov	r1, sl
 8012ee4:	4648      	mov	r0, r9
 8012ee6:	f000 f8df 	bl	80130a8 <__kernel_rem_pio2>
 8012eea:	9b02      	ldr	r3, [sp, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	4683      	mov	fp, r0
 8012ef0:	f6bf ae46 	bge.w	8012b80 <__ieee754_rem_pio2+0x80>
 8012ef4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012ef8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012efc:	f8ca 3004 	str.w	r3, [sl, #4]
 8012f00:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012f04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f08:	e73a      	b.n	8012d80 <__ieee754_rem_pio2+0x280>
 8012f0a:	bf00      	nop
 8012f0c:	41700000 	.word	0x41700000
 8012f10:	08014534 	.word	0x08014534
 8012f14:	00000000 	.word	0x00000000

08012f18 <__kernel_cos>:
 8012f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	ec57 6b10 	vmov	r6, r7, d0
 8012f20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012f24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012f28:	ed8d 1b00 	vstr	d1, [sp]
 8012f2c:	da07      	bge.n	8012f3e <__kernel_cos+0x26>
 8012f2e:	ee10 0a10 	vmov	r0, s0
 8012f32:	4639      	mov	r1, r7
 8012f34:	f7ed fe20 	bl	8000b78 <__aeabi_d2iz>
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	f000 8088 	beq.w	801304e <__kernel_cos+0x136>
 8012f3e:	4632      	mov	r2, r6
 8012f40:	463b      	mov	r3, r7
 8012f42:	4630      	mov	r0, r6
 8012f44:	4639      	mov	r1, r7
 8012f46:	f7ed fb67 	bl	8000618 <__aeabi_dmul>
 8012f4a:	4b51      	ldr	r3, [pc, #324]	; (8013090 <__kernel_cos+0x178>)
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	4604      	mov	r4, r0
 8012f50:	460d      	mov	r5, r1
 8012f52:	f7ed fb61 	bl	8000618 <__aeabi_dmul>
 8012f56:	a340      	add	r3, pc, #256	; (adr r3, 8013058 <__kernel_cos+0x140>)
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	4682      	mov	sl, r0
 8012f5e:	468b      	mov	fp, r1
 8012f60:	4620      	mov	r0, r4
 8012f62:	4629      	mov	r1, r5
 8012f64:	f7ed fb58 	bl	8000618 <__aeabi_dmul>
 8012f68:	a33d      	add	r3, pc, #244	; (adr r3, 8013060 <__kernel_cos+0x148>)
 8012f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6e:	f7ed f99d 	bl	80002ac <__adddf3>
 8012f72:	4622      	mov	r2, r4
 8012f74:	462b      	mov	r3, r5
 8012f76:	f7ed fb4f 	bl	8000618 <__aeabi_dmul>
 8012f7a:	a33b      	add	r3, pc, #236	; (adr r3, 8013068 <__kernel_cos+0x150>)
 8012f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f80:	f7ed f992 	bl	80002a8 <__aeabi_dsub>
 8012f84:	4622      	mov	r2, r4
 8012f86:	462b      	mov	r3, r5
 8012f88:	f7ed fb46 	bl	8000618 <__aeabi_dmul>
 8012f8c:	a338      	add	r3, pc, #224	; (adr r3, 8013070 <__kernel_cos+0x158>)
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	f7ed f98b 	bl	80002ac <__adddf3>
 8012f96:	4622      	mov	r2, r4
 8012f98:	462b      	mov	r3, r5
 8012f9a:	f7ed fb3d 	bl	8000618 <__aeabi_dmul>
 8012f9e:	a336      	add	r3, pc, #216	; (adr r3, 8013078 <__kernel_cos+0x160>)
 8012fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa4:	f7ed f980 	bl	80002a8 <__aeabi_dsub>
 8012fa8:	4622      	mov	r2, r4
 8012faa:	462b      	mov	r3, r5
 8012fac:	f7ed fb34 	bl	8000618 <__aeabi_dmul>
 8012fb0:	a333      	add	r3, pc, #204	; (adr r3, 8013080 <__kernel_cos+0x168>)
 8012fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb6:	f7ed f979 	bl	80002ac <__adddf3>
 8012fba:	4622      	mov	r2, r4
 8012fbc:	462b      	mov	r3, r5
 8012fbe:	f7ed fb2b 	bl	8000618 <__aeabi_dmul>
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	462b      	mov	r3, r5
 8012fc6:	f7ed fb27 	bl	8000618 <__aeabi_dmul>
 8012fca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fce:	4604      	mov	r4, r0
 8012fd0:	460d      	mov	r5, r1
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	4639      	mov	r1, r7
 8012fd6:	f7ed fb1f 	bl	8000618 <__aeabi_dmul>
 8012fda:	460b      	mov	r3, r1
 8012fdc:	4602      	mov	r2, r0
 8012fde:	4629      	mov	r1, r5
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ed f961 	bl	80002a8 <__aeabi_dsub>
 8012fe6:	4b2b      	ldr	r3, [pc, #172]	; (8013094 <__kernel_cos+0x17c>)
 8012fe8:	4598      	cmp	r8, r3
 8012fea:	4606      	mov	r6, r0
 8012fec:	460f      	mov	r7, r1
 8012fee:	dc10      	bgt.n	8013012 <__kernel_cos+0xfa>
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	4650      	mov	r0, sl
 8012ff6:	4659      	mov	r1, fp
 8012ff8:	f7ed f956 	bl	80002a8 <__aeabi_dsub>
 8012ffc:	460b      	mov	r3, r1
 8012ffe:	4926      	ldr	r1, [pc, #152]	; (8013098 <__kernel_cos+0x180>)
 8013000:	4602      	mov	r2, r0
 8013002:	2000      	movs	r0, #0
 8013004:	f7ed f950 	bl	80002a8 <__aeabi_dsub>
 8013008:	ec41 0b10 	vmov	d0, r0, r1
 801300c:	b003      	add	sp, #12
 801300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013012:	4b22      	ldr	r3, [pc, #136]	; (801309c <__kernel_cos+0x184>)
 8013014:	4920      	ldr	r1, [pc, #128]	; (8013098 <__kernel_cos+0x180>)
 8013016:	4598      	cmp	r8, r3
 8013018:	bfcc      	ite	gt
 801301a:	4d21      	ldrgt	r5, [pc, #132]	; (80130a0 <__kernel_cos+0x188>)
 801301c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013020:	2400      	movs	r4, #0
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	2000      	movs	r0, #0
 8013028:	f7ed f93e 	bl	80002a8 <__aeabi_dsub>
 801302c:	4622      	mov	r2, r4
 801302e:	4680      	mov	r8, r0
 8013030:	4689      	mov	r9, r1
 8013032:	462b      	mov	r3, r5
 8013034:	4650      	mov	r0, sl
 8013036:	4659      	mov	r1, fp
 8013038:	f7ed f936 	bl	80002a8 <__aeabi_dsub>
 801303c:	4632      	mov	r2, r6
 801303e:	463b      	mov	r3, r7
 8013040:	f7ed f932 	bl	80002a8 <__aeabi_dsub>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4640      	mov	r0, r8
 801304a:	4649      	mov	r1, r9
 801304c:	e7da      	b.n	8013004 <__kernel_cos+0xec>
 801304e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013088 <__kernel_cos+0x170>
 8013052:	e7db      	b.n	801300c <__kernel_cos+0xf4>
 8013054:	f3af 8000 	nop.w
 8013058:	be8838d4 	.word	0xbe8838d4
 801305c:	bda8fae9 	.word	0xbda8fae9
 8013060:	bdb4b1c4 	.word	0xbdb4b1c4
 8013064:	3e21ee9e 	.word	0x3e21ee9e
 8013068:	809c52ad 	.word	0x809c52ad
 801306c:	3e927e4f 	.word	0x3e927e4f
 8013070:	19cb1590 	.word	0x19cb1590
 8013074:	3efa01a0 	.word	0x3efa01a0
 8013078:	16c15177 	.word	0x16c15177
 801307c:	3f56c16c 	.word	0x3f56c16c
 8013080:	5555554c 	.word	0x5555554c
 8013084:	3fa55555 	.word	0x3fa55555
 8013088:	00000000 	.word	0x00000000
 801308c:	3ff00000 	.word	0x3ff00000
 8013090:	3fe00000 	.word	0x3fe00000
 8013094:	3fd33332 	.word	0x3fd33332
 8013098:	3ff00000 	.word	0x3ff00000
 801309c:	3fe90000 	.word	0x3fe90000
 80130a0:	3fd20000 	.word	0x3fd20000
 80130a4:	00000000 	.word	0x00000000

080130a8 <__kernel_rem_pio2>:
 80130a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	ed2d 8b02 	vpush	{d8}
 80130b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80130b4:	f112 0f14 	cmn.w	r2, #20
 80130b8:	9308      	str	r3, [sp, #32]
 80130ba:	9101      	str	r1, [sp, #4]
 80130bc:	4bc6      	ldr	r3, [pc, #792]	; (80133d8 <__kernel_rem_pio2+0x330>)
 80130be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80130c0:	9009      	str	r0, [sp, #36]	; 0x24
 80130c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130c6:	9304      	str	r3, [sp, #16]
 80130c8:	9b08      	ldr	r3, [sp, #32]
 80130ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80130ce:	bfa8      	it	ge
 80130d0:	1ed4      	subge	r4, r2, #3
 80130d2:	9306      	str	r3, [sp, #24]
 80130d4:	bfb2      	itee	lt
 80130d6:	2400      	movlt	r4, #0
 80130d8:	2318      	movge	r3, #24
 80130da:	fb94 f4f3 	sdivge	r4, r4, r3
 80130de:	f06f 0317 	mvn.w	r3, #23
 80130e2:	fb04 3303 	mla	r3, r4, r3, r3
 80130e6:	eb03 0a02 	add.w	sl, r3, r2
 80130ea:	9b04      	ldr	r3, [sp, #16]
 80130ec:	9a06      	ldr	r2, [sp, #24]
 80130ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80133c8 <__kernel_rem_pio2+0x320>
 80130f2:	eb03 0802 	add.w	r8, r3, r2
 80130f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80130f8:	1aa7      	subs	r7, r4, r2
 80130fa:	ae20      	add	r6, sp, #128	; 0x80
 80130fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013100:	2500      	movs	r5, #0
 8013102:	4545      	cmp	r5, r8
 8013104:	dd18      	ble.n	8013138 <__kernel_rem_pio2+0x90>
 8013106:	9b08      	ldr	r3, [sp, #32]
 8013108:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801310c:	aa20      	add	r2, sp, #128	; 0x80
 801310e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80133c8 <__kernel_rem_pio2+0x320>
 8013112:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013116:	f1c3 0301 	rsb	r3, r3, #1
 801311a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801311e:	9307      	str	r3, [sp, #28]
 8013120:	9b07      	ldr	r3, [sp, #28]
 8013122:	9a04      	ldr	r2, [sp, #16]
 8013124:	4443      	add	r3, r8
 8013126:	429a      	cmp	r2, r3
 8013128:	db2f      	blt.n	801318a <__kernel_rem_pio2+0xe2>
 801312a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801312e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013132:	462f      	mov	r7, r5
 8013134:	2600      	movs	r6, #0
 8013136:	e01b      	b.n	8013170 <__kernel_rem_pio2+0xc8>
 8013138:	42ef      	cmn	r7, r5
 801313a:	d407      	bmi.n	801314c <__kernel_rem_pio2+0xa4>
 801313c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013140:	f7ed fa00 	bl	8000544 <__aeabi_i2d>
 8013144:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013148:	3501      	adds	r5, #1
 801314a:	e7da      	b.n	8013102 <__kernel_rem_pio2+0x5a>
 801314c:	ec51 0b18 	vmov	r0, r1, d8
 8013150:	e7f8      	b.n	8013144 <__kernel_rem_pio2+0x9c>
 8013152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013156:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801315a:	f7ed fa5d 	bl	8000618 <__aeabi_dmul>
 801315e:	4602      	mov	r2, r0
 8013160:	460b      	mov	r3, r1
 8013162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013166:	f7ed f8a1 	bl	80002ac <__adddf3>
 801316a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801316e:	3601      	adds	r6, #1
 8013170:	9b06      	ldr	r3, [sp, #24]
 8013172:	429e      	cmp	r6, r3
 8013174:	f1a7 0708 	sub.w	r7, r7, #8
 8013178:	ddeb      	ble.n	8013152 <__kernel_rem_pio2+0xaa>
 801317a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801317e:	3508      	adds	r5, #8
 8013180:	ecab 7b02 	vstmia	fp!, {d7}
 8013184:	f108 0801 	add.w	r8, r8, #1
 8013188:	e7ca      	b.n	8013120 <__kernel_rem_pio2+0x78>
 801318a:	9b04      	ldr	r3, [sp, #16]
 801318c:	aa0c      	add	r2, sp, #48	; 0x30
 801318e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013192:	930b      	str	r3, [sp, #44]	; 0x2c
 8013194:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013196:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801319a:	9c04      	ldr	r4, [sp, #16]
 801319c:	930a      	str	r3, [sp, #40]	; 0x28
 801319e:	ab98      	add	r3, sp, #608	; 0x260
 80131a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80131a4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80131a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80131ac:	f8cd b008 	str.w	fp, [sp, #8]
 80131b0:	4625      	mov	r5, r4
 80131b2:	2d00      	cmp	r5, #0
 80131b4:	dc78      	bgt.n	80132a8 <__kernel_rem_pio2+0x200>
 80131b6:	ec47 6b10 	vmov	d0, r6, r7
 80131ba:	4650      	mov	r0, sl
 80131bc:	f000 fbfc 	bl	80139b8 <scalbn>
 80131c0:	ec57 6b10 	vmov	r6, r7, d0
 80131c4:	2200      	movs	r2, #0
 80131c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80131ca:	ee10 0a10 	vmov	r0, s0
 80131ce:	4639      	mov	r1, r7
 80131d0:	f7ed fa22 	bl	8000618 <__aeabi_dmul>
 80131d4:	ec41 0b10 	vmov	d0, r0, r1
 80131d8:	f000 fb6e 	bl	80138b8 <floor>
 80131dc:	4b7f      	ldr	r3, [pc, #508]	; (80133dc <__kernel_rem_pio2+0x334>)
 80131de:	ec51 0b10 	vmov	r0, r1, d0
 80131e2:	2200      	movs	r2, #0
 80131e4:	f7ed fa18 	bl	8000618 <__aeabi_dmul>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f7ed f85a 	bl	80002a8 <__aeabi_dsub>
 80131f4:	460f      	mov	r7, r1
 80131f6:	4606      	mov	r6, r0
 80131f8:	f7ed fcbe 	bl	8000b78 <__aeabi_d2iz>
 80131fc:	9007      	str	r0, [sp, #28]
 80131fe:	f7ed f9a1 	bl	8000544 <__aeabi_i2d>
 8013202:	4602      	mov	r2, r0
 8013204:	460b      	mov	r3, r1
 8013206:	4630      	mov	r0, r6
 8013208:	4639      	mov	r1, r7
 801320a:	f7ed f84d 	bl	80002a8 <__aeabi_dsub>
 801320e:	f1ba 0f00 	cmp.w	sl, #0
 8013212:	4606      	mov	r6, r0
 8013214:	460f      	mov	r7, r1
 8013216:	dd70      	ble.n	80132fa <__kernel_rem_pio2+0x252>
 8013218:	1e62      	subs	r2, r4, #1
 801321a:	ab0c      	add	r3, sp, #48	; 0x30
 801321c:	9d07      	ldr	r5, [sp, #28]
 801321e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013222:	f1ca 0118 	rsb	r1, sl, #24
 8013226:	fa40 f301 	asr.w	r3, r0, r1
 801322a:	441d      	add	r5, r3
 801322c:	408b      	lsls	r3, r1
 801322e:	1ac0      	subs	r0, r0, r3
 8013230:	ab0c      	add	r3, sp, #48	; 0x30
 8013232:	9507      	str	r5, [sp, #28]
 8013234:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013238:	f1ca 0317 	rsb	r3, sl, #23
 801323c:	fa40 f303 	asr.w	r3, r0, r3
 8013240:	9302      	str	r3, [sp, #8]
 8013242:	9b02      	ldr	r3, [sp, #8]
 8013244:	2b00      	cmp	r3, #0
 8013246:	dd66      	ble.n	8013316 <__kernel_rem_pio2+0x26e>
 8013248:	9b07      	ldr	r3, [sp, #28]
 801324a:	2200      	movs	r2, #0
 801324c:	3301      	adds	r3, #1
 801324e:	9307      	str	r3, [sp, #28]
 8013250:	4615      	mov	r5, r2
 8013252:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013256:	4294      	cmp	r4, r2
 8013258:	f300 8099 	bgt.w	801338e <__kernel_rem_pio2+0x2e6>
 801325c:	f1ba 0f00 	cmp.w	sl, #0
 8013260:	dd07      	ble.n	8013272 <__kernel_rem_pio2+0x1ca>
 8013262:	f1ba 0f01 	cmp.w	sl, #1
 8013266:	f000 80a5 	beq.w	80133b4 <__kernel_rem_pio2+0x30c>
 801326a:	f1ba 0f02 	cmp.w	sl, #2
 801326e:	f000 80c1 	beq.w	80133f4 <__kernel_rem_pio2+0x34c>
 8013272:	9b02      	ldr	r3, [sp, #8]
 8013274:	2b02      	cmp	r3, #2
 8013276:	d14e      	bne.n	8013316 <__kernel_rem_pio2+0x26e>
 8013278:	4632      	mov	r2, r6
 801327a:	463b      	mov	r3, r7
 801327c:	4958      	ldr	r1, [pc, #352]	; (80133e0 <__kernel_rem_pio2+0x338>)
 801327e:	2000      	movs	r0, #0
 8013280:	f7ed f812 	bl	80002a8 <__aeabi_dsub>
 8013284:	4606      	mov	r6, r0
 8013286:	460f      	mov	r7, r1
 8013288:	2d00      	cmp	r5, #0
 801328a:	d044      	beq.n	8013316 <__kernel_rem_pio2+0x26e>
 801328c:	4650      	mov	r0, sl
 801328e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80133d0 <__kernel_rem_pio2+0x328>
 8013292:	f000 fb91 	bl	80139b8 <scalbn>
 8013296:	4630      	mov	r0, r6
 8013298:	4639      	mov	r1, r7
 801329a:	ec53 2b10 	vmov	r2, r3, d0
 801329e:	f7ed f803 	bl	80002a8 <__aeabi_dsub>
 80132a2:	4606      	mov	r6, r0
 80132a4:	460f      	mov	r7, r1
 80132a6:	e036      	b.n	8013316 <__kernel_rem_pio2+0x26e>
 80132a8:	4b4e      	ldr	r3, [pc, #312]	; (80133e4 <__kernel_rem_pio2+0x33c>)
 80132aa:	2200      	movs	r2, #0
 80132ac:	4630      	mov	r0, r6
 80132ae:	4639      	mov	r1, r7
 80132b0:	f7ed f9b2 	bl	8000618 <__aeabi_dmul>
 80132b4:	f7ed fc60 	bl	8000b78 <__aeabi_d2iz>
 80132b8:	f7ed f944 	bl	8000544 <__aeabi_i2d>
 80132bc:	4b4a      	ldr	r3, [pc, #296]	; (80133e8 <__kernel_rem_pio2+0x340>)
 80132be:	2200      	movs	r2, #0
 80132c0:	4680      	mov	r8, r0
 80132c2:	4689      	mov	r9, r1
 80132c4:	f7ed f9a8 	bl	8000618 <__aeabi_dmul>
 80132c8:	4602      	mov	r2, r0
 80132ca:	460b      	mov	r3, r1
 80132cc:	4630      	mov	r0, r6
 80132ce:	4639      	mov	r1, r7
 80132d0:	f7ec ffea 	bl	80002a8 <__aeabi_dsub>
 80132d4:	f7ed fc50 	bl	8000b78 <__aeabi_d2iz>
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	f843 0b04 	str.w	r0, [r3], #4
 80132de:	3d01      	subs	r5, #1
 80132e0:	9302      	str	r3, [sp, #8]
 80132e2:	ab70      	add	r3, sp, #448	; 0x1c0
 80132e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80132e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ec:	4640      	mov	r0, r8
 80132ee:	4649      	mov	r1, r9
 80132f0:	f7ec ffdc 	bl	80002ac <__adddf3>
 80132f4:	4606      	mov	r6, r0
 80132f6:	460f      	mov	r7, r1
 80132f8:	e75b      	b.n	80131b2 <__kernel_rem_pio2+0x10a>
 80132fa:	d105      	bne.n	8013308 <__kernel_rem_pio2+0x260>
 80132fc:	1e63      	subs	r3, r4, #1
 80132fe:	aa0c      	add	r2, sp, #48	; 0x30
 8013300:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013304:	15c3      	asrs	r3, r0, #23
 8013306:	e79b      	b.n	8013240 <__kernel_rem_pio2+0x198>
 8013308:	4b38      	ldr	r3, [pc, #224]	; (80133ec <__kernel_rem_pio2+0x344>)
 801330a:	2200      	movs	r2, #0
 801330c:	f7ed fc0a 	bl	8000b24 <__aeabi_dcmpge>
 8013310:	2800      	cmp	r0, #0
 8013312:	d139      	bne.n	8013388 <__kernel_rem_pio2+0x2e0>
 8013314:	9002      	str	r0, [sp, #8]
 8013316:	2200      	movs	r2, #0
 8013318:	2300      	movs	r3, #0
 801331a:	4630      	mov	r0, r6
 801331c:	4639      	mov	r1, r7
 801331e:	f7ed fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013322:	2800      	cmp	r0, #0
 8013324:	f000 80b4 	beq.w	8013490 <__kernel_rem_pio2+0x3e8>
 8013328:	f104 3bff 	add.w	fp, r4, #4294967295
 801332c:	465b      	mov	r3, fp
 801332e:	2200      	movs	r2, #0
 8013330:	9904      	ldr	r1, [sp, #16]
 8013332:	428b      	cmp	r3, r1
 8013334:	da65      	bge.n	8013402 <__kernel_rem_pio2+0x35a>
 8013336:	2a00      	cmp	r2, #0
 8013338:	d07b      	beq.n	8013432 <__kernel_rem_pio2+0x38a>
 801333a:	ab0c      	add	r3, sp, #48	; 0x30
 801333c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013340:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8013344:	2b00      	cmp	r3, #0
 8013346:	f000 80a0 	beq.w	801348a <__kernel_rem_pio2+0x3e2>
 801334a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80133d0 <__kernel_rem_pio2+0x328>
 801334e:	4650      	mov	r0, sl
 8013350:	f000 fb32 	bl	80139b8 <scalbn>
 8013354:	4f23      	ldr	r7, [pc, #140]	; (80133e4 <__kernel_rem_pio2+0x33c>)
 8013356:	ec55 4b10 	vmov	r4, r5, d0
 801335a:	46d8      	mov	r8, fp
 801335c:	2600      	movs	r6, #0
 801335e:	f1b8 0f00 	cmp.w	r8, #0
 8013362:	f280 80cf 	bge.w	8013504 <__kernel_rem_pio2+0x45c>
 8013366:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80133c8 <__kernel_rem_pio2+0x320>
 801336a:	465f      	mov	r7, fp
 801336c:	f04f 0800 	mov.w	r8, #0
 8013370:	2f00      	cmp	r7, #0
 8013372:	f2c0 80fd 	blt.w	8013570 <__kernel_rem_pio2+0x4c8>
 8013376:	ab70      	add	r3, sp, #448	; 0x1c0
 8013378:	f8df a074 	ldr.w	sl, [pc, #116]	; 80133f0 <__kernel_rem_pio2+0x348>
 801337c:	ec55 4b18 	vmov	r4, r5, d8
 8013380:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8013384:	2600      	movs	r6, #0
 8013386:	e0e5      	b.n	8013554 <__kernel_rem_pio2+0x4ac>
 8013388:	2302      	movs	r3, #2
 801338a:	9302      	str	r3, [sp, #8]
 801338c:	e75c      	b.n	8013248 <__kernel_rem_pio2+0x1a0>
 801338e:	f8db 3000 	ldr.w	r3, [fp]
 8013392:	b955      	cbnz	r5, 80133aa <__kernel_rem_pio2+0x302>
 8013394:	b123      	cbz	r3, 80133a0 <__kernel_rem_pio2+0x2f8>
 8013396:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801339a:	f8cb 3000 	str.w	r3, [fp]
 801339e:	2301      	movs	r3, #1
 80133a0:	3201      	adds	r2, #1
 80133a2:	f10b 0b04 	add.w	fp, fp, #4
 80133a6:	461d      	mov	r5, r3
 80133a8:	e755      	b.n	8013256 <__kernel_rem_pio2+0x1ae>
 80133aa:	1acb      	subs	r3, r1, r3
 80133ac:	f8cb 3000 	str.w	r3, [fp]
 80133b0:	462b      	mov	r3, r5
 80133b2:	e7f5      	b.n	80133a0 <__kernel_rem_pio2+0x2f8>
 80133b4:	1e62      	subs	r2, r4, #1
 80133b6:	ab0c      	add	r3, sp, #48	; 0x30
 80133b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80133c0:	a90c      	add	r1, sp, #48	; 0x30
 80133c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80133c6:	e754      	b.n	8013272 <__kernel_rem_pio2+0x1ca>
	...
 80133d4:	3ff00000 	.word	0x3ff00000
 80133d8:	08014680 	.word	0x08014680
 80133dc:	40200000 	.word	0x40200000
 80133e0:	3ff00000 	.word	0x3ff00000
 80133e4:	3e700000 	.word	0x3e700000
 80133e8:	41700000 	.word	0x41700000
 80133ec:	3fe00000 	.word	0x3fe00000
 80133f0:	08014640 	.word	0x08014640
 80133f4:	1e62      	subs	r2, r4, #1
 80133f6:	ab0c      	add	r3, sp, #48	; 0x30
 80133f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013400:	e7de      	b.n	80133c0 <__kernel_rem_pio2+0x318>
 8013402:	a90c      	add	r1, sp, #48	; 0x30
 8013404:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013408:	3b01      	subs	r3, #1
 801340a:	430a      	orrs	r2, r1
 801340c:	e790      	b.n	8013330 <__kernel_rem_pio2+0x288>
 801340e:	3301      	adds	r3, #1
 8013410:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013414:	2900      	cmp	r1, #0
 8013416:	d0fa      	beq.n	801340e <__kernel_rem_pio2+0x366>
 8013418:	9a08      	ldr	r2, [sp, #32]
 801341a:	18e3      	adds	r3, r4, r3
 801341c:	18a6      	adds	r6, r4, r2
 801341e:	aa20      	add	r2, sp, #128	; 0x80
 8013420:	1c65      	adds	r5, r4, #1
 8013422:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013426:	9302      	str	r3, [sp, #8]
 8013428:	9b02      	ldr	r3, [sp, #8]
 801342a:	42ab      	cmp	r3, r5
 801342c:	da04      	bge.n	8013438 <__kernel_rem_pio2+0x390>
 801342e:	461c      	mov	r4, r3
 8013430:	e6b5      	b.n	801319e <__kernel_rem_pio2+0xf6>
 8013432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013434:	2301      	movs	r3, #1
 8013436:	e7eb      	b.n	8013410 <__kernel_rem_pio2+0x368>
 8013438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801343a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801343e:	f7ed f881 	bl	8000544 <__aeabi_i2d>
 8013442:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013448:	46b3      	mov	fp, r6
 801344a:	461c      	mov	r4, r3
 801344c:	2700      	movs	r7, #0
 801344e:	f04f 0800 	mov.w	r8, #0
 8013452:	f04f 0900 	mov.w	r9, #0
 8013456:	9b06      	ldr	r3, [sp, #24]
 8013458:	429f      	cmp	r7, r3
 801345a:	dd06      	ble.n	801346a <__kernel_rem_pio2+0x3c2>
 801345c:	ab70      	add	r3, sp, #448	; 0x1c0
 801345e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013462:	e9c3 8900 	strd	r8, r9, [r3]
 8013466:	3501      	adds	r5, #1
 8013468:	e7de      	b.n	8013428 <__kernel_rem_pio2+0x380>
 801346a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801346e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013472:	f7ed f8d1 	bl	8000618 <__aeabi_dmul>
 8013476:	4602      	mov	r2, r0
 8013478:	460b      	mov	r3, r1
 801347a:	4640      	mov	r0, r8
 801347c:	4649      	mov	r1, r9
 801347e:	f7ec ff15 	bl	80002ac <__adddf3>
 8013482:	3701      	adds	r7, #1
 8013484:	4680      	mov	r8, r0
 8013486:	4689      	mov	r9, r1
 8013488:	e7e5      	b.n	8013456 <__kernel_rem_pio2+0x3ae>
 801348a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801348e:	e754      	b.n	801333a <__kernel_rem_pio2+0x292>
 8013490:	ec47 6b10 	vmov	d0, r6, r7
 8013494:	f1ca 0000 	rsb	r0, sl, #0
 8013498:	f000 fa8e 	bl	80139b8 <scalbn>
 801349c:	ec57 6b10 	vmov	r6, r7, d0
 80134a0:	4b9f      	ldr	r3, [pc, #636]	; (8013720 <__kernel_rem_pio2+0x678>)
 80134a2:	ee10 0a10 	vmov	r0, s0
 80134a6:	2200      	movs	r2, #0
 80134a8:	4639      	mov	r1, r7
 80134aa:	f7ed fb3b 	bl	8000b24 <__aeabi_dcmpge>
 80134ae:	b300      	cbz	r0, 80134f2 <__kernel_rem_pio2+0x44a>
 80134b0:	4b9c      	ldr	r3, [pc, #624]	; (8013724 <__kernel_rem_pio2+0x67c>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	4630      	mov	r0, r6
 80134b6:	4639      	mov	r1, r7
 80134b8:	f7ed f8ae 	bl	8000618 <__aeabi_dmul>
 80134bc:	f7ed fb5c 	bl	8000b78 <__aeabi_d2iz>
 80134c0:	4605      	mov	r5, r0
 80134c2:	f7ed f83f 	bl	8000544 <__aeabi_i2d>
 80134c6:	4b96      	ldr	r3, [pc, #600]	; (8013720 <__kernel_rem_pio2+0x678>)
 80134c8:	2200      	movs	r2, #0
 80134ca:	f7ed f8a5 	bl	8000618 <__aeabi_dmul>
 80134ce:	460b      	mov	r3, r1
 80134d0:	4602      	mov	r2, r0
 80134d2:	4639      	mov	r1, r7
 80134d4:	4630      	mov	r0, r6
 80134d6:	f7ec fee7 	bl	80002a8 <__aeabi_dsub>
 80134da:	f7ed fb4d 	bl	8000b78 <__aeabi_d2iz>
 80134de:	f104 0b01 	add.w	fp, r4, #1
 80134e2:	ab0c      	add	r3, sp, #48	; 0x30
 80134e4:	f10a 0a18 	add.w	sl, sl, #24
 80134e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80134ec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80134f0:	e72b      	b.n	801334a <__kernel_rem_pio2+0x2a2>
 80134f2:	4630      	mov	r0, r6
 80134f4:	4639      	mov	r1, r7
 80134f6:	f7ed fb3f 	bl	8000b78 <__aeabi_d2iz>
 80134fa:	ab0c      	add	r3, sp, #48	; 0x30
 80134fc:	46a3      	mov	fp, r4
 80134fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013502:	e722      	b.n	801334a <__kernel_rem_pio2+0x2a2>
 8013504:	ab70      	add	r3, sp, #448	; 0x1c0
 8013506:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801350a:	ab0c      	add	r3, sp, #48	; 0x30
 801350c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013510:	f7ed f818 	bl	8000544 <__aeabi_i2d>
 8013514:	4622      	mov	r2, r4
 8013516:	462b      	mov	r3, r5
 8013518:	f7ed f87e 	bl	8000618 <__aeabi_dmul>
 801351c:	4632      	mov	r2, r6
 801351e:	e9c9 0100 	strd	r0, r1, [r9]
 8013522:	463b      	mov	r3, r7
 8013524:	4620      	mov	r0, r4
 8013526:	4629      	mov	r1, r5
 8013528:	f7ed f876 	bl	8000618 <__aeabi_dmul>
 801352c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013530:	4604      	mov	r4, r0
 8013532:	460d      	mov	r5, r1
 8013534:	e713      	b.n	801335e <__kernel_rem_pio2+0x2b6>
 8013536:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801353a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801353e:	f7ed f86b 	bl	8000618 <__aeabi_dmul>
 8013542:	4602      	mov	r2, r0
 8013544:	460b      	mov	r3, r1
 8013546:	4620      	mov	r0, r4
 8013548:	4629      	mov	r1, r5
 801354a:	f7ec feaf 	bl	80002ac <__adddf3>
 801354e:	3601      	adds	r6, #1
 8013550:	4604      	mov	r4, r0
 8013552:	460d      	mov	r5, r1
 8013554:	9b04      	ldr	r3, [sp, #16]
 8013556:	429e      	cmp	r6, r3
 8013558:	dc01      	bgt.n	801355e <__kernel_rem_pio2+0x4b6>
 801355a:	45b0      	cmp	r8, r6
 801355c:	daeb      	bge.n	8013536 <__kernel_rem_pio2+0x48e>
 801355e:	ab48      	add	r3, sp, #288	; 0x120
 8013560:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013564:	e9c3 4500 	strd	r4, r5, [r3]
 8013568:	3f01      	subs	r7, #1
 801356a:	f108 0801 	add.w	r8, r8, #1
 801356e:	e6ff      	b.n	8013370 <__kernel_rem_pio2+0x2c8>
 8013570:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013572:	2b02      	cmp	r3, #2
 8013574:	dc0b      	bgt.n	801358e <__kernel_rem_pio2+0x4e6>
 8013576:	2b00      	cmp	r3, #0
 8013578:	dc6e      	bgt.n	8013658 <__kernel_rem_pio2+0x5b0>
 801357a:	d045      	beq.n	8013608 <__kernel_rem_pio2+0x560>
 801357c:	9b07      	ldr	r3, [sp, #28]
 801357e:	f003 0007 	and.w	r0, r3, #7
 8013582:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013586:	ecbd 8b02 	vpop	{d8}
 801358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801358e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013590:	2b03      	cmp	r3, #3
 8013592:	d1f3      	bne.n	801357c <__kernel_rem_pio2+0x4d4>
 8013594:	ab48      	add	r3, sp, #288	; 0x120
 8013596:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801359a:	46d0      	mov	r8, sl
 801359c:	46d9      	mov	r9, fp
 801359e:	f1b9 0f00 	cmp.w	r9, #0
 80135a2:	f1a8 0808 	sub.w	r8, r8, #8
 80135a6:	dc64      	bgt.n	8013672 <__kernel_rem_pio2+0x5ca>
 80135a8:	465c      	mov	r4, fp
 80135aa:	2c01      	cmp	r4, #1
 80135ac:	f1aa 0a08 	sub.w	sl, sl, #8
 80135b0:	dc7e      	bgt.n	80136b0 <__kernel_rem_pio2+0x608>
 80135b2:	2000      	movs	r0, #0
 80135b4:	2100      	movs	r1, #0
 80135b6:	f1bb 0f01 	cmp.w	fp, #1
 80135ba:	f300 8097 	bgt.w	80136ec <__kernel_rem_pio2+0x644>
 80135be:	9b02      	ldr	r3, [sp, #8]
 80135c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80135c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f040 8099 	bne.w	8013700 <__kernel_rem_pio2+0x658>
 80135ce:	9b01      	ldr	r3, [sp, #4]
 80135d0:	e9c3 5600 	strd	r5, r6, [r3]
 80135d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80135d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80135dc:	e7ce      	b.n	801357c <__kernel_rem_pio2+0x4d4>
 80135de:	ab48      	add	r3, sp, #288	; 0x120
 80135e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80135e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e8:	f7ec fe60 	bl	80002ac <__adddf3>
 80135ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80135f0:	f1bb 0f00 	cmp.w	fp, #0
 80135f4:	daf3      	bge.n	80135de <__kernel_rem_pio2+0x536>
 80135f6:	9b02      	ldr	r3, [sp, #8]
 80135f8:	b113      	cbz	r3, 8013600 <__kernel_rem_pio2+0x558>
 80135fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135fe:	4619      	mov	r1, r3
 8013600:	9b01      	ldr	r3, [sp, #4]
 8013602:	e9c3 0100 	strd	r0, r1, [r3]
 8013606:	e7b9      	b.n	801357c <__kernel_rem_pio2+0x4d4>
 8013608:	2000      	movs	r0, #0
 801360a:	2100      	movs	r1, #0
 801360c:	e7f0      	b.n	80135f0 <__kernel_rem_pio2+0x548>
 801360e:	ab48      	add	r3, sp, #288	; 0x120
 8013610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013618:	f7ec fe48 	bl	80002ac <__adddf3>
 801361c:	3c01      	subs	r4, #1
 801361e:	2c00      	cmp	r4, #0
 8013620:	daf5      	bge.n	801360e <__kernel_rem_pio2+0x566>
 8013622:	9b02      	ldr	r3, [sp, #8]
 8013624:	b1e3      	cbz	r3, 8013660 <__kernel_rem_pio2+0x5b8>
 8013626:	4602      	mov	r2, r0
 8013628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801362c:	9c01      	ldr	r4, [sp, #4]
 801362e:	e9c4 2300 	strd	r2, r3, [r4]
 8013632:	4602      	mov	r2, r0
 8013634:	460b      	mov	r3, r1
 8013636:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801363a:	f7ec fe35 	bl	80002a8 <__aeabi_dsub>
 801363e:	ad4a      	add	r5, sp, #296	; 0x128
 8013640:	2401      	movs	r4, #1
 8013642:	45a3      	cmp	fp, r4
 8013644:	da0f      	bge.n	8013666 <__kernel_rem_pio2+0x5be>
 8013646:	9b02      	ldr	r3, [sp, #8]
 8013648:	b113      	cbz	r3, 8013650 <__kernel_rem_pio2+0x5a8>
 801364a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801364e:	4619      	mov	r1, r3
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013656:	e791      	b.n	801357c <__kernel_rem_pio2+0x4d4>
 8013658:	465c      	mov	r4, fp
 801365a:	2000      	movs	r0, #0
 801365c:	2100      	movs	r1, #0
 801365e:	e7de      	b.n	801361e <__kernel_rem_pio2+0x576>
 8013660:	4602      	mov	r2, r0
 8013662:	460b      	mov	r3, r1
 8013664:	e7e2      	b.n	801362c <__kernel_rem_pio2+0x584>
 8013666:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801366a:	f7ec fe1f 	bl	80002ac <__adddf3>
 801366e:	3401      	adds	r4, #1
 8013670:	e7e7      	b.n	8013642 <__kernel_rem_pio2+0x59a>
 8013672:	e9d8 4500 	ldrd	r4, r5, [r8]
 8013676:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801367a:	4620      	mov	r0, r4
 801367c:	4632      	mov	r2, r6
 801367e:	463b      	mov	r3, r7
 8013680:	4629      	mov	r1, r5
 8013682:	f7ec fe13 	bl	80002ac <__adddf3>
 8013686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801368a:	4602      	mov	r2, r0
 801368c:	460b      	mov	r3, r1
 801368e:	4620      	mov	r0, r4
 8013690:	4629      	mov	r1, r5
 8013692:	f7ec fe09 	bl	80002a8 <__aeabi_dsub>
 8013696:	4632      	mov	r2, r6
 8013698:	463b      	mov	r3, r7
 801369a:	f7ec fe07 	bl	80002ac <__adddf3>
 801369e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80136a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80136a6:	ed88 7b00 	vstr	d7, [r8]
 80136aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80136ae:	e776      	b.n	801359e <__kernel_rem_pio2+0x4f6>
 80136b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80136b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80136b8:	4640      	mov	r0, r8
 80136ba:	4632      	mov	r2, r6
 80136bc:	463b      	mov	r3, r7
 80136be:	4649      	mov	r1, r9
 80136c0:	f7ec fdf4 	bl	80002ac <__adddf3>
 80136c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136c8:	4602      	mov	r2, r0
 80136ca:	460b      	mov	r3, r1
 80136cc:	4640      	mov	r0, r8
 80136ce:	4649      	mov	r1, r9
 80136d0:	f7ec fdea 	bl	80002a8 <__aeabi_dsub>
 80136d4:	4632      	mov	r2, r6
 80136d6:	463b      	mov	r3, r7
 80136d8:	f7ec fde8 	bl	80002ac <__adddf3>
 80136dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80136e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80136e4:	ed8a 7b00 	vstr	d7, [sl]
 80136e8:	3c01      	subs	r4, #1
 80136ea:	e75e      	b.n	80135aa <__kernel_rem_pio2+0x502>
 80136ec:	ab48      	add	r3, sp, #288	; 0x120
 80136ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f6:	f7ec fdd9 	bl	80002ac <__adddf3>
 80136fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80136fe:	e75a      	b.n	80135b6 <__kernel_rem_pio2+0x50e>
 8013700:	9b01      	ldr	r3, [sp, #4]
 8013702:	9a01      	ldr	r2, [sp, #4]
 8013704:	601d      	str	r5, [r3, #0]
 8013706:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801370a:	605c      	str	r4, [r3, #4]
 801370c:	609f      	str	r7, [r3, #8]
 801370e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013712:	60d3      	str	r3, [r2, #12]
 8013714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013718:	6110      	str	r0, [r2, #16]
 801371a:	6153      	str	r3, [r2, #20]
 801371c:	e72e      	b.n	801357c <__kernel_rem_pio2+0x4d4>
 801371e:	bf00      	nop
 8013720:	41700000 	.word	0x41700000
 8013724:	3e700000 	.word	0x3e700000

08013728 <__kernel_sin>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	ed2d 8b04 	vpush	{d8-d9}
 8013730:	eeb0 8a41 	vmov.f32	s16, s2
 8013734:	eef0 8a61 	vmov.f32	s17, s3
 8013738:	ec55 4b10 	vmov	r4, r5, d0
 801373c:	b083      	sub	sp, #12
 801373e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013742:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013746:	9001      	str	r0, [sp, #4]
 8013748:	da06      	bge.n	8013758 <__kernel_sin+0x30>
 801374a:	ee10 0a10 	vmov	r0, s0
 801374e:	4629      	mov	r1, r5
 8013750:	f7ed fa12 	bl	8000b78 <__aeabi_d2iz>
 8013754:	2800      	cmp	r0, #0
 8013756:	d051      	beq.n	80137fc <__kernel_sin+0xd4>
 8013758:	4622      	mov	r2, r4
 801375a:	462b      	mov	r3, r5
 801375c:	4620      	mov	r0, r4
 801375e:	4629      	mov	r1, r5
 8013760:	f7ec ff5a 	bl	8000618 <__aeabi_dmul>
 8013764:	4682      	mov	sl, r0
 8013766:	468b      	mov	fp, r1
 8013768:	4602      	mov	r2, r0
 801376a:	460b      	mov	r3, r1
 801376c:	4620      	mov	r0, r4
 801376e:	4629      	mov	r1, r5
 8013770:	f7ec ff52 	bl	8000618 <__aeabi_dmul>
 8013774:	a341      	add	r3, pc, #260	; (adr r3, 801387c <__kernel_sin+0x154>)
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	4680      	mov	r8, r0
 801377c:	4689      	mov	r9, r1
 801377e:	4650      	mov	r0, sl
 8013780:	4659      	mov	r1, fp
 8013782:	f7ec ff49 	bl	8000618 <__aeabi_dmul>
 8013786:	a33f      	add	r3, pc, #252	; (adr r3, 8013884 <__kernel_sin+0x15c>)
 8013788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378c:	f7ec fd8c 	bl	80002a8 <__aeabi_dsub>
 8013790:	4652      	mov	r2, sl
 8013792:	465b      	mov	r3, fp
 8013794:	f7ec ff40 	bl	8000618 <__aeabi_dmul>
 8013798:	a33c      	add	r3, pc, #240	; (adr r3, 801388c <__kernel_sin+0x164>)
 801379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379e:	f7ec fd85 	bl	80002ac <__adddf3>
 80137a2:	4652      	mov	r2, sl
 80137a4:	465b      	mov	r3, fp
 80137a6:	f7ec ff37 	bl	8000618 <__aeabi_dmul>
 80137aa:	a33a      	add	r3, pc, #232	; (adr r3, 8013894 <__kernel_sin+0x16c>)
 80137ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b0:	f7ec fd7a 	bl	80002a8 <__aeabi_dsub>
 80137b4:	4652      	mov	r2, sl
 80137b6:	465b      	mov	r3, fp
 80137b8:	f7ec ff2e 	bl	8000618 <__aeabi_dmul>
 80137bc:	a337      	add	r3, pc, #220	; (adr r3, 801389c <__kernel_sin+0x174>)
 80137be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c2:	f7ec fd73 	bl	80002ac <__adddf3>
 80137c6:	9b01      	ldr	r3, [sp, #4]
 80137c8:	4606      	mov	r6, r0
 80137ca:	460f      	mov	r7, r1
 80137cc:	b9eb      	cbnz	r3, 801380a <__kernel_sin+0xe2>
 80137ce:	4602      	mov	r2, r0
 80137d0:	460b      	mov	r3, r1
 80137d2:	4650      	mov	r0, sl
 80137d4:	4659      	mov	r1, fp
 80137d6:	f7ec ff1f 	bl	8000618 <__aeabi_dmul>
 80137da:	a325      	add	r3, pc, #148	; (adr r3, 8013870 <__kernel_sin+0x148>)
 80137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e0:	f7ec fd62 	bl	80002a8 <__aeabi_dsub>
 80137e4:	4642      	mov	r2, r8
 80137e6:	464b      	mov	r3, r9
 80137e8:	f7ec ff16 	bl	8000618 <__aeabi_dmul>
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	4620      	mov	r0, r4
 80137f2:	4629      	mov	r1, r5
 80137f4:	f7ec fd5a 	bl	80002ac <__adddf3>
 80137f8:	4604      	mov	r4, r0
 80137fa:	460d      	mov	r5, r1
 80137fc:	ec45 4b10 	vmov	d0, r4, r5
 8013800:	b003      	add	sp, #12
 8013802:	ecbd 8b04 	vpop	{d8-d9}
 8013806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380a:	4b1b      	ldr	r3, [pc, #108]	; (8013878 <__kernel_sin+0x150>)
 801380c:	ec51 0b18 	vmov	r0, r1, d8
 8013810:	2200      	movs	r2, #0
 8013812:	f7ec ff01 	bl	8000618 <__aeabi_dmul>
 8013816:	4632      	mov	r2, r6
 8013818:	ec41 0b19 	vmov	d9, r0, r1
 801381c:	463b      	mov	r3, r7
 801381e:	4640      	mov	r0, r8
 8013820:	4649      	mov	r1, r9
 8013822:	f7ec fef9 	bl	8000618 <__aeabi_dmul>
 8013826:	4602      	mov	r2, r0
 8013828:	460b      	mov	r3, r1
 801382a:	ec51 0b19 	vmov	r0, r1, d9
 801382e:	f7ec fd3b 	bl	80002a8 <__aeabi_dsub>
 8013832:	4652      	mov	r2, sl
 8013834:	465b      	mov	r3, fp
 8013836:	f7ec feef 	bl	8000618 <__aeabi_dmul>
 801383a:	ec53 2b18 	vmov	r2, r3, d8
 801383e:	f7ec fd33 	bl	80002a8 <__aeabi_dsub>
 8013842:	a30b      	add	r3, pc, #44	; (adr r3, 8013870 <__kernel_sin+0x148>)
 8013844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013848:	4606      	mov	r6, r0
 801384a:	460f      	mov	r7, r1
 801384c:	4640      	mov	r0, r8
 801384e:	4649      	mov	r1, r9
 8013850:	f7ec fee2 	bl	8000618 <__aeabi_dmul>
 8013854:	4602      	mov	r2, r0
 8013856:	460b      	mov	r3, r1
 8013858:	4630      	mov	r0, r6
 801385a:	4639      	mov	r1, r7
 801385c:	f7ec fd26 	bl	80002ac <__adddf3>
 8013860:	4602      	mov	r2, r0
 8013862:	460b      	mov	r3, r1
 8013864:	4620      	mov	r0, r4
 8013866:	4629      	mov	r1, r5
 8013868:	f7ec fd1e 	bl	80002a8 <__aeabi_dsub>
 801386c:	e7c4      	b.n	80137f8 <__kernel_sin+0xd0>
 801386e:	bf00      	nop
 8013870:	55555549 	.word	0x55555549
 8013874:	3fc55555 	.word	0x3fc55555
 8013878:	3fe00000 	.word	0x3fe00000
 801387c:	5acfd57c 	.word	0x5acfd57c
 8013880:	3de5d93a 	.word	0x3de5d93a
 8013884:	8a2b9ceb 	.word	0x8a2b9ceb
 8013888:	3e5ae5e6 	.word	0x3e5ae5e6
 801388c:	57b1fe7d 	.word	0x57b1fe7d
 8013890:	3ec71de3 	.word	0x3ec71de3
 8013894:	19c161d5 	.word	0x19c161d5
 8013898:	3f2a01a0 	.word	0x3f2a01a0
 801389c:	1110f8a6 	.word	0x1110f8a6
 80138a0:	3f811111 	.word	0x3f811111

080138a4 <fabs>:
 80138a4:	ec51 0b10 	vmov	r0, r1, d0
 80138a8:	ee10 2a10 	vmov	r2, s0
 80138ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80138b0:	ec43 2b10 	vmov	d0, r2, r3
 80138b4:	4770      	bx	lr
	...

080138b8 <floor>:
 80138b8:	ec51 0b10 	vmov	r0, r1, d0
 80138bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80138c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80138c8:	2e13      	cmp	r6, #19
 80138ca:	ee10 5a10 	vmov	r5, s0
 80138ce:	ee10 8a10 	vmov	r8, s0
 80138d2:	460c      	mov	r4, r1
 80138d4:	dc32      	bgt.n	801393c <floor+0x84>
 80138d6:	2e00      	cmp	r6, #0
 80138d8:	da14      	bge.n	8013904 <floor+0x4c>
 80138da:	a333      	add	r3, pc, #204	; (adr r3, 80139a8 <floor+0xf0>)
 80138dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e0:	f7ec fce4 	bl	80002ac <__adddf3>
 80138e4:	2200      	movs	r2, #0
 80138e6:	2300      	movs	r3, #0
 80138e8:	f7ed f926 	bl	8000b38 <__aeabi_dcmpgt>
 80138ec:	b138      	cbz	r0, 80138fe <floor+0x46>
 80138ee:	2c00      	cmp	r4, #0
 80138f0:	da57      	bge.n	80139a2 <floor+0xea>
 80138f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80138f6:	431d      	orrs	r5, r3
 80138f8:	d001      	beq.n	80138fe <floor+0x46>
 80138fa:	4c2d      	ldr	r4, [pc, #180]	; (80139b0 <floor+0xf8>)
 80138fc:	2500      	movs	r5, #0
 80138fe:	4621      	mov	r1, r4
 8013900:	4628      	mov	r0, r5
 8013902:	e025      	b.n	8013950 <floor+0x98>
 8013904:	4f2b      	ldr	r7, [pc, #172]	; (80139b4 <floor+0xfc>)
 8013906:	4137      	asrs	r7, r6
 8013908:	ea01 0307 	and.w	r3, r1, r7
 801390c:	4303      	orrs	r3, r0
 801390e:	d01f      	beq.n	8013950 <floor+0x98>
 8013910:	a325      	add	r3, pc, #148	; (adr r3, 80139a8 <floor+0xf0>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	f7ec fcc9 	bl	80002ac <__adddf3>
 801391a:	2200      	movs	r2, #0
 801391c:	2300      	movs	r3, #0
 801391e:	f7ed f90b 	bl	8000b38 <__aeabi_dcmpgt>
 8013922:	2800      	cmp	r0, #0
 8013924:	d0eb      	beq.n	80138fe <floor+0x46>
 8013926:	2c00      	cmp	r4, #0
 8013928:	bfbe      	ittt	lt
 801392a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801392e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013932:	19a4      	addlt	r4, r4, r6
 8013934:	ea24 0407 	bic.w	r4, r4, r7
 8013938:	2500      	movs	r5, #0
 801393a:	e7e0      	b.n	80138fe <floor+0x46>
 801393c:	2e33      	cmp	r6, #51	; 0x33
 801393e:	dd0b      	ble.n	8013958 <floor+0xa0>
 8013940:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013944:	d104      	bne.n	8013950 <floor+0x98>
 8013946:	ee10 2a10 	vmov	r2, s0
 801394a:	460b      	mov	r3, r1
 801394c:	f7ec fcae 	bl	80002ac <__adddf3>
 8013950:	ec41 0b10 	vmov	d0, r0, r1
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801395c:	f04f 33ff 	mov.w	r3, #4294967295
 8013960:	fa23 f707 	lsr.w	r7, r3, r7
 8013964:	4207      	tst	r7, r0
 8013966:	d0f3      	beq.n	8013950 <floor+0x98>
 8013968:	a30f      	add	r3, pc, #60	; (adr r3, 80139a8 <floor+0xf0>)
 801396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396e:	f7ec fc9d 	bl	80002ac <__adddf3>
 8013972:	2200      	movs	r2, #0
 8013974:	2300      	movs	r3, #0
 8013976:	f7ed f8df 	bl	8000b38 <__aeabi_dcmpgt>
 801397a:	2800      	cmp	r0, #0
 801397c:	d0bf      	beq.n	80138fe <floor+0x46>
 801397e:	2c00      	cmp	r4, #0
 8013980:	da02      	bge.n	8013988 <floor+0xd0>
 8013982:	2e14      	cmp	r6, #20
 8013984:	d103      	bne.n	801398e <floor+0xd6>
 8013986:	3401      	adds	r4, #1
 8013988:	ea25 0507 	bic.w	r5, r5, r7
 801398c:	e7b7      	b.n	80138fe <floor+0x46>
 801398e:	2301      	movs	r3, #1
 8013990:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013994:	fa03 f606 	lsl.w	r6, r3, r6
 8013998:	4435      	add	r5, r6
 801399a:	4545      	cmp	r5, r8
 801399c:	bf38      	it	cc
 801399e:	18e4      	addcc	r4, r4, r3
 80139a0:	e7f2      	b.n	8013988 <floor+0xd0>
 80139a2:	2500      	movs	r5, #0
 80139a4:	462c      	mov	r4, r5
 80139a6:	e7aa      	b.n	80138fe <floor+0x46>
 80139a8:	8800759c 	.word	0x8800759c
 80139ac:	7e37e43c 	.word	0x7e37e43c
 80139b0:	bff00000 	.word	0xbff00000
 80139b4:	000fffff 	.word	0x000fffff

080139b8 <scalbn>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	ec55 4b10 	vmov	r4, r5, d0
 80139be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80139c2:	4606      	mov	r6, r0
 80139c4:	462b      	mov	r3, r5
 80139c6:	b99a      	cbnz	r2, 80139f0 <scalbn+0x38>
 80139c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80139cc:	4323      	orrs	r3, r4
 80139ce:	d036      	beq.n	8013a3e <scalbn+0x86>
 80139d0:	4b39      	ldr	r3, [pc, #228]	; (8013ab8 <scalbn+0x100>)
 80139d2:	4629      	mov	r1, r5
 80139d4:	ee10 0a10 	vmov	r0, s0
 80139d8:	2200      	movs	r2, #0
 80139da:	f7ec fe1d 	bl	8000618 <__aeabi_dmul>
 80139de:	4b37      	ldr	r3, [pc, #220]	; (8013abc <scalbn+0x104>)
 80139e0:	429e      	cmp	r6, r3
 80139e2:	4604      	mov	r4, r0
 80139e4:	460d      	mov	r5, r1
 80139e6:	da10      	bge.n	8013a0a <scalbn+0x52>
 80139e8:	a32b      	add	r3, pc, #172	; (adr r3, 8013a98 <scalbn+0xe0>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	e03a      	b.n	8013a66 <scalbn+0xae>
 80139f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80139f4:	428a      	cmp	r2, r1
 80139f6:	d10c      	bne.n	8013a12 <scalbn+0x5a>
 80139f8:	ee10 2a10 	vmov	r2, s0
 80139fc:	4620      	mov	r0, r4
 80139fe:	4629      	mov	r1, r5
 8013a00:	f7ec fc54 	bl	80002ac <__adddf3>
 8013a04:	4604      	mov	r4, r0
 8013a06:	460d      	mov	r5, r1
 8013a08:	e019      	b.n	8013a3e <scalbn+0x86>
 8013a0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013a0e:	460b      	mov	r3, r1
 8013a10:	3a36      	subs	r2, #54	; 0x36
 8013a12:	4432      	add	r2, r6
 8013a14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013a18:	428a      	cmp	r2, r1
 8013a1a:	dd08      	ble.n	8013a2e <scalbn+0x76>
 8013a1c:	2d00      	cmp	r5, #0
 8013a1e:	a120      	add	r1, pc, #128	; (adr r1, 8013aa0 <scalbn+0xe8>)
 8013a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a24:	da1c      	bge.n	8013a60 <scalbn+0xa8>
 8013a26:	a120      	add	r1, pc, #128	; (adr r1, 8013aa8 <scalbn+0xf0>)
 8013a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2c:	e018      	b.n	8013a60 <scalbn+0xa8>
 8013a2e:	2a00      	cmp	r2, #0
 8013a30:	dd08      	ble.n	8013a44 <scalbn+0x8c>
 8013a32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a3e:	ec45 4b10 	vmov	d0, r4, r5
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013a48:	da19      	bge.n	8013a7e <scalbn+0xc6>
 8013a4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013a4e:	429e      	cmp	r6, r3
 8013a50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013a54:	dd0a      	ble.n	8013a6c <scalbn+0xb4>
 8013a56:	a112      	add	r1, pc, #72	; (adr r1, 8013aa0 <scalbn+0xe8>)
 8013a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e2      	bne.n	8013a26 <scalbn+0x6e>
 8013a60:	a30f      	add	r3, pc, #60	; (adr r3, 8013aa0 <scalbn+0xe8>)
 8013a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a66:	f7ec fdd7 	bl	8000618 <__aeabi_dmul>
 8013a6a:	e7cb      	b.n	8013a04 <scalbn+0x4c>
 8013a6c:	a10a      	add	r1, pc, #40	; (adr r1, 8013a98 <scalbn+0xe0>)
 8013a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d0b8      	beq.n	80139e8 <scalbn+0x30>
 8013a76:	a10e      	add	r1, pc, #56	; (adr r1, 8013ab0 <scalbn+0xf8>)
 8013a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a7c:	e7b4      	b.n	80139e8 <scalbn+0x30>
 8013a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a82:	3236      	adds	r2, #54	; 0x36
 8013a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	4b0c      	ldr	r3, [pc, #48]	; (8013ac0 <scalbn+0x108>)
 8013a90:	2200      	movs	r2, #0
 8013a92:	e7e8      	b.n	8013a66 <scalbn+0xae>
 8013a94:	f3af 8000 	nop.w
 8013a98:	c2f8f359 	.word	0xc2f8f359
 8013a9c:	01a56e1f 	.word	0x01a56e1f
 8013aa0:	8800759c 	.word	0x8800759c
 8013aa4:	7e37e43c 	.word	0x7e37e43c
 8013aa8:	8800759c 	.word	0x8800759c
 8013aac:	fe37e43c 	.word	0xfe37e43c
 8013ab0:	c2f8f359 	.word	0xc2f8f359
 8013ab4:	81a56e1f 	.word	0x81a56e1f
 8013ab8:	43500000 	.word	0x43500000
 8013abc:	ffff3cb0 	.word	0xffff3cb0
 8013ac0:	3c900000 	.word	0x3c900000

08013ac4 <_init>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	bf00      	nop
 8013ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aca:	bc08      	pop	{r3}
 8013acc:	469e      	mov	lr, r3
 8013ace:	4770      	bx	lr

08013ad0 <_fini>:
 8013ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad2:	bf00      	nop
 8013ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ad6:	bc08      	pop	{r3}
 8013ad8:	469e      	mov	lr, r3
 8013ada:	4770      	bx	lr
