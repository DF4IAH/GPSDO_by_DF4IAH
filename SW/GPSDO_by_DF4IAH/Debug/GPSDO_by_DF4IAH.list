
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  080135b8  080135b8  000235b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a20  08014a20  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014a20  08014a20  00024a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a28  08014a28  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a28  08014a28  00024a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a2c  08014a2c  00024a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08014a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  200001e8  08014c18  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028a8  08014c18  000328a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028191  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004914  00000000  00000000  000583a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  0005ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc8  00000000  00000000  0005ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027532  00000000  00000000  00060730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023605  00000000  00000000  00087c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e999f  00000000  00000000  000ab267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091c0  00000000  00000000  00194c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801359c 	.word	0x0801359c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801359c 	.word	0x0801359c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb4:	f043 0204 	orr.w	r2, r3, #4
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <MX_ADC1_Init+0x178>)
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <MX_ADC1_Init+0x17c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <MX_ADC1_Init+0x178>)
 800100e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b54      	ldr	r3, [pc, #336]	; (8001168 <MX_ADC1_Init+0x178>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <MX_ADC1_Init+0x178>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <MX_ADC1_Init+0x178>)
 8001022:	2201      	movs	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <MX_ADC1_Init+0x178>)
 8001028:	2208      	movs	r2, #8
 800102a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_ADC1_Init+0x178>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <MX_ADC1_Init+0x178>)
 8001034:	2200      	movs	r2, #0
 8001036:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_ADC1_Init+0x178>)
 800103a:	2205      	movs	r2, #5
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <MX_ADC1_Init+0x178>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_ADC1_Init+0x178>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_ADC1_Init+0x178>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_ADC1_Init+0x178>)
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_ADC1_Init+0x178>)
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_ADC1_Init+0x178>)
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_ADC1_Init+0x178>)
 800106a:	221c      	movs	r2, #28
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_ADC1_Init+0x178>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_ADC1_Init+0x178>)
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_ADC1_Init+0x178>)
 800107c:	2201      	movs	r2, #1
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4839      	ldr	r0, [pc, #228]	; (8001168 <MX_ADC1_Init+0x178>)
 8001082:	f006 ffd7 	bl	8008034 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800108c:	f004 fae4 	bl	8005658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <MX_ADC1_Init+0x180>)
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001094:	2306      	movs	r3, #6
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001098:	2306      	movs	r3, #6
 800109a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109c:	237f      	movs	r3, #127	; 0x7f
 800109e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a0:	2304      	movs	r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ae:	f007 fb33 	bl	8008718 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80010b8:	f004 face 	bl	8005658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_ADC1_Init+0x184>)
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c0:	230c      	movs	r3, #12
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ce:	f007 fb23 	bl	8008718 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80010d8:	f004 fabe 	bl	8005658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_ADC1_Init+0x188>)
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2312      	movs	r3, #18
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ea:	f007 fb15 	bl	8008718 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010f4:	f004 fab0 	bl	8005658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x180>)
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010fc:	2318      	movs	r3, #24
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <MX_ADC1_Init+0x178>)
 800110a:	f007 fb05 	bl	8008718 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001114:	f004 faa0 	bl	8005658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_ADC1_Init+0x18c>)
 800111a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001122:	2305      	movs	r3, #5
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <MX_ADC1_Init+0x178>)
 800112c:	f007 faf4 	bl	8008718 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001136:	f004 fa8f 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <MX_ADC1_Init+0x190>)
 800113e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <MX_ADC1_Init+0x190>)
 8001144:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <MX_ADC1_Init+0x190>)
 800114a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <MX_ADC1_Init+0x190>)
 8001150:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <MX_ADC1_Init+0x190>)
 8001156:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <MX_ADC1_Init+0x190>)
 800115c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000251c 	.word	0x2000251c
 800116c:	50040000 	.word	0x50040000
 8001170:	80000001 	.word	0x80000001
 8001174:	2a000400 	.word	0x2a000400
 8001178:	25b00200 	.word	0x25b00200
 800117c:	43210000 	.word	0x43210000
 8001180:	20000204 	.word	0x20000204

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a0      	sub	sp, #128	; 0x80
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	2254      	movs	r2, #84	; 0x54
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e fabf 	bl	800f728 <memset>
  if(adcHandle->Instance==ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_ADC_MspInit+0x138>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d17f      	bne.n	80012b4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00b fc9b 	bl	800cb00 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011d0:	f004 fa42 	bl	8005658 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800121c:	2330      	movs	r3, #48	; 0x30
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001220:	230b      	movs	r3, #11
 8001222:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f008 fcc5 	bl	8009bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001236:	2302      	movs	r3, #2
 8001238:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123a:	230b      	movs	r3, #11
 800123c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001246:	4619      	mov	r1, r3
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 800124a:	f008 fcb9 	bl	8009bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800128a:	f008 fa15 	bl	80096b8 <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001294:	f004 f9e0 	bl	8005658 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800129c:	64da      	str	r2, [r3, #76]	; 0x4c
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2012      	movs	r0, #18
 80012aa:	f008 f9cd 	bl	8009648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012ae:	2012      	movs	r0, #18
 80012b0:	f008 f9e6 	bl	8009680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3780      	adds	r7, #128	; 0x80
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	50040000 	.word	0x50040000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	20002580 	.word	0x20002580
 80012cc:	40020008 	.word	0x40020008

080012d0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe71 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d16c      	bne.n	80013c6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <DF4IAH_ADC_Start_DMA+0x2a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e068      	b.n	80013cc <DF4IAH_ADC_Start_DMA+0xfc>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f007 feb0 	bl	8009068 <ADC_Enable>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d154      	bne.n	80013bc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f023 0206 	bic.w	r2, r3, #6
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58
 800133e:	e002      	b.n	8001346 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <DF4IAH_ADC_Start_DMA+0x104>)
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <DF4IAH_ADC_Start_DMA+0x10c>)
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	221c      	movs	r2, #28
 8001364:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4618      	mov	r0, r3
 8001394:	f008 f990 	bl	80096b8 <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3340      	adds	r3, #64	; 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f008 fa3e 	bl	8009828 <HAL_DMA_Start_IT>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fdf3 	bl	8000fa0 <LL_ADC_REG_StartConversion>
 80013ba:	e006      	b.n	80013ca <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013c4:	e001      	b.n	80013ca <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c6:	2302      	movs	r3, #2
 80013c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	080091eb 	.word	0x080091eb
 80013d8:	080092c3 	.word	0x080092c3
 80013dc:	080092df 	.word	0x080092df

080013e0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f007 fd75 	bl	8008ed8 <HAL_ADC_GetState>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d013      	beq.n	8001432 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				adcVrefint_val = adc_dma_buf[0];
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_ADC_ConvCpltCallback+0x60>)
 8001418:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 800141c:	885a      	ldrh	r2, [r3, #2]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_ADC_ConvCpltCallback+0x64>)
 8001420:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[2];
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001424:	889a      	ldrh	r2, [r3, #4]
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_ADC_ConvCpltCallback+0x68>)
 8001428:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[4];
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 800142c:	891a      	ldrh	r2, [r3, #8]
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001430:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000234 	.word	0x20000234
 8001440:	20000222 	.word	0x20000222
 8001444:	2000021e 	.word	0x2000021e
 8001448:	2000021c 	.word	0x2000021c
 800144c:	20000220 	.word	0x20000220

08001450 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_ADC_ErrorCallback+0x20>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_ADC_ErrorCallback+0x20>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000240 	.word	0x20000240

08001474 <adc_init>:


void adc_init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001478:	217f      	movs	r1, #127	; 0x7f
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <adc_init+0x1c>)
 800147c:	f007 ff76 	bl	800936c <HAL_ADCEx_Calibration_Start>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <adc_init+0x16>
	{
		Error_Handler();
 8001486:	f004 f8e7 	bl	8005658 <Error_Handler>
	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000251c 	.word	0x2000251c

08001494 <adc_start>:

void adc_start(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <adc_start+0x30>)
 800149a:	f007 fd1d 	bl	8008ed8 <HAL_ADC_GetState>
 800149e:	4603      	mov	r3, r0
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00a      	beq.n	80014be <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80014a8:	2305      	movs	r3, #5
 80014aa:	461a      	mov	r2, r3
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <adc_start+0x34>)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <adc_start+0x30>)
 80014b0:	f7ff ff0e 	bl	80012d0 <DF4IAH_ADC_Start_DMA>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <adc_start+0x2a>
			Error_Handler();
 80014ba:	f004 f8cd 	bl	8005658 <Error_Handler>
		}
	}
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000251c 	.word	0x2000251c
 80014c8:	20000234 	.word	0x20000234

080014cc <adc_stop>:

void adc_stop(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <adc_stop+0x38>)
 80014d2:	f007 fd01 	bl	8008ed8 <HAL_ADC_GetState>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <adc_stop+0x38>)
 80014e2:	f006 feef 	bl	80082c4 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80014e6:	e00a      	b.n	80014fe <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <adc_stop+0x38>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d103      	bne.n	80014fe <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <adc_stop+0x38>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000251c 	.word	0x2000251c

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_DMA_Init+0x48>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <MX_DMA_Init+0x48>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6493      	str	r3, [r2, #72]	; 0x48
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_DMA_Init+0x48>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	200b      	movs	r0, #11
 800152c:	f008 f88c 	bl	8009648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001530:	200b      	movs	r0, #11
 8001532:	f008 f8a5 	bl	8009680 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2011      	movs	r0, #17
 800153c:	f008 f884 	bl	8009648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001540:	2011      	movs	r0, #17
 8001542:	f008 f89d 	bl	8009680 <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <MX_GPIO_Init+0x144>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <MX_GPIO_Init+0x144>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <MX_GPIO_Init+0x144>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <MX_GPIO_Init+0x144>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a44      	ldr	r2, [pc, #272]	; (8001698 <MX_GPIO_Init+0x144>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_GPIO_Init+0x144>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_GPIO_Init+0x144>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <MX_GPIO_Init+0x144>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <MX_GPIO_Init+0x144>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <MX_GPIO_Init+0x144>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a38      	ldr	r2, [pc, #224]	; (8001698 <MX_GPIO_Init+0x144>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <MX_GPIO_Init+0x144>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f008 fd40 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2110      	movs	r1, #16
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_GPIO_Init+0x148>)
 80015de:	f008 fd3b 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	482d      	ldr	r0, [pc, #180]	; (800169c <MX_GPIO_Init+0x148>)
 80015e8:	f008 fd36 	bl	800a058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4827      	ldr	r0, [pc, #156]	; (800169c <MX_GPIO_Init+0x148>)
 8001600:	f008 fade 	bl	8009bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001604:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f008 fad0 	bl	8009bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f008 fac0 	bl	8009bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001640:	2310      	movs	r3, #16
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_GPIO_Init+0x148>)
 8001658:	f008 fab2 	bl	8009bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800165c:	2320      	movs	r3, #32
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001660:	2311      	movs	r3, #17
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <MX_GPIO_Init+0x148>)
 8001674:	f008 faa4 	bl	8009bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001678:	2308      	movs	r3, #8
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_GPIO_Init+0x150>)
 800168c:	f008 fa98 	bl	8009bc0 <HAL_GPIO_Init>

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400
 80016a0:	10110000 	.word	0x10110000
 80016a4:	48001c00 	.word	0x48001c00

080016a8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2120      	movs	r1, #32
 80016b6:	4818      	ldr	r0, [pc, #96]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016b8:	f008 fcce 	bl	800a058 <HAL_GPIO_WritePin>
	uDelay(2);
 80016bc:	2002      	movs	r0, #2
 80016be:	f002 f9a1 	bl	8003a04 <uDelay>

	/* TimeSlot starts here */

	if (bit) {
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d010      	beq.n	80016ea <onewireMasterWr_bit+0x42>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016ce:	f008 fcc3 	bl	800a058 <HAL_GPIO_WritePin>
		uDelay(2);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f002 f996 	bl	8003a04 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	480e      	ldr	r0, [pc, #56]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016de:	f008 fcbb 	bl	800a058 <HAL_GPIO_WritePin>
		uDelay(88);
 80016e2:	2058      	movs	r0, #88	; 0x58
 80016e4:	f002 f98e 	bl	8003a04 <uDelay>
 80016e8:	e00c      	b.n	8001704 <onewireMasterWr_bit+0x5c>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016f0:	f008 fcb2 	bl	800a058 <HAL_GPIO_WritePin>
		uDelay(90);
 80016f4:	205a      	movs	r0, #90	; 0x5a
 80016f6:	f002 f985 	bl	8003a04 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2120      	movs	r1, #32
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <onewireMasterWr_bit+0x70>)
 8001700:	f008 fcaa 	bl	800a058 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <onewireMasterWr_bit+0x70>)
 800170a:	f008 fca5 	bl	800a058 <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000400 	.word	0x48000400

0800171c <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e00d      	b.n	8001748 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	fa42 f303 	asr.w	r3, r2, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffb3 	bl	80016a8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3301      	adds	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d9ee      	bls.n	800172c <onewireMasterWr_byte+0x10>
	}
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d124      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11f      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3302      	adds	r3, #2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3303      	adds	r3, #3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d115      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d110      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3305      	adds	r3, #5
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10b      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3306      	adds	r3, #6
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3307      	adds	r3, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d010      	beq.n	80017da <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80017b8:	2308      	movs	r3, #8
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e009      	b.n	80017d2 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffa8 	bl	800171c <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f2      	bne.n	80017be <onewireMasterWr_romCode+0x66>
 80017d8:	e000      	b.n	80017dc <onewireMasterWr_romCode+0x84>
		return;
 80017da:	bf00      	nop
	}
}
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2120      	movs	r1, #32
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <onewireMasterRd_bit+0x68>)
 80017f0:	f008 fc32 	bl	800a058 <HAL_GPIO_WritePin>
	uDelay(2);
 80017f4:	2002      	movs	r0, #2
 80017f6:	f002 f905 	bl	8003a04 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <onewireMasterRd_bit+0x68>)
 8001800:	f008 fc2a 	bl	800a058 <HAL_GPIO_WritePin>
	uDelay(2);
 8001804:	2002      	movs	r0, #2
 8001806:	f002 f8fd 	bl	8003a04 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2120      	movs	r1, #32
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <onewireMasterRd_bit+0x68>)
 8001810:	f008 fc22 	bl	800a058 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8001814:	200d      	movs	r0, #13
 8001816:	f002 f8f5 	bl	8003a04 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800181a:	2120      	movs	r1, #32
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <onewireMasterRd_bit+0x68>)
 800181e:	f008 fc03 	bl	800a028 <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8001826:	204b      	movs	r0, #75	; 0x4b
 8001828:	f002 f8ec 	bl	8003a04 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2120      	movs	r1, #32
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <onewireMasterRd_bit+0x68>)
 8001832:	f008 fc11 	bl	800a058 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	48000400 	.word	0x48000400

08001850 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d902      	bls.n	800186a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	e016      	b.n	8001898 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800186a:	2300      	movs	r3, #0
 800186c:	72fb      	strb	r3, [r7, #11]
 800186e:	e00e      	b.n	800188e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001870:	f7ff ffb8 	bl	80017e4 <onewireMasterRd_bit>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	2201      	movs	r2, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	3301      	adds	r3, #1
 800188c:	72fb      	strb	r3, [r7, #11]
 800188e:	7afa      	ldrb	r2, [r7, #11]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3ec      	bcc.n	8001870 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2120      	movs	r1, #32
 80018aa:	4813      	ldr	r0, [pc, #76]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018ac:	f008 fbd4 	bl	800a058 <HAL_GPIO_WritePin>
	uDelay(2000);
 80018b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b4:	f002 f8a6 	bl	8003a04 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2120      	movs	r1, #32
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018be:	f008 fbcb 	bl	800a058 <HAL_GPIO_WritePin>
	uDelay(550);
 80018c2:	f240 2026 	movw	r0, #550	; 0x226
 80018c6:	f002 f89d 	bl	8003a04 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	480a      	ldr	r0, [pc, #40]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018d0:	f008 fbc2 	bl	800a058 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120);
 80018d4:	2078      	movs	r0, #120	; 0x78
 80018d6:	f002 f895 	bl	8003a04 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80018da:	2120      	movs	r1, #32
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018de:	f008 fba3 	bl	800a028 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	uDelay(550 - 120);
 80018e6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80018ea:	f002 f88b 	bl	8003a04 <uDelay>

	return presence;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	48000400 	.word	0x48000400

080018fc <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	603a      	str	r2, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	460b      	mov	r3, r1
 800190a:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 8001918:	23ff      	movs	r3, #255	; 0xff
 800191a:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 800191c:	23ff      	movs	r3, #255	; 0xff
 800191e:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 800192c:	e0d0      	b.n	8001ad0 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 800192e:	f7ff ffb7 	bl	80018a0 <onewireMasterCheck_presence>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e0d3      	b.n	8001ae4 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80cc 	bne.w	8001adc <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800194a:	20ec      	movs	r0, #236	; 0xec
 800194c:	f7ff fee6 	bl	800171c <onewireMasterWr_byte>
 8001950:	e002      	b.n	8001958 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001952:	20f0      	movs	r0, #240	; 0xf0
 8001954:	f7ff fee2 	bl	800171c <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 800195c:	e092      	b.n	8001a84 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 800195e:	7fbb      	ldrb	r3, [r7, #30]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f107 0220 	add.w	r2, r7, #32
 8001968:	4413      	add	r3, r2
 800196a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800196e:	461a      	mov	r2, r3
 8001970:	7fbb      	ldrb	r3, [r7, #30]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	fa42 f303 	asr.w	r3, r2, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001982:	f7ff ff2f 	bl	80017e4 <onewireMasterRd_bit>
 8001986:	4603      	mov	r3, r0
 8001988:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800198a:	f7ff ff2b 	bl	80017e4 <onewireMasterRd_bit>
 800198e:	4603      	mov	r3, r0
 8001990:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001992:	7c7b      	ldrb	r3, [r7, #17]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <onewireMasterTree_search+0xa8>
 8001998:	7c3b      	ldrb	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	777b      	strb	r3, [r7, #29]
 80019a2:	e030      	b.n	8001a06 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 80019a4:	7c7b      	ldrb	r3, [r7, #17]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <onewireMasterTree_search+0xba>
 80019aa:	7c3b      	ldrb	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	777b      	strb	r3, [r7, #29]
 80019b4:	e027      	b.n	8001a06 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80019b6:	7c7b      	ldrb	r3, [r7, #17]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11c      	bne.n	80019f6 <onewireMasterTree_search+0xfa>
 80019bc:	7c3b      	ldrb	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80019c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019c6:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dd02      	ble.n	80019d4 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80019ce:	7cbb      	ldrb	r3, [r7, #18]
 80019d0:	777b      	strb	r3, [r7, #29]
 80019d2:	e00a      	b.n	80019ea <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80019d4:	7f3b      	ldrb	r3, [r7, #28]
 80019d6:	7fba      	ldrb	r2, [r7, #30]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d104      	bne.n	80019e6 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80019e0:	23ff      	movs	r3, #255	; 0xff
 80019e2:	773b      	strb	r3, [r7, #28]
 80019e4:	e001      	b.n	80019ea <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80019ea:	7f7b      	ldrb	r3, [r7, #29]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80019f0:	7fbb      	ldrb	r3, [r7, #30]
 80019f2:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80019f4:	e007      	b.n	8001a06 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <onewireMasterTree_search+0x10a>
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e06e      	b.n	8001ae4 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 8001a06:	7f7b      	ldrb	r3, [r7, #29]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001a0c:	7fbb      	ldrb	r3, [r7, #30]
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f107 0220 	add.w	r2, r7, #32
 8001a16:	4413      	add	r3, r2
 8001a18:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a1c:	7fbb      	ldrb	r3, [r7, #30]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	7fb9      	ldrb	r1, [r7, #30]
 8001a2c:	08c9      	lsrs	r1, r1, #3
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	440b      	add	r3, r1
 8001a3a:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001a3e:	e01a      	b.n	8001a76 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001a40:	7fbb      	ldrb	r3, [r7, #30]
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f107 0220 	add.w	r2, r7, #32
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a50:	7fbb      	ldrb	r3, [r7, #30]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	7fb9      	ldrb	r1, [r7, #30]
 8001a64:	08c9      	lsrs	r1, r1, #3
 8001a66:	b2c9      	uxtb	r1, r1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	440b      	add	r3, r1
 8001a72:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a76:	7f7b      	ldrb	r3, [r7, #29]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe15 	bl	80016a8 <onewireMasterWr_bit>

			++bitIdxNow;
 8001a7e:	7fbb      	ldrb	r3, [r7, #30]
 8001a80:	3301      	adds	r3, #1
 8001a82:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001a84:	7fbb      	ldrb	r3, [r7, #30]
 8001a86:	2b3f      	cmp	r3, #63	; 0x3f
 8001a88:	f67f af69 	bls.w	800195e <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001a8c:	7f3b      	ldrb	r3, [r7, #28]
 8001a8e:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d101      	bne.n	8001a9e <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00f      	b.n	8001ac4 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	441a      	add	r2, r3
 8001aac:	f107 0108 	add.w	r1, r7, #8
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	7819      	ldrb	r1, [r3, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4413      	add	r3, r2
 8001aba:	460a      	mov	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	ddec      	ble.n	8001aa4 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	3301      	adds	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001ad0:	7ffa      	ldrb	r2, [r7, #31]
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f4ff af2a 	bcc.w	800192e <onewireMasterTree_search+0x32>
 8001ada:	e000      	b.n	8001ade <onewireMasterTree_search+0x1e2>
			break;
 8001adc:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001ade:	f7ff fedf 	bl	80018a0 <onewireMasterCheck_presence>

	return devicesCnt;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	460b      	mov	r3, r1
 8001afa:	71bb      	strb	r3, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d124      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11f      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3302      	adds	r3, #2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11a      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3303      	adds	r3, #3
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d115      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d110      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3305      	adds	r3, #5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3306      	adds	r3, #6
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3307      	adds	r3, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001b52:	231f      	movs	r3, #31
 8001b54:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b0b      	cmp	r3, #11
 8001b5a:	d00a      	beq.n	8001b72 <onewireDS18B20_setAdcWidth+0x86>
 8001b5c:	2b0b      	cmp	r3, #11
 8001b5e:	dc0d      	bgt.n	8001b7c <onewireDS18B20_setAdcWidth+0x90>
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d010      	beq.n	8001b86 <onewireDS18B20_setAdcWidth+0x9a>
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d109      	bne.n	8001b7c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b70:	e00a      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	73fb      	strb	r3, [r7, #15]
		break;
 8001b7a:	e005      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b82:	73fb      	strb	r3, [r7, #15]
		break;
 8001b84:	e000      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001b86:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b88:	f7ff fe8a 	bl	80018a0 <onewireMasterCheck_presence>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b98:	20cc      	movs	r0, #204	; 0xcc
 8001b9a:	f7ff fdbf 	bl	800171c <onewireMasterWr_byte>
 8001b9e:	e005      	b.n	8001bac <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001ba0:	2055      	movs	r0, #85	; 0x55
 8001ba2:	f7ff fdbb 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f7ff fdd6 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001bac:	204e      	movs	r0, #78	; 0x4e
 8001bae:	f7ff fdb5 	bl	800171c <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdb1 	bl	800171c <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fdad 	bl	800171c <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fda9 	bl	800171c <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001bca:	f7ff fe69 	bl	80018a0 <onewireMasterCheck_presence>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d124      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3301      	adds	r3, #1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d115      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d110      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3305      	adds	r3, #5
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3307      	adds	r3, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001c30:	f7ff fe36 	bl	80018a0 <onewireMasterCheck_presence>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11d      	bne.n	8001c76 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c40:	20cc      	movs	r0, #204	; 0xcc
 8001c42:	f7ff fd6b 	bl	800171c <onewireMasterWr_byte>
 8001c46:	e005      	b.n	8001c54 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c48:	2055      	movs	r0, #85	; 0x55
 8001c4a:	f7ff fd67 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd82 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001c54:	2044      	movs	r0, #68	; 0x44
 8001c56:	f7ff fd61 	bl	800171c <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001c5e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c62:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c6a:	f005 ff9f 	bl	8007bac <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	e000      	b.n	8001c78 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d124      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11f      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11a      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3303      	adds	r3, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d115      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d110      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3305      	adds	r3, #5
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001cdc:	f005 ff66 	bl	8007bac <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d205      	bcs.n	8001cf6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 ff67 	bl	8007bc4 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001cf6:	f7ff fdd3 	bl	80018a0 <onewireMasterCheck_presence>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d116      	bne.n	8001d2e <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d103      	bne.n	8001d0e <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001d06:	20cc      	movs	r0, #204	; 0xcc
 8001d08:	f7ff fd08 	bl	800171c <onewireMasterWr_byte>
 8001d0c:	e005      	b.n	8001d1a <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001d0e:	2055      	movs	r0, #85	; 0x55
 8001d10:	f7ff fd04 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fd1f 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001d1a:	20be      	movs	r0, #190	; 0xbe
 8001d1c:	f7ff fcfe 	bl	800171c <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f7ff fd95 	bl	8001850 <onewireMasterRd_field>
 8001d26:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	e000      	b.n	8001d30 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_I2C1_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <MX_I2C1_Init+0x7c>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d74:	f008 f988 	bl	800a088 <HAL_I2C_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d7e:	f003 fc6b 	bl	8005658 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d86:	f009 ff58 	bl	800bc3a <HAL_I2CEx_ConfigAnalogFilter>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d90:	f003 fc62 	bl	8005658 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d98:	f009 ff9a 	bl	800bcd0 <HAL_I2CEx_ConfigDigitalFilter>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f003 fc59 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200025d8 	.word	0x200025d8
 8001db0:	40005400 	.word	0x40005400
 8001db4:	00403e5a 	.word	0x00403e5a

08001db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09e      	sub	sp, #120	; 0x78
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2254      	movs	r2, #84	; 0x54
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00d fca5 	bl	800f728 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_I2C_MspInit+0xc8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d146      	bne.n	8001e76 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00a fe82 	bl	800cb00 <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e02:	f003 fc29 	bl	8005658 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e36:	4619      	mov	r1, r3
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <HAL_I2C_MspInit+0xd0>)
 8001e3a:	f007 fec1 	bl	8009bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201f      	movs	r0, #31
 8001e5c:	f007 fbf4 	bl	8009648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e60:	201f      	movs	r0, #31
 8001e62:	f007 fc0d 	bl	8009680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2020      	movs	r0, #32
 8001e6c:	f007 fbec 	bl	8009648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e70:	2020      	movs	r0, #32
 8001e72:	f007 fc05 	bl	8009680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3778      	adds	r7, #120	; 0x78
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005400 	.word	0x40005400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400

08001e8c <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	e03e      	b.n	8001f22 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	2364      	movs	r3, #100	; 0x64
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4820      	ldr	r0, [pc, #128]	; (8001f34 <i2cBusGetDeviceList+0xa8>)
 8001eb2:	f008 f9e9 	bl	800a288 <HAL_I2C_IsDeviceReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d12c      	bne.n	8001f1a <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b60      	cmp	r3, #96	; 0x60
 8001eca:	d01f      	beq.n	8001f0c <i2cBusGetDeviceList+0x80>
 8001ecc:	2b60      	cmp	r3, #96	; 0x60
 8001ece:	dc25      	bgt.n	8001f1c <i2cBusGetDeviceList+0x90>
 8001ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed2:	d014      	beq.n	8001efe <i2cBusGetDeviceList+0x72>
 8001ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed6:	dc21      	bgt.n	8001f1c <i2cBusGetDeviceList+0x90>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d002      	beq.n	8001ee2 <i2cBusGetDeviceList+0x56>
 8001edc:	2b22      	cmp	r3, #34	; 0x22
 8001ede:	d007      	beq.n	8001ef0 <i2cBusGetDeviceList+0x64>
 8001ee0:	e01c      	b.n	8001f1c <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
				break;
 8001eee:	e015      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
				break;
 8001efc:	e00e      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
				break;
 8001f0a:	e007      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
				break;
 8001f18:	e000      	b.n	8001f1c <i2cBusGetDeviceList+0x90>
			}
		}
 8001f1a:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	73bb      	strb	r3, [r7, #14]
 8001f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dabc      	bge.n	8001ea4 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200025d8 	.word	0x200025d8

08001f38 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	460b      	mov	r3, r1
 8001f44:	71bb      	strb	r3, [r7, #6]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f5c:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f70:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	b299      	uxth	r1, r3
 8001f94:	f107 0208 	add.w	r2, r7, #8
 8001f98:	2302      	movs	r3, #2
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f9c:	f008 f904 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <i2cDeviceDacMcp4725_set+0x76>
		return 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fae:	bf00      	nop
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fb2:	f008 fc5c 	bl	800a86e <HAL_I2C_GetState>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d1f9      	bne.n	8001fb0 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fbe:	f008 fc64 	bl	800a88a <HAL_I2C_GetError>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d101      	bne.n	8001fcc <i2cDeviceDacMcp4725_set+0x94>
		return 2U;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e000      	b.n	8001fce <i2cDeviceDacMcp4725_set+0x96>
	}
	return 0U;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200025d8 	.word	0x200025d8

08001fdc <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d02c      	beq.n	800204c <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	2303      	movs	r3, #3
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	4831      	ldr	r0, [pc, #196]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002008:	f008 f8ce 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1U;
 8002016:	2301      	movs	r3, #1
 8002018:	e053      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800201a:	bf00      	nop
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800201e:	f008 fc26 	bl	800a86e <HAL_I2C_GetState>
 8002022:	4603      	mov	r3, r0
 8002024:	2b20      	cmp	r3, #32
 8002026:	d1f9      	bne.n	800201c <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002028:	2313      	movs	r3, #19
 800202a:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 800202c:	230d      	movs	r3, #13
 800202e:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002030:	f107 020c 	add.w	r2, r7, #12
 8002034:	2302      	movs	r3, #2
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	4824      	ldr	r0, [pc, #144]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800203a:	f008 f8b5 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002048:	2301      	movs	r3, #1
 800204a:	e03a      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800204c:	2312      	movs	r3, #18
 800204e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002054:	2309      	movs	r3, #9
 8002056:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002058:	f107 020c 	add.w	r2, r7, #12
 800205c:	2303      	movs	r3, #3
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002062:	f008 f8a1 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002070:	2301      	movs	r3, #1
 8002072:	e026      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002074:	bf00      	nop
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002078:	f008 fbf9 	bl	800a86e <HAL_I2C_GetState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b20      	cmp	r3, #32
 8002080:	d1f9      	bne.n	8002076 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f005 fd9e 	bl	8007bc4 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002088:	2313      	movs	r3, #19
 800208a:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800208c:	2308      	movs	r3, #8
 800208e:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002090:	f107 020c 	add.w	r2, r7, #12
 8002094:	2302      	movs	r3, #2
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800209a:	f008 f885 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00a      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020ac:	bf00      	nop
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020b0:	f008 fbdd 	bl	800a86e <HAL_I2C_GetState>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d1f9      	bne.n	80020ae <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f005 fd82 	bl	8007bc4 <HAL_Delay>
	return 0U;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200025d8 	.word	0x200025d8

080020d0 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ff80 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	460a      	mov	r2, r1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	4613      	mov	r3, r2
 80020f0:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	b2da      	uxtb	r2, r3
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	4313      	orrs	r3, r2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002112:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5f 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 8002134:	e00f      	b.n	8002156 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff4b 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	e006      	b.n	800215e <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	3b01      	subs	r3, #1
 8002154:	70fb      	strb	r3, [r7, #3]
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ec      	bne.n	8002136 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0U;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800216e:	2300      	movs	r3, #0
 8002170:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002172:	23ff      	movs	r3, #255	; 0xff
 8002174:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002176:	23f0      	movs	r3, #240	; 0xf0
 8002178:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800217a:	463a      	mov	r2, r7
 800217c:	2303      	movs	r3, #3
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4854      	ldr	r0, [pc, #336]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002182:	f008 f811 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 8002186:	4603      	mov	r3, r0
 8002188:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1U;
 8002190:	2301      	movs	r3, #1
 8002192:	e09a      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002194:	bf00      	nop
 8002196:	484f      	ldr	r0, [pc, #316]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002198:	f008 fb69 	bl	800a86e <HAL_I2C_GetState>
 800219c:	4603      	mov	r3, r0
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d1f9      	bne.n	8002196 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 80021a2:	230c      	movs	r3, #12
 80021a4:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 80021a6:	23ff      	movs	r3, #255	; 0xff
 80021a8:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 80021aa:	23f0      	movs	r3, #240	; 0xf0
 80021ac:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021ae:	463a      	mov	r2, r7
 80021b0:	2303      	movs	r3, #3
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	4847      	ldr	r0, [pc, #284]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021b6:	f007 fff7 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 80021ba:	4603      	mov	r3, r0
 80021bc:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e080      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021c8:	bf00      	nop
 80021ca:	4842      	ldr	r0, [pc, #264]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021cc:	f008 fb4f 	bl	800a86e <HAL_I2C_GetState>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d1f9      	bne.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 80021d6:	2312      	movs	r3, #18
 80021d8:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 80021da:	2300      	movs	r3, #0
 80021dc:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80021de:	2308      	movs	r3, #8
 80021e0:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021e2:	463a      	mov	r2, r7
 80021e4:	2303      	movs	r3, #3
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	483a      	ldr	r0, [pc, #232]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021ea:	f007 ffdd 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 80021ee:	4603      	mov	r3, r0
 80021f0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e066      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021fc:	bf00      	nop
 80021fe:	4835      	ldr	r0, [pc, #212]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002200:	f008 fb35 	bl	800a86e <HAL_I2C_GetState>
 8002204:	4603      	mov	r3, r0
 8002206:	2b20      	cmp	r3, #32
 8002208:	d1f9      	bne.n	80021fe <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 800220a:	230a      	movs	r3, #10
 800220c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 800220e:	2300      	movs	r3, #0
 8002210:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002212:	463a      	mov	r2, r7
 8002214:	2302      	movs	r3, #2
 8002216:	2140      	movs	r1, #64	; 0x40
 8002218:	482e      	ldr	r0, [pc, #184]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800221a:	f007 ffc5 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1U;
 8002228:	2301      	movs	r3, #1
 800222a:	e04e      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800222c:	bf00      	nop
 800222e:	4829      	ldr	r0, [pc, #164]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002230:	f008 fb1d 	bl	800a86e <HAL_I2C_GetState>
 8002234:	4603      	mov	r3, r0
 8002236:	2b20      	cmp	r3, #32
 8002238:	d1f9      	bne.n	800222e <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800223a:	2300      	movs	r3, #0
 800223c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 800223e:	2300      	movs	r3, #0
 8002240:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002242:	463a      	mov	r2, r7
 8002244:	2302      	movs	r3, #2
 8002246:	2140      	movs	r1, #64	; 0x40
 8002248:	4822      	ldr	r0, [pc, #136]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800224a:	f007 ffad 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1U;
 8002258:	2301      	movs	r3, #1
 800225a:	e036      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800225c:	bf00      	nop
 800225e:	481d      	ldr	r0, [pc, #116]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002260:	f008 fb05 	bl	800a86e <HAL_I2C_GetState>
 8002264:	4603      	mov	r3, r0
 8002266:	2b20      	cmp	r3, #32
 8002268:	d1f9      	bne.n	800225e <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800226a:	2304      	movs	r3, #4
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	e00b      	b.n	8002288 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002270:	2100      	movs	r1, #0
 8002272:	2038      	movs	r0, #56	; 0x38
 8002274:	f7ff feb2 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1U;
 800227e:	2301      	movs	r3, #1
 8002280:	e023      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	3b01      	subs	r3, #1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 800228e:	2100      	movs	r1, #0
 8002290:	2008      	movs	r0, #8
 8002292:	f7ff fea3 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1U;
 800229c:	2301      	movs	r3, #1
 800229e:	e014      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 80022a0:	f7ff ff16 	bl	80020d0 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 80022a4:	2100      	movs	r1, #0
 80022a6:	2006      	movs	r0, #6
 80022a8:	f7ff fe98 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e009      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 80022b6:	2100      	movs	r1, #0
 80022b8:	200c      	movs	r0, #12
 80022ba:	f7ff fe8f 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	return 0U;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200025d8 	.word	0x200025d8

080022d8 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 80022dc:	f7ff ff44 	bl	8002168 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U,  1U);
 80022e0:	2101      	movs	r1, #1
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff fefd 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L0_P1_str, sizeof(I2c_Lcd_Welcome_L0_P1_str) - 1);
 80022e8:	210d      	movs	r1, #13
 80022ea:	480a      	ldr	r0, [pc, #40]	; (8002314 <i2cMCP23017_Lcd16x2_Welcome+0x3c>)
 80022ec:	f7ff ff1c 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U,  1U);
 80022f0:	2101      	movs	r1, #1
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fef5 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P1_str, sizeof(I2c_Lcd_Welcome_L1_P1_str) - 1);
 80022f8:	2106      	movs	r1, #6
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <i2cMCP23017_Lcd16x2_Welcome+0x40>)
 80022fc:	f7ff ff14 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	i2cMCP23017_Lcd16x2_SetAddr(1U, 10U);
 8002300:	210a      	movs	r1, #10
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff feed 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P2_str, sizeof(I2c_Lcd_Welcome_L1_P2_str) - 1);
 8002308:	2105      	movs	r1, #5
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <i2cMCP23017_Lcd16x2_Welcome+0x44>)
 800230c:	f7ff ff0c 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0801436c 	.word	0x0801436c
 8002318:	0801437c 	.word	0x0801437c
 800231c:	08014384 	.word	0x08014384

08002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af02      	add	r7, sp, #8
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 800232e:	f107 041c 	add.w	r4, r7, #28
 8002332:	461d      	mov	r5, r3
 8002334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 800233e:	f107 0408 	add.w	r4, r7, #8
 8002342:	461d      	mov	r5, r3
 8002344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 800234c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d013      	beq.n	8002382 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002360:	d302      	bcc.n	8002368 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 8002362:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002366:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 8002368:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800236c:	f107 0008 	add.w	r0, r7, #8
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	23df      	movs	r3, #223	; 0xdf
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 800237c:	2111      	movs	r1, #17
 800237e:	f00d fe45 	bl	801000c <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff feac 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	2110      	movs	r1, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fec9 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002396:	2100      	movs	r1, #0
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff fea2 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	2110      	movs	r1, #16
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff febf 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023aa:	bf00      	nop
 80023ac:	3730      	adds	r7, #48	; 0x30
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	080135d0 	.word	0x080135d0
 80023b8:	080135e4 	.word	0x080135e4
 80023bc:	080135b8 	.word	0x080135b8

080023c0 <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b090      	sub	sp, #64	; 0x40
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d4:	d302      	bcc.n	80023dc <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80023d6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80023da:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 80023dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80023e4:	22df      	movs	r2, #223	; 0xdf
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 80023ea:	2111      	movs	r1, #17
 80023ec:	f00d fe0e 	bl	801000c <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 80023f0:	f107 0010 	add.w	r0, r7, #16
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 80023fc:	2111      	movs	r1, #17
 80023fe:	f00d fe05 	bl	801000c <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002402:	2100      	movs	r1, #0
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fe6c 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	2110      	movs	r1, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe89 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002416:	2100      	movs	r1, #0
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff fe62 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	2110      	movs	r1, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fe7f 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 800242a:	bf00      	nop
 800242c:	3738      	adds	r7, #56	; 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	080135f8 	.word	0x080135f8
 8002438:	0801360c 	.word	0x0801360c

0800243c <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 8002446:	2300      	movs	r3, #0
 8002448:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 800244e:	f107 020c 	add.w	r2, r7, #12
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2144      	movs	r1, #68	; 0x44
 800245a:	481f      	ldr	r0, [pc, #124]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800245c:	f008 f81c 	bl	800a498 <HAL_I2C_Master_Seq_Transmit_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	e02f      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800246e:	bf00      	nop
 8002470:	4819      	ldr	r0, [pc, #100]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002472:	f008 f9fc 	bl	800a86e <HAL_I2C_GetState>
 8002476:	4603      	mov	r3, r0
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1f9      	bne.n	8002470 <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 800247c:	4816      	ldr	r0, [pc, #88]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800247e:	f008 fa04 	bl	800a88a <HAL_I2C_GetError>
 8002482:	4603      	mov	r3, r0
 8002484:	2b04      	cmp	r3, #4
 8002486:	d101      	bne.n	800248c <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	e020      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 800248c:	f107 0208 	add.w	r2, r7, #8
 8002490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2144      	movs	r1, #68	; 0x44
 800249a:	480f      	ldr	r0, [pc, #60]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800249c:	f008 f880 	bl	800a5a0 <HAL_I2C_Master_Seq_Receive_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e00f      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024ae:	bf00      	nop
 80024b0:	4809      	ldr	r0, [pc, #36]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024b2:	f008 f9dc 	bl	800a86e <HAL_I2C_GetState>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d1f9      	bne.n	80024b0 <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024be:	f008 f9e4 	bl	800a88a <HAL_I2C_GetError>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d101      	bne.n	80024cc <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 80024cc:	7a3b      	ldrb	r3, [r7, #8]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200025d8 	.word	0x200025d8

080024dc <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 80024e4:	f005 fb62 	bl	8007bac <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f7ff ffa3 	bl	800243c <i2cSmartLCD_Gfx240x128_Read>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	e00c      	b.n	8002522 <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 8002508:	f005 fb50 	bl	8007bac <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	429a      	cmp	r2, r3
 8002514:	d903      	bls.n	800251e <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 8002516:	2001      	movs	r0, #1
 8002518:	f005 fb54 	bl	8007bc4 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 800251c:	e7e8      	b.n	80024f0 <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 800251e:	bf00      	nop
	} while (1);
	return 1U;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253a:	f7ff ffcf 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002542:	f107 020c 	add.w	r2, r7, #12
 8002546:	2301      	movs	r3, #1
 8002548:	2144      	movs	r1, #68	; 0x44
 800254a:	480f      	ldr	r0, [pc, #60]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800254c:	f007 fe2c 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1U;
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800255e:	bf00      	nop
 8002560:	4809      	ldr	r0, [pc, #36]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002562:	f008 f984 	bl	800a86e <HAL_I2C_GetState>
 8002566:	4603      	mov	r3, r0
 8002568:	2b20      	cmp	r3, #32
 800256a:	d1f9      	bne.n	8002560 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800256e:	f008 f98c 	bl	800a88a <HAL_I2C_GetError>
 8002572:	4603      	mov	r3, r0
 8002574:	2b10      	cmp	r3, #16
 8002576:	d101      	bne.n	800257c <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1U;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	return 0U;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200025d8 	.word	0x200025d8

0800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f7ff ff9c 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	2302      	movs	r3, #2
 80025b2:	2144      	movs	r1, #68	; 0x44
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025b6:	f007 fdf7 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1U;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00f      	b.n	80025e8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025c8:	bf00      	nop
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025cc:	f008 f94f 	bl	800a86e <HAL_I2C_GetState>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d1f9      	bne.n	80025ca <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025d8:	f008 f957 	bl	800a88a <HAL_I2C_GetError>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d101      	bne.n	80025e6 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1U;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	return 0U;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200025d8 	.word	0x200025d8

080025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	460b      	mov	r3, r1
 8002600:	71bb      	strb	r3, [r7, #6]
 8002602:	4613      	mov	r3, r2
 8002604:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260a:	f7ff ff67 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	2303      	movs	r3, #3
 8002620:	2144      	movs	r1, #68	; 0x44
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002624:	f007 fdc0 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1U;
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002636:	bf00      	nop
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 800263a:	f008 f918 	bl	800a86e <HAL_I2C_GetState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b20      	cmp	r3, #32
 8002642:	d1f9      	bne.n	8002638 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002644:	4806      	ldr	r0, [pc, #24]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002646:	f008 f920 	bl	800a88a <HAL_I2C_GetError>
 800264a:	4603      	mov	r3, r0
 800264c:	2b10      	cmp	r3, #16
 800264e:	d101      	bne.n	8002654 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	return 0U;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200025d8 	.word	0x200025d8

08002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	4603      	mov	r3, r0
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	460b      	mov	r3, r1
 800267c:	717b      	strb	r3, [r7, #5]
 800267e:	4613      	mov	r3, r2
 8002680:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002686:	f7ff ff29 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800269a:	f107 0208 	add.w	r2, r7, #8
 800269e:	2304      	movs	r3, #4
 80026a0:	2144      	movs	r1, #68	; 0x44
 80026a2:	480f      	ldr	r0, [pc, #60]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026a4:	f007 fd80 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80026b6:	bf00      	nop
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026ba:	f008 f8d8 	bl	800a86e <HAL_I2C_GetState>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d1f9      	bne.n	80026b8 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026c6:	f008 f8e0 	bl	800a88a <HAL_I2C_GetError>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d101      	bne.n	80026d4 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	return 0U;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	200025d8 	.word	0x200025d8

080026e4 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80026e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ec:	f7ff fef6 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff fea3 	bl	800243c <i2cSmartLCD_Gfx240x128_Read>
 80026f6:	4603      	mov	r3, r0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}

080026fc <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b0c5      	sub	sp, #276	; 0x114
 8002700:	af00      	add	r7, sp, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	463a      	mov	r2, r7
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	4622      	mov	r2, r4
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	1dbb      	adds	r3, r7, #6
 8002714:	4602      	mov	r2, r0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	1d7b      	adds	r3, r7, #5
 800271a:	460a      	mov	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	3304      	adds	r3, #4
 8002728:	22fc      	movs	r2, #252	; 0xfc
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f00c fffb 	bl	800f728 <memset>

	while (len) {
 8002732:	e07c      	b.n	800282e <i2cSmartLCD_Gfx240x128_WriteText+0x132>
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 8002734:	1d7b      	adds	r3, r7, #5
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d903      	bls.n	8002744 <i2cSmartLCD_Gfx240x128_WriteText+0x48>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 800273c:	2307      	movs	r3, #7
 800273e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002742:	e003      	b.n	800274c <i2cSmartLCD_Gfx240x128_WriteText+0x50>
		} else {
			remaining = len;
 8002744:	1d7b      	adds	r3, r7, #5
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 800274c:	1d7b      	adds	r3, r7, #5
 800274e:	1d7a      	adds	r2, r7, #5
 8002750:	7811      	ldrb	r1, [r2, #0]
 8002752:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002756:	1a8a      	subs	r2, r1, r2
 8002758:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 800275a:	1dbb      	adds	r3, r7, #6
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	2020      	movs	r0, #32
 8002766:	f7ff ff45 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <i2cSmartLCD_Gfx240x128_WriteText+0x78>
			return 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	e062      	b.n	800283a <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	2230      	movs	r2, #48	; 0x30
 800277a:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002784:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 8002786:	2300      	movs	r3, #0
 8002788:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800278c:	e010      	b.n	80027b0 <i2cSmartLCD_Gfx240x128_WriteText+0xb4>
			i2cTxBuf[2 + idx] = *(str++);
 800278e:	463b      	mov	r3, r7
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	463a      	mov	r2, r7
 8002794:	1c59      	adds	r1, r3, #1
 8002796:	6011      	str	r1, [r2, #0]
 8002798:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800279c:	3202      	adds	r2, #2
 800279e:	7819      	ldrb	r1, [r3, #0]
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 80027a6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80027aa:	3301      	adds	r3, #1
 80027ac:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80027b0:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80027b4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3e8      	bcc.n	800278e <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027c0:	f7ff fe8c 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 80027c4:	2002      	movs	r0, #2
 80027c6:	f005 f9fd 	bl	8007bc4 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 80027ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3302      	adds	r3, #2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f107 020c 	add.w	r2, r7, #12
 80027d8:	2144      	movs	r1, #68	; 0x44
 80027da:	481a      	ldr	r0, [pc, #104]	; (8002844 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80027dc:	f007 fce4 	bl	800a1a8 <HAL_I2C_Master_Transmit_IT>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 80027e6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			return 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e023      	b.n	800283a <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80027f2:	bf00      	nop
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 80027f6:	f008 f83a 	bl	800a86e <HAL_I2C_GetState>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d1f9      	bne.n	80027f4 <i2cSmartLCD_Gfx240x128_WriteText+0xf8>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002800:	4810      	ldr	r0, [pc, #64]	; (8002844 <i2cSmartLCD_Gfx240x128_WriteText+0x148>)
 8002802:	f008 f842 	bl	800a88a <HAL_I2C_GetError>
 8002806:	4603      	mov	r3, r0
 8002808:	2b10      	cmp	r3, #16
 800280a:	d101      	bne.n	8002810 <i2cSmartLCD_Gfx240x128_WriteText+0x114>
			return 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	e014      	b.n	800283a <i2cSmartLCD_Gfx240x128_WriteText+0x13e>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2);
 8002810:	2002      	movs	r0, #2
 8002812:	f005 f9d7 	bl	8007bc4 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 8002816:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800281a:	461a      	mov	r2, r3
 800281c:	0052      	lsls	r2, r2, #1
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	b2d9      	uxtb	r1, r3
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	1dfa      	adds	r2, r7, #7
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	440a      	add	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
	while (len) {
 800282e:	1d7b      	adds	r3, r7, #5
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af7e 	bne.w	8002734 <i2cSmartLCD_Gfx240x128_WriteText+0x38>
	}
	return 0U;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002840:	46bd      	mov	sp, r7
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	200025d8 	.word	0x200025d8

08002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	460a      	mov	r2, r1
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	4613      	mov	r3, r2
 8002856:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285c:	f7ff fe3e 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 8002860:	79ba      	ldrb	r2, [r7, #6]
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	4619      	mov	r1, r3
 8002866:	2020      	movs	r0, #32
 8002868:	f7ff fec4 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
		return 1U;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x30>
	}
	return 0U;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	460b      	mov	r3, r1
 800288c:	71bb      	strb	r3, [r7, #6]
 800288e:	4613      	mov	r3, r2
 8002890:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002896:	f7ff fe21 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 800289a:	797b      	ldrb	r3, [r7, #5]
 800289c:	79ba      	ldrb	r2, [r7, #6]
 800289e:	79f9      	ldrb	r1, [r7, #7]
 80028a0:	2032      	movs	r0, #50	; 0x32
 80028a2:	f7ff fedf 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
		return 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x32>
	}
	return 0U;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <i2cSmartLCD_Gfx240x128_Draw_Point>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Point(uint8_t pos_x, uint8_t pos_y, uint8_t fillType)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
 80028c4:	460b      	mov	r3, r1
 80028c6:	71bb      	strb	r3, [r7, #6]
 80028c8:	4613      	mov	r3, r2
 80028ca:	717b      	strb	r3, [r7, #5]
	uint8_t ret;

	/* There is no explicit draw pixel in Smart-LCD */
	ret  = i2cSmartLCD_Gfx240x128_Draw_SetStartPos(pos_x, pos_y);
 80028cc:	79ba      	ldrb	r2, [r7, #6]
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffb8 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
	ret |= i2cSmartLCD_Gfx240x128_Draw_Line_to(pos_x, pos_y, fillType);
 80028dc:	797a      	ldrb	r2, [r7, #5]
 80028de:	79b9      	ldrb	r1, [r7, #6]
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ffcc 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	73fb      	strb	r3, [r7, #15]
	return ret;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4604      	mov	r4, r0
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4623      	mov	r3, r4
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	4603      	mov	r3, r0
 8002910:	71bb      	strb	r3, [r7, #6]
 8002912:	460b      	mov	r3, r1
 8002914:	717b      	strb	r3, [r7, #5]
 8002916:	4613      	mov	r3, r2
 8002918:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800291a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291e:	f7ff fddd 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002922:	79ba      	ldrb	r2, [r7, #6]
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4619      	mov	r1, r3
 8002928:	2020      	movs	r0, #32
 800292a:	f7ff fe63 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
		return 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	e00f      	b.n	8002958 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293c:	f7ff fdce 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 8002940:	7e3b      	ldrb	r3, [r7, #24]
 8002942:	793a      	ldrb	r2, [r7, #4]
 8002944:	7979      	ldrb	r1, [r7, #5]
 8002946:	2036      	movs	r0, #54	; 0x36
 8002948:	f7ff fe8c 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5a>
		return 1U;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x5c>
	}
	return 0U;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}

08002960 <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 8002966:	f7ff febd 	bl	80026e4 <i2cSmartLCD_Gfx240x128_GetVer>
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	2b10      	cmp	r3, #16
 8002972:	d925      	bls.n	80029c0 <i2cSmartLCD_Gfx240x128_Init+0x60>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002978:	f7ff fdb0 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 800297c:	2110      	movs	r1, #16
 800297e:	2002      	movs	r0, #2
 8002980:	f7ff fe04 	bl	800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002988:	f7ff fda8 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 800298c:	2011      	movs	r0, #17
 800298e:	f7ff fdcd 	bl	800252c <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2U;
 8002998:	2302      	movs	r3, #2
 800299a:	e012      	b.n	80029c2 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f7ff fd9c 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 80029a4:	2101      	movs	r1, #1
 80029a6:	2014      	movs	r0, #20
 80029a8:	f7ff fdf0 	bl	800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1U;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e005      	b.n	80029c2 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		HAL_Delay(10);
 80029b6:	200a      	movs	r0, #10
 80029b8:	f005 f904 	bl	8007bc4 <HAL_Delay>
		return 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <i2cSmartLCD_Gfx240x128_Init+0x62>
	}
	return 1U;
 80029c0:	2301      	movs	r3, #1
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(uint32_t bf)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	/* Display init */
	if (bf & 0x80000000UL) {
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da06      	bge.n	80029e8 <i2cSmartLCD_Gfx240x128_Template+0x1c>
		if (i2cSmartLCD_Gfx240x128_Init()) {
 80029da:	f7ff ffc1 	bl	8002960 <i2cSmartLCD_Gfx240x128_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <i2cSmartLCD_Gfx240x128_Template+0x1c>
			return 1U;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e104      	b.n	8002bf2 <i2cSmartLCD_Gfx240x128_Template+0x226>
		}
	}

	/* Header Line */
	if (bf & 0x00000001UL) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d014      	beq.n	8002a1c <i2cSmartLCD_Gfx240x128_Template+0x50>
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 80029f2:	2208      	movs	r2, #8
 80029f4:	2100      	movs	r1, #0
 80029f6:	2020      	movs	r0, #32
 80029f8:	f7ff fdfc 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <i2cSmartLCD_Gfx240x128_Template+0x3a>
				0U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1)) {
			return 1U;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0f5      	b.n	8002bf2 <i2cSmartLCD_Gfx240x128_Template+0x226>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE,
 8002a06:	2301      	movs	r3, #1
 8002a08:	2208      	movs	r2, #8
 8002a0a:	21ef      	movs	r1, #239	; 0xef
 8002a0c:	2032      	movs	r0, #50	; 0x32
 8002a0e:	f7ff fe29 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <i2cSmartLCD_Gfx240x128_Template+0x50>
				239U,
				0 + (LCD1_SYSFONT_HEIGHT *  1) + 1,
				LCD1_PIXEL_SET)) {
			return 1U;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0ea      	b.n	8002bf2 <i2cSmartLCD_Gfx240x128_Template+0x226>
		}
	}

	/* Header Text */
	if (bf & 0x00000002UL) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d011      	beq.n	8002a4a <i2cSmartLCD_Gfx240x128_Template+0x7e>
		i2cSmartLCD_Gfx240x128_WriteText(
 8002a26:	4b75      	ldr	r3, [pc, #468]	; (8002bfc <i2cSmartLCD_Gfx240x128_Template+0x230>)
 8002a28:	220d      	movs	r2, #13
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	201e      	movs	r0, #30
 8002a2e:	f7ff fe65 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd_Welcome_L0_P1_str), I2c_Lcd_Welcome_L0_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <i2cSmartLCD_Gfx240x128_Template+0x234>)
 8002a34:	2206      	movs	r2, #6
 8002a36:	2100      	movs	r1, #0
 8002a38:	2072      	movs	r0, #114	; 0x72
 8002a3a:	f7ff fe5f 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  * 19),
				0 + (LCD1_SYSFONT_HEIGHT *  0),
				strlen((char*)I2c_Lcd_Welcome_L1_P1_str), I2c_Lcd_Welcome_L1_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <i2cSmartLCD_Gfx240x128_Template+0x238>)
 8002a40:	2205      	movs	r2, #5
 8002a42:	2100      	movs	r1, #0
 8002a44:	20a2      	movs	r0, #162	; 0xa2
 8002a46:	f7ff fe59 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd_Welcome_L1_P2_str), I2c_Lcd_Welcome_L1_P2_str);
	}


	/* LCKD print */
	if (bf & 0x00000010UL) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d019      	beq.n	8002a88 <i2cSmartLCD_Gfx240x128_Template+0xbc>
		uint8_t line_str[] = "LCKD";
 8002a54:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <i2cSmartLCD_Gfx240x128_Template+0x23c>)
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a5e:	6018      	str	r0, [r3, #0]
 8002a60:	3304      	adds	r3, #4
 8002a62:	7019      	strb	r1, [r3, #0]
		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  0),
				0 + ((LCD1_SYSFONT_HEIGHT + 0) *  0),
				strlen((char*)line_str), line_str)) {
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fbbb 	bl	80001e4 <strlen>
 8002a6e:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff fe3f 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <i2cSmartLCD_Gfx240x128_Template+0xbc>
			return 1U;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b4      	b.n	8002bf2 <i2cSmartLCD_Gfx240x128_Template+0x226>
		}
	}


	/* Timing scale below the header line */
	if (bf & 0x00000100UL) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80ae 	beq.w	8002bf0 <i2cSmartLCD_Gfx240x128_Template+0x224>
		uint8_t pos_x 		= DacGfxPos_x_min;
 8002a94:	2309      	movs	r3, #9
 8002a96:	75fb      	strb	r3, [r7, #23]
		uint8_t mrk10Min	= 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75bb      	strb	r3, [r7, #22]
		uint8_t mrk5Dac		= 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	757b      	strb	r3, [r7, #21]

		/* Draw plot line x-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002aa0:	2309      	movs	r3, #9
 8002aa2:	222b      	movs	r2, #43	; 0x2b
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fece 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002aac:	23e6      	movs	r3, #230	; 0xe6
 8002aae:	212b      	movs	r1, #43	; 0x2b
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fee4 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_bot,
					LCD1_PIXEL_SET);
		}

		/* Draw x-axis scale lines */
		while (pos_x <= DacGfxPos_x_max) {
 8002ab8:	e02f      	b.n	8002b1a <i2cSmartLCD_Gfx240x128_Template+0x14e>
			uint8_t drawHrExtra = (!(mrk10Min % 6)) ?  2U : 0U;
 8002aba:	7dba      	ldrb	r2, [r7, #22]
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <i2cSmartLCD_Gfx240x128_Template+0x240>)
 8002abe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac2:	0899      	lsrs	r1, r3, #2
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <i2cSmartLCD_Gfx240x128_Template+0x10c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e000      	b.n	8002ada <i2cSmartLCD_Gfx240x128_Template+0x10e>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	74fb      	strb	r3, [r7, #19]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					pos_x,
					DacGfxPos_y_bot + (1 + drawHrExtra));
 8002adc:	222b      	movs	r2, #43	; 0x2b
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff feab 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002af2:	232b      	movs	r3, #43	; 0x2b
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2d9      	uxtb	r1, r3
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff febf 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					pos_x,
					DacGfxPos_y_bot + 1,
					LCD1_PIXEL_SET);

			/* New scale mark at every 10 minutes */
			++mrk10Min;
 8002b02:	7dbb      	ldrb	r3, [r7, #22]
 8002b04:	3301      	adds	r3, #1
 8002b06:	75bb      	strb	r3, [r7, #22]
			pos_x = DacGfxPos_x_min + (10U * mrk10Min);
 8002b08:	7dbb      	ldrb	r3, [r7, #22]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2209      	movs	r2, #9
 8002b16:	4413      	add	r3, r2
 8002b18:	75fb      	strb	r3, [r7, #23]
		while (pos_x <= DacGfxPos_x_max) {
 8002b1a:	22e6      	movs	r2, #230	; 0xe6
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d9cb      	bls.n	8002aba <i2cSmartLCD_Gfx240x128_Template+0xee>
		}

		/* Draw plot line y-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002b22:	2309      	movs	r3, #9
 8002b24:	222b      	movs	r2, #43	; 0x2b
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe8d 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002b2e:	2309      	movs	r3, #9
 8002b30:	210d      	movs	r1, #13
 8002b32:	2201      	movs	r2, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fea3 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_top,
					LCD1_PIXEL_SET);
		}

		/* Draw y-axis scale lines */
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002b3a:	e02a      	b.n	8002b92 <i2cSmartLCD_Gfx240x128_Template+0x1c6>
			uint8_t drawExtra = (mrk5Dac == 3U) ?  2U : 0U;
 8002b3c:	7d7b      	ldrb	r3, [r7, #21]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d101      	bne.n	8002b46 <i2cSmartLCD_Gfx240x128_Template+0x17a>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e000      	b.n	8002b48 <i2cSmartLCD_Gfx240x128_Template+0x17c>
 8002b46:	2300      	movs	r3, #0
 8002b48:	753b      	strb	r3, [r7, #20]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					DacGfxPos_x_min - (1 + drawExtra),
 8002b4a:	2209      	movs	r2, #9
 8002b4c:	7d3b      	ldrb	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	212b      	movs	r1, #43	; 0x2b
					DacGfxPos_y_bot - (mrk5Dac * 5U));
 8002b58:	7d7b      	ldrb	r3, [r7, #21]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	0080      	lsls	r0, r0, #2
 8002b5e:	4403      	add	r3, r0
 8002b60:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002b62:	1acb      	subs	r3, r1, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7ff fe6d 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002b6e:	2309      	movs	r3, #9
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	222b      	movs	r2, #43	; 0x2b
					DacGfxPos_x_min - 1,
					DacGfxPos_y_bot - (mrk5Dac * 5U),
 8002b76:	7d7b      	ldrb	r3, [r7, #21]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	0089      	lsls	r1, r1, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2201      	movs	r2, #1
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7ff fe7a 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					LCD1_PIXEL_SET);

			++mrk5Dac;
 8002b8c:	7d7b      	ldrb	r3, [r7, #21]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	757b      	strb	r3, [r7, #21]
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002b92:	232b      	movs	r3, #43	; 0x2b
 8002b94:	4619      	mov	r1, r3
 8002b96:	7d7a      	ldrb	r2, [r7, #21]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	220d      	movs	r2, #13
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d2ca      	bcs.n	8002b3c <i2cSmartLCD_Gfx240x128_Template+0x170>
		}

		/* Write 'DAC' at y-axis */
		{
			uint8_t buf[] = "DAC";
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <i2cSmartLCD_Gfx240x128_Template+0x244>)
 8002ba8:	60bb      	str	r3, [r7, #8]

			i2cSmartLCD_Gfx240x128_WriteText(
 8002baa:	2309      	movs	r3, #9
 8002bac:	3b09      	subs	r3, #9
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	232b      	movs	r3, #43	; 0x2b
 8002bb2:	3b1c      	subs	r3, #28
 8002bb4:	b2d9      	uxtb	r1, r3
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f7ff fd9e 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3),
					DacGfxPos_y_bot - (3 * (LCD1_SYSFONT_HEIGHT + 2) + 1),
					1U, &(buf[0]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002bc0:	2309      	movs	r3, #9
 8002bc2:	3b09      	subs	r3, #9
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	232b      	movs	r3, #43	; 0x2b
 8002bc8:	3b13      	subs	r3, #19
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f7ff fd92 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3),
					DacGfxPos_y_bot - (2 * (LCD1_SYSFONT_HEIGHT + 2) + 1),
					1U, &(buf[1]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002bd8:	2309      	movs	r3, #9
 8002bda:	3b09      	subs	r3, #9
 8002bdc:	b2d8      	uxtb	r0, r3
 8002bde:	232b      	movs	r3, #43	; 0x2b
 8002be0:	3b0a      	subs	r3, #10
 8002be2:	b2d9      	uxtb	r1, r3
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	3302      	adds	r3, #2
 8002bea:	2201      	movs	r2, #1
 8002bec:	f7ff fd86 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3),
					DacGfxPos_y_bot - (1 * (LCD1_SYSFONT_HEIGHT + 2) + 1),
					1U, &(buf[2]));
		}
	}
	return 0U;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0801436c 	.word	0x0801436c
 8002c00:	0801437c 	.word	0x0801437c
 8002c04:	08014384 	.word	0x08014384
 8002c08:	08013620 	.word	0x08013620
 8002c0c:	aaaaaaab 	.word	0xaaaaaaab
 8002c10:	00434144 	.word	0x00434144

08002c14 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template(0x80000003UL)) {
 8002c18:	4814      	ldr	r0, [pc, #80]	; (8002c6c <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002c1a:	f7ff fed7 	bl	80029cc <i2cSmartLCD_Gfx240x128_Template>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <i2cSmartLCD_Gfx240x128_Welcome+0x14>
		return 1U;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e01e      	b.n	8002c66 <i2cSmartLCD_Gfx240x128_Welcome+0x52>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 8002c2a:	2209      	movs	r2, #9
 8002c2c:	2114      	movs	r1, #20
 8002c2e:	2006      	movs	r0, #6
 8002c30:	f7ff fd64 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  2),
				strlen((char*)I2c_Lcd_Welcome_L2_str), I2c_Lcd_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 8002c36:	2210      	movs	r2, #16
 8002c38:	211e      	movs	r1, #30
 8002c3a:	2006      	movs	r0, #6
 8002c3c:	f7ff fd5e 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				strlen((char*)I2c_Lcd_Welcome_L3_str), I2c_Lcd_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	2128      	movs	r1, #40	; 0x28
 8002c46:	2006      	movs	r0, #6
 8002c48:	f7ff fd58 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  4),
				strlen((char*)I2c_Lcd_Welcome_L4_str), I2c_Lcd_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <i2cSmartLCD_Gfx240x128_Welcome+0x68>)
 8002c4e:	2218      	movs	r2, #24
 8002c50:	2132      	movs	r1, #50	; 0x32
 8002c52:	2006      	movs	r0, #6
 8002c54:	f7ff fd52 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  5),
				strlen((char*)I2c_Lcd_Welcome_L5_str), I2c_Lcd_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <i2cSmartLCD_Gfx240x128_Welcome+0x6c>)
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	213c      	movs	r1, #60	; 0x3c
 8002c5e:	2006      	movs	r0, #6
 8002c60:	f7ff fd4c 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + ((LCD1_SYSFONT_WIDTH  + 0) *  1),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  6),
				strlen((char*)I2c_Lcd_Welcome_L6_str), I2c_Lcd_Welcome_L6_str);
	}
	return 0U;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	80000003 	.word	0x80000003
 8002c70:	0801438c 	.word	0x0801438c
 8002c74:	08014398 	.word	0x08014398
 8002c78:	080143ac 	.word	0x080143ac
 8002c7c:	080143d4 	.word	0x080143d4
 8002c80:	080143f0 	.word	0x080143f0

08002c84 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	b092      	sub	sp, #72	; 0x48
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y,
 8002c90:	224c      	movs	r2, #76	; 0x4c
 8002c92:	213e      	movs	r1, #62	; 0x3e
 8002c94:	2020      	movs	r0, #32
 8002c96:	f7ff fcad 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x20>
				-4 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				-4 + ((LCD1_SYSFONT_HEIGHT + 3) *  8))) {
			return 1U;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e069      	b.n	8002d78 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT,
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2228      	movs	r2, #40	; 0x28
 8002ca8:	216e      	movs	r1, #110	; 0x6e
 8002caa:	2034      	movs	r0, #52	; 0x34
 8002cac:	f7ff fcda 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x36>
				 8 + ((LCD1_SYSFONT_WIDTH  + 0) * 17),
				10 + ((LCD1_SYSFONT_HEIGHT + 3) *  3),
				LCD1_PIXEL_SET)) {
			return 1U;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e05e      	b.n	8002d78 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}
		HAL_Delay(1);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f004 ff82 	bl	8007bc4 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002cc0:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xfc>)
 8002cc2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
				0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
				strlen((char*)line0_str), line0_str)) {
 8002cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fa85 	bl	80001e4 <strlen>
 8002cda:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce2:	2150      	movs	r1, #80	; 0x50
 8002ce4:	2042      	movs	r0, #66	; 0x42
 8002ce6:	f7ff fd09 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x70>
			return 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e041      	b.n	8002d78 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
		}

		if (temp) {
 8002cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7e);
 8002cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d00:	f107 000c 	add.w	r0, r7, #12
 8002d04:	227e      	movs	r2, #126	; 0x7e
 8002d06:	9200      	str	r2, [sp, #0]
 8002d08:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x100>)
 8002d0a:	211f      	movs	r1, #31
 8002d0c:	f00d f97e 	bl	801000c <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
					strlen((char*)line1_str), line1_str)) {
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fa65 	bl	80001e4 <strlen>
 8002d1a:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	215c      	movs	r1, #92	; 0x5c
 8002d24:	2042      	movs	r0, #66	; 0x42
 8002d26:	f7ff fce9 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xb0>
				return 1U;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e021      	b.n	8002d78 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}

		if (tAcc) {
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01d      	beq.n	8002d76 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf28      	it	cs
 8002d44:	4613      	movcs	r3, r2
 8002d46:	f107 000c 	add.w	r0, r7, #12
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x104>)
 8002d4c:	211f      	movs	r1, #31
 8002d4e:	f00d f95d 	bl	801000c <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					0 + ((LCD1_SYSFONT_WIDTH  + 0) * 11),
					2 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
					strlen((char*)line2_str), line2_str)) {
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fa44 	bl	80001e4 <strlen>
 8002d5c:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2166      	movs	r1, #102	; 0x66
 8002d66:	2042      	movs	r0, #66	; 0x42
 8002d68:	f7ff fcc8 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf2>
				return 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>
			}
		}
	}
	return 0U;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3740      	adds	r7, #64	; 0x40
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d80:	080135d0 	.word	0x080135d0
 8002d84:	08013628 	.word	0x08013628
 8002d88:	0801363c 	.word	0x0801363c

08002d8c <i2cSmartLCD_Gfx240x128_locator_print>:


static uint8_t i2cSmartLCD_Gfx240x128_locator_print(const uint8_t* locatorStr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	uint8_t line_str[16];

	snprintf((char*)line_str, sizeof(line_str) - 1, "%6s", locatorStr);
 8002d94:	f107 0008 	add.w	r0, r7, #8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <i2cSmartLCD_Gfx240x128_locator_print+0x44>)
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	f00d f935 	bl	801000c <sniprintf>

	if (i2cSmartLCD_Gfx240x128_WriteText(
			0 + ((LCD1_SYSFONT_WIDTH  + 0) * 34),
			0 + ((LCD1_SYSFONT_HEIGHT + 0) * 0),
			strlen((char*)line_str), line_str)) {
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fa1c 	bl	80001e4 <strlen>
 8002dac:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	2100      	movs	r1, #0
 8002db6:	20cc      	movs	r0, #204	; 0xcc
 8002db8:	f7ff fca0 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <i2cSmartLCD_Gfx240x128_locator_print+0x3a>
		return 1U;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <i2cSmartLCD_Gfx240x128_locator_print+0x3c>
	}
	return 0U;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08013650 	.word	0x08013650
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo, const uint8_t* locatorStr)
{
 8002dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ddc:	b09e      	sub	sp, #120	; 0x78
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	61f8      	str	r0, [r7, #28]
 8002de2:	617a      	str	r2, [r7, #20]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002dea:	edc7 0a02 	vstr	s1, [r7, #8]
 8002dee:	460b      	mov	r3, r1
 8002df0:	837b      	strh	r3, [r7, #26]
	static uint16_t s_svPosElevAzim_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Each time drop a channel two force a redraw */
	static uint8_t	s_svPosElevRefresh_last					= 	0U;
	s_svId_last[s_svPosElevRefresh_last++] = 0xffU;
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	b2d1      	uxtb	r1, r2
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002dfc:	7011      	strb	r1, [r2, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	5499      	strb	r1, [r3, r2]
	s_svPosElevRefresh_last %= SvPosElevCnt_max;
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <i2cSmartLCD_Gfx240x128_Locked+0xb4>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	08d9      	lsrs	r1, r3, #3
 8002e12:	460b      	mov	r3, r1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a5b      	subs	r3, r3, r1
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002e1e:	701a      	strb	r2, [r3, #0]


	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002e20:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d902      	bls.n	8002e2e <i2cSmartLCD_Gfx240x128_Locked+0x56>
		svPosElevCnt = SvPosElevCnt_max;
 8002e28:	230f      	movs	r3, #15
 8002e2a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002e2e:	f004 febd 	bl	8007bac <HAL_GetTick>
 8002e32:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8002e34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f080 85b7 	bcs.w	80039ac <i2cSmartLCD_Gfx240x128_Locked+0xbd4>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d248      	bcs.n	8002edc <i2cSmartLCD_Gfx240x128_Locked+0x104>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002e4a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002e4e:	461a      	mov	r2, r3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2341      	movs	r3, #65	; 0x41
 8002e74:	213e      	movs	r1, #62	; 0x3e
 8002e76:	f7ff fd41 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002e7a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002e82:	e021      	b.n	8002ec8 <i2cSmartLCD_Gfx240x128_Locked+0xf0>
 8002e84:	20000260 	.word	0x20000260
 8002e88:	20000264 	.word	0x20000264
 8002e8c:	88888889 	.word	0x88888889
 8002e90:	20000273 	.word	0x20000273
			s_svId_last[thisIdx]			= 	0U;
 8002e94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e98:	4ac7      	ldr	r2, [pc, #796]	; (80031b8 <i2cSmartLCD_Gfx240x128_Locked+0x3e0>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[thisIdx]	=	0U;
 8002e9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ea2:	4ac6      	ldr	r2, [pc, #792]	; (80031bc <i2cSmartLCD_Gfx240x128_Locked+0x3e4>)
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	54d1      	strb	r1, [r2, r3]
			s_svPosElevElev_last[thisIdx]	= 	0U;
 8002ea8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002eac:	4ac4      	ldr	r2, [pc, #784]	; (80031c0 <i2cSmartLCD_Gfx240x128_Locked+0x3e8>)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[thisIdx]	= 	0U;
 8002eb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002eb6:	4ac3      	ldr	r2, [pc, #780]	; (80031c4 <i2cSmartLCD_Gfx240x128_Locked+0x3ec>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002ebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002ec8:	4bbf      	ldr	r3, [pc, #764]	; (80031c8 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3df      	bcc.n	8002e94 <i2cSmartLCD_Gfx240x128_Locked+0xbc>
		}

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 8002ed4:	4abc      	ldr	r2, [pc, #752]	; (80031c8 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 8002ed6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002eda:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002edc:	f004 fe66 	bl	8007bac <HAL_GetTick>
 8002ee0:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8002ee2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	f080 8562 	bcs.w	80039b0 <i2cSmartLCD_Gfx240x128_Locked+0xbd8>
		return;
	}

	/* Print Locator */
	if (strcmp((char*)s_locatorStrLast, (char*)locatorStr)) {
 8002eec:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002ef0:	48b6      	ldr	r0, [pc, #728]	; (80031cc <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 8002ef2:	f7fd f96d 	bl	80001d0 <strcmp>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <i2cSmartLCD_Gfx240x128_Locked+0x138>
		i2cSmartLCD_Gfx240x128_locator_print(locatorStr);
 8002efc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002f00:	f7ff ff44 	bl	8002d8c <i2cSmartLCD_Gfx240x128_locator_print>

		/* Write back changed string */
		strncpy((char*)s_locatorStrLast, (char*)locatorStr, sizeof(s_locatorStrLast) - 1);
 8002f04:	220f      	movs	r2, #15
 8002f06:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002f0a:	48b0      	ldr	r0, [pc, #704]	; (80031cc <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 8002f0c:	f00d f8b2 	bl	8010074 <strncpy>
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002f10:	f004 fe4c 	bl	8007bac <HAL_GetTick>
 8002f14:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8002f16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f080 854a 	bcs.w	80039b4 <i2cSmartLCD_Gfx240x128_Locked+0xbdc>
		return;
	}

	/* Plot DAC graph element */
	if (now >= s_dacPlotNxtTim)
 8002f20:	4bab      	ldr	r3, [pc, #684]	; (80031d0 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f26:	429a      	cmp	r2, r3
 8002f28:	f0c0 8095 	bcc.w	8003056 <i2cSmartLCD_Gfx240x128_Locked+0x27e>
	{
		/* Calculate for next minute */
		s_dacPlotNxtTim = (now + 60000UL) - ((now + 60000UL) % 60000UL);
 8002f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f2e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	4aa7      	ldr	r2, [pc, #668]	; (80031d4 <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 8002f36:	fba2 1203 	umull	r1, r2, r2, r3
 8002f3a:	0b92      	lsrs	r2, r2, #14
 8002f3c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002f40:	fb01 f202 	mul.w	r2, r1, r2
 8002f44:	1a9a      	subs	r2, r3, r2
 8002f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8002f4e:	3360      	adds	r3, #96	; 0x60
 8002f50:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 8002f52:	6013      	str	r3, [r2, #0]

		/* Calculate x position*/
		s_dacPlotPosOfs++;
 8002f54:	4ba0      	ldr	r3, [pc, #640]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	4b9e      	ldr	r3, [pc, #632]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8002f5e:	701a      	strb	r2, [r3, #0]
		if (s_dacPlotPosOfs > (DacGfxPos_x_max - DacGfxPos_x_min)) {
 8002f60:	4b9d      	ldr	r3, [pc, #628]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	23e6      	movs	r3, #230	; 0xe6
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2309      	movs	r3, #9
 8002f6c:	1acb      	subs	r3, r1, r3
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	dd02      	ble.n	8002f78 <i2cSmartLCD_Gfx240x128_Locked+0x1a0>
			s_dacPlotPosOfs = 0U;
 8002f72:	4b99      	ldr	r3, [pc, #612]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
		}

		/* Erase x-slot + 2 more columns right of it*/
		{
			i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002f78:	2209      	movs	r2, #9
 8002f7a:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	210d      	movs	r1, #13
 8002f84:	222b      	movs	r2, #43	; 0x2b
 8002f86:	230d      	movs	r3, #13
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	2203      	movs	r2, #3
 8002f92:	f7ff fcb3 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
					LCD1_PIXEL_CLR);
		}

		/* Plot DAC value */
		{
			float 	ampt_y		= (DacGfxPos_y_bot - DacGfxPos_y_top) / 2.0f;
 8002f96:	232b      	movs	r3, #43	; 0x2b
 8002f98:	461a      	mov	r2, r3
 8002f9a:	230d      	movs	r3, #13
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			uint8_t midPos_y 	= DacGfxPos_y_bot - ampt_y;
 8002fb2:	232b      	movs	r3, #43	; 0x2b
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fbc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fcc:	793b      	ldrb	r3, [r7, #4]
 8002fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			int16_t dacValPlot	= (int16_t)dacVal - (int16_t)I2C_DAC_MCP4725_0_VAL;
 8002fd2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002fd6:	f2a3 63ce 	subw	r3, r3, #1742	; 0x6ce
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			/* Clipping */
			if (dacValPlot >  (int16_t)ampt_y) {
 8002fe0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe8:	ee17 3a90 	vmov	r3, s15
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dd07      	ble.n	8003006 <i2cSmartLCD_Gfx240x128_Locked+0x22e>
				dacValPlot =  (int16_t)ampt_y;
 8002ff6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffe:	ee17 3a90 	vmov	r3, s15
 8003002:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			if (dacValPlot < -(int16_t)ampt_y) {
 8003006:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800300a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	b21b      	sxth	r3, r3
 8003018:	425b      	negs	r3, r3
 800301a:	429a      	cmp	r2, r3
 800301c:	da0b      	bge.n	8003036 <i2cSmartLCD_Gfx240x128_Locked+0x25e>
				dacValPlot = -(int16_t)ampt_y;
 800301e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003026:	ee17 3a90 	vmov	r3, s15
 800302a:	b21b      	sxth	r3, r3
 800302c:	b29b      	uxth	r3, r3
 800302e:	425b      	negs	r3, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}

			i2cSmartLCD_Gfx240x128_Draw_Point(
 8003036:	2209      	movs	r2, #9
 8003038:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4413      	add	r3, r2
 800303e:	b2d8      	uxtb	r0, r3
 8003040:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	f7ff fc32 	bl	80028ba <i2cSmartLCD_Gfx240x128_Draw_Point>
					LCD1_PIXEL_SET);
		}
	}

	/* Timeout check */
	now = HAL_GetTick();
 8003056:	f004 fda9 	bl	8007bac <HAL_GetTick>
 800305a:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 800305c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	f080 84a9 	bcs.w	80039b8 <i2cSmartLCD_Gfx240x128_Locked+0xbe0>
		static float	s_devPsSLast		= 999.999f;
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 8003066:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 8003070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003074:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003078:	429a      	cmp	r2, r3
 800307a:	d01d      	beq.n	80030b8 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 800307c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003080:	f107 0020 	add.w	r0, r7, #32
 8003084:	227e      	movs	r2, #126	; 0x7e
 8003086:	9200      	str	r2, [sp, #0]
 8003088:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <i2cSmartLCD_Gfx240x128_Locked+0x408>)
 800308a:	211f      	movs	r1, #31
 800308c:	f00c ffbe 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  7),
						strlen((char*)line1_str), line1_str)) {
 8003090:	f107 0320 	add.w	r3, r7, #32
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f8a5 	bl	80001e4 <strlen>
 800309a:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800309c:	b2da      	uxtb	r2, r3
 800309e:	f107 0320 	add.w	r3, r7, #32
 80030a2:	2146      	movs	r1, #70	; 0x46
 80030a4:	20a2      	movs	r0, #162	; 0xa2
 80030a6:	f7ff fb29 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 8485 	bne.w	80039bc <i2cSmartLCD_Gfx240x128_Locked+0xbe4>
					return;
				}
				s_tempLast = temp;
 80030b2:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 80030b4:	8b7b      	ldrh	r3, [r7, #26]
 80030b6:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80030b8:	f004 fd78 	bl	8007bac <HAL_GetTick>
 80030bc:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80030be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f080 847c 	bcs.w	80039c0 <i2cSmartLCD_Gfx240x128_Locked+0xbe8>
			return;
		}

		if (gDOP) {
 80030c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d042      	beq.n	8003156 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 80030d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030dc:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	d034      	beq.n	8003156 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 80030ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80030f0:	4a3d      	ldr	r2, [pc, #244]	; (80031e8 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	461c      	mov	r4, r3
 80030fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003100:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003102:	fba2 1203 	umull	r1, r2, r2, r3
 8003106:	0952      	lsrs	r2, r2, #5
 8003108:	2164      	movs	r1, #100	; 0x64
 800310a:	fb01 f202 	mul.w	r2, r1, r2
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	f107 0020 	add.w	r0, r7, #32
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4623      	mov	r3, r4
 800311a:	4a34      	ldr	r2, [pc, #208]	; (80031ec <i2cSmartLCD_Gfx240x128_Locked+0x414>)
 800311c:	211f      	movs	r1, #31
 800311e:	f00c ff75 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  8),
						strlen((char*)line2_str), line2_str)) {
 8003122:	f107 0320 	add.w	r3, r7, #32
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f85c 	bl	80001e4 <strlen>
 800312c:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800312e:	b2da      	uxtb	r2, r3
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	2150      	movs	r1, #80	; 0x50
 8003136:	20a2      	movs	r0, #162	; 0xa2
 8003138:	f7ff fae0 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8440 	bne.w	80039c4 <i2cSmartLCD_Gfx240x128_Locked+0xbec>
					return;
				}
				s_gDOPLast = gDOP;
 8003144:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 8003152:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003156:	f004 fd29 	bl	8007bac <HAL_GetTick>
 800315a:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800315c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	429a      	cmp	r2, r3
 8003162:	f080 8431 	bcs.w	80039c8 <i2cSmartLCD_Gfx240x128_Locked+0xbf0>
			return;
		}

		if (tAcc) {
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d045      	beq.n	80031f8 <i2cSmartLCD_Gfx240x128_Locked+0x420>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d040      	beq.n	80031f8 <i2cSmartLCD_Gfx240x128_Locked+0x420>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800317c:	4293      	cmp	r3, r2
 800317e:	bf28      	it	cs
 8003180:	4613      	movcs	r3, r2
 8003182:	f107 0020 	add.w	r0, r7, #32
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <i2cSmartLCD_Gfx240x128_Locked+0x41c>)
 8003188:	211f      	movs	r1, #31
 800318a:	f00c ff3f 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) *  9),
						strlen((char*)line2_str), line2_str)) {
 800318e:	f107 0320 	add.w	r3, r7, #32
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f826 	bl	80001e4 <strlen>
 8003198:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800319a:	b2da      	uxtb	r2, r3
 800319c:	f107 0320 	add.w	r3, r7, #32
 80031a0:	215a      	movs	r1, #90	; 0x5a
 80031a2:	20a2      	movs	r0, #162	; 0xa2
 80031a4:	f7ff faaa 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 840e 	bne.w	80039cc <i2cSmartLCD_Gfx240x128_Locked+0xbf4>
					return;
				}
				s_tAccLast = tAcc;
 80031b0:	4a0f      	ldr	r2, [pc, #60]	; (80031f0 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01f      	b.n	80031f8 <i2cSmartLCD_Gfx240x128_Locked+0x420>
 80031b8:	20000264 	.word	0x20000264
 80031bc:	20000274 	.word	0x20000274
 80031c0:	20000284 	.word	0x20000284
 80031c4:	20000294 	.word	0x20000294
 80031c8:	20000273 	.word	0x20000273
 80031cc:	200002b4 	.word	0x200002b4
 80031d0:	200002c4 	.word	0x200002c4
 80031d4:	45e7b273 	.word	0x45e7b273
 80031d8:	200002c8 	.word	0x200002c8
 80031dc:	200002ca 	.word	0x200002ca
 80031e0:	08013654 	.word	0x08013654
 80031e4:	200002cc 	.word	0x200002cc
 80031e8:	51eb851f 	.word	0x51eb851f
 80031ec:	08013664 	.word	0x08013664
 80031f0:	200002d0 	.word	0x200002d0
 80031f4:	08013674 	.word	0x08013674
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80031f8:	f004 fcd8 	bl	8007bac <HAL_GetTick>
 80031fc:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80031fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	f080 83e4 	bcs.w	80039d0 <i2cSmartLCD_Gfx240x128_Locked+0xbf8>
			return;
		}

		if (devPsS) {
 8003208:	edd7 7a03 	vldr	s15, [r7, #12]
 800320c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	d02a      	beq.n	800326c <i2cSmartLCD_Gfx240x128_Locked+0x494>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <i2cSmartLCD_Gfx240x128_Locked+0x574>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003220:	eeb4 7a67 	vcmp.f32	s14, s15
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	d020      	beq.n	800326c <i2cSmartLCD_Gfx240x128_Locked+0x494>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7fd f99c 	bl	8000568 <__aeabi_f2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	f107 0020 	add.w	r0, r7, #32
 8003238:	e9cd 2300 	strd	r2, r3, [sp]
 800323c:	4a44      	ldr	r2, [pc, #272]	; (8003350 <i2cSmartLCD_Gfx240x128_Locked+0x578>)
 800323e:	211f      	movs	r1, #31
 8003240:	f00c fee4 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 10),
						strlen((char*)line2_str), line2_str)) {
 8003244:	f107 0320 	add.w	r3, r7, #32
 8003248:	4618      	mov	r0, r3
 800324a:	f7fc ffcb 	bl	80001e4 <strlen>
 800324e:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8003250:	b2da      	uxtb	r2, r3
 8003252:	f107 0320 	add.w	r3, r7, #32
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	20a2      	movs	r0, #162	; 0xa2
 800325a:	f7ff fa4f 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 83b7 	bne.w	80039d4 <i2cSmartLCD_Gfx240x128_Locked+0xbfc>
					return;
				}
				s_devPsSLast = devPsS;
 8003266:	4a39      	ldr	r2, [pc, #228]	; (800334c <i2cSmartLCD_Gfx240x128_Locked+0x574>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 800326c:	f004 fc9e 	bl	8007bac <HAL_GetTick>
 8003270:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	429a      	cmp	r2, r3
 8003278:	f080 83ae 	bcs.w	80039d8 <i2cSmartLCD_Gfx240x128_Locked+0xc00>
			return;
		}

		if (dacVal) {
 800327c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003280:	2b00      	cmp	r3, #0
 8003282:	d024      	beq.n	80032ce <i2cSmartLCD_Gfx240x128_Locked+0x4f6>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8003284:	4b33      	ldr	r3, [pc, #204]	; (8003354 <i2cSmartLCD_Gfx240x128_Locked+0x57c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800328e:	429a      	cmp	r2, r3
 8003290:	d01d      	beq.n	80032ce <i2cSmartLCD_Gfx240x128_Locked+0x4f6>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 8003292:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003296:	f107 0020 	add.w	r0, r7, #32
 800329a:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <i2cSmartLCD_Gfx240x128_Locked+0x580>)
 800329c:	211f      	movs	r1, #31
 800329e:	f00c feb5 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 11),
						strlen((char*)line2_str), line2_str)) {
 80032a2:	f107 0320 	add.w	r3, r7, #32
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fc ff9c 	bl	80001e4 <strlen>
 80032ac:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	216e      	movs	r1, #110	; 0x6e
 80032b6:	20a2      	movs	r0, #162	; 0xa2
 80032b8:	f7ff fa20 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 838c 	bne.w	80039dc <i2cSmartLCD_Gfx240x128_Locked+0xc04>
					return;
				}
				s_dacValLast = dacVal;
 80032c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <i2cSmartLCD_Gfx240x128_Locked+0x57c>)
 80032cc:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80032ce:	f004 fc6d 	bl	8007bac <HAL_GetTick>
 80032d2:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80032d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f080 8381 	bcs.w	80039e0 <i2cSmartLCD_Gfx240x128_Locked+0xc08>
			return;
		}

		if (dacFraction) {
 80032de:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d02a      	beq.n	8003342 <i2cSmartLCD_Gfx240x128_Locked+0x56a>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <i2cSmartLCD_Gfx240x128_Locked+0x584>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d020      	beq.n	8003342 <i2cSmartLCD_Gfx240x128_Locked+0x56a>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f7fd f931 	bl	8000568 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	f107 0020 	add.w	r0, r7, #32
 800330e:	e9cd 2300 	strd	r2, r3, [sp]
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <i2cSmartLCD_Gfx240x128_Locked+0x588>)
 8003314:	211f      	movs	r1, #31
 8003316:	f00c fe79 	bl	801000c <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						0 + ((LCD1_SYSFONT_WIDTH  + 0) * 27),
						0 + ((LCD1_SYSFONT_HEIGHT + 3) * 12),
						strlen((char*)line2_str), line2_str)) {
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	4618      	mov	r0, r3
 8003320:	f7fc ff60 	bl	80001e4 <strlen>
 8003324:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8003326:	b2da      	uxtb	r2, r3
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	2178      	movs	r1, #120	; 0x78
 800332e:	20a2      	movs	r0, #162	; 0xa2
 8003330:	f7ff f9e4 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8354 	bne.w	80039e4 <i2cSmartLCD_Gfx240x128_Locked+0xc0c>
					return;
				}
				s_dacFractionLast = dacFraction;
 800333c:	4a07      	ldr	r2, [pc, #28]	; (800335c <i2cSmartLCD_Gfx240x128_Locked+0x584>)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6013      	str	r3, [r2, #0]
		}
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003342:	2300      	movs	r3, #0
 8003344:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003348:	e328      	b.n	800399c <i2cSmartLCD_Gfx240x128_Locked+0xbc4>
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000
 8003350:	08013684 	.word	0x08013684
 8003354:	200002d4 	.word	0x200002d4
 8003358:	08013694 	.word	0x08013694
 800335c:	20000004 	.word	0x20000004
 8003360:	080136a4 	.word	0x080136a4
		uint8_t svCh	= svElevSort[svChIdx];
 8003364:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800336c:	4413      	add	r3, r2
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t svId 	= svInfo->svid[svCh];
 8003374:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003378:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800337c:	4413      	add	r3, r2
 800337e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003382:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int8_t  svElev	= svInfo->elev[svCh];
 8003386:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800338a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800338e:	4413      	add	r3, r2
 8003390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003394:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		int16_t svAzim	= svInfo->azim[svCh];
 8003398:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800339c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a0:	324c      	adds	r2, #76	; 0x4c
 80033a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		int8_t  svCno	= svInfo->cno[svCh];
 80033aa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80033ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80033b2:	4413      	add	r3, r2
 80033b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80033b8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

		/* Timeout check */
		now = HAL_GetTick();
 80033bc:	f004 fbf6 	bl	8007bac <HAL_GetTick>
 80033c0:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80033c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	f080 830e 	bcs.w	80039e8 <i2cSmartLCD_Gfx240x128_Locked+0xc10>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 80033cc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80033d0:	2b28      	cmp	r3, #40	; 0x28
 80033d2:	d902      	bls.n	80033da <i2cSmartLCD_Gfx240x128_Locked+0x602>
			svCno = SvCno_max;
 80033d4:	2328      	movs	r3, #40	; 0x28
 80033d6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);
 80033da:	f997 205c 	ldrsb.w	r2, [r7, #92]	; 0x5c
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	4add      	ldr	r2, [pc, #884]	; (8003760 <i2cSmartLCD_Gfx240x128_Locked+0x988>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 80033f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80033f8:	4ada      	ldr	r2, [pc, #872]	; (8003764 <i2cSmartLCD_Gfx240x128_Locked+0x98c>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	3330      	adds	r3, #48	; 0x30
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 800340a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800340e:	4ad5      	ldr	r2, [pc, #852]	; (8003764 <i2cSmartLCD_Gfx240x128_Locked+0x98c>)
 8003410:	fba2 1203 	umull	r1, r2, r2, r3
 8003414:	0952      	lsrs	r2, r2, #5
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	fb01 f202 	mul.w	r2, r1, r2
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4ad1      	ldr	r2, [pc, #836]	; (8003768 <i2cSmartLCD_Gfx240x128_Locked+0x990>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3330      	adds	r3, #48	; 0x30
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 8003432:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003436:	4bcc      	ldr	r3, [pc, #816]	; (8003768 <i2cSmartLCD_Gfx240x128_Locked+0x990>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	08d9      	lsrs	r1, r3, #3
 800343e:	460b      	mov	r3, r1
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	3330      	adds	r3, #48	; 0x30
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8003452:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003456:	4ac5      	ldr	r2, [pc, #788]	; (800376c <i2cSmartLCD_Gfx240x128_Locked+0x994>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800345e:	429a      	cmp	r2, r3
 8003460:	d11c      	bne.n	800349c <i2cSmartLCD_Gfx240x128_Locked+0x6c4>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8003462:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003466:	4ac2      	ldr	r2, [pc, #776]	; (8003770 <i2cSmartLCD_Gfx240x128_Locked+0x998>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	461a      	mov	r2, r3
 800346c:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8003470:	429a      	cmp	r2, r3
 8003472:	d113      	bne.n	800349c <i2cSmartLCD_Gfx240x128_Locked+0x6c4>
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 8003474:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003478:	4abe      	ldr	r2, [pc, #760]	; (8003774 <i2cSmartLCD_Gfx240x128_Locked+0x99c>)
 800347a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800347e:	461a      	mov	r2, r3
 8003480:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 8003484:	429a      	cmp	r2, r3
 8003486:	d109      	bne.n	800349c <i2cSmartLCD_Gfx240x128_Locked+0x6c4>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 8003488:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800348c:	4aba      	ldr	r2, [pc, #744]	; (8003778 <i2cSmartLCD_Gfx240x128_Locked+0x9a0>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	461a      	mov	r2, r3
 8003492:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 8003496:	429a      	cmp	r2, r3
 8003498:	f000 827b 	beq.w	8003992 <i2cSmartLCD_Gfx240x128_Locked+0xbba>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 800349c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034a0:	49b2      	ldr	r1, [pc, #712]	; (800376c <i2cSmartLCD_Gfx240x128_Locked+0x994>)
 80034a2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80034a6:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 80034a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034ac:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
 80034b0:	4aaf      	ldr	r2, [pc, #700]	; (8003770 <i2cSmartLCD_Gfx240x128_Locked+0x998>)
 80034b2:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[svChIdx]	= svAzim;
 80034b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034b8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80034bc:	4aad      	ldr	r2, [pc, #692]	; (8003774 <i2cSmartLCD_Gfx240x128_Locked+0x99c>)
 80034be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 80034c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034c6:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 80034ca:	4aab      	ldr	r2, [pc, #684]	; (8003778 <i2cSmartLCD_Gfx240x128_Locked+0x9a0>)
 80034cc:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 80034ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034d2:	461a      	mov	r2, r3
 80034d4:	0092      	lsls	r2, r2, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3302      	adds	r3, #2
 80034de:	b2d8      	uxtb	r0, r3
 80034e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e4:	2201      	movs	r2, #1
 80034e6:	2178      	movs	r1, #120	; 0x78
 80034e8:	f7ff f908 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 80034ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034f0:	461a      	mov	r2, r3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3302      	adds	r3, #2
 80034fc:	b2d8      	uxtb	r0, r3
 80034fe:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8003502:	2201      	movs	r2, #1
 8003504:	2170      	movs	r1, #112	; 0x70
 8003506:	f7ff f8f9 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 800350a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800350e:	461a      	mov	r2, r3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3302      	adds	r3, #2
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8003520:	2201      	movs	r2, #1
 8003522:	2168      	movs	r1, #104	; 0x68
 8003524:	f7ff f8ea 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003528:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800352c:	461a      	mov	r2, r3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4413      	add	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800353a:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800353e:	b2d9      	uxtb	r1, r3
 8003540:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003544:	3301      	adds	r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2201      	movs	r2, #1
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	f7ff f9d5 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	(LCD1_SMART_LCD_SIZE_Y - 1) 		- (1 + svElev),
						1, 						(1 + svElev),
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003552:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003556:	461a      	mov	r2, r3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	b2d8      	uxtb	r0, r3
 8003560:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003564:	f1c3 0316 	rsb	r3, r3, #22
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2200      	movs	r2, #0
 800356c:	9200      	str	r2, [sp, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	2167      	movs	r1, #103	; 0x67
 8003572:	f7ff f9c3 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003576:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800357a:	461a      	mov	r2, r3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4413      	add	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	b2d8      	uxtb	r0, r3
 8003588:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800358c:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8003596:	3301      	adds	r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2201      	movs	r2, #1
 800359c:	9200      	str	r2, [sp, #0]
 800359e:	2208      	movs	r2, #8
 80035a0:	f7ff f9ac 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						8, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80035a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80035a8:	461a      	mov	r2, r3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	b2d8      	uxtb	r0, r3
 80035b6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80035ba:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	9200      	str	r2, [sp, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	213c      	movs	r1, #60	; 0x3c
 80035c8:	f7ff f998 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float 	ArrowSize = 4.49f;
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <i2cSmartLCD_Gfx240x128_Locked+0x9a4>)
 80035ce:	657b      	str	r3, [r7, #84]	; 0x54
				const float 	pntOrig_x = 4.5f + (svChIdx * 10U);
 80035d0:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80035e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				const float 	pntOrig_y = 56.0f;
 80035f0:	4b63      	ldr	r3, [pc, #396]	; (8003780 <i2cSmartLCD_Gfx240x128_Locked+0x9a8>)
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c

				uint8_t pntWipeTL_x	= (uint8_t) (pntOrig_x - 4.5f);
 80035f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035f8:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80035fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003604:	edc7 7a01 	vstr	s15, [r7, #4]
 8003608:	793b      	ldrb	r3, [r7, #4]
 800360a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				uint8_t pntWipeTL_y	= (uint8_t) (pntOrig_y - 4.5f);
 800360e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003612:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8003616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800361a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003622:	793b      	ldrb	r3, [r7, #4]
 8003624:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				uint8_t lenWipe_xy	= 10U;
 8003628:	230a      	movs	r3, #10
 800362a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

				uint8_t pntFront_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 800362e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003630:	f7fc ff9a 	bl	8000568 <__aeabi_f2d>
 8003634:	4604      	mov	r4, r0
 8003636:	460d      	mov	r5, r1
 8003638:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800363a:	f7fc ff95 	bl	8000568 <__aeabi_f2d>
 800363e:	4680      	mov	r8, r0
 8003640:	4689      	mov	r9, r1
 8003642:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc ff7c 	bl	8000544 <__aeabi_i2d>
 800364c:	a342      	add	r3, pc, #264	; (adr r3, 8003758 <i2cSmartLCD_Gfx240x128_Locked+0x980>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f7fc ffe1 	bl	8000618 <__aeabi_dmul>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <i2cSmartLCD_Gfx240x128_Locked+0x9ac>)
 8003664:	f7fd f902 	bl	800086c <__aeabi_ddiv>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b17 	vmov	d7, r2, r3
 8003670:	eeb0 0a47 	vmov.f32	s0, s14
 8003674:	eef0 0a67 	vmov.f32	s1, s15
 8003678:	f00e ff5a 	bl	8012530 <sin>
 800367c:	ec53 2b10 	vmov	r2, r3, d0
 8003680:	4640      	mov	r0, r8
 8003682:	4649      	mov	r1, r9
 8003684:	f7fc ffc8 	bl	8000618 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fc fe0c 	bl	80002ac <__adddf3>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	f7fd fa94 	bl	8000bc8 <__aeabi_d2uiz>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				uint8_t pntFront_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 80036a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80036a8:	f7fc ff5e 	bl	8000568 <__aeabi_f2d>
 80036ac:	4604      	mov	r4, r0
 80036ae:	460d      	mov	r5, r1
 80036b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80036b2:	f7fc ff59 	bl	8000568 <__aeabi_f2d>
 80036b6:	4680      	mov	r8, r0
 80036b8:	4689      	mov	r9, r1
 80036ba:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff40 	bl	8000544 <__aeabi_i2d>
 80036c4:	a324      	add	r3, pc, #144	; (adr r3, 8003758 <i2cSmartLCD_Gfx240x128_Locked+0x980>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fc ffa5 	bl	8000618 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <i2cSmartLCD_Gfx240x128_Locked+0x9ac>)
 80036dc:	f7fd f8c6 	bl	800086c <__aeabi_ddiv>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	ec43 2b17 	vmov	d7, r2, r3
 80036e8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ec:	eef0 0a67 	vmov.f32	s1, s15
 80036f0:	f00e fece 	bl	8012490 <cos>
 80036f4:	ec53 2b10 	vmov	r2, r3, d0
 80036f8:	4640      	mov	r0, r8
 80036fa:	4649      	mov	r1, r9
 80036fc:	f7fc ff8c 	bl	8000618 <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4620      	mov	r0, r4
 8003706:	4629      	mov	r1, r5
 8003708:	f7fc fdd0 	bl	80002ac <__adddf3>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	f7fd fa58 	bl	8000bc8 <__aeabi_d2uiz>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				uint8_t pntLeft_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim - 155)	/ 180.0f));
 800371e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003720:	f7fc ff22 	bl	8000568 <__aeabi_f2d>
 8003724:	4604      	mov	r4, r0
 8003726:	460d      	mov	r5, r1
 8003728:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800372a:	f7fc ff1d 	bl	8000568 <__aeabi_f2d>
 800372e:	4680      	mov	r8, r0
 8003730:	4689      	mov	r9, r1
 8003732:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003736:	3b9b      	subs	r3, #155	; 0x9b
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc ff03 	bl	8000544 <__aeabi_i2d>
 800373e:	a306      	add	r3, pc, #24	; (adr r3, 8003758 <i2cSmartLCD_Gfx240x128_Locked+0x980>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fc ff68 	bl	8000618 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	e018      	b.n	8003788 <i2cSmartLCD_Gfx240x128_Locked+0x9b0>
 8003756:	bf00      	nop
 8003758:	54442d18 	.word	0x54442d18
 800375c:	400921fb 	.word	0x400921fb
 8003760:	b60b60b7 	.word	0xb60b60b7
 8003764:	51eb851f 	.word	0x51eb851f
 8003768:	cccccccd 	.word	0xcccccccd
 800376c:	20000264 	.word	0x20000264
 8003770:	20000284 	.word	0x20000284
 8003774:	20000294 	.word	0x20000294
 8003778:	20000274 	.word	0x20000274
 800377c:	408fae14 	.word	0x408fae14
 8003780:	42600000 	.word	0x42600000
 8003784:	40668000 	.word	0x40668000
 8003788:	4b9d      	ldr	r3, [pc, #628]	; (8003a00 <i2cSmartLCD_Gfx240x128_Locked+0xc28>)
 800378a:	f7fd f86f 	bl	800086c <__aeabi_ddiv>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	ec43 2b17 	vmov	d7, r2, r3
 8003796:	eeb0 0a47 	vmov.f32	s0, s14
 800379a:	eef0 0a67 	vmov.f32	s1, s15
 800379e:	f00e fec7 	bl	8012530 <sin>
 80037a2:	ec53 2b10 	vmov	r2, r3, d0
 80037a6:	4640      	mov	r0, r8
 80037a8:	4649      	mov	r1, r9
 80037aa:	f7fc ff35 	bl	8000618 <__aeabi_dmul>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4620      	mov	r0, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	f7fc fd79 	bl	80002ac <__adddf3>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	f7fd fa01 	bl	8000bc8 <__aeabi_d2uiz>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint8_t pntLeft_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim - 155)	/ 180.0f));
 80037cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037ce:	f7fc fecb 	bl	8000568 <__aeabi_f2d>
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037d8:	f7fc fec6 	bl	8000568 <__aeabi_f2d>
 80037dc:	4680      	mov	r8, r0
 80037de:	4689      	mov	r9, r1
 80037e0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80037e4:	3b9b      	subs	r3, #155	; 0x9b
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc feac 	bl	8000544 <__aeabi_i2d>
 80037ec:	a382      	add	r3, pc, #520	; (adr r3, 80039f8 <i2cSmartLCD_Gfx240x128_Locked+0xc20>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc ff11 	bl	8000618 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	4b7f      	ldr	r3, [pc, #508]	; (8003a00 <i2cSmartLCD_Gfx240x128_Locked+0xc28>)
 8003804:	f7fd f832 	bl	800086c <__aeabi_ddiv>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	ec43 2b17 	vmov	d7, r2, r3
 8003810:	eeb0 0a47 	vmov.f32	s0, s14
 8003814:	eef0 0a67 	vmov.f32	s1, s15
 8003818:	f00e fe3a 	bl	8012490 <cos>
 800381c:	ec53 2b10 	vmov	r2, r3, d0
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fef8 	bl	8000618 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fd3c 	bl	80002ac <__adddf3>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f7fd f9c4 	bl	8000bc8 <__aeabi_d2uiz>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				uint8_t pntRight_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim + 155)	/ 180.0f));
 8003846:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003848:	f7fc fe8e 	bl	8000568 <__aeabi_f2d>
 800384c:	4604      	mov	r4, r0
 800384e:	460d      	mov	r5, r1
 8003850:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003852:	f7fc fe89 	bl	8000568 <__aeabi_f2d>
 8003856:	4680      	mov	r8, r0
 8003858:	4689      	mov	r9, r1
 800385a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800385e:	339b      	adds	r3, #155	; 0x9b
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe6f 	bl	8000544 <__aeabi_i2d>
 8003866:	a364      	add	r3, pc, #400	; (adr r3, 80039f8 <i2cSmartLCD_Gfx240x128_Locked+0xc20>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fed4 	bl	8000618 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <i2cSmartLCD_Gfx240x128_Locked+0xc28>)
 800387e:	f7fc fff5 	bl	800086c <__aeabi_ddiv>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	ec43 2b17 	vmov	d7, r2, r3
 800388a:	eeb0 0a47 	vmov.f32	s0, s14
 800388e:	eef0 0a67 	vmov.f32	s1, s15
 8003892:	f00e fe4d 	bl	8012530 <sin>
 8003896:	ec53 2b10 	vmov	r2, r3, d0
 800389a:	4640      	mov	r0, r8
 800389c:	4649      	mov	r1, r9
 800389e:	f7fc febb 	bl	8000618 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fc fcff 	bl	80002ac <__adddf3>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7fd f987 	bl	8000bc8 <__aeabi_d2uiz>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				uint8_t pntRight_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim + 155)	/ 180.0f));
 80038c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038c2:	f7fc fe51 	bl	8000568 <__aeabi_f2d>
 80038c6:	4604      	mov	r4, r0
 80038c8:	460d      	mov	r5, r1
 80038ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038cc:	f7fc fe4c 	bl	8000568 <__aeabi_f2d>
 80038d0:	4680      	mov	r8, r0
 80038d2:	4689      	mov	r9, r1
 80038d4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80038d8:	339b      	adds	r3, #155	; 0x9b
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe32 	bl	8000544 <__aeabi_i2d>
 80038e0:	a345      	add	r3, pc, #276	; (adr r3, 80039f8 <i2cSmartLCD_Gfx240x128_Locked+0xc20>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f7fc fe97 	bl	8000618 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <i2cSmartLCD_Gfx240x128_Locked+0xc28>)
 80038f8:	f7fc ffb8 	bl	800086c <__aeabi_ddiv>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	ec43 2b17 	vmov	d7, r2, r3
 8003904:	eeb0 0a47 	vmov.f32	s0, s14
 8003908:	eef0 0a67 	vmov.f32	s1, s15
 800390c:	f00e fdc0 	bl	8012490 <cos>
 8003910:	ec53 2b10 	vmov	r2, r3, d0
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fe7e 	bl	8000618 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4620      	mov	r0, r4
 8003922:	4629      	mov	r1, r5
 8003924:	f7fc fcc2 	bl	80002ac <__adddf3>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	f7fd f94a 	bl	8000bc8 <__aeabi_d2uiz>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800393a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800393e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003942:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8003946:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800394a:	2400      	movs	r4, #0
 800394c:	9400      	str	r4, [sp, #0]
 800394e:	f7fe ffd5 	bl	80028fc <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						pntWipeTL_x, 	pntWipeTL_y,
						lenWipe_xy, 	lenWipe_xy,
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003952:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003956:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe ff73 	bl	8002848 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						pntFront_x, 	pntFront_y);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003962:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003966:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800396a:	2201      	movs	r2, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe ff87 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						pntOrig_x, 		pntOrig_y,
						LCD1_PIXEL_SET);
#endif

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003972:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8003976:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800397a:	2201      	movs	r2, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe ff7f 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						pntRight_x, 	pntRight_y,
						LCD1_PIXEL_SET);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003982:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003986:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800398a:	2201      	movs	r2, #1
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe ff77 	bl	8002880 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003992:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003996:	3301      	adds	r3, #1
 8003998:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800399c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80039a0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f4ff acdd 	bcc.w	8003364 <i2cSmartLCD_Gfx240x128_Locked+0x58c>
 80039aa:	e01e      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
		return;
 80039ac:	bf00      	nop
 80039ae:	e01c      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
		return;
 80039b0:	bf00      	nop
 80039b2:	e01a      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
		return;
 80039b4:	bf00      	nop
 80039b6:	e018      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
		return;
 80039b8:	bf00      	nop
 80039ba:	e016      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039bc:	bf00      	nop
 80039be:	e014      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039c0:	bf00      	nop
 80039c2:	e012      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039c4:	bf00      	nop
 80039c6:	e010      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039c8:	bf00      	nop
 80039ca:	e00e      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039cc:	bf00      	nop
 80039ce:	e00c      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039d0:	bf00      	nop
 80039d2:	e00a      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039d4:	bf00      	nop
 80039d6:	e008      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039d8:	bf00      	nop
 80039da:	e006      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039dc:	bf00      	nop
 80039de:	e004      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
					return;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			return;
 80039e8:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 80039ea:	3770      	adds	r7, #112	; 0x70
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039f2:	bf00      	nop
 80039f4:	f3af 8000 	nop.w
 80039f8:	54442d18 	.word	0x54442d18
 80039fc:	400921fb 	.word	0x400921fb
 8003a00:	40668000 	.word	0x40668000

08003a04 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	4613      	mov	r3, r2
 8003a12:	015b      	lsls	r3, r3, #5
 8003a14:	4413      	add	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <uDelay+0x3c>)
 8003a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8003a24:	e002      	b.n	8003a2c <uDelay+0x28>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f9      	bne.n	8003a26 <uDelay+0x22>
	}
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	cccccccd 	.word	0xcccccccd

08003a44 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003a50:	e004      	b.n	8003a5c <memclear+0x18>
		*(ary++) = 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	1e5a      	subs	r2, r3, #1
 8003a60:	807a      	strh	r2, [r7, #2]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f5      	bne.n	8003a52 <memclear+0xe>
	}
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <main_get_MaidenheadLocator_from_LatLon>:


uint8_t main_get_MaidenheadLocator_from_LatLon(uint8_t maxLen, uint8_t* tgtStr, float lat, float lon)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a82:	edc7 0a00 	vstr	s1, [r7]
 8003a86:	73fb      	strb	r3, [r7, #15]
	if (
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	f240 80d3 	bls.w	8003c36 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(maxLen >= 7)   &&
 8003a90:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a94:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003c44 <main_get_MaidenheadLocator_from_LatLon+0x1d0>
 8003a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	f340 80c9 	ble.w	8003c36 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			( -90.0f < lat) && (lat <  +90.0f) &&
 8003aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003c48 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 8003aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	f140 80bf 	bpl.w	8003c36 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
 8003ab8:	edd7 7a00 	vldr	s15, [r7]
 8003abc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003c4c <main_get_MaidenheadLocator_from_LatLon+0x1d8>
 8003ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac8:	f340 80b5 	ble.w	8003c36 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(-180.0f < lon) && (lon < +180.0f))
 8003acc:	edd7 7a00 	vldr	s15, [r7]
 8003ad0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003c50 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8003ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003adc:	f140 80ab 	bpl.w	8003c36 <main_get_MaidenheadLocator_from_LatLon+0x1c2>
	{
		/* Grid movement */
		lon += 180.0f;
 8003ae0:	edd7 7a00 	vldr	s15, [r7]
 8003ae4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003c50 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8003ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aec:	edc7 7a00 	vstr	s15, [r7]
		lat +=  90.0f;
 8003af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003c48 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 8003af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003afc:	edc7 7a01 	vstr	s15, [r7, #4]

		lon *= 25U;
 8003b00:	edd7 7a00 	vldr	s15, [r7]
 8003b04:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0c:	edc7 7a00 	vstr	s15, [r7]
		lon	-= 0.5f;
 8003b10:	edd7 7a00 	vldr	s15, [r7]
 8003b14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b1c:	edc7 7a00 	vstr	s15, [r7]
		lon /= 2U;
 8003b20:	ed97 7a00 	vldr	s14, [r7]
 8003b24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b2c:	edc7 7a00 	vstr	s15, [r7]
		uint32_t lon_i = (uint32_t) lon;
 8003b30:	edd7 7a00 	vldr	s15, [r7]
 8003b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b38:	ee17 3a90 	vmov	r3, s15
 8003b3c:	61fb      	str	r3, [r7, #28]

		lat *= 25U;
 8003b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4a:	edc7 7a01 	vstr	s15, [r7, #4]
		lat	-= 0.5f;
 8003b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b5a:	edc7 7a01 	vstr	s15, [r7, #4]
		uint32_t lat_i = (uint32_t) lat;
 8003b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b66:	ee17 3a90 	vmov	r3, s15
 8003b6a:	61bb      	str	r3, [r7, #24]

		uint8_t	lon_p0	= (uint8_t) (lon_i / 250UL);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4a39      	ldr	r2, [pc, #228]	; (8003c54 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	75fb      	strb	r3, [r7, #23]
		uint8_t	lat_p0	= (uint8_t) (lat_i / 250UL);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4a36      	ldr	r2, [pc, #216]	; (8003c54 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	75bb      	strb	r3, [r7, #22]

		lon_i -= lon_p0 * 250UL;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	22fa      	movs	r2, #250	; 0xfa
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p0 * 250UL;
 8003b92:	7dbb      	ldrb	r3, [r7, #22]
 8003b94:	22fa      	movs	r2, #250	; 0xfa
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p1 = (uint8_t) (lon_i / 25UL);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	757b      	strb	r3, [r7, #21]
		uint8_t lat_p1 = (uint8_t) (lat_i / 25UL);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	753b      	strb	r3, [r7, #20]

		lon_i -= lon_p1 * 25UL;
 8003bb8:	7d7a      	ldrb	r2, [r7, #21]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009a      	lsls	r2, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p1 * 25UL;
 8003bca:	7d3a      	ldrb	r2, [r7, #20]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p2 = lon_i;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	74fb      	strb	r3, [r7, #19]
		uint8_t lat_p2 = lat_i;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	74bb      	strb	r3, [r7, #18]

		/* Output string */
		*(tgtStr + 0)	= 'A' + lon_p0;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	3341      	adds	r3, #65	; 0x41
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 1)	= 'A' + lat_p0;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	7dba      	ldrb	r2, [r7, #22]
 8003bf4:	3241      	adds	r2, #65	; 0x41
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 2)	= '0' + lon_p1;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	7d7a      	ldrb	r2, [r7, #21]
 8003c00:	3230      	adds	r2, #48	; 0x30
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 3)	= '0' + lat_p1;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	7d3a      	ldrb	r2, [r7, #20]
 8003c0c:	3230      	adds	r2, #48	; 0x30
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 4)	= 'a' + lon_p2;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3304      	adds	r3, #4
 8003c16:	7cfa      	ldrb	r2, [r7, #19]
 8003c18:	3261      	adds	r2, #97	; 0x61
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 5)	= 'a' + lat_p2;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3305      	adds	r3, #5
 8003c22:	7cba      	ldrb	r2, [r7, #18]
 8003c24:	3261      	adds	r2, #97	; 0x61
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 6)	= 0;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3306      	adds	r3, #6
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]

		return 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <main_get_MaidenheadLocator_from_LatLon+0x1c4>
	}

	/* Error */
	return 1;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3724      	adds	r7, #36	; 0x24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	c2b40000 	.word	0xc2b40000
 8003c48:	42b40000 	.word	0x42b40000
 8003c4c:	c3340000 	.word	0xc3340000
 8003c50:	43340000 	.word	0x43340000
 8003c54:	10624dd3 	.word	0x10624dd3
 8003c58:	51eb851f 	.word	0x51eb851f

08003c5c <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)

  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8003c60:	4b7f      	ldr	r3, [pc, #508]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  i2cDacMode = 0b00;
 8003c66:	4b7f      	ldr	r3, [pc, #508]	; (8003e64 <mainLoop_PLL_calc+0x208>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <mainLoop_PLL_calc+0x20c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 8003c74:	4b7d      	ldr	r3, [pc, #500]	; (8003e6c <mainLoop_PLL_calc+0x210>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003e70 <mainLoop_PLL_calc+0x214>
 8003c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d508      	bpl.n	8003c9a <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  timTicksDiff 	= 0L;
 8003c88:	4b7a      	ldr	r3, [pc, #488]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
			  timTicksEvt	= 1UL;
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <mainLoop_PLL_calc+0x21c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 8003c94:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (ubloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 8003c9a:	4b78      	ldr	r3, [pc, #480]	; (8003e7c <mainLoop_PLL_calc+0x220>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2bf9      	cmp	r3, #249	; 0xf9
 8003ca0:	d908      	bls.n	8003cb4 <mainLoop_PLL_calc+0x58>
		  /* Keep sum-up registers cleared */
		  timTicksDiff 	= 0L;
 8003ca2:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
		  timTicksEvt	= 1UL;
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <mainLoop_PLL_calc+0x21c>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 8003cae:	4b6c      	ldr	r3, [pc, #432]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
	  }

	  if (timTicksEvt > 12) {
 8003cb4:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <mainLoop_PLL_calc+0x21c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	f240 80c8 	bls.w	8003e4e <mainLoop_PLL_calc+0x1f2>
		  /* Fractions accounting */
		  if (0 < timTicksDiff) {
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dd2d      	ble.n	8003d22 <mainLoop_PLL_calc+0xc6>
			  if (tim2Ch2_ppm > 0.0f) {
 8003cc6:	4b6e      	ldr	r3, [pc, #440]	; (8003e80 <mainLoop_PLL_calc+0x224>)
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	dd12      	ble.n	8003cfc <mainLoop_PLL_calc+0xa0>
				  i2cDacFraction -= timTicksDiff / SW_PLL_TUNE_FAST;
 8003cd6:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce8:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003e88 <mainLoop_PLL_calc+0x22c>
 8003cec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf4:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003cf6:	edc3 7a00 	vstr	s15, [r3]
 8003cfa:	e043      	b.n	8003d84 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / SW_PLL_TUNE_SLOW;
 8003cfc:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003cfe:	ed93 7a00 	vldr	s14, [r3]
 8003d02:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d0e:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8003e8c <mainLoop_PLL_calc+0x230>
 8003d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1a:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d1c:	edc3 7a00 	vstr	s15, [r3]
 8003d20:	e030      	b.n	8003d84 <mainLoop_PLL_calc+0x128>
			  }
		  }
		  else if (timTicksDiff < 0) {
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da2c      	bge.n	8003d84 <mainLoop_PLL_calc+0x128>
			  if (tim2Ch2_ppm < 0.0f) {
 8003d2a:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <mainLoop_PLL_calc+0x224>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d512      	bpl.n	8003d60 <mainLoop_PLL_calc+0x104>
				  i2cDacFraction -= timTicksDiff / SW_PLL_TUNE_FAST;
 8003d3a:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d3c:	ed93 7a00 	vldr	s14, [r3]
 8003d40:	4b4c      	ldr	r3, [pc, #304]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d4c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003e88 <mainLoop_PLL_calc+0x22c>
 8003d50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d58:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d5a:	edc3 7a00 	vstr	s15, [r3]
 8003d5e:	e011      	b.n	8003d84 <mainLoop_PLL_calc+0x128>
			  } else {
				  i2cDacFraction -= timTicksDiff / SW_PLL_TUNE_SLOW;
 8003d60:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d62:	ed93 7a00 	vldr	s14, [r3]
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <mainLoop_PLL_calc+0x218>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d72:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003e8c <mainLoop_PLL_calc+0x230>
 8003d76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (i2cDacFraction > +0.501f) {
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003e90 <mainLoop_PLL_calc+0x234>
 8003d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	dd28      	ble.n	8003dea <mainLoop_PLL_calc+0x18e>
			  if (i2cDacVal < 2046) {
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d805      	bhi.n	8003db0 <mainLoop_PLL_calc+0x154>
				  ++i2cDacVal;
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003dae:	801a      	strh	r2, [r3, #0]
			  }

			  i2cDacFraction -= 1.0f;
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003dc0:	edc3 7a00 	vstr	s15, [r3]

			  if (i2cDacFraction > +0.501f) {
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003dc6:	edd3 7a00 	vldr	s15, [r3]
 8003dca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003e90 <mainLoop_PLL_calc+0x234>
 8003dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd6:	dc00      	bgt.n	8003dda <mainLoop_PLL_calc+0x17e>
	  i2cDacMode	= 0b11;
	  i2cDacVal		= I2C_DAC_MCP4725_0_VAL;
  }

#endif
}
 8003dd8:	e03c      	b.n	8003e54 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = +0.5f;
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003ddc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003de0:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8003de2:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
}
 8003de8:	e034      	b.n	8003e54 <mainLoop_PLL_calc+0x1f8>
		  else if (i2cDacFraction < -0.501f) {
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003e98 <mainLoop_PLL_calc+0x23c>
 8003df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	d400      	bmi.n	8003e00 <mainLoop_PLL_calc+0x1a4>
}
 8003dfe:	e029      	b.n	8003e54 <mainLoop_PLL_calc+0x1f8>
			  if (i2cDacVal > 0) {
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <mainLoop_PLL_calc+0x1b8>
				  --i2cDacVal;
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <mainLoop_PLL_calc+0x238>)
 8003e12:	801a      	strh	r2, [r3, #0]
			  i2cDacFraction += 1.0f;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003e24:	edc3 7a00 	vstr	s15, [r3]
			  if (i2cDacFraction < -0.501f) {
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003e98 <mainLoop_PLL_calc+0x23c>
 8003e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	d400      	bmi.n	8003e3e <mainLoop_PLL_calc+0x1e2>
}
 8003e3c:	e00a      	b.n	8003e54 <mainLoop_PLL_calc+0x1f8>
				  i2cDacFraction = -0.5f;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <mainLoop_PLL_calc+0x228>)
 8003e40:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8003e44:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
}
 8003e4c:	e002      	b.n	8003e54 <mainLoop_PLL_calc+0x1f8>
		  gpioLockedLED = GPIO_PIN_RESET;
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <mainLoop_PLL_calc+0x204>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000244 	.word	0x20000244
 8003e64:	20000255 	.word	0x20000255
 8003e68:	20000246 	.word	0x20000246
 8003e6c:	2000024c 	.word	0x2000024c
 8003e70:	42200000 	.word	0x42200000
 8003e74:	20000384 	.word	0x20000384
 8003e78:	20000380 	.word	0x20000380
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	20000388 	.word	0x20000388
 8003e84:	2000025c 	.word	0x2000025c
 8003e88:	47435000 	.word	0x47435000
 8003e8c:	48435000 	.word	0x48435000
 8003e90:	3f004189 	.word	0x3f004189
 8003e94:	20000258 	.word	0x20000258
 8003e98:	bf004189 	.word	0xbf004189

08003e9c <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b095      	sub	sp, #84	; 0x54
 8003ea0:	af02      	add	r7, sp, #8
	  /* Show PLL Lock state */
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Software-PLL: DAC value = %04u - fractions = %+8.5f\r\n", i2cDacVal, i2cDacFraction);
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <mainLoop_PLL_print+0x44>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <mainLoop_PLL_print+0x48>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb5b 	bl	8000568 <__aeabi_f2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	1d38      	adds	r0, r7, #4
 8003eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <mainLoop_PLL_print+0x4c>)
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	f00c f8a3 	bl	801000c <sniprintf>
 8003ec6:	6478      	str	r0, [r7, #68]	; 0x44
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	1d39      	adds	r1, r7, #4
 8003ece:	2319      	movs	r3, #25
 8003ed0:	4806      	ldr	r0, [pc, #24]	; (8003eec <mainLoop_PLL_print+0x50>)
 8003ed2:	f00a f99a 	bl	800e20a <HAL_UART_Transmit>
	  }

# endif

#endif
}
 8003ed6:	bf00      	nop
 8003ed8:	374c      	adds	r7, #76	; 0x4c
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000258 	.word	0x20000258
 8003ee4:	2000025c 	.word	0x2000025c
 8003ee8:	080136b4 	.word	0x080136b4
 8003eec:	20002810 	.word	0x20002810

08003ef0 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
	/* Request all needed messages and assign target data structures */
#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n";
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <mainLoop_ublox_requests+0x64>)
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	4611      	mov	r1, r2
 8003efe:	8019      	strh	r1, [r3, #0]
 8003f00:	3302      	adds	r3, #2
 8003f02:	0c12      	lsrs	r2, r2, #16
 8003f04:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003f06:	1d39      	adds	r1, r7, #4
 8003f08:	2319      	movs	r3, #25
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	4812      	ldr	r0, [pc, #72]	; (8003f58 <mainLoop_ublox_requests+0x68>)
 8003f0e:	f00a f97c 	bl	800e20a <HAL_UART_Transmit>
	}
#endif

	/* Request only when needed */
	{
		if (!ubloxNavPosllh.iTOW) {
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <mainLoop_ublox_requests+0x6c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <mainLoop_ublox_requests+0x30>
			ublox_NavPosllh_req(&ubloxNavPosllh);
 8003f1a:	4810      	ldr	r0, [pc, #64]	; (8003f5c <mainLoop_ublox_requests+0x6c>)
 8003f1c:	f002 fdc4 	bl	8006aa8 <ublox_NavPosllh_req>
		}

		if (!ubloxNavClock.iTOW) {
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <mainLoop_ublox_requests+0x70>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <mainLoop_ublox_requests+0x3e>
			ublox_NavClock_req(&ubloxNavClock);
 8003f28:	480d      	ldr	r0, [pc, #52]	; (8003f60 <mainLoop_ublox_requests+0x70>)
 8003f2a:	f002 fe11 	bl	8006b50 <ublox_NavClock_req>
		}

		if (!ubloxNavDop.iTOW) {
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <mainLoop_ublox_requests+0x74>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <mainLoop_ublox_requests+0x4c>
			ublox_NavDop_req(&ubloxNavDop);
 8003f36:	480b      	ldr	r0, [pc, #44]	; (8003f64 <mainLoop_ublox_requests+0x74>)
 8003f38:	f002 fe5c 	bl	8006bf4 <ublox_NavDop_req>
		}

		if (!ubloxNavSvinfo.iTOW) {
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <mainLoop_ublox_requests+0x78>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <mainLoop_ublox_requests+0x5a>
			ublox_NavSvinfo_req(&ubloxNavSvinfo);
 8003f44:	4808      	ldr	r0, [pc, #32]	; (8003f68 <mainLoop_ublox_requests+0x78>)
 8003f46:	f002 fea7 	bl	8006c98 <ublox_NavSvinfo_req>
		}
	}
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	080136f0 	.word	0x080136f0
 8003f58:	20002810 	.word	0x20002810
 8003f5c:	20000398 	.word	0x20000398
 8003f60:	200003b4 	.word	0x200003b4
 8003f64:	200003c8 	.word	0x200003c8
 8003f68:	200003dc 	.word	0x200003dc

08003f6c <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	ubloxRespBf = ublox_All_resp();
 8003f70:	f002 fee6 	bl	8006d40 <ublox_All_resp>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <mainLoop_ublox_waitForResponses+0x1c>)
 8003f78:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	ubloxTimeAcc = ubloxNavClock.tAcc;
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <mainLoop_ublox_waitForResponses+0x20>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <mainLoop_ublox_waitForResponses+0x24>)
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000394 	.word	0x20000394
 8003f8c:	200003b4 	.word	0x200003b4
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8003f94:	b480      	push	{r7}
 8003f96:	b08d      	sub	sp, #52	; 0x34
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8003f9c:	2318      	movs	r3, #24
 8003f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003fae:	e013      	b.n	8003fd8 <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 8003fb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003fb8:	4413      	add	r3, r2
 8003fba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003fbe:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8003fc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8003fce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003fd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fdc:	2b17      	cmp	r3, #23
 8003fde:	d9e7      	bls.n	8003fb0 <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003fe6:	e098      	b.n	800411a <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8003fe8:	23ff      	movs	r3, #255	; 0xff
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 8003fee:	2381      	movs	r3, #129	; 0x81
 8003ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004000:	e044      	b.n	800408c <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8004002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004006:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800400a:	4413      	add	r3, r2
 800400c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= ubloxNavSvinfo.elev[elevCh];
 8004014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004018:	4a46      	ldr	r2, [pc, #280]	; (8004134 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800401a:	4413      	add	r3, r2
 800401c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004020:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (ubloxNavSvinfo.quality[elevCh] & 0x0dU) && !(ubloxNavSvinfo.quality[elevCh] & 0x10U);
 8004024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004028:	4a42      	ldr	r2, [pc, #264]	; (8004134 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800402a:	4413      	add	r3, r2
 800402c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004030:	f003 030d 	and.w	r3, r3, #13
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <mainLoop_ublox_svinfo_sort+0xbc>
 8004038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800403c:	4a3d      	ldr	r2, [pc, #244]	; (8004134 <mainLoop_ublox_svinfo_sort+0x1a0>)
 800403e:	4413      	add	r3, r2
 8004040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <mainLoop_ublox_svinfo_sort+0xbc>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <mainLoop_ublox_svinfo_sort+0xbe>
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 8004056:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 800405a:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800405e:	429a      	cmp	r2, r3
 8004060:	dd0f      	ble.n	8004082 <mainLoop_ublox_svinfo_sort+0xee>
 8004062:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 800406a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800406e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8004072:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 800407a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800407e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004086:	3301      	adds	r3, #1
 8004088:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800408c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004094:	429a      	cmp	r2, r3
 8004096:	d3b4      	bcc.n	8004002 <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8004098:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 800409c:	2b00      	cmp	r3, #0
 800409e:	dd04      	ble.n	80040aa <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 80040a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040a4:	3301      	adds	r3, #1
 80040a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 80040aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80040b6:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 80040b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040bc:	3b01      	subs	r3, #1
 80040be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 80040c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80040c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040ca:	e013      	b.n	80040f4 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 80040cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80040da:	440a      	add	r2, r1
 80040dc:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 80040e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80040e4:	440b      	add	r3, r1
 80040e6:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 80040ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ee:	3301      	adds	r3, #1
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80040f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3e5      	bcc.n	80040cc <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8004100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004104:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004108:	4413      	add	r3, r2
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004110:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004114:	3301      	adds	r3, #1
 8004116:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800411a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800411e:	2b17      	cmp	r3, #23
 8004120:	f67f af62 	bls.w	8003fe8 <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8004124:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8004128:	4618      	mov	r0, r3
 800412a:	3734      	adds	r7, #52	; 0x34
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	200003dc 	.word	0x200003dc

08004138 <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	/* Print all data, that was received */
	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_DOP) {
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <mainLoop_ublox_print+0x2c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <mainLoop_ublox_print+0x16>
# if 1
		ublox_NavDop_print(&ubloxNavDop);
 8004148:	4807      	ldr	r0, [pc, #28]	; (8004168 <mainLoop_ublox_print+0x30>)
 800414a:	f003 fb19 	bl	8007780 <ublox_NavDop_print>
# endif
	}

	if (ubloxRespBf & USART_UBLOX_RESP_BF_NAV_CLOCK) {
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <mainLoop_ublox_print+0x2c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <mainLoop_ublox_print+0x28>
# if 1
		ublox_NavClock_print(&ubloxNavClock);
 800415a:	4804      	ldr	r0, [pc, #16]	; (800416c <mainLoop_ublox_print+0x34>)
 800415c:	f003 fc4c 	bl	80079f8 <ublox_NavClock_print>
# if 0
		ublox_NavSvinfo_print(&ubloxNavSvinfo);
# endif
	}
#endif
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000394 	.word	0x20000394
 8004168:	200003c8 	.word	0x200003c8
 800416c:	200003b4 	.word	0x200003b4

08004170 <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <mainLoop_ow_temp_waitForResponse+0x54>)
 8004182:	4413      	add	r3, r2
 8004184:	78fc      	ldrb	r4, [r7, #3]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fd fd79 	bl	8001c80 <onewireDS18B20_tempRead>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <mainLoop_ow_temp_waitForResponse+0x58>)
 8004194:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <mainLoop_ow_temp_waitForResponse+0x58>)
 800419c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80041ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b2:	4a06      	ldr	r2, [pc, #24]	; (80041cc <mainLoop_ow_temp_waitForResponse+0x5c>)
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	edc3 7a00 	vstr	s15, [r3]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	200025c8 	.word	0x200025c8
 80041c8:	20000248 	.word	0x20000248
 80041cc:	2000024c 	.word	0x2000024c

080041d0 <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b097      	sub	sp, #92	; 0x5c
 80041d4:	af02      	add	r7, sp, #8
#if defined(LOGGING)
	uint8_t msg[64];

	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041dc:	e07e      	b.n	80042dc <mainLoop_ow_temp_print+0x10c>
		int16_t  t_int			= (owDs18b20_Temp[idx] >> 4);
 80041de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041e2:	4a44      	ldr	r2, [pc, #272]	; (80042f4 <mainLoop_ow_temp_print+0x124>)
 80041e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80041e8:	111b      	asrs	r3, r3, #4
 80041ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t t_frac			= (owDs18b20_Temp[idx] & 0xfU);
 80041ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041f2:	4a40      	ldr	r2, [pc, #256]	; (80042f4 <mainLoop_ow_temp_print+0x124>)
 80041f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (t_int < 0) {
 8004202:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	da16      	bge.n	8004238 <mainLoop_ow_temp_print+0x68>
			t_frac = ~t_frac;
 800420a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800420e:	43db      	mvns	r3, r3
 8004210:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			++t_frac;
 8004214:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004218:	3301      	adds	r3, #1
 800421a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			t_frac %= 1000U;
 800421e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004222:	4a35      	ldr	r2, [pc, #212]	; (80042f8 <mainLoop_ow_temp_print+0x128>)
 8004224:	fba2 1203 	umull	r1, r2, r2, r3
 8004228:	0992      	lsrs	r2, r2, #6
 800422a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800422e:	fb01 f202 	mul.w	r2, r1, r2
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}

		uint16_t t_fv1000	= 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if (t_frac & 0b1000) {
 800423e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <mainLoop_ow_temp_print+0x86>
			t_fv1000 += 500U;
 800424a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800424e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004252:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0100) {
 8004256:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <mainLoop_ow_temp_print+0x9c>
			t_fv1000 += 250U;
 8004262:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004266:	33fa      	adds	r3, #250	; 0xfa
 8004268:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0010) {
 800426c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <mainLoop_ow_temp_print+0xb2>
			t_fv1000 += 125U;
 8004278:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800427c:	337d      	adds	r3, #125	; 0x7d
 800427e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}
		if (t_frac & 0b0001) {
 8004282:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <mainLoop_ow_temp_print+0xc8>
			t_fv1000 +=  62U;
 800428e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004292:	333e      	adds	r3, #62	; 0x3e
 8004294:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		}

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
 8004298:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 800429c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80042a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042a4:	3305      	adds	r3, #5
 80042a6:	4915      	ldr	r1, [pc, #84]	; (80042fc <mainLoop_ow_temp_print+0x12c>)
 80042a8:	fb81 0103 	smull	r0, r1, r1, r3
 80042ac:	1089      	asrs	r1, r1, #2
 80042ae:	17db      	asrs	r3, r3, #31
 80042b0:	1acb      	subs	r3, r1, r3
 80042b2:	1d38      	adds	r0, r7, #4
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	4623      	mov	r3, r4
 80042ba:	4a11      	ldr	r2, [pc, #68]	; (8004300 <mainLoop_ow_temp_print+0x130>)
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	f00b fea5 	bl	801000c <sniprintf>
 80042c2:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	1d39      	adds	r1, r7, #4
 80042ca:	2319      	movs	r3, #25
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <mainLoop_ow_temp_print+0x134>)
 80042ce:	f009 ff9c 	bl	800e20a <HAL_UART_Transmit>
	for (uint8_t idx = 0U; idx < owDevicesCount; ++idx) {
 80042d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042d6:	3301      	adds	r3, #1
 80042d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <mainLoop_ow_temp_print+0x138>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80042e4:	429a      	cmp	r2, r3
 80042e6:	f4ff af7a 	bcc.w	80041de <mainLoop_ow_temp_print+0xe>
	}
#endif
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	3754      	adds	r7, #84	; 0x54
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	20000248 	.word	0x20000248
 80042f8:	10624dd3 	.word	0x10624dd3
 80042fc:	66666667 	.word	0x66666667
 8004300:	080136f4 	.word	0x080136f4
 8004304:	20002810 	.word	0x20002810
 8004308:	20000246 	.word	0x20000246

0800430c <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8004312:	463b      	mov	r3, r7
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <mainLoop_ow_tempAlarm_req+0x30>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	463a      	mov	r2, r7
 8004324:	4619      	mov	r1, r3
 8004326:	2001      	movs	r0, #1
 8004328:	f7fd fae8 	bl	80018fc <onewireMasterTree_search>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <mainLoop_ow_tempAlarm_req+0x34>)
 8004332:	701a      	strb	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000246 	.word	0x20000246
 8004340:	200002d5 	.word	0x200002d5

08004344 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b092      	sub	sp, #72	; 0x48
 8004348:	af00      	add	r7, sp, #0
#if defined(LOGGING)
	if (owAlarmCount) {
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <mainLoop_ow_tempAlarm_print+0x34>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <mainLoop_ow_tempAlarm_print+0x2c>
		uint8_t msg[64];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <mainLoop_ow_tempAlarm_print+0x34>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	1d38      	adds	r0, r7, #4
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <mainLoop_ow_tempAlarm_print+0x38>)
 800435a:	2140      	movs	r1, #64	; 0x40
 800435c:	f00b fe56 	bl	801000c <sniprintf>
 8004360:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004364:	b29a      	uxth	r2, r3
 8004366:	1d39      	adds	r1, r7, #4
 8004368:	2319      	movs	r3, #25
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <mainLoop_ow_tempAlarm_print+0x3c>)
 800436c:	f009 ff4d 	bl	800e20a <HAL_UART_Transmit>
	}
#endif
}
 8004370:	bf00      	nop
 8004372:	3748      	adds	r7, #72	; 0x48
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200002d5 	.word	0x200002d5
 800437c:	08013724 	.word	0x08013724
 8004380:	20002810 	.word	0x20002810

08004384 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	adc_VDDA 		= (3.0f * VREFINT_CAL) / adcVrefint_val;  // p. 448f
 8004388:	4b26      	ldr	r3, [pc, #152]	; (8004424 <mainLoop_adc_volts_resp+0xa0>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004392:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <mainLoop_adc_volts_resp+0xa4>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <mainLoop_adc_volts_resp+0xa8>)
 80043a8:	edc3 7a00 	vstr	s15, [r3]
	adcCh9_volts	= ( adcCh9_val * adc_VDDA / 65536.0f);
 80043ac:	4b20      	ldr	r3, [pc, #128]	; (8004430 <mainLoop_adc_volts_resp+0xac>)
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <mainLoop_adc_volts_resp+0xa8>)
 80043ba:	edd3 7a00 	vldr	s15, [r3]
 80043be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043c2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004434 <mainLoop_adc_volts_resp+0xb0>
 80043c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <mainLoop_adc_volts_resp+0xb4>)
 80043cc:	edc3 7a00 	vstr	s15, [r3]
	adcCh10_volts	= (adcCh10_val * adc_VDDA / 65536.0f);
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <mainLoop_adc_volts_resp+0xb8>)
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <mainLoop_adc_volts_resp+0xa8>)
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004434 <mainLoop_adc_volts_resp+0xb0>
 80043ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <mainLoop_adc_volts_resp+0xbc>)
 80043f0:	edc3 7a00 	vstr	s15, [r3]
	adcCh16_volts	= (adcCh16_val * adc_VDDA / 65536.0f);
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <mainLoop_adc_volts_resp+0xc0>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <mainLoop_adc_volts_resp+0xa8>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800440a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004434 <mainLoop_adc_volts_resp+0xb0>
 800440e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <mainLoop_adc_volts_resp+0xc4>)
 8004414:	edc3 7a00 	vstr	s15, [r3]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	08014368 	.word	0x08014368
 8004428:	20000222 	.word	0x20000222
 800442c:	20000224 	.word	0x20000224
 8004430:	2000021c 	.word	0x2000021c
 8004434:	47800000 	.word	0x47800000
 8004438:	20000228 	.word	0x20000228
 800443c:	2000021e 	.word	0x2000021e
 8004440:	2000022c 	.word	0x2000022c
 8004444:	20000220 	.word	0x20000220
 8004448:	20000230 	.word	0x20000230

0800444c <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 800444c:	b5b0      	push	{r4, r5, r7, lr}
 800444e:	b0a6      	sub	sp, #152	; 0x98
 8004450:	af04      	add	r7, sp, #16
#if defined(LOGGING)
	/* Show ADC values */
	uint8_t msg[128];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** ADC values:\r\n");
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	4a45      	ldr	r2, [pc, #276]	; (800456c <mainLoop_adc_volts_print+0x120>)
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	4618      	mov	r0, r3
 800445a:	f00b fdd7 	bl	801000c <sniprintf>
 800445e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004466:	b29a      	uxth	r2, r3
 8004468:	1d39      	adds	r1, r7, #4
 800446a:	2319      	movs	r3, #25
 800446c:	4840      	ldr	r0, [pc, #256]	; (8004570 <mainLoop_adc_volts_print+0x124>)
 800446e:	f009 fecc 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * VDDA                 = %1.4f V\r\n"
 8004472:	4b40      	ldr	r3, [pc, #256]	; (8004574 <mainLoop_adc_volts_print+0x128>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc f876 	bl	8000568 <__aeabi_f2d>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	1d38      	adds	r0, r7, #4
 8004482:	e9cd 2300 	strd	r2, r3, [sp]
 8004486:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <mainLoop_adc_volts_print+0x12c>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	f00b fdbf 	bl	801000c <sniprintf>
 800448e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
											   "  *\r\n",
		  adc_VDDA);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004496:	b29a      	uxth	r2, r3
 8004498:	1d39      	adds	r1, r7, #4
 800449a:	2319      	movs	r3, #25
 800449c:	4834      	ldr	r0, [pc, #208]	; (8004570 <mainLoop_adc_volts_print+0x124>)
 800449e:	f009 feb4 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch09) V_OCXO        = 0x%04x = %05d  -->  V_OCXO   = %1.3f V\r\n",
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <mainLoop_adc_volts_print+0x130>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	461d      	mov	r5, r3
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <mainLoop_adc_volts_print+0x130>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	461c      	mov	r4, r3
 80044ae:	4b34      	ldr	r3, [pc, #208]	; (8004580 <mainLoop_adc_volts_print+0x134>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f858 	bl	8000568 <__aeabi_f2d>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	1d38      	adds	r0, r7, #4
 80044be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044c2:	9400      	str	r4, [sp, #0]
 80044c4:	462b      	mov	r3, r5
 80044c6:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <mainLoop_adc_volts_print+0x138>)
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	f00b fd9f 	bl	801000c <sniprintf>
 80044ce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh9_val,
		  adcCh9_val,
		  adcCh9_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80044d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	1d39      	adds	r1, r7, #4
 80044da:	2319      	movs	r3, #25
 80044dc:	4824      	ldr	r0, [pc, #144]	; (8004570 <mainLoop_adc_volts_print+0x124>)
 80044de:	f009 fe94 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch10) V_HOLD        = 0x%04x = %05d  -->  V_HOLD   = %1.3f V\r\n",
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <mainLoop_adc_volts_print+0x13c>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	461d      	mov	r5, r3
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <mainLoop_adc_volts_print+0x13c>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	461c      	mov	r4, r3
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <mainLoop_adc_volts_print+0x140>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc f838 	bl	8000568 <__aeabi_f2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	1d38      	adds	r0, r7, #4
 80044fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004502:	9400      	str	r4, [sp, #0]
 8004504:	462b      	mov	r3, r5
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <mainLoop_adc_volts_print+0x144>)
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	f00b fd7f 	bl	801000c <sniprintf>
 800450e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh10_val,
		  adcCh10_val,
		  adcCh10_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004516:	b29a      	uxth	r2, r3
 8004518:	1d39      	adds	r1, r7, #4
 800451a:	2319      	movs	r3, #25
 800451c:	4814      	ldr	r0, [pc, #80]	; (8004570 <mainLoop_adc_volts_print+0x124>)
 800451e:	f009 fe74 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d  -->  V_DCFAMP = %1.3f V\r\n",
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <mainLoop_adc_volts_print+0x148>)
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	461d      	mov	r5, r3
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <mainLoop_adc_volts_print+0x148>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	461c      	mov	r4, r3
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <mainLoop_adc_volts_print+0x14c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc f818 	bl	8000568 <__aeabi_f2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	1d38      	adds	r0, r7, #4
 800453e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004542:	9400      	str	r4, [sp, #0]
 8004544:	462b      	mov	r3, r5
 8004546:	4a15      	ldr	r2, [pc, #84]	; (800459c <mainLoop_adc_volts_print+0x150>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	f00b fd5f 	bl	801000c <sniprintf>
 800454e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		  adcCh16_val,
		  adcCh16_val,
		  adcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004556:	b29a      	uxth	r2, r3
 8004558:	1d39      	adds	r1, r7, #4
 800455a:	2319      	movs	r3, #25
 800455c:	4804      	ldr	r0, [pc, #16]	; (8004570 <mainLoop_adc_volts_print+0x124>)
 800455e:	f009 fe54 	bl	800e20a <HAL_UART_Transmit>
#endif
}
 8004562:	bf00      	nop
 8004564:	3788      	adds	r7, #136	; 0x88
 8004566:	46bd      	mov	sp, r7
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	bf00      	nop
 800456c:	0801375c 	.word	0x0801375c
 8004570:	20002810 	.word	0x20002810
 8004574:	20000224 	.word	0x20000224
 8004578:	08013770 	.word	0x08013770
 800457c:	2000021c 	.word	0x2000021c
 8004580:	20000228 	.word	0x20000228
 8004584:	0801379c 	.word	0x0801379c
 8004588:	2000021e 	.word	0x2000021e
 800458c:	2000022c 	.word	0x2000022c
 8004590:	080137e0 	.word	0x080137e0
 8004594:	20000220 	.word	0x20000220
 8004598:	20000230 	.word	0x20000230
 800459c:	08013824 	.word	0x08013824

080045a0 <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
	/* Export accumulated deviation */
	if (timTicksDiff >= 0L) {
 80045a4:	4b31      	ldr	r3, [pc, #196]	; (800466c <mainLoop_tim_deviation_resp+0xcc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db20      	blt.n	80045ee <mainLoop_tim_deviation_resp+0x4e>
		timTicksSumDev = (int32_t) (+0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 80045ac:	4b2f      	ldr	r3, [pc, #188]	; (800466c <mainLoop_tim_deviation_resp+0xcc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004670 <mainLoop_tim_deviation_resp+0xd0>
 80045bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80045c0:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <mainLoop_tim_deviation_resp+0xd4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045cc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80045d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e4:	ee17 2a90 	vmov	r2, s15
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <mainLoop_tim_deviation_resp+0xd8>)
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e01f      	b.n	800462e <mainLoop_tim_deviation_resp+0x8e>
	}
	else {
		timTicksSumDev = (int32_t) (-0.5f + timTicksDiff * 100.0f / (6.0f * timTicksEvt));
 80045ee:	4b1f      	ldr	r3, [pc, #124]	; (800466c <mainLoop_tim_deviation_resp+0xcc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004670 <mainLoop_tim_deviation_resp+0xd0>
 80045fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <mainLoop_tim_deviation_resp+0xd4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004612:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800461e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004626:	ee17 2a90 	vmov	r2, s15
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <mainLoop_tim_deviation_resp+0xd8>)
 800462c:	601a      	str	r2, [r3, #0]
	}

	gMdevPsS = timTicksDiff * 100.0f / (6.0f * timTicksEvt);
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <mainLoop_tim_deviation_resp+0xcc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004670 <mainLoop_tim_deviation_resp+0xd0>
 800463e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <mainLoop_tim_deviation_resp+0xd4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <mainLoop_tim_deviation_resp+0xdc>)
 800465c:	edc3 7a00 	vstr	s15, [r3]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000384 	.word	0x20000384
 8004670:	42c80000 	.word	0x42c80000
 8004674:	20000380 	.word	0x20000380
 8004678:	2000038c 	.word	0x2000038c
 800467c:	200002fc 	.word	0x200002fc

08004680 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b0a9      	sub	sp, #164	; 0xa4
 8004684:	af04      	add	r7, sp, #16
		uint32_t ticks_d, ticks_f;
		uint8_t chr;
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** OCXO deviation against GPS PPS pulses:\r\n");
 8004686:	463b      	mov	r3, r7
 8004688:	4a5d      	ldr	r2, [pc, #372]	; (8004800 <mainLoop_tim_deviation_print+0x180>)
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	4618      	mov	r0, r3
 800468e:	f00b fcbd 	bl	801000c <sniprintf>
 8004692:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800469a:	b29a      	uxth	r2, r3
 800469c:	4639      	mov	r1, r7
 800469e:	2319      	movs	r3, #25
 80046a0:	4858      	ldr	r0, [pc, #352]	; (8004804 <mainLoop_tim_deviation_print+0x184>)
 80046a2:	f009 fdb2 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%+12.2f ps/s\r\n", 1e6 * tim2Ch2_ppm);
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <mainLoop_tim_deviation_print+0x188>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb ff5c 	bl	8000568 <__aeabi_f2d>
 80046b0:	a34f      	add	r3, pc, #316	; (adr r3, 80047f0 <mainLoop_tim_deviation_print+0x170>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb ffaf 	bl	8000618 <__aeabi_dmul>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4638      	mov	r0, r7
 80046c0:	e9cd 2300 	strd	r2, r3, [sp]
 80046c4:	4a51      	ldr	r2, [pc, #324]	; (800480c <mainLoop_tim_deviation_print+0x18c>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	f00b fca0 	bl	801000c <sniprintf>
 80046cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80046d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	4639      	mov	r1, r7
 80046d8:	2319      	movs	r3, #25
 80046da:	484a      	ldr	r0, [pc, #296]	; (8004804 <mainLoop_tim_deviation_print+0x184>)
 80046dc:	f009 fd95 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  *%011.2f Hz\r\n", (110e6 + tim2Ch2_ppm * 10.0f));
 80046e0:	4b49      	ldr	r3, [pc, #292]	; (8004808 <mainLoop_tim_deviation_print+0x188>)
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ee:	ee17 0a90 	vmov	r0, s15
 80046f2:	f7fb ff39 	bl	8000568 <__aeabi_f2d>
 80046f6:	a340      	add	r3, pc, #256	; (adr r3, 80047f8 <mainLoop_tim_deviation_print+0x178>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb fdd6 	bl	80002ac <__adddf3>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4638      	mov	r0, r7
 8004706:	e9cd 2300 	strd	r2, r3, [sp]
 800470a:	4a41      	ldr	r2, [pc, #260]	; (8004810 <mainLoop_tim_deviation_print+0x190>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	f00b fc7d 	bl	801000c <sniprintf>
 8004712:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		msg[3] = ' ';
 8004716:	2320      	movs	r3, #32
 8004718:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800471a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800471e:	b29a      	uxth	r2, r3
 8004720:	4639      	mov	r1, r7
 8004722:	2319      	movs	r3, #25
 8004724:	4837      	ldr	r0, [pc, #220]	; (8004804 <mainLoop_tim_deviation_print+0x184>)
 8004726:	f009 fd70 	bl	800e20a <HAL_UART_Transmit>

		if (timTicksDiff >= 0) {
 800472a:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <mainLoop_tim_deviation_print+0x194>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	db1a      	blt.n	8004768 <mainLoop_tim_deviation_print+0xe8>
		  ticks_d = (uint32_t)timTicksDiff / 10;
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <mainLoop_tim_deviation_print+0x194>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	4b37      	ldr	r3, [pc, #220]	; (8004818 <mainLoop_tim_deviation_print+0x198>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	08db      	lsrs	r3, r3, #3
 8004740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)timTicksDiff % 10;
 8004744:	4b33      	ldr	r3, [pc, #204]	; (8004814 <mainLoop_tim_deviation_print+0x194>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b33      	ldr	r3, [pc, #204]	; (8004818 <mainLoop_tim_deviation_print+0x198>)
 800474c:	fba3 1302 	umull	r1, r3, r3, r2
 8004750:	08d9      	lsrs	r1, r3, #3
 8004752:	460b      	mov	r3, r1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '+';
 8004760:	232b      	movs	r3, #43	; 0x2b
 8004762:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004766:	e01b      	b.n	80047a0 <mainLoop_tim_deviation_print+0x120>
		} else {
		  ticks_d = (uint32_t)(-timTicksDiff) / 10;
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <mainLoop_tim_deviation_print+0x194>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	425b      	negs	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <mainLoop_tim_deviation_print+0x198>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  ticks_f = (uint32_t)(-timTicksDiff) % 10;
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <mainLoop_tim_deviation_print+0x194>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	425b      	negs	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <mainLoop_tim_deviation_print+0x198>)
 8004786:	fba3 1302 	umull	r1, r3, r3, r2
 800478a:	08d9      	lsrs	r1, r3, #3
 800478c:	460b      	mov	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  chr = '-';
 800479a:	232d      	movs	r3, #45	; 0x2d
 800479c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		len = snprintf(((char*) msg), sizeof(msg), "  * ?%lu.%01lu accumulated deviation ticks  during  runtime = %lu sec  (%.2f ps/s).\r\n",
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <mainLoop_tim_deviation_print+0x19c>)
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <mainLoop_tim_deviation_print+0x1a0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fb fedd 	bl	8000568 <__aeabi_f2d>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4638      	mov	r0, r7
 80047b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047b8:	9401      	str	r4, [sp, #4]
 80047ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <mainLoop_tim_deviation_print+0x1a4>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	f00b fc20 	bl	801000c <sniprintf>
 80047cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  ticks_d, ticks_f,
			  timTicksEvt,
			  gMdevPsS);
		msg[4] = chr;
 80047d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80047d4:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4639      	mov	r1, r7
 80047de:	2319      	movs	r3, #25
 80047e0:	4808      	ldr	r0, [pc, #32]	; (8004804 <mainLoop_tim_deviation_print+0x184>)
 80047e2:	f009 fd12 	bl	800e20a <HAL_UART_Transmit>
	}
#endif
}
 80047e6:	bf00      	nop
 80047e8:	3794      	adds	r7, #148	; 0x94
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00000000 	.word	0x00000000
 80047f4:	412e8480 	.word	0x412e8480
 80047f8:	00000000 	.word	0x00000000
 80047fc:	419a39de 	.word	0x419a39de
 8004800:	08013868 	.word	0x08013868
 8004804:	20002810 	.word	0x20002810
 8004808:	20000388 	.word	0x20000388
 800480c:	08013898 	.word	0x08013898
 8004810:	080138ac 	.word	0x080138ac
 8004814:	20000384 	.word	0x20000384
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	20000380 	.word	0x20000380
 8004820:	200002fc 	.word	0x200002fc
 8004824:	080138bc 	.word	0x080138bc

08004828 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0a4      	sub	sp, #144	; 0x90
 800482c:	af02      	add	r7, sp, #8
#if defined(LOGGING)
# if 1
	/* Print all LOOP times */
	{
		const uint32_t tps = 60000000UL;
 800482e:	4bcf      	ldr	r3, [pc, #828]	; (8004b6c <mainLoop_dbg_tim2_ts_print+0x344>)
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		uint8_t msg[128];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** LOOP TIMES:\r\n");
 8004834:	463b      	mov	r3, r7
 8004836:	4ace      	ldr	r2, [pc, #824]	; (8004b70 <mainLoop_dbg_tim2_ts_print+0x348>)
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	4618      	mov	r0, r3
 800483c:	f00b fbe6 	bl	801000c <sniprintf>
 8004840:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004848:	b29a      	uxth	r2, r3
 800484a:	4639      	mov	r1, r7
 800484c:	2319      	movs	r3, #25
 800484e:	48c9      	ldr	r0, [pc, #804]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004850:	f009 fcdb 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 00_ubloxResp        %8ld us   @ %07ld ticks.\r\n", 0UL, gMLoop_Tim2_00_ubloxResp);
 8004854:	4bc8      	ldr	r3, [pc, #800]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4638      	mov	r0, r7
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	4ac7      	ldr	r2, [pc, #796]	; (8004b7c <mainLoop_dbg_tim2_ts_print+0x354>)
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	f00b fbd3 	bl	801000c <sniprintf>
 8004866:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800486a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800486e:	b29a      	uxth	r2, r3
 8004870:	4639      	mov	r1, r7
 8004872:	2319      	movs	r3, #25
 8004874:	48bf      	ldr	r0, [pc, #764]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004876:	f009 fcc8 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 01_tempResp         %8ld us.\r\n", ((tps + gMLoop_Tim2_01_tempResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800487a:	4bc1      	ldr	r3, [pc, #772]	; (8004b80 <mainLoop_dbg_tim2_ts_print+0x358>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004882:	441a      	add	r2, r3
 8004884:	4bbc      	ldr	r3, [pc, #752]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800488e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004892:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004896:	fb01 f202 	mul.w	r2, r1, r2
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	4ab9      	ldr	r2, [pc, #740]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	4638      	mov	r0, r7
 80048a6:	4ab8      	ldr	r2, [pc, #736]	; (8004b88 <mainLoop_dbg_tim2_ts_print+0x360>)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	f00b fbaf 	bl	801000c <sniprintf>
 80048ae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80048b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	4639      	mov	r1, r7
 80048ba:	2319      	movs	r3, #25
 80048bc:	48ad      	ldr	r0, [pc, #692]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80048be:	f009 fca4 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 02_adcResp          %8ld us.\r\n", ((tps + gMLoop_Tim2_02_adcResp 			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80048c2:	4bb2      	ldr	r3, [pc, #712]	; (8004b8c <mainLoop_dbg_tim2_ts_print+0x364>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048ca:	441a      	add	r2, r3
 80048cc:	4baa      	ldr	r3, [pc, #680]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048da:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80048de:	fb01 f202 	mul.w	r2, r1, r2
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	4aa7      	ldr	r2, [pc, #668]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	4638      	mov	r0, r7
 80048ee:	4aa8      	ldr	r2, [pc, #672]	; (8004b90 <mainLoop_dbg_tim2_ts_print+0x368>)
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	f00b fb8b 	bl	801000c <sniprintf>
 80048f6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80048fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048fe:	b29a      	uxth	r2, r3
 8004900:	4639      	mov	r1, r7
 8004902:	2319      	movs	r3, #25
 8004904:	489b      	ldr	r0, [pc, #620]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004906:	f009 fc80 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 03_deviationCalc    %8ld us.\r\n", ((tps + gMLoop_Tim2_03_deviationCalc		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800490a:	4ba2      	ldr	r3, [pc, #648]	; (8004b94 <mainLoop_dbg_tim2_ts_print+0x36c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004912:	441a      	add	r2, r3
 8004914:	4b98      	ldr	r3, [pc, #608]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800491e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004922:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004926:	fb01 f202 	mul.w	r2, r1, r2
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	4a95      	ldr	r2, [pc, #596]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	4638      	mov	r0, r7
 8004936:	4a98      	ldr	r2, [pc, #608]	; (8004b98 <mainLoop_dbg_tim2_ts_print+0x370>)
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	f00b fb67 	bl	801000c <sniprintf>
 800493e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004942:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004946:	b29a      	uxth	r2, r3
 8004948:	4639      	mov	r1, r7
 800494a:	2319      	movs	r3, #25
 800494c:	4889      	ldr	r0, [pc, #548]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 800494e:	f009 fc5c 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 04_pllCalc          %8ld us.\r\n", ((tps + gMLoop_Tim2_04_pllCalc			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004952:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <mainLoop_dbg_tim2_ts_print+0x374>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495a:	441a      	add	r2, r3
 800495c:	4b86      	ldr	r3, [pc, #536]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004966:	fbb3 f2f2 	udiv	r2, r3, r2
 800496a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800496e:	fb01 f202 	mul.w	r2, r1, r2
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	4a83      	ldr	r2, [pc, #524]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	4638      	mov	r0, r7
 800497e:	4a88      	ldr	r2, [pc, #544]	; (8004ba0 <mainLoop_dbg_tim2_ts_print+0x378>)
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	f00b fb43 	bl	801000c <sniprintf>
 8004986:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800498a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800498e:	b29a      	uxth	r2, r3
 8004990:	4639      	mov	r1, r7
 8004992:	2319      	movs	r3, #25
 8004994:	4877      	ldr	r0, [pc, #476]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004996:	f009 fc38 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 05_svSort           %8ld us.\r\n", ((tps + gMLoop_Tim2_05_svSort			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 800499a:	4b82      	ldr	r3, [pc, #520]	; (8004ba4 <mainLoop_dbg_tim2_ts_print+0x37c>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049a2:	441a      	add	r2, r3
 80049a4:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80049ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80049b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80049b6:	fb01 f202 	mul.w	r2, r1, r2
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	4a71      	ldr	r2, [pc, #452]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	4638      	mov	r0, r7
 80049c6:	4a78      	ldr	r2, [pc, #480]	; (8004ba8 <mainLoop_dbg_tim2_ts_print+0x380>)
 80049c8:	2180      	movs	r1, #128	; 0x80
 80049ca:	f00b fb1f 	bl	801000c <sniprintf>
 80049ce:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80049d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4639      	mov	r1, r7
 80049da:	2319      	movs	r3, #25
 80049dc:	4865      	ldr	r0, [pc, #404]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 80049de:	f009 fc14 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 10_ubloxReq         %8ld us.\r\n", ((tps + gMLoop_Tim2_10_ubloxReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <mainLoop_dbg_tim2_ts_print+0x384>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ea:	441a      	add	r2, r3
 80049ec:	4b62      	ldr	r3, [pc, #392]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80049f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80049fa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80049fe:	fb01 f202 	mul.w	r2, r1, r2
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	4a5f      	ldr	r2, [pc, #380]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	4a68      	ldr	r2, [pc, #416]	; (8004bb0 <mainLoop_dbg_tim2_ts_print+0x388>)
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	f00b fafb 	bl	801000c <sniprintf>
 8004a16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	4639      	mov	r1, r7
 8004a22:	2319      	movs	r3, #25
 8004a24:	4853      	ldr	r0, [pc, #332]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004a26:	f009 fbf0 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 11_tempReq          %8ld us.\r\n", ((tps + gMLoop_Tim2_11_tempReq			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004a2a:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <mainLoop_dbg_tim2_ts_print+0x38c>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a32:	441a      	add	r2, r3
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a42:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004a46:	fb01 f202 	mul.w	r2, r1, r2
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	4a4d      	ldr	r2, [pc, #308]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	4638      	mov	r0, r7
 8004a56:	4a58      	ldr	r2, [pc, #352]	; (8004bb8 <mainLoop_dbg_tim2_ts_print+0x390>)
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	f00b fad7 	bl	801000c <sniprintf>
 8004a5e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	4639      	mov	r1, r7
 8004a6a:	2319      	movs	r3, #25
 8004a6c:	4841      	ldr	r0, [pc, #260]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004a6e:	f009 fbcc 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 20_hoRelayDacOut    %8ld us.\r\n", ((tps + gMLoop_Tim2_20_hoRelayDacOut		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004a72:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <mainLoop_dbg_tim2_ts_print+0x394>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7a:	441a      	add	r2, r3
 8004a7c:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a8a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004a8e:	fb01 f202 	mul.w	r2, r1, r2
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	4a3b      	ldr	r2, [pc, #236]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	4a48      	ldr	r2, [pc, #288]	; (8004bc0 <mainLoop_dbg_tim2_ts_print+0x398>)
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	f00b fab3 	bl	801000c <sniprintf>
 8004aa6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	2319      	movs	r3, #25
 8004ab4:	482f      	ldr	r0, [pc, #188]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004ab6:	f009 fba8 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 21_ubloxPrint       %8ld us.\r\n", ((tps + gMLoop_Tim2_21_ubloxPrint		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <mainLoop_dbg_tim2_ts_print+0x39c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac2:	441a      	add	r2, r3
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004ace:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ad2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004ad6:	fb01 f202 	mul.w	r2, r1, r2
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	4a38      	ldr	r2, [pc, #224]	; (8004bc8 <mainLoop_dbg_tim2_ts_print+0x3a0>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	f00b fa8f 	bl	801000c <sniprintf>
 8004aee:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	4639      	mov	r1, r7
 8004afa:	2319      	movs	r3, #25
 8004afc:	481d      	ldr	r0, [pc, #116]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004afe:	f009 fb84 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 22_deviationPrint   %8ld us.\r\n", ((tps + gMLoop_Tim2_22_deviationPrint	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004b02:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <mainLoop_dbg_tim2_ts_print+0x3a4>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b0a:	441a      	add	r2, r3
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b1a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004b1e:	fb01 f202 	mul.w	r2, r1, r2
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <mainLoop_dbg_tim2_ts_print+0x35c>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <mainLoop_dbg_tim2_ts_print+0x3a8>)
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	f00b fa6b 	bl	801000c <sniprintf>
 8004b36:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	4639      	mov	r1, r7
 8004b42:	2319      	movs	r3, #25
 8004b44:	480b      	ldr	r0, [pc, #44]	; (8004b74 <mainLoop_dbg_tim2_ts_print+0x34c>)
 8004b46:	f009 fb60 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 23_pllPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_23_pllPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004b4a:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <mainLoop_dbg_tim2_ts_print+0x3ac>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b52:	441a      	add	r2, r3
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <mainLoop_dbg_tim2_ts_print+0x350>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b62:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004b66:	fb01 f202 	mul.w	r2, r1, r2
 8004b6a:	e035      	b.n	8004bd8 <mainLoop_dbg_tim2_ts_print+0x3b0>
 8004b6c:	03938700 	.word	0x03938700
 8004b70:	08013914 	.word	0x08013914
 8004b74:	20002810 	.word	0x20002810
 8004b78:	20000308 	.word	0x20000308
 8004b7c:	08013928 	.word	0x08013928
 8004b80:	2000030c 	.word	0x2000030c
 8004b84:	88888889 	.word	0x88888889
 8004b88:	0801395c 	.word	0x0801395c
 8004b8c:	20000310 	.word	0x20000310
 8004b90:	08013980 	.word	0x08013980
 8004b94:	20000314 	.word	0x20000314
 8004b98:	080139a4 	.word	0x080139a4
 8004b9c:	20000318 	.word	0x20000318
 8004ba0:	080139c8 	.word	0x080139c8
 8004ba4:	2000031c 	.word	0x2000031c
 8004ba8:	080139ec 	.word	0x080139ec
 8004bac:	20000320 	.word	0x20000320
 8004bb0:	08013a10 	.word	0x08013a10
 8004bb4:	20000324 	.word	0x20000324
 8004bb8:	08013a34 	.word	0x08013a34
 8004bbc:	20000328 	.word	0x20000328
 8004bc0:	08013a58 	.word	0x08013a58
 8004bc4:	2000032c 	.word	0x2000032c
 8004bc8:	08013a7c 	.word	0x08013a7c
 8004bcc:	20000330 	.word	0x20000330
 8004bd0:	08013aa0 	.word	0x08013aa0
 8004bd4:	20000334 	.word	0x20000334
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	4a5b      	ldr	r2, [pc, #364]	; (8004d48 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	4638      	mov	r0, r7
 8004be4:	4a59      	ldr	r2, [pc, #356]	; (8004d4c <mainLoop_dbg_tim2_ts_print+0x524>)
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	f00b fa10 	bl	801000c <sniprintf>
 8004bec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	2319      	movs	r3, #25
 8004bfa:	4855      	ldr	r0, [pc, #340]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004bfc:	f009 fb05 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 24_adcPrint         %8ld us.\r\n", ((tps + gMLoop_Tim2_24_adcPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004c00:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <mainLoop_dbg_tim2_ts_print+0x52c>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c08:	441a      	add	r2, r3
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c14:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c18:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004c1c:	fb01 f202 	mul.w	r2, r1, r2
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	4a49      	ldr	r2, [pc, #292]	; (8004d48 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <mainLoop_dbg_tim2_ts_print+0x534>)
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	f00b f9ec 	bl	801000c <sniprintf>
 8004c34:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	4639      	mov	r1, r7
 8004c40:	2319      	movs	r3, #25
 8004c42:	4843      	ldr	r0, [pc, #268]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004c44:	f009 fae1 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 25_tempPrint        %8ld us.\r\n", ((tps + gMLoop_Tim2_25_tempPrint			- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004c48:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <mainLoop_dbg_tim2_ts_print+0x538>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c50:	441a      	add	r2, r3
 8004c52:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c60:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004c64:	fb01 f202 	mul.w	r2, r1, r2
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	4a37      	ldr	r2, [pc, #220]	; (8004d48 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	4638      	mov	r0, r7
 8004c74:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <mainLoop_dbg_tim2_ts_print+0x53c>)
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	f00b f9c8 	bl	801000c <sniprintf>
 8004c7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	4639      	mov	r1, r7
 8004c88:	2319      	movs	r3, #25
 8004c8a:	4831      	ldr	r0, [pc, #196]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004c8c:	f009 fabd 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 26_lcd16x2Print     %8ld us.\r\n", ((tps + gMLoop_Tim2_26_lcd16x2Print		- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <mainLoop_dbg_tim2_ts_print+0x540>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004ca4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ca8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004cac:	fb01 f202 	mul.w	r2, r1, r2
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	4638      	mov	r0, r7
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <mainLoop_dbg_tim2_ts_print+0x544>)
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	f00b f9a4 	bl	801000c <sniprintf>
 8004cc4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	4639      	mov	r1, r7
 8004cd0:	2319      	movs	r3, #25
 8004cd2:	481f      	ldr	r0, [pc, #124]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004cd4:	f009 fa99 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * 27_lcd240x128Print  %8ld us.\r\n", ((tps + gMLoop_Tim2_27_lcd240x128Print	- gMLoop_Tim2_00_ubloxResp) % tps) / 60);
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <mainLoop_dbg_tim2_ts_print+0x548>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce0:	441a      	add	r2, r3
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <mainLoop_dbg_tim2_ts_print+0x530>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004cec:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cf0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004cf4:	fb01 f202 	mul.w	r2, r1, r2
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <mainLoop_dbg_tim2_ts_print+0x520>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	4638      	mov	r0, r7
 8004d04:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <mainLoop_dbg_tim2_ts_print+0x54c>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	f00b f980 	bl	801000c <sniprintf>
 8004d0c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	4639      	mov	r1, r7
 8004d18:	2319      	movs	r3, #25
 8004d1a:	480d      	ldr	r0, [pc, #52]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004d1c:	f009 fa75 	bl	800e20a <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
 8004d20:	463b      	mov	r3, r7
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <mainLoop_dbg_tim2_ts_print+0x550>)
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	4618      	mov	r0, r3
 8004d28:	f00b f970 	bl	801000c <sniprintf>
 8004d2c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8004d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	4639      	mov	r1, r7
 8004d38:	2319      	movs	r3, #25
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <mainLoop_dbg_tim2_ts_print+0x528>)
 8004d3c:	f009 fa65 	bl	800e20a <HAL_UART_Transmit>
	}
# endif
#endif
}
 8004d40:	bf00      	nop
 8004d42:	3788      	adds	r7, #136	; 0x88
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	88888889 	.word	0x88888889
 8004d4c:	08013ac4 	.word	0x08013ac4
 8004d50:	20002810 	.word	0x20002810
 8004d54:	20000338 	.word	0x20000338
 8004d58:	20000308 	.word	0x20000308
 8004d5c:	08013ae8 	.word	0x08013ae8
 8004d60:	2000033c 	.word	0x2000033c
 8004d64:	08013b0c 	.word	0x08013b0c
 8004d68:	20000340 	.word	0x20000340
 8004d6c:	08013b30 	.word	0x08013b30
 8004d70:	20000344 	.word	0x20000344
 8004d74:	08013b54 	.word	0x08013b54
 8004d78:	08013b78 	.word	0x08013b78
 8004d7c:	00000000 	.word	0x00000000

08004d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d82:	b0a9      	sub	sp, #164	; 0xa4
 8004d84:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004d86:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8e:	e004      	b.n	8004d9a <main+0x1a>
 8004d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d94:	3b01      	subs	r3, #1
 8004d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f6      	bne.n	8004d90 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004da2:	f002 fecf 	bl	8007b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004da6:	f000 fbe3 	bl	8005570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004daa:	f7fc fbd3 	bl	8001554 <MX_GPIO_Init>
  MX_RTC_Init();
 8004dae:	f000 fc59 	bl	8005664 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004db2:	f001 f93b 	bl	800602c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004db6:	f001 f969 	bl	800608c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004dba:	f7fc f919 	bl	8000ff0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004dbe:	f7fc ffbb 	bl	8001d38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004dc2:	f000 fca7 	bl	8005714 <MX_SPI1_Init>
  MX_DMA_Init();
 8004dc6:	f7fc fb9f 	bl	8001508 <MX_DMA_Init>
  MX_TIM2_Init();
 8004dca:	f000 ff11 	bl	8005bf0 <MX_TIM2_Init>


#if defined(LOGGING)
  /* UART: DEBUGGING terminal */
  {
	uint8_t msg[] = "\r\n\r\n**************************\r\n*** sGPSDO a la DF4IAH ***\r\n**************************\r\n\r\n";
 8004dce:	4aab      	ldr	r2, [pc, #684]	; (800507c <main+0x2fc>)
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	225b      	movs	r2, #91	; 0x5b
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f00a fc97 	bl	800f70c <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004dde:	f107 0108 	add.w	r1, r7, #8
 8004de2:	2319      	movs	r3, #25
 8004de4:	225a      	movs	r2, #90	; 0x5a
 8004de6:	48a6      	ldr	r0, [pc, #664]	; (8005080 <main+0x300>)
 8004de8:	f009 fa0f 	bl	800e20a <HAL_UART_Transmit>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004df0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fd f849 	bl	8001e8c <i2cBusGetDeviceList>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d015      	beq.n	8004e36 <main+0xb6>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDacModeLast	= 0b11;
 8004e0a:	4b9e      	ldr	r3, [pc, #632]	; (8005084 <main+0x304>)
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	701a      	strb	r2, [r3, #0]
	  i2cDacMode		= 0b11;
 8004e10:	4b9d      	ldr	r3, [pc, #628]	; (8005088 <main+0x308>)
 8004e12:	2203      	movs	r2, #3
 8004e14:	701a      	strb	r2, [r3, #0]
	  i2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <main+0x30c>)
 8004e18:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8004e1c:	801a      	strh	r2, [r3, #0]
	  i2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8004e1e:	4b9c      	ldr	r3, [pc, #624]	; (8005090 <main+0x310>)
 8004e20:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8004e24:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 8004e26:	4b98      	ldr	r3, [pc, #608]	; (8005088 <main+0x308>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	4a99      	ldr	r2, [pc, #612]	; (8005090 <main+0x310>)
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	2000      	movs	r0, #0
 8004e32:	f7fd f881 	bl	8001f38 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <main+0xc4>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004e40:	f7fd fa4a 	bl	80022d8 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <main+0xd2>
	  i2cSmartLCD_Gfx240x128_Welcome();
 8004e4e:	f7fd fee1 	bl	8002c14 <i2cSmartLCD_Gfx240x128_Welcome>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	f107 030c 	add.w	r3, r7, #12
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	611a      	str	r2, [r3, #16]
 8004e66:	615a      	str	r2, [r3, #20]
 8004e68:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	4a89      	ldr	r2, [pc, #548]	; (8005094 <main+0x314>)
 8004e70:	211f      	movs	r1, #31
 8004e72:	4618      	mov	r0, r3
 8004e74:	f00b f8ca 	bl	801000c <sniprintf>
 8004e78:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f107 0108 	add.w	r1, r7, #8
 8004e82:	2319      	movs	r3, #25
 8004e84:	487e      	ldr	r0, [pc, #504]	; (8005080 <main+0x300>)
 8004e86:	f009 f9c0 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8004e8a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8004e8e:	f107 0008 	add.w	r0, r7, #8
 8004e92:	4a81      	ldr	r2, [pc, #516]	; (8005098 <main+0x318>)
 8004e94:	211f      	movs	r1, #31
 8004e96:	f00b f8b9 	bl	801000c <sniprintf>
 8004e9a:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	f107 0108 	add.w	r1, r7, #8
 8004ea4:	2319      	movs	r3, #25
 8004ea6:	4876      	ldr	r0, [pc, #472]	; (8005080 <main+0x300>)
 8004ea8:	f009 f9af 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8004eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eae:	f107 0008 	add.w	r0, r7, #8
 8004eb2:	4a7a      	ldr	r2, [pc, #488]	; (800509c <main+0x31c>)
 8004eb4:	211f      	movs	r1, #31
 8004eb6:	f00b f8a9 	bl	801000c <sniprintf>
 8004eba:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8004ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	f107 0108 	add.w	r1, r7, #8
 8004ec4:	2319      	movs	r3, #25
 8004ec6:	486e      	ldr	r0, [pc, #440]	; (8005080 <main+0x300>)
 8004ec8:	f009 f99f 	bl	800e20a <HAL_UART_Transmit>
#endif


  /* GPIO: Acoustic boot check */
  {
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2110      	movs	r1, #16
 8004ed0:	4873      	ldr	r0, [pc, #460]	; (80050a0 <main+0x320>)
 8004ed2:	f005 f8c1 	bl	800a058 <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004ed6:	20fa      	movs	r0, #250	; 0xfa
 8004ed8:	f002 fe74 	bl	8007bc4 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8004edc:	2201      	movs	r2, #1
 8004ede:	2110      	movs	r1, #16
 8004ee0:	486f      	ldr	r0, [pc, #444]	; (80050a0 <main+0x320>)
 8004ee2:	f005 f8b9 	bl	800a058 <HAL_GPIO_WritePin>
	  HAL_Delay(250UL);
 8004ee6:	20fa      	movs	r0, #250	; 0xfa
 8004ee8:	f002 fe6c 	bl	8007bc4 <HAL_Delay>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2110      	movs	r1, #16
 8004ef0:	486b      	ldr	r0, [pc, #428]	; (80050a0 <main+0x320>)
 8004ef2:	f005 f8b1 	bl	800a058 <HAL_GPIO_WritePin>
  }


  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	; (80050a4 <main+0x324>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004efc:	4b69      	ldr	r3, [pc, #420]	; (80050a4 <main+0x324>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f0a:	f005 f8a5 	bl	800a058 <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8004f0e:	f001 fda5 	bl	8006a5c <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8004f12:	f001 fa59 	bl	80063c8 <ubloxUartSpeedFast>

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 8004f16:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <main+0x328>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  do {
	  if (ubloxSetFrequency(F_COMP_HZ)) {
 8004f22:	2001      	movs	r0, #1
 8004f24:	f001 fbdc 	bl	80066e0 <ubloxSetFrequency>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d023      	beq.n	8004f76 <main+0x1f6>
#if defined(LOGGING)
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
 8004f2e:	4a5f      	ldr	r2, [pc, #380]	; (80050ac <main+0x32c>)
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	4611      	mov	r1, r2
 8004f36:	2252      	movs	r2, #82	; 0x52
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f00a fbe7 	bl	800f70c <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004f3e:	f107 0108 	add.w	r1, r7, #8
 8004f42:	2319      	movs	r3, #25
 8004f44:	2251      	movs	r2, #81	; 0x51
 8004f46:	484e      	ldr	r0, [pc, #312]	; (8005080 <main+0x300>)
 8004f48:	f009 f95f 	bl	800e20a <HAL_UART_Transmit>
		  }
#endif
		  if (!(--ubloxRetries)) {
 8004f4c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004f56:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <main+0x1ec>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8004f5e:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <main+0x330>)
 8004f60:	677b      	str	r3, [r7, #116]	; 0x74
			  uint32_t aircr_val = 0x05fa0304UL;
 8004f62:	4b54      	ldr	r3, [pc, #336]	; (80050b4 <main+0x334>)
 8004f64:	673b      	str	r3, [r7, #112]	; 0x70
			  *AIRCR = aircr_val;
 8004f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f6a:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300);
 8004f6c:	f240 5014 	movw	r0, #1300	; 0x514
 8004f70:	f002 fe28 	bl	8007bc4 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8004f74:	e011      	b.n	8004f9a <main+0x21a>
			  uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8004f76:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <main+0x338>)
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2252      	movs	r2, #82	; 0x52
 8004f80:	4618      	mov	r0, r3
 8004f82:	f00a fbc3 	bl	800f70c <memcpy>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8004f86:	f107 0108 	add.w	r1, r7, #8
 8004f8a:	2319      	movs	r3, #25
 8004f8c:	2251      	movs	r2, #81	; 0x51
 8004f8e:	483c      	ldr	r0, [pc, #240]	; (8005080 <main+0x300>)
 8004f90:	f009 f93b 	bl	800e20a <HAL_UART_Transmit>
		  gpioHoRelayOut = GPIO_PIN_SET;
 8004f94:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <main+0x328>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
	  break;
 8004f9a:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004f9c:	4b42      	ldr	r3, [pc, #264]	; (80050a8 <main+0x328>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	483e      	ldr	r0, [pc, #248]	; (80050a0 <main+0x320>)
 8004fa6:	f005 f857 	bl	800a058 <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8004faa:	f7fc fa63 	bl	8001474 <adc_init>


  /* TIMER: Prepare the Time capture for CH2 (GPS PPS) & CH4 (DCF77 Phase) */
  tim_start();
 8004fae:	f000 ff8b 	bl	8005ec8 <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <main+0x244>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f7fd f9ae 	bl	8002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <main+0x256>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fd fe57 	bl	8002c84 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	4838      	ldr	r0, [pc, #224]	; (80050bc <main+0x33c>)
 8004fda:	f7fe fd33 	bl	8003a44 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 8004fde:	4a37      	ldr	r2, [pc, #220]	; (80050bc <main+0x33c>)
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7fc fc8a 	bl	80018fc <onewireMasterTree_search>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b34      	ldr	r3, [pc, #208]	; (80050c0 <main+0x340>)
 8004fee:	701a      	strb	r2, [r3, #0]
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", owDevicesCount);
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <main+0x340>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f107 0008 	add.w	r0, r7, #8
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <main+0x344>)
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	f00b f806 	bl	801000c <sniprintf>
 8005000:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	b29a      	uxth	r2, r3
 8005006:	f107 0108 	add.w	r1, r7, #8
 800500a:	2319      	movs	r3, #25
 800500c:	481c      	ldr	r0, [pc, #112]	; (8005080 <main+0x300>)
 800500e:	f009 f8fc 	bl	800e20a <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005018:	e00e      	b.n	8005038 <main+0x2b8>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 800501a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4a26      	ldr	r2, [pc, #152]	; (80050bc <main+0x33c>)
 8005022:	4413      	add	r3, r2
 8005024:	2228      	movs	r2, #40	; 0x28
 8005026:	2132      	movs	r1, #50	; 0x32
 8005028:	200c      	movs	r0, #12
 800502a:	f7fc fd5f 	bl	8001aec <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 800502e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005032:	3301      	adds	r3, #1
 8005034:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <main+0x340>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005040:	429a      	cmp	r2, r3
 8005042:	d3ea      	bcc.n	800501a <main+0x29a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 800504a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 80c0 	bne.w	80051d4 <main+0x454>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 8005054:	f7fe ff8a 	bl	8003f6c <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 8005058:	481b      	ldr	r0, [pc, #108]	; (80050c8 <main+0x348>)
 800505a:	f000 ff45 	bl	8005ee8 <tim_get_timeStamp>
 800505e:	4603      	mov	r3, r0
 8005060:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <main+0x34c>)
 8005062:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800506a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800506e:	f004 fff3 	bl	800a058 <HAL_GPIO_WritePin>
#endif

		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005072:	2300      	movs	r3, #0
 8005074:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8005078:	e047      	b.n	800510a <main+0x38a>
 800507a:	bf00      	nop
 800507c:	08013bfc 	.word	0x08013bfc
 8005080:	20002810 	.word	0x20002810
 8005084:	20000254 	.word	0x20000254
 8005088:	20000255 	.word	0x20000255
 800508c:	20000256 	.word	0x20000256
 8005090:	20000258 	.word	0x20000258
 8005094:	08013b80 	.word	0x08013b80
 8005098:	08013b94 	.word	0x08013b94
 800509c:	08013bb0 	.word	0x08013bb0
 80050a0:	48000400 	.word	0x48000400
 80050a4:	20000244 	.word	0x20000244
 80050a8:	20000245 	.word	0x20000245
 80050ac:	08013c58 	.word	0x08013c58
 80050b0:	e000ed0c 	.word	0xe000ed0c
 80050b4:	05fa0304 	.word	0x05fa0304
 80050b8:	08013cac 	.word	0x08013cac
 80050bc:	200025c8 	.word	0x200025c8
 80050c0:	20000246 	.word	0x20000246
 80050c4:	08013bcc 	.word	0x08013bcc
 80050c8:	20002740 	.word	0x20002740
 80050cc:	20000308 	.word	0x20000308
			  if (gMtempWaitUntil[owDeviceIdx]) {
 80050d0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80050d4:	4aa4      	ldr	r2, [pc, #656]	; (8005368 <main+0x5e8>)
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <main+0x380>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 80050de:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80050e2:	4aa1      	ldr	r2, [pc, #644]	; (8005368 <main+0x5e8>)
 80050e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e8:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff f83e 	bl	8004170 <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 80050f4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80050f8:	4a9b      	ldr	r2, [pc, #620]	; (8005368 <main+0x5e8>)
 80050fa:	2100      	movs	r1, #0
 80050fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005100:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005104:	3301      	adds	r3, #1
 8005106:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800510a:	4b98      	ldr	r3, [pc, #608]	; (800536c <main+0x5ec>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8005112:	429a      	cmp	r2, r3
 8005114:	d3dc      	bcc.n	80050d0 <main+0x350>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 8005116:	4896      	ldr	r0, [pc, #600]	; (8005370 <main+0x5f0>)
 8005118:	f000 fee6 	bl	8005ee8 <tim_get_timeStamp>
 800511c:	4603      	mov	r3, r0
 800511e:	4a95      	ldr	r2, [pc, #596]	; (8005374 <main+0x5f4>)
 8005120:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 8005122:	f7fc f9d3 	bl	80014cc <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 8005126:	f7ff f92d 	bl	8004384 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 800512a:	4891      	ldr	r0, [pc, #580]	; (8005370 <main+0x5f0>)
 800512c:	f000 fedc 	bl	8005ee8 <tim_get_timeStamp>
 8005130:	4603      	mov	r3, r0
 8005132:	4a91      	ldr	r2, [pc, #580]	; (8005378 <main+0x5f8>)
 8005134:	6013      	str	r3, [r2, #0]


		  /* Calculate Maidenhead Locator if not done, yet */
		  if ((gLocator[0] == 0) && ubloxNavPosllh.iTOW) {
 8005136:	4b91      	ldr	r3, [pc, #580]	; (800537c <main+0x5fc>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d12d      	bne.n	800519a <main+0x41a>
 800513e:	4b90      	ldr	r3, [pc, #576]	; (8005380 <main+0x600>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d029      	beq.n	800519a <main+0x41a>
			  main_get_MaidenheadLocator_from_LatLon(sizeof(gLocator), gLocator, ubloxNavPosllh.lat * 1e-7, ubloxNavPosllh.lon * 1e-7);
 8005146:	4b8e      	ldr	r3, [pc, #568]	; (8005380 <main+0x600>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb f9fa 	bl	8000544 <__aeabi_i2d>
 8005150:	a383      	add	r3, pc, #524	; (adr r3, 8005360 <main+0x5e0>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f7fb fa5f 	bl	8000618 <__aeabi_dmul>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	f7fb fd51 	bl	8000c08 <__aeabi_d2f>
 8005166:	4604      	mov	r4, r0
 8005168:	4b85      	ldr	r3, [pc, #532]	; (8005380 <main+0x600>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb f9e9 	bl	8000544 <__aeabi_i2d>
 8005172:	a37b      	add	r3, pc, #492	; (adr r3, 8005360 <main+0x5e0>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa4e 	bl	8000618 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f7fb fd40 	bl	8000c08 <__aeabi_d2f>
 8005188:	4603      	mov	r3, r0
 800518a:	ee00 3a90 	vmov	s1, r3
 800518e:	ee00 4a10 	vmov	s0, r4
 8005192:	497a      	ldr	r1, [pc, #488]	; (800537c <main+0x5fc>)
 8005194:	2007      	movs	r0, #7
 8005196:	f7fe fc6d 	bl	8003a74 <main_get_MaidenheadLocator_from_LatLon>
		  }

		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 800519a:	f7ff fa01 	bl	80045a0 <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 800519e:	4874      	ldr	r0, [pc, #464]	; (8005370 <main+0x5f0>)
 80051a0:	f000 fea2 	bl	8005ee8 <tim_get_timeStamp>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4a77      	ldr	r2, [pc, #476]	; (8005384 <main+0x604>)
 80051a8:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  mainLoop_PLL_calc();
 80051aa:	f7fe fd57 	bl	8003c5c <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 80051ae:	4870      	ldr	r0, [pc, #448]	; (8005370 <main+0x5f0>)
 80051b0:	f000 fe9a 	bl	8005ee8 <tim_get_timeStamp>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4a74      	ldr	r2, [pc, #464]	; (8005388 <main+0x608>)
 80051b8:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 80051ba:	4874      	ldr	r0, [pc, #464]	; (800538c <main+0x60c>)
 80051bc:	f7fe feea 	bl	8003f94 <mainLoop_ublox_svinfo_sort>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b72      	ldr	r3, [pc, #456]	; (8005390 <main+0x610>)
 80051c6:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 80051c8:	4869      	ldr	r0, [pc, #420]	; (8005370 <main+0x5f0>)
 80051ca:	f000 fe8d 	bl	8005ee8 <tim_get_timeStamp>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a70      	ldr	r2, [pc, #448]	; (8005394 <main+0x614>)
 80051d2:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Request these frames */
		  ubloxNavClock.iTOW	= 0UL;
 80051d4:	4b70      	ldr	r3, [pc, #448]	; (8005398 <main+0x618>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
		  ubloxNavDop.iTOW		= 0UL;
 80051da:	4b70      	ldr	r3, [pc, #448]	; (800539c <main+0x61c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
		  ubloxNavSvinfo.iTOW	= 0UL;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <main+0x620>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 80051e6:	f7fe fe83 	bl	8003ef0 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 80051ea:	4861      	ldr	r0, [pc, #388]	; (8005370 <main+0x5f0>)
 80051ec:	f000 fe7c 	bl	8005ee8 <tim_get_timeStamp>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4a6c      	ldr	r2, [pc, #432]	; (80053a4 <main+0x624>)
 80051f4:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 80051f6:	f7ff f889 	bl	800430c <mainLoop_ow_tempAlarm_req>

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 80051fa:	4b5c      	ldr	r3, [pc, #368]	; (800536c <main+0x5ec>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <main+0x4c4>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 8005202:	4b69      	ldr	r3, [pc, #420]	; (80053a8 <main+0x628>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	3301      	adds	r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4b67      	ldr	r3, [pc, #412]	; (80053a8 <main+0x628>)
 800520c:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 800520e:	4b66      	ldr	r3, [pc, #408]	; (80053a8 <main+0x628>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4a56      	ldr	r2, [pc, #344]	; (800536c <main+0x5ec>)
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	fbb3 f1f2 	udiv	r1, r3, r2
 800521a:	fb02 f201 	mul.w	r2, r2, r1
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	b2da      	uxtb	r2, r3
 8005222:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <main+0x628>)
 8005224:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 8005226:	4b60      	ldr	r3, [pc, #384]	; (80053a8 <main+0x628>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4a5f      	ldr	r2, [pc, #380]	; (80053ac <main+0x62c>)
 800522e:	4413      	add	r3, r2
 8005230:	4a5d      	ldr	r2, [pc, #372]	; (80053a8 <main+0x628>)
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	4614      	mov	r4, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fccd 	bl	8001bd6 <onewireDS18B20_tempReq>
 800523c:	4603      	mov	r3, r0
 800523e:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <main+0x5e8>)
 8005240:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 8005244:	484a      	ldr	r0, [pc, #296]	; (8005370 <main+0x5f0>)
 8005246:	f000 fe4f 	bl	8005ee8 <tim_get_timeStamp>
 800524a:	4603      	mov	r3, r0
 800524c:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <main+0x630>)
 800524e:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 8005250:	f7fc f920 	bl	8001494 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 8005254:	f7ff fae8 	bl	8004828 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 8005258:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 8159 	bne.w	8005514 <main+0x794>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8005262:	4b54      	ldr	r3, [pc, #336]	; (80053b4 <main+0x634>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	2110      	movs	r1, #16
 800526a:	4853      	ldr	r0, [pc, #332]	; (80053b8 <main+0x638>)
 800526c:	f004 fef4 	bl	800a058 <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <main+0x634>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d120      	bne.n	80052ba <main+0x53a>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8005278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01b      	beq.n	80052ba <main+0x53a>
				  if ((i2cDacModeLast != i2cDacMode) || (i2cDacValLast != i2cDacVal)) {
 8005282:	4b4e      	ldr	r3, [pc, #312]	; (80053bc <main+0x63c>)
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <main+0x640>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d105      	bne.n	800529a <main+0x51a>
 800528e:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <main+0x644>)
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	4b4d      	ldr	r3, [pc, #308]	; (80053c8 <main+0x648>)
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d00f      	beq.n	80052ba <main+0x53a>
					  i2cDeviceDacMcp4725_set(0, i2cDacMode, i2cDacVal);
 800529a:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <main+0x640>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4a4a      	ldr	r2, [pc, #296]	; (80053c8 <main+0x648>)
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7fc fe47 	bl	8001f38 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  i2cDacModeLast 	= i2cDacMode;
 80052aa:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <main+0x640>)
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	4b43      	ldr	r3, [pc, #268]	; (80053bc <main+0x63c>)
 80052b0:	701a      	strb	r2, [r3, #0]
					  i2cDacValLast 	= i2cDacVal;
 80052b2:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <main+0x648>)
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <main+0x644>)
 80052b8:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 80052ba:	482d      	ldr	r0, [pc, #180]	; (8005370 <main+0x5f0>)
 80052bc:	f000 fe14 	bl	8005ee8 <tim_get_timeStamp>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a42      	ldr	r2, [pc, #264]	; (80053cc <main+0x64c>)
 80052c4:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif


		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 80052c6:	f7fe ff37 	bl	8004138 <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 80052ca:	4829      	ldr	r0, [pc, #164]	; (8005370 <main+0x5f0>)
 80052cc:	f000 fe0c 	bl	8005ee8 <tim_get_timeStamp>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <main+0x650>)
 80052d4:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 80052d6:	f7ff f9d3 	bl	8004680 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 80052da:	4825      	ldr	r0, [pc, #148]	; (8005370 <main+0x5f0>)
 80052dc:	f000 fe04 	bl	8005ee8 <tim_get_timeStamp>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <main+0x654>)
 80052e4:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 80052e6:	f7fe fdd9 	bl	8003e9c <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 80052ea:	4821      	ldr	r0, [pc, #132]	; (8005370 <main+0x5f0>)
 80052ec:	f000 fdfc 	bl	8005ee8 <tim_get_timeStamp>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4a39      	ldr	r2, [pc, #228]	; (80053d8 <main+0x658>)
 80052f4:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 80052f6:	f7ff f8a9 	bl	800444c <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 80052fa:	481d      	ldr	r0, [pc, #116]	; (8005370 <main+0x5f0>)
 80052fc:	f000 fdf4 	bl	8005ee8 <tim_get_timeStamp>
 8005300:	4603      	mov	r3, r0
 8005302:	4a36      	ldr	r2, [pc, #216]	; (80053dc <main+0x65c>)
 8005304:	6013      	str	r3, [r2, #0]

		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 8005306:	f7fe ff63 	bl	80041d0 <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 800530a:	f7ff f81b 	bl	8004344 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 800530e:	4818      	ldr	r0, [pc, #96]	; (8005370 <main+0x5f0>)
 8005310:	f000 fdea 	bl	8005ee8 <tim_get_timeStamp>
 8005314:	4603      	mov	r3, r0
 8005316:	4a32      	ldr	r2, [pc, #200]	; (80053e0 <main+0x660>)
 8005318:	6013      	str	r3, [r2, #0]

		  /* Drop NEO data when falling back to out-of-lock state */
		  if (!gpioLockedLED) {
 800531a:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <main+0x664>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <main+0x5ae>
			  ubloxNavPosllh.iTOW 	= 0UL;
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <main+0x600>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
			  gLocator[0] 			= 0x00U;
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <main+0x5fc>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		  }


		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 800532e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d06a      	beq.n	800540e <main+0x68e>
			  if (!gpioLockedLED) {
 8005338:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <main+0x664>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d157      	bne.n	80053f0 <main+0x670>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc);
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <main+0x628>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <main+0x668>)
 8005348:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800534c:	111b      	asrs	r3, r3, #4
 800534e:	b21b      	sxth	r3, r3
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <main+0x66c>)
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc ffe2 	bl	8002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 800535c:	e057      	b.n	800540e <main+0x68e>
 800535e:	bf00      	nop
 8005360:	9abcaf48 	.word	0x9abcaf48
 8005364:	3e7ad7f2 	.word	0x3e7ad7f2
 8005368:	200002f0 	.word	0x200002f0
 800536c:	20000246 	.word	0x20000246
 8005370:	20002740 	.word	0x20002740
 8005374:	2000030c 	.word	0x2000030c
 8005378:	20000310 	.word	0x20000310
 800537c:	20000300 	.word	0x20000300
 8005380:	20000398 	.word	0x20000398
 8005384:	20000314 	.word	0x20000314
 8005388:	20000318 	.word	0x20000318
 800538c:	200002d8 	.word	0x200002d8
 8005390:	200002d6 	.word	0x200002d6
 8005394:	2000031c 	.word	0x2000031c
 8005398:	200003b4 	.word	0x200003b4
 800539c:	200003c8 	.word	0x200003c8
 80053a0:	200003dc 	.word	0x200003dc
 80053a4:	20000320 	.word	0x20000320
 80053a8:	200002f8 	.word	0x200002f8
 80053ac:	200025c8 	.word	0x200025c8
 80053b0:	20000324 	.word	0x20000324
 80053b4:	20000245 	.word	0x20000245
 80053b8:	48000400 	.word	0x48000400
 80053bc:	20000254 	.word	0x20000254
 80053c0:	20000255 	.word	0x20000255
 80053c4:	20000256 	.word	0x20000256
 80053c8:	20000258 	.word	0x20000258
 80053cc:	20000328 	.word	0x20000328
 80053d0:	2000032c 	.word	0x2000032c
 80053d4:	20000330 	.word	0x20000330
 80053d8:	20000334 	.word	0x20000334
 80053dc:	20000338 	.word	0x20000338
 80053e0:	2000033c 	.word	0x2000033c
 80053e4:	20000244 	.word	0x20000244
 80053e8:	20000248 	.word	0x20000248
 80053ec:	2000000c 	.word	0x2000000c
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked((owDs18b20_Temp[gMowSensorIdx] >> 4), ubloxTimeAcc, timTicksSumDev);
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <main+0x79c>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <main+0x7a0>)
 80053f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053fc:	111b      	asrs	r3, r3, #4
 80053fe:	b21b      	sxth	r3, r3
 8005400:	4a48      	ldr	r2, [pc, #288]	; (8005524 <main+0x7a4>)
 8005402:	6811      	ldr	r1, [r2, #0]
 8005404:	4a48      	ldr	r2, [pc, #288]	; (8005528 <main+0x7a8>)
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fc ffd9 	bl	80023c0 <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 800540e:	4847      	ldr	r0, [pc, #284]	; (800552c <main+0x7ac>)
 8005410:	f000 fd6a 	bl	8005ee8 <tim_get_timeStamp>
 8005414:	4603      	mov	r3, r0
 8005416:	4a46      	ldr	r2, [pc, #280]	; (8005530 <main+0x7b0>)
 8005418:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 800541a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d06a      	beq.n	80054fa <main+0x77a>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <main+0x7b4>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d117      	bne.n	800545c <main+0x6dc>
				  if (lcd1StateLast) {
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <main+0x7b8>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <main+0x6b8>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 8005434:	f7fd fbee 	bl	8002c14 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 8005438:	4b38      	ldr	r3, [pc, #224]	; (800551c <main+0x79c>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <main+0x7a0>)
 8005440:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8005444:	111b      	asrs	r3, r3, #4
 8005446:	b21b      	sxth	r3, r3
 8005448:	4a36      	ldr	r2, [pc, #216]	; (8005524 <main+0x7a4>)
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fc18 	bl	8002c84 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ubloxTimeAcc);
				  lcd1StateLast = 0U;
 8005454:	4b38      	ldr	r3, [pc, #224]	; (8005538 <main+0x7b8>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e04e      	b.n	80054fa <main+0x77a>
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 800545c:	4b37      	ldr	r3, [pc, #220]	; (800553c <main+0x7bc>)
 800545e:	66bb      	str	r3, [r7, #104]	; 0x68

				  if (!lcd1StateLast) {
 8005460:	4b35      	ldr	r3, [pc, #212]	; (8005538 <main+0x7b8>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <main+0x6ee>
					  /* Locked template */
					  i2cSmartLCD_Gfx240x128_Template(0x80000113UL);
 8005468:	4835      	ldr	r0, [pc, #212]	; (8005540 <main+0x7c0>)
 800546a:	f7fd faaf 	bl	80029cc <i2cSmartLCD_Gfx240x128_Template>
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (700UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 800546e:	f002 fb9d 	bl	8007bac <HAL_GetTick>
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <main+0x7b0>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005478:	441a      	add	r2, r3
 800547a:	4b32      	ldr	r3, [pc, #200]	; (8005544 <main+0x7c4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005482:	fbb3 f2f2 	udiv	r2, r3, r2
 8005486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005488:	fb01 f202 	mul.w	r2, r1, r2
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <main+0x7c8>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	0b9b      	lsrs	r3, r3, #14
 8005496:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 8005498:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
						  (owDs18b20_Temp[gMowSensorIdx] >> 4),
 800549c:	4b1f      	ldr	r3, [pc, #124]	; (800551c <main+0x79c>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <main+0x7a0>)
 80054a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				  i2cSmartLCD_Gfx240x128_Locked(
 80054a8:	111b      	asrs	r3, r3, #4
 80054aa:	b21c      	sxth	r4, r3
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <main+0x7a4>)
 80054ae:	681d      	ldr	r5, [r3, #0]
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <main+0x7a8>)
 80054b2:	681e      	ldr	r6, [r3, #0]
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <main+0x7cc>)
 80054b6:	edd3 7a00 	vldr	s15, [r3]
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <main+0x7d0>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <main+0x7d4>)
 80054c2:	ed92 7a00 	vldr	s14, [r2]
 80054c6:	4a24      	ldr	r2, [pc, #144]	; (8005558 <main+0x7d8>)
 80054c8:	8892      	ldrh	r2, [r2, #4]
 80054ca:	4924      	ldr	r1, [pc, #144]	; (800555c <main+0x7dc>)
 80054cc:	7809      	ldrb	r1, [r1, #0]
 80054ce:	4b24      	ldr	r3, [pc, #144]	; (8005560 <main+0x7e0>)
 80054d0:	9305      	str	r3, [sp, #20]
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <main+0x7e4>)
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	4b24      	ldr	r3, [pc, #144]	; (8005568 <main+0x7e8>)
 80054d8:	9303      	str	r3, [sp, #12]
 80054da:	9102      	str	r1, [sp, #8]
 80054dc:	9201      	str	r2, [sp, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	eef0 0a47 	vmov.f32	s1, s14
 80054e6:	eeb0 0a67 	vmov.f32	s0, s15
 80054ea:	4633      	mov	r3, r6
 80054ec:	462a      	mov	r2, r5
 80054ee:	4621      	mov	r1, r4
 80054f0:	f7fd fc72 	bl	8002dd8 <i2cSmartLCD_Gfx240x128_Locked>
						  ubloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &ubloxNavSvinfo,
						  gLocator);
				  lcd1StateLast = 1U;
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <main+0x7b8>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 80054fa:	480c      	ldr	r0, [pc, #48]	; (800552c <main+0x7ac>)
 80054fc:	f000 fcf4 	bl	8005ee8 <tim_get_timeStamp>
 8005500:	4603      	mov	r3, r0
 8005502:	4a1a      	ldr	r2, [pc, #104]	; (800556c <main+0x7ec>)
 8005504:	6013      	str	r3, [r2, #0]

#if defined(PLL_BY_SOFTWARE)
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
 8005506:	2201      	movs	r2, #1
 8005508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800550c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005510:	f004 fda2 	bl	800a058 <HAL_GPIO_WritePin>
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	  if (!loopEntry) {
 800551a:	e596      	b.n	800504a <main+0x2ca>
 800551c:	200002f8 	.word	0x200002f8
 8005520:	20000248 	.word	0x20000248
 8005524:	2000000c 	.word	0x2000000c
 8005528:	2000038c 	.word	0x2000038c
 800552c:	20002740 	.word	0x20002740
 8005530:	20000340 	.word	0x20000340
 8005534:	20000244 	.word	0x20000244
 8005538:	20000348 	.word	0x20000348
 800553c:	03938700 	.word	0x03938700
 8005540:	80000113 	.word	0x80000113
 8005544:	20000308 	.word	0x20000308
 8005548:	45e7b273 	.word	0x45e7b273
 800554c:	200002fc 	.word	0x200002fc
 8005550:	20000258 	.word	0x20000258
 8005554:	2000025c 	.word	0x2000025c
 8005558:	200003c8 	.word	0x200003c8
 800555c:	200002d6 	.word	0x200002d6
 8005560:	20000300 	.word	0x20000300
 8005564:	200003dc 	.word	0x200003dc
 8005568:	200002d8 	.word	0x200002d8
 800556c:	20000344 	.word	0x20000344

08005570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b096      	sub	sp, #88	; 0x58
 8005574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	2244      	movs	r2, #68	; 0x44
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f00a f8d2 	bl	800f728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005584:	463b      	mov	r3, r7
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005596:	f006 fc05 	bl	800bda4 <HAL_PWREx_ControlVoltageScaling>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80055a0:	f000 f85a 	bl	8005658 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80055a4:	f006 fbe0 	bl	800bd68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <SystemClock_Config+0xc0>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	4a20      	ldr	r2, [pc, #128]	; (8005630 <SystemClock_Config+0xc0>)
 80055b0:	f023 0318 	bic.w	r3, r3, #24
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80055b8:	2307      	movs	r3, #7
 80055ba:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80055bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80055c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80055cc:	2310      	movs	r3, #16
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055d0:	2302      	movs	r3, #2
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055d4:	2303      	movs	r3, #3
 80055d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80055dc:	230c      	movs	r3, #12
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80055e0:	2307      	movs	r3, #7
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80055e4:	2302      	movs	r3, #2
 80055e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80055e8:	2302      	movs	r3, #2
 80055ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	4618      	mov	r0, r3
 80055f2:	f006 fc2d 	bl	800be50 <HAL_RCC_OscConfig>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80055fc:	f000 f82c 	bl	8005658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005600:	230f      	movs	r3, #15
 8005602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005604:	2303      	movs	r3, #3
 8005606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005614:	463b      	mov	r3, r7
 8005616:	2103      	movs	r1, #3
 8005618:	4618      	mov	r0, r3
 800561a:	f007 f839 	bl	800c690 <HAL_RCC_ClockConfig>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8005624:	f000 f818 	bl	8005658 <Error_Handler>
  }
}
 8005628:	bf00      	nop
 800562a:	3758      	adds	r7, #88	; 0x58
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000

08005634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005646:	f002 fa9d 	bl	8007b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00

08005658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800565c:	b672      	cpsid	i
}
 800565e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005660:	e7fe      	b.n	8005660 <Error_Handler+0x8>
	...

08005664 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005668:	4b10      	ldr	r3, [pc, #64]	; (80056ac <MX_RTC_Init+0x48>)
 800566a:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <MX_RTC_Init+0x4c>)
 800566c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <MX_RTC_Init+0x48>)
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005674:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <MX_RTC_Init+0x48>)
 8005676:	227f      	movs	r2, #127	; 0x7f
 8005678:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <MX_RTC_Init+0x48>)
 800567c:	22ff      	movs	r2, #255	; 0xff
 800567e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <MX_RTC_Init+0x48>)
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <MX_RTC_Init+0x48>)
 8005688:	2200      	movs	r2, #0
 800568a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <MX_RTC_Init+0x48>)
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <MX_RTC_Init+0x48>)
 8005694:	2200      	movs	r2, #0
 8005696:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005698:	4804      	ldr	r0, [pc, #16]	; (80056ac <MX_RTC_Init+0x48>)
 800569a:	f007 fd17 	bl	800d0cc <HAL_RTC_Init>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80056a4:	f7ff ffd8 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20002624 	.word	0x20002624
 80056b0:	40002800 	.word	0x40002800

080056b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b098      	sub	sp, #96	; 0x60
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	2254      	movs	r2, #84	; 0x54
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f00a f82f 	bl	800f728 <memset>
  if(rtcHandle->Instance==RTC)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a0f      	ldr	r2, [pc, #60]	; (800570c <HAL_RTC_MspInit+0x58>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d117      	bne.n	8005704 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80056d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80056da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056e0:	f107 030c 	add.w	r3, r7, #12
 80056e4:	4618      	mov	r0, r3
 80056e6:	f007 fa0b 	bl	800cb00 <HAL_RCCEx_PeriphCLKConfig>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80056f0:	f7ff ffb2 	bl	8005658 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RTC_MspInit+0x5c>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <HAL_RTC_MspInit+0x5c>)
 80056fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005704:	bf00      	nop
 8005706:	3760      	adds	r7, #96	; 0x60
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40002800 	.word	0x40002800
 8005710:	40021000 	.word	0x40021000

08005714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <MX_SPI1_Init+0x74>)
 800571a:	4a1c      	ldr	r2, [pc, #112]	; (800578c <MX_SPI1_Init+0x78>)
 800571c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <MX_SPI1_Init+0x74>)
 8005720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <MX_SPI1_Init+0x74>)
 8005728:	2200      	movs	r2, #0
 800572a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800572c:	4b16      	ldr	r3, [pc, #88]	; (8005788 <MX_SPI1_Init+0x74>)
 800572e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005734:	4b14      	ldr	r3, [pc, #80]	; (8005788 <MX_SPI1_Init+0x74>)
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <MX_SPI1_Init+0x74>)
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <MX_SPI1_Init+0x74>)
 8005742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <MX_SPI1_Init+0x74>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <MX_SPI1_Init+0x74>)
 8005750:	2200      	movs	r2, #0
 8005752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <MX_SPI1_Init+0x74>)
 8005756:	2200      	movs	r2, #0
 8005758:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <MX_SPI1_Init+0x74>)
 800575c:	2200      	movs	r2, #0
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <MX_SPI1_Init+0x74>)
 8005762:	2207      	movs	r2, #7
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <MX_SPI1_Init+0x74>)
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <MX_SPI1_Init+0x74>)
 800576e:	2208      	movs	r2, #8
 8005770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005772:	4805      	ldr	r0, [pc, #20]	; (8005788 <MX_SPI1_Init+0x74>)
 8005774:	f007 fdbc 	bl	800d2f0 <HAL_SPI_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800577e:	f7ff ff6b 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20002648 	.word	0x20002648
 800578c:	40013000 	.word	0x40013000

08005790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_SPI_MspInit+0x7c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d128      	bne.n	8005804 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057bc:	6613      	str	r3, [r2, #96]	; 0x60
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_SPI_MspInit+0x80>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80057e2:	23c2      	movs	r3, #194	; 0xc2
 80057e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e6:	2302      	movs	r3, #2
 80057e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ee:	2303      	movs	r3, #3
 80057f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057f2:	2305      	movs	r3, #5
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	4619      	mov	r1, r3
 80057fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005800:	f004 f9de 	bl	8009bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005804:	bf00      	nop
 8005806:	3728      	adds	r7, #40	; 0x28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40013000 	.word	0x40013000
 8005810:	40021000 	.word	0x40021000

08005814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <HAL_MspInit+0x44>)
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	4a0e      	ldr	r2, [pc, #56]	; (8005858 <HAL_MspInit+0x44>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6613      	str	r3, [r2, #96]	; 0x60
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_MspInit+0x44>)
 8005828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_MspInit+0x44>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	4a08      	ldr	r2, [pc, #32]	; (8005858 <HAL_MspInit+0x44>)
 8005838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583c:	6593      	str	r3, [r2, #88]	; 0x58
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_MspInit+0x44>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000

0800585c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800586c:	2200      	movs	r2, #0
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	2019      	movs	r0, #25
 8005872:	f003 fee9 	bl	8009648 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005876:	2019      	movs	r0, #25
 8005878:	f003 ff02 	bl	8009680 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <HAL_InitTick+0x9c>)
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <HAL_InitTick+0x9c>)
 8005882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005886:	6613      	str	r3, [r2, #96]	; 0x60
 8005888:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_InitTick+0x9c>)
 800588a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005894:	f107 0210 	add.w	r2, r7, #16
 8005898:	f107 0314 	add.w	r3, r7, #20
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f007 f89c 	bl	800c9dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80058a4:	f007 f884 	bl	800c9b0 <HAL_RCC_GetPCLK2Freq>
 80058a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	4a13      	ldr	r2, [pc, #76]	; (80058fc <HAL_InitTick+0xa0>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	0c9b      	lsrs	r3, r3, #18
 80058b4:	3b01      	subs	r3, #1
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_InitTick+0xa4>)
 80058ba:	4a12      	ldr	r2, [pc, #72]	; (8005904 <HAL_InitTick+0xa8>)
 80058bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_InitTick+0xa4>)
 80058c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <HAL_InitTick+0xa4>)
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <HAL_InitTick+0xa4>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_InitTick+0xa4>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80058d8:	4809      	ldr	r0, [pc, #36]	; (8005900 <HAL_InitTick+0xa4>)
 80058da:	f007 fdac 	bl	800d436 <HAL_TIM_Base_Init>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80058e4:	4806      	ldr	r0, [pc, #24]	; (8005900 <HAL_InitTick+0xa4>)
 80058e6:	f007 fe07 	bl	800d4f8 <HAL_TIM_Base_Start_IT>
 80058ea:	4603      	mov	r3, r0
 80058ec:	e000      	b.n	80058f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3730      	adds	r7, #48	; 0x30
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	431bde83 	.word	0x431bde83
 8005900:	200026ac 	.word	0x200026ac
 8005904:	40012c00 	.word	0x40012c00

08005908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800590c:	e7fe      	b.n	800590c <NMI_Handler+0x4>

0800590e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005912:	e7fe      	b.n	8005912 <HardFault_Handler+0x4>

08005914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005918:	e7fe      	b.n	8005918 <MemManage_Handler+0x4>

0800591a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800591a:	b480      	push	{r7}
 800591c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800591e:	e7fe      	b.n	800591e <BusFault_Handler+0x4>

08005920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005924:	e7fe      	b.n	8005924 <UsageFault_Handler+0x4>

08005926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005964:	4802      	ldr	r0, [pc, #8]	; (8005970 <DMA1_Channel1_IRQHandler+0x10>)
 8005966:	f004 f83e 	bl	80099e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20002580 	.word	0x20002580

08005974 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8005978:	4802      	ldr	r0, [pc, #8]	; (8005984 <DMA1_Channel7_IRQHandler+0x10>)
 800597a:	f004 f834 	bl	80099e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	200026f8 	.word	0x200026f8

08005988 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800598c:	4802      	ldr	r0, [pc, #8]	; (8005998 <ADC1_IRQHandler+0x10>)
 800598e:	f002 fcfa 	bl	8008386 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	2000251c 	.word	0x2000251c

0800599c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059a0:	4802      	ldr	r0, [pc, #8]	; (80059ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80059a2:	f007 ff7b 	bl	800d89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200026ac 	.word	0x200026ac

080059b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059b4:	4802      	ldr	r0, [pc, #8]	; (80059c0 <TIM2_IRQHandler+0x10>)
 80059b6:	f007 ff71 	bl	800d89c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20002740 	.word	0x20002740

080059c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80059c8:	4802      	ldr	r0, [pc, #8]	; (80059d4 <I2C1_EV_IRQHandler+0x10>)
 80059ca:	f004 fe6d 	bl	800a6a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80059ce:	bf00      	nop
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200025d8 	.word	0x200025d8

080059d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80059dc:	4802      	ldr	r0, [pc, #8]	; (80059e8 <I2C1_ER_IRQHandler+0x10>)
 80059de:	f004 fe7d 	bl	800a6dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200025d8 	.word	0x200025d8

080059ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059f0:	4802      	ldr	r0, [pc, #8]	; (80059fc <USART1_IRQHandler+0x10>)
 80059f2:	f008 fe17 	bl	800e624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	2000278c 	.word	0x2000278c

08005a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
	return 1;
 8005a04:	2301      	movs	r3, #1
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_kill>:

int _kill(int pid, int sig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a1a:	f009 fe4d 	bl	800f6b8 <__errno>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2216      	movs	r2, #22
 8005a22:	601a      	str	r2, [r3, #0]
	return -1;
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_exit>:

void _exit (int status)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a38:	f04f 31ff 	mov.w	r1, #4294967295
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ffe7 	bl	8005a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a42:	e7fe      	b.n	8005a42 <_exit+0x12>

08005a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e00a      	b.n	8005a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a56:	f3af 8000 	nop.w
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	60ba      	str	r2, [r7, #8]
 8005a62:	b2ca      	uxtb	r2, r1
 8005a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	dbf0      	blt.n	8005a56 <_read+0x12>
	}

return len;
 8005a74:	687b      	ldr	r3, [r7, #4]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e009      	b.n	8005aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	60ba      	str	r2, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	dbf1      	blt.n	8005a90 <_write+0x12>
	}
	return len;
 8005aac:	687b      	ldr	r3, [r7, #4]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <_close>:

int _close(int file)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
	return -1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ade:	605a      	str	r2, [r3, #4]
	return 0;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <_isatty>:

int _isatty(int file)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
	return 1;
 8005af6:	2301      	movs	r3, #1
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b28:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <_sbrk+0x5c>)
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <_sbrk+0x60>)
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <_sbrk+0x64>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b3c:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <_sbrk+0x64>)
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <_sbrk+0x68>)
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b42:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <_sbrk+0x64>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d207      	bcs.n	8005b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b50:	f009 fdb2 	bl	800f6b8 <__errno>
 8005b54:	4603      	mov	r3, r0
 8005b56:	220c      	movs	r2, #12
 8005b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	e009      	b.n	8005b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b60:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <_sbrk+0x64>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <_sbrk+0x64>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <_sbrk+0x64>)
 8005b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	2000c000 	.word	0x2000c000
 8005b80:	00000400 	.word	0x00000400
 8005b84:	2000034c 	.word	0x2000034c
 8005b88:	200028a8 	.word	0x200028a8

08005b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005b90:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <SystemInit+0x5c>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <SystemInit+0x5c>)
 8005b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005ba0:	4b12      	ldr	r3, [pc, #72]	; (8005bec <SystemInit+0x60>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <SystemInit+0x60>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <SystemInit+0x60>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005bb2:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <SystemInit+0x60>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <SystemInit+0x60>)
 8005bb8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005bbc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <SystemInit+0x60>)
 8005bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bc8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <SystemInit+0x60>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <SystemInit+0x60>)
 8005bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <SystemInit+0x60>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	619a      	str	r2, [r3, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	e000ed00 	.word	0xe000ed00
 8005bec:	40021000 	.word	0x40021000

08005bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <MX_TIM2_Init+0xbc>)
 8005c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005c34:	481c      	ldr	r0, [pc, #112]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c36:	f007 fcb3 	bl	800d5a0 <HAL_TIM_IC_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005c40:	f7ff fd0a 	bl	8005658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	4619      	mov	r1, r3
 8005c52:	4815      	ldr	r0, [pc, #84]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c54:	f008 f9ce 	bl	800dff4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005c5e:	f7ff fcfb 	bl	8005658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c66:	2301      	movs	r3, #1
 8005c68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	2204      	movs	r2, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	480b      	ldr	r0, [pc, #44]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c7a:	f007 ff2e 	bl	800dada <HAL_TIM_IC_ConfigChannel>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005c84:	f7ff fce8 	bl	8005658 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	220c      	movs	r2, #12
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4806      	ldr	r0, [pc, #24]	; (8005ca8 <MX_TIM2_Init+0xb8>)
 8005c90:	f007 ff23 	bl	800dada <HAL_TIM_IC_ConfigChannel>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8005c9a:	f7ff fcdd 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c9e:	bf00      	nop
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20002740 	.word	0x20002740
 8005cac:	039386ff 	.word	0x039386ff

08005cb0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd0:	d17d      	bne.n	8005dce <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cd2:	4b41      	ldr	r3, [pc, #260]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	4a40      	ldr	r2, [pc, #256]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cde:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cea:	4b3b      	ldr	r3, [pc, #236]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	4a3a      	ldr	r2, [pc, #232]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	4b35      	ldr	r3, [pc, #212]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d0e:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_TIM_IC_MspInit+0x128>)
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d26:	2300      	movs	r3, #0
 8005d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d38:	f003 ff42 	bl	8009bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d40:	2302      	movs	r3, #2
 8005d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	4619      	mov	r1, r3
 8005d56:	4821      	ldr	r0, [pc, #132]	; (8005ddc <HAL_TIM_IC_MspInit+0x12c>)
 8005d58:	f003 ff32 	bl	8009bc0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_TIM_IC_MspInit+0x134>)
 8005d60:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005d62:	4b1f      	ldr	r3, [pc, #124]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d64:	2204      	movs	r2, #4
 8005d66:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d80:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d88:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005d96:	4812      	ldr	r0, [pc, #72]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005d98:	f003 fc8e 	bl	80096b8 <HAL_DMA_Init>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8005da2:	f7ff fc59 	bl	8005658 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a0d      	ldr	r2, [pc, #52]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
 8005db8:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <HAL_TIM_IC_MspInit+0x130>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	201c      	movs	r0, #28
 8005dc4:	f003 fc40 	bl	8009648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dc8:	201c      	movs	r0, #28
 8005dca:	f003 fc59 	bl	8009680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005dce:	bf00      	nop
 8005dd0:	3728      	adds	r7, #40	; 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	48000400 	.word	0x48000400
 8005de0:	200026f8 	.word	0x200026f8
 8005de4:	40020080 	.word	0x40020080

08005de8 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7f1b      	ldrb	r3, [r3, #28]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d151      	bne.n	8005e9c <HAL_TIM_IC_CaptureCallback+0xb4>
		/* GPS 1PPS pulse captured */
		gTim2_ch2_ts = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8005df8:	2104      	movs	r1, #4
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f007 ff02 	bl	800dc04 <HAL_TIM_ReadCapturedValue>
 8005e00:	4603      	mov	r3, r0
 8005e02:	4a28      	ldr	r2, [pc, #160]	; (8005ea4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005e04:	6013      	str	r3, [r2, #0]
		if (gTim2_ch2_ts < 60000UL) {
#else
		/* 1 PPS mode */
		{
#endif
			int32_t diff = gTim2_ch2_ts - tim2Ch2_ts[tim2Ch2_idx];
 8005e06:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4b26      	ldr	r3, [pc, #152]	; (8005eac <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	60fb      	str	r3, [r7, #12]

			++timTicksEvt;
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005e22:	6013      	str	r3, [r2, #0]

			/* Clamp below +/-5 ppm */
			if ((-3000 < diff) && (diff < +3000)) {
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	db0f      	blt.n	8005e4c <HAL_TIM_IC_CaptureCallback+0x64>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005e32:	4293      	cmp	r3, r2
 8005e34:	dc0a      	bgt.n	8005e4c <HAL_TIM_IC_CaptureCallback+0x64>
				/* Store accumulated difference */
				if (timTicksEvt > 12) {
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d908      	bls.n	8005e50 <HAL_TIM_IC_CaptureCallback+0x68>
					timTicksDiff += diff;
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8005e48:	6013      	str	r3, [r2, #0]
				if (timTicksEvt > 12) {
 8005e4a:	e001      	b.n	8005e50 <HAL_TIM_IC_CaptureCallback+0x68>
				}
			} else {
				diff = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
			}

			/* Calculate PPMs */
			tim2Ch2_ppm = diff / 600.0f;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e5a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8005ebc <HAL_TIM_IC_CaptureCallback+0xd4>
 8005e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8005e64:	edc3 7a00 	vstr	s15, [r3]

			/* Write back TimeStamp to 10 sec circle-buffer */
			tim2Ch2_ts[tim2Ch2_idx++] = gTim2_ch2_ts;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	b2d1      	uxtb	r1, r2
 8005e70:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005e72:	7011      	strb	r1, [r2, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005e7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim2Ch2_idx %= 10;
 8005e80:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8005e86:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8a:	08d9      	lsrs	r1, r3, #3
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8005e9a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000350 	.word	0x20000350
 8005ea8:	20000354 	.word	0x20000354
 8005eac:	20000358 	.word	0x20000358
 8005eb0:	20000380 	.word	0x20000380
 8005eb4:	fffff449 	.word	0xfffff449
 8005eb8:	20000384 	.word	0x20000384
 8005ebc:	44160000 	.word	0x44160000
 8005ec0:	20000388 	.word	0x20000388
 8005ec4:	cccccccd 	.word	0xcccccccd

08005ec8 <tim_start>:


void tim_start(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8005ecc:	2104      	movs	r1, #4
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <tim_start+0x1c>)
 8005ed0:	f007 fbbe 	bl	800d650 <HAL_TIM_IC_Start_IT>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <tim_start+0x16>
		/* Starting Error */
		Error_Handler();
 8005eda:	f7ff fbbd 	bl	8005658 <Error_Handler>
	}
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20002740 	.word	0x20002740

08005ee8 <tim_get_timeStamp>:
  }
#endif
}

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <HAL_UART_TxCpltCallback+0x1c>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000390 	.word	0x20000390

08005f24 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_UART_RxCpltCallback+0x30>)
 8005f40:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_UART_RxCpltCallback+0x34>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20000392 	.word	0x20000392
 8005f58:	20000391 	.word	0x20000391

08005f5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6a:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a2b      	ldr	r2, [pc, #172]	; (800601c <HAL_UART_ErrorCallback+0xc0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d148      	bne.n	8006006 <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00e      	beq.n	8005f9c <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	4b23      	ldr	r3, [pc, #140]	; (8006020 <HAL_UART_ErrorCallback+0xc4>)
 8005f92:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005f94:	4b23      	ldr	r3, [pc, #140]	; (8006024 <HAL_UART_ErrorCallback+0xc8>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8005f9a:	e03a      	b.n	8006012 <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
		else if (
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <HAL_UART_ErrorCallback+0xc4>)
 8005fce:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005fd0:	4b14      	ldr	r3, [pc, #80]	; (8006024 <HAL_UART_ErrorCallback+0xc8>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
}
 8005fd6:	e01c      	b.n	8006012 <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <HAL_UART_ErrorCallback+0xc4>)
 8005ff6:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <HAL_UART_ErrorCallback+0xc8>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
}
 8005ffe:	e008      	b.n	8006012 <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 8006000:	f7ff fb2a 	bl	8005658 <Error_Handler>
}
 8006004:	e005      	b.n	8006012 <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_UART_ErrorCallback+0xcc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d101      	bne.n	8006012 <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 800600e:	f7ff fb23 	bl	8005658 <Error_Handler>
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2000278c 	.word	0x2000278c
 8006020:	20000392 	.word	0x20000392
 8006024:	20000391 	.word	0x20000391
 8006028:	20002810 	.word	0x20002810

0800602c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006030:	4b14      	ldr	r3, [pc, #80]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <MX_USART1_UART_Init+0x5c>)
 8006034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006036:	4b13      	ldr	r3, [pc, #76]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006038:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800603c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006040:	2200      	movs	r2, #0
 8006042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <MX_USART1_UART_Init+0x58>)
 800604c:	2200      	movs	r2, #0
 800604e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006052:	220c      	movs	r2, #12
 8006054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006058:	2200      	movs	r2, #0
 800605a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <MX_USART1_UART_Init+0x58>)
 800605e:	2200      	movs	r2, #0
 8006060:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006062:	4b08      	ldr	r3, [pc, #32]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006064:	2200      	movs	r2, #0
 8006066:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <MX_USART1_UART_Init+0x58>)
 800606a:	2200      	movs	r2, #0
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800606e:	4805      	ldr	r0, [pc, #20]	; (8006084 <MX_USART1_UART_Init+0x58>)
 8006070:	f008 f844 	bl	800e0fc <HAL_UART_Init>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800607a:	f7ff faed 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	2000278c 	.word	0x2000278c
 8006088:	40013800 	.word	0x40013800

0800608c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006090:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 8006092:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <MX_USART2_UART_Init+0x5c>)
 8006094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006096:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 8006098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800609c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800609e:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060b2:	220c      	movs	r2, #12
 80060b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060be:	2200      	movs	r2, #0
 80060c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060c8:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060ce:	4805      	ldr	r0, [pc, #20]	; (80060e4 <MX_USART2_UART_Init+0x58>)
 80060d0:	f008 f814 	bl	800e0fc <HAL_UART_Init>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80060da:	f7ff fabd 	bl	8005658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20002810 	.word	0x20002810
 80060e8:	40004400 	.word	0x40004400

080060ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b0a0      	sub	sp, #128	; 0x80
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006104:	f107 0318 	add.w	r3, r7, #24
 8006108:	2254      	movs	r2, #84	; 0x54
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f009 fb0b 	bl	800f728 <memset>
  if(uartHandle->Instance==USART1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a54      	ldr	r2, [pc, #336]	; (8006268 <HAL_UART_MspInit+0x17c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d152      	bne.n	80061c2 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800611c:	2301      	movs	r3, #1
 800611e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8006120:	2302      	movs	r3, #2
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006124:	f107 0318 	add.w	r3, r7, #24
 8006128:	4618      	mov	r0, r3
 800612a:	f006 fce9 	bl	800cb00 <HAL_RCCEx_PeriphCLKConfig>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006134:	f7ff fa90 	bl	8005658 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006138:	4b4c      	ldr	r3, [pc, #304]	; (800626c <HAL_UART_MspInit+0x180>)
 800613a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613c:	4a4b      	ldr	r2, [pc, #300]	; (800626c <HAL_UART_MspInit+0x180>)
 800613e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006142:	6613      	str	r3, [r2, #96]	; 0x60
 8006144:	4b49      	ldr	r3, [pc, #292]	; (800626c <HAL_UART_MspInit+0x180>)
 8006146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006150:	4b46      	ldr	r3, [pc, #280]	; (800626c <HAL_UART_MspInit+0x180>)
 8006152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006154:	4a45      	ldr	r2, [pc, #276]	; (800626c <HAL_UART_MspInit+0x180>)
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800615c:	4b43      	ldr	r3, [pc, #268]	; (800626c <HAL_UART_MspInit+0x180>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8006168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006176:	2300      	movs	r3, #0
 8006178:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800617a:	2307      	movs	r3, #7
 800617c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800617e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006188:	f003 fd1a 	bl	8009bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 800618c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006190:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006192:	2302      	movs	r3, #2
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006196:	2301      	movs	r3, #1
 8006198:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619a:	2300      	movs	r3, #0
 800619c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800619e:	2307      	movs	r3, #7
 80061a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80061a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80061a6:	4619      	mov	r1, r3
 80061a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ac:	f003 fd08 	bl	8009bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80061b0:	2200      	movs	r2, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	2025      	movs	r0, #37	; 0x25
 80061b6:	f003 fa47 	bl	8009648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061ba:	2025      	movs	r0, #37	; 0x25
 80061bc:	f003 fa60 	bl	8009680 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80061c0:	e04d      	b.n	800625e <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <HAL_UART_MspInit+0x184>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d148      	bne.n	800625e <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80061cc:	2302      	movs	r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80061d0:	2308      	movs	r3, #8
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061d4:	f107 0318 	add.w	r3, r7, #24
 80061d8:	4618      	mov	r0, r3
 80061da:	f006 fc91 	bl	800cb00 <HAL_RCCEx_PeriphCLKConfig>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80061e4:	f7ff fa38 	bl	8005658 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_UART_MspInit+0x180>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <HAL_UART_MspInit+0x180>)
 80061ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f2:	6593      	str	r3, [r2, #88]	; 0x58
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <HAL_UART_MspInit+0x180>)
 80061f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006200:	4b1a      	ldr	r3, [pc, #104]	; (800626c <HAL_UART_MspInit+0x180>)
 8006202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006204:	4a19      	ldr	r2, [pc, #100]	; (800626c <HAL_UART_MspInit+0x180>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800620c:	4b17      	ldr	r3, [pc, #92]	; (800626c <HAL_UART_MspInit+0x180>)
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8006218:	2304      	movs	r3, #4
 800621a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621c:	2302      	movs	r3, #2
 800621e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006220:	2300      	movs	r3, #0
 8006222:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006224:	2301      	movs	r3, #1
 8006226:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006228:	2307      	movs	r3, #7
 800622a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800622c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006230:	4619      	mov	r1, r3
 8006232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006236:	f003 fcc3 	bl	8009bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006240:	2302      	movs	r3, #2
 8006242:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006248:	2301      	movs	r3, #1
 800624a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800624c:	2303      	movs	r3, #3
 800624e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8006250:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006254:	4619      	mov	r1, r3
 8006256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800625a:	f003 fcb1 	bl	8009bc0 <HAL_GPIO_Init>
}
 800625e:	bf00      	nop
 8006260:	3780      	adds	r7, #128	; 0x80
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40013800 	.word	0x40013800
 800626c:	40021000 	.word	0x40021000
 8006270:	40004400 	.word	0x40004400

08006274 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <HAL_UART_MspDeInit+0x5c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d10f      	bne.n	80062a6 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_UART_MspDeInit+0x60>)
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <HAL_UART_MspDeInit+0x60>)
 800628c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006290:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8006292:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629a:	f003 fdfb 	bl	8009e94 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800629e:	2025      	movs	r0, #37	; 0x25
 80062a0:	f003 f9fc 	bl	800969c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80062a4:	e010      	b.n	80062c8 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <HAL_UART_MspDeInit+0x64>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10b      	bne.n	80062c8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <HAL_UART_MspDeInit+0x60>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <HAL_UART_MspDeInit+0x60>)
 80062b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062ba:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80062bc:	f248 0104 	movw	r1, #32772	; 0x8004
 80062c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062c4:	f003 fde6 	bl	8009e94 <HAL_GPIO_DeInit>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40004400 	.word	0x40004400

080062dc <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 80062e2:	4a15      	ldr	r2, [pc, #84]	; (8006338 <MX_USART1_UART_Init_38400baud+0x5c>)
 80062e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 80062e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80062ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 8006302:	220c      	movs	r2, #12
 8006304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 8006308:	2200      	movs	r2, #0
 800630a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 800630e:	2200      	movs	r2, #0
 8006310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 8006314:	2200      	movs	r2, #0
 8006316:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 800631a:	2200      	movs	r2, #0
 800631c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800631e:	4805      	ldr	r0, [pc, #20]	; (8006334 <MX_USART1_UART_Init_38400baud+0x58>)
 8006320:	f007 feec 	bl	800e0fc <HAL_UART_Init>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 800632a:	f7ff f995 	bl	8005658 <Error_Handler>
  }

}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000278c 	.word	0x2000278c
 8006338:	40013800 	.word	0x40013800

0800633c <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	607b      	str	r3, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	817b      	strh	r3, [r7, #10]
 800634a:	4613      	mov	r3, r2
 800634c:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]
 8006352:	2300      	movs	r3, #0
 8006354:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	2b07      	cmp	r3, #7
 800635a:	d92f      	bls.n	80063bc <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3302      	adds	r3, #2
 8006360:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	3b04      	subs	r3, #4
 8006366:	82bb      	strh	r3, [r7, #20]
 8006368:	e00d      	b.n	8006386 <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	60fa      	str	r2, [r7, #12]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	4413      	add	r3, r2
 8006376:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 8006378:	7dba      	ldrb	r2, [r7, #22]
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	4413      	add	r3, r2
 800637e:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006380:	8abb      	ldrh	r3, [r7, #20]
 8006382:	3b01      	subs	r3, #1
 8006384:	82bb      	strh	r3, [r7, #20]
 8006386:	8abb      	ldrh	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ee      	bne.n	800636a <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 800638c:	7a7b      	ldrb	r3, [r7, #9]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	60fa      	str	r2, [r7, #12]
 8006398:	7dfa      	ldrb	r2, [r7, #23]
 800639a:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	7dba      	ldrb	r2, [r7, #22]
 80063a0:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <calcChecksumRFC1145+0x82>
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7dfa      	ldrb	r2, [r7, #23]
 80063b2:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	7dba      	ldrb	r2, [r7, #22]
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e000      	b.n	80063be <calcChecksumRFC1145+0x82>
		return;
 80063bc:	bf00      	nop
	}
}
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80063c8:	b5b0      	push	{r4, r5, r7, lr}
 80063ca:	b0b0      	sub	sp, #192	; 0xc0
 80063cc:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 80063ce:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80063d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 80063d6:	4ab8      	ldr	r2, [pc, #736]	; (80066b8 <ubloxUartSpeedFast+0x2f0>)
 80063d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80063de:	c303      	stmia	r3!, {r0, r1}
 80063e0:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 80063e2:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2300      	movs	r3, #0
 80063ec:	2201      	movs	r2, #1
 80063ee:	2109      	movs	r1, #9
 80063f0:	f7ff ffa4 	bl	800633c <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	611a      	str	r2, [r3, #16]
 800640a:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 800640c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8006416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8006422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 800642e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 800643a:	2303      	movs	r3, #3
 800643c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8006440:	e116      	b.n	8006670 <ubloxUartSpeedFast+0x2a8>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8006442:	4b9e      	ldr	r3, [pc, #632]	; (80066bc <ubloxUartSpeedFast+0x2f4>)
 8006444:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8006448:	461d      	mov	r5, r3
 800644a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006452:	c407      	stmia	r4!, {r0, r1, r2}
 8006454:	8023      	strh	r3, [r4, #0]
 8006456:	3402      	adds	r4, #2
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800645c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8006460:	2319      	movs	r3, #25
 8006462:	221e      	movs	r2, #30
 8006464:	4896      	ldr	r0, [pc, #600]	; (80066c0 <ubloxUartSpeedFast+0x2f8>)
 8006466:	f007 fed0 	bl	800e20a <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 800646a:	4b96      	ldr	r3, [pc, #600]	; (80066c4 <ubloxUartSpeedFast+0x2fc>)
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8006470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006474:	2209      	movs	r2, #9
 8006476:	4619      	mov	r1, r3
 8006478:	4893      	ldr	r0, [pc, #588]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 800647a:	f007 ff5b 	bl	800e334 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800647e:	bf00      	nop
 8006480:	4b90      	ldr	r3, [pc, #576]	; (80066c4 <ubloxUartSpeedFast+0x2fc>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d1fa      	bne.n	8006480 <ubloxUartSpeedFast+0xb8>
		}

		gUart1RxReady = RESET;
 800648a:	4b90      	ldr	r3, [pc, #576]	; (80066cc <ubloxUartSpeedFast+0x304>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8006490:	488d      	ldr	r0, [pc, #564]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 8006492:	f008 f845 	bl	800e520 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006496:	488c      	ldr	r0, [pc, #560]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 8006498:	f008 fae6 	bl	800ea68 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800649c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064a0:	498b      	ldr	r1, [pc, #556]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064a2:	4889      	ldr	r0, [pc, #548]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 80064a4:	f007 ffa2 	bl	800e3ec <HAL_UART_Receive_IT>
		int i = 11;
 80064a8:	230b      	movs	r3, #11
 80064aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80064ae:	e007      	b.n	80064c0 <ubloxUartSpeedFast+0xf8>
			HAL_Delay(100);
 80064b0:	2064      	movs	r0, #100	; 0x64
 80064b2:	f001 fb87 	bl	8007bc4 <HAL_Delay>
			--i;
 80064b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064ba:	3b01      	subs	r3, #1
 80064bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80064c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <ubloxUartSpeedFast+0x10a>
 80064c8:	4b80      	ldr	r3, [pc, #512]	; (80066cc <ubloxUartSpeedFast+0x304>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d1ee      	bne.n	80064b0 <ubloxUartSpeedFast+0xe8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80064d2:	4b7f      	ldr	r3, [pc, #508]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2bb5      	cmp	r3, #181	; 0xb5
 80064d8:	f040 80c2 	bne.w	8006660 <ubloxUartSpeedFast+0x298>
 80064dc:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b62      	cmp	r3, #98	; 0x62
 80064e2:	f040 80bd 	bne.w	8006660 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80064e6:	4b7a      	ldr	r3, [pc, #488]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064e8:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80064ea:	2b06      	cmp	r3, #6
 80064ec:	f040 80b8 	bne.w	8006660 <ubloxUartSpeedFast+0x298>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80064f0:	4b77      	ldr	r3, [pc, #476]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 80b3 	bne.w	8006660 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80064fa:	4b75      	ldr	r3, [pc, #468]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80064fc:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80064fe:	2b14      	cmp	r3, #20
 8006500:	f040 80ae 	bne.w	8006660 <ubloxUartSpeedFast+0x298>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8006504:	4b72      	ldr	r3, [pc, #456]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 8006506:	795b      	ldrb	r3, [r3, #5]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 80a9 	bne.w	8006660 <ubloxUartSpeedFast+0x298>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006514:	e010      	b.n	8006538 <ubloxUartSpeedFast+0x170>
				cfg_Port1_Set[i] = ublox_Response[i];
 8006516:	4a6e      	ldr	r2, [pc, #440]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 8006518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651c:	4413      	add	r3, r2
 800651e:	7819      	ldrb	r1, [r3, #0]
 8006520:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006528:	4413      	add	r3, r2
 800652a:	460a      	mov	r2, r1
 800652c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800652e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006532:	3301      	adds	r3, #1
 8006534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653c:	2b1b      	cmp	r3, #27
 800653e:	d9ea      	bls.n	8006516 <ubloxUartSpeedFast+0x14e>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 8006540:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8006544:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8006548:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800654c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8006550:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8006554:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8006558:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800655c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 8006560:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006564:	2300      	movs	r3, #0
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	2201      	movs	r2, #1
 800656c:	211c      	movs	r1, #28
 800656e:	f7ff fee5 	bl	800633c <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 8006572:	4b54      	ldr	r3, [pc, #336]	; (80066c4 <ubloxUartSpeedFast+0x2fc>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8006578:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800657c:	221c      	movs	r2, #28
 800657e:	4619      	mov	r1, r3
 8006580:	4851      	ldr	r0, [pc, #324]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 8006582:	f007 fed7 	bl	800e334 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006586:	bf00      	nop
 8006588:	4b4e      	ldr	r3, [pc, #312]	; (80066c4 <ubloxUartSpeedFast+0x2fc>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d1fa      	bne.n	8006588 <ubloxUartSpeedFast+0x1c0>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006592:	484d      	ldr	r0, [pc, #308]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 8006594:	f007 ff6e 	bl	800e474 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8006598:	484b      	ldr	r0, [pc, #300]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 800659a:	f007 fdfd 	bl	800e198 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 800659e:	f7ff fe9d 	bl	80062dc <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80065a2:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <ubloxUartSpeedFast+0x304>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80065a8:	4847      	ldr	r0, [pc, #284]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 80065aa:	f007 ffb9 	bl	800e520 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80065ae:	4846      	ldr	r0, [pc, #280]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 80065b0:	f008 fa5a 	bl	800ea68 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80065b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b8:	4945      	ldr	r1, [pc, #276]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065ba:	4843      	ldr	r0, [pc, #268]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 80065bc:	f007 ff16 	bl	800e3ec <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80065c0:	bf00      	nop
 80065c2:	4b42      	ldr	r3, [pc, #264]	; (80066cc <ubloxUartSpeedFast+0x304>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d1fa      	bne.n	80065c2 <ubloxUartSpeedFast+0x1fa>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80065cc:	4b40      	ldr	r3, [pc, #256]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2bb5      	cmp	r3, #181	; 0xb5
 80065d2:	d130      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
 80065d4:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b62      	cmp	r3, #98	; 0x62
 80065da:	d12c      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80065dc:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065de:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	d128      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80065e4:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d124      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80065ec:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065ee:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d120      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80065f4:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065f6:	795b      	ldrb	r3, [r3, #5]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11c      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80065fc:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 80065fe:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006600:	2b06      	cmp	r3, #6
 8006602:	d118      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <ubloxUartSpeedFast+0x308>)
 8006606:	79db      	ldrb	r3, [r3, #7]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d114      	bne.n	8006636 <ubloxUartSpeedFast+0x26e>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <ubloxUartSpeedFast+0x30c>)
 800660e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006612:	461d      	mov	r5, r3
 8006614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800661c:	c407      	stmia	r4!, {r0, r1, r2}
 800661e:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006620:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006624:	2319      	movs	r3, #25
 8006626:	221c      	movs	r2, #28
 8006628:	4825      	ldr	r0, [pc, #148]	; (80066c0 <ubloxUartSpeedFast+0x2f8>)
 800662a:	f007 fdee 	bl	800e20a <HAL_UART_Transmit>
					HAL_Delay(100);
 800662e:	2064      	movs	r0, #100	; 0x64
 8006630:	f001 fac8 	bl	8007bc4 <HAL_Delay>
				{
 8006634:	e03d      	b.n	80066b2 <ubloxUartSpeedFast+0x2ea>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 8006636:	4b28      	ldr	r3, [pc, #160]	; (80066d8 <ubloxUartSpeedFast+0x310>)
 8006638:	1d3c      	adds	r4, r7, #4
 800663a:	461d      	mov	r5, r3
 800663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800663e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800664c:	1d39      	adds	r1, r7, #4
 800664e:	2319      	movs	r3, #25
 8006650:	2233      	movs	r2, #51	; 0x33
 8006652:	481b      	ldr	r0, [pc, #108]	; (80066c0 <ubloxUartSpeedFast+0x2f8>)
 8006654:	f007 fdd9 	bl	800e20a <HAL_UART_Transmit>
					HAL_Delay(100);
 8006658:	2064      	movs	r0, #100	; 0x64
 800665a:	f001 fab3 	bl	8007bc4 <HAL_Delay>
				}
#endif
			}
			return;
 800665e:	e028      	b.n	80066b2 <ubloxUartSpeedFast+0x2ea>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8006660:	20c8      	movs	r0, #200	; 0xc8
 8006662:	f001 faaf 	bl	8007bc4 <HAL_Delay>
			--cnt;
 8006666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800666a:	3b01      	subs	r3, #1
 800666c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8006670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006674:	2b00      	cmp	r3, #0
 8006676:	f47f aee4 	bne.w	8006442 <ubloxUartSpeedFast+0x7a>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 800667a:	4813      	ldr	r0, [pc, #76]	; (80066c8 <ubloxUartSpeedFast+0x300>)
 800667c:	f007 fd8c 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006680:	f7ff fe2c 	bl	80062dc <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8006684:	4b15      	ldr	r3, [pc, #84]	; (80066dc <ubloxUartSpeedFast+0x314>)
 8006686:	1d3c      	adds	r4, r7, #4
 8006688:	461d      	mov	r5, r3
 800668a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800668c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006696:	e895 0003 	ldmia.w	r5, {r0, r1}
 800669a:	6020      	str	r0, [r4, #0]
 800669c:	3404      	adds	r4, #4
 800669e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80066a0:	1d39      	adds	r1, r7, #4
 80066a2:	2319      	movs	r3, #25
 80066a4:	2234      	movs	r2, #52	; 0x34
 80066a6:	4806      	ldr	r0, [pc, #24]	; (80066c0 <ubloxUartSpeedFast+0x2f8>)
 80066a8:	f007 fdaf 	bl	800e20a <HAL_UART_Transmit>
		HAL_Delay(100);
 80066ac:	2064      	movs	r0, #100	; 0x64
 80066ae:	f001 fa89 	bl	8007bc4 <HAL_Delay>
	}
#endif
}
 80066b2:	37b8      	adds	r7, #184	; 0xb8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bdb0      	pop	{r4, r5, r7, pc}
 80066b8:	08013d00 	.word	0x08013d00
 80066bc:	08013d0c 	.word	0x08013d0c
 80066c0:	20002810 	.word	0x20002810
 80066c4:	20000390 	.word	0x20000390
 80066c8:	2000278c 	.word	0x2000278c
 80066cc:	20000391 	.word	0x20000391
 80066d0:	20000514 	.word	0x20000514
 80066d4:	08013d2c 	.word	0x08013d2c
 80066d8:	08013d4c 	.word	0x08013d4c
 80066dc:	08013d80 	.word	0x08013d80

080066e0 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80066e0:	b5b0      	push	{r4, r5, r7, lr}
 80066e2:	b0ae      	sub	sp, #184	; 0xb8
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	4603      	mov	r3, r0
 80066e8:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80066ea:	2300      	movs	r3, #0
 80066ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f009 f816 	bl	800f728 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	b29b      	uxth	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8006710:	2300      	movs	r3, #0
 8006712:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8006716:	2300      	movs	r3, #0
 8006718:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 800671c:	4ac5      	ldr	r2, [pc, #788]	; (8006a34 <ubloxSetFrequency+0x354>)
 800671e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006726:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 800672a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800672e:	2300      	movs	r3, #0
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	2201      	movs	r2, #1
 8006736:	2108      	movs	r1, #8
 8006738:	f7ff fe00 	bl	800633c <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 800673c:	2303      	movs	r3, #3
 800673e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8006742:	e16d      	b.n	8006a20 <ubloxSetFrequency+0x340>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8006744:	4abc      	ldr	r2, [pc, #752]	; (8006a38 <ubloxSetFrequency+0x358>)
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	4611      	mov	r1, r2
 800674c:	2243      	movs	r2, #67	; 0x43
 800674e:	4618      	mov	r0, r3
 8006750:	f008 ffdc 	bl	800f70c <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006754:	f107 010c 	add.w	r1, r7, #12
 8006758:	2319      	movs	r3, #25
 800675a:	2242      	movs	r2, #66	; 0x42
 800675c:	48b7      	ldr	r0, [pc, #732]	; (8006a3c <ubloxSetFrequency+0x35c>)
 800675e:	f007 fd54 	bl	800e20a <HAL_UART_Transmit>
			HAL_Delay(100);
 8006762:	2064      	movs	r0, #100	; 0x64
 8006764:	f001 fa2e 	bl	8007bc4 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8006768:	4bb5      	ldr	r3, [pc, #724]	; (8006a40 <ubloxSetFrequency+0x360>)
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800676e:	48b5      	ldr	r0, [pc, #724]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006770:	f007 fed6 	bl	800e520 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006774:	48b3      	ldr	r0, [pc, #716]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006776:	f008 f977 	bl	800ea68 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800677a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800677e:	49b2      	ldr	r1, [pc, #712]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006780:	48b0      	ldr	r0, [pc, #704]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006782:	f007 fe33 	bl	800e3ec <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8006786:	4bb1      	ldr	r3, [pc, #708]	; (8006a4c <ubloxSetFrequency+0x36c>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 800678c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006790:	2208      	movs	r2, #8
 8006792:	4619      	mov	r1, r3
 8006794:	48ab      	ldr	r0, [pc, #684]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006796:	f007 fdcd 	bl	800e334 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800679a:	bf00      	nop
 800679c:	4bab      	ldr	r3, [pc, #684]	; (8006a4c <ubloxSetFrequency+0x36c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d1fa      	bne.n	800679c <ubloxSetFrequency+0xbc>
		}

		/* Wait for the response */
		int i = 11;
 80067a6:	230b      	movs	r3, #11
 80067a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80067ac:	e007      	b.n	80067be <ubloxSetFrequency+0xde>
			HAL_Delay(100);
 80067ae:	2064      	movs	r0, #100	; 0x64
 80067b0:	f001 fa08 	bl	8007bc4 <HAL_Delay>
			--i;
 80067b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067b8:	3b01      	subs	r3, #1
 80067ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80067be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <ubloxSetFrequency+0xf0>
 80067c6:	4b9e      	ldr	r3, [pc, #632]	; (8006a40 <ubloxSetFrequency+0x360>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d1ee      	bne.n	80067ae <ubloxSetFrequency+0xce>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 80067d0:	4b9f      	ldr	r3, [pc, #636]	; (8006a50 <ubloxSetFrequency+0x370>)
 80067d2:	f107 040c 	add.w	r4, r7, #12
 80067d6:	461d      	mov	r5, r3
 80067d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	8022      	strh	r2, [r4, #0]
 80067e6:	3402      	adds	r4, #2
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80067ec:	f107 010c 	add.w	r1, r7, #12
 80067f0:	2319      	movs	r3, #25
 80067f2:	2222      	movs	r2, #34	; 0x22
 80067f4:	4891      	ldr	r0, [pc, #580]	; (8006a3c <ubloxSetFrequency+0x35c>)
 80067f6:	f007 fd08 	bl	800e20a <HAL_UART_Transmit>
			HAL_Delay(100);
 80067fa:	2064      	movs	r0, #100	; 0x64
 80067fc:	f001 f9e2 	bl	8007bc4 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006800:	4b91      	ldr	r3, [pc, #580]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2bb5      	cmp	r3, #181	; 0xb5
 8006806:	f040 80e9 	bne.w	80069dc <ubloxSetFrequency+0x2fc>
 800680a:	4b8f      	ldr	r3, [pc, #572]	; (8006a48 <ubloxSetFrequency+0x368>)
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b62      	cmp	r3, #98	; 0x62
 8006810:	f040 80e4 	bne.w	80069dc <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006814:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006816:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006818:	2b06      	cmp	r3, #6
 800681a:	f040 80df 	bne.w	80069dc <ubloxSetFrequency+0x2fc>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 800681e:	4b8a      	ldr	r3, [pc, #552]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	2b31      	cmp	r3, #49	; 0x31
 8006824:	f040 80da 	bne.w	80069dc <ubloxSetFrequency+0x2fc>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006828:	2300      	movs	r3, #0
 800682a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800682e:	e010      	b.n	8006852 <ubloxSetFrequency+0x172>
				cfg_tp5_Set[i] = ublox_Response[i];
 8006830:	4a85      	ldr	r2, [pc, #532]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006836:	4413      	add	r3, r2
 8006838:	7819      	ldrb	r1, [r3, #0]
 800683a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800683e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006842:	4413      	add	r3, r2
 8006844:	460a      	mov	r2, r1
 8006846:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800684c:	3301      	adds	r3, #1
 800684e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006856:	2b27      	cmp	r3, #39	; 0x27
 8006858:	d9ea      	bls.n	8006830 <ubloxSetFrequency+0x150>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 800685a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800685e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8006862:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8006866:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 800686a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800686e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8006872:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006876:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 800687a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800687e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8006882:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8006886:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 800688a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800688e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8006892:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006896:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			if (frequency > 1) {
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d918      	bls.n	80068d2 <ubloxSetFrequency+0x1f2>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x00;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x00;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x80;
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x00;
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x00;
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x80;
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80068d0:	e017      	b.n	8006902 <ubloxSetFrequency+0x222>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 80068d2:	2399      	movs	r3, #153	; 0x99
 80068d4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				cfg_tp5_Set[6 + 17] = 0x99;
 80068d8:	2399      	movs	r3, #153	; 0x99
 80068da:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				cfg_tp5_Set[6 + 18] = 0x99;
 80068de:	2399      	movs	r3, #153	; 0x99
 80068e0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
				cfg_tp5_Set[6 + 19] = 0x19;
 80068e4:	2319      	movs	r3, #25
 80068e6:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 80068ea:	2399      	movs	r3, #153	; 0x99
 80068ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
				cfg_tp5_Set[6 + 21] = 0x99;
 80068f0:	2399      	movs	r3, #153	; 0x99
 80068f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cfg_tp5_Set[6 + 22] = 0x99;
 80068f6:	2399      	movs	r3, #153	; 0x99
 80068f8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
				cfg_tp5_Set[6 + 23] = 0x19;
 80068fc:	2319      	movs	r3, #25
 80068fe:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8006902:	23cf      	movs	r3, #207	; 0xcf
 8006904:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8006908:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	2201      	movs	r2, #1
 8006914:	2128      	movs	r1, #40	; 0x28
 8006916:	f7ff fd11 	bl	800633c <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 800691a:	4b4c      	ldr	r3, [pc, #304]	; (8006a4c <ubloxSetFrequency+0x36c>)
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8006920:	4848      	ldr	r0, [pc, #288]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006922:	f007 fda7 	bl	800e474 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8006926:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800692a:	2228      	movs	r2, #40	; 0x28
 800692c:	4619      	mov	r1, r3
 800692e:	4845      	ldr	r0, [pc, #276]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006930:	f007 fd00 	bl	800e334 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006934:	bf00      	nop
 8006936:	4b45      	ldr	r3, [pc, #276]	; (8006a4c <ubloxSetFrequency+0x36c>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d1fa      	bne.n	8006936 <ubloxSetFrequency+0x256>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006940:	4840      	ldr	r0, [pc, #256]	; (8006a44 <ubloxSetFrequency+0x364>)
 8006942:	f007 fd97 	bl	800e474 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <ubloxSetFrequency+0x360>)
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 800694c:	483d      	ldr	r0, [pc, #244]	; (8006a44 <ubloxSetFrequency+0x364>)
 800694e:	f008 f88b 	bl	800ea68 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006956:	493c      	ldr	r1, [pc, #240]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006958:	483a      	ldr	r0, [pc, #232]	; (8006a44 <ubloxSetFrequency+0x364>)
 800695a:	f007 fd47 	bl	800e3ec <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 800695e:	bf00      	nop
 8006960:	4b37      	ldr	r3, [pc, #220]	; (8006a40 <ubloxSetFrequency+0x360>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d1fa      	bne.n	8006960 <ubloxSetFrequency+0x280>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 800696a:	4836      	ldr	r0, [pc, #216]	; (8006a44 <ubloxSetFrequency+0x364>)
 800696c:	f007 fdd8 	bl	800e520 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006970:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2bb5      	cmp	r3, #181	; 0xb5
 8006976:	d131      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
 8006978:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <ubloxSetFrequency+0x368>)
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b62      	cmp	r3, #98	; 0x62
 800697e:	d12d      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006980:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006982:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006984:	2b05      	cmp	r3, #5
 8006986:	d129      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006988:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <ubloxSetFrequency+0x368>)
 800698a:	78db      	ldrb	r3, [r3, #3]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d125      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006990:	4b2d      	ldr	r3, [pc, #180]	; (8006a48 <ubloxSetFrequency+0x368>)
 8006992:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006994:	2b02      	cmp	r3, #2
 8006996:	d121      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006998:	4b2b      	ldr	r3, [pc, #172]	; (8006a48 <ubloxSetFrequency+0x368>)
 800699a:	795b      	ldrb	r3, [r3, #5]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <ubloxSetFrequency+0x368>)
 80069a2:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d119      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 80069a8:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <ubloxSetFrequency+0x368>)
 80069aa:	79db      	ldrb	r3, [r3, #7]
 80069ac:	2b31      	cmp	r3, #49	; 0x31
 80069ae:	d115      	bne.n	80069dc <ubloxSetFrequency+0x2fc>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <ubloxSetFrequency+0x374>)
 80069b2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80069b6:	461d      	mov	r5, r3
 80069b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069c0:	c407      	stmia	r4!, {r0, r1, r2}
 80069c2:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80069c4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80069c8:	2319      	movs	r3, #25
 80069ca:	221c      	movs	r2, #28
 80069cc:	481b      	ldr	r0, [pc, #108]	; (8006a3c <ubloxSetFrequency+0x35c>)
 80069ce:	f007 fc1c 	bl	800e20a <HAL_UART_Transmit>
					HAL_Delay(100);
 80069d2:	2064      	movs	r0, #100	; 0x64
 80069d4:	f001 f8f6 	bl	8007bc4 <HAL_Delay>
				}
#endif
				return 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	e027      	b.n	8006a2c <ubloxSetFrequency+0x34c>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <ubloxSetFrequency+0x378>)
 80069de:	f107 040c 	add.w	r4, r7, #12
 80069e2:	461d      	mov	r5, r3
 80069e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069f0:	c407      	stmia	r4!, {r0, r1, r2}
 80069f2:	8023      	strh	r3, [r4, #0]
 80069f4:	3402      	adds	r4, #2
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80069fa:	f107 010c 	add.w	r1, r7, #12
 80069fe:	2319      	movs	r3, #25
 8006a00:	222e      	movs	r2, #46	; 0x2e
 8006a02:	480e      	ldr	r0, [pc, #56]	; (8006a3c <ubloxSetFrequency+0x35c>)
 8006a04:	f007 fc01 	bl	800e20a <HAL_UART_Transmit>
			HAL_Delay(100);
 8006a08:	2064      	movs	r0, #100	; 0x64
 8006a0a:	f001 f8db 	bl	8007bc4 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8006a0e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8006a18:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006a1c:	f001 f8d2 	bl	8007bc4 <HAL_Delay>
	while (tryCtr) {
 8006a20:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f47f ae8d 	bne.w	8006744 <ubloxSetFrequency+0x64>
	}

	return 1;
 8006a2a:	2301      	movs	r3, #1
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	37b0      	adds	r7, #176	; 0xb0
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdb0      	pop	{r4, r5, r7, pc}
 8006a34:	08013db8 	.word	0x08013db8
 8006a38:	08013dc0 	.word	0x08013dc0
 8006a3c:	20002810 	.word	0x20002810
 8006a40:	20000391 	.word	0x20000391
 8006a44:	2000278c 	.word	0x2000278c
 8006a48:	20000514 	.word	0x20000514
 8006a4c:	20000390 	.word	0x20000390
 8006a50:	08013e04 	.word	0x08013e04
 8006a54:	08013d2c 	.word	0x08013d2c
 8006a58:	08013e28 	.word	0x08013e28

08006a5c <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b0ac      	sub	sp, #176	; 0xb0
 8006a60:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8006a62:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <ubloxMsgsTurnOff+0x40>)
 8006a64:	463b      	mov	r3, r7
 8006a66:	4611      	mov	r1, r2
 8006a68:	22af      	movs	r2, #175	; 0xaf
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f008 fe4e 	bl	800f70c <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <ubloxMsgsTurnOff+0x44>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8006a76:	463b      	mov	r3, r7
 8006a78:	22af      	movs	r2, #175	; 0xaf
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <ubloxMsgsTurnOff+0x48>)
 8006a7e:	f007 fc59 	bl	800e334 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006a82:	bf00      	nop
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <ubloxMsgsTurnOff+0x44>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d1fa      	bne.n	8006a84 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8006a8e:	4805      	ldr	r0, [pc, #20]	; (8006aa4 <ubloxMsgsTurnOff+0x48>)
 8006a90:	f007 fcf0 	bl	800e474 <HAL_UART_AbortTransmit_IT>
}
 8006a94:	bf00      	nop
 8006a96:	37b0      	adds	r7, #176	; 0xb0
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	08013e58 	.word	0x08013e58
 8006aa0:	20000390 	.word	0x20000390
 8006aa4:	2000278c 	.word	0x2000278c

08006aa8 <ublox_NavPosllh_req>:

void ublox_NavPosllh_req(UbloxNavPosllh_t* ubloxNavPosllh)
{
 8006aa8:	b5b0      	push	{r4, r5, r7, lr}
 8006aaa:	b08e      	sub	sp, #56	; 0x38
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	6078      	str	r0, [r7, #4]
	uint8_t nav_Posllh_Req[] 		= {
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <ublox_NavPosllh_req+0x90>)
 8006ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aba:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x02,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Posllh_Req, sizeof(nav_Posllh_Req), 1, 0, 0);
 8006abe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2201      	movs	r2, #1
 8006aca:	2108      	movs	r1, #8
 8006acc:	f7ff fc36 	bl	800633c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavPosllh) {
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d02c      	beq.n	8006b30 <ublox_NavPosllh_req+0x88>
		gUbloxNavPosllh_resp = ubloxNavPosllh;
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <ublox_NavPosllh_req+0x94>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-POSLLH\r\n";
 8006adc:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <ublox_NavPosllh_req+0x98>)
 8006ade:	f107 0408 	add.w	r4, r7, #8
 8006ae2:	461d      	mov	r5, r3
 8006ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006aec:	c407      	stmia	r4!, {r0, r1, r2}
 8006aee:	8023      	strh	r3, [r4, #0]
 8006af0:	3402      	adds	r4, #2
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006af6:	f107 0108 	add.w	r1, r7, #8
 8006afa:	2319      	movs	r3, #25
 8006afc:	221e      	movs	r2, #30
 8006afe:	4811      	ldr	r0, [pc, #68]	; (8006b44 <ublox_NavPosllh_req+0x9c>)
 8006b00:	f007 fb83 	bl	800e20a <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006b04:	4810      	ldr	r0, [pc, #64]	; (8006b48 <ublox_NavPosllh_req+0xa0>)
 8006b06:	f007 fb47 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006b0a:	f7ff fbe7 	bl	80062dc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-POSLLH request */
	gUart1TxReady = RESET;
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <ublox_NavPosllh_req+0xa4>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Posllh_Req, sizeof(nav_Posllh_Req));
 8006b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b18:	2208      	movs	r2, #8
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	480a      	ldr	r0, [pc, #40]	; (8006b48 <ublox_NavPosllh_req+0xa0>)
 8006b1e:	f007 fc09 	bl	800e334 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006b22:	bf00      	nop
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <ublox_NavPosllh_req+0xa4>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d1fa      	bne.n	8006b24 <ublox_NavPosllh_req+0x7c>
 8006b2e:	e000      	b.n	8006b32 <ublox_NavPosllh_req+0x8a>
		return;
 8006b30:	bf00      	nop
	}
}
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bdb0      	pop	{r4, r5, r7, pc}
 8006b38:	08013f08 	.word	0x08013f08
 8006b3c:	20000504 	.word	0x20000504
 8006b40:	08013f10 	.word	0x08013f10
 8006b44:	20002810 	.word	0x20002810
 8006b48:	2000278c 	.word	0x2000278c
 8006b4c:	20000390 	.word	0x20000390

08006b50 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8006b50:	b5b0      	push	{r4, r5, r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006b58:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <ublox_NavClock_req+0x8c>)
 8006b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b62:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006b66:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2201      	movs	r2, #1
 8006b72:	2108      	movs	r1, #8
 8006b74:	f7ff fbe2 	bl	800633c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d029      	beq.n	8006bd2 <ublox_NavClock_req+0x82>
		gUbloxNavClock_resp = ubloxNavClock;
 8006b7e:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <ublox_NavClock_req+0x90>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-CLOCK\r\n";
 8006b84:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <ublox_NavClock_req+0x94>)
 8006b86:	f107 0408 	add.w	r4, r7, #8
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b94:	c407      	stmia	r4!, {r0, r1, r2}
 8006b96:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006b98:	f107 0108 	add.w	r1, r7, #8
 8006b9c:	2319      	movs	r3, #25
 8006b9e:	221d      	movs	r2, #29
 8006ba0:	4811      	ldr	r0, [pc, #68]	; (8006be8 <ublox_NavClock_req+0x98>)
 8006ba2:	f007 fb32 	bl	800e20a <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006ba6:	4811      	ldr	r0, [pc, #68]	; (8006bec <ublox_NavClock_req+0x9c>)
 8006ba8:	f007 faf6 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006bac:	f7ff fb96 	bl	80062dc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <ublox_NavClock_req+0xa0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8006bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480b      	ldr	r0, [pc, #44]	; (8006bec <ublox_NavClock_req+0x9c>)
 8006bc0:	f007 fbb8 	bl	800e334 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006bc4:	bf00      	nop
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <ublox_NavClock_req+0xa0>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d1fa      	bne.n	8006bc6 <ublox_NavClock_req+0x76>
 8006bd0:	e000      	b.n	8006bd4 <ublox_NavClock_req+0x84>
		return;
 8006bd2:	bf00      	nop
	}
}
 8006bd4:	3730      	adds	r7, #48	; 0x30
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	08013f30 	.word	0x08013f30
 8006be0:	20000508 	.word	0x20000508
 8006be4:	08013f38 	.word	0x08013f38
 8006be8:	20002810 	.word	0x20002810
 8006bec:	2000278c 	.word	0x2000278c
 8006bf0:	20000390 	.word	0x20000390

08006bf4 <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b08e      	sub	sp, #56	; 0x38
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8006bfc:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <ublox_NavDop_req+0x8c>)
 8006bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c06:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8006c0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2300      	movs	r3, #0
 8006c14:	2201      	movs	r2, #1
 8006c16:	2108      	movs	r1, #8
 8006c18:	f7ff fb90 	bl	800633c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d029      	beq.n	8006c76 <ublox_NavDop_req+0x82>
		gUbloxNavDop_resp = ubloxNavDop;
 8006c22:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <ublox_NavDop_req+0x90>)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-DOP\r\n";
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <ublox_NavDop_req+0x94>)
 8006c2a:	f107 040c 	add.w	r4, r7, #12
 8006c2e:	461d      	mov	r5, r3
 8006c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006c3c:	f107 010c 	add.w	r1, r7, #12
 8006c40:	2319      	movs	r3, #25
 8006c42:	221b      	movs	r2, #27
 8006c44:	4811      	ldr	r0, [pc, #68]	; (8006c8c <ublox_NavDop_req+0x98>)
 8006c46:	f007 fae0 	bl	800e20a <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006c4a:	4811      	ldr	r0, [pc, #68]	; (8006c90 <ublox_NavDop_req+0x9c>)
 8006c4c:	f007 faa4 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006c50:	f7ff fb44 	bl	80062dc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <ublox_NavDop_req+0xa0>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c5e:	2208      	movs	r2, #8
 8006c60:	4619      	mov	r1, r3
 8006c62:	480b      	ldr	r0, [pc, #44]	; (8006c90 <ublox_NavDop_req+0x9c>)
 8006c64:	f007 fb66 	bl	800e334 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006c68:	bf00      	nop
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <ublox_NavDop_req+0xa0>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d1fa      	bne.n	8006c6a <ublox_NavDop_req+0x76>
 8006c74:	e000      	b.n	8006c78 <ublox_NavDop_req+0x84>
		return;
 8006c76:	bf00      	nop
	}
}
 8006c78:	3730      	adds	r7, #48	; 0x30
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	08013f58 	.word	0x08013f58
 8006c84:	2000050c 	.word	0x2000050c
 8006c88:	08013f60 	.word	0x08013f60
 8006c8c:	20002810 	.word	0x20002810
 8006c90:	2000278c 	.word	0x2000278c
 8006c94:	20000390 	.word	0x20000390

08006c98 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8006c98:	b5b0      	push	{r4, r5, r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8006ca0:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <ublox_NavSvinfo_req+0x90>)
 8006ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006caa:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 8006cae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2108      	movs	r1, #8
 8006cbc:	f7ff fb3e 	bl	800633c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02c      	beq.n	8006d20 <ublox_NavSvinfo_req+0x88>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8006cc6:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <ublox_NavSvinfo_req+0x94>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6013      	str	r3, [r2, #0]
		return;
	}

#if defined(LOGGING)
	{
		uint8_t msg[] = "<== ublox: TX <-- NAV-SVINFO\r\n";
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <ublox_NavSvinfo_req+0x98>)
 8006cce:	f107 0408 	add.w	r4, r7, #8
 8006cd2:	461d      	mov	r5, r3
 8006cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006cdc:	c407      	stmia	r4!, {r0, r1, r2}
 8006cde:	8023      	strh	r3, [r4, #0]
 8006ce0:	3402      	adds	r4, #2
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8006ce6:	f107 0108 	add.w	r1, r7, #8
 8006cea:	2319      	movs	r3, #25
 8006cec:	221e      	movs	r2, #30
 8006cee:	4811      	ldr	r0, [pc, #68]	; (8006d34 <ublox_NavSvinfo_req+0x9c>)
 8006cf0:	f007 fa8b 	bl	800e20a <HAL_UART_Transmit>
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006cf4:	4810      	ldr	r0, [pc, #64]	; (8006d38 <ublox_NavSvinfo_req+0xa0>)
 8006cf6:	f007 fa4f 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006cfa:	f7ff faef 	bl	80062dc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <ublox_NavSvinfo_req+0xa4>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d08:	2208      	movs	r2, #8
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	480a      	ldr	r0, [pc, #40]	; (8006d38 <ublox_NavSvinfo_req+0xa0>)
 8006d0e:	f007 fb11 	bl	800e334 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006d12:	bf00      	nop
 8006d14:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <ublox_NavSvinfo_req+0xa4>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d1fa      	bne.n	8006d14 <ublox_NavSvinfo_req+0x7c>
 8006d1e:	e000      	b.n	8006d22 <ublox_NavSvinfo_req+0x8a>
		return;
 8006d20:	bf00      	nop
	}
}
 8006d22:	3730      	adds	r7, #48	; 0x30
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bdb0      	pop	{r4, r5, r7, pc}
 8006d28:	08013f7c 	.word	0x08013f7c
 8006d2c:	20000510 	.word	0x20000510
 8006d30:	08013f84 	.word	0x08013f84
 8006d34:	20002810 	.word	0x20002810
 8006d38:	2000278c 	.word	0x2000278c
 8006d3c:	20000390 	.word	0x20000390

08006d40 <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8006d40:	b5b0      	push	{r4, r5, r7, lr}
 8006d42:	b0b6      	sub	sp, #216	; 0xd8
 8006d44:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006d4c:	486f      	ldr	r0, [pc, #444]	; (8006f0c <ublox_All_resp+0x1cc>)
 8006d4e:	f007 fa23 	bl	800e198 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006d52:	f7ff fac3 	bl	80062dc <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8006d56:	486d      	ldr	r0, [pc, #436]	; (8006f0c <ublox_All_resp+0x1cc>)
 8006d58:	f007 fe86 	bl	800ea68 <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8006d5c:	4b6c      	ldr	r3, [pc, #432]	; (8006f10 <ublox_All_resp+0x1d0>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d66:	496b      	ldr	r1, [pc, #428]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006d68:	4868      	ldr	r0, [pc, #416]	; (8006f0c <ublox_All_resp+0x1cc>)
 8006d6a:	f007 fb3f 	bl	800e3ec <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8006d6e:	2364      	movs	r3, #100	; 0x64
 8006d70:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		while (cnt && (gUart1RxReady != SET)) {
 8006d74:	e007      	b.n	8006d86 <ublox_All_resp+0x46>
			HAL_Delay(10);
 8006d76:	200a      	movs	r0, #10
 8006d78:	f000 ff24 	bl	8007bc4 <HAL_Delay>
			--cnt;
 8006d7c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		while (cnt && (gUart1RxReady != SET)) {
 8006d86:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <ublox_All_resp+0x58>
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <ublox_All_resp+0x1d0>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d1ee      	bne.n	8006d76 <ublox_All_resp+0x36>
		}

		if (gUart1RxCnt) {
 8006d98:	4b5f      	ldr	r3, [pc, #380]	; (8006f18 <ublox_All_resp+0x1d8>)
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0dc      	beq.n	8006d5c <ublox_All_resp+0x1c>
			dataIdx		= 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			dataCnt 	= gUart1RxCnt;
 8006da8:	4b5b      	ldr	r3, [pc, #364]	; (8006f18 <ublox_All_resp+0x1d8>)
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
			break;
 8006db0:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8006db2:	f000 bccb 	b.w	800774c <ublox_All_resp+0xa0c>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006db6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dba:	4a56      	ldr	r2, [pc, #344]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006dbc:	5cd3      	ldrb	r3, [r2, r3]
 8006dbe:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8006dc2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a52      	ldr	r2, [pc, #328]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8006dd0:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8006dd4:	2bb5      	cmp	r3, #181	; 0xb5
 8006dd6:	d103      	bne.n	8006de0 <ublox_All_resp+0xa0>
 8006dd8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006ddc:	2b62      	cmp	r3, #98	; 0x62
 8006dde:	d006      	beq.n	8006dee <ublox_All_resp+0xae>
			dataIdx++;
 8006de0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			continue;
 8006dea:	f000 bcaf 	b.w	800774c <ublox_All_resp+0xa0c>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8006dee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006df2:	3302      	adds	r3, #2
 8006df4:	4a47      	ldr	r2, [pc, #284]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006df6:	5cd3      	ldrb	r3, [r2, r3]
 8006df8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8006dfc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e00:	3303      	adds	r3, #3
 8006e02:	4a44      	ldr	r2, [pc, #272]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e04:	5cd3      	ldrb	r3, [r2, r3]
 8006e06:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8006e0a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4a40      	ldr	r2, [pc, #256]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e12:	5cd3      	ldrb	r3, [r2, r3]
 8006e14:	b21a      	sxth	r2, r3
 8006e16:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e1a:	3305      	adds	r3, #5
 8006e1c:	493d      	ldr	r1, [pc, #244]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	b21b      	sxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8006e2c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e30:	1d9a      	adds	r2, r3, #6
 8006e32:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e36:	4413      	add	r3, r2
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	f280 848d 	bge.w	800775e <ublox_All_resp+0xa1e>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 8006e44:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006e48:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3306      	adds	r3, #6
 8006e50:	4a30      	ldr	r2, [pc, #192]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e52:	5cd3      	ldrb	r3, [r2, r3]
 8006e54:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 8006e58:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006e5c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e60:	4413      	add	r3, r2
 8006e62:	3307      	adds	r3, #7
 8006e64:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006e72:	2300      	movs	r3, #0
 8006e74:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8006e78:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006e7c:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <ublox_All_resp+0x1d4>)
 8006e7e:	1898      	adds	r0, r3, r2
 8006e80:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e84:	3308      	adds	r3, #8
 8006e86:	b299      	uxth	r1, r3
 8006e88:	f107 02af 	add.w	r2, r7, #175	; 0xaf
 8006e8c:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	f7ff fa51 	bl	800633c <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 8006e9a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e9e:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d105      	bne.n	8006eb2 <ublox_All_resp+0x172>
 8006ea6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006eaa:	f897 20b2 	ldrb.w	r2, [r7, #178]	; 0xb2
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d006      	beq.n	8006ec0 <ublox_All_resp+0x180>
			dataIdx++;
 8006eb2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			continue;
 8006ebc:	f000 bc46 	b.w	800774c <ublox_All_resp+0xa0c>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006ec0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	b21a      	sxth	r2, r3
 8006ec8:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	b21b      	sxth	r3, r3
 8006ed2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		switch (clsID)
 8006ed6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006eda:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006ede:	f000 82a7 	beq.w	8007430 <ublox_All_resp+0x6f0>
 8006ee2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006ee6:	f300 8411 	bgt.w	800770c <ublox_All_resp+0x9cc>
 8006eea:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006eee:	f000 81e5 	beq.w	80072bc <ublox_All_resp+0x57c>
 8006ef2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006ef6:	f300 8409 	bgt.w	800770c <ublox_All_resp+0x9cc>
 8006efa:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006efe:	d00d      	beq.n	8006f1c <ublox_All_resp+0x1dc>
 8006f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f04:	f000 8110 	beq.w	8007128 <ublox_All_resp+0x3e8>
 8006f08:	f000 bc00 	b.w	800770c <ublox_All_resp+0x9cc>
 8006f0c:	2000278c 	.word	0x2000278c
 8006f10:	20000391 	.word	0x20000391
 8006f14:	20000514 	.word	0x20000514
 8006f18:	20000392 	.word	0x20000392
		{
		case 0x0102:
		{
			/* NavPosllh */
			if (len == 0x001c) {
 8006f1c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006f20:	2b1c      	cmp	r3, #28
 8006f22:	f040 8405 	bne.w	8007730 <ublox_All_resp+0x9f0>
				gUbloxNavPosllh_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006f26:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f2a:	3306      	adds	r3, #6
 8006f2c:	4a7a      	ldr	r2, [pc, #488]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f36:	3307      	adds	r3, #7
 8006f38:	4a77      	ldr	r2, [pc, #476]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f3a:	5cd3      	ldrb	r3, [r2, r3]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	ea41 0203 	orr.w	r2, r1, r3
 8006f42:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f46:	3308      	adds	r3, #8
 8006f48:	4973      	ldr	r1, [pc, #460]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f54:	3309      	adds	r3, #9
 8006f56:	4970      	ldr	r1, [pc, #448]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f58:	5ccb      	ldrb	r3, [r1, r3]
 8006f5a:	061b      	lsls	r3, r3, #24
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	4b6f      	ldr	r3, [pc, #444]	; (800711c <ublox_All_resp+0x3dc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	601a      	str	r2, [r3, #0]
				gUbloxNavPosllh_resp->lon		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24);
 8006f64:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f68:	330a      	adds	r3, #10
 8006f6a:	4a6b      	ldr	r2, [pc, #428]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f6c:	5cd3      	ldrb	r3, [r2, r3]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f74:	330b      	adds	r3, #11
 8006f76:	4a68      	ldr	r2, [pc, #416]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
 8006f7a:	021b      	lsls	r3, r3, #8
 8006f7c:	ea41 0203 	orr.w	r2, r1, r3
 8006f80:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f84:	330c      	adds	r3, #12
 8006f86:	4964      	ldr	r1, [pc, #400]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f88:	5ccb      	ldrb	r3, [r1, r3]
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	ea42 0103 	orr.w	r1, r2, r3
 8006f90:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006f94:	330d      	adds	r3, #13
 8006f96:	4a60      	ldr	r2, [pc, #384]	; (8007118 <ublox_All_resp+0x3d8>)
 8006f98:	5cd3      	ldrb	r3, [r2, r3]
 8006f9a:	061a      	lsls	r2, r3, #24
 8006f9c:	4b5f      	ldr	r3, [pc, #380]	; (800711c <ublox_All_resp+0x3dc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
				gUbloxNavPosllh_resp->lat		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24);
 8006fa4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006fa8:	330e      	adds	r3, #14
 8006faa:	4a5b      	ldr	r2, [pc, #364]	; (8007118 <ublox_All_resp+0x3d8>)
 8006fac:	5cd3      	ldrb	r3, [r2, r3]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006fb4:	330f      	adds	r3, #15
 8006fb6:	4a58      	ldr	r2, [pc, #352]	; (8007118 <ublox_All_resp+0x3d8>)
 8006fb8:	5cd3      	ldrb	r3, [r2, r3]
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	ea41 0203 	orr.w	r2, r1, r3
 8006fc0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	4954      	ldr	r1, [pc, #336]	; (8007118 <ublox_All_resp+0x3d8>)
 8006fc8:	5ccb      	ldrb	r3, [r1, r3]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	ea42 0103 	orr.w	r1, r2, r3
 8006fd0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006fd4:	3311      	adds	r3, #17
 8006fd6:	4a50      	ldr	r2, [pc, #320]	; (8007118 <ublox_All_resp+0x3d8>)
 8006fd8:	5cd3      	ldrb	r3, [r2, r3]
 8006fda:	061a      	lsls	r2, r3, #24
 8006fdc:	4b4f      	ldr	r3, [pc, #316]	; (800711c <ublox_All_resp+0x3dc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
				gUbloxNavPosllh_resp->height	= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8006fe4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006fe8:	3312      	adds	r3, #18
 8006fea:	4a4b      	ldr	r2, [pc, #300]	; (8007118 <ublox_All_resp+0x3d8>)
 8006fec:	5cd3      	ldrb	r3, [r2, r3]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006ff4:	3313      	adds	r3, #19
 8006ff6:	4a48      	ldr	r2, [pc, #288]	; (8007118 <ublox_All_resp+0x3d8>)
 8006ff8:	5cd3      	ldrb	r3, [r2, r3]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	ea41 0203 	orr.w	r2, r1, r3
 8007000:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007004:	3314      	adds	r3, #20
 8007006:	4944      	ldr	r1, [pc, #272]	; (8007118 <ublox_All_resp+0x3d8>)
 8007008:	5ccb      	ldrb	r3, [r1, r3]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	ea42 0103 	orr.w	r1, r2, r3
 8007010:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007014:	3315      	adds	r3, #21
 8007016:	4a40      	ldr	r2, [pc, #256]	; (8007118 <ublox_All_resp+0x3d8>)
 8007018:	5cd3      	ldrb	r3, [r2, r3]
 800701a:	061a      	lsls	r2, r3, #24
 800701c:	4b3f      	ldr	r3, [pc, #252]	; (800711c <ublox_All_resp+0x3dc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	60da      	str	r2, [r3, #12]
				gUbloxNavPosllh_resp->hMSL		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 8007024:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007028:	3316      	adds	r3, #22
 800702a:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <ublox_All_resp+0x3d8>)
 800702c:	5cd3      	ldrb	r3, [r2, r3]
 800702e:	4619      	mov	r1, r3
 8007030:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007034:	3317      	adds	r3, #23
 8007036:	4a38      	ldr	r2, [pc, #224]	; (8007118 <ublox_All_resp+0x3d8>)
 8007038:	5cd3      	ldrb	r3, [r2, r3]
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	ea41 0203 	orr.w	r2, r1, r3
 8007040:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007044:	3318      	adds	r3, #24
 8007046:	4934      	ldr	r1, [pc, #208]	; (8007118 <ublox_All_resp+0x3d8>)
 8007048:	5ccb      	ldrb	r3, [r1, r3]
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	ea42 0103 	orr.w	r1, r2, r3
 8007050:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007054:	3319      	adds	r3, #25
 8007056:	4a30      	ldr	r2, [pc, #192]	; (8007118 <ublox_All_resp+0x3d8>)
 8007058:	5cd3      	ldrb	r3, [r2, r3]
 800705a:	061a      	lsls	r2, r3, #24
 800705c:	4b2f      	ldr	r3, [pc, #188]	; (800711c <ublox_All_resp+0x3dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	611a      	str	r2, [r3, #16]
				gUbloxNavPosllh_resp->hAcc		= ublox_Response[dataIdx + 6 + 20] | (ublox_Response[dataIdx + 6 + 21] << 8) | (ublox_Response[dataIdx + 6 + 22] << 16) | (ublox_Response[dataIdx + 6 + 23] << 24);
 8007064:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007068:	331a      	adds	r3, #26
 800706a:	4a2b      	ldr	r2, [pc, #172]	; (8007118 <ublox_All_resp+0x3d8>)
 800706c:	5cd3      	ldrb	r3, [r2, r3]
 800706e:	4619      	mov	r1, r3
 8007070:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007074:	331b      	adds	r3, #27
 8007076:	4a28      	ldr	r2, [pc, #160]	; (8007118 <ublox_All_resp+0x3d8>)
 8007078:	5cd3      	ldrb	r3, [r2, r3]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	ea41 0203 	orr.w	r2, r1, r3
 8007080:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007084:	331c      	adds	r3, #28
 8007086:	4924      	ldr	r1, [pc, #144]	; (8007118 <ublox_All_resp+0x3d8>)
 8007088:	5ccb      	ldrb	r3, [r1, r3]
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	431a      	orrs	r2, r3
 800708e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007092:	331d      	adds	r3, #29
 8007094:	4920      	ldr	r1, [pc, #128]	; (8007118 <ublox_All_resp+0x3d8>)
 8007096:	5ccb      	ldrb	r3, [r1, r3]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	431a      	orrs	r2, r3
 800709c:	4b1f      	ldr	r3, [pc, #124]	; (800711c <ublox_All_resp+0x3dc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	615a      	str	r2, [r3, #20]
				gUbloxNavPosllh_resp->vAcc		= ublox_Response[dataIdx + 6 + 24] | (ublox_Response[dataIdx + 6 + 25] << 8) | (ublox_Response[dataIdx + 6 + 26] << 16) | (ublox_Response[dataIdx + 6 + 27] << 24);
 80070a2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070a6:	331e      	adds	r3, #30
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <ublox_All_resp+0x3d8>)
 80070aa:	5cd3      	ldrb	r3, [r2, r3]
 80070ac:	4619      	mov	r1, r3
 80070ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070b2:	331f      	adds	r3, #31
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <ublox_All_resp+0x3d8>)
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	ea41 0203 	orr.w	r2, r1, r3
 80070be:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070c2:	3320      	adds	r3, #32
 80070c4:	4914      	ldr	r1, [pc, #80]	; (8007118 <ublox_All_resp+0x3d8>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80070d0:	3321      	adds	r3, #33	; 0x21
 80070d2:	4911      	ldr	r1, [pc, #68]	; (8007118 <ublox_All_resp+0x3d8>)
 80070d4:	5ccb      	ldrb	r3, [r1, r3]
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	431a      	orrs	r2, r3
 80070da:	4b10      	ldr	r3, [pc, #64]	; (800711c <ublox_All_resp+0x3dc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	619a      	str	r2, [r3, #24]

				bf |= USART_UBLOX_RESP_BF_NAV_POSLLH;
 80070e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-POSLLH\r\n";
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <ublox_All_resp+0x3e0>)
 80070ee:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80070f2:	461d      	mov	r5, r3
 80070f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80070fc:	c407      	stmia	r4!, {r0, r1, r2}
 80070fe:	8023      	strh	r3, [r4, #0]
 8007100:	3402      	adds	r4, #2
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8007106:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800710a:	2319      	movs	r3, #25
 800710c:	221e      	movs	r2, #30
 800710e:	4805      	ldr	r0, [pc, #20]	; (8007124 <ublox_All_resp+0x3e4>)
 8007110:	f007 f87b 	bl	800e20a <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 8007114:	e30c      	b.n	8007730 <ublox_All_resp+0x9f0>
 8007116:	bf00      	nop
 8007118:	20000514 	.word	0x20000514
 800711c:	20000504 	.word	0x20000504
 8007120:	08013fa4 	.word	0x08013fa4
 8007124:	20002810 	.word	0x20002810

		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 8007128:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800712c:	2b12      	cmp	r3, #18
 800712e:	f040 8301 	bne.w	8007734 <ublox_All_resp+0x9f4>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007132:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007136:	3306      	adds	r3, #6
 8007138:	4a5c      	ldr	r2, [pc, #368]	; (80072ac <ublox_All_resp+0x56c>)
 800713a:	5cd3      	ldrb	r3, [r2, r3]
 800713c:	4619      	mov	r1, r3
 800713e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007142:	3307      	adds	r3, #7
 8007144:	4a59      	ldr	r2, [pc, #356]	; (80072ac <ublox_All_resp+0x56c>)
 8007146:	5cd3      	ldrb	r3, [r2, r3]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	ea41 0203 	orr.w	r2, r1, r3
 800714e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007152:	3308      	adds	r3, #8
 8007154:	4955      	ldr	r1, [pc, #340]	; (80072ac <ublox_All_resp+0x56c>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	041b      	lsls	r3, r3, #16
 800715a:	431a      	orrs	r2, r3
 800715c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007160:	3309      	adds	r3, #9
 8007162:	4952      	ldr	r1, [pc, #328]	; (80072ac <ublox_All_resp+0x56c>)
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	061b      	lsls	r3, r3, #24
 8007168:	431a      	orrs	r2, r3
 800716a:	4b51      	ldr	r3, [pc, #324]	; (80072b0 <ublox_All_resp+0x570>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 8007170:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007174:	330a      	adds	r3, #10
 8007176:	4a4d      	ldr	r2, [pc, #308]	; (80072ac <ublox_All_resp+0x56c>)
 8007178:	5cd3      	ldrb	r3, [r2, r3]
 800717a:	b21a      	sxth	r2, r3
 800717c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007180:	330b      	adds	r3, #11
 8007182:	494a      	ldr	r1, [pc, #296]	; (80072ac <ublox_All_resp+0x56c>)
 8007184:	5ccb      	ldrb	r3, [r1, r3]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	b21b      	sxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b21a      	sxth	r2, r3
 800718e:	4b48      	ldr	r3, [pc, #288]	; (80072b0 <ublox_All_resp+0x570>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b292      	uxth	r2, r2
 8007194:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8007196:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800719a:	330c      	adds	r3, #12
 800719c:	4a43      	ldr	r2, [pc, #268]	; (80072ac <ublox_All_resp+0x56c>)
 800719e:	5cd3      	ldrb	r3, [r2, r3]
 80071a0:	b21a      	sxth	r2, r3
 80071a2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071a6:	330d      	adds	r3, #13
 80071a8:	4940      	ldr	r1, [pc, #256]	; (80072ac <ublox_All_resp+0x56c>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b21a      	sxth	r2, r3
 80071b4:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <ublox_All_resp+0x570>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	b292      	uxth	r2, r2
 80071ba:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 80071bc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071c0:	330e      	adds	r3, #14
 80071c2:	4a3a      	ldr	r2, [pc, #232]	; (80072ac <ublox_All_resp+0x56c>)
 80071c4:	5cd3      	ldrb	r3, [r2, r3]
 80071c6:	b21a      	sxth	r2, r3
 80071c8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071cc:	330f      	adds	r3, #15
 80071ce:	4937      	ldr	r1, [pc, #220]	; (80072ac <ublox_All_resp+0x56c>)
 80071d0:	5ccb      	ldrb	r3, [r1, r3]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	4313      	orrs	r3, r2
 80071d8:	b21a      	sxth	r2, r3
 80071da:	4b35      	ldr	r3, [pc, #212]	; (80072b0 <ublox_All_resp+0x570>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	b292      	uxth	r2, r2
 80071e0:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 80071e2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071e6:	3310      	adds	r3, #16
 80071e8:	4a30      	ldr	r2, [pc, #192]	; (80072ac <ublox_All_resp+0x56c>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	b21a      	sxth	r2, r3
 80071ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071f2:	3311      	adds	r3, #17
 80071f4:	492d      	ldr	r1, [pc, #180]	; (80072ac <ublox_All_resp+0x56c>)
 80071f6:	5ccb      	ldrb	r3, [r1, r3]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b21a      	sxth	r2, r3
 8007200:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <ublox_All_resp+0x570>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	b292      	uxth	r2, r2
 8007206:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 8007208:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800720c:	3312      	adds	r3, #18
 800720e:	4a27      	ldr	r2, [pc, #156]	; (80072ac <ublox_All_resp+0x56c>)
 8007210:	5cd3      	ldrb	r3, [r2, r3]
 8007212:	b21a      	sxth	r2, r3
 8007214:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007218:	3313      	adds	r3, #19
 800721a:	4924      	ldr	r1, [pc, #144]	; (80072ac <ublox_All_resp+0x56c>)
 800721c:	5ccb      	ldrb	r3, [r1, r3]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	b21b      	sxth	r3, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	b21a      	sxth	r2, r3
 8007226:	4b22      	ldr	r3, [pc, #136]	; (80072b0 <ublox_All_resp+0x570>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b292      	uxth	r2, r2
 800722c:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 800722e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007232:	3314      	adds	r3, #20
 8007234:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <ublox_All_resp+0x56c>)
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	b21a      	sxth	r2, r3
 800723a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800723e:	3315      	adds	r3, #21
 8007240:	491a      	ldr	r1, [pc, #104]	; (80072ac <ublox_All_resp+0x56c>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	b21b      	sxth	r3, r3
 8007248:	4313      	orrs	r3, r2
 800724a:	b21a      	sxth	r2, r3
 800724c:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <ublox_All_resp+0x570>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	b292      	uxth	r2, r2
 8007252:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 8007254:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007258:	3316      	adds	r3, #22
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <ublox_All_resp+0x56c>)
 800725c:	5cd3      	ldrb	r3, [r2, r3]
 800725e:	b21a      	sxth	r2, r3
 8007260:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007264:	3317      	adds	r3, #23
 8007266:	4911      	ldr	r1, [pc, #68]	; (80072ac <ublox_All_resp+0x56c>)
 8007268:	5ccb      	ldrb	r3, [r1, r3]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	b21b      	sxth	r3, r3
 800726e:	4313      	orrs	r3, r2
 8007270:	b21a      	sxth	r2, r3
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <ublox_All_resp+0x570>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b292      	uxth	r2, r2
 8007278:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 800727a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-DOP\r\n";
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <ublox_All_resp+0x574>)
 8007288:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800728c:	461d      	mov	r5, r3
 800728e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800729a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800729e:	2319      	movs	r3, #25
 80072a0:	221b      	movs	r2, #27
 80072a2:	4805      	ldr	r0, [pc, #20]	; (80072b8 <ublox_All_resp+0x578>)
 80072a4:	f006 ffb1 	bl	800e20a <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 80072a8:	e244      	b.n	8007734 <ublox_All_resp+0x9f4>
 80072aa:	bf00      	nop
 80072ac:	20000514 	.word	0x20000514
 80072b0:	2000050c 	.word	0x2000050c
 80072b4:	08013fc4 	.word	0x08013fc4
 80072b8:	20002810 	.word	0x20002810

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 80072bc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80072c0:	2b14      	cmp	r3, #20
 80072c2:	f040 8239 	bne.w	8007738 <ublox_All_resp+0x9f8>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80072c6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072ca:	3306      	adds	r3, #6
 80072cc:	4a8e      	ldr	r2, [pc, #568]	; (8007508 <ublox_All_resp+0x7c8>)
 80072ce:	5cd3      	ldrb	r3, [r2, r3]
 80072d0:	4619      	mov	r1, r3
 80072d2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072d6:	3307      	adds	r3, #7
 80072d8:	4a8b      	ldr	r2, [pc, #556]	; (8007508 <ublox_All_resp+0x7c8>)
 80072da:	5cd3      	ldrb	r3, [r2, r3]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	ea41 0203 	orr.w	r2, r1, r3
 80072e2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072e6:	3308      	adds	r3, #8
 80072e8:	4987      	ldr	r1, [pc, #540]	; (8007508 <ublox_All_resp+0x7c8>)
 80072ea:	5ccb      	ldrb	r3, [r1, r3]
 80072ec:	041b      	lsls	r3, r3, #16
 80072ee:	431a      	orrs	r2, r3
 80072f0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80072f4:	3309      	adds	r3, #9
 80072f6:	4984      	ldr	r1, [pc, #528]	; (8007508 <ublox_All_resp+0x7c8>)
 80072f8:	5ccb      	ldrb	r3, [r1, r3]
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	431a      	orrs	r2, r3
 80072fe:	4b83      	ldr	r3, [pc, #524]	; (800750c <ublox_All_resp+0x7cc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 8007304:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007308:	330a      	adds	r3, #10
 800730a:	4a7f      	ldr	r2, [pc, #508]	; (8007508 <ublox_All_resp+0x7c8>)
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	4619      	mov	r1, r3
 8007310:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007314:	330b      	adds	r3, #11
 8007316:	4a7c      	ldr	r2, [pc, #496]	; (8007508 <ublox_All_resp+0x7c8>)
 8007318:	5cd3      	ldrb	r3, [r2, r3]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	ea41 0203 	orr.w	r2, r1, r3
 8007320:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007324:	330c      	adds	r3, #12
 8007326:	4978      	ldr	r1, [pc, #480]	; (8007508 <ublox_All_resp+0x7c8>)
 8007328:	5ccb      	ldrb	r3, [r1, r3]
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	ea42 0103 	orr.w	r1, r2, r3
 8007330:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007334:	330d      	adds	r3, #13
 8007336:	4a74      	ldr	r2, [pc, #464]	; (8007508 <ublox_All_resp+0x7c8>)
 8007338:	5cd3      	ldrb	r3, [r2, r3]
 800733a:	061a      	lsls	r2, r3, #24
 800733c:	4b73      	ldr	r3, [pc, #460]	; (800750c <ublox_All_resp+0x7cc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 8007344:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007348:	330e      	adds	r3, #14
 800734a:	4a6f      	ldr	r2, [pc, #444]	; (8007508 <ublox_All_resp+0x7c8>)
 800734c:	5cd3      	ldrb	r3, [r2, r3]
 800734e:	4619      	mov	r1, r3
 8007350:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007354:	330f      	adds	r3, #15
 8007356:	4a6c      	ldr	r2, [pc, #432]	; (8007508 <ublox_All_resp+0x7c8>)
 8007358:	5cd3      	ldrb	r3, [r2, r3]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	ea41 0203 	orr.w	r2, r1, r3
 8007360:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007364:	3310      	adds	r3, #16
 8007366:	4968      	ldr	r1, [pc, #416]	; (8007508 <ublox_All_resp+0x7c8>)
 8007368:	5ccb      	ldrb	r3, [r1, r3]
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	ea42 0103 	orr.w	r1, r2, r3
 8007370:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007374:	3311      	adds	r3, #17
 8007376:	4a64      	ldr	r2, [pc, #400]	; (8007508 <ublox_All_resp+0x7c8>)
 8007378:	5cd3      	ldrb	r3, [r2, r3]
 800737a:	061a      	lsls	r2, r3, #24
 800737c:	4b63      	ldr	r3, [pc, #396]	; (800750c <ublox_All_resp+0x7cc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8007384:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007388:	3312      	adds	r3, #18
 800738a:	4a5f      	ldr	r2, [pc, #380]	; (8007508 <ublox_All_resp+0x7c8>)
 800738c:	5cd3      	ldrb	r3, [r2, r3]
 800738e:	4619      	mov	r1, r3
 8007390:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007394:	3313      	adds	r3, #19
 8007396:	4a5c      	ldr	r2, [pc, #368]	; (8007508 <ublox_All_resp+0x7c8>)
 8007398:	5cd3      	ldrb	r3, [r2, r3]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	ea41 0203 	orr.w	r2, r1, r3
 80073a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073a4:	3314      	adds	r3, #20
 80073a6:	4958      	ldr	r1, [pc, #352]	; (8007508 <ublox_All_resp+0x7c8>)
 80073a8:	5ccb      	ldrb	r3, [r1, r3]
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	431a      	orrs	r2, r3
 80073ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073b2:	3315      	adds	r3, #21
 80073b4:	4954      	ldr	r1, [pc, #336]	; (8007508 <ublox_All_resp+0x7c8>)
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	431a      	orrs	r2, r3
 80073bc:	4b53      	ldr	r3, [pc, #332]	; (800750c <ublox_All_resp+0x7cc>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80073c2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073c6:	3316      	adds	r3, #22
 80073c8:	4a4f      	ldr	r2, [pc, #316]	; (8007508 <ublox_All_resp+0x7c8>)
 80073ca:	5cd3      	ldrb	r3, [r2, r3]
 80073cc:	4619      	mov	r1, r3
 80073ce:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073d2:	3317      	adds	r3, #23
 80073d4:	4a4c      	ldr	r2, [pc, #304]	; (8007508 <ublox_All_resp+0x7c8>)
 80073d6:	5cd3      	ldrb	r3, [r2, r3]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	ea41 0203 	orr.w	r2, r1, r3
 80073de:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073e2:	3318      	adds	r3, #24
 80073e4:	4948      	ldr	r1, [pc, #288]	; (8007508 <ublox_All_resp+0x7c8>)
 80073e6:	5ccb      	ldrb	r3, [r1, r3]
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	431a      	orrs	r2, r3
 80073ec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80073f0:	3319      	adds	r3, #25
 80073f2:	4945      	ldr	r1, [pc, #276]	; (8007508 <ublox_All_resp+0x7c8>)
 80073f4:	5ccb      	ldrb	r3, [r1, r3]
 80073f6:	061b      	lsls	r3, r3, #24
 80073f8:	431a      	orrs	r2, r3
 80073fa:	4b44      	ldr	r3, [pc, #272]	; (800750c <ublox_All_resp+0x7cc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 8007400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007404:	f043 0302 	orr.w	r3, r3, #2
 8007408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-CLOCK\r\n";
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <ublox_All_resp+0x7d0>)
 800740e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007412:	461d      	mov	r5, r3
 8007414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800741c:	c407      	stmia	r4!, {r0, r1, r2}
 800741e:	8023      	strh	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8007420:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007424:	2319      	movs	r3, #25
 8007426:	221d      	movs	r2, #29
 8007428:	483a      	ldr	r0, [pc, #232]	; (8007514 <ublox_All_resp+0x7d4>)
 800742a:	f006 feee 	bl	800e20a <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 800742e:	e183      	b.n	8007738 <ublox_All_resp+0x9f8>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 8007430:	4b39      	ldr	r3, [pc, #228]	; (8007518 <ublox_All_resp+0x7d8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007438:	f44f 7394 	mov.w	r3, #296	; 0x128
 800743c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007440:	e00b      	b.n	800745a <ublox_All_resp+0x71a>
						*(ptr++) = 0U;
 8007442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007454:	3b01      	subs	r3, #1
 8007456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800745a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1ef      	bne.n	8007442 <ublox_All_resp+0x702>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007462:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007466:	3306      	adds	r3, #6
 8007468:	4a27      	ldr	r2, [pc, #156]	; (8007508 <ublox_All_resp+0x7c8>)
 800746a:	5cd3      	ldrb	r3, [r2, r3]
 800746c:	4619      	mov	r1, r3
 800746e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007472:	3307      	adds	r3, #7
 8007474:	4a24      	ldr	r2, [pc, #144]	; (8007508 <ublox_All_resp+0x7c8>)
 8007476:	5cd3      	ldrb	r3, [r2, r3]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	ea41 0203 	orr.w	r2, r1, r3
 800747e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007482:	3308      	adds	r3, #8
 8007484:	4920      	ldr	r1, [pc, #128]	; (8007508 <ublox_All_resp+0x7c8>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	431a      	orrs	r2, r3
 800748c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007490:	3309      	adds	r3, #9
 8007492:	491d      	ldr	r1, [pc, #116]	; (8007508 <ublox_All_resp+0x7c8>)
 8007494:	5ccb      	ldrb	r3, [r1, r3]
 8007496:	061b      	lsls	r3, r3, #24
 8007498:	431a      	orrs	r2, r3
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <ublox_All_resp+0x7d8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 80074a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80074a4:	f103 020a 	add.w	r2, r3, #10
 80074a8:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <ublox_All_resp+0x7d8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4916      	ldr	r1, [pc, #88]	; (8007508 <ublox_All_resp+0x7c8>)
 80074ae:	5c8a      	ldrb	r2, [r1, r2]
 80074b0:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 80074b2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80074b6:	f103 020b 	add.w	r2, r3, #11
 80074ba:	4b17      	ldr	r3, [pc, #92]	; (8007518 <ublox_All_resp+0x7d8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4912      	ldr	r1, [pc, #72]	; (8007508 <ublox_All_resp+0x7c8>)
 80074c0:	5c8a      	ldrb	r2, [r1, r2]
 80074c2:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80074c4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80074c8:	330c      	adds	r3, #12
 80074ca:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <ublox_All_resp+0x7c8>)
 80074cc:	5cd3      	ldrb	r3, [r2, r3]
 80074ce:	b21a      	sxth	r2, r3
 80074d0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80074d4:	330d      	adds	r3, #13
 80074d6:	490c      	ldr	r1, [pc, #48]	; (8007508 <ublox_All_resp+0x7c8>)
 80074d8:	5ccb      	ldrb	r3, [r1, r3]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <ublox_All_resp+0x7d8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	b292      	uxth	r2, r2
 80074e8:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <ublox_All_resp+0x7d8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b18      	cmp	r3, #24
 80074f4:	d903      	bls.n	80074fe <ublox_All_resp+0x7be>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 80074f6:	4b08      	ldr	r3, [pc, #32]	; (8007518 <ublox_All_resp+0x7d8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2218      	movs	r2, #24
 80074fc:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007504:	e0dd      	b.n	80076c2 <ublox_All_resp+0x982>
 8007506:	bf00      	nop
 8007508:	20000514 	.word	0x20000514
 800750c:	20000508 	.word	0x20000508
 8007510:	08013fe0 	.word	0x08013fe0
 8007514:	20002810 	.word	0x20002810
 8007518:	20000510 	.word	0x20000510
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 800751c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007520:	f103 010e 	add.w	r1, r3, #14
 8007524:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	4a8e      	ldr	r2, [pc, #568]	; (800776c <ublox_All_resp+0xa2c>)
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	498e      	ldr	r1, [pc, #568]	; (8007770 <ublox_All_resp+0xa30>)
 8007538:	5cc9      	ldrb	r1, [r1, r3]
 800753a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800753e:	4413      	add	r3, r2
 8007540:	3308      	adds	r3, #8
 8007542:	460a      	mov	r2, r1
 8007544:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 8007546:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800754a:	f103 010f 	add.w	r1, r3, #15
 800754e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007552:	4613      	mov	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	4a83      	ldr	r2, [pc, #524]	; (800776c <ublox_All_resp+0xa2c>)
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	4983      	ldr	r1, [pc, #524]	; (8007770 <ublox_All_resp+0xa30>)
 8007562:	5cc9      	ldrb	r1, [r1, r3]
 8007564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007568:	4413      	add	r3, r2
 800756a:	3320      	adds	r3, #32
 800756c:	460a      	mov	r2, r1
 800756e:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 8007570:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007574:	f103 0110 	add.w	r1, r3, #16
 8007578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800757c:	4613      	mov	r3, r2
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	4a79      	ldr	r2, [pc, #484]	; (800776c <ublox_All_resp+0xa2c>)
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	4979      	ldr	r1, [pc, #484]	; (8007770 <ublox_All_resp+0xa30>)
 800758c:	5cc9      	ldrb	r1, [r1, r3]
 800758e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007592:	4413      	add	r3, r2
 8007594:	3338      	adds	r3, #56	; 0x38
 8007596:	460a      	mov	r2, r1
 8007598:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 800759a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800759e:	f103 0111 	add.w	r1, r3, #17
 80075a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	4a6e      	ldr	r2, [pc, #440]	; (800776c <ublox_All_resp+0xa2c>)
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	496e      	ldr	r1, [pc, #440]	; (8007770 <ublox_All_resp+0xa30>)
 80075b6:	5cc9      	ldrb	r1, [r1, r3]
 80075b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075bc:	4413      	add	r3, r2
 80075be:	3350      	adds	r3, #80	; 0x50
 80075c0:	460a      	mov	r2, r1
 80075c2:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 80075c4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80075c8:	f103 0112 	add.w	r1, r3, #18
 80075cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075d0:	4613      	mov	r3, r2
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	4a64      	ldr	r2, [pc, #400]	; (800776c <ublox_All_resp+0xa2c>)
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	4964      	ldr	r1, [pc, #400]	; (8007770 <ublox_All_resp+0xa30>)
 80075e0:	5cc9      	ldrb	r1, [r1, r3]
 80075e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075e6:	4413      	add	r3, r2
 80075e8:	3368      	adds	r3, #104	; 0x68
 80075ea:	460a      	mov	r2, r1
 80075ec:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 80075ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80075f2:	f103 0113 	add.w	r1, r3, #19
 80075f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	4a5a      	ldr	r2, [pc, #360]	; (8007770 <ublox_All_resp+0xa30>)
 8007606:	5cd1      	ldrb	r1, [r2, r3]
 8007608:	4b58      	ldr	r3, [pc, #352]	; (800776c <ublox_All_resp+0xa2c>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	b249      	sxtb	r1, r1
 800760e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007612:	4413      	add	r3, r2
 8007614:	3380      	adds	r3, #128	; 0x80
 8007616:	460a      	mov	r2, r1
 8007618:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 800761a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800761e:	f103 0114 	add.w	r1, r3, #20
 8007622:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	4a4f      	ldr	r2, [pc, #316]	; (8007770 <ublox_All_resp+0xa30>)
 8007632:	5cd3      	ldrb	r3, [r2, r3]
 8007634:	b219      	sxth	r1, r3
 8007636:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800763a:	f103 0015 	add.w	r0, r3, #21
 800763e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4403      	add	r3, r0
 800764c:	4a48      	ldr	r2, [pc, #288]	; (8007770 <ublox_All_resp+0xa30>)
 800764e:	5cd3      	ldrb	r3, [r2, r3]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	b21a      	sxth	r2, r3
 8007654:	4b45      	ldr	r3, [pc, #276]	; (800776c <ublox_All_resp+0xa2c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	b211      	sxth	r1, r2
 800765c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007660:	324c      	adds	r2, #76	; 0x4c
 8007662:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 8007666:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800766a:	f103 0116 	add.w	r1, r3, #22
 800766e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007672:	4613      	mov	r3, r2
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <ublox_All_resp+0xa30>)
 800767e:	5cd3      	ldrb	r3, [r2, r3]
 8007680:	b299      	uxth	r1, r3
 8007682:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007686:	f103 0017 	add.w	r0, r3, #23
 800768a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800768e:	4613      	mov	r3, r2
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4403      	add	r3, r0
 8007698:	4a35      	ldr	r2, [pc, #212]	; (8007770 <ublox_All_resp+0xa30>)
 800769a:	5cd3      	ldrb	r3, [r2, r3]
 800769c:	b29b      	uxth	r3, r3
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	430b      	orrs	r3, r1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	4b30      	ldr	r3, [pc, #192]	; (800776c <ublox_All_resp+0xa2c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4611      	mov	r1, r2
 80076ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80076b2:	3232      	adds	r2, #50	; 0x32
 80076b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80076b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076bc:	3301      	adds	r3, #1
 80076be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <ublox_All_resp+0xa2c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076d0:	4293      	cmp	r3, r2
 80076d2:	f6ff af23 	blt.w	800751c <ublox_All_resp+0x7dc>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 80076d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076da:	f043 0308 	orr.w	r3, r3, #8
 80076de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

#if defined(LOGGING)
				{
					uint8_t msg[] = "==> ublox: RX --> NAV-SVINFO\r\n";
 80076e2:	4b24      	ldr	r3, [pc, #144]	; (8007774 <ublox_All_resp+0xa34>)
 80076e4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80076e8:	461d      	mov	r5, r3
 80076ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80076f2:	c407      	stmia	r4!, {r0, r1, r2}
 80076f4:	8023      	strh	r3, [r4, #0]
 80076f6:	3402      	adds	r4, #2
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80076fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007700:	2319      	movs	r3, #25
 8007702:	221e      	movs	r2, #30
 8007704:	481c      	ldr	r0, [pc, #112]	; (8007778 <ublox_All_resp+0xa38>)
 8007706:	f006 fd80 	bl	800e20a <HAL_UART_Transmit>
				}
#endif
			}
		}
			break;
 800770a:	e016      	b.n	800773a <ublox_All_resp+0x9fa>

		default:
		{
#if defined(LOGGING)
			uint8_t msg[] = "==> ublox: RX --> unknown message received\r\n";
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <ublox_All_resp+0xa3c>)
 800770e:	463c      	mov	r4, r7
 8007710:	461d      	mov	r5, r3
 8007712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800771e:	c407      	stmia	r4!, {r0, r1, r2}
 8007720:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8007722:	4639      	mov	r1, r7
 8007724:	2319      	movs	r3, #25
 8007726:	222c      	movs	r2, #44	; 0x2c
 8007728:	4813      	ldr	r0, [pc, #76]	; (8007778 <ublox_All_resp+0xa38>)
 800772a:	f006 fd6e 	bl	800e20a <HAL_UART_Transmit>
 800772e:	e004      	b.n	800773a <ublox_All_resp+0x9fa>
			break;
 8007730:	bf00      	nop
 8007732:	e002      	b.n	800773a <ublox_All_resp+0x9fa>
			break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <ublox_All_resp+0x9fa>
			break;
 8007738:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 800773a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800773e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007742:	4413      	add	r3, r2
 8007744:	b29b      	uxth	r3, r3
 8007746:	3308      	adds	r3, #8
 8007748:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
	while (dataIdx < (dataCnt - 8)) {
 800774c:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8007750:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8007754:	3b08      	subs	r3, #8
 8007756:	429a      	cmp	r2, r3
 8007758:	f6ff ab2d 	blt.w	8006db6 <ublox_All_resp+0x76>
 800775c:	e000      	b.n	8007760 <ublox_All_resp+0xa20>
			break;
 800775e:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 8007760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8007764:	4618      	mov	r0, r3
 8007766:	37d0      	adds	r7, #208	; 0xd0
 8007768:	46bd      	mov	sp, r7
 800776a:	bdb0      	pop	{r4, r5, r7, pc}
 800776c:	20000510 	.word	0x20000510
 8007770:	20000514 	.word	0x20000514
 8007774:	08014000 	.word	0x08014000
 8007778:	20002810 	.word	0x20002810
 800777c:	08014020 	.word	0x08014020

08007780 <ublox_NavDop_print>:


void ublox_NavDop_print(UbloxNavDop_t* ubloxNavDop)
{
 8007780:	b590      	push	{r4, r7, lr}
 8007782:	b097      	sub	sp, #92	; 0x5c
 8007784:	af02      	add	r7, sp, #8
 8007786:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-DOP\r\n");
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	4a8f      	ldr	r2, [pc, #572]	; (80079cc <ublox_NavDop_print+0x24c>)
 800778e:	2140      	movs	r1, #64	; 0x40
 8007790:	4618      	mov	r0, r3
 8007792:	f008 fc3b 	bl	801000c <sniprintf>
 8007796:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779a:	b29a      	uxth	r2, r3
 800779c:	f107 010c 	add.w	r1, r7, #12
 80077a0:	2319      	movs	r3, #25
 80077a2:	488b      	ldr	r0, [pc, #556]	; (80079d0 <ublox_NavDop_print+0x250>)
 80077a4:	f006 fd31 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", ubloxNavDop->iTOW);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f107 000c 	add.w	r0, r7, #12
 80077b0:	4a88      	ldr	r2, [pc, #544]	; (80079d4 <ublox_NavDop_print+0x254>)
 80077b2:	2140      	movs	r1, #64	; 0x40
 80077b4:	f008 fc2a 	bl	801000c <sniprintf>
 80077b8:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80077ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077bc:	b29a      	uxth	r2, r3
 80077be:	f107 010c 	add.w	r1, r7, #12
 80077c2:	2319      	movs	r3, #25
 80077c4:	4882      	ldr	r0, [pc, #520]	; (80079d0 <ublox_NavDop_print+0x250>)
 80077c6:	f006 fd20 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (ubloxNavDop->gDOP / 100), (ubloxNavDop->gDOP % 100));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	4a82      	ldr	r2, [pc, #520]	; (80079d8 <ublox_NavDop_print+0x258>)
 80077d0:	fba2 2303 	umull	r2, r3, r2, r3
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461c      	mov	r4, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	889b      	ldrh	r3, [r3, #4]
 80077de:	4a7e      	ldr	r2, [pc, #504]	; (80079d8 <ublox_NavDop_print+0x258>)
 80077e0:	fba2 1203 	umull	r1, r2, r2, r3
 80077e4:	0952      	lsrs	r2, r2, #5
 80077e6:	2164      	movs	r1, #100	; 0x64
 80077e8:	fb01 f202 	mul.w	r2, r1, r2
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f107 000c 	add.w	r0, r7, #12
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4623      	mov	r3, r4
 80077f8:	4a78      	ldr	r2, [pc, #480]	; (80079dc <ublox_NavDop_print+0x25c>)
 80077fa:	2140      	movs	r1, #64	; 0x40
 80077fc:	f008 fc06 	bl	801000c <sniprintf>
 8007800:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007804:	b29a      	uxth	r2, r3
 8007806:	f107 010c 	add.w	r1, r7, #12
 800780a:	2319      	movs	r3, #25
 800780c:	4870      	ldr	r0, [pc, #448]	; (80079d0 <ublox_NavDop_print+0x250>)
 800780e:	f006 fcfc 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (ubloxNavDop->pDOP / 100), (ubloxNavDop->pDOP % 100));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	88db      	ldrh	r3, [r3, #6]
 8007816:	4a70      	ldr	r2, [pc, #448]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	b29b      	uxth	r3, r3
 8007820:	461c      	mov	r4, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	4a6c      	ldr	r2, [pc, #432]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007828:	fba2 1203 	umull	r1, r2, r2, r3
 800782c:	0952      	lsrs	r2, r2, #5
 800782e:	2164      	movs	r1, #100	; 0x64
 8007830:	fb01 f202 	mul.w	r2, r1, r2
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	b29b      	uxth	r3, r3
 8007838:	f107 000c 	add.w	r0, r7, #12
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4623      	mov	r3, r4
 8007840:	4a67      	ldr	r2, [pc, #412]	; (80079e0 <ublox_NavDop_print+0x260>)
 8007842:	2140      	movs	r1, #64	; 0x40
 8007844:	f008 fbe2 	bl	801000c <sniprintf>
 8007848:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800784a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784c:	b29a      	uxth	r2, r3
 800784e:	f107 010c 	add.w	r1, r7, #12
 8007852:	2319      	movs	r3, #25
 8007854:	485e      	ldr	r0, [pc, #376]	; (80079d0 <ublox_NavDop_print+0x250>)
 8007856:	f006 fcd8 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (ubloxNavDop->tDOP / 100), (ubloxNavDop->tDOP % 100));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	891b      	ldrh	r3, [r3, #8]
 800785e:	4a5e      	ldr	r2, [pc, #376]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	095b      	lsrs	r3, r3, #5
 8007866:	b29b      	uxth	r3, r3
 8007868:	461c      	mov	r4, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	891b      	ldrh	r3, [r3, #8]
 800786e:	4a5a      	ldr	r2, [pc, #360]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007870:	fba2 1203 	umull	r1, r2, r2, r3
 8007874:	0952      	lsrs	r2, r2, #5
 8007876:	2164      	movs	r1, #100	; 0x64
 8007878:	fb01 f202 	mul.w	r2, r1, r2
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	f107 000c 	add.w	r0, r7, #12
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4623      	mov	r3, r4
 8007888:	4a56      	ldr	r2, [pc, #344]	; (80079e4 <ublox_NavDop_print+0x264>)
 800788a:	2140      	movs	r1, #64	; 0x40
 800788c:	f008 fbbe 	bl	801000c <sniprintf>
 8007890:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	b29a      	uxth	r2, r3
 8007896:	f107 010c 	add.w	r1, r7, #12
 800789a:	2319      	movs	r3, #25
 800789c:	484c      	ldr	r0, [pc, #304]	; (80079d0 <ublox_NavDop_print+0x250>)
 800789e:	f006 fcb4 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (ubloxNavDop->vDOP / 100), (ubloxNavDop->vDOP % 100));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	895b      	ldrh	r3, [r3, #10]
 80078a6:	4a4c      	ldr	r2, [pc, #304]	; (80079d8 <ublox_NavDop_print+0x258>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	461c      	mov	r4, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	895b      	ldrh	r3, [r3, #10]
 80078b6:	4a48      	ldr	r2, [pc, #288]	; (80079d8 <ublox_NavDop_print+0x258>)
 80078b8:	fba2 1203 	umull	r1, r2, r2, r3
 80078bc:	0952      	lsrs	r2, r2, #5
 80078be:	2164      	movs	r1, #100	; 0x64
 80078c0:	fb01 f202 	mul.w	r2, r1, r2
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f107 000c 	add.w	r0, r7, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4623      	mov	r3, r4
 80078d0:	4a45      	ldr	r2, [pc, #276]	; (80079e8 <ublox_NavDop_print+0x268>)
 80078d2:	2140      	movs	r1, #64	; 0x40
 80078d4:	f008 fb9a 	bl	801000c <sniprintf>
 80078d8:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80078da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f107 010c 	add.w	r1, r7, #12
 80078e2:	2319      	movs	r3, #25
 80078e4:	483a      	ldr	r0, [pc, #232]	; (80079d0 <ublox_NavDop_print+0x250>)
 80078e6:	f006 fc90 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (ubloxNavDop->hDOP / 100), (ubloxNavDop->hDOP % 100));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	899b      	ldrh	r3, [r3, #12]
 80078ee:	4a3a      	ldr	r2, [pc, #232]	; (80079d8 <ublox_NavDop_print+0x258>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461c      	mov	r4, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	899b      	ldrh	r3, [r3, #12]
 80078fe:	4a36      	ldr	r2, [pc, #216]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007900:	fba2 1203 	umull	r1, r2, r2, r3
 8007904:	0952      	lsrs	r2, r2, #5
 8007906:	2164      	movs	r1, #100	; 0x64
 8007908:	fb01 f202 	mul.w	r2, r1, r2
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	b29b      	uxth	r3, r3
 8007910:	f107 000c 	add.w	r0, r7, #12
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4623      	mov	r3, r4
 8007918:	4a34      	ldr	r2, [pc, #208]	; (80079ec <ublox_NavDop_print+0x26c>)
 800791a:	2140      	movs	r1, #64	; 0x40
 800791c:	f008 fb76 	bl	801000c <sniprintf>
 8007920:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007924:	b29a      	uxth	r2, r3
 8007926:	f107 010c 	add.w	r1, r7, #12
 800792a:	2319      	movs	r3, #25
 800792c:	4828      	ldr	r0, [pc, #160]	; (80079d0 <ublox_NavDop_print+0x250>)
 800792e:	f006 fc6c 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (ubloxNavDop->nDOP / 100), (ubloxNavDop->nDOP % 100));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	89db      	ldrh	r3, [r3, #14]
 8007936:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	b29b      	uxth	r3, r3
 8007940:	461c      	mov	r4, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	89db      	ldrh	r3, [r3, #14]
 8007946:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007948:	fba2 1203 	umull	r1, r2, r2, r3
 800794c:	0952      	lsrs	r2, r2, #5
 800794e:	2164      	movs	r1, #100	; 0x64
 8007950:	fb01 f202 	mul.w	r2, r1, r2
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	f107 000c 	add.w	r0, r7, #12
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4623      	mov	r3, r4
 8007960:	4a23      	ldr	r2, [pc, #140]	; (80079f0 <ublox_NavDop_print+0x270>)
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	f008 fb52 	bl	801000c <sniprintf>
 8007968:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800796a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796c:	b29a      	uxth	r2, r3
 800796e:	f107 010c 	add.w	r1, r7, #12
 8007972:	2319      	movs	r3, #25
 8007974:	4816      	ldr	r0, [pc, #88]	; (80079d0 <ublox_NavDop_print+0x250>)
 8007976:	f006 fc48 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (ubloxNavDop->eDOP / 100), (ubloxNavDop->eDOP % 100));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8a1b      	ldrh	r3, [r3, #16]
 800797e:	4a16      	ldr	r2, [pc, #88]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	b29b      	uxth	r3, r3
 8007988:	461c      	mov	r4, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8a1b      	ldrh	r3, [r3, #16]
 800798e:	4a12      	ldr	r2, [pc, #72]	; (80079d8 <ublox_NavDop_print+0x258>)
 8007990:	fba2 1203 	umull	r1, r2, r2, r3
 8007994:	0952      	lsrs	r2, r2, #5
 8007996:	2164      	movs	r1, #100	; 0x64
 8007998:	fb01 f202 	mul.w	r2, r1, r2
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f107 000c 	add.w	r0, r7, #12
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4623      	mov	r3, r4
 80079a8:	4a12      	ldr	r2, [pc, #72]	; (80079f4 <ublox_NavDop_print+0x274>)
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	f008 fb2e 	bl	801000c <sniprintf>
 80079b0:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80079b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f107 010c 	add.w	r1, r7, #12
 80079ba:	2319      	movs	r3, #25
 80079bc:	4804      	ldr	r0, [pc, #16]	; (80079d0 <ublox_NavDop_print+0x250>)
 80079be:	f006 fc24 	bl	800e20a <HAL_UART_Transmit>
}
 80079c2:	bf00      	nop
 80079c4:	3754      	adds	r7, #84	; 0x54
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd90      	pop	{r4, r7, pc}
 80079ca:	bf00      	nop
 80079cc:	08014050 	.word	0x08014050
 80079d0:	20002810 	.word	0x20002810
 80079d4:	08014060 	.word	0x08014060
 80079d8:	51eb851f 	.word	0x51eb851f
 80079dc:	08014088 	.word	0x08014088
 80079e0:	080140a8 	.word	0x080140a8
 80079e4:	080140c8 	.word	0x080140c8
 80079e8:	080140e8 	.word	0x080140e8
 80079ec:	08014108 	.word	0x08014108
 80079f0:	08014128 	.word	0x08014128
 80079f4:	08014148 	.word	0x08014148

080079f8 <ublox_NavClock_print>:

void ublox_NavClock_print(UbloxNavClock_t* ubloxNavClock)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b094      	sub	sp, #80	; 0x50
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	uint8_t msg[64];
	int len;

	len = snprintf(((char*) msg), sizeof(msg), "\r\n*** NAV-CLOCK\r\n");
 8007a00:	f107 030c 	add.w	r3, r7, #12
 8007a04:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <ublox_NavClock_print+0xdc>)
 8007a06:	2140      	movs	r1, #64	; 0x40
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f008 faff 	bl	801000c <sniprintf>
 8007a0e:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f107 010c 	add.w	r1, r7, #12
 8007a18:	2319      	movs	r3, #25
 8007a1a:	482f      	ldr	r0, [pc, #188]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007a1c:	f006 fbf5 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f107 000c 	add.w	r0, r7, #12
 8007a28:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <ublox_NavClock_print+0xe4>)
 8007a2a:	2140      	movs	r1, #64	; 0x40
 8007a2c:	f008 faee 	bl	801000c <sniprintf>
 8007a30:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	f107 010c 	add.w	r1, r7, #12
 8007a3a:	2319      	movs	r3, #25
 8007a3c:	4826      	ldr	r0, [pc, #152]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007a3e:	f006 fbe4 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f107 000c 	add.w	r0, r7, #12
 8007a4a:	4a25      	ldr	r2, [pc, #148]	; (8007ae0 <ublox_NavClock_print+0xe8>)
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	f008 fadd 	bl	801000c <sniprintf>
 8007a52:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f107 010c 	add.w	r1, r7, #12
 8007a5c:	2319      	movs	r3, #25
 8007a5e:	481e      	ldr	r0, [pc, #120]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007a60:	f006 fbd3 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f107 000c 	add.w	r0, r7, #12
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <ublox_NavClock_print+0xec>)
 8007a6e:	2140      	movs	r1, #64	; 0x40
 8007a70:	f008 facc 	bl	801000c <sniprintf>
 8007a74:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	f107 010c 	add.w	r1, r7, #12
 8007a7e:	2319      	movs	r3, #25
 8007a80:	4815      	ldr	r0, [pc, #84]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007a82:	f006 fbc2 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f107 000c 	add.w	r0, r7, #12
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <ublox_NavClock_print+0xf0>)
 8007a90:	2140      	movs	r1, #64	; 0x40
 8007a92:	f008 fabb 	bl	801000c <sniprintf>
 8007a96:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	f107 010c 	add.w	r1, r7, #12
 8007aa0:	2319      	movs	r3, #25
 8007aa2:	480d      	ldr	r0, [pc, #52]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007aa4:	f006 fbb1 	bl	800e20a <HAL_UART_Transmit>

	len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f107 000c 	add.w	r0, r7, #12
 8007ab0:	4a0e      	ldr	r2, [pc, #56]	; (8007aec <ublox_NavClock_print+0xf4>)
 8007ab2:	2140      	movs	r1, #64	; 0x40
 8007ab4:	f008 faaa 	bl	801000c <sniprintf>
 8007ab8:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	f107 010c 	add.w	r1, r7, #12
 8007ac2:	2319      	movs	r3, #25
 8007ac4:	4804      	ldr	r0, [pc, #16]	; (8007ad8 <ublox_NavClock_print+0xe0>)
 8007ac6:	f006 fba0 	bl	800e20a <HAL_UART_Transmit>
}
 8007aca:	bf00      	nop
 8007acc:	3750      	adds	r7, #80	; 0x50
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08014168 	.word	0x08014168
 8007ad8:	20002810 	.word	0x20002810
 8007adc:	08014060 	.word	0x08014060
 8007ae0:	0801417c 	.word	0x0801417c
 8007ae4:	0801419c 	.word	0x0801419c
 8007ae8:	080141bc 	.word	0x080141bc
 8007aec:	080141dc 	.word	0x080141dc

08007af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007af4:	f7fe f84a 	bl	8005b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007af8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007afa:	e003      	b.n	8007b04 <LoopCopyDataInit>

08007afc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007afe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b02:	3104      	adds	r1, #4

08007b04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b04:	480a      	ldr	r0, [pc, #40]	; (8007b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b0c:	d3f6      	bcc.n	8007afc <CopyDataInit>
	ldr	r2, =_sbss
 8007b0e:	4a0a      	ldr	r2, [pc, #40]	; (8007b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b10:	e002      	b.n	8007b18 <LoopFillZerobss>

08007b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b14:	f842 3b04 	str.w	r3, [r2], #4

08007b18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <LoopForever+0x16>)
	cmp	r2, r3
 8007b1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b1c:	d3f9      	bcc.n	8007b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b1e:	f007 fdd1 	bl	800f6c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b22:	f7fd f92d 	bl	8004d80 <main>

08007b26 <LoopForever>:

LoopForever:
    b LoopForever
 8007b26:	e7fe      	b.n	8007b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007b28:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8007b2c:	08014a30 	.word	0x08014a30
	ldr	r0, =_sdata
 8007b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b34:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8007b38:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8007b3c:	200028a8 	.word	0x200028a8

08007b40 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b40:	e7fe      	b.n	8007b40 <CAN1_RX0_IRQHandler>
	...

08007b44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <HAL_Init+0x3c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0b      	ldr	r2, [pc, #44]	; (8007b80 <HAL_Init+0x3c>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b5a:	2003      	movs	r0, #3
 8007b5c:	f001 fd69 	bl	8009632 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007b60:	200f      	movs	r0, #15
 8007b62:	f7fd fe7b 	bl	800585c <HAL_InitTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	71fb      	strb	r3, [r7, #7]
 8007b70:	e001      	b.n	8007b76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007b72:	f7fd fe4f 	bl	8005814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007b76:	79fb      	ldrb	r3, [r7, #7]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40022000 	.word	0x40022000

08007b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007b88:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <HAL_IncTick+0x20>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <HAL_IncTick+0x24>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4413      	add	r3, r2
 8007b94:	4a04      	ldr	r2, [pc, #16]	; (8007ba8 <HAL_IncTick+0x24>)
 8007b96:	6013      	str	r3, [r2, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000014 	.word	0x20000014
 8007ba8:	20002894 	.word	0x20002894

08007bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  return uwTick;
 8007bb0:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <HAL_GetTick+0x14>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20002894 	.word	0x20002894

08007bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bcc:	f7ff ffee 	bl	8007bac <HAL_GetTick>
 8007bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d005      	beq.n	8007bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <HAL_Delay+0x44>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bea:	bf00      	nop
 8007bec:	f7ff ffde 	bl	8007bac <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d8f7      	bhi.n	8007bec <HAL_Delay+0x28>
  {
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000014 	.word	0x20000014

08007c0c <LL_ADC_SetCommonClock>:
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	609a      	str	r2, [r3, #8]
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <LL_ADC_SetCommonPathInternalCh>:
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <LL_ADC_GetCommonPathInternalCh>:
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_ADC_SetOffset>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3360      	adds	r3, #96	; 0x60
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <LL_ADC_SetOffset+0x44>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	601a      	str	r2, [r3, #0]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	03fff000 	.word	0x03fff000

08007cbc <LL_ADC_GetOffsetChannel>:
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3360      	adds	r3, #96	; 0x60
 8007cca:	461a      	mov	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <LL_ADC_SetOffsetState>:
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3360      	adds	r3, #96	; 0x60
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	601a      	str	r2, [r3, #0]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LL_ADC_REG_SetSequencerRanks>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3330      	adds	r3, #48	; 0x30
 8007d54:	461a      	mov	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	4413      	add	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	211f      	movs	r1, #31
 8007d70:	fa01 f303 	lsl.w	r3, r1, r3
 8007d74:	43db      	mvns	r3, r3
 8007d76:	401a      	ands	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	0e9b      	lsrs	r3, r3, #26
 8007d7c:	f003 011f 	and.w	r1, r3, #31
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	601a      	str	r2, [r3, #0]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <LL_ADC_SetChannelSamplingTime>:
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b087      	sub	sp, #28
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	0e5b      	lsrs	r3, r3, #25
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2107      	movs	r1, #7
 8007df0:	fa01 f303 	lsl.w	r3, r1, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401a      	ands	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	0d1b      	lsrs	r3, r3, #20
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	431a      	orrs	r2, r3
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <LL_ADC_SetChannelSingleDiff>:
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0318 	and.w	r3, r3, #24
 8007e3a:	4908      	ldr	r1, [pc, #32]	; (8007e5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8007e3c:	40d9      	lsrs	r1, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	400b      	ands	r3, r1
 8007e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	0007ffff 	.word	0x0007ffff

08007e60 <LL_ADC_DisableDeepPowerDown>:
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6093      	str	r3, [r2, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e98:	d101      	bne.n	8007e9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <LL_ADC_EnableInternalRegulator>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ec0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	609a      	str	r2, [r3, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee8:	d101      	bne.n	8007eee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_ADC_Enable>:
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <LL_ADC_Disable>:
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f38:	f043 0202 	orr.w	r2, r3, #2
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	609a      	str	r2, [r3, #8]
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <LL_ADC_IsEnabled>:
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <LL_ADC_IsEnabled+0x18>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e000      	b.n	8007f66 <LL_ADC_IsEnabled+0x1a>
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <LL_ADC_IsDisableOngoing>:
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d101      	bne.n	8007f8a <LL_ADC_IsDisableOngoing+0x18>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <LL_ADC_IsDisableOngoing+0x1a>
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <LL_ADC_REG_StopConversion>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fac:	f043 0210 	orr.w	r2, r3, #16
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	609a      	str	r2, [r3, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <LL_ADC_REG_IsConversionOngoing>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d101      	bne.n	8007fd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ffa:	f043 0220 	orr.w	r2, r3, #32
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b08      	cmp	r3, #8
 8008020:	d101      	bne.n	8008026 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008040:	2300      	movs	r3, #0
 8008042:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e12c      	b.n	80082a8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7f9 f891 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ff05 	bl	8007e84 <LL_ADC_IsDeepPowerDownEnabled>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff feeb 	bl	8007e60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ff20 	bl	8007ed4 <LL_ADC_IsInternalRegulatorEnabled>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d115      	bne.n	80080c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff04 	bl	8007eac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80080a4:	4b82      	ldr	r3, [pc, #520]	; (80082b0 <HAL_ADC_Init+0x27c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	099b      	lsrs	r3, r3, #6
 80080aa:	4a82      	ldr	r2, [pc, #520]	; (80082b4 <HAL_ADC_Init+0x280>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	099b      	lsrs	r3, r3, #6
 80080b2:	3301      	adds	r3, #1
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080b8:	e002      	b.n	80080c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	3b01      	subs	r3, #1
 80080be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f9      	bne.n	80080ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff ff02 	bl	8007ed4 <LL_ADC_IsInternalRegulatorEnabled>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10d      	bne.n	80080f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f043 0210 	orr.w	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff62 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 80080fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b00      	cmp	r3, #0
 8008108:	f040 80c5 	bne.w	8008296 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f040 80c1 	bne.w	8008296 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008118:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800811c:	f043 0202 	orr.w	r2, r3, #2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff0f 	bl	8007f4c <LL_ADC_IsEnabled>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008134:	4860      	ldr	r0, [pc, #384]	; (80082b8 <HAL_ADC_Init+0x284>)
 8008136:	f7ff ff09 	bl	8007f4c <LL_ADC_IsEnabled>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4619      	mov	r1, r3
 8008146:	485d      	ldr	r0, [pc, #372]	; (80082bc <HAL_ADC_Init+0x288>)
 8008148:	f7ff fd60 	bl	8007c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7e5b      	ldrb	r3, [r3, #25]
 8008150:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008156:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800815c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008162:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800816a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d106      	bne.n	8008188 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	3b01      	subs	r3, #1
 8008180:	045b      	lsls	r3, r3, #17
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	4b45      	ldr	r3, [pc, #276]	; (80082c0 <HAL_ADC_Init+0x28c>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	69b9      	ldr	r1, [r7, #24]
 80081b4:	430b      	orrs	r3, r1
 80081b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff feff 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 80081c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ff20 	bl	800800e <LL_ADC_INJ_IsConversionOngoing>
 80081ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d13d      	bne.n	8008252 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d13a      	bne.n	8008252 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081ea:	4313      	orrs	r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f8:	f023 0302 	bic.w	r3, r3, #2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	430b      	orrs	r3, r1
 8008204:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800820c:	2b01      	cmp	r3, #1
 800820e:	d118      	bne.n	8008242 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800821a:	f023 0304 	bic.w	r3, r3, #4
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008226:	4311      	orrs	r1, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800822c:	4311      	orrs	r1, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008232:	430a      	orrs	r2, r1
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	611a      	str	r2, [r3, #16]
 8008240:	e007      	b.n	8008252 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10c      	bne.n	8008274 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	f023 010f 	bic.w	r1, r3, #15
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	631a      	str	r2, [r3, #48]	; 0x30
 8008272:	e007      	b.n	8008284 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 020f 	bic.w	r2, r2, #15
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	f043 0201 	orr.w	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	655a      	str	r2, [r3, #84]	; 0x54
 8008294:	e007      	b.n	80082a6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f043 0210 	orr.w	r2, r3, #16
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80082a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000008 	.word	0x20000008
 80082b4:	053e2d63 	.word	0x053e2d63
 80082b8:	50040000 	.word	0x50040000
 80082bc:	50040300 	.word	0x50040300
 80082c0:	fff0c007 	.word	0xfff0c007

080082c4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_ADC_Stop_DMA+0x16>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e051      	b.n	800837e <HAL_ADC_Stop_DMA+0xba>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80082e2:	2103      	movs	r1, #3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fe03 	bl	8008ef0 <ADC_ConversionStop>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d13f      	bne.n	8008374 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008308:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d10f      	bne.n	8008332 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008316:	4618      	mov	r0, r3
 8008318:	f001 fae6 	bl	80098e8 <HAL_DMA_Abort>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0210 	bic.w	r2, r2, #16
 8008340:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 feef 	bl	800912c <ADC_Disable>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e002      	b.n	800835a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fee9 	bl	800912c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d109      	bne.n	8008374 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	f043 0201 	orr.w	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b088      	sub	sp, #32
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_ADC_IRQHandler+0x56>
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d012      	beq.n	80083dc <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 f854 	bl	800947c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2202      	movs	r2, #2
 80083da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <HAL_ADC_IRQHandler+0x6a>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d05e      	beq.n	80084b8 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f003 0308 	and.w	r3, r3, #8
 8008400:	2b00      	cmp	r3, #0
 8008402:	d059      	beq.n	80084b8 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fc7c 	bl	8007d1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d03e      	beq.n	80084aa <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d135      	bne.n	80084aa <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b08      	cmp	r3, #8
 800844a:	d12e      	bne.n	80084aa <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fdb5 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11a      	bne.n	8008492 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 020c 	bic.w	r2, r2, #12
 800846a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d112      	bne.n	80084aa <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008488:	f043 0201 	orr.w	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	655a      	str	r2, [r3, #84]	; 0x54
 8008490:	e00b      	b.n	80084aa <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	f043 0210 	orr.w	r2, r3, #16
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	f043 0201 	orr.w	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7f8 ff98 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	220c      	movs	r2, #12
 80084b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <HAL_ADC_IRQHandler+0x146>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d072      	beq.n	80085bc <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d06d      	beq.n	80085bc <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fc4d 	bl	8007d9c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008502:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fc08 	bl	8007d1e <LL_ADC_REG_IsTriggerSourceSWStart>
 800850e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d047      	beq.n	80085ae <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <HAL_ADC_IRQHandler+0x1b2>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d03f      	beq.n	80085ae <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8008534:	2b00      	cmp	r3, #0
 8008536:	d13a      	bne.n	80085ae <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d133      	bne.n	80085ae <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d12e      	bne.n	80085ae <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fd5a 	bl	800800e <LL_ADC_INJ_IsConversionOngoing>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11a      	bne.n	8008596 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800856e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008574:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d112      	bne.n	80085ae <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	f043 0201 	orr.w	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	655a      	str	r2, [r3, #84]	; 0x54
 8008594:	e00b      	b.n	80085ae <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859a:	f043 0210 	orr.w	r2, r3, #16
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f043 0201 	orr.w	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 ff3c 	bl	800942c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2260      	movs	r2, #96	; 0x60
 80085ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d011      	beq.n	80085ea <HAL_ADC_IRQHandler+0x264>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f890 	bl	8008702 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2280      	movs	r2, #128	; 0x80
 80085e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d012      	beq.n	800861a <HAL_ADC_IRQHandler+0x294>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00d      	beq.n	800861a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 ff22 	bl	8009454 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008618:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008620:	2b00      	cmp	r3, #0
 8008622:	d012      	beq.n	800864a <HAL_ADC_IRQHandler+0x2c4>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 ff14 	bl	8009468 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008648:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d02a      	beq.n	80086aa <HAL_ADC_IRQHandler+0x324>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	d025      	beq.n	80086aa <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	e008      	b.n	800867e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800867a:	2301      	movs	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10e      	bne.n	80086a2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008694:	f043 0202 	orr.w	r2, r3, #2
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f8 fed7 	bl	8001450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2210      	movs	r2, #16
 80086a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d018      	beq.n	80086e6 <HAL_ADC_IRQHandler+0x360>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ce:	f043 0208 	orr.w	r2, r3, #8
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fead 	bl	8009440 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80086e6:	bf00      	nop
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
	...

08008718 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b0b6      	sub	sp, #216	; 0xd8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_ADC_ConfigChannel+0x22>
 8008736:	2302      	movs	r3, #2
 8008738:	e3b9      	b.n	8008eae <HAL_ADC_ConfigChannel+0x796>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fc3a 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	f040 839e 	bne.w	8008e90 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d824      	bhi.n	80087a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	3b02      	subs	r3, #2
 8008762:	2b03      	cmp	r3, #3
 8008764:	d81b      	bhi.n	800879e <HAL_ADC_ConfigChannel+0x86>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <HAL_ADC_ConfigChannel+0x54>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	0800877d 	.word	0x0800877d
 8008770:	08008785 	.word	0x08008785
 8008774:	0800878d 	.word	0x0800878d
 8008778:	08008795 	.word	0x08008795
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	220c      	movs	r2, #12
 8008780:	605a      	str	r2, [r3, #4]
          break;
 8008782:	e011      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2212      	movs	r2, #18
 8008788:	605a      	str	r2, [r3, #4]
          break;
 800878a:	e00d      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2218      	movs	r2, #24
 8008790:	605a      	str	r2, [r3, #4]
          break;
 8008792:	e009      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800879a:	605a      	str	r2, [r3, #4]
          break;
 800879c:	e004      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2206      	movs	r2, #6
 80087a2:	605a      	str	r2, [r3, #4]
          break;
 80087a4:	e000      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80087a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6859      	ldr	r1, [r3, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	f7ff fac5 	bl	8007d44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff fbfe 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 80087c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fc1e 	bl	800800e <LL_ADC_INJ_IsConversionOngoing>
 80087d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80087d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 81a6 	bne.w	8008b2c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80087e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f040 81a1 	bne.w	8008b2c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6819      	ldr	r1, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7ff fae3 	bl	8007dc2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	695a      	ldr	r2, [r3, #20]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	08db      	lsrs	r3, r3, #3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	fa02 f303 	lsl.w	r3, r2, r3
 8008812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d00a      	beq.n	8008834 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6919      	ldr	r1, [r3, #16]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800882e:	f7ff fa21 	bl	8007c74 <LL_ADC_SetOffset>
 8008832:	e17b      	b.n	8008b2c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fa3e 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008840:	4603      	mov	r3, r0
 8008842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <HAL_ADC_ConfigChannel+0x148>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fa33 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008856:	4603      	mov	r3, r0
 8008858:	0e9b      	lsrs	r3, r3, #26
 800885a:	f003 021f 	and.w	r2, r3, #31
 800885e:	e01e      	b.n	800889e <HAL_ADC_ConfigChannel+0x186>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fa28 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 800886c:	4603      	mov	r3, r0
 800886e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008876:	fa93 f3a3 	rbit	r3, r3
 800887a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800887e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800888e:	2320      	movs	r3, #32
 8008890:	e004      	b.n	800889c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8008892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008896:	fab3 f383 	clz	r3, r3
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <HAL_ADC_ConfigChannel+0x19e>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	0e9b      	lsrs	r3, r3, #26
 80088b0:	f003 031f 	and.w	r3, r3, #31
 80088b4:	e018      	b.n	80088e8 <HAL_ADC_ConfigChannel+0x1d0>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088c2:	fa93 f3a3 	rbit	r3, r3
 80088c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80088ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80088d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80088da:	2320      	movs	r3, #32
 80088dc:	e004      	b.n	80088e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80088de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088e2:	fab3 f383 	clz	r3, r3
 80088e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d106      	bne.n	80088fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f9f7 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2101      	movs	r1, #1
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff f9db 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008906:	4603      	mov	r3, r0
 8008908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x20e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2101      	movs	r1, #1
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff f9d0 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 800891c:	4603      	mov	r3, r0
 800891e:	0e9b      	lsrs	r3, r3, #26
 8008920:	f003 021f 	and.w	r2, r3, #31
 8008924:	e01e      	b.n	8008964 <HAL_ADC_ConfigChannel+0x24c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff f9c5 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008932:	4603      	mov	r3, r0
 8008934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008938:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800893c:	fa93 f3a3 	rbit	r3, r3
 8008940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800894c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8008954:	2320      	movs	r3, #32
 8008956:	e004      	b.n	8008962 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8008958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800895c:	fab3 f383 	clz	r3, r3
 8008960:	b2db      	uxtb	r3, r3
 8008962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_ADC_ConfigChannel+0x264>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	0e9b      	lsrs	r3, r3, #26
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	e018      	b.n	80089ae <HAL_ADC_ConfigChannel+0x296>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008988:	fa93 f3a3 	rbit	r3, r3
 800898c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008990:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80089a0:	2320      	movs	r3, #32
 80089a2:	e004      	b.n	80089ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80089a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a8:	fab3 f383 	clz	r3, r3
 80089ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d106      	bne.n	80089c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	2101      	movs	r1, #1
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff f994 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2102      	movs	r1, #2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff f978 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10a      	bne.n	80089ec <HAL_ADC_ConfigChannel+0x2d4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2102      	movs	r1, #2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff f96d 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80089e2:	4603      	mov	r3, r0
 80089e4:	0e9b      	lsrs	r3, r3, #26
 80089e6:	f003 021f 	and.w	r2, r3, #31
 80089ea:	e01e      	b.n	8008a2a <HAL_ADC_ConfigChannel+0x312>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2102      	movs	r1, #2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff f962 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a02:	fa93 f3a3 	rbit	r3, r3
 8008a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8008a1a:	2320      	movs	r3, #32
 8008a1c:	e004      	b.n	8008a28 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8008a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a22:	fab3 f383 	clz	r3, r3
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <HAL_ADC_ConfigChannel+0x32a>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	0e9b      	lsrs	r3, r3, #26
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	e016      	b.n	8008a70 <HAL_ADC_ConfigChannel+0x358>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a4e:	fa93 f3a3 	rbit	r3, r3
 8008a52:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8008a62:	2320      	movs	r3, #32
 8008a64:	e004      	b.n	8008a70 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8008a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a6a:	fab3 f383 	clz	r3, r3
 8008a6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d106      	bne.n	8008a82 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f933 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2103      	movs	r1, #3
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff f917 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <HAL_ADC_ConfigChannel+0x396>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2103      	movs	r1, #3
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff f90c 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	0e9b      	lsrs	r3, r3, #26
 8008aa8:	f003 021f 	and.w	r2, r3, #31
 8008aac:	e017      	b.n	8008ade <HAL_ADC_ConfigChannel+0x3c6>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2103      	movs	r1, #3
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff f901 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008aba:	4603      	mov	r3, r0
 8008abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac0:	fa93 f3a3 	rbit	r3, r3
 8008ac4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	e003      	b.n	8008adc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	fab3 f383 	clz	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x3de>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	0e9b      	lsrs	r3, r3, #26
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	e011      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x402>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008afe:	fa93 f3a3 	rbit	r3, r3
 8008b02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8008b0e:	2320      	movs	r3, #32
 8008b10:	e003      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8008b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b14:	fab3 f383 	clz	r3, r3
 8008b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d106      	bne.n	8008b2c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	2103      	movs	r1, #3
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f8de 	bl	8007ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fa0b 	bl	8007f4c <LL_ADC_IsEnabled>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 813f 	bne.w	8008dbc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7ff f964 	bl	8007e18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4a8e      	ldr	r2, [pc, #568]	; (8008d90 <HAL_ADC_ConfigChannel+0x678>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	f040 8130 	bne.w	8008dbc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <HAL_ADC_ConfigChannel+0x46c>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	3301      	adds	r3, #1
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	bf94      	ite	ls
 8008b7c:	2301      	movls	r3, #1
 8008b7e:	2300      	movhi	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	e019      	b.n	8008bb8 <HAL_ADC_ConfigChannel+0x4a0>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8c:	fa93 f3a3 	rbit	r3, r3
 8008b90:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b94:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	e003      	b.n	8008ba8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba2:	fab3 f383 	clz	r3, r3
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2b09      	cmp	r3, #9
 8008bb0:	bf94      	ite	ls
 8008bb2:	2301      	movls	r3, #1
 8008bb4:	2300      	movhi	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d079      	beq.n	8008cb0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <HAL_ADC_ConfigChannel+0x4c0>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	0e9b      	lsrs	r3, r3, #26
 8008bce:	3301      	adds	r3, #1
 8008bd0:	069b      	lsls	r3, r3, #26
 8008bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd6:	e015      	b.n	8008c04 <HAL_ADC_ConfigChannel+0x4ec>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be0:	fa93 f3a3 	rbit	r3, r3
 8008be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	e003      	b.n	8008bfc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf6:	fab3 f383 	clz	r3, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	069b      	lsls	r3, r3, #26
 8008c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x50c>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	0e9b      	lsrs	r3, r3, #26
 8008c16:	3301      	adds	r3, #1
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c22:	e017      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x53c>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2c:	fa93 f3a3 	rbit	r3, r3
 8008c30:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	e003      	b.n	8008c48 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	fab3 f383 	clz	r3, r3
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2101      	movs	r1, #1
 8008c50:	fa01 f303 	lsl.w	r3, r1, r3
 8008c54:	ea42 0103 	orr.w	r1, r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_ADC_ConfigChannel+0x562>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	0e9b      	lsrs	r3, r3, #26
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f003 021f 	and.w	r2, r3, #31
 8008c70:	4613      	mov	r3, r2
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	4413      	add	r3, r2
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	e018      	b.n	8008cac <HAL_ADC_ConfigChannel+0x594>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8008c92:	2320      	movs	r3, #32
 8008c94:	e003      	b.n	8008c9e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	fab3 f383 	clz	r3, r3
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	f003 021f 	and.w	r2, r3, #31
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cac:	430b      	orrs	r3, r1
 8008cae:	e080      	b.n	8008db2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d107      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x5b4>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	0e9b      	lsrs	r3, r3, #26
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	069b      	lsls	r3, r3, #26
 8008cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cca:	e015      	b.n	8008cf8 <HAL_ADC_ConfigChannel+0x5e0>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e003      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	fab3 f383 	clz	r3, r3
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	069b      	lsls	r3, r3, #26
 8008cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <HAL_ADC_ConfigChannel+0x600>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	0e9b      	lsrs	r3, r3, #26
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	2101      	movs	r1, #1
 8008d12:	fa01 f303 	lsl.w	r3, r1, r3
 8008d16:	e017      	b.n	8008d48 <HAL_ADC_ConfigChannel+0x630>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	fa93 f3a3 	rbit	r3, r3
 8008d24:	61fb      	str	r3, [r7, #28]
  return result;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8008d30:	2320      	movs	r3, #32
 8008d32:	e003      	b.n	8008d3c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	2101      	movs	r1, #1
 8008d44:	fa01 f303 	lsl.w	r3, r1, r3
 8008d48:	ea42 0103 	orr.w	r1, r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <HAL_ADC_ConfigChannel+0x65c>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	0e9b      	lsrs	r3, r3, #26
 8008d5e:	3301      	adds	r3, #1
 8008d60:	f003 021f 	and.w	r2, r3, #31
 8008d64:	4613      	mov	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	3b1e      	subs	r3, #30
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d72:	e01d      	b.n	8008db0 <HAL_ADC_ConfigChannel+0x698>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	fa93 f3a3 	rbit	r3, r3
 8008d80:	613b      	str	r3, [r7, #16]
  return result;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d103      	bne.n	8008d94 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	e005      	b.n	8008d9c <HAL_ADC_ConfigChannel+0x684>
 8008d90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	fab3 f383 	clz	r3, r3
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f003 021f 	and.w	r2, r3, #31
 8008da2:	4613      	mov	r3, r2
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	3b1e      	subs	r3, #30
 8008daa:	051b      	lsls	r3, r3, #20
 8008dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008db0:	430b      	orrs	r3, r1
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	6892      	ldr	r2, [r2, #8]
 8008db6:	4619      	mov	r1, r3
 8008db8:	f7ff f803 	bl	8007dc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <HAL_ADC_ConfigChannel+0x7a0>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d06c      	beq.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008dc8:	483c      	ldr	r0, [pc, #240]	; (8008ebc <HAL_ADC_ConfigChannel+0x7a4>)
 8008dca:	f7fe ff45 	bl	8007c58 <LL_ADC_GetCommonPathInternalCh>
 8008dce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a3a      	ldr	r2, [pc, #232]	; (8008ec0 <HAL_ADC_ConfigChannel+0x7a8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d127      	bne.n	8008e2c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d121      	bne.n	8008e2c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a35      	ldr	r2, [pc, #212]	; (8008ec4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d157      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008df6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	482f      	ldr	r0, [pc, #188]	; (8008ebc <HAL_ADC_ConfigChannel+0x7a4>)
 8008dfe:	f7fe ff18 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e02:	4b31      	ldr	r3, [pc, #196]	; (8008ec8 <HAL_ADC_ConfigChannel+0x7b0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	099b      	lsrs	r3, r3, #6
 8008e08:	4a30      	ldr	r2, [pc, #192]	; (8008ecc <HAL_ADC_ConfigChannel+0x7b4>)
 8008e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0e:	099b      	lsrs	r3, r3, #6
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	4613      	mov	r3, r2
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008e1c:	e002      	b.n	8008e24 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f9      	bne.n	8008e1e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e2a:	e03a      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <HAL_ADC_ConfigChannel+0x7b8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d113      	bne.n	8008e5e <HAL_ADC_ConfigChannel+0x746>
 8008e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10d      	bne.n	8008e5e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d12a      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e54:	4619      	mov	r1, r3
 8008e56:	4819      	ldr	r0, [pc, #100]	; (8008ebc <HAL_ADC_ConfigChannel+0x7a4>)
 8008e58:	f7fe feeb 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e5c:	e021      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <HAL_ADC_ConfigChannel+0x7bc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d11c      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d116      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a12      	ldr	r2, [pc, #72]	; (8008ec4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d111      	bne.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e86:	4619      	mov	r1, r3
 8008e88:	480c      	ldr	r0, [pc, #48]	; (8008ebc <HAL_ADC_ConfigChannel+0x7a4>)
 8008e8a:	f7fe fed2 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
 8008e8e:	e008      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e94:	f043 0220 	orr.w	r2, r3, #32
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008eaa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	37d8      	adds	r7, #216	; 0xd8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	80080000 	.word	0x80080000
 8008ebc:	50040300 	.word	0x50040300
 8008ec0:	c7520000 	.word	0xc7520000
 8008ec4:	50040000 	.word	0x50040000
 8008ec8:	20000008 	.word	0x20000008
 8008ecc:	053e2d63 	.word	0x053e2d63
 8008ed0:	cb840000 	.word	0xcb840000
 8008ed4:	80000001 	.word	0x80000001

08008ed8 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff f85a 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 8008f0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff f87b 	bl	800800e <LL_ADC_INJ_IsConversionOngoing>
 8008f18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8098 	beq.w	8009058 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d02a      	beq.n	8008f8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7e5b      	ldrb	r3, [r3, #25]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d126      	bne.n	8008f8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	7e1b      	ldrb	r3, [r3, #24]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d122      	bne.n	8008f8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008f4a:	e014      	b.n	8008f76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4a45      	ldr	r2, [pc, #276]	; (8009064 <ADC_ConversionStop+0x174>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d90d      	bls.n	8008f70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	f043 0210 	orr.w	r2, r3, #16
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f64:	f043 0201 	orr.w	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e074      	b.n	800905a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3301      	adds	r3, #1
 8008f74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d1e3      	bne.n	8008f4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2240      	movs	r2, #64	; 0x40
 8008f8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d014      	beq.n	8008fbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff f812 	bl	8007fc0 <LL_ADC_REG_IsConversionOngoing>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00c      	beq.n	8008fbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe ffe3 	bl	8007f72 <LL_ADC_IsDisableOngoing>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe ffee 	bl	8007f98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d014      	beq.n	8008fec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff f821 	bl	800800e <LL_ADC_INJ_IsConversionOngoing>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe ffcb 	bl	8007f72 <LL_ADC_IsDisableOngoing>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fffd 	bl	8007fe6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d005      	beq.n	8008ffe <ADC_ConversionStop+0x10e>
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d105      	bne.n	8009004 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	617b      	str	r3, [r7, #20]
        break;
 8008ffc:	e005      	b.n	800900a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008ffe:	2308      	movs	r3, #8
 8009000:	617b      	str	r3, [r7, #20]
        break;
 8009002:	e002      	b.n	800900a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009004:	2304      	movs	r3, #4
 8009006:	617b      	str	r3, [r7, #20]
        break;
 8009008:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800900a:	f7fe fdcf 	bl	8007bac <HAL_GetTick>
 800900e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009010:	e01b      	b.n	800904a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009012:	f7fe fdcb 	bl	8007bac <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b05      	cmp	r3, #5
 800901e:	d914      	bls.n	800904a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00d      	beq.n	800904a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009032:	f043 0210 	orr.w	r2, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f043 0201 	orr.w	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e007      	b.n	800905a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1dc      	bne.n	8009012 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	a33fffff 	.word	0xa33fffff

08009068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe ff69 	bl	8007f4c <LL_ADC_IsEnabled>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d14d      	bne.n	800911c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	4b28      	ldr	r3, [pc, #160]	; (8009128 <ADC_Enable+0xc0>)
 8009088:	4013      	ands	r3, r2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00d      	beq.n	80090aa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009092:	f043 0210 	orr.w	r2, r3, #16
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909e:	f043 0201 	orr.w	r2, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e039      	b.n	800911e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe ff24 	bl	8007efc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80090b4:	f7fe fd7a 	bl	8007bac <HAL_GetTick>
 80090b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090ba:	e028      	b.n	800910e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe ff43 	bl	8007f4c <LL_ADC_IsEnabled>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ff13 	bl	8007efc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80090d6:	f7fe fd69 	bl	8007bac <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d914      	bls.n	800910e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d00d      	beq.n	800910e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f6:	f043 0210 	orr.w	r2, r3, #16
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009102:	f043 0201 	orr.w	r2, r3, #1
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e007      	b.n	800911e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d1cf      	bne.n	80090bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	8000003f 	.word	0x8000003f

0800912c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe ff1a 	bl	8007f72 <LL_ADC_IsDisableOngoing>
 800913e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe ff01 	bl	8007f4c <LL_ADC_IsEnabled>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d047      	beq.n	80091e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d144      	bne.n	80091e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 030d 	and.w	r3, r3, #13
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10c      	bne.n	800917e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe fedb 	bl	8007f24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009176:	f7fe fd19 	bl	8007bac <HAL_GetTick>
 800917a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800917c:	e029      	b.n	80091d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	f043 0210 	orr.w	r2, r3, #16
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918e:	f043 0201 	orr.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e023      	b.n	80091e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800919a:	f7fe fd07 	bl	8007bac <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d914      	bls.n	80091d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	f043 0210 	orr.w	r2, r3, #16
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c6:	f043 0201 	orr.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e007      	b.n	80091e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1dc      	bne.n	800919a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009200:	2b00      	cmp	r3, #0
 8009202:	d14b      	bne.n	800929c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009208:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d021      	beq.n	8009262 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fd7b 	bl	8007d1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d032      	beq.n	8009294 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12b      	bne.n	8009294 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11f      	bne.n	8009294 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	f043 0201 	orr.w	r2, r3, #1
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
 8009260:	e018      	b.n	8009294 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d111      	bne.n	8009294 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928c:	f043 0201 	orr.w	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7f8 f8a3 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800929a:	e00e      	b.n	80092ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7f8 f8d1 	bl	8001450 <HAL_ADC_ErrorCallback>
}
 80092ae:	e004      	b.n	80092ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fa0c 	bl	80086ee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fc:	f043 0204 	orr.w	r2, r3, #4
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7f8 f8a3 	bl	8001450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <LL_ADC_StartCalibration>:
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800932e:	4313      	orrs	r3, r2
 8009330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	609a      	str	r2, [r3, #8]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <LL_ADC_IsCalibrationOnGoing>:
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009358:	d101      	bne.n	800935e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009380:	2b01      	cmp	r3, #1
 8009382:	d101      	bne.n	8009388 <HAL_ADCEx_Calibration_Start+0x1c>
 8009384:	2302      	movs	r3, #2
 8009386:	e04d      	b.n	8009424 <HAL_ADCEx_Calibration_Start+0xb8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fecb 	bl	800912c <ADC_Disable>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d136      	bne.n	800940e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80093a8:	f023 0302 	bic.w	r3, r3, #2
 80093ac:	f043 0202 	orr.w	r2, r3, #2
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff ffa9 	bl	8009312 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80093c0:	e014      	b.n	80093ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80093ce:	d30d      	bcc.n	80093ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d4:	f023 0312 	bic.w	r3, r3, #18
 80093d8:	f043 0210 	orr.w	r2, r3, #16
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e01b      	b.n	8009424 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff ffa7 	bl	8009344 <LL_ADC_IsCalibrationOnGoing>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e2      	bne.n	80093c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	f043 0201 	orr.w	r2, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	655a      	str	r2, [r3, #84]	; 0x54
 800940c:	e005      	b.n	800941a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009412:	f043 0210 	orr.w	r2, r3, #16
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009422:	7bfb      	ldrb	r3, [r7, #15]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <__NVIC_SetPriorityGrouping+0x44>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80094ac:	4013      	ands	r3, r2
 80094ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80094bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094c2:	4a04      	ldr	r2, [pc, #16]	; (80094d4 <__NVIC_SetPriorityGrouping+0x44>)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	60d3      	str	r3, [r2, #12]
}
 80094c8:	bf00      	nop
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	e000ed00 	.word	0xe000ed00

080094d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80094d8:	b480      	push	{r7}
 80094da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094dc:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <__NVIC_GetPriorityGrouping+0x18>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	f003 0307 	and.w	r3, r3, #7
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	e000ed00 	.word	0xe000ed00

080094f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009502:	2b00      	cmp	r3, #0
 8009504:	db0b      	blt.n	800951e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	f003 021f 	and.w	r2, r3, #31
 800950c:	4907      	ldr	r1, [pc, #28]	; (800952c <__NVIC_EnableIRQ+0x38>)
 800950e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	2001      	movs	r0, #1
 8009516:	fa00 f202 	lsl.w	r2, r0, r2
 800951a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000e100 	.word	0xe000e100

08009530 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800953a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	db12      	blt.n	8009568 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	490a      	ldr	r1, [pc, #40]	; (8009574 <__NVIC_DisableIRQ+0x44>)
 800954a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	2001      	movs	r0, #1
 8009552:	fa00 f202 	lsl.w	r2, r0, r2
 8009556:	3320      	adds	r3, #32
 8009558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800955c:	f3bf 8f4f 	dsb	sy
}
 8009560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009562:	f3bf 8f6f 	isb	sy
}
 8009566:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	e000e100 	.word	0xe000e100

08009578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009588:	2b00      	cmp	r3, #0
 800958a:	db0a      	blt.n	80095a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	b2da      	uxtb	r2, r3
 8009590:	490c      	ldr	r1, [pc, #48]	; (80095c4 <__NVIC_SetPriority+0x4c>)
 8009592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009596:	0112      	lsls	r2, r2, #4
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	440b      	add	r3, r1
 800959c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095a0:	e00a      	b.n	80095b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	4908      	ldr	r1, [pc, #32]	; (80095c8 <__NVIC_SetPriority+0x50>)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	3b04      	subs	r3, #4
 80095b0:	0112      	lsls	r2, r2, #4
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	440b      	add	r3, r1
 80095b6:	761a      	strb	r2, [r3, #24]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	e000e100 	.word	0xe000e100
 80095c8:	e000ed00 	.word	0xe000ed00

080095cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b089      	sub	sp, #36	; 0x24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f1c3 0307 	rsb	r3, r3, #7
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	bf28      	it	cs
 80095ea:	2304      	movcs	r3, #4
 80095ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	3304      	adds	r3, #4
 80095f2:	2b06      	cmp	r3, #6
 80095f4:	d902      	bls.n	80095fc <NVIC_EncodePriority+0x30>
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	3b03      	subs	r3, #3
 80095fa:	e000      	b.n	80095fe <NVIC_EncodePriority+0x32>
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	43da      	mvns	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	401a      	ands	r2, r3
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009614:	f04f 31ff 	mov.w	r1, #4294967295
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	fa01 f303 	lsl.w	r3, r1, r3
 800961e:	43d9      	mvns	r1, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009624:	4313      	orrs	r3, r2
         );
}
 8009626:	4618      	mov	r0, r3
 8009628:	3724      	adds	r7, #36	; 0x24
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff ff28 	bl	8009490 <__NVIC_SetPriorityGrouping>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800965a:	f7ff ff3d 	bl	80094d8 <__NVIC_GetPriorityGrouping>
 800965e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	6978      	ldr	r0, [r7, #20]
 8009666:	f7ff ffb1 	bl	80095cc <NVIC_EncodePriority>
 800966a:	4602      	mov	r2, r0
 800966c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff ff80 	bl	8009578 <__NVIC_SetPriority>
}
 8009678:	bf00      	nop
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800968a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ff30 	bl	80094f4 <__NVIC_EnableIRQ>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80096a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ff40 	bl	8009530 <__NVIC_DisableIRQ>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e098      	b.n	80097fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	4b4d      	ldr	r3, [pc, #308]	; (8009808 <HAL_DMA_Init+0x150>)
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d80f      	bhi.n	80096f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	4b4b      	ldr	r3, [pc, #300]	; (800980c <HAL_DMA_Init+0x154>)
 80096de:	4413      	add	r3, r2
 80096e0:	4a4b      	ldr	r2, [pc, #300]	; (8009810 <HAL_DMA_Init+0x158>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	009a      	lsls	r2, r3, #2
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a48      	ldr	r2, [pc, #288]	; (8009814 <HAL_DMA_Init+0x15c>)
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40
 80096f4:	e00e      	b.n	8009714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	4b46      	ldr	r3, [pc, #280]	; (8009818 <HAL_DMA_Init+0x160>)
 80096fe:	4413      	add	r3, r2
 8009700:	4a43      	ldr	r2, [pc, #268]	; (8009810 <HAL_DMA_Init+0x158>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	091b      	lsrs	r3, r3, #4
 8009708:	009a      	lsls	r2, r3, #2
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a42      	ldr	r2, [pc, #264]	; (800981c <HAL_DMA_Init+0x164>)
 8009712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800976e:	d039      	beq.n	80097e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	4a27      	ldr	r2, [pc, #156]	; (8009814 <HAL_DMA_Init+0x15c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d11a      	bne.n	80097b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800977a:	4b29      	ldr	r3, [pc, #164]	; (8009820 <HAL_DMA_Init+0x168>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009782:	f003 031c 	and.w	r3, r3, #28
 8009786:	210f      	movs	r1, #15
 8009788:	fa01 f303 	lsl.w	r3, r1, r3
 800978c:	43db      	mvns	r3, r3
 800978e:	4924      	ldr	r1, [pc, #144]	; (8009820 <HAL_DMA_Init+0x168>)
 8009790:	4013      	ands	r3, r2
 8009792:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009794:	4b22      	ldr	r3, [pc, #136]	; (8009820 <HAL_DMA_Init+0x168>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6859      	ldr	r1, [r3, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a0:	f003 031c 	and.w	r3, r3, #28
 80097a4:	fa01 f303 	lsl.w	r3, r1, r3
 80097a8:	491d      	ldr	r1, [pc, #116]	; (8009820 <HAL_DMA_Init+0x168>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]
 80097ae:	e019      	b.n	80097e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80097b0:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <HAL_DMA_Init+0x16c>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b8:	f003 031c 	and.w	r3, r3, #28
 80097bc:	210f      	movs	r1, #15
 80097be:	fa01 f303 	lsl.w	r3, r1, r3
 80097c2:	43db      	mvns	r3, r3
 80097c4:	4917      	ldr	r1, [pc, #92]	; (8009824 <HAL_DMA_Init+0x16c>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80097ca:	4b16      	ldr	r3, [pc, #88]	; (8009824 <HAL_DMA_Init+0x16c>)
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6859      	ldr	r1, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	f003 031c 	and.w	r3, r3, #28
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	4911      	ldr	r1, [pc, #68]	; (8009824 <HAL_DMA_Init+0x16c>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	40020407 	.word	0x40020407
 800980c:	bffdfff8 	.word	0xbffdfff8
 8009810:	cccccccd 	.word	0xcccccccd
 8009814:	40020000 	.word	0x40020000
 8009818:	bffdfbf8 	.word	0xbffdfbf8
 800981c:	40020400 	.word	0x40020400
 8009820:	400200a8 	.word	0x400200a8
 8009824:	400204a8 	.word	0x400204a8

08009828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_DMA_Start_IT+0x20>
 8009844:	2302      	movs	r3, #2
 8009846:	e04b      	b.n	80098e0 <HAL_DMA_Start_IT+0xb8>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	d13a      	bne.n	80098d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0201 	bic.w	r2, r2, #1
 8009878:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f96d 	bl	8009b60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	2b00      	cmp	r3, #0
 800988c:	d008      	beq.n	80098a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f042 020e 	orr.w	r2, r2, #14
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e00f      	b.n	80098c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0204 	bic.w	r2, r2, #4
 80098ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 020a 	orr.w	r2, r2, #10
 80098be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e005      	b.n	80098de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80098da:	2302      	movs	r3, #2
 80098dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d008      	beq.n	8009912 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2204      	movs	r2, #4
 8009904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e022      	b.n	8009958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 020e 	bic.w	r2, r2, #14
 8009920:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0201 	bic.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	f003 021c 	and.w	r2, r3, #28
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	2101      	movs	r1, #1
 8009940:	fa01 f202 	lsl.w	r2, r1, r2
 8009944:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d005      	beq.n	8009988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2204      	movs	r2, #4
 8009980:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	73fb      	strb	r3, [r7, #15]
 8009986:	e029      	b.n	80099dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 020e 	bic.w	r2, r2, #14
 8009996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0201 	bic.w	r2, r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ac:	f003 021c 	and.w	r2, r3, #28
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b4:	2101      	movs	r1, #1
 80099b6:	fa01 f202 	lsl.w	r2, r1, r2
 80099ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
    }
  }
  return status;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	f003 031c 	and.w	r3, r3, #28
 8009a06:	2204      	movs	r2, #4
 8009a08:	409a      	lsls	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d026      	beq.n	8009a60 <HAL_DMA_IRQHandler+0x7a>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d021      	beq.n	8009a60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d107      	bne.n	8009a3a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0204 	bic.w	r2, r2, #4
 8009a38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3e:	f003 021c 	and.w	r2, r3, #28
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	2104      	movs	r1, #4
 8009a48:	fa01 f202 	lsl.w	r2, r1, r2
 8009a4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d071      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009a5e:	e06c      	b.n	8009b3a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a64:	f003 031c 	and.w	r3, r3, #28
 8009a68:	2202      	movs	r2, #2
 8009a6a:	409a      	lsls	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d02e      	beq.n	8009ad2 <HAL_DMA_IRQHandler+0xec>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d029      	beq.n	8009ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10b      	bne.n	8009aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 020a 	bic.w	r2, r2, #10
 8009a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa8:	f003 021c 	and.w	r2, r3, #28
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d038      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009ad0:	e033      	b.n	8009b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad6:	f003 031c 	and.w	r3, r3, #28
 8009ada:	2208      	movs	r2, #8
 8009adc:	409a      	lsls	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d02a      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x156>
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f003 0308 	and.w	r3, r3, #8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d025      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 020e 	bic.w	r2, r2, #14
 8009afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b04:	f003 021c 	and.w	r2, r3, #28
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8009b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009b3a:	bf00      	nop
 8009b3c:	bf00      	nop
}
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b52:	b2db      	uxtb	r3, r3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	f003 021c 	and.w	r2, r3, #28
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8009b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d108      	bne.n	8009ba4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009ba2:	e007      	b.n	8009bb4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	60da      	str	r2, [r3, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009bce:	e148      	b.n	8009e62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 813a 	beq.w	8009e5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d00b      	beq.n	8009c08 <HAL_GPIO_Init+0x48>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d007      	beq.n	8009c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009bfc:	2b11      	cmp	r3, #17
 8009bfe:	d003      	beq.n	8009c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	2b12      	cmp	r3, #18
 8009c06:	d130      	bne.n	8009c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	2203      	movs	r2, #3
 8009c14:	fa02 f303 	lsl.w	r3, r2, r3
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c3e:	2201      	movs	r2, #1
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	fa02 f303 	lsl.w	r3, r2, r3
 8009c46:	43db      	mvns	r3, r3
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	091b      	lsrs	r3, r3, #4
 8009c54:	f003 0201 	and.w	r2, r3, #1
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	2203      	movs	r2, #3
 8009c76:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7a:	43db      	mvns	r3, r3
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d003      	beq.n	8009caa <HAL_GPIO_Init+0xea>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b12      	cmp	r3, #18
 8009ca8:	d123      	bne.n	8009cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	08da      	lsrs	r2, r3, #3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3208      	adds	r2, #8
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f003 0307 	and.w	r3, r3, #7
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	220f      	movs	r2, #15
 8009cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	08da      	lsrs	r2, r3, #3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3208      	adds	r2, #8
 8009cec:	6939      	ldr	r1, [r7, #16]
 8009cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009d02:	43db      	mvns	r3, r3
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4013      	ands	r3, r2
 8009d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f003 0203 	and.w	r2, r3, #3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 8094 	beq.w	8009e5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d34:	4b52      	ldr	r3, [pc, #328]	; (8009e80 <HAL_GPIO_Init+0x2c0>)
 8009d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d38:	4a51      	ldr	r2, [pc, #324]	; (8009e80 <HAL_GPIO_Init+0x2c0>)
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8009d40:	4b4f      	ldr	r3, [pc, #316]	; (8009e80 <HAL_GPIO_Init+0x2c0>)
 8009d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	60bb      	str	r3, [r7, #8]
 8009d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009d4c:	4a4d      	ldr	r2, [pc, #308]	; (8009e84 <HAL_GPIO_Init+0x2c4>)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	089b      	lsrs	r3, r3, #2
 8009d52:	3302      	adds	r3, #2
 8009d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	220f      	movs	r2, #15
 8009d64:	fa02 f303 	lsl.w	r3, r2, r3
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009d76:	d00d      	beq.n	8009d94 <HAL_GPIO_Init+0x1d4>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a43      	ldr	r2, [pc, #268]	; (8009e88 <HAL_GPIO_Init+0x2c8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d007      	beq.n	8009d90 <HAL_GPIO_Init+0x1d0>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a42      	ldr	r2, [pc, #264]	; (8009e8c <HAL_GPIO_Init+0x2cc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d101      	bne.n	8009d8c <HAL_GPIO_Init+0x1cc>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e004      	b.n	8009d96 <HAL_GPIO_Init+0x1d6>
 8009d8c:	2307      	movs	r3, #7
 8009d8e:	e002      	b.n	8009d96 <HAL_GPIO_Init+0x1d6>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <HAL_GPIO_Init+0x1d6>
 8009d94:	2300      	movs	r3, #0
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	f002 0203 	and.w	r2, r2, #3
 8009d9c:	0092      	lsls	r2, r2, #2
 8009d9e:	4093      	lsls	r3, r2
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009da6:	4937      	ldr	r1, [pc, #220]	; (8009e84 <HAL_GPIO_Init+0x2c4>)
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	089b      	lsrs	r3, r3, #2
 8009dac:	3302      	adds	r3, #2
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009db4:	4b36      	ldr	r3, [pc, #216]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009dd8:	4a2d      	ldr	r2, [pc, #180]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009dde:	4b2c      	ldr	r3, [pc, #176]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	43db      	mvns	r3, r3
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4013      	ands	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009e02:	4a23      	ldr	r2, [pc, #140]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e08:	4b21      	ldr	r3, [pc, #132]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	43db      	mvns	r3, r3
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4013      	ands	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009e2c:	4a18      	ldr	r2, [pc, #96]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009e32:	4b17      	ldr	r3, [pc, #92]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	43db      	mvns	r3, r3
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009e56:	4a0e      	ldr	r2, [pc, #56]	; (8009e90 <HAL_GPIO_Init+0x2d0>)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f47f aeaf 	bne.w	8009bd0 <HAL_GPIO_Init+0x10>
  }
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	40021000 	.word	0x40021000
 8009e84:	40010000 	.word	0x40010000
 8009e88:	48000400 	.word	0x48000400
 8009e8c:	48000800 	.word	0x48000800
 8009e90:	40010400 	.word	0x40010400

08009e94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009ea2:	e0ab      	b.n	8009ffc <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 809e 	beq.w	8009ff6 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009eba:	4a57      	ldr	r2, [pc, #348]	; (800a018 <HAL_GPIO_DeInit+0x184>)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ec6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	220f      	movs	r2, #15
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ee2:	d00d      	beq.n	8009f00 <HAL_GPIO_DeInit+0x6c>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a4d      	ldr	r2, [pc, #308]	; (800a01c <HAL_GPIO_DeInit+0x188>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d007      	beq.n	8009efc <HAL_GPIO_DeInit+0x68>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a4c      	ldr	r2, [pc, #304]	; (800a020 <HAL_GPIO_DeInit+0x18c>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d101      	bne.n	8009ef8 <HAL_GPIO_DeInit+0x64>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e004      	b.n	8009f02 <HAL_GPIO_DeInit+0x6e>
 8009ef8:	2307      	movs	r3, #7
 8009efa:	e002      	b.n	8009f02 <HAL_GPIO_DeInit+0x6e>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <HAL_GPIO_DeInit+0x6e>
 8009f00:	2300      	movs	r3, #0
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	f002 0203 	and.w	r2, r2, #3
 8009f08:	0092      	lsls	r2, r2, #2
 8009f0a:	4093      	lsls	r3, r2
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d132      	bne.n	8009f78 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009f12:	4b44      	ldr	r3, [pc, #272]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	43db      	mvns	r3, r3
 8009f1a:	4942      	ldr	r1, [pc, #264]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009f20:	4b40      	ldr	r3, [pc, #256]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	43db      	mvns	r3, r3
 8009f28:	493e      	ldr	r1, [pc, #248]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009f2e:	4b3d      	ldr	r3, [pc, #244]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	43db      	mvns	r3, r3
 8009f36:	493b      	ldr	r1, [pc, #236]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8009f3c:	4b39      	ldr	r3, [pc, #228]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	43db      	mvns	r3, r3
 8009f44:	4937      	ldr	r1, [pc, #220]	; (800a024 <HAL_GPIO_DeInit+0x190>)
 8009f46:	4013      	ands	r3, r2
 8009f48:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	220f      	movs	r2, #15
 8009f54:	fa02 f303 	lsl.w	r3, r2, r3
 8009f58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009f5a:	4a2f      	ldr	r2, [pc, #188]	; (800a018 <HAL_GPIO_DeInit+0x184>)
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	089b      	lsrs	r3, r3, #2
 8009f60:	3302      	adds	r3, #2
 8009f62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	43da      	mvns	r2, r3
 8009f6a:	482b      	ldr	r0, [pc, #172]	; (800a018 <HAL_GPIO_DeInit+0x184>)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	089b      	lsrs	r3, r3, #2
 8009f70:	400a      	ands	r2, r1
 8009f72:	3302      	adds	r3, #2
 8009f74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	2103      	movs	r1, #3
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	431a      	orrs	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	08da      	lsrs	r2, r3, #3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3208      	adds	r2, #8
 8009f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f003 0307 	and.w	r3, r3, #7
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	220f      	movs	r2, #15
 8009fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa6:	43db      	mvns	r3, r3
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	08d2      	lsrs	r2, r2, #3
 8009fac:	4019      	ands	r1, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3208      	adds	r2, #8
 8009fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	2103      	movs	r1, #3
 8009fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	401a      	ands	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	2103      	movs	r1, #3
 8009fea:	fa01 f303 	lsl.w	r3, r1, r3
 8009fee:	43db      	mvns	r3, r3
 8009ff0:	401a      	ands	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f af4d 	bne.w	8009ea4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	371c      	adds	r7, #28
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	40010000 	.word	0x40010000
 800a01c:	48000400 	.word	0x48000400
 800a020:	48000800 	.word	0x48000800
 800a024:	40010400 	.word	0x40010400

0800a028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	887b      	ldrh	r3, [r7, #2]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	e001      	b.n	800a04a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
 800a064:	4613      	mov	r3, r2
 800a066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a068:	787b      	ldrb	r3, [r7, #1]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a06e:	887a      	ldrh	r2, [r7, #2]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a074:	e002      	b.n	800a07c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a076:	887a      	ldrh	r2, [r7, #2]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e081      	b.n	800a19e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f7 fe82 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2224      	movs	r2, #36	; 0x24
 800a0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0201 	bic.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a0d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d107      	bne.n	800a102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	e006      	b.n	800a110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a10e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d104      	bne.n	800a122 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a120:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a134:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a144:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	ea42 0103 	orr.w	r1, r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	021a      	lsls	r2, r3, #8
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69d9      	ldr	r1, [r3, #28]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1a      	ldr	r2, [r3, #32]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0201 	orr.w	r2, r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2220      	movs	r2, #32
 800a18a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	817b      	strh	r3, [r7, #10]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	d153      	bne.n	800a270 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d6:	d101      	bne.n	800a1dc <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e04a      	b.n	800a272 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_Master_Transmit_IT+0x42>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e043      	b.n	800a272 <HAL_I2C_Master_Transmit_IT+0xca>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2221      	movs	r2, #33	; 0x21
 800a1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2210      	movs	r2, #16
 800a1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	893a      	ldrh	r2, [r7, #8]
 800a212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4a19      	ldr	r2, [pc, #100]	; (800a27c <HAL_I2C_Master_Transmit_IT+0xd4>)
 800a218:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4a18      	ldr	r2, [pc, #96]	; (800a280 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800a21e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a224:	b29b      	uxth	r3, r3
 800a226:	2bff      	cmp	r3, #255	; 0xff
 800a228:	d906      	bls.n	800a238 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	22ff      	movs	r2, #255	; 0xff
 800a22e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	e007      	b.n	800a248 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a246:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	8979      	ldrh	r1, [r7, #10]
 800a250:	4b0c      	ldr	r3, [pc, #48]	; (800a284 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f001 fbe4 	bl	800ba24 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a264:	2101      	movs	r1, #1
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f001 fc0a 	bl	800ba80 <I2C_Enable_IRQ>

    return HAL_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	e000      	b.n	800a272 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a270:	2302      	movs	r3, #2
  }
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	ffff0000 	.word	0xffff0000
 800a280:	0800a8a3 	.word	0x0800a8a3
 800a284:	80002000 	.word	0x80002000

0800a288 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	460b      	mov	r3, r1
 800a296:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	f040 80f1 	bne.w	800a48c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b8:	d101      	bne.n	800a2be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e0e7      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_I2C_IsDeviceReady+0x44>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e0e0      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2224      	movs	r2, #36	; 0x24
 800a2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d107      	bne.n	800a2fa <HAL_I2C_IsDeviceReady+0x72>
 800a2ea:	897b      	ldrh	r3, [r7, #10]
 800a2ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2f8:	e004      	b.n	800a304 <HAL_I2C_IsDeviceReady+0x7c>
 800a2fa:	897b      	ldrh	r3, [r7, #10]
 800a2fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a300:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a30a:	f7fd fc4f 	bl	8007bac <HAL_GetTick>
 800a30e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b20      	cmp	r3, #32
 800a31c:	bf0c      	ite	eq
 800a31e:	2301      	moveq	r3, #1
 800a320:	2300      	movne	r3, #0
 800a322:	b2db      	uxtb	r3, r3
 800a324:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b10      	cmp	r3, #16
 800a332:	bf0c      	ite	eq
 800a334:	2301      	moveq	r3, #1
 800a336:	2300      	movne	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a33c:	e034      	b.n	800a3a8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d01a      	beq.n	800a37c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a346:	f7fd fc31 	bl	8007bac <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d302      	bcc.n	800a35c <HAL_I2C_IsDeviceReady+0xd4>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10f      	bne.n	800a37c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a368:	f043 0220 	orr.w	r2, r3, #32
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e088      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b20      	cmp	r3, #32
 800a388:	bf0c      	ite	eq
 800a38a:	2301      	moveq	r3, #1
 800a38c:	2300      	movne	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	f003 0310 	and.w	r3, r3, #16
 800a39c:	2b10      	cmp	r3, #16
 800a39e:	bf0c      	ite	eq
 800a3a0:	2301      	moveq	r3, #1
 800a3a2:	2300      	movne	r3, #0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a3a8:	7ffb      	ldrb	r3, [r7, #31]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <HAL_I2C_IsDeviceReady+0x12c>
 800a3ae:	7fbb      	ldrb	r3, [r7, #30]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0c4      	beq.n	800a33e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b10      	cmp	r3, #16
 800a3c0:	d01a      	beq.n	800a3f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2120      	movs	r1, #32
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f001 fae8 	bl	800b9a2 <I2C_WaitOnFlagUntilTimeout>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e058      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e04a      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	2120      	movs	r1, #32
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f001 facd 	bl	800b9a2 <I2C_WaitOnFlagUntilTimeout>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e03d      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2210      	movs	r2, #16
 800a418:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2220      	movs	r2, #32
 800a420:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d118      	bne.n	800a45c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a438:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2200      	movs	r2, #0
 800a442:	2120      	movs	r1, #32
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f001 faac 	bl	800b9a2 <I2C_WaitOnFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e01c      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2220      	movs	r2, #32
 800a45a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	3301      	adds	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	f63f af3b 	bhi.w	800a2e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a478:	f043 0220 	orr.w	r2, r3, #32
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800a48c:	2302      	movs	r3, #2
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af02      	add	r7, sp, #8
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	817b      	strh	r3, [r7, #10]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800a4ac:	4b3a      	ldr	r3, [pc, #232]	; (800a598 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 800a4ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d167      	bne.n	800a58c <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e061      	b.n	800a58e <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2221      	movs	r2, #33	; 0x21
 800a4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2210      	movs	r2, #16
 800a4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	893a      	ldrh	r2, [r7, #8]
 800a4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a3a      	ldr	r2, [r7, #32]
 800a4f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4a27      	ldr	r2, [pc, #156]	; (800a59c <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 800a4fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a504:	b29b      	uxth	r3, r3
 800a506:	2bff      	cmp	r3, #255	; 0xff
 800a508:	d906      	bls.n	800a518 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	22ff      	movs	r2, #255	; 0xff
 800a50e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e007      	b.n	800a528 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a526:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	2b11      	cmp	r3, #17
 800a52e:	d10e      	bne.n	800a54e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	2baa      	cmp	r3, #170	; 0xaa
 800a534:	d003      	beq.n	800a53e <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a53c:	d101      	bne.n	800a542 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
 800a54c:	e00a      	b.n	800a564 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f001 fb58 	bl	800bc04 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2bff      	cmp	r3, #255	; 0xff
 800a55c:	d802      	bhi.n	800a564 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	8979      	ldrh	r1, [r7, #10]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f001 fa56 	bl	800ba24 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a580:	2101      	movs	r1, #1
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f001 fa7c 	bl	800ba80 <I2C_Enable_IRQ>

    return HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	e000      	b.n	800a58e <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a58c:	2302      	movs	r3, #2
  }
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	80002000 	.word	0x80002000
 800a59c:	0800a8a3 	.word	0x0800a8a3

0800a5a0 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	817b      	strh	r3, [r7, #10]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800a5b4:	4b3a      	ldr	r3, [pc, #232]	; (800a6a0 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d167      	bne.n	800a694 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e061      	b.n	800a696 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2222      	movs	r2, #34	; 0x22
 800a5de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2210      	movs	r2, #16
 800a5e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	893a      	ldrh	r2, [r7, #8]
 800a5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4a27      	ldr	r2, [pc, #156]	; (800a6a4 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800a606:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2bff      	cmp	r3, #255	; 0xff
 800a610:	d906      	bls.n	800a620 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	22ff      	movs	r2, #255	; 0xff
 800a616:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e007      	b.n	800a630 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a634:	2b12      	cmp	r3, #18
 800a636:	d10e      	bne.n	800a656 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	2baa      	cmp	r3, #170	; 0xaa
 800a63c:	d003      	beq.n	800a646 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a644:	d101      	bne.n	800a64a <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a650:	2300      	movs	r3, #0
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	e00a      	b.n	800a66c <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f001 fad4 	bl	800bc04 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a660:	b29b      	uxth	r3, r3
 800a662:	2bff      	cmp	r3, #255	; 0xff
 800a664:	d802      	bhi.n	800a66c <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a670:	b2da      	uxtb	r2, r3
 800a672:	8979      	ldrh	r1, [r7, #10]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f001 f9d2 	bl	800ba24 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a688:	2102      	movs	r1, #2
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 f9f8 	bl	800ba80 <I2C_Enable_IRQ>

    return HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	e000      	b.n	800a696 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a694:	2302      	movs	r3, #2
  }
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	80002400 	.word	0x80002400
 800a6a4:	0800a8a3 	.word	0x0800a8a3

0800a6a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	68f9      	ldr	r1, [r7, #12]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d010      	beq.n	800a722 <HAL_I2C_ER_IRQHandler+0x46>
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	09db      	lsrs	r3, r3, #7
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00a      	beq.n	800a722 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a710:	f043 0201 	orr.w	r2, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a720:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	0a9b      	lsrs	r3, r3, #10
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d010      	beq.n	800a750 <HAL_I2C_ER_IRQHandler+0x74>
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	09db      	lsrs	r3, r3, #7
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73e:	f043 0208 	orr.w	r2, r3, #8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a74e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <HAL_I2C_ER_IRQHandler+0xa2>
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	09db      	lsrs	r3, r3, #7
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00a      	beq.n	800a77e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76c:	f043 0202 	orr.w	r2, r3, #2
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a77c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 030b 	and.w	r3, r3, #11
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 ffcd 	bl	800b730 <I2C_ITError>
  }
}
 800a796:	bf00      	nop
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a7a6:	bf00      	nop
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a7ce:	bf00      	nop
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a812:	bf00      	nop
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a83a:	bf00      	nop
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a87c:	b2db      	uxtb	r3, r3
}
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af02      	add	r7, sp, #8
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <I2C_Master_ISR_IT+0x1e>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e114      	b.n	800aaea <I2C_Master_ISR_IT+0x248>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	091b      	lsrs	r3, r3, #4
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d013      	beq.n	800a8fc <I2C_Master_ISR_IT+0x5a>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	091b      	lsrs	r3, r3, #4
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00d      	beq.n	800a8fc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2210      	movs	r2, #16
 800a8e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ec:	f043 0204 	orr.w	r2, r3, #4
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f001 f812 	bl	800b91e <I2C_Flush_TXDR>
 800a8fa:	e0e1      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	089b      	lsrs	r3, r3, #2
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d023      	beq.n	800a950 <I2C_Master_ISR_IT+0xae>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	089b      	lsrs	r3, r3, #2
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01d      	beq.n	800a950 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f023 0304 	bic.w	r3, r3, #4
 800a91a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	b2d2      	uxtb	r2, r2
 800a928:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a938:	3b01      	subs	r3, #1
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a94e:	e0b7      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	085b      	lsrs	r3, r3, #1
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01e      	beq.n	800a99a <I2C_Master_ISR_IT+0xf8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	085b      	lsrs	r3, r3, #1
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d018      	beq.n	800a99a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a982:	3b01      	subs	r3, #1
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98e:	b29b      	uxth	r3, r3
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a998:	e092      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	09db      	lsrs	r3, r3, #7
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d05d      	beq.n	800aa62 <I2C_Master_ISR_IT+0x1c0>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	099b      	lsrs	r3, r3, #6
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d057      	beq.n	800aa62 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d040      	beq.n	800aa3e <I2C_Master_ISR_IT+0x19c>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d13c      	bne.n	800aa3e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9d0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2bff      	cmp	r3, #255	; 0xff
 800a9da:	d90e      	bls.n	800a9fa <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	22ff      	movs	r2, #255	; 0xff
 800a9e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	8a79      	ldrh	r1, [r7, #18]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f001 f816 	bl	800ba24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9f8:	e032      	b.n	800aa60 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa0c:	d00b      	beq.n	800aa26 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	8a79      	ldrh	r1, [r7, #18]
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	9000      	str	r0, [sp, #0]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f001 f800 	bl	800ba24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa24:	e01c      	b.n	800aa60 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	8a79      	ldrh	r1, [r7, #18]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 fff4 	bl	800ba24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa3c:	e010      	b.n	800aa60 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa4c:	d003      	beq.n	800aa56 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 fba9 	bl	800b1a6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa54:	e034      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aa56:	2140      	movs	r1, #64	; 0x40
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 fe69 	bl	800b730 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa5e:	e02f      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
 800aa60:	e02e      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	099b      	lsrs	r3, r3, #6
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d028      	beq.n	800aac0 <I2C_Master_ISR_IT+0x21e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	099b      	lsrs	r3, r3, #6
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d022      	beq.n	800aac0 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d119      	bne.n	800aab8 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa92:	d015      	beq.n	800aac0 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa9c:	d108      	bne.n	800aab0 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaac:	605a      	str	r2, [r3, #4]
 800aaae:	e007      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fb78 	bl	800b1a6 <I2C_ITMasterSeqCplt>
 800aab6:	e003      	b.n	800aac0 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aab8:	2140      	movs	r1, #64	; 0x40
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fe38 	bl	800b730 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	095b      	lsrs	r3, r3, #5
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d009      	beq.n	800aae0 <I2C_Master_ISR_IT+0x23e>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	095b      	lsrs	r3, r3, #5
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800aad8:	6979      	ldr	r1, [r7, #20]
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 fbfe 	bl	800b2dc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d101      	bne.n	800ab16 <I2C_Slave_ISR_IT+0x24>
 800ab12:	2302      	movs	r3, #2
 800ab14:	e0ec      	b.n	800acf0 <I2C_Slave_ISR_IT+0x1fe>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	095b      	lsrs	r3, r3, #5
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d009      	beq.n	800ab3e <I2C_Slave_ISR_IT+0x4c>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	095b      	lsrs	r3, r3, #5
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ab36:	6939      	ldr	r1, [r7, #16]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 fc99 	bl	800b470 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	091b      	lsrs	r3, r3, #4
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d04d      	beq.n	800abe6 <I2C_Slave_ISR_IT+0xf4>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	091b      	lsrs	r3, r3, #4
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d047      	beq.n	800abe6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d128      	bne.n	800abb2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b28      	cmp	r3, #40	; 0x28
 800ab6a:	d108      	bne.n	800ab7e <I2C_Slave_ISR_IT+0x8c>
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab72:	d104      	bne.n	800ab7e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ab74:	6939      	ldr	r1, [r7, #16]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 fd84 	bl	800b684 <I2C_ITListenCplt>
 800ab7c:	e032      	b.n	800abe4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b29      	cmp	r3, #41	; 0x29
 800ab88:	d10e      	bne.n	800aba8 <I2C_Slave_ISR_IT+0xb6>
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab90:	d00a      	beq.n	800aba8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2210      	movs	r2, #16
 800ab98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 febf 	bl	800b91e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fb3d 	bl	800b220 <I2C_ITSlaveSeqCplt>
 800aba6:	e01d      	b.n	800abe4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2210      	movs	r2, #16
 800abae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800abb0:	e096      	b.n	800ace0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2210      	movs	r2, #16
 800abb8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbe:	f043 0204 	orr.w	r2, r3, #4
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <I2C_Slave_ISR_IT+0xe4>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abd2:	f040 8085 	bne.w	800ace0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abda:	4619      	mov	r1, r3
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 fda7 	bl	800b730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800abe2:	e07d      	b.n	800ace0 <I2C_Slave_ISR_IT+0x1ee>
 800abe4:	e07c      	b.n	800ace0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	089b      	lsrs	r3, r3, #2
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d030      	beq.n	800ac54 <I2C_Slave_ISR_IT+0x162>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	089b      	lsrs	r3, r3, #2
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d02a      	beq.n	800ac54 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d018      	beq.n	800ac3a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	b2d2      	uxtb	r2, r2
 800ac14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d14f      	bne.n	800ace4 <I2C_Slave_ISR_IT+0x1f2>
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac4a:	d04b      	beq.n	800ace4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 fae7 	bl	800b220 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ac52:	e047      	b.n	800ace4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	08db      	lsrs	r3, r3, #3
 800ac64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ac6c:	6939      	ldr	r1, [r7, #16]
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 fa15 	bl	800b09e <I2C_ITAddrCplt>
 800ac74:	e037      	b.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	085b      	lsrs	r3, r3, #1
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d031      	beq.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	085b      	lsrs	r3, r3, #1
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d02b      	beq.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d018      	beq.n	800acca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acc0:	3b01      	subs	r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	851a      	strh	r2, [r3, #40]	; 0x28
 800acc8:	e00d      	b.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acd0:	d002      	beq.n	800acd8 <I2C_Slave_ISR_IT+0x1e6>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 faa1 	bl	800b220 <I2C_ITSlaveSeqCplt>
 800acde:	e002      	b.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800ace0:	bf00      	nop
 800ace2:	e000      	b.n	800ace6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800ace4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d101      	bne.n	800ad12 <I2C_Master_ISR_DMA+0x1a>
 800ad0e:	2302      	movs	r3, #2
 800ad10:	e0e1      	b.n	800aed6 <I2C_Master_ISR_DMA+0x1de>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	091b      	lsrs	r3, r3, #4
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d017      	beq.n	800ad56 <I2C_Master_ISR_DMA+0x5e>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	091b      	lsrs	r3, r3, #4
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d011      	beq.n	800ad56 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2210      	movs	r2, #16
 800ad38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3e:	f043 0204 	orr.w	r2, r3, #4
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ad46:	2120      	movs	r1, #32
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 fe99 	bl	800ba80 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 fde5 	bl	800b91e <I2C_Flush_TXDR>
 800ad54:	e0ba      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	09db      	lsrs	r3, r3, #7
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d072      	beq.n	800ae48 <I2C_Master_ISR_DMA+0x150>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	099b      	lsrs	r3, r3, #6
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d06c      	beq.n	800ae48 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d04e      	beq.n	800ae26 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad94:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	2bff      	cmp	r3, #255	; 0xff
 800ad9e:	d906      	bls.n	800adae <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	22ff      	movs	r2, #255	; 0xff
 800ada4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800ada6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e010      	b.n	800add0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800adc0:	d003      	beq.n	800adca <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	e002      	b.n	800add0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800adca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add4:	b2da      	uxtb	r2, r3
 800add6:	8a79      	ldrh	r1, [r7, #18]
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 fe20 	bl	800ba24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b22      	cmp	r3, #34	; 0x22
 800ae00:	d108      	bne.n	800ae14 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ae12:	e05b      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ae24:	e052      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae34:	d003      	beq.n	800ae3e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f9b5 	bl	800b1a6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800ae3c:	e046      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ae3e:	2140      	movs	r1, #64	; 0x40
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 fc75 	bl	800b730 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ae46:	e041      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	099b      	lsrs	r3, r3, #6
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d029      	beq.n	800aea8 <I2C_Master_ISR_DMA+0x1b0>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	099b      	lsrs	r3, r3, #6
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d023      	beq.n	800aea8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d119      	bne.n	800ae9e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae78:	d027      	beq.n	800aeca <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ae82:	d108      	bne.n	800ae96 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae92:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ae94:	e019      	b.n	800aeca <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f000 f985 	bl	800b1a6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ae9c:	e015      	b.n	800aeca <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ae9e:	2140      	movs	r1, #64	; 0x40
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 fc45 	bl	800b730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800aea6:	e010      	b.n	800aeca <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	095b      	lsrs	r3, r3, #5
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	095b      	lsrs	r3, r3, #5
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fa0a 	bl	800b2dc <I2C_ITMasterCplt>
 800aec8:	e000      	b.n	800aecc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800aeca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b088      	sub	sp, #32
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <I2C_Slave_ISR_DMA+0x24>
 800aefe:	2302      	movs	r3, #2
 800af00:	e0c9      	b.n	800b096 <I2C_Slave_ISR_DMA+0x1b8>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <I2C_Slave_ISR_DMA+0x4c>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 faa3 	bl	800b470 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	091b      	lsrs	r3, r3, #4
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 809a 	beq.w	800b06c <I2C_Slave_ISR_DMA+0x18e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	091b      	lsrs	r3, r3, #4
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 8093 	beq.w	800b06c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	0b9b      	lsrs	r3, r3, #14
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d105      	bne.n	800af5e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	0bdb      	lsrs	r3, r3, #15
 800af56:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d07f      	beq.n	800b05e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00d      	beq.n	800af82 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	0bdb      	lsrs	r3, r3, #15
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800af7e:	2301      	movs	r3, #1
 800af80:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00d      	beq.n	800afa6 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	0b9b      	lsrs	r3, r3, #14
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d007      	beq.n	800afa6 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800afa2:	2301      	movs	r3, #1
 800afa4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d128      	bne.n	800affe <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b28      	cmp	r3, #40	; 0x28
 800afb6:	d108      	bne.n	800afca <I2C_Slave_ISR_DMA+0xec>
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afbe:	d104      	bne.n	800afca <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fb5e 	bl	800b684 <I2C_ITListenCplt>
 800afc8:	e048      	b.n	800b05c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b29      	cmp	r3, #41	; 0x29
 800afd4:	d10e      	bne.n	800aff4 <I2C_Slave_ISR_DMA+0x116>
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800afdc:	d00a      	beq.n	800aff4 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2210      	movs	r2, #16
 800afe4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fc99 	bl	800b91e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f917 	bl	800b220 <I2C_ITSlaveSeqCplt>
 800aff2:	e033      	b.n	800b05c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2210      	movs	r2, #16
 800affa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800affc:	e034      	b.n	800b068 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2210      	movs	r2, #16
 800b004:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00a:	f043 0204 	orr.w	r2, r3, #4
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b018:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <I2C_Slave_ISR_DMA+0x14a>
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b026:	d11f      	bne.n	800b068 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b21      	cmp	r3, #33	; 0x21
 800b02c:	d002      	beq.n	800b034 <I2C_Slave_ISR_DMA+0x156>
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	2b29      	cmp	r3, #41	; 0x29
 800b032:	d103      	bne.n	800b03c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2221      	movs	r2, #33	; 0x21
 800b038:	631a      	str	r2, [r3, #48]	; 0x30
 800b03a:	e008      	b.n	800b04e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	2b22      	cmp	r3, #34	; 0x22
 800b040:	d002      	beq.n	800b048 <I2C_Slave_ISR_DMA+0x16a>
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	2b2a      	cmp	r3, #42	; 0x2a
 800b046:	d102      	bne.n	800b04e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2222      	movs	r2, #34	; 0x22
 800b04c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b052:	4619      	mov	r1, r3
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 fb6b 	bl	800b730 <I2C_ITError>
      if (treatdmanack == 1U)
 800b05a:	e005      	b.n	800b068 <I2C_Slave_ISR_DMA+0x18a>
 800b05c:	e004      	b.n	800b068 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2210      	movs	r2, #16
 800b064:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b066:	e011      	b.n	800b08c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800b068:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b06a:	e00f      	b.n	800b08c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	08db      	lsrs	r3, r3, #3
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d009      	beq.n	800b08c <I2C_Slave_ISR_DMA+0x1ae>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	08db      	lsrs	r3, r3, #3
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f809 	bl	800b09e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0b4:	2b28      	cmp	r3, #40	; 0x28
 800b0b6:	d16a      	bne.n	800b18e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	0c1b      	lsrs	r3, r3, #16
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	0c1b      	lsrs	r3, r3, #16
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b0d6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0e4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b0f2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d138      	bne.n	800b16e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b0fc:	897b      	ldrh	r3, [r7, #10]
 800b0fe:	09db      	lsrs	r3, r3, #7
 800b100:	b29a      	uxth	r2, r3
 800b102:	89bb      	ldrh	r3, [r7, #12]
 800b104:	4053      	eors	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	f003 0306 	and.w	r3, r3, #6
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11c      	bne.n	800b14a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b110:	897b      	ldrh	r3, [r7, #10]
 800b112:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b122:	2b02      	cmp	r3, #2
 800b124:	d13b      	bne.n	800b19e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2208      	movs	r2, #8
 800b132:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b13c:	89ba      	ldrh	r2, [r7, #12]
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff fb53 	bl	800a7ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b148:	e029      	b.n	800b19e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b14a:	893b      	ldrh	r3, [r7, #8]
 800b14c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b14e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fcf8 	bl	800bb48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b160:	89ba      	ldrh	r2, [r7, #12]
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fb41 	bl	800a7ee <HAL_I2C_AddrCallback>
}
 800b16c:	e017      	b.n	800b19e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b16e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fce8 	bl	800bb48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b180:	89ba      	ldrh	r2, [r7, #12]
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff fb31 	bl	800a7ee <HAL_I2C_AddrCallback>
}
 800b18c:	e007      	b.n	800b19e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2208      	movs	r2, #8
 800b194:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b21      	cmp	r3, #33	; 0x21
 800b1c0:	d115      	bne.n	800b1ee <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2211      	movs	r2, #17
 800b1ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fcb5 	bl	800bb48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff fad9 	bl	800a79e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b1ec:	e014      	b.n	800b218 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2212      	movs	r2, #18
 800b1fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b202:	2102      	movs	r1, #2
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fc9f 	bl	800bb48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff facd 	bl	800a7b2 <HAL_I2C_MasterRxCpltCallback>
}
 800b218:	bf00      	nop
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	0b9b      	lsrs	r3, r3, #14
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d008      	beq.n	800b256 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e00d      	b.n	800b272 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	0bdb      	lsrs	r3, r3, #15
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d007      	beq.n	800b272 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b270:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b29      	cmp	r3, #41	; 0x29
 800b27c:	d112      	bne.n	800b2a4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2228      	movs	r2, #40	; 0x28
 800b282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2221      	movs	r2, #33	; 0x21
 800b28a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b28c:	2101      	movs	r1, #1
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fc5a 	bl	800bb48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff fa92 	bl	800a7c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b2a2:	e017      	b.n	800b2d4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ae:	d111      	bne.n	800b2d4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2228      	movs	r2, #40	; 0x28
 800b2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2222      	movs	r2, #34	; 0x22
 800b2bc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b2be:	2102      	movs	r1, #2
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fc41 	bl	800bb48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fa83 	bl	800a7da <HAL_I2C_SlaveRxCpltCallback>
}
 800b2d4:	bf00      	nop
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b21      	cmp	r3, #33	; 0x21
 800b2fc:	d107      	bne.n	800b30e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b2fe:	2101      	movs	r1, #1
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fc21 	bl	800bb48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2211      	movs	r2, #17
 800b30a:	631a      	str	r2, [r3, #48]	; 0x30
 800b30c:	e00c      	b.n	800b328 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b22      	cmp	r3, #34	; 0x22
 800b318:	d106      	bne.n	800b328 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b31a:	2102      	movs	r1, #2
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc13 	bl	800bb48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2212      	movs	r2, #18
 800b326:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6859      	ldr	r1, [r3, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4b4d      	ldr	r3, [pc, #308]	; (800b468 <I2C_ITMasterCplt+0x18c>)
 800b334:	400b      	ands	r3, r1
 800b336:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a4a      	ldr	r2, [pc, #296]	; (800b46c <I2C_ITMasterCplt+0x190>)
 800b342:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	091b      	lsrs	r3, r3, #4
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d009      	beq.n	800b364 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2210      	movs	r2, #16
 800b356:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35c:	f043 0204 	orr.w	r2, r3, #4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b60      	cmp	r3, #96	; 0x60
 800b36e:	d10b      	bne.n	800b388 <I2C_ITMasterCplt+0xac>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	089b      	lsrs	r3, r3, #2
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	b2db      	uxtb	r3, r3
 800b384:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b386:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fac8 	bl	800b91e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b392:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b60      	cmp	r3, #96	; 0x60
 800b39e:	d002      	beq.n	800b3a6 <I2C_ITMasterCplt+0xca>
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d006      	beq.n	800b3b4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f9bf 	bl	800b730 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b3b2:	e054      	b.n	800b45e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b21      	cmp	r3, #33	; 0x21
 800b3be:	d124      	bne.n	800b40a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b40      	cmp	r3, #64	; 0x40
 800b3d8:	d10b      	bne.n	800b3f2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff fa17 	bl	800a81e <HAL_I2C_MemTxCpltCallback>
}
 800b3f0:	e035      	b.n	800b45e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff f9cb 	bl	800a79e <HAL_I2C_MasterTxCpltCallback>
}
 800b408:	e029      	b.n	800b45e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b22      	cmp	r3, #34	; 0x22
 800b414:	d123      	bne.n	800b45e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b40      	cmp	r3, #64	; 0x40
 800b42e:	d10b      	bne.n	800b448 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff f9f6 	bl	800a832 <HAL_I2C_MemRxCpltCallback>
}
 800b446:	e00a      	b.n	800b45e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff f9aa 	bl	800a7b2 <HAL_I2C_MasterRxCpltCallback>
}
 800b45e:	bf00      	nop
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	fe00e800 	.word	0xfe00e800
 800b46c:	ffff0000 	.word	0xffff0000

0800b470 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b48c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2220      	movs	r2, #32
 800b494:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	2b21      	cmp	r3, #33	; 0x21
 800b49a:	d002      	beq.n	800b4a2 <I2C_ITSlaveCplt+0x32>
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b29      	cmp	r3, #41	; 0x29
 800b4a0:	d108      	bne.n	800b4b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b4a2:	f248 0101 	movw	r1, #32769	; 0x8001
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fb4e 	bl	800bb48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2221      	movs	r2, #33	; 0x21
 800b4b0:	631a      	str	r2, [r3, #48]	; 0x30
 800b4b2:	e00d      	b.n	800b4d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	2b22      	cmp	r3, #34	; 0x22
 800b4b8:	d002      	beq.n	800b4c0 <I2C_ITSlaveCplt+0x50>
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4be:	d107      	bne.n	800b4d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b4c0:	f248 0102 	movw	r1, #32770	; 0x8002
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fb3f 	bl	800bb48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2222      	movs	r2, #34	; 0x22
 800b4ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6859      	ldr	r1, [r3, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	4b64      	ldr	r3, [pc, #400]	; (800b67c <I2C_ITSlaveCplt+0x20c>)
 800b4ec:	400b      	ands	r3, r1
 800b4ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa14 	bl	800b91e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	0b9b      	lsrs	r3, r3, #14
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d013      	beq.n	800b52a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b510:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	2b00      	cmp	r3, #0
 800b518:	d020      	beq.n	800b55c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b528:	e018      	b.n	800b55c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	0bdb      	lsrs	r3, r3, #15
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d012      	beq.n	800b55c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b544:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	089b      	lsrs	r3, r3, #2
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d020      	beq.n	800b5aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f023 0304 	bic.w	r3, r3, #4
 800b56e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b594:	3b01      	subs	r3, #1
 800b596:	b29a      	uxth	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d005      	beq.n	800b5c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b8:	f043 0204 	orr.w	r2, r3, #4
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d010      	beq.n	800b5f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f8a7 	bl	800b730 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b28      	cmp	r3, #40	; 0x28
 800b5ec:	d141      	bne.n	800b672 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b5ee:	6979      	ldr	r1, [r7, #20]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f847 	bl	800b684 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b5f6:	e03c      	b.n	800b672 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b600:	d014      	beq.n	800b62c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff fe0c 	bl	800b220 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a1d      	ldr	r2, [pc, #116]	; (800b680 <I2C_ITSlaveCplt+0x210>)
 800b60c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2220      	movs	r2, #32
 800b612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff f8f0 	bl	800a80a <HAL_I2C_ListenCpltCallback>
}
 800b62a:	e022      	b.n	800b672 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b22      	cmp	r3, #34	; 0x22
 800b636:	d10e      	bne.n	800b656 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2220      	movs	r2, #32
 800b63c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff f8c3 	bl	800a7da <HAL_I2C_SlaveRxCpltCallback>
}
 800b654:	e00d      	b.n	800b672 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff f8aa 	bl	800a7c6 <HAL_I2C_SlaveTxCpltCallback>
}
 800b672:	bf00      	nop
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	fe00e800 	.word	0xfe00e800
 800b680:	ffff0000 	.word	0xffff0000

0800b684 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a26      	ldr	r2, [pc, #152]	; (800b72c <I2C_ITListenCplt+0xa8>)
 800b692:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	089b      	lsrs	r3, r3, #2
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d022      	beq.n	800b702 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d012      	beq.n	800b702 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6fa:	f043 0204 	orr.w	r2, r3, #4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b702:	f248 0103 	movw	r1, #32771	; 0x8003
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa1e 	bl	800bb48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2210      	movs	r2, #16
 800b712:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff f874 	bl	800a80a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	ffff0000 	.word	0xffff0000

0800b730 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a5d      	ldr	r2, [pc, #372]	; (800b8c4 <I2C_ITError+0x194>)
 800b74e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	431a      	orrs	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b28      	cmp	r3, #40	; 0x28
 800b766:	d005      	beq.n	800b774 <I2C_ITError+0x44>
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	2b29      	cmp	r3, #41	; 0x29
 800b76c:	d002      	beq.n	800b774 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	2b2a      	cmp	r3, #42	; 0x2a
 800b772:	d10b      	bne.n	800b78c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b774:	2103      	movs	r1, #3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f9e6 	bl	800bb48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2228      	movs	r2, #40	; 0x28
 800b780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a50      	ldr	r2, [pc, #320]	; (800b8c8 <I2C_ITError+0x198>)
 800b788:	635a      	str	r2, [r3, #52]	; 0x34
 800b78a:	e011      	b.n	800b7b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b78c:	f248 0103 	movw	r1, #32771	; 0x8003
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f9d9 	bl	800bb48 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b60      	cmp	r3, #96	; 0x60
 800b7a0:	d003      	beq.n	800b7aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d039      	beq.n	800b832 <I2C_ITError+0x102>
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b11      	cmp	r3, #17
 800b7c2:	d002      	beq.n	800b7ca <I2C_ITError+0x9a>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2b21      	cmp	r3, #33	; 0x21
 800b7c8:	d133      	bne.n	800b832 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d8:	d107      	bne.n	800b7ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b7e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe f9a8 	bl	8009b44 <HAL_DMA_GetState>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d017      	beq.n	800b82a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	4a33      	ldr	r2, [pc, #204]	; (800b8cc <I2C_ITError+0x19c>)
 800b800:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe f8a8 	bl	8009964 <HAL_DMA_Abort_IT>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d04d      	beq.n	800b8b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b828:	e045      	b.n	800b8b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f850 	bl	800b8d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b830:	e041      	b.n	800b8b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d039      	beq.n	800b8ae <I2C_ITError+0x17e>
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b12      	cmp	r3, #18
 800b83e:	d002      	beq.n	800b846 <I2C_ITError+0x116>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b22      	cmp	r3, #34	; 0x22
 800b844:	d133      	bne.n	800b8ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b854:	d107      	bne.n	800b866 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b864:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe f96a 	bl	8009b44 <HAL_DMA_GetState>
 800b870:	4603      	mov	r3, r0
 800b872:	2b01      	cmp	r3, #1
 800b874:	d017      	beq.n	800b8a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	4a14      	ldr	r2, [pc, #80]	; (800b8cc <I2C_ITError+0x19c>)
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe f86a 	bl	8009964 <HAL_DMA_Abort_IT>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d011      	beq.n	800b8ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8a4:	e009      	b.n	800b8ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f812 	bl	800b8d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8ac:	e005      	b.n	800b8ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f80e 	bl	800b8d0 <I2C_TreatErrorCallback>
  }
}
 800b8b4:	e002      	b.n	800b8bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b8b6:	bf00      	nop
 800b8b8:	e000      	b.n	800b8bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8ba:	bf00      	nop
}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	ffff0000 	.word	0xffff0000
 800b8c8:	0800aaf3 	.word	0x0800aaf3
 800b8cc:	0800b967 	.word	0x0800b967

0800b8d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b60      	cmp	r3, #96	; 0x60
 800b8e2:	d10e      	bne.n	800b902 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fe ffad 	bl	800a85a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b900:	e009      	b.n	800b916 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7fe ff98 	bl	800a846 <HAL_I2C_ErrorCallback>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b02      	cmp	r3, #2
 800b932:	d103      	bne.n	800b93c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2200      	movs	r2, #0
 800b93a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b01      	cmp	r3, #1
 800b948:	d007      	beq.n	800b95a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	699a      	ldr	r2, [r3, #24]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f042 0201 	orr.w	r2, r2, #1
 800b958:	619a      	str	r2, [r3, #24]
  }
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b972:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b980:	2200      	movs	r2, #0
 800b982:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b990:	2200      	movs	r2, #0
 800b992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7ff ff9b 	bl	800b8d0 <I2C_TreatErrorCallback>
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	603b      	str	r3, [r7, #0]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9b2:	e022      	b.n	800b9fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d01e      	beq.n	800b9fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9bc:	f7fc f8f6 	bl	8007bac <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d302      	bcc.n	800b9d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d113      	bne.n	800b9fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d6:	f043 0220 	orr.w	r2, r3, #32
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e00f      	b.n	800ba1a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	699a      	ldr	r2, [r3, #24]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4013      	ands	r3, r2
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	bf0c      	ite	eq
 800ba0a:	2301      	moveq	r3, #1
 800ba0c:	2300      	movne	r3, #0
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d0cd      	beq.n	800b9b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	817b      	strh	r3, [r7, #10]
 800ba32:	4613      	mov	r3, r2
 800ba34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	0d5b      	lsrs	r3, r3, #21
 800ba40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ba44:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <I2C_TransferConfig+0x58>)
 800ba46:	430b      	orrs	r3, r1
 800ba48:	43db      	mvns	r3, r3
 800ba4a:	ea02 0103 	and.w	r1, r2, r3
 800ba4e:	897b      	ldrh	r3, [r7, #10]
 800ba50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba54:	7a7b      	ldrb	r3, [r7, #9]
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	431a      	orrs	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ba6e:	bf00      	nop
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	03ff63ff 	.word	0x03ff63ff

0800ba80 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	4a2a      	ldr	r2, [pc, #168]	; (800bb40 <I2C_Enable_IRQ+0xc0>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d004      	beq.n	800baa4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800ba9e:	4a29      	ldr	r2, [pc, #164]	; (800bb44 <I2C_Enable_IRQ+0xc4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d11d      	bne.n	800bae0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800baa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da03      	bge.n	800bab4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bab2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bab4:	887b      	ldrh	r3, [r7, #2]
 800bab6:	2b10      	cmp	r3, #16
 800bab8:	d103      	bne.n	800bac2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bac0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bac2:	887b      	ldrh	r3, [r7, #2]
 800bac4:	2b20      	cmp	r3, #32
 800bac6:	d103      	bne.n	800bad0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bace:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bad0:	887b      	ldrh	r3, [r7, #2]
 800bad2:	2b40      	cmp	r3, #64	; 0x40
 800bad4:	d125      	bne.n	800bb22 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800badc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bade:	e020      	b.n	800bb22 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da03      	bge.n	800baf0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800baee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800baf0:	887b      	ldrh	r3, [r7, #2]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800bb00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bb02:	887b      	ldrh	r3, [r7, #2]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800bb12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bb14:	887b      	ldrh	r3, [r7, #2]
 800bb16:	2b20      	cmp	r3, #32
 800bb18:	d103      	bne.n	800bb22 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f043 0320 	orr.w	r3, r3, #32
 800bb20:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6819      	ldr	r1, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	601a      	str	r2, [r3, #0]
}
 800bb32:	bf00      	nop
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	0800acf9 	.word	0x0800acf9
 800bb44:	0800aedf 	.word	0x0800aedf

0800bb48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bb54:	2300      	movs	r3, #0
 800bb56:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bb58:	887b      	ldrh	r3, [r7, #2]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00f      	beq.n	800bb82 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bb68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bb76:	2b28      	cmp	r3, #40	; 0x28
 800bb78:	d003      	beq.n	800bb82 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bb80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bb82:	887b      	ldrh	r3, [r7, #2]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00f      	beq.n	800bbac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bb92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bba0:	2b28      	cmp	r3, #40	; 0x28
 800bba2:	d003      	beq.n	800bbac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bbaa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bbac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	da03      	bge.n	800bbbc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bbba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bbbc:	887b      	ldrh	r3, [r7, #2]
 800bbbe:	2b10      	cmp	r3, #16
 800bbc0:	d103      	bne.n	800bbca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bbc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bbca:	887b      	ldrh	r3, [r7, #2]
 800bbcc:	2b20      	cmp	r3, #32
 800bbce:	d103      	bne.n	800bbd8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f043 0320 	orr.w	r3, r3, #32
 800bbd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bbd8:	887b      	ldrh	r3, [r7, #2]
 800bbda:	2b40      	cmp	r3, #64	; 0x40
 800bbdc:	d103      	bne.n	800bbe6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6819      	ldr	r1, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	43da      	mvns	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	400a      	ands	r2, r1
 800bbf6:	601a      	str	r2, [r3, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	2baa      	cmp	r3, #170	; 0xaa
 800bc12:	d103      	bne.n	800bc1c <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800bc1a:	e008      	b.n	800bc2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc20:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800bc24:	d103      	bne.n	800bc2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bc2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	d138      	bne.n	800bcc2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d101      	bne.n	800bc5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e032      	b.n	800bcc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2224      	movs	r2, #36	; 0x24
 800bc6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f022 0201 	bic.w	r2, r2, #1
 800bc7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6819      	ldr	r1, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f042 0201 	orr.w	r2, r2, #1
 800bcac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e000      	b.n	800bcc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bcc2:	2302      	movs	r3, #2
  }
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b20      	cmp	r3, #32
 800bce4:	d139      	bne.n	800bd5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d101      	bne.n	800bcf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e033      	b.n	800bd5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2224      	movs	r2, #36	; 0x24
 800bd00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 0201 	bic.w	r2, r2, #1
 800bd12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e000      	b.n	800bd5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd5a:	2302      	movs	r3, #2
  }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a04      	ldr	r2, [pc, #16]	; (800bd84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bd72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd76:	6013      	str	r3, [r2, #0]
}
 800bd78:	bf00      	nop
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	40007000 	.word	0x40007000

0800bd88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	40007000 	.word	0x40007000

0800bda4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb2:	d130      	bne.n	800be16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdb4:	4b23      	ldr	r3, [pc, #140]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdc0:	d038      	beq.n	800be34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bdc2:	4b20      	ldr	r3, [pc, #128]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bdca:	4a1e      	ldr	r2, [pc, #120]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2232      	movs	r2, #50	; 0x32
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	4a1b      	ldr	r2, [pc, #108]	; (800be4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bdde:	fba2 2303 	umull	r2, r3, r2, r3
 800bde2:	0c9b      	lsrs	r3, r3, #18
 800bde4:	3301      	adds	r3, #1
 800bde6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bde8:	e002      	b.n	800bdf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bdf0:	4b14      	ldr	r3, [pc, #80]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdfc:	d102      	bne.n	800be04 <HAL_PWREx_ControlVoltageScaling+0x60>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1f2      	bne.n	800bdea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be10:	d110      	bne.n	800be34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be12:	2303      	movs	r3, #3
 800be14:	e00f      	b.n	800be36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be22:	d007      	beq.n	800be34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be24:	4b07      	ldr	r3, [pc, #28]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be2c:	4a05      	ldr	r2, [pc, #20]	; (800be44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	40007000 	.word	0x40007000
 800be48:	20000008 	.word	0x20000008
 800be4c:	431bde83 	.word	0x431bde83

0800be50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	f000 bc11 	b.w	800c686 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be64:	4ba0      	ldr	r3, [pc, #640]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f003 030c 	and.w	r3, r3, #12
 800be6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be6e:	4b9e      	ldr	r3, [pc, #632]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0310 	and.w	r3, r3, #16
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 80e4 	beq.w	800c04e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d007      	beq.n	800be9c <HAL_RCC_OscConfig+0x4c>
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	2b0c      	cmp	r3, #12
 800be90:	f040 808b 	bne.w	800bfaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b01      	cmp	r3, #1
 800be98:	f040 8087 	bne.w	800bfaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800be9c:	4b92      	ldr	r3, [pc, #584]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <HAL_RCC_OscConfig+0x64>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e3e8      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1a      	ldr	r2, [r3, #32]
 800beb8:	4b8b      	ldr	r3, [pc, #556]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0308 	and.w	r3, r3, #8
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <HAL_RCC_OscConfig+0x7e>
 800bec4:	4b88      	ldr	r3, [pc, #544]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800becc:	e005      	b.n	800beda <HAL_RCC_OscConfig+0x8a>
 800bece:	4b86      	ldr	r3, [pc, #536]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bed4:	091b      	lsrs	r3, r3, #4
 800bed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800beda:	4293      	cmp	r3, r2
 800bedc:	d223      	bcs.n	800bf26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fdac 	bl	800ca40 <RCC_SetFlashLatencyFromMSIRange>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e3c9      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bef2:	4b7d      	ldr	r3, [pc, #500]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a7c      	ldr	r2, [pc, #496]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bef8:	f043 0308 	orr.w	r3, r3, #8
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	4b7a      	ldr	r3, [pc, #488]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	4977      	ldr	r1, [pc, #476]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf10:	4b75      	ldr	r3, [pc, #468]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	4972      	ldr	r1, [pc, #456]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	604b      	str	r3, [r1, #4]
 800bf24:	e025      	b.n	800bf72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf26:	4b70      	ldr	r3, [pc, #448]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a6f      	ldr	r2, [pc, #444]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf2c:	f043 0308 	orr.w	r3, r3, #8
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	4b6d      	ldr	r3, [pc, #436]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	496a      	ldr	r1, [pc, #424]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf40:	4313      	orrs	r3, r2
 800bf42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf44:	4b68      	ldr	r3, [pc, #416]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	021b      	lsls	r3, r3, #8
 800bf52:	4965      	ldr	r1, [pc, #404]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d109      	bne.n	800bf72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fd6c 	bl	800ca40 <RCC_SetFlashLatencyFromMSIRange>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e389      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bf72:	f000 fc6f 	bl	800c854 <HAL_RCC_GetSysClockFreq>
 800bf76:	4602      	mov	r2, r0
 800bf78:	4b5b      	ldr	r3, [pc, #364]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	091b      	lsrs	r3, r3, #4
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	495a      	ldr	r1, [pc, #360]	; (800c0ec <HAL_RCC_OscConfig+0x29c>)
 800bf84:	5ccb      	ldrb	r3, [r1, r3]
 800bf86:	f003 031f 	and.w	r3, r3, #31
 800bf8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8e:	4a58      	ldr	r2, [pc, #352]	; (800c0f0 <HAL_RCC_OscConfig+0x2a0>)
 800bf90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bf92:	4b58      	ldr	r3, [pc, #352]	; (800c0f4 <HAL_RCC_OscConfig+0x2a4>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f9 fc60 	bl	800585c <HAL_InitTick>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d052      	beq.n	800c04c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	e36d      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d032      	beq.n	800c018 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bfb2:	4b4d      	ldr	r3, [pc, #308]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a4c      	ldr	r2, [pc, #304]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bfbe:	f7fb fdf5 	bl	8007bac <HAL_GetTick>
 800bfc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bfc4:	e008      	b.n	800bfd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bfc6:	f7fb fdf1 	bl	8007bac <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d901      	bls.n	800bfd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e356      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bfd8:	4b43      	ldr	r3, [pc, #268]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 0302 	and.w	r3, r3, #2
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0f0      	beq.n	800bfc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfe4:	4b40      	ldr	r3, [pc, #256]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a3f      	ldr	r2, [pc, #252]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bfea:	f043 0308 	orr.w	r3, r3, #8
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	4b3d      	ldr	r3, [pc, #244]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	493a      	ldr	r1, [pc, #232]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c002:	4b39      	ldr	r3, [pc, #228]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69db      	ldr	r3, [r3, #28]
 800c00e:	021b      	lsls	r3, r3, #8
 800c010:	4935      	ldr	r1, [pc, #212]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c012:	4313      	orrs	r3, r2
 800c014:	604b      	str	r3, [r1, #4]
 800c016:	e01a      	b.n	800c04e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c018:	4b33      	ldr	r3, [pc, #204]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a32      	ldr	r2, [pc, #200]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c01e:	f023 0301 	bic.w	r3, r3, #1
 800c022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c024:	f7fb fdc2 	bl	8007bac <HAL_GetTick>
 800c028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c02a:	e008      	b.n	800c03e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c02c:	f7fb fdbe 	bl	8007bac <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b02      	cmp	r3, #2
 800c038:	d901      	bls.n	800c03e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e323      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c03e:	4b2a      	ldr	r3, [pc, #168]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1f0      	bne.n	800c02c <HAL_RCC_OscConfig+0x1dc>
 800c04a:	e000      	b.n	800c04e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c04c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d073      	beq.n	800c142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	2b08      	cmp	r3, #8
 800c05e:	d005      	beq.n	800c06c <HAL_RCC_OscConfig+0x21c>
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2b0c      	cmp	r3, #12
 800c064:	d10e      	bne.n	800c084 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d10b      	bne.n	800c084 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c06c:	4b1e      	ldr	r3, [pc, #120]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d063      	beq.n	800c140 <HAL_RCC_OscConfig+0x2f0>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d15f      	bne.n	800c140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e300      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c08c:	d106      	bne.n	800c09c <HAL_RCC_OscConfig+0x24c>
 800c08e:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a15      	ldr	r2, [pc, #84]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c098:	6013      	str	r3, [r2, #0]
 800c09a:	e01d      	b.n	800c0d8 <HAL_RCC_OscConfig+0x288>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0a4:	d10c      	bne.n	800c0c0 <HAL_RCC_OscConfig+0x270>
 800c0a6:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a0f      	ldr	r2, [pc, #60]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a0c      	ldr	r2, [pc, #48]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	e00b      	b.n	800c0d8 <HAL_RCC_OscConfig+0x288>
 800c0c0:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a05      	ldr	r2, [pc, #20]	; (800c0e8 <HAL_RCC_OscConfig+0x298>)
 800c0d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01b      	beq.n	800c118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e0:	f7fb fd64 	bl	8007bac <HAL_GetTick>
 800c0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c0e6:	e010      	b.n	800c10a <HAL_RCC_OscConfig+0x2ba>
 800c0e8:	40021000 	.word	0x40021000
 800c0ec:	08014418 	.word	0x08014418
 800c0f0:	20000008 	.word	0x20000008
 800c0f4:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c0f8:	f7fb fd58 	bl	8007bac <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b64      	cmp	r3, #100	; 0x64
 800c104:	d901      	bls.n	800c10a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e2bd      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c10a:	4baf      	ldr	r3, [pc, #700]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d0f0      	beq.n	800c0f8 <HAL_RCC_OscConfig+0x2a8>
 800c116:	e014      	b.n	800c142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c118:	f7fb fd48 	bl	8007bac <HAL_GetTick>
 800c11c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c11e:	e008      	b.n	800c132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c120:	f7fb fd44 	bl	8007bac <HAL_GetTick>
 800c124:	4602      	mov	r2, r0
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	2b64      	cmp	r3, #100	; 0x64
 800c12c:	d901      	bls.n	800c132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e2a9      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c132:	4ba5      	ldr	r3, [pc, #660]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f0      	bne.n	800c120 <HAL_RCC_OscConfig+0x2d0>
 800c13e:	e000      	b.n	800c142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 0302 	and.w	r3, r3, #2
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d060      	beq.n	800c210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2b04      	cmp	r3, #4
 800c152:	d005      	beq.n	800c160 <HAL_RCC_OscConfig+0x310>
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b0c      	cmp	r3, #12
 800c158:	d119      	bne.n	800c18e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	d116      	bne.n	800c18e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c160:	4b99      	ldr	r3, [pc, #612]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <HAL_RCC_OscConfig+0x328>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e286      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c178:	4b93      	ldr	r3, [pc, #588]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	061b      	lsls	r3, r3, #24
 800c186:	4990      	ldr	r1, [pc, #576]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c188:	4313      	orrs	r3, r2
 800c18a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c18c:	e040      	b.n	800c210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d023      	beq.n	800c1de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c196:	4b8c      	ldr	r3, [pc, #560]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a8b      	ldr	r2, [pc, #556]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c19c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1a2:	f7fb fd03 	bl	8007bac <HAL_GetTick>
 800c1a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1a8:	e008      	b.n	800c1bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1aa:	f7fb fcff 	bl	8007bac <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d901      	bls.n	800c1bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e264      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1bc:	4b82      	ldr	r3, [pc, #520]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0f0      	beq.n	800c1aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1c8:	4b7f      	ldr	r3, [pc, #508]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	061b      	lsls	r3, r3, #24
 800c1d6:	497c      	ldr	r1, [pc, #496]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	604b      	str	r3, [r1, #4]
 800c1dc:	e018      	b.n	800c210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c1de:	4b7a      	ldr	r3, [pc, #488]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a79      	ldr	r2, [pc, #484]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ea:	f7fb fcdf 	bl	8007bac <HAL_GetTick>
 800c1ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c1f0:	e008      	b.n	800c204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1f2:	f7fb fcdb 	bl	8007bac <HAL_GetTick>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d901      	bls.n	800c204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c200:	2303      	movs	r3, #3
 800c202:	e240      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c204:	4b70      	ldr	r3, [pc, #448]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f0      	bne.n	800c1f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0308 	and.w	r3, r3, #8
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d03c      	beq.n	800c296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01c      	beq.n	800c25e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c224:	4b68      	ldr	r3, [pc, #416]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c22a:	4a67      	ldr	r2, [pc, #412]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c22c:	f043 0301 	orr.w	r3, r3, #1
 800c230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c234:	f7fb fcba 	bl	8007bac <HAL_GetTick>
 800c238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c23a:	e008      	b.n	800c24e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c23c:	f7fb fcb6 	bl	8007bac <HAL_GetTick>
 800c240:	4602      	mov	r2, r0
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	2b02      	cmp	r3, #2
 800c248:	d901      	bls.n	800c24e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e21b      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c24e:	4b5e      	ldr	r3, [pc, #376]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c254:	f003 0302 	and.w	r3, r3, #2
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0ef      	beq.n	800c23c <HAL_RCC_OscConfig+0x3ec>
 800c25c:	e01b      	b.n	800c296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c25e:	4b5a      	ldr	r3, [pc, #360]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c264:	4a58      	ldr	r2, [pc, #352]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c266:	f023 0301 	bic.w	r3, r3, #1
 800c26a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c26e:	f7fb fc9d 	bl	8007bac <HAL_GetTick>
 800c272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c274:	e008      	b.n	800c288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c276:	f7fb fc99 	bl	8007bac <HAL_GetTick>
 800c27a:	4602      	mov	r2, r0
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	2b02      	cmp	r3, #2
 800c282:	d901      	bls.n	800c288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e1fe      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c288:	4b4f      	ldr	r3, [pc, #316]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c28a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1ef      	bne.n	800c276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0304 	and.w	r3, r3, #4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 80a6 	beq.w	800c3f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c2a8:	4b47      	ldr	r3, [pc, #284]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10d      	bne.n	800c2d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2b4:	4b44      	ldr	r3, [pc, #272]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b8:	4a43      	ldr	r2, [pc, #268]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c2ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2be:	6593      	str	r3, [r2, #88]	; 0x58
 800c2c0:	4b41      	ldr	r3, [pc, #260]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2d0:	4b3e      	ldr	r3, [pc, #248]	; (800c3cc <HAL_RCC_OscConfig+0x57c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d118      	bne.n	800c30e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2dc:	4b3b      	ldr	r3, [pc, #236]	; (800c3cc <HAL_RCC_OscConfig+0x57c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a3a      	ldr	r2, [pc, #232]	; (800c3cc <HAL_RCC_OscConfig+0x57c>)
 800c2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c2e8:	f7fb fc60 	bl	8007bac <HAL_GetTick>
 800c2ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2ee:	e008      	b.n	800c302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2f0:	f7fb fc5c 	bl	8007bac <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e1c1      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c302:	4b32      	ldr	r3, [pc, #200]	; (800c3cc <HAL_RCC_OscConfig+0x57c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f0      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d108      	bne.n	800c328 <HAL_RCC_OscConfig+0x4d8>
 800c316:	4b2c      	ldr	r3, [pc, #176]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c31c:	4a2a      	ldr	r2, [pc, #168]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c31e:	f043 0301 	orr.w	r3, r3, #1
 800c322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c326:	e024      	b.n	800c372 <HAL_RCC_OscConfig+0x522>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b05      	cmp	r3, #5
 800c32e:	d110      	bne.n	800c352 <HAL_RCC_OscConfig+0x502>
 800c330:	4b25      	ldr	r3, [pc, #148]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c336:	4a24      	ldr	r2, [pc, #144]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c338:	f043 0304 	orr.w	r3, r3, #4
 800c33c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c340:	4b21      	ldr	r3, [pc, #132]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c346:	4a20      	ldr	r2, [pc, #128]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c348:	f043 0301 	orr.w	r3, r3, #1
 800c34c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c350:	e00f      	b.n	800c372 <HAL_RCC_OscConfig+0x522>
 800c352:	4b1d      	ldr	r3, [pc, #116]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c358:	4a1b      	ldr	r2, [pc, #108]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c35a:	f023 0301 	bic.w	r3, r3, #1
 800c35e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c362:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c368:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c36a:	f023 0304 	bic.w	r3, r3, #4
 800c36e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d016      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c37a:	f7fb fc17 	bl	8007bac <HAL_GetTick>
 800c37e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c380:	e00a      	b.n	800c398 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c382:	f7fb fc13 	bl	8007bac <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c390:	4293      	cmp	r3, r2
 800c392:	d901      	bls.n	800c398 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e176      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c398:	4b0b      	ldr	r3, [pc, #44]	; (800c3c8 <HAL_RCC_OscConfig+0x578>)
 800c39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0ed      	beq.n	800c382 <HAL_RCC_OscConfig+0x532>
 800c3a6:	e01a      	b.n	800c3de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3a8:	f7fb fc00 	bl	8007bac <HAL_GetTick>
 800c3ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c3ae:	e00f      	b.n	800c3d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3b0:	f7fb fbfc 	bl	8007bac <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d906      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e15f      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
 800c3c6:	bf00      	nop
 800c3c8:	40021000 	.word	0x40021000
 800c3cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c3d0:	4baa      	ldr	r3, [pc, #680]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1e8      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3de:	7ffb      	ldrb	r3, [r7, #31]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d105      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3e4:	4ba5      	ldr	r3, [pc, #660]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e8:	4aa4      	ldr	r2, [pc, #656]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c3ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0320 	and.w	r3, r3, #32
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d03c      	beq.n	800c476 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01c      	beq.n	800c43e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c404:	4b9d      	ldr	r3, [pc, #628]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c40a:	4a9c      	ldr	r2, [pc, #624]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c40c:	f043 0301 	orr.w	r3, r3, #1
 800c410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c414:	f7fb fbca 	bl	8007bac <HAL_GetTick>
 800c418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c41a:	e008      	b.n	800c42e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c41c:	f7fb fbc6 	bl	8007bac <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d901      	bls.n	800c42e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e12b      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c42e:	4b93      	ldr	r3, [pc, #588]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d0ef      	beq.n	800c41c <HAL_RCC_OscConfig+0x5cc>
 800c43c:	e01b      	b.n	800c476 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c43e:	4b8f      	ldr	r3, [pc, #572]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c444:	4a8d      	ldr	r2, [pc, #564]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c446:	f023 0301 	bic.w	r3, r3, #1
 800c44a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c44e:	f7fb fbad 	bl	8007bac <HAL_GetTick>
 800c452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c454:	e008      	b.n	800c468 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c456:	f7fb fba9 	bl	8007bac <HAL_GetTick>
 800c45a:	4602      	mov	r2, r0
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	2b02      	cmp	r3, #2
 800c462:	d901      	bls.n	800c468 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c464:	2303      	movs	r3, #3
 800c466:	e10e      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c468:	4b84      	ldr	r3, [pc, #528]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c46e:	f003 0302 	and.w	r3, r3, #2
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1ef      	bne.n	800c456 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 8102 	beq.w	800c684 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c484:	2b02      	cmp	r3, #2
 800c486:	f040 80c5 	bne.w	800c614 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c48a:	4b7c      	ldr	r3, [pc, #496]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f003 0203 	and.w	r2, r3, #3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d12c      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d123      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d11b      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d113      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4da:	085b      	lsrs	r3, r3, #1
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d109      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d067      	beq.n	800c5c8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	2b0c      	cmp	r3, #12
 800c4fc:	d062      	beq.n	800c5c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c4fe:	4b5f      	ldr	r3, [pc, #380]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e0bb      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c50e:	4b5b      	ldr	r3, [pc, #364]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a5a      	ldr	r2, [pc, #360]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c518:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c51a:	f7fb fb47 	bl	8007bac <HAL_GetTick>
 800c51e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c520:	e008      	b.n	800c534 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c522:	f7fb fb43 	bl	8007bac <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d901      	bls.n	800c534 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e0a8      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c534:	4b51      	ldr	r3, [pc, #324]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1f0      	bne.n	800c522 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c540:	4b4e      	ldr	r3, [pc, #312]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c542:	68da      	ldr	r2, [r3, #12]
 800c544:	4b4e      	ldr	r3, [pc, #312]	; (800c680 <HAL_RCC_OscConfig+0x830>)
 800c546:	4013      	ands	r3, r2
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c550:	3a01      	subs	r2, #1
 800c552:	0112      	lsls	r2, r2, #4
 800c554:	4311      	orrs	r1, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c55a:	0212      	lsls	r2, r2, #8
 800c55c:	4311      	orrs	r1, r2
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c562:	0852      	lsrs	r2, r2, #1
 800c564:	3a01      	subs	r2, #1
 800c566:	0552      	lsls	r2, r2, #21
 800c568:	4311      	orrs	r1, r2
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c56e:	0852      	lsrs	r2, r2, #1
 800c570:	3a01      	subs	r2, #1
 800c572:	0652      	lsls	r2, r2, #25
 800c574:	4311      	orrs	r1, r2
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c57a:	06d2      	lsls	r2, r2, #27
 800c57c:	430a      	orrs	r2, r1
 800c57e:	493f      	ldr	r1, [pc, #252]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c580:	4313      	orrs	r3, r2
 800c582:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c584:	4b3d      	ldr	r3, [pc, #244]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a3c      	ldr	r2, [pc, #240]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c58e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c590:	4b3a      	ldr	r3, [pc, #232]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	4a39      	ldr	r2, [pc, #228]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c59a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c59c:	f7fb fb06 	bl	8007bac <HAL_GetTick>
 800c5a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5a4:	f7fb fb02 	bl	8007bac <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e067      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5b6:	4b31      	ldr	r3, [pc, #196]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f0      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c5c2:	e05f      	b.n	800c684 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e05e      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5c8:	4b2c      	ldr	r3, [pc, #176]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d157      	bne.n	800c684 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c5d4:	4b29      	ldr	r3, [pc, #164]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a28      	ldr	r2, [pc, #160]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c5e0:	4b26      	ldr	r3, [pc, #152]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	4a25      	ldr	r2, [pc, #148]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c5e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c5ec:	f7fb fade 	bl	8007bac <HAL_GetTick>
 800c5f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5f2:	e008      	b.n	800c606 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5f4:	f7fb fada 	bl	8007bac <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d901      	bls.n	800c606 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e03f      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c606:	4b1d      	ldr	r3, [pc, #116]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0f0      	beq.n	800c5f4 <HAL_RCC_OscConfig+0x7a4>
 800c612:	e037      	b.n	800c684 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b0c      	cmp	r3, #12
 800c618:	d02d      	beq.n	800c676 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c61a:	4b18      	ldr	r3, [pc, #96]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a17      	ldr	r2, [pc, #92]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c624:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d105      	bne.n	800c63e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c632:	4b12      	ldr	r3, [pc, #72]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	4a11      	ldr	r2, [pc, #68]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c638:	f023 0303 	bic.w	r3, r3, #3
 800c63c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	4a0e      	ldr	r2, [pc, #56]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c644:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c64c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c64e:	f7fb faad 	bl	8007bac <HAL_GetTick>
 800c652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c654:	e008      	b.n	800c668 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c656:	f7fb faa9 	bl	8007bac <HAL_GetTick>
 800c65a:	4602      	mov	r2, r0
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	2b02      	cmp	r3, #2
 800c662:	d901      	bls.n	800c668 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e00e      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <HAL_RCC_OscConfig+0x82c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1f0      	bne.n	800c656 <HAL_RCC_OscConfig+0x806>
 800c674:	e006      	b.n	800c684 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e005      	b.n	800c686 <HAL_RCC_OscConfig+0x836>
 800c67a:	bf00      	nop
 800c67c:	40021000 	.word	0x40021000
 800c680:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3720      	adds	r7, #32
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop

0800c690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e0c8      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6a4:	4b66      	ldr	r3, [pc, #408]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0307 	and.w	r3, r3, #7
 800c6ac:	683a      	ldr	r2, [r7, #0]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d910      	bls.n	800c6d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6b2:	4b63      	ldr	r3, [pc, #396]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f023 0207 	bic.w	r2, r3, #7
 800c6ba:	4961      	ldr	r1, [pc, #388]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6c2:	4b5f      	ldr	r3, [pc, #380]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d001      	beq.n	800c6d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e0b0      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d04c      	beq.n	800c77a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d107      	bne.n	800c6f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6e8:	4b56      	ldr	r3, [pc, #344]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d121      	bne.n	800c738 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e09e      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d107      	bne.n	800c710 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c700:	4b50      	ldr	r3, [pc, #320]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d115      	bne.n	800c738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e092      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d107      	bne.n	800c728 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c718:	4b4a      	ldr	r3, [pc, #296]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 0302 	and.w	r3, r3, #2
 800c720:	2b00      	cmp	r3, #0
 800c722:	d109      	bne.n	800c738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e086      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c728:	4b46      	ldr	r3, [pc, #280]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e07e      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c738:	4b42      	ldr	r3, [pc, #264]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f023 0203 	bic.w	r2, r3, #3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	493f      	ldr	r1, [pc, #252]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c746:	4313      	orrs	r3, r2
 800c748:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c74a:	f7fb fa2f 	bl	8007bac <HAL_GetTick>
 800c74e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c750:	e00a      	b.n	800c768 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c752:	f7fb fa2b 	bl	8007bac <HAL_GetTick>
 800c756:	4602      	mov	r2, r0
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c760:	4293      	cmp	r3, r2
 800c762:	d901      	bls.n	800c768 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e066      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c768:	4b36      	ldr	r3, [pc, #216]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	f003 020c 	and.w	r2, r3, #12
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	429a      	cmp	r2, r3
 800c778:	d1eb      	bne.n	800c752 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c786:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	492c      	ldr	r1, [pc, #176]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c794:	4313      	orrs	r3, r2
 800c796:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c798:	4b29      	ldr	r3, [pc, #164]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0307 	and.w	r3, r3, #7
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d210      	bcs.n	800c7c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f023 0207 	bic.w	r2, r3, #7
 800c7ae:	4924      	ldr	r1, [pc, #144]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7b6:	4b22      	ldr	r3, [pc, #136]	; (800c840 <HAL_RCC_ClockConfig+0x1b0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d001      	beq.n	800c7c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e036      	b.n	800c836 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d008      	beq.n	800c7e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c7d4:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	4918      	ldr	r1, [pc, #96]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 0308 	and.w	r3, r3, #8
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d009      	beq.n	800c806 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c7f2:	4b14      	ldr	r3, [pc, #80]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	4910      	ldr	r1, [pc, #64]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c802:	4313      	orrs	r3, r2
 800c804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c806:	f000 f825 	bl	800c854 <HAL_RCC_GetSysClockFreq>
 800c80a:	4602      	mov	r2, r0
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <HAL_RCC_ClockConfig+0x1b4>)
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	091b      	lsrs	r3, r3, #4
 800c812:	f003 030f 	and.w	r3, r3, #15
 800c816:	490c      	ldr	r1, [pc, #48]	; (800c848 <HAL_RCC_ClockConfig+0x1b8>)
 800c818:	5ccb      	ldrb	r3, [r1, r3]
 800c81a:	f003 031f 	and.w	r3, r3, #31
 800c81e:	fa22 f303 	lsr.w	r3, r2, r3
 800c822:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <HAL_RCC_ClockConfig+0x1bc>)
 800c824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c826:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <HAL_RCC_ClockConfig+0x1c0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7f9 f816 	bl	800585c <HAL_InitTick>
 800c830:	4603      	mov	r3, r0
 800c832:	72fb      	strb	r3, [r7, #11]

  return status;
 800c834:	7afb      	ldrb	r3, [r7, #11]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	40022000 	.word	0x40022000
 800c844:	40021000 	.word	0x40021000
 800c848:	08014418 	.word	0x08014418
 800c84c:	20000008 	.word	0x20000008
 800c850:	20000010 	.word	0x20000010

0800c854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c854:	b480      	push	{r7}
 800c856:	b089      	sub	sp, #36	; 0x24
 800c858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c85a:	2300      	movs	r3, #0
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	2300      	movs	r3, #0
 800c860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c862:	4b3e      	ldr	r3, [pc, #248]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f003 030c 	and.w	r3, r3, #12
 800c86a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c86c:	4b3b      	ldr	r3, [pc, #236]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0303 	and.w	r3, r3, #3
 800c874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <HAL_RCC_GetSysClockFreq+0x34>
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b0c      	cmp	r3, #12
 800c880:	d121      	bne.n	800c8c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d11e      	bne.n	800c8c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c888:	4b34      	ldr	r3, [pc, #208]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0308 	and.w	r3, r3, #8
 800c890:	2b00      	cmp	r3, #0
 800c892:	d107      	bne.n	800c8a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c894:	4b31      	ldr	r3, [pc, #196]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	f003 030f 	and.w	r3, r3, #15
 800c8a0:	61fb      	str	r3, [r7, #28]
 800c8a2:	e005      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c8a4:	4b2d      	ldr	r3, [pc, #180]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	091b      	lsrs	r3, r3, #4
 800c8aa:	f003 030f 	and.w	r3, r3, #15
 800c8ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c8b0:	4a2b      	ldr	r2, [pc, #172]	; (800c960 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10d      	bne.n	800c8dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c8c4:	e00a      	b.n	800c8dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	2b04      	cmp	r3, #4
 800c8ca:	d102      	bne.n	800c8d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c8cc:	4b25      	ldr	r3, [pc, #148]	; (800c964 <HAL_RCC_GetSysClockFreq+0x110>)
 800c8ce:	61bb      	str	r3, [r7, #24]
 800c8d0:	e004      	b.n	800c8dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b08      	cmp	r3, #8
 800c8d6:	d101      	bne.n	800c8dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c8d8:	4b23      	ldr	r3, [pc, #140]	; (800c968 <HAL_RCC_GetSysClockFreq+0x114>)
 800c8da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	2b0c      	cmp	r3, #12
 800c8e0:	d134      	bne.n	800c94c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c8e2:	4b1e      	ldr	r3, [pc, #120]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d003      	beq.n	800c8fa <HAL_RCC_GetSysClockFreq+0xa6>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b03      	cmp	r3, #3
 800c8f6:	d003      	beq.n	800c900 <HAL_RCC_GetSysClockFreq+0xac>
 800c8f8:	e005      	b.n	800c906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c8fa:	4b1a      	ldr	r3, [pc, #104]	; (800c964 <HAL_RCC_GetSysClockFreq+0x110>)
 800c8fc:	617b      	str	r3, [r7, #20]
      break;
 800c8fe:	e005      	b.n	800c90c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c900:	4b19      	ldr	r3, [pc, #100]	; (800c968 <HAL_RCC_GetSysClockFreq+0x114>)
 800c902:	617b      	str	r3, [r7, #20]
      break;
 800c904:	e002      	b.n	800c90c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	617b      	str	r3, [r7, #20]
      break;
 800c90a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c90c:	4b13      	ldr	r3, [pc, #76]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	091b      	lsrs	r3, r3, #4
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	3301      	adds	r3, #1
 800c918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c91a:	4b10      	ldr	r3, [pc, #64]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	fb02 f203 	mul.w	r2, r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c932:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <HAL_RCC_GetSysClockFreq+0x108>)
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	0e5b      	lsrs	r3, r3, #25
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	3301      	adds	r3, #1
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c94c:	69bb      	ldr	r3, [r7, #24]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3724      	adds	r7, #36	; 0x24
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	40021000 	.word	0x40021000
 800c960:	08014430 	.word	0x08014430
 800c964:	00f42400 	.word	0x00f42400
 800c968:	00989680 	.word	0x00989680

0800c96c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c970:	4b03      	ldr	r3, [pc, #12]	; (800c980 <HAL_RCC_GetHCLKFreq+0x14>)
 800c972:	681b      	ldr	r3, [r3, #0]
}
 800c974:	4618      	mov	r0, r3
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	20000008 	.word	0x20000008

0800c984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c988:	f7ff fff0 	bl	800c96c <HAL_RCC_GetHCLKFreq>
 800c98c:	4602      	mov	r2, r0
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	f003 0307 	and.w	r3, r3, #7
 800c998:	4904      	ldr	r1, [pc, #16]	; (800c9ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800c99a:	5ccb      	ldrb	r3, [r1, r3]
 800c99c:	f003 031f 	and.w	r3, r3, #31
 800c9a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	40021000 	.word	0x40021000
 800c9ac:	08014428 	.word	0x08014428

0800c9b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c9b4:	f7ff ffda 	bl	800c96c <HAL_RCC_GetHCLKFreq>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	0adb      	lsrs	r3, r3, #11
 800c9c0:	f003 0307 	and.w	r3, r3, #7
 800c9c4:	4904      	ldr	r1, [pc, #16]	; (800c9d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c9c6:	5ccb      	ldrb	r3, [r1, r3]
 800c9c8:	f003 031f 	and.w	r3, r3, #31
 800c9cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	40021000 	.word	0x40021000
 800c9d8:	08014428 	.word	0x08014428

0800c9dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	220f      	movs	r2, #15
 800c9ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c9ec:	4b12      	ldr	r3, [pc, #72]	; (800ca38 <HAL_RCC_GetClockConfig+0x5c>)
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f003 0203 	and.w	r2, r3, #3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <HAL_RCC_GetClockConfig+0x5c>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca04:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <HAL_RCC_GetClockConfig+0x5c>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca10:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <HAL_RCC_GetClockConfig+0x5c>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	08db      	lsrs	r3, r3, #3
 800ca16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca1e:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <HAL_RCC_GetClockConfig+0x60>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0207 	and.w	r2, r3, #7
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	601a      	str	r2, [r3, #0]
}
 800ca2a:	bf00      	nop
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	40021000 	.word	0x40021000
 800ca3c:	40022000 	.word	0x40022000

0800ca40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ca48:	2300      	movs	r3, #0
 800ca4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ca4c:	4b2a      	ldr	r3, [pc, #168]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d003      	beq.n	800ca60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ca58:	f7ff f996 	bl	800bd88 <HAL_PWREx_GetVoltageRange>
 800ca5c:	6178      	str	r0, [r7, #20]
 800ca5e:	e014      	b.n	800ca8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca60:	4b25      	ldr	r3, [pc, #148]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca64:	4a24      	ldr	r2, [pc, #144]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca6a:	6593      	str	r3, [r2, #88]	; 0x58
 800ca6c:	4b22      	ldr	r3, [pc, #136]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ca78:	f7ff f986 	bl	800bd88 <HAL_PWREx_GetVoltageRange>
 800ca7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ca7e:	4b1e      	ldr	r3, [pc, #120]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca82:	4a1d      	ldr	r2, [pc, #116]	; (800caf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca90:	d10b      	bne.n	800caaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b80      	cmp	r3, #128	; 0x80
 800ca96:	d919      	bls.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2ba0      	cmp	r3, #160	; 0xa0
 800ca9c:	d902      	bls.n	800caa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ca9e:	2302      	movs	r3, #2
 800caa0:	613b      	str	r3, [r7, #16]
 800caa2:	e013      	b.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800caa4:	2301      	movs	r3, #1
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	e010      	b.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b80      	cmp	r3, #128	; 0x80
 800caae:	d902      	bls.n	800cab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cab0:	2303      	movs	r3, #3
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	e00a      	b.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b80      	cmp	r3, #128	; 0x80
 800caba:	d102      	bne.n	800cac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cabc:	2302      	movs	r3, #2
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	e004      	b.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b70      	cmp	r3, #112	; 0x70
 800cac6:	d101      	bne.n	800cacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cac8:	2301      	movs	r3, #1
 800caca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cacc:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f023 0207 	bic.w	r2, r3, #7
 800cad4:	4909      	ldr	r1, [pc, #36]	; (800cafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	4313      	orrs	r3, r2
 800cada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cadc:	4b07      	ldr	r3, [pc, #28]	; (800cafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d001      	beq.n	800caee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e000      	b.n	800caf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3718      	adds	r7, #24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	40021000 	.word	0x40021000
 800cafc:	40022000 	.word	0x40022000

0800cb00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb08:	2300      	movs	r3, #0
 800cb0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d031      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb24:	d01a      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800cb26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb2a:	d814      	bhi.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d009      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cb30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb34:	d10f      	bne.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800cb36:	4bac      	ldr	r3, [pc, #688]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	4aab      	ldr	r2, [pc, #684]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cb42:	e00c      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3304      	adds	r3, #4
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f9cc 	bl	800cee8 <RCCEx_PLLSAI1_Config>
 800cb50:	4603      	mov	r3, r0
 800cb52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cb54:	e003      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	74fb      	strb	r3, [r7, #19]
      break;
 800cb5a:	e000      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800cb5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb5e:	7cfb      	ldrb	r3, [r7, #19]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb64:	4ba0      	ldr	r3, [pc, #640]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	499d      	ldr	r1, [pc, #628]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb74:	4313      	orrs	r3, r2
 800cb76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cb7a:	e001      	b.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7c:	7cfb      	ldrb	r3, [r7, #19]
 800cb7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 8099 	beq.w	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cb92:	4b95      	ldr	r3, [pc, #596]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800cba2:	2300      	movs	r3, #0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00d      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cba8:	4b8f      	ldr	r3, [pc, #572]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cbaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbac:	4a8e      	ldr	r2, [pc, #568]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cbae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbb2:	6593      	str	r3, [r2, #88]	; 0x58
 800cbb4:	4b8c      	ldr	r3, [pc, #560]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbbc:	60bb      	str	r3, [r7, #8]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbc4:	4b89      	ldr	r3, [pc, #548]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a88      	ldr	r2, [pc, #544]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cbca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cbd0:	f7fa ffec 	bl	8007bac <HAL_GetTick>
 800cbd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cbd6:	e009      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbd8:	f7fa ffe8 	bl	8007bac <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d902      	bls.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	74fb      	strb	r3, [r7, #19]
        break;
 800cbea:	e005      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cbec:	4b7f      	ldr	r3, [pc, #508]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0ef      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800cbf8:	7cfb      	ldrb	r3, [r7, #19]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d155      	bne.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cbfe:	4b7a      	ldr	r3, [pc, #488]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01e      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d019      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cc1a:	4b73      	ldr	r3, [pc, #460]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cc26:	4b70      	ldr	r3, [pc, #448]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2c:	4a6e      	ldr	r2, [pc, #440]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cc36:	4b6c      	ldr	r3, [pc, #432]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc3c:	4a6a      	ldr	r2, [pc, #424]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cc46:	4a68      	ldr	r2, [pc, #416]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d016      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc58:	f7fa ffa8 	bl	8007bac <HAL_GetTick>
 800cc5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc5e:	e00b      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc60:	f7fa ffa4 	bl	8007bac <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d902      	bls.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	74fb      	strb	r3, [r7, #19]
            break;
 800cc76:	e006      	b.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc78:	4b5b      	ldr	r3, [pc, #364]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0ec      	beq.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800cc86:	7cfb      	ldrb	r3, [r7, #19]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10b      	bne.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc8c:	4b56      	ldr	r3, [pc, #344]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc9a:	4953      	ldr	r1, [pc, #332]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cca2:	e004      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cca4:	7cfb      	ldrb	r3, [r7, #19]
 800cca6:	74bb      	strb	r3, [r7, #18]
 800cca8:	e001      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccaa:	7cfb      	ldrb	r3, [r7, #19]
 800ccac:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ccae:	7c7b      	ldrb	r3, [r7, #17]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d105      	bne.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccb4:	4b4c      	ldr	r3, [pc, #304]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb8:	4a4b      	ldr	r2, [pc, #300]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00a      	beq.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cccc:	4b46      	ldr	r3, [pc, #280]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccd2:	f023 0203 	bic.w	r2, r3, #3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	4943      	ldr	r1, [pc, #268]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ccee:	4b3e      	ldr	r3, [pc, #248]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccf4:	f023 020c 	bic.w	r2, r3, #12
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	493a      	ldr	r1, [pc, #232]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0320 	and.w	r3, r3, #32
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00a      	beq.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd10:	4b35      	ldr	r3, [pc, #212]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1e:	4932      	ldr	r1, [pc, #200]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd20:	4313      	orrs	r3, r2
 800cd22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00a      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cd32:	4b2d      	ldr	r3, [pc, #180]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd40:	4929      	ldr	r1, [pc, #164]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00a      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cd54:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	4921      	ldr	r1, [pc, #132]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd64:	4313      	orrs	r3, r2
 800cd66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00a      	beq.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cd76:	4b1c      	ldr	r3, [pc, #112]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd84:	4918      	ldr	r1, [pc, #96]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00a      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cd98:	4b13      	ldr	r3, [pc, #76]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda6:	4910      	ldr	r1, [pc, #64]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d02c      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	4907      	ldr	r1, [pc, #28]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdd8:	d10a      	bne.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cdda:	4b03      	ldr	r3, [pc, #12]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	4a02      	ldr	r2, [pc, #8]	; (800cde8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cde0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cde4:	60d3      	str	r3, [r2, #12]
 800cde6:	e015      	b.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800cde8:	40021000 	.word	0x40021000
 800cdec:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdf8:	d10c      	bne.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	2101      	movs	r1, #1
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 f871 	bl	800cee8 <RCCEx_PLLSAI1_Config>
 800ce06:	4603      	mov	r3, r0
 800ce08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ce0a:	7cfb      	ldrb	r3, [r7, #19]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d001      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800ce10:	7cfb      	ldrb	r3, [r7, #19]
 800ce12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d028      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ce20:	4b30      	ldr	r3, [pc, #192]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce2e:	492d      	ldr	r1, [pc, #180]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce30:	4313      	orrs	r3, r2
 800ce32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce3e:	d106      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ce40:	4b28      	ldr	r3, [pc, #160]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	4a27      	ldr	r2, [pc, #156]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce4a:	60d3      	str	r3, [r2, #12]
 800ce4c:	e011      	b.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce56:	d10c      	bne.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f842 	bl	800cee8 <RCCEx_PLLSAI1_Config>
 800ce64:	4603      	mov	r3, r0
 800ce66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ce68:	7cfb      	ldrb	r3, [r7, #19]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800ce6e:	7cfb      	ldrb	r3, [r7, #19]
 800ce70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01c      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ce7e:	4b19      	ldr	r3, [pc, #100]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce8c:	4915      	ldr	r1, [pc, #84]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce9c:	d10c      	bne.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3304      	adds	r3, #4
 800cea2:	2102      	movs	r1, #2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 f81f 	bl	800cee8 <RCCEx_PLLSAI1_Config>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ceae:	7cfb      	ldrb	r3, [r7, #19]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800ceb4:	7cfb      	ldrb	r3, [r7, #19]
 800ceb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00a      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cec4:	4b07      	ldr	r3, [pc, #28]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced2:	4904      	ldr	r1, [pc, #16]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ced4:	4313      	orrs	r3, r2
 800ced6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ceda:	7cbb      	ldrb	r3, [r7, #18]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	40021000 	.word	0x40021000

0800cee8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cef6:	4b74      	ldr	r3, [pc, #464]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d018      	beq.n	800cf34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cf02:	4b71      	ldr	r3, [pc, #452]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f003 0203 	and.w	r2, r3, #3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d10d      	bne.n	800cf2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
       ||
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d009      	beq.n	800cf2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cf1a:	4b6b      	ldr	r3, [pc, #428]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	091b      	lsrs	r3, r3, #4
 800cf20:	f003 0307 	and.w	r3, r3, #7
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
       ||
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d047      	beq.n	800cfbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	73fb      	strb	r3, [r7, #15]
 800cf32:	e044      	b.n	800cfbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d018      	beq.n	800cf6e <RCCEx_PLLSAI1_Config+0x86>
 800cf3c:	2b03      	cmp	r3, #3
 800cf3e:	d825      	bhi.n	800cf8c <RCCEx_PLLSAI1_Config+0xa4>
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d002      	beq.n	800cf4a <RCCEx_PLLSAI1_Config+0x62>
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d009      	beq.n	800cf5c <RCCEx_PLLSAI1_Config+0x74>
 800cf48:	e020      	b.n	800cf8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cf4a:	4b5f      	ldr	r3, [pc, #380]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0302 	and.w	r3, r3, #2
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d11d      	bne.n	800cf92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf5a:	e01a      	b.n	800cf92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cf5c:	4b5a      	ldr	r3, [pc, #360]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d116      	bne.n	800cf96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf6c:	e013      	b.n	800cf96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cf6e:	4b56      	ldr	r3, [pc, #344]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10f      	bne.n	800cf9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cf7a:	4b53      	ldr	r3, [pc, #332]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d109      	bne.n	800cf9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf8a:	e006      	b.n	800cf9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf90:	e004      	b.n	800cf9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf92:	bf00      	nop
 800cf94:	e002      	b.n	800cf9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf96:	bf00      	nop
 800cf98:	e000      	b.n	800cf9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf9a:	bf00      	nop
    }

    if(status == HAL_OK)
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10d      	bne.n	800cfbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cfa2:	4b49      	ldr	r3, [pc, #292]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6819      	ldr	r1, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	430b      	orrs	r3, r1
 800cfb8:	4943      	ldr	r1, [pc, #268]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d17c      	bne.n	800d0be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cfc4:	4b40      	ldr	r3, [pc, #256]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a3f      	ldr	r2, [pc, #252]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfd0:	f7fa fdec 	bl	8007bac <HAL_GetTick>
 800cfd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cfd6:	e009      	b.n	800cfec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cfd8:	f7fa fde8 	bl	8007bac <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d902      	bls.n	800cfec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	73fb      	strb	r3, [r7, #15]
        break;
 800cfea:	e005      	b.n	800cff8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cfec:	4b36      	ldr	r3, [pc, #216]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1ef      	bne.n	800cfd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d15f      	bne.n	800d0be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d110      	bne.n	800d026 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d004:	4b30      	ldr	r3, [pc, #192]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d00c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	6892      	ldr	r2, [r2, #8]
 800d014:	0211      	lsls	r1, r2, #8
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	68d2      	ldr	r2, [r2, #12]
 800d01a:	06d2      	lsls	r2, r2, #27
 800d01c:	430a      	orrs	r2, r1
 800d01e:	492a      	ldr	r1, [pc, #168]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d020:	4313      	orrs	r3, r2
 800d022:	610b      	str	r3, [r1, #16]
 800d024:	e027      	b.n	800d076 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d112      	bne.n	800d052 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d02c:	4b26      	ldr	r3, [pc, #152]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d034:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6892      	ldr	r2, [r2, #8]
 800d03c:	0211      	lsls	r1, r2, #8
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	6912      	ldr	r2, [r2, #16]
 800d042:	0852      	lsrs	r2, r2, #1
 800d044:	3a01      	subs	r2, #1
 800d046:	0552      	lsls	r2, r2, #21
 800d048:	430a      	orrs	r2, r1
 800d04a:	491f      	ldr	r1, [pc, #124]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	610b      	str	r3, [r1, #16]
 800d050:	e011      	b.n	800d076 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d052:	4b1d      	ldr	r3, [pc, #116]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d05a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6892      	ldr	r2, [r2, #8]
 800d062:	0211      	lsls	r1, r2, #8
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	6952      	ldr	r2, [r2, #20]
 800d068:	0852      	lsrs	r2, r2, #1
 800d06a:	3a01      	subs	r2, #1
 800d06c:	0652      	lsls	r2, r2, #25
 800d06e:	430a      	orrs	r2, r1
 800d070:	4915      	ldr	r1, [pc, #84]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d072:	4313      	orrs	r3, r2
 800d074:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a13      	ldr	r2, [pc, #76]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d07c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d080:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d082:	f7fa fd93 	bl	8007bac <HAL_GetTick>
 800d086:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d088:	e009      	b.n	800d09e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d08a:	f7fa fd8f 	bl	8007bac <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d902      	bls.n	800d09e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	73fb      	strb	r3, [r7, #15]
          break;
 800d09c:	e005      	b.n	800d0aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0ef      	beq.n	800d08a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d0b0:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d0b2:	691a      	ldr	r2, [r3, #16]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	4903      	ldr	r1, [pc, #12]	; (800d0c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	40021000 	.word	0x40021000

0800d0cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d06c      	beq.n	800d1b8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7f8 fade 	bl	80056b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	22ca      	movs	r2, #202	; 0xca
 800d106:	625a      	str	r2, [r3, #36]	; 0x24
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2253      	movs	r2, #83	; 0x53
 800d10e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f87c 	bl	800d20e <RTC_EnterInitMode>
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d14b      	bne.n	800d1b8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	6812      	ldr	r2, [r2, #0]
 800d12a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d132:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6899      	ldr	r1, [r3, #8]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	431a      	orrs	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	431a      	orrs	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	430a      	orrs	r2, r1
 800d150:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	68d2      	ldr	r2, [r2, #12]
 800d15a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6919      	ldr	r1, [r3, #16]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	041a      	lsls	r2, r3, #16
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f87f 	bl	800d274 <RTC_ExitInitMode>
 800d176:	4603      	mov	r3, r0
 800d178:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d11b      	bne.n	800d1b8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f022 0203 	bic.w	r2, r2, #3
 800d18e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	69da      	ldr	r2, [r3, #28]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	430a      	orrs	r2, r1
 800d1a6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	22ff      	movs	r2, #255	; 0xff
 800d1ae:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d1d8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800d1da:	f7fa fce7 	bl	8007bac <HAL_GetTick>
 800d1de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d1e0:	e009      	b.n	800d1f6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d1e2:	f7fa fce3 	bl	8007bac <HAL_GetTick>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1f0:	d901      	bls.n	800d1f6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e007      	b.n	800d206 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f003 0320 	and.w	r3, r3, #32
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0ee      	beq.n	800d1e2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d224:	2b00      	cmp	r3, #0
 800d226:	d120      	bne.n	800d26a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d232:	f7fa fcbb 	bl	8007bac <HAL_GetTick>
 800d236:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d238:	e00d      	b.n	800d256 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d23a:	f7fa fcb7 	bl	8007bac <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d248:	d905      	bls.n	800d256 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2203      	movs	r2, #3
 800d252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d102      	bne.n	800d26a <RTC_EnterInitMode+0x5c>
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d1e7      	bne.n	800d23a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800d26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d280:	4b1a      	ldr	r3, [pc, #104]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	4a19      	ldr	r2, [pc, #100]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d28a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d28c:	4b17      	ldr	r3, [pc, #92]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	f003 0320 	and.w	r3, r3, #32
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10c      	bne.n	800d2b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff92 	bl	800d1c2 <HAL_RTC_WaitForSynchro>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d01e      	beq.n	800d2e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2203      	movs	r2, #3
 800d2a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	73fb      	strb	r3, [r7, #15]
 800d2b0:	e017      	b.n	800d2e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d2b2:	4b0e      	ldr	r3, [pc, #56]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d2b8:	f023 0320 	bic.w	r3, r3, #32
 800d2bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff ff7f 	bl	800d1c2 <HAL_RTC_WaitForSynchro>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d005      	beq.n	800d2d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d2d6:	4b05      	ldr	r3, [pc, #20]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	4a04      	ldr	r2, [pc, #16]	; (800d2ec <RTC_ExitInitMode+0x78>)
 800d2dc:	f043 0320 	orr.w	r3, r3, #32
 800d2e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	40002800 	.word	0x40002800

0800d2f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e095      	b.n	800d42e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	2b00      	cmp	r3, #0
 800d308:	d108      	bne.n	800d31c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d312:	d009      	beq.n	800d328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	61da      	str	r2, [r3, #28]
 800d31a:	e005      	b.n	800d328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7f8 fa24 	bl	8005790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d35e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d368:	d902      	bls.n	800d370 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d36a:	2300      	movs	r3, #0
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	e002      	b.n	800d376 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d374:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d37e:	d007      	beq.n	800d390 <HAL_SPI_Init+0xa0>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d388:	d002      	beq.n	800d390 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d3a0:	431a      	orrs	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0302 	and.w	r3, r3, #2
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	431a      	orrs	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	69db      	ldr	r3, [r3, #28]
 800d3c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d2:	ea42 0103 	orr.w	r1, r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	0c1b      	lsrs	r3, r3, #16
 800d3ec:	f003 0204 	and.w	r2, r3, #4
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	f003 0310 	and.w	r3, r3, #16
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fe:	f003 0308 	and.w	r3, r3, #8
 800d402:	431a      	orrs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d40c:	ea42 0103 	orr.w	r1, r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b082      	sub	sp, #8
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e049      	b.n	800d4dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f841 	bl	800d4e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2202      	movs	r2, #2
 800d466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3304      	adds	r3, #4
 800d472:	4619      	mov	r1, r3
 800d474:	4610      	mov	r0, r2
 800d476:	f000 fc27 	bl	800dcc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d001      	beq.n	800d510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e03b      	b.n	800d588 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68da      	ldr	r2, [r3, #12]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f042 0201 	orr.w	r2, r2, #1
 800d526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a19      	ldr	r2, [pc, #100]	; (800d594 <HAL_TIM_Base_Start_IT+0x9c>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d009      	beq.n	800d546 <HAL_TIM_Base_Start_IT+0x4e>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d53a:	d004      	beq.n	800d546 <HAL_TIM_Base_Start_IT+0x4e>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a15      	ldr	r2, [pc, #84]	; (800d598 <HAL_TIM_Base_Start_IT+0xa0>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d115      	bne.n	800d572 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	4b13      	ldr	r3, [pc, #76]	; (800d59c <HAL_TIM_Base_Start_IT+0xa4>)
 800d54e:	4013      	ands	r3, r2
 800d550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b06      	cmp	r3, #6
 800d556:	d015      	beq.n	800d584 <HAL_TIM_Base_Start_IT+0x8c>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d55e:	d011      	beq.n	800d584 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f042 0201 	orr.w	r2, r2, #1
 800d56e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d570:	e008      	b.n	800d584 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f042 0201 	orr.w	r2, r2, #1
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	e000      	b.n	800d586 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d584:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	40012c00 	.word	0x40012c00
 800d598:	40014000 	.word	0x40014000
 800d59c:	00010007 	.word	0x00010007

0800d5a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e049      	b.n	800d646 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7f8 fb72 	bl	8005cb0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f000 fb72 	bl	800dcc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d104      	bne.n	800d66a <HAL_TIM_IC_Start_IT+0x1a>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d666:	b2db      	uxtb	r3, r3
 800d668:	e023      	b.n	800d6b2 <HAL_TIM_IC_Start_IT+0x62>
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b04      	cmp	r3, #4
 800d66e:	d104      	bne.n	800d67a <HAL_TIM_IC_Start_IT+0x2a>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d676:	b2db      	uxtb	r3, r3
 800d678:	e01b      	b.n	800d6b2 <HAL_TIM_IC_Start_IT+0x62>
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2b08      	cmp	r3, #8
 800d67e:	d104      	bne.n	800d68a <HAL_TIM_IC_Start_IT+0x3a>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d686:	b2db      	uxtb	r3, r3
 800d688:	e013      	b.n	800d6b2 <HAL_TIM_IC_Start_IT+0x62>
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b0c      	cmp	r3, #12
 800d68e:	d104      	bne.n	800d69a <HAL_TIM_IC_Start_IT+0x4a>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d696:	b2db      	uxtb	r3, r3
 800d698:	e00b      	b.n	800d6b2 <HAL_TIM_IC_Start_IT+0x62>
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b10      	cmp	r3, #16
 800d69e:	d104      	bne.n	800d6aa <HAL_TIM_IC_Start_IT+0x5a>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	e003      	b.n	800d6b2 <HAL_TIM_IC_Start_IT+0x62>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d104      	bne.n	800d6c4 <HAL_TIM_IC_Start_IT+0x74>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	e013      	b.n	800d6ec <HAL_TIM_IC_Start_IT+0x9c>
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b04      	cmp	r3, #4
 800d6c8:	d104      	bne.n	800d6d4 <HAL_TIM_IC_Start_IT+0x84>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	e00b      	b.n	800d6ec <HAL_TIM_IC_Start_IT+0x9c>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d104      	bne.n	800d6e4 <HAL_TIM_IC_Start_IT+0x94>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	e003      	b.n	800d6ec <HAL_TIM_IC_Start_IT+0x9c>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d102      	bne.n	800d6fa <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d001      	beq.n	800d6fe <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e0c4      	b.n	800d888 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <HAL_TIM_IC_Start_IT+0xbe>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d70c:	e023      	b.n	800d756 <HAL_TIM_IC_Start_IT+0x106>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b04      	cmp	r3, #4
 800d712:	d104      	bne.n	800d71e <HAL_TIM_IC_Start_IT+0xce>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d71c:	e01b      	b.n	800d756 <HAL_TIM_IC_Start_IT+0x106>
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b08      	cmp	r3, #8
 800d722:	d104      	bne.n	800d72e <HAL_TIM_IC_Start_IT+0xde>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2202      	movs	r2, #2
 800d728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d72c:	e013      	b.n	800d756 <HAL_TIM_IC_Start_IT+0x106>
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	2b0c      	cmp	r3, #12
 800d732:	d104      	bne.n	800d73e <HAL_TIM_IC_Start_IT+0xee>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d73c:	e00b      	b.n	800d756 <HAL_TIM_IC_Start_IT+0x106>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b10      	cmp	r3, #16
 800d742:	d104      	bne.n	800d74e <HAL_TIM_IC_Start_IT+0xfe>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d74c:	e003      	b.n	800d756 <HAL_TIM_IC_Start_IT+0x106>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2202      	movs	r2, #2
 800d752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <HAL_TIM_IC_Start_IT+0x116>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d764:	e013      	b.n	800d78e <HAL_TIM_IC_Start_IT+0x13e>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	d104      	bne.n	800d776 <HAL_TIM_IC_Start_IT+0x126>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d774:	e00b      	b.n	800d78e <HAL_TIM_IC_Start_IT+0x13e>
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b08      	cmp	r3, #8
 800d77a:	d104      	bne.n	800d786 <HAL_TIM_IC_Start_IT+0x136>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2202      	movs	r2, #2
 800d780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d784:	e003      	b.n	800d78e <HAL_TIM_IC_Start_IT+0x13e>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2202      	movs	r2, #2
 800d78a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b0c      	cmp	r3, #12
 800d792:	d841      	bhi.n	800d818 <HAL_TIM_IC_Start_IT+0x1c8>
 800d794:	a201      	add	r2, pc, #4	; (adr r2, 800d79c <HAL_TIM_IC_Start_IT+0x14c>)
 800d796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79a:	bf00      	nop
 800d79c:	0800d7d1 	.word	0x0800d7d1
 800d7a0:	0800d819 	.word	0x0800d819
 800d7a4:	0800d819 	.word	0x0800d819
 800d7a8:	0800d819 	.word	0x0800d819
 800d7ac:	0800d7e3 	.word	0x0800d7e3
 800d7b0:	0800d819 	.word	0x0800d819
 800d7b4:	0800d819 	.word	0x0800d819
 800d7b8:	0800d819 	.word	0x0800d819
 800d7bc:	0800d7f5 	.word	0x0800d7f5
 800d7c0:	0800d819 	.word	0x0800d819
 800d7c4:	0800d819 	.word	0x0800d819
 800d7c8:	0800d819 	.word	0x0800d819
 800d7cc:	0800d807 	.word	0x0800d807
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	68da      	ldr	r2, [r3, #12]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f042 0202 	orr.w	r2, r2, #2
 800d7de:	60da      	str	r2, [r3, #12]
      break;
 800d7e0:	e01b      	b.n	800d81a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68da      	ldr	r2, [r3, #12]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f042 0204 	orr.w	r2, r2, #4
 800d7f0:	60da      	str	r2, [r3, #12]
      break;
 800d7f2:	e012      	b.n	800d81a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f042 0208 	orr.w	r2, r2, #8
 800d802:	60da      	str	r2, [r3, #12]
      break;
 800d804:	e009      	b.n	800d81a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 0210 	orr.w	r2, r2, #16
 800d814:	60da      	str	r2, [r3, #12]
      break;
 800d816:	e000      	b.n	800d81a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800d818:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2201      	movs	r2, #1
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fbc0 	bl	800dfa8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a18      	ldr	r2, [pc, #96]	; (800d890 <HAL_TIM_IC_Start_IT+0x240>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d009      	beq.n	800d846 <HAL_TIM_IC_Start_IT+0x1f6>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d83a:	d004      	beq.n	800d846 <HAL_TIM_IC_Start_IT+0x1f6>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a14      	ldr	r2, [pc, #80]	; (800d894 <HAL_TIM_IC_Start_IT+0x244>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d115      	bne.n	800d872 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	689a      	ldr	r2, [r3, #8]
 800d84c:	4b12      	ldr	r3, [pc, #72]	; (800d898 <HAL_TIM_IC_Start_IT+0x248>)
 800d84e:	4013      	ands	r3, r2
 800d850:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b06      	cmp	r3, #6
 800d856:	d015      	beq.n	800d884 <HAL_TIM_IC_Start_IT+0x234>
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d85e:	d011      	beq.n	800d884 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f042 0201 	orr.w	r2, r2, #1
 800d86e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d870:	e008      	b.n	800d884 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0201 	orr.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	e000      	b.n	800d886 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	40012c00 	.word	0x40012c00
 800d894:	40014000 	.word	0x40014000
 800d898:	00010007 	.word	0x00010007

0800d89c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	f003 0302 	and.w	r3, r3, #2
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d122      	bne.n	800d8f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d11b      	bne.n	800d8f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f06f 0202 	mvn.w	r2, #2
 800d8c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	f003 0303 	and.w	r3, r3, #3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7f8 fa82 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 800d8e4:	e005      	b.n	800d8f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f9d0 	bl	800dc8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f9d7 	bl	800dca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f003 0304 	and.w	r3, r3, #4
 800d902:	2b04      	cmp	r3, #4
 800d904:	d122      	bne.n	800d94c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b04      	cmp	r3, #4
 800d912:	d11b      	bne.n	800d94c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f06f 0204 	mvn.w	r2, #4
 800d91c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2202      	movs	r2, #2
 800d922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	699b      	ldr	r3, [r3, #24]
 800d92a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d003      	beq.n	800d93a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7f8 fa58 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 800d938:	e005      	b.n	800d946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f9a6 	bl	800dc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f9ad 	bl	800dca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	f003 0308 	and.w	r3, r3, #8
 800d956:	2b08      	cmp	r3, #8
 800d958:	d122      	bne.n	800d9a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	f003 0308 	and.w	r3, r3, #8
 800d964:	2b08      	cmp	r3, #8
 800d966:	d11b      	bne.n	800d9a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f06f 0208 	mvn.w	r2, #8
 800d970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2204      	movs	r2, #4
 800d976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	f003 0303 	and.w	r3, r3, #3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7f8 fa2e 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 800d98c:	e005      	b.n	800d99a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f97c 	bl	800dc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f983 	bl	800dca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	f003 0310 	and.w	r3, r3, #16
 800d9aa:	2b10      	cmp	r3, #16
 800d9ac:	d122      	bne.n	800d9f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f003 0310 	and.w	r3, r3, #16
 800d9b8:	2b10      	cmp	r3, #16
 800d9ba:	d11b      	bne.n	800d9f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f06f 0210 	mvn.w	r2, #16
 800d9c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	69db      	ldr	r3, [r3, #28]
 800d9d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7f8 fa04 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 800d9e0:	e005      	b.n	800d9ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f952 	bl	800dc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f959 	bl	800dca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d10e      	bne.n	800da20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d107      	bne.n	800da20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f06f 0201 	mvn.w	r2, #1
 800da18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7f7 fe0a 	bl	8005634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da2a:	2b80      	cmp	r3, #128	; 0x80
 800da2c:	d10e      	bne.n	800da4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da38:	2b80      	cmp	r3, #128	; 0x80
 800da3a:	d107      	bne.n	800da4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fb44 	bl	800e0d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da5a:	d10e      	bne.n	800da7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da66:	2b80      	cmp	r3, #128	; 0x80
 800da68:	d107      	bne.n	800da7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fb37 	bl	800e0e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da84:	2b40      	cmp	r3, #64	; 0x40
 800da86:	d10e      	bne.n	800daa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da92:	2b40      	cmp	r3, #64	; 0x40
 800da94:	d107      	bne.n	800daa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f907 	bl	800dcb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	f003 0320 	and.w	r3, r3, #32
 800dab0:	2b20      	cmp	r3, #32
 800dab2:	d10e      	bne.n	800dad2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f003 0320 	and.w	r3, r3, #32
 800dabe:	2b20      	cmp	r3, #32
 800dac0:	d107      	bne.n	800dad2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f06f 0220 	mvn.w	r2, #32
 800daca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 faf7 	bl	800e0c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800daec:	2b01      	cmp	r3, #1
 800daee:	d101      	bne.n	800daf4 <HAL_TIM_IC_ConfigChannel+0x1a>
 800daf0:	2302      	movs	r3, #2
 800daf2:	e082      	b.n	800dbfa <HAL_TIM_IC_ConfigChannel+0x120>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d11b      	bne.n	800db3a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	6819      	ldr	r1, [r3, #0]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	685a      	ldr	r2, [r3, #4]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	f000 f93d 	bl	800dd90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	699a      	ldr	r2, [r3, #24]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f022 020c 	bic.w	r2, r2, #12
 800db24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6999      	ldr	r1, [r3, #24]
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	689a      	ldr	r2, [r3, #8]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	430a      	orrs	r2, r1
 800db36:	619a      	str	r2, [r3, #24]
 800db38:	e05a      	b.n	800dbf0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d11c      	bne.n	800db7a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6818      	ldr	r0, [r3, #0]
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	6819      	ldr	r1, [r3, #0]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	f000 f974 	bl	800de3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	699a      	ldr	r2, [r3, #24]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800db62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6999      	ldr	r1, [r3, #24]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	021a      	lsls	r2, r3, #8
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	430a      	orrs	r2, r1
 800db76:	619a      	str	r2, [r3, #24]
 800db78:	e03a      	b.n	800dbf0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b08      	cmp	r3, #8
 800db7e:	d11b      	bne.n	800dbb8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6818      	ldr	r0, [r3, #0]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	6819      	ldr	r1, [r3, #0]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f000 f991 	bl	800deb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	69da      	ldr	r2, [r3, #28]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f022 020c 	bic.w	r2, r2, #12
 800dba2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	69d9      	ldr	r1, [r3, #28]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	430a      	orrs	r2, r1
 800dbb4:	61da      	str	r2, [r3, #28]
 800dbb6:	e01b      	b.n	800dbf0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6818      	ldr	r0, [r3, #0]
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	6819      	ldr	r1, [r3, #0]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	f000 f9b1 	bl	800df2e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	69da      	ldr	r2, [r3, #28]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dbda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	69d9      	ldr	r1, [r3, #28]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	021a      	lsls	r2, r3, #8
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	430a      	orrs	r2, r1
 800dbee:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60fb      	str	r3, [r7, #12]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b0c      	cmp	r3, #12
 800dc16:	d831      	bhi.n	800dc7c <HAL_TIM_ReadCapturedValue+0x78>
 800dc18:	a201      	add	r2, pc, #4	; (adr r2, 800dc20 <HAL_TIM_ReadCapturedValue+0x1c>)
 800dc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1e:	bf00      	nop
 800dc20:	0800dc55 	.word	0x0800dc55
 800dc24:	0800dc7d 	.word	0x0800dc7d
 800dc28:	0800dc7d 	.word	0x0800dc7d
 800dc2c:	0800dc7d 	.word	0x0800dc7d
 800dc30:	0800dc5f 	.word	0x0800dc5f
 800dc34:	0800dc7d 	.word	0x0800dc7d
 800dc38:	0800dc7d 	.word	0x0800dc7d
 800dc3c:	0800dc7d 	.word	0x0800dc7d
 800dc40:	0800dc69 	.word	0x0800dc69
 800dc44:	0800dc7d 	.word	0x0800dc7d
 800dc48:	0800dc7d 	.word	0x0800dc7d
 800dc4c:	0800dc7d 	.word	0x0800dc7d
 800dc50:	0800dc73 	.word	0x0800dc73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5a:	60fb      	str	r3, [r7, #12]

      break;
 800dc5c:	e00f      	b.n	800dc7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc64:	60fb      	str	r3, [r7, #12]

      break;
 800dc66:	e00a      	b.n	800dc7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6e:	60fb      	str	r3, [r7, #12]

      break;
 800dc70:	e005      	b.n	800dc7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc78:	60fb      	str	r3, [r7, #12]

      break;
 800dc7a:	e000      	b.n	800dc7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800dc7c:	bf00      	nop
  }

  return tmpreg;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a2a      	ldr	r2, [pc, #168]	; (800dd84 <TIM_Base_SetConfig+0xbc>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d003      	beq.n	800dce8 <TIM_Base_SetConfig+0x20>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce6:	d108      	bne.n	800dcfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a21      	ldr	r2, [pc, #132]	; (800dd84 <TIM_Base_SetConfig+0xbc>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00b      	beq.n	800dd1a <TIM_Base_SetConfig+0x52>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd08:	d007      	beq.n	800dd1a <TIM_Base_SetConfig+0x52>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a1e      	ldr	r2, [pc, #120]	; (800dd88 <TIM_Base_SetConfig+0xc0>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d003      	beq.n	800dd1a <TIM_Base_SetConfig+0x52>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a1d      	ldr	r2, [pc, #116]	; (800dd8c <TIM_Base_SetConfig+0xc4>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d108      	bne.n	800dd2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	689a      	ldr	r2, [r3, #8]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a0c      	ldr	r2, [pc, #48]	; (800dd84 <TIM_Base_SetConfig+0xbc>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d007      	beq.n	800dd68 <TIM_Base_SetConfig+0xa0>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a0b      	ldr	r2, [pc, #44]	; (800dd88 <TIM_Base_SetConfig+0xc0>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d003      	beq.n	800dd68 <TIM_Base_SetConfig+0xa0>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a0a      	ldr	r2, [pc, #40]	; (800dd8c <TIM_Base_SetConfig+0xc4>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d103      	bne.n	800dd70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	691a      	ldr	r2, [r3, #16]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	615a      	str	r2, [r3, #20]
}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	40012c00 	.word	0x40012c00
 800dd88:	40014000 	.word	0x40014000
 800dd8c:	40014400 	.word	0x40014400

0800dd90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	f023 0201 	bic.w	r2, r3, #1
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6a1b      	ldr	r3, [r3, #32]
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4a1e      	ldr	r2, [pc, #120]	; (800de34 <TIM_TI1_SetConfig+0xa4>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d007      	beq.n	800ddce <TIM_TI1_SetConfig+0x3e>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddc4:	d003      	beq.n	800ddce <TIM_TI1_SetConfig+0x3e>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4a1b      	ldr	r2, [pc, #108]	; (800de38 <TIM_TI1_SetConfig+0xa8>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d101      	bne.n	800ddd2 <TIM_TI1_SetConfig+0x42>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e000      	b.n	800ddd4 <TIM_TI1_SetConfig+0x44>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d008      	beq.n	800ddea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f023 0303 	bic.w	r3, r3, #3
 800ddde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
 800dde8:	e003      	b.n	800ddf2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	011b      	lsls	r3, r3, #4
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	4313      	orrs	r3, r2
 800de04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f023 030a 	bic.w	r3, r3, #10
 800de0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f003 030a 	and.w	r3, r3, #10
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	4313      	orrs	r3, r2
 800de18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	697a      	ldr	r2, [r7, #20]
 800de1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	621a      	str	r2, [r3, #32]
}
 800de26:	bf00      	nop
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	40012c00 	.word	0x40012c00
 800de38:	40014000 	.word	0x40014000

0800de3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	f023 0210 	bic.w	r2, r3, #16
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	021b      	lsls	r3, r3, #8
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	4313      	orrs	r3, r2
 800de72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	031b      	lsls	r3, r3, #12
 800de80:	b29b      	uxth	r3, r3
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	4313      	orrs	r3, r2
 800de86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	011b      	lsls	r3, r3, #4
 800de94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	621a      	str	r2, [r3, #32]
}
 800deaa:	bf00      	nop
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800deb6:	b480      	push	{r7}
 800deb8:	b087      	sub	sp, #28
 800deba:	af00      	add	r7, sp, #0
 800debc:	60f8      	str	r0, [r7, #12]
 800debe:	60b9      	str	r1, [r7, #8]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6a1b      	ldr	r3, [r3, #32]
 800dec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f023 0303 	bic.w	r3, r3, #3
 800dee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4313      	orrs	r3, r2
 800deea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800def2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	b2db      	uxtb	r3, r3
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	4313      	orrs	r3, r2
 800defe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800df06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	021b      	lsls	r3, r3, #8
 800df0c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4313      	orrs	r3, r2
 800df14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	621a      	str	r2, [r3, #32]
}
 800df22:	bf00      	nop
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800df2e:	b480      	push	{r7}
 800df30:	b087      	sub	sp, #28
 800df32:	af00      	add	r7, sp, #0
 800df34:	60f8      	str	r0, [r7, #12]
 800df36:	60b9      	str	r1, [r7, #8]
 800df38:	607a      	str	r2, [r7, #4]
 800df3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6a1b      	ldr	r3, [r3, #32]
 800df40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	69db      	ldr	r3, [r3, #28]
 800df4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6a1b      	ldr	r3, [r3, #32]
 800df52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	021b      	lsls	r3, r3, #8
 800df60:	697a      	ldr	r2, [r7, #20]
 800df62:	4313      	orrs	r3, r2
 800df64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	031b      	lsls	r3, r3, #12
 800df72:	b29b      	uxth	r3, r3
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4313      	orrs	r3, r2
 800df78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800df80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	031b      	lsls	r3, r3, #12
 800df86:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	621a      	str	r2, [r3, #32]
}
 800df9c:	bf00      	nop
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b087      	sub	sp, #28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f003 031f 	and.w	r3, r3, #31
 800dfba:	2201      	movs	r2, #1
 800dfbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dfc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6a1a      	ldr	r2, [r3, #32]
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	43db      	mvns	r3, r3
 800dfca:	401a      	ands	r2, r3
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6a1a      	ldr	r2, [r3, #32]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	f003 031f 	and.w	r3, r3, #31
 800dfda:	6879      	ldr	r1, [r7, #4]
 800dfdc:	fa01 f303 	lsl.w	r3, r1, r3
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	621a      	str	r2, [r3, #32]
}
 800dfe6:	bf00      	nop
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e004:	2b01      	cmp	r3, #1
 800e006:	d101      	bne.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e008:	2302      	movs	r3, #2
 800e00a:	e04f      	b.n	800e0ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2202      	movs	r2, #2
 800e018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a21      	ldr	r2, [pc, #132]	; (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d108      	bne.n	800e048 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e03c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	4313      	orrs	r3, r2
 800e046:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e04e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	4313      	orrs	r3, r2
 800e058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a14      	ldr	r2, [pc, #80]	; (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d009      	beq.n	800e080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e074:	d004      	beq.n	800e080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a10      	ldr	r2, [pc, #64]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d10c      	bne.n	800e09a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	4313      	orrs	r3, r2
 800e090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	40012c00 	.word	0x40012c00
 800e0bc:	40014000 	.word	0x40014000

0800e0c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e040      	b.n	800e190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f7 ffe4 	bl	80060ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2224      	movs	r2, #36	; 0x24
 800e128:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f022 0201 	bic.w	r2, r2, #1
 800e138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fccc 	bl	800ead8 <UART_SetConfig>
 800e140:	4603      	mov	r3, r0
 800e142:	2b01      	cmp	r3, #1
 800e144:	d101      	bne.n	800e14a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e022      	b.n	800e190 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d002      	beq.n	800e158 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fecc 	bl	800eef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	685a      	ldr	r2, [r3, #4]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689a      	ldr	r2, [r3, #8]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f042 0201 	orr.w	r2, r2, #1
 800e186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 ff53 	bl	800f034 <UART_CheckIdleState>
 800e18e:	4603      	mov	r3, r0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e02b      	b.n	800e202 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2224      	movs	r2, #36	; 0x24
 800e1ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0201 	bic.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7f8 f84b 	bl	8006274 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b08a      	sub	sp, #40	; 0x28
 800e20e:	af02      	add	r7, sp, #8
 800e210:	60f8      	str	r0, [r7, #12]
 800e212:	60b9      	str	r1, [r7, #8]
 800e214:	603b      	str	r3, [r7, #0]
 800e216:	4613      	mov	r3, r2
 800e218:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e21e:	2b20      	cmp	r3, #32
 800e220:	f040 8082 	bne.w	800e328 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <HAL_UART_Transmit+0x26>
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	e07a      	b.n	800e32a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d101      	bne.n	800e242 <HAL_UART_Transmit+0x38>
 800e23e:	2302      	movs	r3, #2
 800e240:	e073      	b.n	800e32a <HAL_UART_Transmit+0x120>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2221      	movs	r2, #33	; 0x21
 800e256:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e258:	f7f9 fca8 	bl	8007bac <HAL_GetTick>
 800e25c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	88fa      	ldrh	r2, [r7, #6]
 800e262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	88fa      	ldrh	r2, [r7, #6]
 800e26a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e276:	d108      	bne.n	800e28a <HAL_UART_Transmit+0x80>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d104      	bne.n	800e28a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800e280:	2300      	movs	r3, #0
 800e282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	61bb      	str	r3, [r7, #24]
 800e288:	e003      	b.n	800e292 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800e29a:	e02d      	b.n	800e2f8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2180      	movs	r1, #128	; 0x80
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 ff0d 	bl	800f0c6 <UART_WaitOnFlagUntilTimeout>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	e039      	b.n	800e32a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10b      	bne.n	800e2d4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	881a      	ldrh	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	3302      	adds	r3, #2
 800e2d0:	61bb      	str	r3, [r7, #24]
 800e2d2:	e008      	b.n	800e2e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	781a      	ldrb	r2, [r3, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	b292      	uxth	r2, r2
 800e2de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1cb      	bne.n	800e29c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2200      	movs	r2, #0
 800e30c:	2140      	movs	r1, #64	; 0x40
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f000 fed9 	bl	800f0c6 <UART_WaitOnFlagUntilTimeout>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d001      	beq.n	800e31e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800e31a:	2303      	movs	r3, #3
 800e31c:	e005      	b.n	800e32a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	e000      	b.n	800e32a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800e328:	2302      	movs	r3, #2
  }
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3720      	adds	r7, #32
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	4613      	mov	r3, r2
 800e340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e346:	2b20      	cmp	r3, #32
 800e348:	d145      	bne.n	800e3d6 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <HAL_UART_Transmit_IT+0x22>
 800e350:	88fb      	ldrh	r3, [r7, #6]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e03e      	b.n	800e3d8 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e360:	2b01      	cmp	r3, #1
 800e362:	d101      	bne.n	800e368 <HAL_UART_Transmit_IT+0x34>
 800e364:	2302      	movs	r3, #2
 800e366:	e037      	b.n	800e3d8 <HAL_UART_Transmit_IT+0xa4>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	88fa      	ldrh	r2, [r7, #6]
 800e37a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	88fa      	ldrh	r2, [r7, #6]
 800e382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2221      	movs	r2, #33	; 0x21
 800e398:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a2:	d107      	bne.n	800e3b4 <HAL_UART_Transmit_IT+0x80>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d103      	bne.n	800e3b4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	4a0d      	ldr	r2, [pc, #52]	; (800e3e4 <HAL_UART_Transmit_IT+0xb0>)
 800e3b0:	669a      	str	r2, [r3, #104]	; 0x68
 800e3b2:	e002      	b.n	800e3ba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	4a0c      	ldr	r2, [pc, #48]	; (800e3e8 <HAL_UART_Transmit_IT+0xb4>)
 800e3b8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e000      	b.n	800e3d8 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800e3d6:	2302      	movs	r3, #2
  }
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	0800f445 	.word	0x0800f445
 800e3e8:	0800f3d1 	.word	0x0800f3d1

0800e3ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fe:	2b20      	cmp	r3, #32
 800e400:	d131      	bne.n	800e466 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <HAL_UART_Receive_IT+0x22>
 800e408:	88fb      	ldrh	r3, [r7, #6]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d101      	bne.n	800e412 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	e02a      	b.n	800e468 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d101      	bne.n	800e420 <HAL_UART_Receive_IT+0x34>
 800e41c:	2302      	movs	r3, #2
 800e41e:	e023      	b.n	800e468 <HAL_UART_Receive_IT+0x7c>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a0f      	ldr	r2, [pc, #60]	; (800e470 <HAL_UART_Receive_IT+0x84>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d00e      	beq.n	800e456 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e442:	2b00      	cmp	r3, #0
 800e444:	d007      	beq.n	800e456 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e454:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800e456:	88fb      	ldrh	r3, [r7, #6]
 800e458:	461a      	mov	r2, r3
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 feaf 	bl	800f1c0 <UART_Start_Receive_IT>
 800e462:	4603      	mov	r3, r0
 800e464:	e000      	b.n	800e468 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800e466:	2302      	movs	r3, #2
  }
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	40008000 	.word	0x40008000

0800e474 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e48a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e496:	2b80      	cmp	r3, #128	; 0x80
 800e498:	d12d      	bne.n	800e4f6 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	689a      	ldr	r2, [r3, #8]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4a8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d013      	beq.n	800e4da <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b6:	4a19      	ldr	r2, [pc, #100]	; (800e51c <HAL_UART_AbortTransmit_IT+0xa8>)
 800e4b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fb fa50 	bl	8009964 <HAL_DMA_Abort_IT>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d022      	beq.n	800e510 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4798      	blx	r3
 800e4d8:	e01a      	b.n	800e510 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fa9a 	bl	800ea28 <HAL_UART_AbortTransmitCpltCallback>
 800e4f4:	e00c      	b.n	800e510 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2220      	movs	r2, #32
 800e508:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fa8c 	bl	800ea28 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3708      	adds	r7, #8
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	0800f35b 	.word	0x0800f35b

0800e520 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e536:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689a      	ldr	r2, [r3, #8]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f022 0201 	bic.w	r2, r2, #1
 800e546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d107      	bne.n	800e560 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f022 0210 	bic.w	r2, r2, #16
 800e55e:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56a:	2b40      	cmp	r3, #64	; 0x40
 800e56c:	d13e      	bne.n	800e5ec <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e57c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e582:	2b00      	cmp	r3, #0
 800e584:	d013      	beq.n	800e5ae <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58a:	4a25      	ldr	r2, [pc, #148]	; (800e620 <HAL_UART_AbortReceive_IT+0x100>)
 800e58c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e592:	4618      	mov	r0, r3
 800e594:	f7fb f9e6 	bl	8009964 <HAL_DMA_Abort_IT>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d03a      	beq.n	800e614 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	4798      	blx	r3
 800e5ac:	e032      	b.n	800e614 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	220f      	movs	r2, #15
 800e5c2:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	8b1b      	ldrh	r3, [r3, #24]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f042 0208 	orr.w	r2, r2, #8
 800e5d4:	b292      	uxth	r2, r2
 800e5d6:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa29 	bl	800ea3c <HAL_UART_AbortReceiveCpltCallback>
 800e5ea:	e013      	b.n	800e614 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	220f      	movs	r2, #15
 800e600:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2220      	movs	r2, #32
 800e606:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fa14 	bl	800ea3c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	0800f385 	.word	0x0800f385

0800e624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b088      	sub	sp, #32
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	69db      	ldr	r3, [r3, #28]
 800e632:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e644:	69fa      	ldr	r2, [r7, #28]
 800e646:	f640 030f 	movw	r3, #2063	; 0x80f
 800e64a:	4013      	ands	r3, r2
 800e64c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d113      	bne.n	800e67c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	f003 0320 	and.w	r3, r3, #32
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00e      	beq.n	800e67c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	f003 0320 	and.w	r3, r3, #32
 800e664:	2b00      	cmp	r3, #0
 800e666:	d009      	beq.n	800e67c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 81ce 	beq.w	800ea0e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	4798      	blx	r3
      }
      return;
 800e67a:	e1c8      	b.n	800ea0e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f000 80e3 	beq.w	800e84a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e68e:	69ba      	ldr	r2, [r7, #24]
 800e690:	4ba6      	ldr	r3, [pc, #664]	; (800e92c <HAL_UART_IRQHandler+0x308>)
 800e692:	4013      	ands	r3, r2
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80d8 	beq.w	800e84a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d010      	beq.n	800e6c6 <HAL_UART_IRQHandler+0xa2>
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00b      	beq.n	800e6c6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6bc:	f043 0201 	orr.w	r2, r3, #1
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	f003 0302 	and.w	r3, r3, #2
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d010      	beq.n	800e6f2 <HAL_UART_IRQHandler+0xce>
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00b      	beq.n	800e6f2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6e8:	f043 0204 	orr.w	r2, r3, #4
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	f003 0304 	and.w	r3, r3, #4
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d010      	beq.n	800e71e <HAL_UART_IRQHandler+0xfa>
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	f003 0301 	and.w	r3, r3, #1
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00b      	beq.n	800e71e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2204      	movs	r2, #4
 800e70c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e714:	f043 0202 	orr.w	r2, r3, #2
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	f003 0308 	and.w	r3, r3, #8
 800e724:	2b00      	cmp	r3, #0
 800e726:	d015      	beq.n	800e754 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	f003 0320 	and.w	r3, r3, #32
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d104      	bne.n	800e73c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00b      	beq.n	800e754 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2208      	movs	r2, #8
 800e742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e74a:	f043 0208 	orr.w	r2, r3, #8
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d011      	beq.n	800e782 <HAL_UART_IRQHandler+0x15e>
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00c      	beq.n	800e782 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e778:	f043 0220 	orr.w	r2, r3, #32
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 8142 	beq.w	800ea12 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	f003 0320 	and.w	r3, r3, #32
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00c      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	f003 0320 	and.w	r3, r3, #32
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d007      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d003      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c4:	2b40      	cmp	r3, #64	; 0x40
 800e7c6:	d004      	beq.n	800e7d2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d031      	beq.n	800e836 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fd7c 	bl	800f2d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e2:	2b40      	cmp	r3, #64	; 0x40
 800e7e4:	d123      	bne.n	800e82e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d013      	beq.n	800e826 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e802:	4a4b      	ldr	r2, [pc, #300]	; (800e930 <HAL_UART_IRQHandler+0x30c>)
 800e804:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fb f8aa 	bl	8009964 <HAL_DMA_Abort_IT>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d017      	beq.n	800e846 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e824:	e00f      	b.n	800e846 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7f7 fb98 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e82c:	e00b      	b.n	800e846 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7f7 fb94 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e834:	e007      	b.n	800e846 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7f7 fb90 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e844:	e0e5      	b.n	800ea12 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e846:	bf00      	nop
    return;
 800e848:	e0e3      	b.n	800ea12 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e84e:	2b01      	cmp	r3, #1
 800e850:	f040 80a9 	bne.w	800e9a6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	f003 0310 	and.w	r3, r3, #16
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 80a3 	beq.w	800e9a6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f003 0310 	and.w	r3, r3, #16
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 809d 	beq.w	800e9a6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2210      	movs	r2, #16
 800e872:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e87e:	2b40      	cmp	r3, #64	; 0x40
 800e880:	d158      	bne.n	800e934 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800e88c:	893b      	ldrh	r3, [r7, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f000 80c1 	beq.w	800ea16 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e89a:	893a      	ldrh	r2, [r7, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	f080 80ba 	bcs.w	800ea16 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	893a      	ldrh	r2, [r7, #8]
 800e8a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f003 0320 	and.w	r3, r3, #32
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d12a      	bne.n	800e910 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e8c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689a      	ldr	r2, [r3, #8]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f022 0201 	bic.w	r2, r2, #1
 800e8d8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	689a      	ldr	r2, [r3, #8]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8e8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2220      	movs	r2, #32
 800e8ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f022 0210 	bic.w	r2, r2, #16
 800e904:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fa ffec 	bl	80098e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	b29b      	uxth	r3, r3
 800e922:	4619      	mov	r1, r3
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f893 	bl	800ea50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e92a:	e074      	b.n	800ea16 <HAL_UART_IRQHandler+0x3f2>
 800e92c:	04000120 	.word	0x04000120
 800e930:	0800f32f 	.word	0x0800f32f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e940:	b29b      	uxth	r3, r3
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d063      	beq.n	800ea1a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800e952:	897b      	ldrh	r3, [r7, #10]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d060      	beq.n	800ea1a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e966:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f022 0201 	bic.w	r2, r2, #1
 800e976:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2220      	movs	r2, #32
 800e97c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f022 0210 	bic.w	r2, r2, #16
 800e998:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e99a:	897b      	ldrh	r3, [r7, #10]
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f856 	bl	800ea50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e9a4:	e039      	b.n	800ea1a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00d      	beq.n	800e9cc <HAL_UART_IRQHandler+0x3a8>
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d008      	beq.n	800e9cc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e9c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fe6c 	bl	800f6a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9ca:	e029      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00d      	beq.n	800e9f2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d008      	beq.n	800e9f2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d01a      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	4798      	blx	r3
    }
    return;
 800e9f0:	e015      	b.n	800ea1e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d011      	beq.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00c      	beq.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fd5a 	bl	800f4c0 <UART_EndTransmit_IT>
    return;
 800ea0c:	e008      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ea0e:	bf00      	nop
 800ea10:	e006      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
    return;
 800ea12:	bf00      	nop
 800ea14:	e004      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ea16:	bf00      	nop
 800ea18:	e002      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
      return;
 800ea1a:	bf00      	nop
 800ea1c:	e000      	b.n	800ea20 <HAL_UART_IRQHandler+0x3fc>
    return;
 800ea1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop

0800ea28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a17      	ldr	r2, [pc, #92]	; (800ead4 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d024      	beq.n	800eac4 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea7e:	2b20      	cmp	r3, #32
 800ea80:	d11e      	bne.n	800eac0 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d101      	bne.n	800ea90 <HAL_UART_EnableReceiverTimeout+0x28>
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	e01a      	b.n	800eac6 <HAL_UART_EnableReceiverTimeout+0x5e>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2224      	movs	r2, #36	; 0x24
 800ea9c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800eaac:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2220      	movs	r2, #32
 800eab2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	e002      	b.n	800eac6 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800eac0:	2302      	movs	r3, #2
 800eac2:	e000      	b.n	800eac6 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
  }
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	40008000 	.word	0x40008000

0800ead8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ead8:	b5b0      	push	{r4, r5, r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	431a      	orrs	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	431a      	orrs	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	69db      	ldr	r3, [r3, #28]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	4baf      	ldr	r3, [pc, #700]	; (800edc0 <UART_SetConfig+0x2e8>)
 800eb04:	4013      	ands	r3, r2
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	6812      	ldr	r2, [r2, #0]
 800eb0a:	69f9      	ldr	r1, [r7, #28]
 800eb0c:	430b      	orrs	r3, r1
 800eb0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	430a      	orrs	r2, r1
 800eb24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4aa4      	ldr	r2, [pc, #656]	; (800edc4 <UART_SetConfig+0x2ec>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d004      	beq.n	800eb40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	69fa      	ldr	r2, [r7, #28]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	69fa      	ldr	r2, [r7, #28]
 800eb50:	430a      	orrs	r2, r1
 800eb52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a9b      	ldr	r2, [pc, #620]	; (800edc8 <UART_SetConfig+0x2f0>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d121      	bne.n	800eba2 <UART_SetConfig+0xca>
 800eb5e:	4b9b      	ldr	r3, [pc, #620]	; (800edcc <UART_SetConfig+0x2f4>)
 800eb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d817      	bhi.n	800eb9c <UART_SetConfig+0xc4>
 800eb6c:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0x9c>)
 800eb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb72:	bf00      	nop
 800eb74:	0800eb85 	.word	0x0800eb85
 800eb78:	0800eb91 	.word	0x0800eb91
 800eb7c:	0800eb8b 	.word	0x0800eb8b
 800eb80:	0800eb97 	.word	0x0800eb97
 800eb84:	2301      	movs	r3, #1
 800eb86:	76fb      	strb	r3, [r7, #27]
 800eb88:	e070      	b.n	800ec6c <UART_SetConfig+0x194>
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	76fb      	strb	r3, [r7, #27]
 800eb8e:	e06d      	b.n	800ec6c <UART_SetConfig+0x194>
 800eb90:	2304      	movs	r3, #4
 800eb92:	76fb      	strb	r3, [r7, #27]
 800eb94:	e06a      	b.n	800ec6c <UART_SetConfig+0x194>
 800eb96:	2308      	movs	r3, #8
 800eb98:	76fb      	strb	r3, [r7, #27]
 800eb9a:	e067      	b.n	800ec6c <UART_SetConfig+0x194>
 800eb9c:	2310      	movs	r3, #16
 800eb9e:	76fb      	strb	r3, [r7, #27]
 800eba0:	e064      	b.n	800ec6c <UART_SetConfig+0x194>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a8a      	ldr	r2, [pc, #552]	; (800edd0 <UART_SetConfig+0x2f8>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d132      	bne.n	800ec12 <UART_SetConfig+0x13a>
 800ebac:	4b87      	ldr	r3, [pc, #540]	; (800edcc <UART_SetConfig+0x2f4>)
 800ebae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebb2:	f003 030c 	and.w	r3, r3, #12
 800ebb6:	2b0c      	cmp	r3, #12
 800ebb8:	d828      	bhi.n	800ec0c <UART_SetConfig+0x134>
 800ebba:	a201      	add	r2, pc, #4	; (adr r2, 800ebc0 <UART_SetConfig+0xe8>)
 800ebbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc0:	0800ebf5 	.word	0x0800ebf5
 800ebc4:	0800ec0d 	.word	0x0800ec0d
 800ebc8:	0800ec0d 	.word	0x0800ec0d
 800ebcc:	0800ec0d 	.word	0x0800ec0d
 800ebd0:	0800ec01 	.word	0x0800ec01
 800ebd4:	0800ec0d 	.word	0x0800ec0d
 800ebd8:	0800ec0d 	.word	0x0800ec0d
 800ebdc:	0800ec0d 	.word	0x0800ec0d
 800ebe0:	0800ebfb 	.word	0x0800ebfb
 800ebe4:	0800ec0d 	.word	0x0800ec0d
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec0d 	.word	0x0800ec0d
 800ebf0:	0800ec07 	.word	0x0800ec07
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	76fb      	strb	r3, [r7, #27]
 800ebf8:	e038      	b.n	800ec6c <UART_SetConfig+0x194>
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	76fb      	strb	r3, [r7, #27]
 800ebfe:	e035      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec00:	2304      	movs	r3, #4
 800ec02:	76fb      	strb	r3, [r7, #27]
 800ec04:	e032      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec06:	2308      	movs	r3, #8
 800ec08:	76fb      	strb	r3, [r7, #27]
 800ec0a:	e02f      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	76fb      	strb	r3, [r7, #27]
 800ec10:	e02c      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a6b      	ldr	r2, [pc, #428]	; (800edc4 <UART_SetConfig+0x2ec>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d125      	bne.n	800ec68 <UART_SetConfig+0x190>
 800ec1c:	4b6b      	ldr	r3, [pc, #428]	; (800edcc <UART_SetConfig+0x2f4>)
 800ec1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ec26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec2a:	d017      	beq.n	800ec5c <UART_SetConfig+0x184>
 800ec2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec30:	d817      	bhi.n	800ec62 <UART_SetConfig+0x18a>
 800ec32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec36:	d00b      	beq.n	800ec50 <UART_SetConfig+0x178>
 800ec38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec3c:	d811      	bhi.n	800ec62 <UART_SetConfig+0x18a>
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <UART_SetConfig+0x172>
 800ec42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec46:	d006      	beq.n	800ec56 <UART_SetConfig+0x17e>
 800ec48:	e00b      	b.n	800ec62 <UART_SetConfig+0x18a>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	76fb      	strb	r3, [r7, #27]
 800ec4e:	e00d      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec50:	2302      	movs	r3, #2
 800ec52:	76fb      	strb	r3, [r7, #27]
 800ec54:	e00a      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec56:	2304      	movs	r3, #4
 800ec58:	76fb      	strb	r3, [r7, #27]
 800ec5a:	e007      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec5c:	2308      	movs	r3, #8
 800ec5e:	76fb      	strb	r3, [r7, #27]
 800ec60:	e004      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec62:	2310      	movs	r3, #16
 800ec64:	76fb      	strb	r3, [r7, #27]
 800ec66:	e001      	b.n	800ec6c <UART_SetConfig+0x194>
 800ec68:	2310      	movs	r3, #16
 800ec6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a54      	ldr	r2, [pc, #336]	; (800edc4 <UART_SetConfig+0x2ec>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d173      	bne.n	800ed5e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec76:	7efb      	ldrb	r3, [r7, #27]
 800ec78:	2b08      	cmp	r3, #8
 800ec7a:	d824      	bhi.n	800ecc6 <UART_SetConfig+0x1ee>
 800ec7c:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <UART_SetConfig+0x1ac>)
 800ec7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec82:	bf00      	nop
 800ec84:	0800eca9 	.word	0x0800eca9
 800ec88:	0800ecc7 	.word	0x0800ecc7
 800ec8c:	0800ecb1 	.word	0x0800ecb1
 800ec90:	0800ecc7 	.word	0x0800ecc7
 800ec94:	0800ecb7 	.word	0x0800ecb7
 800ec98:	0800ecc7 	.word	0x0800ecc7
 800ec9c:	0800ecc7 	.word	0x0800ecc7
 800eca0:	0800ecc7 	.word	0x0800ecc7
 800eca4:	0800ecbf 	.word	0x0800ecbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eca8:	f7fd fe6c 	bl	800c984 <HAL_RCC_GetPCLK1Freq>
 800ecac:	6178      	str	r0, [r7, #20]
        break;
 800ecae:	e00f      	b.n	800ecd0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ecb0:	4b48      	ldr	r3, [pc, #288]	; (800edd4 <UART_SetConfig+0x2fc>)
 800ecb2:	617b      	str	r3, [r7, #20]
        break;
 800ecb4:	e00c      	b.n	800ecd0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ecb6:	f7fd fdcd 	bl	800c854 <HAL_RCC_GetSysClockFreq>
 800ecba:	6178      	str	r0, [r7, #20]
        break;
 800ecbc:	e008      	b.n	800ecd0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecc2:	617b      	str	r3, [r7, #20]
        break;
 800ecc4:	e004      	b.n	800ecd0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ecca:	2301      	movs	r3, #1
 800eccc:	76bb      	strb	r3, [r7, #26]
        break;
 800ecce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 80fe 	beq.w	800eed4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	4413      	add	r3, r2
 800ece2:	697a      	ldr	r2, [r7, #20]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d305      	bcc.n	800ecf4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d902      	bls.n	800ecfa <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	76bb      	strb	r3, [r7, #26]
 800ecf8:	e0ec      	b.n	800eed4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f04f 0100 	mov.w	r1, #0
 800ed02:	f04f 0200 	mov.w	r2, #0
 800ed06:	f04f 0300 	mov.w	r3, #0
 800ed0a:	020b      	lsls	r3, r1, #8
 800ed0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed10:	0202      	lsls	r2, r0, #8
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	6849      	ldr	r1, [r1, #4]
 800ed16:	0849      	lsrs	r1, r1, #1
 800ed18:	4608      	mov	r0, r1
 800ed1a:	f04f 0100 	mov.w	r1, #0
 800ed1e:	1814      	adds	r4, r2, r0
 800ed20:	eb43 0501 	adc.w	r5, r3, r1
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f04f 0300 	mov.w	r3, #0
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f1 ffb9 	bl	8000ca8 <__aeabi_uldivmod>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed44:	d308      	bcc.n	800ed58 <UART_SetConfig+0x280>
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed4c:	d204      	bcs.n	800ed58 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	60da      	str	r2, [r3, #12]
 800ed56:	e0bd      	b.n	800eed4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	76bb      	strb	r3, [r7, #26]
 800ed5c:	e0ba      	b.n	800eed4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	69db      	ldr	r3, [r3, #28]
 800ed62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed66:	d168      	bne.n	800ee3a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800ed68:	7efb      	ldrb	r3, [r7, #27]
 800ed6a:	2b08      	cmp	r3, #8
 800ed6c:	d834      	bhi.n	800edd8 <UART_SetConfig+0x300>
 800ed6e:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <UART_SetConfig+0x29c>)
 800ed70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed74:	0800ed99 	.word	0x0800ed99
 800ed78:	0800eda1 	.word	0x0800eda1
 800ed7c:	0800eda9 	.word	0x0800eda9
 800ed80:	0800edd9 	.word	0x0800edd9
 800ed84:	0800edaf 	.word	0x0800edaf
 800ed88:	0800edd9 	.word	0x0800edd9
 800ed8c:	0800edd9 	.word	0x0800edd9
 800ed90:	0800edd9 	.word	0x0800edd9
 800ed94:	0800edb7 	.word	0x0800edb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed98:	f7fd fdf4 	bl	800c984 <HAL_RCC_GetPCLK1Freq>
 800ed9c:	6178      	str	r0, [r7, #20]
        break;
 800ed9e:	e020      	b.n	800ede2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eda0:	f7fd fe06 	bl	800c9b0 <HAL_RCC_GetPCLK2Freq>
 800eda4:	6178      	str	r0, [r7, #20]
        break;
 800eda6:	e01c      	b.n	800ede2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eda8:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <UART_SetConfig+0x2fc>)
 800edaa:	617b      	str	r3, [r7, #20]
        break;
 800edac:	e019      	b.n	800ede2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800edae:	f7fd fd51 	bl	800c854 <HAL_RCC_GetSysClockFreq>
 800edb2:	6178      	str	r0, [r7, #20]
        break;
 800edb4:	e015      	b.n	800ede2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edba:	617b      	str	r3, [r7, #20]
        break;
 800edbc:	e011      	b.n	800ede2 <UART_SetConfig+0x30a>
 800edbe:	bf00      	nop
 800edc0:	efff69f3 	.word	0xefff69f3
 800edc4:	40008000 	.word	0x40008000
 800edc8:	40013800 	.word	0x40013800
 800edcc:	40021000 	.word	0x40021000
 800edd0:	40004400 	.word	0x40004400
 800edd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	76bb      	strb	r3, [r7, #26]
        break;
 800ede0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d075      	beq.n	800eed4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	005a      	lsls	r2, r3, #1
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	085b      	lsrs	r3, r3, #1
 800edf2:	441a      	add	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	2b0f      	cmp	r3, #15
 800ee04:	d916      	bls.n	800ee34 <UART_SetConfig+0x35c>
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee0c:	d212      	bcs.n	800ee34 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	f023 030f 	bic.w	r3, r3, #15
 800ee16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	085b      	lsrs	r3, r3, #1
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	f003 0307 	and.w	r3, r3, #7
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	89fb      	ldrh	r3, [r7, #14]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	89fa      	ldrh	r2, [r7, #14]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	e04f      	b.n	800eed4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800ee34:	2301      	movs	r3, #1
 800ee36:	76bb      	strb	r3, [r7, #26]
 800ee38:	e04c      	b.n	800eed4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee3a:	7efb      	ldrb	r3, [r7, #27]
 800ee3c:	2b08      	cmp	r3, #8
 800ee3e:	d828      	bhi.n	800ee92 <UART_SetConfig+0x3ba>
 800ee40:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x370>)
 800ee42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee46:	bf00      	nop
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	0800ee93 	.word	0x0800ee93
 800ee58:	0800ee83 	.word	0x0800ee83
 800ee5c:	0800ee93 	.word	0x0800ee93
 800ee60:	0800ee93 	.word	0x0800ee93
 800ee64:	0800ee93 	.word	0x0800ee93
 800ee68:	0800ee8b 	.word	0x0800ee8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee6c:	f7fd fd8a 	bl	800c984 <HAL_RCC_GetPCLK1Freq>
 800ee70:	6178      	str	r0, [r7, #20]
        break;
 800ee72:	e013      	b.n	800ee9c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee74:	f7fd fd9c 	bl	800c9b0 <HAL_RCC_GetPCLK2Freq>
 800ee78:	6178      	str	r0, [r7, #20]
        break;
 800ee7a:	e00f      	b.n	800ee9c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee7c:	4b1b      	ldr	r3, [pc, #108]	; (800eeec <UART_SetConfig+0x414>)
 800ee7e:	617b      	str	r3, [r7, #20]
        break;
 800ee80:	e00c      	b.n	800ee9c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee82:	f7fd fce7 	bl	800c854 <HAL_RCC_GetSysClockFreq>
 800ee86:	6178      	str	r0, [r7, #20]
        break;
 800ee88:	e008      	b.n	800ee9c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee8e:	617b      	str	r3, [r7, #20]
        break;
 800ee90:	e004      	b.n	800ee9c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800ee92:	2300      	movs	r3, #0
 800ee94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	76bb      	strb	r3, [r7, #26]
        break;
 800ee9a:	bf00      	nop
    }

    if (pclk != 0U)
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d018      	beq.n	800eed4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	085a      	lsrs	r2, r3, #1
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	441a      	add	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	2b0f      	cmp	r3, #15
 800eebc:	d908      	bls.n	800eed0 <UART_SetConfig+0x3f8>
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eec4:	d204      	bcs.n	800eed0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	693a      	ldr	r2, [r7, #16]
 800eecc:	60da      	str	r2, [r3, #12]
 800eece:	e001      	b.n	800eed4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800eee0:	7ebb      	ldrb	r3, [r7, #26]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3720      	adds	r7, #32
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bdb0      	pop	{r4, r5, r7, pc}
 800eeea:	bf00      	nop
 800eeec:	00f42400 	.word	0x00f42400

0800eef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00a      	beq.n	800ef1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00a      	beq.n	800ef3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	430a      	orrs	r2, r1
 800ef3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef40:	f003 0304 	and.w	r3, r3, #4
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00a      	beq.n	800ef5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef62:	f003 0308 	and.w	r3, r3, #8
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00a      	beq.n	800ef80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	430a      	orrs	r2, r1
 800ef7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef84:	f003 0310 	and.w	r3, r3, #16
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa6:	f003 0320 	and.w	r3, r3, #32
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00a      	beq.n	800efc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	430a      	orrs	r2, r1
 800efc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d01a      	beq.n	800f006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efee:	d10a      	bne.n	800f006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	430a      	orrs	r2, r1
 800f004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00a      	beq.n	800f028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	430a      	orrs	r2, r1
 800f026:	605a      	str	r2, [r3, #4]
  }
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af02      	add	r7, sp, #8
 800f03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f044:	f7f8 fdb2 	bl	8007bac <HAL_GetTick>
 800f048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b08      	cmp	r3, #8
 800f056:	d10e      	bne.n	800f076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f82d 	bl	800f0c6 <UART_WaitOnFlagUntilTimeout>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f072:	2303      	movs	r3, #3
 800f074:	e023      	b.n	800f0be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f003 0304 	and.w	r3, r3, #4
 800f080:	2b04      	cmp	r3, #4
 800f082:	d10e      	bne.n	800f0a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f817 	bl	800f0c6 <UART_WaitOnFlagUntilTimeout>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e00d      	b.n	800f0be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	60f8      	str	r0, [r7, #12]
 800f0ce:	60b9      	str	r1, [r7, #8]
 800f0d0:	603b      	str	r3, [r7, #0]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0d6:	e05e      	b.n	800f196 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0de:	d05a      	beq.n	800f196 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0e0:	f7f8 fd64 	bl	8007bac <HAL_GetTick>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	69ba      	ldr	r2, [r7, #24]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d302      	bcc.n	800f0f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d11b      	bne.n	800f12e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f104:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	689a      	ldr	r2, [r3, #8]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f022 0201 	bic.w	r2, r2, #1
 800f114:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2220      	movs	r2, #32
 800f11a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2220      	movs	r2, #32
 800f120:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f12a:	2303      	movs	r3, #3
 800f12c:	e043      	b.n	800f1b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f003 0304 	and.w	r3, r3, #4
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d02c      	beq.n	800f196 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f14a:	d124      	bne.n	800f196 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f154:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f164:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689a      	ldr	r2, [r3, #8]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f022 0201 	bic.w	r2, r2, #1
 800f174:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2220      	movs	r2, #32
 800f17a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2220      	movs	r2, #32
 800f180:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2220      	movs	r2, #32
 800f186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f192:	2303      	movs	r3, #3
 800f194:	e00f      	b.n	800f1b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69da      	ldr	r2, [r3, #28]
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	4013      	ands	r3, r2
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	bf0c      	ite	eq
 800f1a6:	2301      	moveq	r3, #1
 800f1a8:	2300      	movne	r3, #0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	79fb      	ldrb	r3, [r7, #7]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d091      	beq.n	800f0d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	88fa      	ldrh	r2, [r7, #6]
 800f1d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	88fa      	ldrh	r2, [r7, #6]
 800f1e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1f2:	d10e      	bne.n	800f212 <UART_Start_Receive_IT+0x52>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d105      	bne.n	800f208 <UART_Start_Receive_IT+0x48>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f206:	e02d      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	22ff      	movs	r2, #255	; 0xff
 800f20c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f210:	e028      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10d      	bne.n	800f236 <UART_Start_Receive_IT+0x76>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d104      	bne.n	800f22c <UART_Start_Receive_IT+0x6c>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	22ff      	movs	r2, #255	; 0xff
 800f226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f22a:	e01b      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	227f      	movs	r2, #127	; 0x7f
 800f230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f234:	e016      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f23e:	d10d      	bne.n	800f25c <UART_Start_Receive_IT+0x9c>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <UART_Start_Receive_IT+0x92>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	227f      	movs	r2, #127	; 0x7f
 800f24c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f250:	e008      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	223f      	movs	r2, #63	; 0x3f
 800f256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f25a:	e003      	b.n	800f264 <UART_Start_Receive_IT+0xa4>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2222      	movs	r2, #34	; 0x22
 800f270:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	689a      	ldr	r2, [r3, #8]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f042 0201 	orr.w	r2, r2, #1
 800f280:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f28a:	d107      	bne.n	800f29c <UART_Start_Receive_IT+0xdc>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d103      	bne.n	800f29c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	4a0c      	ldr	r2, [pc, #48]	; (800f2c8 <UART_Start_Receive_IT+0x108>)
 800f298:	665a      	str	r2, [r3, #100]	; 0x64
 800f29a:	e002      	b.n	800f2a2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	4a0b      	ldr	r2, [pc, #44]	; (800f2cc <UART_Start_Receive_IT+0x10c>)
 800f2a0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f2b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	0800f5cb 	.word	0x0800f5cb
 800f2cc:	0800f4f3 	.word	0x0800f4f3

0800f2d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f2e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	689a      	ldr	r2, [r3, #8]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f022 0201 	bic.w	r2, r2, #1
 800f2f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d107      	bne.n	800f310 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 0210 	bic.w	r2, r2, #16
 800f30e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2220      	movs	r2, #32
 800f314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f322:	bf00      	nop
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f33a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f7f6 fe05 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f352:	bf00      	nop
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}

0800f35a <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f35a:	b580      	push	{r7, lr}
 800f35c:	b084      	sub	sp, #16
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f366:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2220      	movs	r2, #32
 800f374:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f7ff fb56 	bl	800ea28 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f37c:	bf00      	nop
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f390:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2200      	movs	r2, #0
 800f396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	220f      	movs	r2, #15
 800f3a0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	8b1b      	ldrh	r3, [r3, #24]
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f042 0208 	orr.w	r2, r2, #8
 800f3b2:	b292      	uxth	r2, r2
 800f3b4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2220      	movs	r2, #32
 800f3ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f7ff fb3a 	bl	800ea3c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3c8:	bf00      	nop
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3dc:	2b21      	cmp	r3, #33	; 0x21
 800f3de:	d12b      	bne.n	800f438 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d110      	bne.n	800f40e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f40a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f40c:	e014      	b.n	800f438 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f412:	781a      	ldrb	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	b292      	uxth	r2, r2
 800f41a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	3b01      	subs	r3, #1
 800f430:	b29a      	uxth	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f450:	2b21      	cmp	r3, #33	; 0x21
 800f452:	d12f      	bne.n	800f4b4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d110      	bne.n	800f482 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f46e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f47e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f480:	e018      	b.n	800f4b4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f486:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	881a      	ldrh	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f494:	b292      	uxth	r2, r2
 800f496:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f49c:	1c9a      	adds	r2, r3, #2
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f4b4:	bf00      	nop
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2220      	movs	r2, #32
 800f4dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7f6 fd0d 	bl	8005f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4ea:	bf00      	nop
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b084      	sub	sp, #16
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f500:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f506:	2b22      	cmp	r3, #34	; 0x22
 800f508:	d151      	bne.n	800f5ae <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f510:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f512:	89bb      	ldrh	r3, [r7, #12]
 800f514:	b2d9      	uxtb	r1, r3
 800f516:	89fb      	ldrh	r3, [r7, #14]
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f51e:	400a      	ands	r2, r1
 800f520:	b2d2      	uxtb	r2, r2
 800f522:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f534:	b29b      	uxth	r3, r3
 800f536:	3b01      	subs	r3, #1
 800f538:	b29a      	uxth	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f546:	b29b      	uxth	r3, r3
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d13a      	bne.n	800f5c2 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f55a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	689a      	ldr	r2, [r3, #8]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f022 0201 	bic.w	r2, r2, #1
 800f56a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2220      	movs	r2, #32
 800f570:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d10f      	bne.n	800f5a0 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 0210 	bic.w	r2, r2, #16
 800f58e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f596:	4619      	mov	r1, r3
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff fa59 	bl	800ea50 <HAL_UARTEx_RxEventCallback>
 800f59e:	e002      	b.n	800f5a6 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7f6 fcbf 	bl	8005f24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5ac:	e009      	b.n	800f5c2 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	8b1b      	ldrh	r3, [r3, #24]
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f042 0208 	orr.w	r2, r2, #8
 800f5be:	b292      	uxth	r2, r2
 800f5c0:	831a      	strh	r2, [r3, #24]
}
 800f5c2:	bf00      	nop
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b084      	sub	sp, #16
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5d8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5de:	2b22      	cmp	r3, #34	; 0x22
 800f5e0:	d151      	bne.n	800f686 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5e8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ee:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f5f0:	89ba      	ldrh	r2, [r7, #12]
 800f5f2:	89fb      	ldrh	r3, [r7, #14]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f600:	1c9a      	adds	r2, r3, #2
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	3b01      	subs	r3, #1
 800f610:	b29a      	uxth	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f61e:	b29b      	uxth	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	d13a      	bne.n	800f69a <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f632:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	689a      	ldr	r2, [r3, #8]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f022 0201 	bic.w	r2, r2, #1
 800f642:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2220      	movs	r2, #32
 800f648:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f654:	2b01      	cmp	r3, #1
 800f656:	d10f      	bne.n	800f678 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f022 0210 	bic.w	r2, r2, #16
 800f666:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f66e:	4619      	mov	r1, r3
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff f9ed 	bl	800ea50 <HAL_UARTEx_RxEventCallback>
 800f676:	e002      	b.n	800f67e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7f6 fc53 	bl	8005f24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f684:	e009      	b.n	800f69a <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	8b1b      	ldrh	r3, [r3, #24]
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f042 0208 	orr.w	r2, r2, #8
 800f696:	b292      	uxth	r2, r2
 800f698:	831a      	strh	r2, [r3, #24]
}
 800f69a:	bf00      	nop
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	b083      	sub	sp, #12
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6aa:	bf00      	nop
 800f6ac:	370c      	adds	r7, #12
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
	...

0800f6b8 <__errno>:
 800f6b8:	4b01      	ldr	r3, [pc, #4]	; (800f6c0 <__errno+0x8>)
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	20000018 	.word	0x20000018

0800f6c4 <__libc_init_array>:
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	4d0d      	ldr	r5, [pc, #52]	; (800f6fc <__libc_init_array+0x38>)
 800f6c8:	4c0d      	ldr	r4, [pc, #52]	; (800f700 <__libc_init_array+0x3c>)
 800f6ca:	1b64      	subs	r4, r4, r5
 800f6cc:	10a4      	asrs	r4, r4, #2
 800f6ce:	2600      	movs	r6, #0
 800f6d0:	42a6      	cmp	r6, r4
 800f6d2:	d109      	bne.n	800f6e8 <__libc_init_array+0x24>
 800f6d4:	4d0b      	ldr	r5, [pc, #44]	; (800f704 <__libc_init_array+0x40>)
 800f6d6:	4c0c      	ldr	r4, [pc, #48]	; (800f708 <__libc_init_array+0x44>)
 800f6d8:	f003 ff60 	bl	801359c <_init>
 800f6dc:	1b64      	subs	r4, r4, r5
 800f6de:	10a4      	asrs	r4, r4, #2
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	42a6      	cmp	r6, r4
 800f6e4:	d105      	bne.n	800f6f2 <__libc_init_array+0x2e>
 800f6e6:	bd70      	pop	{r4, r5, r6, pc}
 800f6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ec:	4798      	blx	r3
 800f6ee:	3601      	adds	r6, #1
 800f6f0:	e7ee      	b.n	800f6d0 <__libc_init_array+0xc>
 800f6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f6:	4798      	blx	r3
 800f6f8:	3601      	adds	r6, #1
 800f6fa:	e7f2      	b.n	800f6e2 <__libc_init_array+0x1e>
 800f6fc:	08014a28 	.word	0x08014a28
 800f700:	08014a28 	.word	0x08014a28
 800f704:	08014a28 	.word	0x08014a28
 800f708:	08014a2c 	.word	0x08014a2c

0800f70c <memcpy>:
 800f70c:	440a      	add	r2, r1
 800f70e:	4291      	cmp	r1, r2
 800f710:	f100 33ff 	add.w	r3, r0, #4294967295
 800f714:	d100      	bne.n	800f718 <memcpy+0xc>
 800f716:	4770      	bx	lr
 800f718:	b510      	push	{r4, lr}
 800f71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f722:	4291      	cmp	r1, r2
 800f724:	d1f9      	bne.n	800f71a <memcpy+0xe>
 800f726:	bd10      	pop	{r4, pc}

0800f728 <memset>:
 800f728:	4402      	add	r2, r0
 800f72a:	4603      	mov	r3, r0
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d100      	bne.n	800f732 <memset+0xa>
 800f730:	4770      	bx	lr
 800f732:	f803 1b01 	strb.w	r1, [r3], #1
 800f736:	e7f9      	b.n	800f72c <memset+0x4>

0800f738 <__cvt>:
 800f738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	ec55 4b10 	vmov	r4, r5, d0
 800f740:	2d00      	cmp	r5, #0
 800f742:	460e      	mov	r6, r1
 800f744:	4619      	mov	r1, r3
 800f746:	462b      	mov	r3, r5
 800f748:	bfbb      	ittet	lt
 800f74a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f74e:	461d      	movlt	r5, r3
 800f750:	2300      	movge	r3, #0
 800f752:	232d      	movlt	r3, #45	; 0x2d
 800f754:	700b      	strb	r3, [r1, #0]
 800f756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f758:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f75c:	4691      	mov	r9, r2
 800f75e:	f023 0820 	bic.w	r8, r3, #32
 800f762:	bfbc      	itt	lt
 800f764:	4622      	movlt	r2, r4
 800f766:	4614      	movlt	r4, r2
 800f768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f76c:	d005      	beq.n	800f77a <__cvt+0x42>
 800f76e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f772:	d100      	bne.n	800f776 <__cvt+0x3e>
 800f774:	3601      	adds	r6, #1
 800f776:	2102      	movs	r1, #2
 800f778:	e000      	b.n	800f77c <__cvt+0x44>
 800f77a:	2103      	movs	r1, #3
 800f77c:	ab03      	add	r3, sp, #12
 800f77e:	9301      	str	r3, [sp, #4]
 800f780:	ab02      	add	r3, sp, #8
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	ec45 4b10 	vmov	d0, r4, r5
 800f788:	4653      	mov	r3, sl
 800f78a:	4632      	mov	r2, r6
 800f78c:	f000 fd10 	bl	80101b0 <_dtoa_r>
 800f790:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f794:	4607      	mov	r7, r0
 800f796:	d102      	bne.n	800f79e <__cvt+0x66>
 800f798:	f019 0f01 	tst.w	r9, #1
 800f79c:	d022      	beq.n	800f7e4 <__cvt+0xac>
 800f79e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f7a2:	eb07 0906 	add.w	r9, r7, r6
 800f7a6:	d110      	bne.n	800f7ca <__cvt+0x92>
 800f7a8:	783b      	ldrb	r3, [r7, #0]
 800f7aa:	2b30      	cmp	r3, #48	; 0x30
 800f7ac:	d10a      	bne.n	800f7c4 <__cvt+0x8c>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	f7f1 f997 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7ba:	b918      	cbnz	r0, 800f7c4 <__cvt+0x8c>
 800f7bc:	f1c6 0601 	rsb	r6, r6, #1
 800f7c0:	f8ca 6000 	str.w	r6, [sl]
 800f7c4:	f8da 3000 	ldr.w	r3, [sl]
 800f7c8:	4499      	add	r9, r3
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f7f1 f989 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7d6:	b108      	cbz	r0, 800f7dc <__cvt+0xa4>
 800f7d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7dc:	2230      	movs	r2, #48	; 0x30
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	454b      	cmp	r3, r9
 800f7e2:	d307      	bcc.n	800f7f4 <__cvt+0xbc>
 800f7e4:	9b03      	ldr	r3, [sp, #12]
 800f7e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7e8:	1bdb      	subs	r3, r3, r7
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	6013      	str	r3, [r2, #0]
 800f7ee:	b004      	add	sp, #16
 800f7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f4:	1c59      	adds	r1, r3, #1
 800f7f6:	9103      	str	r1, [sp, #12]
 800f7f8:	701a      	strb	r2, [r3, #0]
 800f7fa:	e7f0      	b.n	800f7de <__cvt+0xa6>

0800f7fc <__exponent>:
 800f7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7fe:	4603      	mov	r3, r0
 800f800:	2900      	cmp	r1, #0
 800f802:	bfb8      	it	lt
 800f804:	4249      	neglt	r1, r1
 800f806:	f803 2b02 	strb.w	r2, [r3], #2
 800f80a:	bfb4      	ite	lt
 800f80c:	222d      	movlt	r2, #45	; 0x2d
 800f80e:	222b      	movge	r2, #43	; 0x2b
 800f810:	2909      	cmp	r1, #9
 800f812:	7042      	strb	r2, [r0, #1]
 800f814:	dd2a      	ble.n	800f86c <__exponent+0x70>
 800f816:	f10d 0407 	add.w	r4, sp, #7
 800f81a:	46a4      	mov	ip, r4
 800f81c:	270a      	movs	r7, #10
 800f81e:	46a6      	mov	lr, r4
 800f820:	460a      	mov	r2, r1
 800f822:	fb91 f6f7 	sdiv	r6, r1, r7
 800f826:	fb07 1516 	mls	r5, r7, r6, r1
 800f82a:	3530      	adds	r5, #48	; 0x30
 800f82c:	2a63      	cmp	r2, #99	; 0x63
 800f82e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f832:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f836:	4631      	mov	r1, r6
 800f838:	dcf1      	bgt.n	800f81e <__exponent+0x22>
 800f83a:	3130      	adds	r1, #48	; 0x30
 800f83c:	f1ae 0502 	sub.w	r5, lr, #2
 800f840:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f844:	1c44      	adds	r4, r0, #1
 800f846:	4629      	mov	r1, r5
 800f848:	4561      	cmp	r1, ip
 800f84a:	d30a      	bcc.n	800f862 <__exponent+0x66>
 800f84c:	f10d 0209 	add.w	r2, sp, #9
 800f850:	eba2 020e 	sub.w	r2, r2, lr
 800f854:	4565      	cmp	r5, ip
 800f856:	bf88      	it	hi
 800f858:	2200      	movhi	r2, #0
 800f85a:	4413      	add	r3, r2
 800f85c:	1a18      	subs	r0, r3, r0
 800f85e:	b003      	add	sp, #12
 800f860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f866:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f86a:	e7ed      	b.n	800f848 <__exponent+0x4c>
 800f86c:	2330      	movs	r3, #48	; 0x30
 800f86e:	3130      	adds	r1, #48	; 0x30
 800f870:	7083      	strb	r3, [r0, #2]
 800f872:	70c1      	strb	r1, [r0, #3]
 800f874:	1d03      	adds	r3, r0, #4
 800f876:	e7f1      	b.n	800f85c <__exponent+0x60>

0800f878 <_printf_float>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	ed2d 8b02 	vpush	{d8}
 800f880:	b08d      	sub	sp, #52	; 0x34
 800f882:	460c      	mov	r4, r1
 800f884:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f888:	4616      	mov	r6, r2
 800f88a:	461f      	mov	r7, r3
 800f88c:	4605      	mov	r5, r0
 800f88e:	f001 fa7b 	bl	8010d88 <_localeconv_r>
 800f892:	f8d0 a000 	ldr.w	sl, [r0]
 800f896:	4650      	mov	r0, sl
 800f898:	f7f0 fca4 	bl	80001e4 <strlen>
 800f89c:	2300      	movs	r3, #0
 800f89e:	930a      	str	r3, [sp, #40]	; 0x28
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	9305      	str	r3, [sp, #20]
 800f8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f8ac:	3307      	adds	r3, #7
 800f8ae:	f023 0307 	bic.w	r3, r3, #7
 800f8b2:	f103 0208 	add.w	r2, r3, #8
 800f8b6:	f8c8 2000 	str.w	r2, [r8]
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f8c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f8c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8ca:	9307      	str	r3, [sp, #28]
 800f8cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8d0:	ee08 0a10 	vmov	s16, r0
 800f8d4:	4b9f      	ldr	r3, [pc, #636]	; (800fb54 <_printf_float+0x2dc>)
 800f8d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8da:	f04f 32ff 	mov.w	r2, #4294967295
 800f8de:	f7f1 f935 	bl	8000b4c <__aeabi_dcmpun>
 800f8e2:	bb88      	cbnz	r0, 800f948 <_printf_float+0xd0>
 800f8e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8e8:	4b9a      	ldr	r3, [pc, #616]	; (800fb54 <_printf_float+0x2dc>)
 800f8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ee:	f7f1 f90f 	bl	8000b10 <__aeabi_dcmple>
 800f8f2:	bb48      	cbnz	r0, 800f948 <_printf_float+0xd0>
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4640      	mov	r0, r8
 800f8fa:	4649      	mov	r1, r9
 800f8fc:	f7f1 f8fe 	bl	8000afc <__aeabi_dcmplt>
 800f900:	b110      	cbz	r0, 800f908 <_printf_float+0x90>
 800f902:	232d      	movs	r3, #45	; 0x2d
 800f904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f908:	4b93      	ldr	r3, [pc, #588]	; (800fb58 <_printf_float+0x2e0>)
 800f90a:	4894      	ldr	r0, [pc, #592]	; (800fb5c <_printf_float+0x2e4>)
 800f90c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f910:	bf94      	ite	ls
 800f912:	4698      	movls	r8, r3
 800f914:	4680      	movhi	r8, r0
 800f916:	2303      	movs	r3, #3
 800f918:	6123      	str	r3, [r4, #16]
 800f91a:	9b05      	ldr	r3, [sp, #20]
 800f91c:	f023 0204 	bic.w	r2, r3, #4
 800f920:	6022      	str	r2, [r4, #0]
 800f922:	f04f 0900 	mov.w	r9, #0
 800f926:	9700      	str	r7, [sp, #0]
 800f928:	4633      	mov	r3, r6
 800f92a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f92c:	4621      	mov	r1, r4
 800f92e:	4628      	mov	r0, r5
 800f930:	f000 f9d8 	bl	800fce4 <_printf_common>
 800f934:	3001      	adds	r0, #1
 800f936:	f040 8090 	bne.w	800fa5a <_printf_float+0x1e2>
 800f93a:	f04f 30ff 	mov.w	r0, #4294967295
 800f93e:	b00d      	add	sp, #52	; 0x34
 800f940:	ecbd 8b02 	vpop	{d8}
 800f944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f948:	4642      	mov	r2, r8
 800f94a:	464b      	mov	r3, r9
 800f94c:	4640      	mov	r0, r8
 800f94e:	4649      	mov	r1, r9
 800f950:	f7f1 f8fc 	bl	8000b4c <__aeabi_dcmpun>
 800f954:	b140      	cbz	r0, 800f968 <_printf_float+0xf0>
 800f956:	464b      	mov	r3, r9
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bfbc      	itt	lt
 800f95c:	232d      	movlt	r3, #45	; 0x2d
 800f95e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f962:	487f      	ldr	r0, [pc, #508]	; (800fb60 <_printf_float+0x2e8>)
 800f964:	4b7f      	ldr	r3, [pc, #508]	; (800fb64 <_printf_float+0x2ec>)
 800f966:	e7d1      	b.n	800f90c <_printf_float+0x94>
 800f968:	6863      	ldr	r3, [r4, #4]
 800f96a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f96e:	9206      	str	r2, [sp, #24]
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	d13f      	bne.n	800f9f4 <_printf_float+0x17c>
 800f974:	2306      	movs	r3, #6
 800f976:	6063      	str	r3, [r4, #4]
 800f978:	9b05      	ldr	r3, [sp, #20]
 800f97a:	6861      	ldr	r1, [r4, #4]
 800f97c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f980:	2300      	movs	r3, #0
 800f982:	9303      	str	r3, [sp, #12]
 800f984:	ab0a      	add	r3, sp, #40	; 0x28
 800f986:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f98a:	ab09      	add	r3, sp, #36	; 0x24
 800f98c:	ec49 8b10 	vmov	d0, r8, r9
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	6022      	str	r2, [r4, #0]
 800f994:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f998:	4628      	mov	r0, r5
 800f99a:	f7ff fecd 	bl	800f738 <__cvt>
 800f99e:	9b06      	ldr	r3, [sp, #24]
 800f9a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9a2:	2b47      	cmp	r3, #71	; 0x47
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	d108      	bne.n	800f9ba <_printf_float+0x142>
 800f9a8:	1cc8      	adds	r0, r1, #3
 800f9aa:	db02      	blt.n	800f9b2 <_printf_float+0x13a>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	4299      	cmp	r1, r3
 800f9b0:	dd41      	ble.n	800fa36 <_printf_float+0x1be>
 800f9b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f9b6:	fa5f fb8b 	uxtb.w	fp, fp
 800f9ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f9be:	d820      	bhi.n	800fa02 <_printf_float+0x18a>
 800f9c0:	3901      	subs	r1, #1
 800f9c2:	465a      	mov	r2, fp
 800f9c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f9c8:	9109      	str	r1, [sp, #36]	; 0x24
 800f9ca:	f7ff ff17 	bl	800f7fc <__exponent>
 800f9ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9d0:	1813      	adds	r3, r2, r0
 800f9d2:	2a01      	cmp	r2, #1
 800f9d4:	4681      	mov	r9, r0
 800f9d6:	6123      	str	r3, [r4, #16]
 800f9d8:	dc02      	bgt.n	800f9e0 <_printf_float+0x168>
 800f9da:	6822      	ldr	r2, [r4, #0]
 800f9dc:	07d2      	lsls	r2, r2, #31
 800f9de:	d501      	bpl.n	800f9e4 <_printf_float+0x16c>
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	6123      	str	r3, [r4, #16]
 800f9e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d09c      	beq.n	800f926 <_printf_float+0xae>
 800f9ec:	232d      	movs	r3, #45	; 0x2d
 800f9ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9f2:	e798      	b.n	800f926 <_printf_float+0xae>
 800f9f4:	9a06      	ldr	r2, [sp, #24]
 800f9f6:	2a47      	cmp	r2, #71	; 0x47
 800f9f8:	d1be      	bne.n	800f978 <_printf_float+0x100>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d1bc      	bne.n	800f978 <_printf_float+0x100>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e7b9      	b.n	800f976 <_printf_float+0xfe>
 800fa02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fa06:	d118      	bne.n	800fa3a <_printf_float+0x1c2>
 800fa08:	2900      	cmp	r1, #0
 800fa0a:	6863      	ldr	r3, [r4, #4]
 800fa0c:	dd0b      	ble.n	800fa26 <_printf_float+0x1ae>
 800fa0e:	6121      	str	r1, [r4, #16]
 800fa10:	b913      	cbnz	r3, 800fa18 <_printf_float+0x1a0>
 800fa12:	6822      	ldr	r2, [r4, #0]
 800fa14:	07d0      	lsls	r0, r2, #31
 800fa16:	d502      	bpl.n	800fa1e <_printf_float+0x1a6>
 800fa18:	3301      	adds	r3, #1
 800fa1a:	440b      	add	r3, r1
 800fa1c:	6123      	str	r3, [r4, #16]
 800fa1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fa20:	f04f 0900 	mov.w	r9, #0
 800fa24:	e7de      	b.n	800f9e4 <_printf_float+0x16c>
 800fa26:	b913      	cbnz	r3, 800fa2e <_printf_float+0x1b6>
 800fa28:	6822      	ldr	r2, [r4, #0]
 800fa2a:	07d2      	lsls	r2, r2, #31
 800fa2c:	d501      	bpl.n	800fa32 <_printf_float+0x1ba>
 800fa2e:	3302      	adds	r3, #2
 800fa30:	e7f4      	b.n	800fa1c <_printf_float+0x1a4>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e7f2      	b.n	800fa1c <_printf_float+0x1a4>
 800fa36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa3c:	4299      	cmp	r1, r3
 800fa3e:	db05      	blt.n	800fa4c <_printf_float+0x1d4>
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	6121      	str	r1, [r4, #16]
 800fa44:	07d8      	lsls	r0, r3, #31
 800fa46:	d5ea      	bpl.n	800fa1e <_printf_float+0x1a6>
 800fa48:	1c4b      	adds	r3, r1, #1
 800fa4a:	e7e7      	b.n	800fa1c <_printf_float+0x1a4>
 800fa4c:	2900      	cmp	r1, #0
 800fa4e:	bfd4      	ite	le
 800fa50:	f1c1 0202 	rsble	r2, r1, #2
 800fa54:	2201      	movgt	r2, #1
 800fa56:	4413      	add	r3, r2
 800fa58:	e7e0      	b.n	800fa1c <_printf_float+0x1a4>
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	055a      	lsls	r2, r3, #21
 800fa5e:	d407      	bmi.n	800fa70 <_printf_float+0x1f8>
 800fa60:	6923      	ldr	r3, [r4, #16]
 800fa62:	4642      	mov	r2, r8
 800fa64:	4631      	mov	r1, r6
 800fa66:	4628      	mov	r0, r5
 800fa68:	47b8      	blx	r7
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	d12c      	bne.n	800fac8 <_printf_float+0x250>
 800fa6e:	e764      	b.n	800f93a <_printf_float+0xc2>
 800fa70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa74:	f240 80e0 	bls.w	800fc38 <_printf_float+0x3c0>
 800fa78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f7f1 f832 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d034      	beq.n	800faf2 <_printf_float+0x27a>
 800fa88:	4a37      	ldr	r2, [pc, #220]	; (800fb68 <_printf_float+0x2f0>)
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	4631      	mov	r1, r6
 800fa8e:	4628      	mov	r0, r5
 800fa90:	47b8      	blx	r7
 800fa92:	3001      	adds	r0, #1
 800fa94:	f43f af51 	beq.w	800f93a <_printf_float+0xc2>
 800fa98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	db02      	blt.n	800faa6 <_printf_float+0x22e>
 800faa0:	6823      	ldr	r3, [r4, #0]
 800faa2:	07d8      	lsls	r0, r3, #31
 800faa4:	d510      	bpl.n	800fac8 <_printf_float+0x250>
 800faa6:	ee18 3a10 	vmov	r3, s16
 800faaa:	4652      	mov	r2, sl
 800faac:	4631      	mov	r1, r6
 800faae:	4628      	mov	r0, r5
 800fab0:	47b8      	blx	r7
 800fab2:	3001      	adds	r0, #1
 800fab4:	f43f af41 	beq.w	800f93a <_printf_float+0xc2>
 800fab8:	f04f 0800 	mov.w	r8, #0
 800fabc:	f104 091a 	add.w	r9, r4, #26
 800fac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fac2:	3b01      	subs	r3, #1
 800fac4:	4543      	cmp	r3, r8
 800fac6:	dc09      	bgt.n	800fadc <_printf_float+0x264>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	079b      	lsls	r3, r3, #30
 800facc:	f100 8105 	bmi.w	800fcda <_printf_float+0x462>
 800fad0:	68e0      	ldr	r0, [r4, #12]
 800fad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fad4:	4298      	cmp	r0, r3
 800fad6:	bfb8      	it	lt
 800fad8:	4618      	movlt	r0, r3
 800fada:	e730      	b.n	800f93e <_printf_float+0xc6>
 800fadc:	2301      	movs	r3, #1
 800fade:	464a      	mov	r2, r9
 800fae0:	4631      	mov	r1, r6
 800fae2:	4628      	mov	r0, r5
 800fae4:	47b8      	blx	r7
 800fae6:	3001      	adds	r0, #1
 800fae8:	f43f af27 	beq.w	800f93a <_printf_float+0xc2>
 800faec:	f108 0801 	add.w	r8, r8, #1
 800faf0:	e7e6      	b.n	800fac0 <_printf_float+0x248>
 800faf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dc39      	bgt.n	800fb6c <_printf_float+0x2f4>
 800faf8:	4a1b      	ldr	r2, [pc, #108]	; (800fb68 <_printf_float+0x2f0>)
 800fafa:	2301      	movs	r3, #1
 800fafc:	4631      	mov	r1, r6
 800fafe:	4628      	mov	r0, r5
 800fb00:	47b8      	blx	r7
 800fb02:	3001      	adds	r0, #1
 800fb04:	f43f af19 	beq.w	800f93a <_printf_float+0xc2>
 800fb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	d102      	bne.n	800fb16 <_printf_float+0x29e>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	07d9      	lsls	r1, r3, #31
 800fb14:	d5d8      	bpl.n	800fac8 <_printf_float+0x250>
 800fb16:	ee18 3a10 	vmov	r3, s16
 800fb1a:	4652      	mov	r2, sl
 800fb1c:	4631      	mov	r1, r6
 800fb1e:	4628      	mov	r0, r5
 800fb20:	47b8      	blx	r7
 800fb22:	3001      	adds	r0, #1
 800fb24:	f43f af09 	beq.w	800f93a <_printf_float+0xc2>
 800fb28:	f04f 0900 	mov.w	r9, #0
 800fb2c:	f104 0a1a 	add.w	sl, r4, #26
 800fb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb32:	425b      	negs	r3, r3
 800fb34:	454b      	cmp	r3, r9
 800fb36:	dc01      	bgt.n	800fb3c <_printf_float+0x2c4>
 800fb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb3a:	e792      	b.n	800fa62 <_printf_float+0x1ea>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	4652      	mov	r2, sl
 800fb40:	4631      	mov	r1, r6
 800fb42:	4628      	mov	r0, r5
 800fb44:	47b8      	blx	r7
 800fb46:	3001      	adds	r0, #1
 800fb48:	f43f aef7 	beq.w	800f93a <_printf_float+0xc2>
 800fb4c:	f109 0901 	add.w	r9, r9, #1
 800fb50:	e7ee      	b.n	800fb30 <_printf_float+0x2b8>
 800fb52:	bf00      	nop
 800fb54:	7fefffff 	.word	0x7fefffff
 800fb58:	08014464 	.word	0x08014464
 800fb5c:	08014468 	.word	0x08014468
 800fb60:	08014470 	.word	0x08014470
 800fb64:	0801446c 	.word	0x0801446c
 800fb68:	08014474 	.word	0x08014474
 800fb6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb70:	429a      	cmp	r2, r3
 800fb72:	bfa8      	it	ge
 800fb74:	461a      	movge	r2, r3
 800fb76:	2a00      	cmp	r2, #0
 800fb78:	4691      	mov	r9, r2
 800fb7a:	dc37      	bgt.n	800fbec <_printf_float+0x374>
 800fb7c:	f04f 0b00 	mov.w	fp, #0
 800fb80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb84:	f104 021a 	add.w	r2, r4, #26
 800fb88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb8a:	9305      	str	r3, [sp, #20]
 800fb8c:	eba3 0309 	sub.w	r3, r3, r9
 800fb90:	455b      	cmp	r3, fp
 800fb92:	dc33      	bgt.n	800fbfc <_printf_float+0x384>
 800fb94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	db3b      	blt.n	800fc14 <_printf_float+0x39c>
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	07da      	lsls	r2, r3, #31
 800fba0:	d438      	bmi.n	800fc14 <_printf_float+0x39c>
 800fba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fba4:	9b05      	ldr	r3, [sp, #20]
 800fba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	eba2 0901 	sub.w	r9, r2, r1
 800fbae:	4599      	cmp	r9, r3
 800fbb0:	bfa8      	it	ge
 800fbb2:	4699      	movge	r9, r3
 800fbb4:	f1b9 0f00 	cmp.w	r9, #0
 800fbb8:	dc35      	bgt.n	800fc26 <_printf_float+0x3ae>
 800fbba:	f04f 0800 	mov.w	r8, #0
 800fbbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbc2:	f104 0a1a 	add.w	sl, r4, #26
 800fbc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fbca:	1a9b      	subs	r3, r3, r2
 800fbcc:	eba3 0309 	sub.w	r3, r3, r9
 800fbd0:	4543      	cmp	r3, r8
 800fbd2:	f77f af79 	ble.w	800fac8 <_printf_float+0x250>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	4652      	mov	r2, sl
 800fbda:	4631      	mov	r1, r6
 800fbdc:	4628      	mov	r0, r5
 800fbde:	47b8      	blx	r7
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	f43f aeaa 	beq.w	800f93a <_printf_float+0xc2>
 800fbe6:	f108 0801 	add.w	r8, r8, #1
 800fbea:	e7ec      	b.n	800fbc6 <_printf_float+0x34e>
 800fbec:	4613      	mov	r3, r2
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4642      	mov	r2, r8
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	47b8      	blx	r7
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	d1c0      	bne.n	800fb7c <_printf_float+0x304>
 800fbfa:	e69e      	b.n	800f93a <_printf_float+0xc2>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	9205      	str	r2, [sp, #20]
 800fc04:	47b8      	blx	r7
 800fc06:	3001      	adds	r0, #1
 800fc08:	f43f ae97 	beq.w	800f93a <_printf_float+0xc2>
 800fc0c:	9a05      	ldr	r2, [sp, #20]
 800fc0e:	f10b 0b01 	add.w	fp, fp, #1
 800fc12:	e7b9      	b.n	800fb88 <_printf_float+0x310>
 800fc14:	ee18 3a10 	vmov	r3, s16
 800fc18:	4652      	mov	r2, sl
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	d1be      	bne.n	800fba2 <_printf_float+0x32a>
 800fc24:	e689      	b.n	800f93a <_printf_float+0xc2>
 800fc26:	9a05      	ldr	r2, [sp, #20]
 800fc28:	464b      	mov	r3, r9
 800fc2a:	4442      	add	r2, r8
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	4628      	mov	r0, r5
 800fc30:	47b8      	blx	r7
 800fc32:	3001      	adds	r0, #1
 800fc34:	d1c1      	bne.n	800fbba <_printf_float+0x342>
 800fc36:	e680      	b.n	800f93a <_printf_float+0xc2>
 800fc38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc3a:	2a01      	cmp	r2, #1
 800fc3c:	dc01      	bgt.n	800fc42 <_printf_float+0x3ca>
 800fc3e:	07db      	lsls	r3, r3, #31
 800fc40:	d538      	bpl.n	800fcb4 <_printf_float+0x43c>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4642      	mov	r2, r8
 800fc46:	4631      	mov	r1, r6
 800fc48:	4628      	mov	r0, r5
 800fc4a:	47b8      	blx	r7
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	f43f ae74 	beq.w	800f93a <_printf_float+0xc2>
 800fc52:	ee18 3a10 	vmov	r3, s16
 800fc56:	4652      	mov	r2, sl
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	47b8      	blx	r7
 800fc5e:	3001      	adds	r0, #1
 800fc60:	f43f ae6b 	beq.w	800f93a <_printf_float+0xc2>
 800fc64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	f7f0 ff3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc70:	b9d8      	cbnz	r0, 800fcaa <_printf_float+0x432>
 800fc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc74:	f108 0201 	add.w	r2, r8, #1
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	47b8      	blx	r7
 800fc80:	3001      	adds	r0, #1
 800fc82:	d10e      	bne.n	800fca2 <_printf_float+0x42a>
 800fc84:	e659      	b.n	800f93a <_printf_float+0xc2>
 800fc86:	2301      	movs	r3, #1
 800fc88:	4652      	mov	r2, sl
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	f43f ae52 	beq.w	800f93a <_printf_float+0xc2>
 800fc96:	f108 0801 	add.w	r8, r8, #1
 800fc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	4543      	cmp	r3, r8
 800fca0:	dcf1      	bgt.n	800fc86 <_printf_float+0x40e>
 800fca2:	464b      	mov	r3, r9
 800fca4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fca8:	e6dc      	b.n	800fa64 <_printf_float+0x1ec>
 800fcaa:	f04f 0800 	mov.w	r8, #0
 800fcae:	f104 0a1a 	add.w	sl, r4, #26
 800fcb2:	e7f2      	b.n	800fc9a <_printf_float+0x422>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	4642      	mov	r2, r8
 800fcb8:	e7df      	b.n	800fc7a <_printf_float+0x402>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	464a      	mov	r2, r9
 800fcbe:	4631      	mov	r1, r6
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	47b8      	blx	r7
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	f43f ae38 	beq.w	800f93a <_printf_float+0xc2>
 800fcca:	f108 0801 	add.w	r8, r8, #1
 800fcce:	68e3      	ldr	r3, [r4, #12]
 800fcd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcd2:	1a5b      	subs	r3, r3, r1
 800fcd4:	4543      	cmp	r3, r8
 800fcd6:	dcf0      	bgt.n	800fcba <_printf_float+0x442>
 800fcd8:	e6fa      	b.n	800fad0 <_printf_float+0x258>
 800fcda:	f04f 0800 	mov.w	r8, #0
 800fcde:	f104 0919 	add.w	r9, r4, #25
 800fce2:	e7f4      	b.n	800fcce <_printf_float+0x456>

0800fce4 <_printf_common>:
 800fce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce8:	4616      	mov	r6, r2
 800fcea:	4699      	mov	r9, r3
 800fcec:	688a      	ldr	r2, [r1, #8]
 800fcee:	690b      	ldr	r3, [r1, #16]
 800fcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	bfb8      	it	lt
 800fcf8:	4613      	movlt	r3, r2
 800fcfa:	6033      	str	r3, [r6, #0]
 800fcfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd00:	4607      	mov	r7, r0
 800fd02:	460c      	mov	r4, r1
 800fd04:	b10a      	cbz	r2, 800fd0a <_printf_common+0x26>
 800fd06:	3301      	adds	r3, #1
 800fd08:	6033      	str	r3, [r6, #0]
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	0699      	lsls	r1, r3, #26
 800fd0e:	bf42      	ittt	mi
 800fd10:	6833      	ldrmi	r3, [r6, #0]
 800fd12:	3302      	addmi	r3, #2
 800fd14:	6033      	strmi	r3, [r6, #0]
 800fd16:	6825      	ldr	r5, [r4, #0]
 800fd18:	f015 0506 	ands.w	r5, r5, #6
 800fd1c:	d106      	bne.n	800fd2c <_printf_common+0x48>
 800fd1e:	f104 0a19 	add.w	sl, r4, #25
 800fd22:	68e3      	ldr	r3, [r4, #12]
 800fd24:	6832      	ldr	r2, [r6, #0]
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	42ab      	cmp	r3, r5
 800fd2a:	dc26      	bgt.n	800fd7a <_printf_common+0x96>
 800fd2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd30:	1e13      	subs	r3, r2, #0
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	bf18      	it	ne
 800fd36:	2301      	movne	r3, #1
 800fd38:	0692      	lsls	r2, r2, #26
 800fd3a:	d42b      	bmi.n	800fd94 <_printf_common+0xb0>
 800fd3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd40:	4649      	mov	r1, r9
 800fd42:	4638      	mov	r0, r7
 800fd44:	47c0      	blx	r8
 800fd46:	3001      	adds	r0, #1
 800fd48:	d01e      	beq.n	800fd88 <_printf_common+0xa4>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	68e5      	ldr	r5, [r4, #12]
 800fd4e:	6832      	ldr	r2, [r6, #0]
 800fd50:	f003 0306 	and.w	r3, r3, #6
 800fd54:	2b04      	cmp	r3, #4
 800fd56:	bf08      	it	eq
 800fd58:	1aad      	subeq	r5, r5, r2
 800fd5a:	68a3      	ldr	r3, [r4, #8]
 800fd5c:	6922      	ldr	r2, [r4, #16]
 800fd5e:	bf0c      	ite	eq
 800fd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd64:	2500      	movne	r5, #0
 800fd66:	4293      	cmp	r3, r2
 800fd68:	bfc4      	itt	gt
 800fd6a:	1a9b      	subgt	r3, r3, r2
 800fd6c:	18ed      	addgt	r5, r5, r3
 800fd6e:	2600      	movs	r6, #0
 800fd70:	341a      	adds	r4, #26
 800fd72:	42b5      	cmp	r5, r6
 800fd74:	d11a      	bne.n	800fdac <_printf_common+0xc8>
 800fd76:	2000      	movs	r0, #0
 800fd78:	e008      	b.n	800fd8c <_printf_common+0xa8>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	4652      	mov	r2, sl
 800fd7e:	4649      	mov	r1, r9
 800fd80:	4638      	mov	r0, r7
 800fd82:	47c0      	blx	r8
 800fd84:	3001      	adds	r0, #1
 800fd86:	d103      	bne.n	800fd90 <_printf_common+0xac>
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd90:	3501      	adds	r5, #1
 800fd92:	e7c6      	b.n	800fd22 <_printf_common+0x3e>
 800fd94:	18e1      	adds	r1, r4, r3
 800fd96:	1c5a      	adds	r2, r3, #1
 800fd98:	2030      	movs	r0, #48	; 0x30
 800fd9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd9e:	4422      	add	r2, r4
 800fda0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fda4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fda8:	3302      	adds	r3, #2
 800fdaa:	e7c7      	b.n	800fd3c <_printf_common+0x58>
 800fdac:	2301      	movs	r3, #1
 800fdae:	4622      	mov	r2, r4
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	47c0      	blx	r8
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	d0e6      	beq.n	800fd88 <_printf_common+0xa4>
 800fdba:	3601      	adds	r6, #1
 800fdbc:	e7d9      	b.n	800fd72 <_printf_common+0x8e>
	...

0800fdc0 <_printf_i>:
 800fdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	4691      	mov	r9, r2
 800fdc8:	7e27      	ldrb	r7, [r4, #24]
 800fdca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdcc:	2f78      	cmp	r7, #120	; 0x78
 800fdce:	4680      	mov	r8, r0
 800fdd0:	469a      	mov	sl, r3
 800fdd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdd6:	d807      	bhi.n	800fde8 <_printf_i+0x28>
 800fdd8:	2f62      	cmp	r7, #98	; 0x62
 800fdda:	d80a      	bhi.n	800fdf2 <_printf_i+0x32>
 800fddc:	2f00      	cmp	r7, #0
 800fdde:	f000 80d8 	beq.w	800ff92 <_printf_i+0x1d2>
 800fde2:	2f58      	cmp	r7, #88	; 0x58
 800fde4:	f000 80a3 	beq.w	800ff2e <_printf_i+0x16e>
 800fde8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fdec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdf0:	e03a      	b.n	800fe68 <_printf_i+0xa8>
 800fdf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdf6:	2b15      	cmp	r3, #21
 800fdf8:	d8f6      	bhi.n	800fde8 <_printf_i+0x28>
 800fdfa:	a001      	add	r0, pc, #4	; (adr r0, 800fe00 <_printf_i+0x40>)
 800fdfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe00:	0800fe59 	.word	0x0800fe59
 800fe04:	0800fe6d 	.word	0x0800fe6d
 800fe08:	0800fde9 	.word	0x0800fde9
 800fe0c:	0800fde9 	.word	0x0800fde9
 800fe10:	0800fde9 	.word	0x0800fde9
 800fe14:	0800fde9 	.word	0x0800fde9
 800fe18:	0800fe6d 	.word	0x0800fe6d
 800fe1c:	0800fde9 	.word	0x0800fde9
 800fe20:	0800fde9 	.word	0x0800fde9
 800fe24:	0800fde9 	.word	0x0800fde9
 800fe28:	0800fde9 	.word	0x0800fde9
 800fe2c:	0800ff79 	.word	0x0800ff79
 800fe30:	0800fe9d 	.word	0x0800fe9d
 800fe34:	0800ff5b 	.word	0x0800ff5b
 800fe38:	0800fde9 	.word	0x0800fde9
 800fe3c:	0800fde9 	.word	0x0800fde9
 800fe40:	0800ff9b 	.word	0x0800ff9b
 800fe44:	0800fde9 	.word	0x0800fde9
 800fe48:	0800fe9d 	.word	0x0800fe9d
 800fe4c:	0800fde9 	.word	0x0800fde9
 800fe50:	0800fde9 	.word	0x0800fde9
 800fe54:	0800ff63 	.word	0x0800ff63
 800fe58:	680b      	ldr	r3, [r1, #0]
 800fe5a:	1d1a      	adds	r2, r3, #4
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	600a      	str	r2, [r1, #0]
 800fe60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e0a3      	b.n	800ffb4 <_printf_i+0x1f4>
 800fe6c:	6825      	ldr	r5, [r4, #0]
 800fe6e:	6808      	ldr	r0, [r1, #0]
 800fe70:	062e      	lsls	r6, r5, #24
 800fe72:	f100 0304 	add.w	r3, r0, #4
 800fe76:	d50a      	bpl.n	800fe8e <_printf_i+0xce>
 800fe78:	6805      	ldr	r5, [r0, #0]
 800fe7a:	600b      	str	r3, [r1, #0]
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	da03      	bge.n	800fe88 <_printf_i+0xc8>
 800fe80:	232d      	movs	r3, #45	; 0x2d
 800fe82:	426d      	negs	r5, r5
 800fe84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe88:	485e      	ldr	r0, [pc, #376]	; (8010004 <_printf_i+0x244>)
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	e019      	b.n	800fec2 <_printf_i+0x102>
 800fe8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe92:	6805      	ldr	r5, [r0, #0]
 800fe94:	600b      	str	r3, [r1, #0]
 800fe96:	bf18      	it	ne
 800fe98:	b22d      	sxthne	r5, r5
 800fe9a:	e7ef      	b.n	800fe7c <_printf_i+0xbc>
 800fe9c:	680b      	ldr	r3, [r1, #0]
 800fe9e:	6825      	ldr	r5, [r4, #0]
 800fea0:	1d18      	adds	r0, r3, #4
 800fea2:	6008      	str	r0, [r1, #0]
 800fea4:	0628      	lsls	r0, r5, #24
 800fea6:	d501      	bpl.n	800feac <_printf_i+0xec>
 800fea8:	681d      	ldr	r5, [r3, #0]
 800feaa:	e002      	b.n	800feb2 <_printf_i+0xf2>
 800feac:	0669      	lsls	r1, r5, #25
 800feae:	d5fb      	bpl.n	800fea8 <_printf_i+0xe8>
 800feb0:	881d      	ldrh	r5, [r3, #0]
 800feb2:	4854      	ldr	r0, [pc, #336]	; (8010004 <_printf_i+0x244>)
 800feb4:	2f6f      	cmp	r7, #111	; 0x6f
 800feb6:	bf0c      	ite	eq
 800feb8:	2308      	moveq	r3, #8
 800feba:	230a      	movne	r3, #10
 800febc:	2100      	movs	r1, #0
 800febe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fec2:	6866      	ldr	r6, [r4, #4]
 800fec4:	60a6      	str	r6, [r4, #8]
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	bfa2      	ittt	ge
 800feca:	6821      	ldrge	r1, [r4, #0]
 800fecc:	f021 0104 	bicge.w	r1, r1, #4
 800fed0:	6021      	strge	r1, [r4, #0]
 800fed2:	b90d      	cbnz	r5, 800fed8 <_printf_i+0x118>
 800fed4:	2e00      	cmp	r6, #0
 800fed6:	d04d      	beq.n	800ff74 <_printf_i+0x1b4>
 800fed8:	4616      	mov	r6, r2
 800feda:	fbb5 f1f3 	udiv	r1, r5, r3
 800fede:	fb03 5711 	mls	r7, r3, r1, r5
 800fee2:	5dc7      	ldrb	r7, [r0, r7]
 800fee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fee8:	462f      	mov	r7, r5
 800feea:	42bb      	cmp	r3, r7
 800feec:	460d      	mov	r5, r1
 800feee:	d9f4      	bls.n	800feda <_printf_i+0x11a>
 800fef0:	2b08      	cmp	r3, #8
 800fef2:	d10b      	bne.n	800ff0c <_printf_i+0x14c>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	07df      	lsls	r7, r3, #31
 800fef8:	d508      	bpl.n	800ff0c <_printf_i+0x14c>
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	6861      	ldr	r1, [r4, #4]
 800fefe:	4299      	cmp	r1, r3
 800ff00:	bfde      	ittt	le
 800ff02:	2330      	movle	r3, #48	; 0x30
 800ff04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff0c:	1b92      	subs	r2, r2, r6
 800ff0e:	6122      	str	r2, [r4, #16]
 800ff10:	f8cd a000 	str.w	sl, [sp]
 800ff14:	464b      	mov	r3, r9
 800ff16:	aa03      	add	r2, sp, #12
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	f7ff fee2 	bl	800fce4 <_printf_common>
 800ff20:	3001      	adds	r0, #1
 800ff22:	d14c      	bne.n	800ffbe <_printf_i+0x1fe>
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295
 800ff28:	b004      	add	sp, #16
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	4835      	ldr	r0, [pc, #212]	; (8010004 <_printf_i+0x244>)
 800ff30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	680e      	ldr	r6, [r1, #0]
 800ff38:	061f      	lsls	r7, r3, #24
 800ff3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff3e:	600e      	str	r6, [r1, #0]
 800ff40:	d514      	bpl.n	800ff6c <_printf_i+0x1ac>
 800ff42:	07d9      	lsls	r1, r3, #31
 800ff44:	bf44      	itt	mi
 800ff46:	f043 0320 	orrmi.w	r3, r3, #32
 800ff4a:	6023      	strmi	r3, [r4, #0]
 800ff4c:	b91d      	cbnz	r5, 800ff56 <_printf_i+0x196>
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	f023 0320 	bic.w	r3, r3, #32
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	2310      	movs	r3, #16
 800ff58:	e7b0      	b.n	800febc <_printf_i+0xfc>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	f043 0320 	orr.w	r3, r3, #32
 800ff60:	6023      	str	r3, [r4, #0]
 800ff62:	2378      	movs	r3, #120	; 0x78
 800ff64:	4828      	ldr	r0, [pc, #160]	; (8010008 <_printf_i+0x248>)
 800ff66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff6a:	e7e3      	b.n	800ff34 <_printf_i+0x174>
 800ff6c:	065e      	lsls	r6, r3, #25
 800ff6e:	bf48      	it	mi
 800ff70:	b2ad      	uxthmi	r5, r5
 800ff72:	e7e6      	b.n	800ff42 <_printf_i+0x182>
 800ff74:	4616      	mov	r6, r2
 800ff76:	e7bb      	b.n	800fef0 <_printf_i+0x130>
 800ff78:	680b      	ldr	r3, [r1, #0]
 800ff7a:	6826      	ldr	r6, [r4, #0]
 800ff7c:	6960      	ldr	r0, [r4, #20]
 800ff7e:	1d1d      	adds	r5, r3, #4
 800ff80:	600d      	str	r5, [r1, #0]
 800ff82:	0635      	lsls	r5, r6, #24
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	d501      	bpl.n	800ff8c <_printf_i+0x1cc>
 800ff88:	6018      	str	r0, [r3, #0]
 800ff8a:	e002      	b.n	800ff92 <_printf_i+0x1d2>
 800ff8c:	0671      	lsls	r1, r6, #25
 800ff8e:	d5fb      	bpl.n	800ff88 <_printf_i+0x1c8>
 800ff90:	8018      	strh	r0, [r3, #0]
 800ff92:	2300      	movs	r3, #0
 800ff94:	6123      	str	r3, [r4, #16]
 800ff96:	4616      	mov	r6, r2
 800ff98:	e7ba      	b.n	800ff10 <_printf_i+0x150>
 800ff9a:	680b      	ldr	r3, [r1, #0]
 800ff9c:	1d1a      	adds	r2, r3, #4
 800ff9e:	600a      	str	r2, [r1, #0]
 800ffa0:	681e      	ldr	r6, [r3, #0]
 800ffa2:	6862      	ldr	r2, [r4, #4]
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	f7f0 f92a 	bl	8000200 <memchr>
 800ffac:	b108      	cbz	r0, 800ffb2 <_printf_i+0x1f2>
 800ffae:	1b80      	subs	r0, r0, r6
 800ffb0:	6060      	str	r0, [r4, #4]
 800ffb2:	6863      	ldr	r3, [r4, #4]
 800ffb4:	6123      	str	r3, [r4, #16]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffbc:	e7a8      	b.n	800ff10 <_printf_i+0x150>
 800ffbe:	6923      	ldr	r3, [r4, #16]
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	4649      	mov	r1, r9
 800ffc4:	4640      	mov	r0, r8
 800ffc6:	47d0      	blx	sl
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d0ab      	beq.n	800ff24 <_printf_i+0x164>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	079b      	lsls	r3, r3, #30
 800ffd0:	d413      	bmi.n	800fffa <_printf_i+0x23a>
 800ffd2:	68e0      	ldr	r0, [r4, #12]
 800ffd4:	9b03      	ldr	r3, [sp, #12]
 800ffd6:	4298      	cmp	r0, r3
 800ffd8:	bfb8      	it	lt
 800ffda:	4618      	movlt	r0, r3
 800ffdc:	e7a4      	b.n	800ff28 <_printf_i+0x168>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	47d0      	blx	sl
 800ffe8:	3001      	adds	r0, #1
 800ffea:	d09b      	beq.n	800ff24 <_printf_i+0x164>
 800ffec:	3501      	adds	r5, #1
 800ffee:	68e3      	ldr	r3, [r4, #12]
 800fff0:	9903      	ldr	r1, [sp, #12]
 800fff2:	1a5b      	subs	r3, r3, r1
 800fff4:	42ab      	cmp	r3, r5
 800fff6:	dcf2      	bgt.n	800ffde <_printf_i+0x21e>
 800fff8:	e7eb      	b.n	800ffd2 <_printf_i+0x212>
 800fffa:	2500      	movs	r5, #0
 800fffc:	f104 0619 	add.w	r6, r4, #25
 8010000:	e7f5      	b.n	800ffee <_printf_i+0x22e>
 8010002:	bf00      	nop
 8010004:	08014476 	.word	0x08014476
 8010008:	08014487 	.word	0x08014487

0801000c <sniprintf>:
 801000c:	b40c      	push	{r2, r3}
 801000e:	b530      	push	{r4, r5, lr}
 8010010:	4b17      	ldr	r3, [pc, #92]	; (8010070 <sniprintf+0x64>)
 8010012:	1e0c      	subs	r4, r1, #0
 8010014:	681d      	ldr	r5, [r3, #0]
 8010016:	b09d      	sub	sp, #116	; 0x74
 8010018:	da08      	bge.n	801002c <sniprintf+0x20>
 801001a:	238b      	movs	r3, #139	; 0x8b
 801001c:	602b      	str	r3, [r5, #0]
 801001e:	f04f 30ff 	mov.w	r0, #4294967295
 8010022:	b01d      	add	sp, #116	; 0x74
 8010024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010028:	b002      	add	sp, #8
 801002a:	4770      	bx	lr
 801002c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010030:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010034:	bf14      	ite	ne
 8010036:	f104 33ff 	addne.w	r3, r4, #4294967295
 801003a:	4623      	moveq	r3, r4
 801003c:	9304      	str	r3, [sp, #16]
 801003e:	9307      	str	r3, [sp, #28]
 8010040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010044:	9002      	str	r0, [sp, #8]
 8010046:	9006      	str	r0, [sp, #24]
 8010048:	f8ad 3016 	strh.w	r3, [sp, #22]
 801004c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801004e:	ab21      	add	r3, sp, #132	; 0x84
 8010050:	a902      	add	r1, sp, #8
 8010052:	4628      	mov	r0, r5
 8010054:	9301      	str	r3, [sp, #4]
 8010056:	f001 fb37 	bl	80116c8 <_svfiprintf_r>
 801005a:	1c43      	adds	r3, r0, #1
 801005c:	bfbc      	itt	lt
 801005e:	238b      	movlt	r3, #139	; 0x8b
 8010060:	602b      	strlt	r3, [r5, #0]
 8010062:	2c00      	cmp	r4, #0
 8010064:	d0dd      	beq.n	8010022 <sniprintf+0x16>
 8010066:	9b02      	ldr	r3, [sp, #8]
 8010068:	2200      	movs	r2, #0
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	e7d9      	b.n	8010022 <sniprintf+0x16>
 801006e:	bf00      	nop
 8010070:	20000018 	.word	0x20000018

08010074 <strncpy>:
 8010074:	b510      	push	{r4, lr}
 8010076:	3901      	subs	r1, #1
 8010078:	4603      	mov	r3, r0
 801007a:	b132      	cbz	r2, 801008a <strncpy+0x16>
 801007c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010080:	f803 4b01 	strb.w	r4, [r3], #1
 8010084:	3a01      	subs	r2, #1
 8010086:	2c00      	cmp	r4, #0
 8010088:	d1f7      	bne.n	801007a <strncpy+0x6>
 801008a:	441a      	add	r2, r3
 801008c:	2100      	movs	r1, #0
 801008e:	4293      	cmp	r3, r2
 8010090:	d100      	bne.n	8010094 <strncpy+0x20>
 8010092:	bd10      	pop	{r4, pc}
 8010094:	f803 1b01 	strb.w	r1, [r3], #1
 8010098:	e7f9      	b.n	801008e <strncpy+0x1a>

0801009a <quorem>:
 801009a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009e:	6903      	ldr	r3, [r0, #16]
 80100a0:	690c      	ldr	r4, [r1, #16]
 80100a2:	42a3      	cmp	r3, r4
 80100a4:	4607      	mov	r7, r0
 80100a6:	f2c0 8081 	blt.w	80101ac <quorem+0x112>
 80100aa:	3c01      	subs	r4, #1
 80100ac:	f101 0814 	add.w	r8, r1, #20
 80100b0:	f100 0514 	add.w	r5, r0, #20
 80100b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100c2:	3301      	adds	r3, #1
 80100c4:	429a      	cmp	r2, r3
 80100c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80100ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80100d2:	d331      	bcc.n	8010138 <quorem+0x9e>
 80100d4:	f04f 0e00 	mov.w	lr, #0
 80100d8:	4640      	mov	r0, r8
 80100da:	46ac      	mov	ip, r5
 80100dc:	46f2      	mov	sl, lr
 80100de:	f850 2b04 	ldr.w	r2, [r0], #4
 80100e2:	b293      	uxth	r3, r2
 80100e4:	fb06 e303 	mla	r3, r6, r3, lr
 80100e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	ebaa 0303 	sub.w	r3, sl, r3
 80100f2:	0c12      	lsrs	r2, r2, #16
 80100f4:	f8dc a000 	ldr.w	sl, [ip]
 80100f8:	fb06 e202 	mla	r2, r6, r2, lr
 80100fc:	fa13 f38a 	uxtah	r3, r3, sl
 8010100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010104:	fa1f fa82 	uxth.w	sl, r2
 8010108:	f8dc 2000 	ldr.w	r2, [ip]
 801010c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010114:	b29b      	uxth	r3, r3
 8010116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801011a:	4581      	cmp	r9, r0
 801011c:	f84c 3b04 	str.w	r3, [ip], #4
 8010120:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010124:	d2db      	bcs.n	80100de <quorem+0x44>
 8010126:	f855 300b 	ldr.w	r3, [r5, fp]
 801012a:	b92b      	cbnz	r3, 8010138 <quorem+0x9e>
 801012c:	9b01      	ldr	r3, [sp, #4]
 801012e:	3b04      	subs	r3, #4
 8010130:	429d      	cmp	r5, r3
 8010132:	461a      	mov	r2, r3
 8010134:	d32e      	bcc.n	8010194 <quorem+0xfa>
 8010136:	613c      	str	r4, [r7, #16]
 8010138:	4638      	mov	r0, r7
 801013a:	f001 f8af 	bl	801129c <__mcmp>
 801013e:	2800      	cmp	r0, #0
 8010140:	db24      	blt.n	801018c <quorem+0xf2>
 8010142:	3601      	adds	r6, #1
 8010144:	4628      	mov	r0, r5
 8010146:	f04f 0c00 	mov.w	ip, #0
 801014a:	f858 2b04 	ldr.w	r2, [r8], #4
 801014e:	f8d0 e000 	ldr.w	lr, [r0]
 8010152:	b293      	uxth	r3, r2
 8010154:	ebac 0303 	sub.w	r3, ip, r3
 8010158:	0c12      	lsrs	r2, r2, #16
 801015a:	fa13 f38e 	uxtah	r3, r3, lr
 801015e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010162:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010166:	b29b      	uxth	r3, r3
 8010168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801016c:	45c1      	cmp	r9, r8
 801016e:	f840 3b04 	str.w	r3, [r0], #4
 8010172:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010176:	d2e8      	bcs.n	801014a <quorem+0xb0>
 8010178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801017c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010180:	b922      	cbnz	r2, 801018c <quorem+0xf2>
 8010182:	3b04      	subs	r3, #4
 8010184:	429d      	cmp	r5, r3
 8010186:	461a      	mov	r2, r3
 8010188:	d30a      	bcc.n	80101a0 <quorem+0x106>
 801018a:	613c      	str	r4, [r7, #16]
 801018c:	4630      	mov	r0, r6
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	6812      	ldr	r2, [r2, #0]
 8010196:	3b04      	subs	r3, #4
 8010198:	2a00      	cmp	r2, #0
 801019a:	d1cc      	bne.n	8010136 <quorem+0x9c>
 801019c:	3c01      	subs	r4, #1
 801019e:	e7c7      	b.n	8010130 <quorem+0x96>
 80101a0:	6812      	ldr	r2, [r2, #0]
 80101a2:	3b04      	subs	r3, #4
 80101a4:	2a00      	cmp	r2, #0
 80101a6:	d1f0      	bne.n	801018a <quorem+0xf0>
 80101a8:	3c01      	subs	r4, #1
 80101aa:	e7eb      	b.n	8010184 <quorem+0xea>
 80101ac:	2000      	movs	r0, #0
 80101ae:	e7ee      	b.n	801018e <quorem+0xf4>

080101b0 <_dtoa_r>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	ed2d 8b02 	vpush	{d8}
 80101b8:	ec57 6b10 	vmov	r6, r7, d0
 80101bc:	b095      	sub	sp, #84	; 0x54
 80101be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101c4:	9105      	str	r1, [sp, #20]
 80101c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80101ca:	4604      	mov	r4, r0
 80101cc:	9209      	str	r2, [sp, #36]	; 0x24
 80101ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d0:	b975      	cbnz	r5, 80101f0 <_dtoa_r+0x40>
 80101d2:	2010      	movs	r0, #16
 80101d4:	f000 fddc 	bl	8010d90 <malloc>
 80101d8:	4602      	mov	r2, r0
 80101da:	6260      	str	r0, [r4, #36]	; 0x24
 80101dc:	b920      	cbnz	r0, 80101e8 <_dtoa_r+0x38>
 80101de:	4bb2      	ldr	r3, [pc, #712]	; (80104a8 <_dtoa_r+0x2f8>)
 80101e0:	21ea      	movs	r1, #234	; 0xea
 80101e2:	48b2      	ldr	r0, [pc, #712]	; (80104ac <_dtoa_r+0x2fc>)
 80101e4:	f001 fb80 	bl	80118e8 <__assert_func>
 80101e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101ec:	6005      	str	r5, [r0, #0]
 80101ee:	60c5      	str	r5, [r0, #12]
 80101f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f2:	6819      	ldr	r1, [r3, #0]
 80101f4:	b151      	cbz	r1, 801020c <_dtoa_r+0x5c>
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	604a      	str	r2, [r1, #4]
 80101fa:	2301      	movs	r3, #1
 80101fc:	4093      	lsls	r3, r2
 80101fe:	608b      	str	r3, [r1, #8]
 8010200:	4620      	mov	r0, r4
 8010202:	f000 fe0d 	bl	8010e20 <_Bfree>
 8010206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010208:	2200      	movs	r2, #0
 801020a:	601a      	str	r2, [r3, #0]
 801020c:	1e3b      	subs	r3, r7, #0
 801020e:	bfb9      	ittee	lt
 8010210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010214:	9303      	strlt	r3, [sp, #12]
 8010216:	2300      	movge	r3, #0
 8010218:	f8c8 3000 	strge.w	r3, [r8]
 801021c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010220:	4ba3      	ldr	r3, [pc, #652]	; (80104b0 <_dtoa_r+0x300>)
 8010222:	bfbc      	itt	lt
 8010224:	2201      	movlt	r2, #1
 8010226:	f8c8 2000 	strlt.w	r2, [r8]
 801022a:	ea33 0309 	bics.w	r3, r3, r9
 801022e:	d11b      	bne.n	8010268 <_dtoa_r+0xb8>
 8010230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010232:	f242 730f 	movw	r3, #9999	; 0x270f
 8010236:	6013      	str	r3, [r2, #0]
 8010238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801023c:	4333      	orrs	r3, r6
 801023e:	f000 857a 	beq.w	8010d36 <_dtoa_r+0xb86>
 8010242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010244:	b963      	cbnz	r3, 8010260 <_dtoa_r+0xb0>
 8010246:	4b9b      	ldr	r3, [pc, #620]	; (80104b4 <_dtoa_r+0x304>)
 8010248:	e024      	b.n	8010294 <_dtoa_r+0xe4>
 801024a:	4b9b      	ldr	r3, [pc, #620]	; (80104b8 <_dtoa_r+0x308>)
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	3308      	adds	r3, #8
 8010250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010252:	6013      	str	r3, [r2, #0]
 8010254:	9800      	ldr	r0, [sp, #0]
 8010256:	b015      	add	sp, #84	; 0x54
 8010258:	ecbd 8b02 	vpop	{d8}
 801025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010260:	4b94      	ldr	r3, [pc, #592]	; (80104b4 <_dtoa_r+0x304>)
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	3303      	adds	r3, #3
 8010266:	e7f3      	b.n	8010250 <_dtoa_r+0xa0>
 8010268:	ed9d 7b02 	vldr	d7, [sp, #8]
 801026c:	2200      	movs	r2, #0
 801026e:	ec51 0b17 	vmov	r0, r1, d7
 8010272:	2300      	movs	r3, #0
 8010274:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010278:	f7f0 fc36 	bl	8000ae8 <__aeabi_dcmpeq>
 801027c:	4680      	mov	r8, r0
 801027e:	b158      	cbz	r0, 8010298 <_dtoa_r+0xe8>
 8010280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010282:	2301      	movs	r3, #1
 8010284:	6013      	str	r3, [r2, #0]
 8010286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010288:	2b00      	cmp	r3, #0
 801028a:	f000 8551 	beq.w	8010d30 <_dtoa_r+0xb80>
 801028e:	488b      	ldr	r0, [pc, #556]	; (80104bc <_dtoa_r+0x30c>)
 8010290:	6018      	str	r0, [r3, #0]
 8010292:	1e43      	subs	r3, r0, #1
 8010294:	9300      	str	r3, [sp, #0]
 8010296:	e7dd      	b.n	8010254 <_dtoa_r+0xa4>
 8010298:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801029c:	aa12      	add	r2, sp, #72	; 0x48
 801029e:	a913      	add	r1, sp, #76	; 0x4c
 80102a0:	4620      	mov	r0, r4
 80102a2:	f001 f89f 	bl	80113e4 <__d2b>
 80102a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102aa:	4683      	mov	fp, r0
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	d07c      	beq.n	80103aa <_dtoa_r+0x1fa>
 80102b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80102b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80102be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80102c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80102c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102ca:	4b7d      	ldr	r3, [pc, #500]	; (80104c0 <_dtoa_r+0x310>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	f7ef ffe9 	bl	80002a8 <__aeabi_dsub>
 80102d6:	a36e      	add	r3, pc, #440	; (adr r3, 8010490 <_dtoa_r+0x2e0>)
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f7f0 f99c 	bl	8000618 <__aeabi_dmul>
 80102e0:	a36d      	add	r3, pc, #436	; (adr r3, 8010498 <_dtoa_r+0x2e8>)
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	f7ef ffe1 	bl	80002ac <__adddf3>
 80102ea:	4606      	mov	r6, r0
 80102ec:	4628      	mov	r0, r5
 80102ee:	460f      	mov	r7, r1
 80102f0:	f7f0 f928 	bl	8000544 <__aeabi_i2d>
 80102f4:	a36a      	add	r3, pc, #424	; (adr r3, 80104a0 <_dtoa_r+0x2f0>)
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	f7f0 f98d 	bl	8000618 <__aeabi_dmul>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	4630      	mov	r0, r6
 8010304:	4639      	mov	r1, r7
 8010306:	f7ef ffd1 	bl	80002ac <__adddf3>
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	f7f0 fc33 	bl	8000b78 <__aeabi_d2iz>
 8010312:	2200      	movs	r2, #0
 8010314:	4682      	mov	sl, r0
 8010316:	2300      	movs	r3, #0
 8010318:	4630      	mov	r0, r6
 801031a:	4639      	mov	r1, r7
 801031c:	f7f0 fbee 	bl	8000afc <__aeabi_dcmplt>
 8010320:	b148      	cbz	r0, 8010336 <_dtoa_r+0x186>
 8010322:	4650      	mov	r0, sl
 8010324:	f7f0 f90e 	bl	8000544 <__aeabi_i2d>
 8010328:	4632      	mov	r2, r6
 801032a:	463b      	mov	r3, r7
 801032c:	f7f0 fbdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8010330:	b908      	cbnz	r0, 8010336 <_dtoa_r+0x186>
 8010332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010336:	f1ba 0f16 	cmp.w	sl, #22
 801033a:	d854      	bhi.n	80103e6 <_dtoa_r+0x236>
 801033c:	4b61      	ldr	r3, [pc, #388]	; (80104c4 <_dtoa_r+0x314>)
 801033e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801034a:	f7f0 fbd7 	bl	8000afc <__aeabi_dcmplt>
 801034e:	2800      	cmp	r0, #0
 8010350:	d04b      	beq.n	80103ea <_dtoa_r+0x23a>
 8010352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010356:	2300      	movs	r3, #0
 8010358:	930e      	str	r3, [sp, #56]	; 0x38
 801035a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801035c:	1b5d      	subs	r5, r3, r5
 801035e:	1e6b      	subs	r3, r5, #1
 8010360:	9304      	str	r3, [sp, #16]
 8010362:	bf43      	ittte	mi
 8010364:	2300      	movmi	r3, #0
 8010366:	f1c5 0801 	rsbmi	r8, r5, #1
 801036a:	9304      	strmi	r3, [sp, #16]
 801036c:	f04f 0800 	movpl.w	r8, #0
 8010370:	f1ba 0f00 	cmp.w	sl, #0
 8010374:	db3b      	blt.n	80103ee <_dtoa_r+0x23e>
 8010376:	9b04      	ldr	r3, [sp, #16]
 8010378:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801037c:	4453      	add	r3, sl
 801037e:	9304      	str	r3, [sp, #16]
 8010380:	2300      	movs	r3, #0
 8010382:	9306      	str	r3, [sp, #24]
 8010384:	9b05      	ldr	r3, [sp, #20]
 8010386:	2b09      	cmp	r3, #9
 8010388:	d869      	bhi.n	801045e <_dtoa_r+0x2ae>
 801038a:	2b05      	cmp	r3, #5
 801038c:	bfc4      	itt	gt
 801038e:	3b04      	subgt	r3, #4
 8010390:	9305      	strgt	r3, [sp, #20]
 8010392:	9b05      	ldr	r3, [sp, #20]
 8010394:	f1a3 0302 	sub.w	r3, r3, #2
 8010398:	bfcc      	ite	gt
 801039a:	2500      	movgt	r5, #0
 801039c:	2501      	movle	r5, #1
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d869      	bhi.n	8010476 <_dtoa_r+0x2c6>
 80103a2:	e8df f003 	tbb	[pc, r3]
 80103a6:	4e2c      	.short	0x4e2c
 80103a8:	5a4c      	.short	0x5a4c
 80103aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80103ae:	441d      	add	r5, r3
 80103b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80103b4:	2b20      	cmp	r3, #32
 80103b6:	bfc1      	itttt	gt
 80103b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80103bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80103c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80103c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80103c8:	bfda      	itte	le
 80103ca:	f1c3 0320 	rsble	r3, r3, #32
 80103ce:	fa06 f003 	lslle.w	r0, r6, r3
 80103d2:	4318      	orrgt	r0, r3
 80103d4:	f7f0 f8a6 	bl	8000524 <__aeabi_ui2d>
 80103d8:	2301      	movs	r3, #1
 80103da:	4606      	mov	r6, r0
 80103dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80103e0:	3d01      	subs	r5, #1
 80103e2:	9310      	str	r3, [sp, #64]	; 0x40
 80103e4:	e771      	b.n	80102ca <_dtoa_r+0x11a>
 80103e6:	2301      	movs	r3, #1
 80103e8:	e7b6      	b.n	8010358 <_dtoa_r+0x1a8>
 80103ea:	900e      	str	r0, [sp, #56]	; 0x38
 80103ec:	e7b5      	b.n	801035a <_dtoa_r+0x1aa>
 80103ee:	f1ca 0300 	rsb	r3, sl, #0
 80103f2:	9306      	str	r3, [sp, #24]
 80103f4:	2300      	movs	r3, #0
 80103f6:	eba8 080a 	sub.w	r8, r8, sl
 80103fa:	930d      	str	r3, [sp, #52]	; 0x34
 80103fc:	e7c2      	b.n	8010384 <_dtoa_r+0x1d4>
 80103fe:	2300      	movs	r3, #0
 8010400:	9308      	str	r3, [sp, #32]
 8010402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010404:	2b00      	cmp	r3, #0
 8010406:	dc39      	bgt.n	801047c <_dtoa_r+0x2cc>
 8010408:	f04f 0901 	mov.w	r9, #1
 801040c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010410:	464b      	mov	r3, r9
 8010412:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010416:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010418:	2200      	movs	r2, #0
 801041a:	6042      	str	r2, [r0, #4]
 801041c:	2204      	movs	r2, #4
 801041e:	f102 0614 	add.w	r6, r2, #20
 8010422:	429e      	cmp	r6, r3
 8010424:	6841      	ldr	r1, [r0, #4]
 8010426:	d92f      	bls.n	8010488 <_dtoa_r+0x2d8>
 8010428:	4620      	mov	r0, r4
 801042a:	f000 fcb9 	bl	8010da0 <_Balloc>
 801042e:	9000      	str	r0, [sp, #0]
 8010430:	2800      	cmp	r0, #0
 8010432:	d14b      	bne.n	80104cc <_dtoa_r+0x31c>
 8010434:	4b24      	ldr	r3, [pc, #144]	; (80104c8 <_dtoa_r+0x318>)
 8010436:	4602      	mov	r2, r0
 8010438:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801043c:	e6d1      	b.n	80101e2 <_dtoa_r+0x32>
 801043e:	2301      	movs	r3, #1
 8010440:	e7de      	b.n	8010400 <_dtoa_r+0x250>
 8010442:	2300      	movs	r3, #0
 8010444:	9308      	str	r3, [sp, #32]
 8010446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010448:	eb0a 0903 	add.w	r9, sl, r3
 801044c:	f109 0301 	add.w	r3, r9, #1
 8010450:	2b01      	cmp	r3, #1
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	bfb8      	it	lt
 8010456:	2301      	movlt	r3, #1
 8010458:	e7dd      	b.n	8010416 <_dtoa_r+0x266>
 801045a:	2301      	movs	r3, #1
 801045c:	e7f2      	b.n	8010444 <_dtoa_r+0x294>
 801045e:	2501      	movs	r5, #1
 8010460:	2300      	movs	r3, #0
 8010462:	9305      	str	r3, [sp, #20]
 8010464:	9508      	str	r5, [sp, #32]
 8010466:	f04f 39ff 	mov.w	r9, #4294967295
 801046a:	2200      	movs	r2, #0
 801046c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010470:	2312      	movs	r3, #18
 8010472:	9209      	str	r2, [sp, #36]	; 0x24
 8010474:	e7cf      	b.n	8010416 <_dtoa_r+0x266>
 8010476:	2301      	movs	r3, #1
 8010478:	9308      	str	r3, [sp, #32]
 801047a:	e7f4      	b.n	8010466 <_dtoa_r+0x2b6>
 801047c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010480:	f8cd 9004 	str.w	r9, [sp, #4]
 8010484:	464b      	mov	r3, r9
 8010486:	e7c6      	b.n	8010416 <_dtoa_r+0x266>
 8010488:	3101      	adds	r1, #1
 801048a:	6041      	str	r1, [r0, #4]
 801048c:	0052      	lsls	r2, r2, #1
 801048e:	e7c6      	b.n	801041e <_dtoa_r+0x26e>
 8010490:	636f4361 	.word	0x636f4361
 8010494:	3fd287a7 	.word	0x3fd287a7
 8010498:	8b60c8b3 	.word	0x8b60c8b3
 801049c:	3fc68a28 	.word	0x3fc68a28
 80104a0:	509f79fb 	.word	0x509f79fb
 80104a4:	3fd34413 	.word	0x3fd34413
 80104a8:	080144a5 	.word	0x080144a5
 80104ac:	080144bc 	.word	0x080144bc
 80104b0:	7ff00000 	.word	0x7ff00000
 80104b4:	080144a1 	.word	0x080144a1
 80104b8:	08014498 	.word	0x08014498
 80104bc:	08014475 	.word	0x08014475
 80104c0:	3ff80000 	.word	0x3ff80000
 80104c4:	080145b8 	.word	0x080145b8
 80104c8:	0801451b 	.word	0x0801451b
 80104cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104ce:	9a00      	ldr	r2, [sp, #0]
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	9b01      	ldr	r3, [sp, #4]
 80104d4:	2b0e      	cmp	r3, #14
 80104d6:	f200 80ad 	bhi.w	8010634 <_dtoa_r+0x484>
 80104da:	2d00      	cmp	r5, #0
 80104dc:	f000 80aa 	beq.w	8010634 <_dtoa_r+0x484>
 80104e0:	f1ba 0f00 	cmp.w	sl, #0
 80104e4:	dd36      	ble.n	8010554 <_dtoa_r+0x3a4>
 80104e6:	4ac3      	ldr	r2, [pc, #780]	; (80107f4 <_dtoa_r+0x644>)
 80104e8:	f00a 030f 	and.w	r3, sl, #15
 80104ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104f0:	ed93 7b00 	vldr	d7, [r3]
 80104f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80104f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80104fc:	eeb0 8a47 	vmov.f32	s16, s14
 8010500:	eef0 8a67 	vmov.f32	s17, s15
 8010504:	d016      	beq.n	8010534 <_dtoa_r+0x384>
 8010506:	4bbc      	ldr	r3, [pc, #752]	; (80107f8 <_dtoa_r+0x648>)
 8010508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801050c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010510:	f7f0 f9ac 	bl	800086c <__aeabi_ddiv>
 8010514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010518:	f007 070f 	and.w	r7, r7, #15
 801051c:	2503      	movs	r5, #3
 801051e:	4eb6      	ldr	r6, [pc, #728]	; (80107f8 <_dtoa_r+0x648>)
 8010520:	b957      	cbnz	r7, 8010538 <_dtoa_r+0x388>
 8010522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010526:	ec53 2b18 	vmov	r2, r3, d8
 801052a:	f7f0 f99f 	bl	800086c <__aeabi_ddiv>
 801052e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010532:	e029      	b.n	8010588 <_dtoa_r+0x3d8>
 8010534:	2502      	movs	r5, #2
 8010536:	e7f2      	b.n	801051e <_dtoa_r+0x36e>
 8010538:	07f9      	lsls	r1, r7, #31
 801053a:	d508      	bpl.n	801054e <_dtoa_r+0x39e>
 801053c:	ec51 0b18 	vmov	r0, r1, d8
 8010540:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010544:	f7f0 f868 	bl	8000618 <__aeabi_dmul>
 8010548:	ec41 0b18 	vmov	d8, r0, r1
 801054c:	3501      	adds	r5, #1
 801054e:	107f      	asrs	r7, r7, #1
 8010550:	3608      	adds	r6, #8
 8010552:	e7e5      	b.n	8010520 <_dtoa_r+0x370>
 8010554:	f000 80a6 	beq.w	80106a4 <_dtoa_r+0x4f4>
 8010558:	f1ca 0600 	rsb	r6, sl, #0
 801055c:	4ba5      	ldr	r3, [pc, #660]	; (80107f4 <_dtoa_r+0x644>)
 801055e:	4fa6      	ldr	r7, [pc, #664]	; (80107f8 <_dtoa_r+0x648>)
 8010560:	f006 020f 	and.w	r2, r6, #15
 8010564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010570:	f7f0 f852 	bl	8000618 <__aeabi_dmul>
 8010574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010578:	1136      	asrs	r6, r6, #4
 801057a:	2300      	movs	r3, #0
 801057c:	2502      	movs	r5, #2
 801057e:	2e00      	cmp	r6, #0
 8010580:	f040 8085 	bne.w	801068e <_dtoa_r+0x4de>
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1d2      	bne.n	801052e <_dtoa_r+0x37e>
 8010588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801058a:	2b00      	cmp	r3, #0
 801058c:	f000 808c 	beq.w	80106a8 <_dtoa_r+0x4f8>
 8010590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010594:	4b99      	ldr	r3, [pc, #612]	; (80107fc <_dtoa_r+0x64c>)
 8010596:	2200      	movs	r2, #0
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	f7f0 faae 	bl	8000afc <__aeabi_dcmplt>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	f000 8081 	beq.w	80106a8 <_dtoa_r+0x4f8>
 80105a6:	9b01      	ldr	r3, [sp, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d07d      	beq.n	80106a8 <_dtoa_r+0x4f8>
 80105ac:	f1b9 0f00 	cmp.w	r9, #0
 80105b0:	dd3c      	ble.n	801062c <_dtoa_r+0x47c>
 80105b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	2200      	movs	r2, #0
 80105ba:	4b91      	ldr	r3, [pc, #580]	; (8010800 <_dtoa_r+0x650>)
 80105bc:	4630      	mov	r0, r6
 80105be:	4639      	mov	r1, r7
 80105c0:	f7f0 f82a 	bl	8000618 <__aeabi_dmul>
 80105c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105c8:	3501      	adds	r5, #1
 80105ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80105ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80105d2:	4628      	mov	r0, r5
 80105d4:	f7ef ffb6 	bl	8000544 <__aeabi_i2d>
 80105d8:	4632      	mov	r2, r6
 80105da:	463b      	mov	r3, r7
 80105dc:	f7f0 f81c 	bl	8000618 <__aeabi_dmul>
 80105e0:	4b88      	ldr	r3, [pc, #544]	; (8010804 <_dtoa_r+0x654>)
 80105e2:	2200      	movs	r2, #0
 80105e4:	f7ef fe62 	bl	80002ac <__adddf3>
 80105e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80105ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105f0:	9303      	str	r3, [sp, #12]
 80105f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d15c      	bne.n	80106b2 <_dtoa_r+0x502>
 80105f8:	4b83      	ldr	r3, [pc, #524]	; (8010808 <_dtoa_r+0x658>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	4630      	mov	r0, r6
 80105fe:	4639      	mov	r1, r7
 8010600:	f7ef fe52 	bl	80002a8 <__aeabi_dsub>
 8010604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010608:	4606      	mov	r6, r0
 801060a:	460f      	mov	r7, r1
 801060c:	f7f0 fa94 	bl	8000b38 <__aeabi_dcmpgt>
 8010610:	2800      	cmp	r0, #0
 8010612:	f040 8296 	bne.w	8010b42 <_dtoa_r+0x992>
 8010616:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801061a:	4630      	mov	r0, r6
 801061c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010620:	4639      	mov	r1, r7
 8010622:	f7f0 fa6b 	bl	8000afc <__aeabi_dcmplt>
 8010626:	2800      	cmp	r0, #0
 8010628:	f040 8288 	bne.w	8010b3c <_dtoa_r+0x98c>
 801062c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010636:	2b00      	cmp	r3, #0
 8010638:	f2c0 8158 	blt.w	80108ec <_dtoa_r+0x73c>
 801063c:	f1ba 0f0e 	cmp.w	sl, #14
 8010640:	f300 8154 	bgt.w	80108ec <_dtoa_r+0x73c>
 8010644:	4b6b      	ldr	r3, [pc, #428]	; (80107f4 <_dtoa_r+0x644>)
 8010646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801064a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801064e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010650:	2b00      	cmp	r3, #0
 8010652:	f280 80e3 	bge.w	801081c <_dtoa_r+0x66c>
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	f300 80df 	bgt.w	801081c <_dtoa_r+0x66c>
 801065e:	f040 826d 	bne.w	8010b3c <_dtoa_r+0x98c>
 8010662:	4b69      	ldr	r3, [pc, #420]	; (8010808 <_dtoa_r+0x658>)
 8010664:	2200      	movs	r2, #0
 8010666:	4640      	mov	r0, r8
 8010668:	4649      	mov	r1, r9
 801066a:	f7ef ffd5 	bl	8000618 <__aeabi_dmul>
 801066e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010672:	f7f0 fa57 	bl	8000b24 <__aeabi_dcmpge>
 8010676:	9e01      	ldr	r6, [sp, #4]
 8010678:	4637      	mov	r7, r6
 801067a:	2800      	cmp	r0, #0
 801067c:	f040 8243 	bne.w	8010b06 <_dtoa_r+0x956>
 8010680:	9d00      	ldr	r5, [sp, #0]
 8010682:	2331      	movs	r3, #49	; 0x31
 8010684:	f805 3b01 	strb.w	r3, [r5], #1
 8010688:	f10a 0a01 	add.w	sl, sl, #1
 801068c:	e23f      	b.n	8010b0e <_dtoa_r+0x95e>
 801068e:	07f2      	lsls	r2, r6, #31
 8010690:	d505      	bpl.n	801069e <_dtoa_r+0x4ee>
 8010692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010696:	f7ef ffbf 	bl	8000618 <__aeabi_dmul>
 801069a:	3501      	adds	r5, #1
 801069c:	2301      	movs	r3, #1
 801069e:	1076      	asrs	r6, r6, #1
 80106a0:	3708      	adds	r7, #8
 80106a2:	e76c      	b.n	801057e <_dtoa_r+0x3ce>
 80106a4:	2502      	movs	r5, #2
 80106a6:	e76f      	b.n	8010588 <_dtoa_r+0x3d8>
 80106a8:	9b01      	ldr	r3, [sp, #4]
 80106aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80106ae:	930c      	str	r3, [sp, #48]	; 0x30
 80106b0:	e78d      	b.n	80105ce <_dtoa_r+0x41e>
 80106b2:	9900      	ldr	r1, [sp, #0]
 80106b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80106b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106b8:	4b4e      	ldr	r3, [pc, #312]	; (80107f4 <_dtoa_r+0x644>)
 80106ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106be:	4401      	add	r1, r0
 80106c0:	9102      	str	r1, [sp, #8]
 80106c2:	9908      	ldr	r1, [sp, #32]
 80106c4:	eeb0 8a47 	vmov.f32	s16, s14
 80106c8:	eef0 8a67 	vmov.f32	s17, s15
 80106cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106d4:	2900      	cmp	r1, #0
 80106d6:	d045      	beq.n	8010764 <_dtoa_r+0x5b4>
 80106d8:	494c      	ldr	r1, [pc, #304]	; (801080c <_dtoa_r+0x65c>)
 80106da:	2000      	movs	r0, #0
 80106dc:	f7f0 f8c6 	bl	800086c <__aeabi_ddiv>
 80106e0:	ec53 2b18 	vmov	r2, r3, d8
 80106e4:	f7ef fde0 	bl	80002a8 <__aeabi_dsub>
 80106e8:	9d00      	ldr	r5, [sp, #0]
 80106ea:	ec41 0b18 	vmov	d8, r0, r1
 80106ee:	4639      	mov	r1, r7
 80106f0:	4630      	mov	r0, r6
 80106f2:	f7f0 fa41 	bl	8000b78 <__aeabi_d2iz>
 80106f6:	900c      	str	r0, [sp, #48]	; 0x30
 80106f8:	f7ef ff24 	bl	8000544 <__aeabi_i2d>
 80106fc:	4602      	mov	r2, r0
 80106fe:	460b      	mov	r3, r1
 8010700:	4630      	mov	r0, r6
 8010702:	4639      	mov	r1, r7
 8010704:	f7ef fdd0 	bl	80002a8 <__aeabi_dsub>
 8010708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801070a:	3330      	adds	r3, #48	; 0x30
 801070c:	f805 3b01 	strb.w	r3, [r5], #1
 8010710:	ec53 2b18 	vmov	r2, r3, d8
 8010714:	4606      	mov	r6, r0
 8010716:	460f      	mov	r7, r1
 8010718:	f7f0 f9f0 	bl	8000afc <__aeabi_dcmplt>
 801071c:	2800      	cmp	r0, #0
 801071e:	d165      	bne.n	80107ec <_dtoa_r+0x63c>
 8010720:	4632      	mov	r2, r6
 8010722:	463b      	mov	r3, r7
 8010724:	4935      	ldr	r1, [pc, #212]	; (80107fc <_dtoa_r+0x64c>)
 8010726:	2000      	movs	r0, #0
 8010728:	f7ef fdbe 	bl	80002a8 <__aeabi_dsub>
 801072c:	ec53 2b18 	vmov	r2, r3, d8
 8010730:	f7f0 f9e4 	bl	8000afc <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	f040 80b9 	bne.w	80108ac <_dtoa_r+0x6fc>
 801073a:	9b02      	ldr	r3, [sp, #8]
 801073c:	429d      	cmp	r5, r3
 801073e:	f43f af75 	beq.w	801062c <_dtoa_r+0x47c>
 8010742:	4b2f      	ldr	r3, [pc, #188]	; (8010800 <_dtoa_r+0x650>)
 8010744:	ec51 0b18 	vmov	r0, r1, d8
 8010748:	2200      	movs	r2, #0
 801074a:	f7ef ff65 	bl	8000618 <__aeabi_dmul>
 801074e:	4b2c      	ldr	r3, [pc, #176]	; (8010800 <_dtoa_r+0x650>)
 8010750:	ec41 0b18 	vmov	d8, r0, r1
 8010754:	2200      	movs	r2, #0
 8010756:	4630      	mov	r0, r6
 8010758:	4639      	mov	r1, r7
 801075a:	f7ef ff5d 	bl	8000618 <__aeabi_dmul>
 801075e:	4606      	mov	r6, r0
 8010760:	460f      	mov	r7, r1
 8010762:	e7c4      	b.n	80106ee <_dtoa_r+0x53e>
 8010764:	ec51 0b17 	vmov	r0, r1, d7
 8010768:	f7ef ff56 	bl	8000618 <__aeabi_dmul>
 801076c:	9b02      	ldr	r3, [sp, #8]
 801076e:	9d00      	ldr	r5, [sp, #0]
 8010770:	930c      	str	r3, [sp, #48]	; 0x30
 8010772:	ec41 0b18 	vmov	d8, r0, r1
 8010776:	4639      	mov	r1, r7
 8010778:	4630      	mov	r0, r6
 801077a:	f7f0 f9fd 	bl	8000b78 <__aeabi_d2iz>
 801077e:	9011      	str	r0, [sp, #68]	; 0x44
 8010780:	f7ef fee0 	bl	8000544 <__aeabi_i2d>
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	4630      	mov	r0, r6
 801078a:	4639      	mov	r1, r7
 801078c:	f7ef fd8c 	bl	80002a8 <__aeabi_dsub>
 8010790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010792:	3330      	adds	r3, #48	; 0x30
 8010794:	f805 3b01 	strb.w	r3, [r5], #1
 8010798:	9b02      	ldr	r3, [sp, #8]
 801079a:	429d      	cmp	r5, r3
 801079c:	4606      	mov	r6, r0
 801079e:	460f      	mov	r7, r1
 80107a0:	f04f 0200 	mov.w	r2, #0
 80107a4:	d134      	bne.n	8010810 <_dtoa_r+0x660>
 80107a6:	4b19      	ldr	r3, [pc, #100]	; (801080c <_dtoa_r+0x65c>)
 80107a8:	ec51 0b18 	vmov	r0, r1, d8
 80107ac:	f7ef fd7e 	bl	80002ac <__adddf3>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7f0 f9be 	bl	8000b38 <__aeabi_dcmpgt>
 80107bc:	2800      	cmp	r0, #0
 80107be:	d175      	bne.n	80108ac <_dtoa_r+0x6fc>
 80107c0:	ec53 2b18 	vmov	r2, r3, d8
 80107c4:	4911      	ldr	r1, [pc, #68]	; (801080c <_dtoa_r+0x65c>)
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7ef fd6e 	bl	80002a8 <__aeabi_dsub>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	4630      	mov	r0, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	f7f0 f992 	bl	8000afc <__aeabi_dcmplt>
 80107d8:	2800      	cmp	r0, #0
 80107da:	f43f af27 	beq.w	801062c <_dtoa_r+0x47c>
 80107de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107e0:	1e6b      	subs	r3, r5, #1
 80107e2:	930c      	str	r3, [sp, #48]	; 0x30
 80107e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80107e8:	2b30      	cmp	r3, #48	; 0x30
 80107ea:	d0f8      	beq.n	80107de <_dtoa_r+0x62e>
 80107ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80107f0:	e04a      	b.n	8010888 <_dtoa_r+0x6d8>
 80107f2:	bf00      	nop
 80107f4:	080145b8 	.word	0x080145b8
 80107f8:	08014590 	.word	0x08014590
 80107fc:	3ff00000 	.word	0x3ff00000
 8010800:	40240000 	.word	0x40240000
 8010804:	401c0000 	.word	0x401c0000
 8010808:	40140000 	.word	0x40140000
 801080c:	3fe00000 	.word	0x3fe00000
 8010810:	4baf      	ldr	r3, [pc, #700]	; (8010ad0 <_dtoa_r+0x920>)
 8010812:	f7ef ff01 	bl	8000618 <__aeabi_dmul>
 8010816:	4606      	mov	r6, r0
 8010818:	460f      	mov	r7, r1
 801081a:	e7ac      	b.n	8010776 <_dtoa_r+0x5c6>
 801081c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010820:	9d00      	ldr	r5, [sp, #0]
 8010822:	4642      	mov	r2, r8
 8010824:	464b      	mov	r3, r9
 8010826:	4630      	mov	r0, r6
 8010828:	4639      	mov	r1, r7
 801082a:	f7f0 f81f 	bl	800086c <__aeabi_ddiv>
 801082e:	f7f0 f9a3 	bl	8000b78 <__aeabi_d2iz>
 8010832:	9002      	str	r0, [sp, #8]
 8010834:	f7ef fe86 	bl	8000544 <__aeabi_i2d>
 8010838:	4642      	mov	r2, r8
 801083a:	464b      	mov	r3, r9
 801083c:	f7ef feec 	bl	8000618 <__aeabi_dmul>
 8010840:	4602      	mov	r2, r0
 8010842:	460b      	mov	r3, r1
 8010844:	4630      	mov	r0, r6
 8010846:	4639      	mov	r1, r7
 8010848:	f7ef fd2e 	bl	80002a8 <__aeabi_dsub>
 801084c:	9e02      	ldr	r6, [sp, #8]
 801084e:	9f01      	ldr	r7, [sp, #4]
 8010850:	3630      	adds	r6, #48	; 0x30
 8010852:	f805 6b01 	strb.w	r6, [r5], #1
 8010856:	9e00      	ldr	r6, [sp, #0]
 8010858:	1bae      	subs	r6, r5, r6
 801085a:	42b7      	cmp	r7, r6
 801085c:	4602      	mov	r2, r0
 801085e:	460b      	mov	r3, r1
 8010860:	d137      	bne.n	80108d2 <_dtoa_r+0x722>
 8010862:	f7ef fd23 	bl	80002ac <__adddf3>
 8010866:	4642      	mov	r2, r8
 8010868:	464b      	mov	r3, r9
 801086a:	4606      	mov	r6, r0
 801086c:	460f      	mov	r7, r1
 801086e:	f7f0 f963 	bl	8000b38 <__aeabi_dcmpgt>
 8010872:	b9c8      	cbnz	r0, 80108a8 <_dtoa_r+0x6f8>
 8010874:	4642      	mov	r2, r8
 8010876:	464b      	mov	r3, r9
 8010878:	4630      	mov	r0, r6
 801087a:	4639      	mov	r1, r7
 801087c:	f7f0 f934 	bl	8000ae8 <__aeabi_dcmpeq>
 8010880:	b110      	cbz	r0, 8010888 <_dtoa_r+0x6d8>
 8010882:	9b02      	ldr	r3, [sp, #8]
 8010884:	07d9      	lsls	r1, r3, #31
 8010886:	d40f      	bmi.n	80108a8 <_dtoa_r+0x6f8>
 8010888:	4620      	mov	r0, r4
 801088a:	4659      	mov	r1, fp
 801088c:	f000 fac8 	bl	8010e20 <_Bfree>
 8010890:	2300      	movs	r3, #0
 8010892:	702b      	strb	r3, [r5, #0]
 8010894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010896:	f10a 0001 	add.w	r0, sl, #1
 801089a:	6018      	str	r0, [r3, #0]
 801089c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f43f acd8 	beq.w	8010254 <_dtoa_r+0xa4>
 80108a4:	601d      	str	r5, [r3, #0]
 80108a6:	e4d5      	b.n	8010254 <_dtoa_r+0xa4>
 80108a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80108ac:	462b      	mov	r3, r5
 80108ae:	461d      	mov	r5, r3
 80108b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108b4:	2a39      	cmp	r2, #57	; 0x39
 80108b6:	d108      	bne.n	80108ca <_dtoa_r+0x71a>
 80108b8:	9a00      	ldr	r2, [sp, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d1f7      	bne.n	80108ae <_dtoa_r+0x6fe>
 80108be:	9a07      	ldr	r2, [sp, #28]
 80108c0:	9900      	ldr	r1, [sp, #0]
 80108c2:	3201      	adds	r2, #1
 80108c4:	9207      	str	r2, [sp, #28]
 80108c6:	2230      	movs	r2, #48	; 0x30
 80108c8:	700a      	strb	r2, [r1, #0]
 80108ca:	781a      	ldrb	r2, [r3, #0]
 80108cc:	3201      	adds	r2, #1
 80108ce:	701a      	strb	r2, [r3, #0]
 80108d0:	e78c      	b.n	80107ec <_dtoa_r+0x63c>
 80108d2:	4b7f      	ldr	r3, [pc, #508]	; (8010ad0 <_dtoa_r+0x920>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	f7ef fe9f 	bl	8000618 <__aeabi_dmul>
 80108da:	2200      	movs	r2, #0
 80108dc:	2300      	movs	r3, #0
 80108de:	4606      	mov	r6, r0
 80108e0:	460f      	mov	r7, r1
 80108e2:	f7f0 f901 	bl	8000ae8 <__aeabi_dcmpeq>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d09b      	beq.n	8010822 <_dtoa_r+0x672>
 80108ea:	e7cd      	b.n	8010888 <_dtoa_r+0x6d8>
 80108ec:	9a08      	ldr	r2, [sp, #32]
 80108ee:	2a00      	cmp	r2, #0
 80108f0:	f000 80c4 	beq.w	8010a7c <_dtoa_r+0x8cc>
 80108f4:	9a05      	ldr	r2, [sp, #20]
 80108f6:	2a01      	cmp	r2, #1
 80108f8:	f300 80a8 	bgt.w	8010a4c <_dtoa_r+0x89c>
 80108fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108fe:	2a00      	cmp	r2, #0
 8010900:	f000 80a0 	beq.w	8010a44 <_dtoa_r+0x894>
 8010904:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010908:	9e06      	ldr	r6, [sp, #24]
 801090a:	4645      	mov	r5, r8
 801090c:	9a04      	ldr	r2, [sp, #16]
 801090e:	2101      	movs	r1, #1
 8010910:	441a      	add	r2, r3
 8010912:	4620      	mov	r0, r4
 8010914:	4498      	add	r8, r3
 8010916:	9204      	str	r2, [sp, #16]
 8010918:	f000 fb3e 	bl	8010f98 <__i2b>
 801091c:	4607      	mov	r7, r0
 801091e:	2d00      	cmp	r5, #0
 8010920:	dd0b      	ble.n	801093a <_dtoa_r+0x78a>
 8010922:	9b04      	ldr	r3, [sp, #16]
 8010924:	2b00      	cmp	r3, #0
 8010926:	dd08      	ble.n	801093a <_dtoa_r+0x78a>
 8010928:	42ab      	cmp	r3, r5
 801092a:	9a04      	ldr	r2, [sp, #16]
 801092c:	bfa8      	it	ge
 801092e:	462b      	movge	r3, r5
 8010930:	eba8 0803 	sub.w	r8, r8, r3
 8010934:	1aed      	subs	r5, r5, r3
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	9304      	str	r3, [sp, #16]
 801093a:	9b06      	ldr	r3, [sp, #24]
 801093c:	b1fb      	cbz	r3, 801097e <_dtoa_r+0x7ce>
 801093e:	9b08      	ldr	r3, [sp, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 809f 	beq.w	8010a84 <_dtoa_r+0x8d4>
 8010946:	2e00      	cmp	r6, #0
 8010948:	dd11      	ble.n	801096e <_dtoa_r+0x7be>
 801094a:	4639      	mov	r1, r7
 801094c:	4632      	mov	r2, r6
 801094e:	4620      	mov	r0, r4
 8010950:	f000 fbde 	bl	8011110 <__pow5mult>
 8010954:	465a      	mov	r2, fp
 8010956:	4601      	mov	r1, r0
 8010958:	4607      	mov	r7, r0
 801095a:	4620      	mov	r0, r4
 801095c:	f000 fb32 	bl	8010fc4 <__multiply>
 8010960:	4659      	mov	r1, fp
 8010962:	9007      	str	r0, [sp, #28]
 8010964:	4620      	mov	r0, r4
 8010966:	f000 fa5b 	bl	8010e20 <_Bfree>
 801096a:	9b07      	ldr	r3, [sp, #28]
 801096c:	469b      	mov	fp, r3
 801096e:	9b06      	ldr	r3, [sp, #24]
 8010970:	1b9a      	subs	r2, r3, r6
 8010972:	d004      	beq.n	801097e <_dtoa_r+0x7ce>
 8010974:	4659      	mov	r1, fp
 8010976:	4620      	mov	r0, r4
 8010978:	f000 fbca 	bl	8011110 <__pow5mult>
 801097c:	4683      	mov	fp, r0
 801097e:	2101      	movs	r1, #1
 8010980:	4620      	mov	r0, r4
 8010982:	f000 fb09 	bl	8010f98 <__i2b>
 8010986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010988:	2b00      	cmp	r3, #0
 801098a:	4606      	mov	r6, r0
 801098c:	dd7c      	ble.n	8010a88 <_dtoa_r+0x8d8>
 801098e:	461a      	mov	r2, r3
 8010990:	4601      	mov	r1, r0
 8010992:	4620      	mov	r0, r4
 8010994:	f000 fbbc 	bl	8011110 <__pow5mult>
 8010998:	9b05      	ldr	r3, [sp, #20]
 801099a:	2b01      	cmp	r3, #1
 801099c:	4606      	mov	r6, r0
 801099e:	dd76      	ble.n	8010a8e <_dtoa_r+0x8de>
 80109a0:	2300      	movs	r3, #0
 80109a2:	9306      	str	r3, [sp, #24]
 80109a4:	6933      	ldr	r3, [r6, #16]
 80109a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80109aa:	6918      	ldr	r0, [r3, #16]
 80109ac:	f000 faa4 	bl	8010ef8 <__hi0bits>
 80109b0:	f1c0 0020 	rsb	r0, r0, #32
 80109b4:	9b04      	ldr	r3, [sp, #16]
 80109b6:	4418      	add	r0, r3
 80109b8:	f010 001f 	ands.w	r0, r0, #31
 80109bc:	f000 8086 	beq.w	8010acc <_dtoa_r+0x91c>
 80109c0:	f1c0 0320 	rsb	r3, r0, #32
 80109c4:	2b04      	cmp	r3, #4
 80109c6:	dd7f      	ble.n	8010ac8 <_dtoa_r+0x918>
 80109c8:	f1c0 001c 	rsb	r0, r0, #28
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	4403      	add	r3, r0
 80109d0:	4480      	add	r8, r0
 80109d2:	4405      	add	r5, r0
 80109d4:	9304      	str	r3, [sp, #16]
 80109d6:	f1b8 0f00 	cmp.w	r8, #0
 80109da:	dd05      	ble.n	80109e8 <_dtoa_r+0x838>
 80109dc:	4659      	mov	r1, fp
 80109de:	4642      	mov	r2, r8
 80109e0:	4620      	mov	r0, r4
 80109e2:	f000 fbef 	bl	80111c4 <__lshift>
 80109e6:	4683      	mov	fp, r0
 80109e8:	9b04      	ldr	r3, [sp, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	dd05      	ble.n	80109fa <_dtoa_r+0x84a>
 80109ee:	4631      	mov	r1, r6
 80109f0:	461a      	mov	r2, r3
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 fbe6 	bl	80111c4 <__lshift>
 80109f8:	4606      	mov	r6, r0
 80109fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d069      	beq.n	8010ad4 <_dtoa_r+0x924>
 8010a00:	4631      	mov	r1, r6
 8010a02:	4658      	mov	r0, fp
 8010a04:	f000 fc4a 	bl	801129c <__mcmp>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	da63      	bge.n	8010ad4 <_dtoa_r+0x924>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4659      	mov	r1, fp
 8010a10:	220a      	movs	r2, #10
 8010a12:	4620      	mov	r0, r4
 8010a14:	f000 fa26 	bl	8010e64 <__multadd>
 8010a18:	9b08      	ldr	r3, [sp, #32]
 8010a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a1e:	4683      	mov	fp, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 818f 	beq.w	8010d44 <_dtoa_r+0xb94>
 8010a26:	4639      	mov	r1, r7
 8010a28:	2300      	movs	r3, #0
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fa19 	bl	8010e64 <__multadd>
 8010a32:	f1b9 0f00 	cmp.w	r9, #0
 8010a36:	4607      	mov	r7, r0
 8010a38:	f300 808e 	bgt.w	8010b58 <_dtoa_r+0x9a8>
 8010a3c:	9b05      	ldr	r3, [sp, #20]
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	dc50      	bgt.n	8010ae4 <_dtoa_r+0x934>
 8010a42:	e089      	b.n	8010b58 <_dtoa_r+0x9a8>
 8010a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a4a:	e75d      	b.n	8010908 <_dtoa_r+0x758>
 8010a4c:	9b01      	ldr	r3, [sp, #4]
 8010a4e:	1e5e      	subs	r6, r3, #1
 8010a50:	9b06      	ldr	r3, [sp, #24]
 8010a52:	42b3      	cmp	r3, r6
 8010a54:	bfbf      	itttt	lt
 8010a56:	9b06      	ldrlt	r3, [sp, #24]
 8010a58:	9606      	strlt	r6, [sp, #24]
 8010a5a:	1af2      	sublt	r2, r6, r3
 8010a5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010a5e:	bfb6      	itet	lt
 8010a60:	189b      	addlt	r3, r3, r2
 8010a62:	1b9e      	subge	r6, r3, r6
 8010a64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	bfb8      	it	lt
 8010a6a:	2600      	movlt	r6, #0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	bfb5      	itete	lt
 8010a70:	eba8 0503 	sublt.w	r5, r8, r3
 8010a74:	9b01      	ldrge	r3, [sp, #4]
 8010a76:	2300      	movlt	r3, #0
 8010a78:	4645      	movge	r5, r8
 8010a7a:	e747      	b.n	801090c <_dtoa_r+0x75c>
 8010a7c:	9e06      	ldr	r6, [sp, #24]
 8010a7e:	9f08      	ldr	r7, [sp, #32]
 8010a80:	4645      	mov	r5, r8
 8010a82:	e74c      	b.n	801091e <_dtoa_r+0x76e>
 8010a84:	9a06      	ldr	r2, [sp, #24]
 8010a86:	e775      	b.n	8010974 <_dtoa_r+0x7c4>
 8010a88:	9b05      	ldr	r3, [sp, #20]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	dc18      	bgt.n	8010ac0 <_dtoa_r+0x910>
 8010a8e:	9b02      	ldr	r3, [sp, #8]
 8010a90:	b9b3      	cbnz	r3, 8010ac0 <_dtoa_r+0x910>
 8010a92:	9b03      	ldr	r3, [sp, #12]
 8010a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a98:	b9a3      	cbnz	r3, 8010ac4 <_dtoa_r+0x914>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010aa0:	0d1b      	lsrs	r3, r3, #20
 8010aa2:	051b      	lsls	r3, r3, #20
 8010aa4:	b12b      	cbz	r3, 8010ab2 <_dtoa_r+0x902>
 8010aa6:	9b04      	ldr	r3, [sp, #16]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	9304      	str	r3, [sp, #16]
 8010aac:	f108 0801 	add.w	r8, r8, #1
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	9306      	str	r3, [sp, #24]
 8010ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f47f af74 	bne.w	80109a4 <_dtoa_r+0x7f4>
 8010abc:	2001      	movs	r0, #1
 8010abe:	e779      	b.n	80109b4 <_dtoa_r+0x804>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e7f6      	b.n	8010ab2 <_dtoa_r+0x902>
 8010ac4:	9b02      	ldr	r3, [sp, #8]
 8010ac6:	e7f4      	b.n	8010ab2 <_dtoa_r+0x902>
 8010ac8:	d085      	beq.n	80109d6 <_dtoa_r+0x826>
 8010aca:	4618      	mov	r0, r3
 8010acc:	301c      	adds	r0, #28
 8010ace:	e77d      	b.n	80109cc <_dtoa_r+0x81c>
 8010ad0:	40240000 	.word	0x40240000
 8010ad4:	9b01      	ldr	r3, [sp, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	dc38      	bgt.n	8010b4c <_dtoa_r+0x99c>
 8010ada:	9b05      	ldr	r3, [sp, #20]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	dd35      	ble.n	8010b4c <_dtoa_r+0x99c>
 8010ae0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010ae4:	f1b9 0f00 	cmp.w	r9, #0
 8010ae8:	d10d      	bne.n	8010b06 <_dtoa_r+0x956>
 8010aea:	4631      	mov	r1, r6
 8010aec:	464b      	mov	r3, r9
 8010aee:	2205      	movs	r2, #5
 8010af0:	4620      	mov	r0, r4
 8010af2:	f000 f9b7 	bl	8010e64 <__multadd>
 8010af6:	4601      	mov	r1, r0
 8010af8:	4606      	mov	r6, r0
 8010afa:	4658      	mov	r0, fp
 8010afc:	f000 fbce 	bl	801129c <__mcmp>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	f73f adbd 	bgt.w	8010680 <_dtoa_r+0x4d0>
 8010b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b08:	9d00      	ldr	r5, [sp, #0]
 8010b0a:	ea6f 0a03 	mvn.w	sl, r3
 8010b0e:	f04f 0800 	mov.w	r8, #0
 8010b12:	4631      	mov	r1, r6
 8010b14:	4620      	mov	r0, r4
 8010b16:	f000 f983 	bl	8010e20 <_Bfree>
 8010b1a:	2f00      	cmp	r7, #0
 8010b1c:	f43f aeb4 	beq.w	8010888 <_dtoa_r+0x6d8>
 8010b20:	f1b8 0f00 	cmp.w	r8, #0
 8010b24:	d005      	beq.n	8010b32 <_dtoa_r+0x982>
 8010b26:	45b8      	cmp	r8, r7
 8010b28:	d003      	beq.n	8010b32 <_dtoa_r+0x982>
 8010b2a:	4641      	mov	r1, r8
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f000 f977 	bl	8010e20 <_Bfree>
 8010b32:	4639      	mov	r1, r7
 8010b34:	4620      	mov	r0, r4
 8010b36:	f000 f973 	bl	8010e20 <_Bfree>
 8010b3a:	e6a5      	b.n	8010888 <_dtoa_r+0x6d8>
 8010b3c:	2600      	movs	r6, #0
 8010b3e:	4637      	mov	r7, r6
 8010b40:	e7e1      	b.n	8010b06 <_dtoa_r+0x956>
 8010b42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010b44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010b48:	4637      	mov	r7, r6
 8010b4a:	e599      	b.n	8010680 <_dtoa_r+0x4d0>
 8010b4c:	9b08      	ldr	r3, [sp, #32]
 8010b4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f000 80fd 	beq.w	8010d52 <_dtoa_r+0xba2>
 8010b58:	2d00      	cmp	r5, #0
 8010b5a:	dd05      	ble.n	8010b68 <_dtoa_r+0x9b8>
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fb2f 	bl	80111c4 <__lshift>
 8010b66:	4607      	mov	r7, r0
 8010b68:	9b06      	ldr	r3, [sp, #24]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d05c      	beq.n	8010c28 <_dtoa_r+0xa78>
 8010b6e:	6879      	ldr	r1, [r7, #4]
 8010b70:	4620      	mov	r0, r4
 8010b72:	f000 f915 	bl	8010da0 <_Balloc>
 8010b76:	4605      	mov	r5, r0
 8010b78:	b928      	cbnz	r0, 8010b86 <_dtoa_r+0x9d6>
 8010b7a:	4b80      	ldr	r3, [pc, #512]	; (8010d7c <_dtoa_r+0xbcc>)
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b82:	f7ff bb2e 	b.w	80101e2 <_dtoa_r+0x32>
 8010b86:	693a      	ldr	r2, [r7, #16]
 8010b88:	3202      	adds	r2, #2
 8010b8a:	0092      	lsls	r2, r2, #2
 8010b8c:	f107 010c 	add.w	r1, r7, #12
 8010b90:	300c      	adds	r0, #12
 8010b92:	f7fe fdbb 	bl	800f70c <memcpy>
 8010b96:	2201      	movs	r2, #1
 8010b98:	4629      	mov	r1, r5
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f000 fb12 	bl	80111c4 <__lshift>
 8010ba0:	9b00      	ldr	r3, [sp, #0]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	9301      	str	r3, [sp, #4]
 8010ba6:	9b00      	ldr	r3, [sp, #0]
 8010ba8:	444b      	add	r3, r9
 8010baa:	9307      	str	r3, [sp, #28]
 8010bac:	9b02      	ldr	r3, [sp, #8]
 8010bae:	f003 0301 	and.w	r3, r3, #1
 8010bb2:	46b8      	mov	r8, r7
 8010bb4:	9306      	str	r3, [sp, #24]
 8010bb6:	4607      	mov	r7, r0
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	4631      	mov	r1, r6
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	4658      	mov	r0, fp
 8010bc0:	9302      	str	r3, [sp, #8]
 8010bc2:	f7ff fa6a 	bl	801009a <quorem>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	3330      	adds	r3, #48	; 0x30
 8010bca:	9004      	str	r0, [sp, #16]
 8010bcc:	4641      	mov	r1, r8
 8010bce:	4658      	mov	r0, fp
 8010bd0:	9308      	str	r3, [sp, #32]
 8010bd2:	f000 fb63 	bl	801129c <__mcmp>
 8010bd6:	463a      	mov	r2, r7
 8010bd8:	4681      	mov	r9, r0
 8010bda:	4631      	mov	r1, r6
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 fb79 	bl	80112d4 <__mdiff>
 8010be2:	68c2      	ldr	r2, [r0, #12]
 8010be4:	9b08      	ldr	r3, [sp, #32]
 8010be6:	4605      	mov	r5, r0
 8010be8:	bb02      	cbnz	r2, 8010c2c <_dtoa_r+0xa7c>
 8010bea:	4601      	mov	r1, r0
 8010bec:	4658      	mov	r0, fp
 8010bee:	f000 fb55 	bl	801129c <__mcmp>
 8010bf2:	9b08      	ldr	r3, [sp, #32]
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010bfe:	f000 f90f 	bl	8010e20 <_Bfree>
 8010c02:	9b05      	ldr	r3, [sp, #20]
 8010c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c06:	9d01      	ldr	r5, [sp, #4]
 8010c08:	ea43 0102 	orr.w	r1, r3, r2
 8010c0c:	9b06      	ldr	r3, [sp, #24]
 8010c0e:	430b      	orrs	r3, r1
 8010c10:	9b08      	ldr	r3, [sp, #32]
 8010c12:	d10d      	bne.n	8010c30 <_dtoa_r+0xa80>
 8010c14:	2b39      	cmp	r3, #57	; 0x39
 8010c16:	d029      	beq.n	8010c6c <_dtoa_r+0xabc>
 8010c18:	f1b9 0f00 	cmp.w	r9, #0
 8010c1c:	dd01      	ble.n	8010c22 <_dtoa_r+0xa72>
 8010c1e:	9b04      	ldr	r3, [sp, #16]
 8010c20:	3331      	adds	r3, #49	; 0x31
 8010c22:	9a02      	ldr	r2, [sp, #8]
 8010c24:	7013      	strb	r3, [r2, #0]
 8010c26:	e774      	b.n	8010b12 <_dtoa_r+0x962>
 8010c28:	4638      	mov	r0, r7
 8010c2a:	e7b9      	b.n	8010ba0 <_dtoa_r+0x9f0>
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	e7e2      	b.n	8010bf6 <_dtoa_r+0xa46>
 8010c30:	f1b9 0f00 	cmp.w	r9, #0
 8010c34:	db06      	blt.n	8010c44 <_dtoa_r+0xa94>
 8010c36:	9905      	ldr	r1, [sp, #20]
 8010c38:	ea41 0909 	orr.w	r9, r1, r9
 8010c3c:	9906      	ldr	r1, [sp, #24]
 8010c3e:	ea59 0101 	orrs.w	r1, r9, r1
 8010c42:	d120      	bne.n	8010c86 <_dtoa_r+0xad6>
 8010c44:	2a00      	cmp	r2, #0
 8010c46:	ddec      	ble.n	8010c22 <_dtoa_r+0xa72>
 8010c48:	4659      	mov	r1, fp
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	9301      	str	r3, [sp, #4]
 8010c50:	f000 fab8 	bl	80111c4 <__lshift>
 8010c54:	4631      	mov	r1, r6
 8010c56:	4683      	mov	fp, r0
 8010c58:	f000 fb20 	bl	801129c <__mcmp>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	9b01      	ldr	r3, [sp, #4]
 8010c60:	dc02      	bgt.n	8010c68 <_dtoa_r+0xab8>
 8010c62:	d1de      	bne.n	8010c22 <_dtoa_r+0xa72>
 8010c64:	07da      	lsls	r2, r3, #31
 8010c66:	d5dc      	bpl.n	8010c22 <_dtoa_r+0xa72>
 8010c68:	2b39      	cmp	r3, #57	; 0x39
 8010c6a:	d1d8      	bne.n	8010c1e <_dtoa_r+0xa6e>
 8010c6c:	9a02      	ldr	r2, [sp, #8]
 8010c6e:	2339      	movs	r3, #57	; 0x39
 8010c70:	7013      	strb	r3, [r2, #0]
 8010c72:	462b      	mov	r3, r5
 8010c74:	461d      	mov	r5, r3
 8010c76:	3b01      	subs	r3, #1
 8010c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c7c:	2a39      	cmp	r2, #57	; 0x39
 8010c7e:	d050      	beq.n	8010d22 <_dtoa_r+0xb72>
 8010c80:	3201      	adds	r2, #1
 8010c82:	701a      	strb	r2, [r3, #0]
 8010c84:	e745      	b.n	8010b12 <_dtoa_r+0x962>
 8010c86:	2a00      	cmp	r2, #0
 8010c88:	dd03      	ble.n	8010c92 <_dtoa_r+0xae2>
 8010c8a:	2b39      	cmp	r3, #57	; 0x39
 8010c8c:	d0ee      	beq.n	8010c6c <_dtoa_r+0xabc>
 8010c8e:	3301      	adds	r3, #1
 8010c90:	e7c7      	b.n	8010c22 <_dtoa_r+0xa72>
 8010c92:	9a01      	ldr	r2, [sp, #4]
 8010c94:	9907      	ldr	r1, [sp, #28]
 8010c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010c9a:	428a      	cmp	r2, r1
 8010c9c:	d02a      	beq.n	8010cf4 <_dtoa_r+0xb44>
 8010c9e:	4659      	mov	r1, fp
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	220a      	movs	r2, #10
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 f8dd 	bl	8010e64 <__multadd>
 8010caa:	45b8      	cmp	r8, r7
 8010cac:	4683      	mov	fp, r0
 8010cae:	f04f 0300 	mov.w	r3, #0
 8010cb2:	f04f 020a 	mov.w	r2, #10
 8010cb6:	4641      	mov	r1, r8
 8010cb8:	4620      	mov	r0, r4
 8010cba:	d107      	bne.n	8010ccc <_dtoa_r+0xb1c>
 8010cbc:	f000 f8d2 	bl	8010e64 <__multadd>
 8010cc0:	4680      	mov	r8, r0
 8010cc2:	4607      	mov	r7, r0
 8010cc4:	9b01      	ldr	r3, [sp, #4]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	9301      	str	r3, [sp, #4]
 8010cca:	e775      	b.n	8010bb8 <_dtoa_r+0xa08>
 8010ccc:	f000 f8ca 	bl	8010e64 <__multadd>
 8010cd0:	4639      	mov	r1, r7
 8010cd2:	4680      	mov	r8, r0
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	220a      	movs	r2, #10
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 f8c3 	bl	8010e64 <__multadd>
 8010cde:	4607      	mov	r7, r0
 8010ce0:	e7f0      	b.n	8010cc4 <_dtoa_r+0xb14>
 8010ce2:	f1b9 0f00 	cmp.w	r9, #0
 8010ce6:	9a00      	ldr	r2, [sp, #0]
 8010ce8:	bfcc      	ite	gt
 8010cea:	464d      	movgt	r5, r9
 8010cec:	2501      	movle	r5, #1
 8010cee:	4415      	add	r5, r2
 8010cf0:	f04f 0800 	mov.w	r8, #0
 8010cf4:	4659      	mov	r1, fp
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	f000 fa62 	bl	80111c4 <__lshift>
 8010d00:	4631      	mov	r1, r6
 8010d02:	4683      	mov	fp, r0
 8010d04:	f000 faca 	bl	801129c <__mcmp>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	dcb2      	bgt.n	8010c72 <_dtoa_r+0xac2>
 8010d0c:	d102      	bne.n	8010d14 <_dtoa_r+0xb64>
 8010d0e:	9b01      	ldr	r3, [sp, #4]
 8010d10:	07db      	lsls	r3, r3, #31
 8010d12:	d4ae      	bmi.n	8010c72 <_dtoa_r+0xac2>
 8010d14:	462b      	mov	r3, r5
 8010d16:	461d      	mov	r5, r3
 8010d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d1c:	2a30      	cmp	r2, #48	; 0x30
 8010d1e:	d0fa      	beq.n	8010d16 <_dtoa_r+0xb66>
 8010d20:	e6f7      	b.n	8010b12 <_dtoa_r+0x962>
 8010d22:	9a00      	ldr	r2, [sp, #0]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d1a5      	bne.n	8010c74 <_dtoa_r+0xac4>
 8010d28:	f10a 0a01 	add.w	sl, sl, #1
 8010d2c:	2331      	movs	r3, #49	; 0x31
 8010d2e:	e779      	b.n	8010c24 <_dtoa_r+0xa74>
 8010d30:	4b13      	ldr	r3, [pc, #76]	; (8010d80 <_dtoa_r+0xbd0>)
 8010d32:	f7ff baaf 	b.w	8010294 <_dtoa_r+0xe4>
 8010d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f47f aa86 	bne.w	801024a <_dtoa_r+0x9a>
 8010d3e:	4b11      	ldr	r3, [pc, #68]	; (8010d84 <_dtoa_r+0xbd4>)
 8010d40:	f7ff baa8 	b.w	8010294 <_dtoa_r+0xe4>
 8010d44:	f1b9 0f00 	cmp.w	r9, #0
 8010d48:	dc03      	bgt.n	8010d52 <_dtoa_r+0xba2>
 8010d4a:	9b05      	ldr	r3, [sp, #20]
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	f73f aec9 	bgt.w	8010ae4 <_dtoa_r+0x934>
 8010d52:	9d00      	ldr	r5, [sp, #0]
 8010d54:	4631      	mov	r1, r6
 8010d56:	4658      	mov	r0, fp
 8010d58:	f7ff f99f 	bl	801009a <quorem>
 8010d5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010d60:	f805 3b01 	strb.w	r3, [r5], #1
 8010d64:	9a00      	ldr	r2, [sp, #0]
 8010d66:	1aaa      	subs	r2, r5, r2
 8010d68:	4591      	cmp	r9, r2
 8010d6a:	ddba      	ble.n	8010ce2 <_dtoa_r+0xb32>
 8010d6c:	4659      	mov	r1, fp
 8010d6e:	2300      	movs	r3, #0
 8010d70:	220a      	movs	r2, #10
 8010d72:	4620      	mov	r0, r4
 8010d74:	f000 f876 	bl	8010e64 <__multadd>
 8010d78:	4683      	mov	fp, r0
 8010d7a:	e7eb      	b.n	8010d54 <_dtoa_r+0xba4>
 8010d7c:	0801451b 	.word	0x0801451b
 8010d80:	08014474 	.word	0x08014474
 8010d84:	08014498 	.word	0x08014498

08010d88 <_localeconv_r>:
 8010d88:	4800      	ldr	r0, [pc, #0]	; (8010d8c <_localeconv_r+0x4>)
 8010d8a:	4770      	bx	lr
 8010d8c:	2000016c 	.word	0x2000016c

08010d90 <malloc>:
 8010d90:	4b02      	ldr	r3, [pc, #8]	; (8010d9c <malloc+0xc>)
 8010d92:	4601      	mov	r1, r0
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	f000 bbe1 	b.w	801155c <_malloc_r>
 8010d9a:	bf00      	nop
 8010d9c:	20000018 	.word	0x20000018

08010da0 <_Balloc>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010da4:	4604      	mov	r4, r0
 8010da6:	460d      	mov	r5, r1
 8010da8:	b976      	cbnz	r6, 8010dc8 <_Balloc+0x28>
 8010daa:	2010      	movs	r0, #16
 8010dac:	f7ff fff0 	bl	8010d90 <malloc>
 8010db0:	4602      	mov	r2, r0
 8010db2:	6260      	str	r0, [r4, #36]	; 0x24
 8010db4:	b920      	cbnz	r0, 8010dc0 <_Balloc+0x20>
 8010db6:	4b18      	ldr	r3, [pc, #96]	; (8010e18 <_Balloc+0x78>)
 8010db8:	4818      	ldr	r0, [pc, #96]	; (8010e1c <_Balloc+0x7c>)
 8010dba:	2166      	movs	r1, #102	; 0x66
 8010dbc:	f000 fd94 	bl	80118e8 <__assert_func>
 8010dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dc4:	6006      	str	r6, [r0, #0]
 8010dc6:	60c6      	str	r6, [r0, #12]
 8010dc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010dca:	68f3      	ldr	r3, [r6, #12]
 8010dcc:	b183      	cbz	r3, 8010df0 <_Balloc+0x50>
 8010dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dd6:	b9b8      	cbnz	r0, 8010e08 <_Balloc+0x68>
 8010dd8:	2101      	movs	r1, #1
 8010dda:	fa01 f605 	lsl.w	r6, r1, r5
 8010dde:	1d72      	adds	r2, r6, #5
 8010de0:	0092      	lsls	r2, r2, #2
 8010de2:	4620      	mov	r0, r4
 8010de4:	f000 fb5a 	bl	801149c <_calloc_r>
 8010de8:	b160      	cbz	r0, 8010e04 <_Balloc+0x64>
 8010dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010dee:	e00e      	b.n	8010e0e <_Balloc+0x6e>
 8010df0:	2221      	movs	r2, #33	; 0x21
 8010df2:	2104      	movs	r1, #4
 8010df4:	4620      	mov	r0, r4
 8010df6:	f000 fb51 	bl	801149c <_calloc_r>
 8010dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dfc:	60f0      	str	r0, [r6, #12]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1e4      	bne.n	8010dce <_Balloc+0x2e>
 8010e04:	2000      	movs	r0, #0
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
 8010e08:	6802      	ldr	r2, [r0, #0]
 8010e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e14:	e7f7      	b.n	8010e06 <_Balloc+0x66>
 8010e16:	bf00      	nop
 8010e18:	080144a5 	.word	0x080144a5
 8010e1c:	0801452c 	.word	0x0801452c

08010e20 <_Bfree>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e24:	4605      	mov	r5, r0
 8010e26:	460c      	mov	r4, r1
 8010e28:	b976      	cbnz	r6, 8010e48 <_Bfree+0x28>
 8010e2a:	2010      	movs	r0, #16
 8010e2c:	f7ff ffb0 	bl	8010d90 <malloc>
 8010e30:	4602      	mov	r2, r0
 8010e32:	6268      	str	r0, [r5, #36]	; 0x24
 8010e34:	b920      	cbnz	r0, 8010e40 <_Bfree+0x20>
 8010e36:	4b09      	ldr	r3, [pc, #36]	; (8010e5c <_Bfree+0x3c>)
 8010e38:	4809      	ldr	r0, [pc, #36]	; (8010e60 <_Bfree+0x40>)
 8010e3a:	218a      	movs	r1, #138	; 0x8a
 8010e3c:	f000 fd54 	bl	80118e8 <__assert_func>
 8010e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e44:	6006      	str	r6, [r0, #0]
 8010e46:	60c6      	str	r6, [r0, #12]
 8010e48:	b13c      	cbz	r4, 8010e5a <_Bfree+0x3a>
 8010e4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e4c:	6862      	ldr	r2, [r4, #4]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e54:	6021      	str	r1, [r4, #0]
 8010e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e5a:	bd70      	pop	{r4, r5, r6, pc}
 8010e5c:	080144a5 	.word	0x080144a5
 8010e60:	0801452c 	.word	0x0801452c

08010e64 <__multadd>:
 8010e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e68:	690e      	ldr	r6, [r1, #16]
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	4698      	mov	r8, r3
 8010e6e:	460c      	mov	r4, r1
 8010e70:	f101 0014 	add.w	r0, r1, #20
 8010e74:	2300      	movs	r3, #0
 8010e76:	6805      	ldr	r5, [r0, #0]
 8010e78:	b2a9      	uxth	r1, r5
 8010e7a:	fb02 8101 	mla	r1, r2, r1, r8
 8010e7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010e82:	0c2d      	lsrs	r5, r5, #16
 8010e84:	fb02 c505 	mla	r5, r2, r5, ip
 8010e88:	b289      	uxth	r1, r1
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010e90:	429e      	cmp	r6, r3
 8010e92:	f840 1b04 	str.w	r1, [r0], #4
 8010e96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010e9a:	dcec      	bgt.n	8010e76 <__multadd+0x12>
 8010e9c:	f1b8 0f00 	cmp.w	r8, #0
 8010ea0:	d022      	beq.n	8010ee8 <__multadd+0x84>
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	42b3      	cmp	r3, r6
 8010ea6:	dc19      	bgt.n	8010edc <__multadd+0x78>
 8010ea8:	6861      	ldr	r1, [r4, #4]
 8010eaa:	4638      	mov	r0, r7
 8010eac:	3101      	adds	r1, #1
 8010eae:	f7ff ff77 	bl	8010da0 <_Balloc>
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	b928      	cbnz	r0, 8010ec2 <__multadd+0x5e>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	4b0d      	ldr	r3, [pc, #52]	; (8010ef0 <__multadd+0x8c>)
 8010eba:	480e      	ldr	r0, [pc, #56]	; (8010ef4 <__multadd+0x90>)
 8010ebc:	21b5      	movs	r1, #181	; 0xb5
 8010ebe:	f000 fd13 	bl	80118e8 <__assert_func>
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	3202      	adds	r2, #2
 8010ec6:	f104 010c 	add.w	r1, r4, #12
 8010eca:	0092      	lsls	r2, r2, #2
 8010ecc:	300c      	adds	r0, #12
 8010ece:	f7fe fc1d 	bl	800f70c <memcpy>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	f7ff ffa3 	bl	8010e20 <_Bfree>
 8010eda:	462c      	mov	r4, r5
 8010edc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010ee0:	3601      	adds	r6, #1
 8010ee2:	f8c3 8014 	str.w	r8, [r3, #20]
 8010ee6:	6126      	str	r6, [r4, #16]
 8010ee8:	4620      	mov	r0, r4
 8010eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eee:	bf00      	nop
 8010ef0:	0801451b 	.word	0x0801451b
 8010ef4:	0801452c 	.word	0x0801452c

08010ef8 <__hi0bits>:
 8010ef8:	0c03      	lsrs	r3, r0, #16
 8010efa:	041b      	lsls	r3, r3, #16
 8010efc:	b9d3      	cbnz	r3, 8010f34 <__hi0bits+0x3c>
 8010efe:	0400      	lsls	r0, r0, #16
 8010f00:	2310      	movs	r3, #16
 8010f02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f06:	bf04      	itt	eq
 8010f08:	0200      	lsleq	r0, r0, #8
 8010f0a:	3308      	addeq	r3, #8
 8010f0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f10:	bf04      	itt	eq
 8010f12:	0100      	lsleq	r0, r0, #4
 8010f14:	3304      	addeq	r3, #4
 8010f16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010f1a:	bf04      	itt	eq
 8010f1c:	0080      	lsleq	r0, r0, #2
 8010f1e:	3302      	addeq	r3, #2
 8010f20:	2800      	cmp	r0, #0
 8010f22:	db05      	blt.n	8010f30 <__hi0bits+0x38>
 8010f24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010f28:	f103 0301 	add.w	r3, r3, #1
 8010f2c:	bf08      	it	eq
 8010f2e:	2320      	moveq	r3, #32
 8010f30:	4618      	mov	r0, r3
 8010f32:	4770      	bx	lr
 8010f34:	2300      	movs	r3, #0
 8010f36:	e7e4      	b.n	8010f02 <__hi0bits+0xa>

08010f38 <__lo0bits>:
 8010f38:	6803      	ldr	r3, [r0, #0]
 8010f3a:	f013 0207 	ands.w	r2, r3, #7
 8010f3e:	4601      	mov	r1, r0
 8010f40:	d00b      	beq.n	8010f5a <__lo0bits+0x22>
 8010f42:	07da      	lsls	r2, r3, #31
 8010f44:	d424      	bmi.n	8010f90 <__lo0bits+0x58>
 8010f46:	0798      	lsls	r0, r3, #30
 8010f48:	bf49      	itett	mi
 8010f4a:	085b      	lsrmi	r3, r3, #1
 8010f4c:	089b      	lsrpl	r3, r3, #2
 8010f4e:	2001      	movmi	r0, #1
 8010f50:	600b      	strmi	r3, [r1, #0]
 8010f52:	bf5c      	itt	pl
 8010f54:	600b      	strpl	r3, [r1, #0]
 8010f56:	2002      	movpl	r0, #2
 8010f58:	4770      	bx	lr
 8010f5a:	b298      	uxth	r0, r3
 8010f5c:	b9b0      	cbnz	r0, 8010f8c <__lo0bits+0x54>
 8010f5e:	0c1b      	lsrs	r3, r3, #16
 8010f60:	2010      	movs	r0, #16
 8010f62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010f66:	bf04      	itt	eq
 8010f68:	0a1b      	lsreq	r3, r3, #8
 8010f6a:	3008      	addeq	r0, #8
 8010f6c:	071a      	lsls	r2, r3, #28
 8010f6e:	bf04      	itt	eq
 8010f70:	091b      	lsreq	r3, r3, #4
 8010f72:	3004      	addeq	r0, #4
 8010f74:	079a      	lsls	r2, r3, #30
 8010f76:	bf04      	itt	eq
 8010f78:	089b      	lsreq	r3, r3, #2
 8010f7a:	3002      	addeq	r0, #2
 8010f7c:	07da      	lsls	r2, r3, #31
 8010f7e:	d403      	bmi.n	8010f88 <__lo0bits+0x50>
 8010f80:	085b      	lsrs	r3, r3, #1
 8010f82:	f100 0001 	add.w	r0, r0, #1
 8010f86:	d005      	beq.n	8010f94 <__lo0bits+0x5c>
 8010f88:	600b      	str	r3, [r1, #0]
 8010f8a:	4770      	bx	lr
 8010f8c:	4610      	mov	r0, r2
 8010f8e:	e7e8      	b.n	8010f62 <__lo0bits+0x2a>
 8010f90:	2000      	movs	r0, #0
 8010f92:	4770      	bx	lr
 8010f94:	2020      	movs	r0, #32
 8010f96:	4770      	bx	lr

08010f98 <__i2b>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	460c      	mov	r4, r1
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	f7ff feff 	bl	8010da0 <_Balloc>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	b928      	cbnz	r0, 8010fb2 <__i2b+0x1a>
 8010fa6:	4b05      	ldr	r3, [pc, #20]	; (8010fbc <__i2b+0x24>)
 8010fa8:	4805      	ldr	r0, [pc, #20]	; (8010fc0 <__i2b+0x28>)
 8010faa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010fae:	f000 fc9b 	bl	80118e8 <__assert_func>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	6144      	str	r4, [r0, #20]
 8010fb6:	6103      	str	r3, [r0, #16]
 8010fb8:	bd10      	pop	{r4, pc}
 8010fba:	bf00      	nop
 8010fbc:	0801451b 	.word	0x0801451b
 8010fc0:	0801452c 	.word	0x0801452c

08010fc4 <__multiply>:
 8010fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc8:	4614      	mov	r4, r2
 8010fca:	690a      	ldr	r2, [r1, #16]
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	bfb8      	it	lt
 8010fd2:	460b      	movlt	r3, r1
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	bfbc      	itt	lt
 8010fd8:	4625      	movlt	r5, r4
 8010fda:	461c      	movlt	r4, r3
 8010fdc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010fe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010fe4:	68ab      	ldr	r3, [r5, #8]
 8010fe6:	6869      	ldr	r1, [r5, #4]
 8010fe8:	eb0a 0709 	add.w	r7, sl, r9
 8010fec:	42bb      	cmp	r3, r7
 8010fee:	b085      	sub	sp, #20
 8010ff0:	bfb8      	it	lt
 8010ff2:	3101      	addlt	r1, #1
 8010ff4:	f7ff fed4 	bl	8010da0 <_Balloc>
 8010ff8:	b930      	cbnz	r0, 8011008 <__multiply+0x44>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	4b42      	ldr	r3, [pc, #264]	; (8011108 <__multiply+0x144>)
 8010ffe:	4843      	ldr	r0, [pc, #268]	; (801110c <__multiply+0x148>)
 8011000:	f240 115d 	movw	r1, #349	; 0x15d
 8011004:	f000 fc70 	bl	80118e8 <__assert_func>
 8011008:	f100 0614 	add.w	r6, r0, #20
 801100c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011010:	4633      	mov	r3, r6
 8011012:	2200      	movs	r2, #0
 8011014:	4543      	cmp	r3, r8
 8011016:	d31e      	bcc.n	8011056 <__multiply+0x92>
 8011018:	f105 0c14 	add.w	ip, r5, #20
 801101c:	f104 0314 	add.w	r3, r4, #20
 8011020:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011024:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011028:	9202      	str	r2, [sp, #8]
 801102a:	ebac 0205 	sub.w	r2, ip, r5
 801102e:	3a15      	subs	r2, #21
 8011030:	f022 0203 	bic.w	r2, r2, #3
 8011034:	3204      	adds	r2, #4
 8011036:	f105 0115 	add.w	r1, r5, #21
 801103a:	458c      	cmp	ip, r1
 801103c:	bf38      	it	cc
 801103e:	2204      	movcc	r2, #4
 8011040:	9201      	str	r2, [sp, #4]
 8011042:	9a02      	ldr	r2, [sp, #8]
 8011044:	9303      	str	r3, [sp, #12]
 8011046:	429a      	cmp	r2, r3
 8011048:	d808      	bhi.n	801105c <__multiply+0x98>
 801104a:	2f00      	cmp	r7, #0
 801104c:	dc55      	bgt.n	80110fa <__multiply+0x136>
 801104e:	6107      	str	r7, [r0, #16]
 8011050:	b005      	add	sp, #20
 8011052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011056:	f843 2b04 	str.w	r2, [r3], #4
 801105a:	e7db      	b.n	8011014 <__multiply+0x50>
 801105c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011060:	f1ba 0f00 	cmp.w	sl, #0
 8011064:	d020      	beq.n	80110a8 <__multiply+0xe4>
 8011066:	f105 0e14 	add.w	lr, r5, #20
 801106a:	46b1      	mov	r9, r6
 801106c:	2200      	movs	r2, #0
 801106e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011072:	f8d9 b000 	ldr.w	fp, [r9]
 8011076:	b2a1      	uxth	r1, r4
 8011078:	fa1f fb8b 	uxth.w	fp, fp
 801107c:	fb0a b101 	mla	r1, sl, r1, fp
 8011080:	4411      	add	r1, r2
 8011082:	f8d9 2000 	ldr.w	r2, [r9]
 8011086:	0c24      	lsrs	r4, r4, #16
 8011088:	0c12      	lsrs	r2, r2, #16
 801108a:	fb0a 2404 	mla	r4, sl, r4, r2
 801108e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011092:	b289      	uxth	r1, r1
 8011094:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011098:	45f4      	cmp	ip, lr
 801109a:	f849 1b04 	str.w	r1, [r9], #4
 801109e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80110a2:	d8e4      	bhi.n	801106e <__multiply+0xaa>
 80110a4:	9901      	ldr	r1, [sp, #4]
 80110a6:	5072      	str	r2, [r6, r1]
 80110a8:	9a03      	ldr	r2, [sp, #12]
 80110aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80110ae:	3304      	adds	r3, #4
 80110b0:	f1b9 0f00 	cmp.w	r9, #0
 80110b4:	d01f      	beq.n	80110f6 <__multiply+0x132>
 80110b6:	6834      	ldr	r4, [r6, #0]
 80110b8:	f105 0114 	add.w	r1, r5, #20
 80110bc:	46b6      	mov	lr, r6
 80110be:	f04f 0a00 	mov.w	sl, #0
 80110c2:	880a      	ldrh	r2, [r1, #0]
 80110c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80110c8:	fb09 b202 	mla	r2, r9, r2, fp
 80110cc:	4492      	add	sl, r2
 80110ce:	b2a4      	uxth	r4, r4
 80110d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80110d4:	f84e 4b04 	str.w	r4, [lr], #4
 80110d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80110dc:	f8be 2000 	ldrh.w	r2, [lr]
 80110e0:	0c24      	lsrs	r4, r4, #16
 80110e2:	fb09 2404 	mla	r4, r9, r4, r2
 80110e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80110ea:	458c      	cmp	ip, r1
 80110ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80110f0:	d8e7      	bhi.n	80110c2 <__multiply+0xfe>
 80110f2:	9a01      	ldr	r2, [sp, #4]
 80110f4:	50b4      	str	r4, [r6, r2]
 80110f6:	3604      	adds	r6, #4
 80110f8:	e7a3      	b.n	8011042 <__multiply+0x7e>
 80110fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1a5      	bne.n	801104e <__multiply+0x8a>
 8011102:	3f01      	subs	r7, #1
 8011104:	e7a1      	b.n	801104a <__multiply+0x86>
 8011106:	bf00      	nop
 8011108:	0801451b 	.word	0x0801451b
 801110c:	0801452c 	.word	0x0801452c

08011110 <__pow5mult>:
 8011110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011114:	4615      	mov	r5, r2
 8011116:	f012 0203 	ands.w	r2, r2, #3
 801111a:	4606      	mov	r6, r0
 801111c:	460f      	mov	r7, r1
 801111e:	d007      	beq.n	8011130 <__pow5mult+0x20>
 8011120:	4c25      	ldr	r4, [pc, #148]	; (80111b8 <__pow5mult+0xa8>)
 8011122:	3a01      	subs	r2, #1
 8011124:	2300      	movs	r3, #0
 8011126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801112a:	f7ff fe9b 	bl	8010e64 <__multadd>
 801112e:	4607      	mov	r7, r0
 8011130:	10ad      	asrs	r5, r5, #2
 8011132:	d03d      	beq.n	80111b0 <__pow5mult+0xa0>
 8011134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011136:	b97c      	cbnz	r4, 8011158 <__pow5mult+0x48>
 8011138:	2010      	movs	r0, #16
 801113a:	f7ff fe29 	bl	8010d90 <malloc>
 801113e:	4602      	mov	r2, r0
 8011140:	6270      	str	r0, [r6, #36]	; 0x24
 8011142:	b928      	cbnz	r0, 8011150 <__pow5mult+0x40>
 8011144:	4b1d      	ldr	r3, [pc, #116]	; (80111bc <__pow5mult+0xac>)
 8011146:	481e      	ldr	r0, [pc, #120]	; (80111c0 <__pow5mult+0xb0>)
 8011148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801114c:	f000 fbcc 	bl	80118e8 <__assert_func>
 8011150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011154:	6004      	str	r4, [r0, #0]
 8011156:	60c4      	str	r4, [r0, #12]
 8011158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801115c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011160:	b94c      	cbnz	r4, 8011176 <__pow5mult+0x66>
 8011162:	f240 2171 	movw	r1, #625	; 0x271
 8011166:	4630      	mov	r0, r6
 8011168:	f7ff ff16 	bl	8010f98 <__i2b>
 801116c:	2300      	movs	r3, #0
 801116e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011172:	4604      	mov	r4, r0
 8011174:	6003      	str	r3, [r0, #0]
 8011176:	f04f 0900 	mov.w	r9, #0
 801117a:	07eb      	lsls	r3, r5, #31
 801117c:	d50a      	bpl.n	8011194 <__pow5mult+0x84>
 801117e:	4639      	mov	r1, r7
 8011180:	4622      	mov	r2, r4
 8011182:	4630      	mov	r0, r6
 8011184:	f7ff ff1e 	bl	8010fc4 <__multiply>
 8011188:	4639      	mov	r1, r7
 801118a:	4680      	mov	r8, r0
 801118c:	4630      	mov	r0, r6
 801118e:	f7ff fe47 	bl	8010e20 <_Bfree>
 8011192:	4647      	mov	r7, r8
 8011194:	106d      	asrs	r5, r5, #1
 8011196:	d00b      	beq.n	80111b0 <__pow5mult+0xa0>
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	b938      	cbnz	r0, 80111ac <__pow5mult+0x9c>
 801119c:	4622      	mov	r2, r4
 801119e:	4621      	mov	r1, r4
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7ff ff0f 	bl	8010fc4 <__multiply>
 80111a6:	6020      	str	r0, [r4, #0]
 80111a8:	f8c0 9000 	str.w	r9, [r0]
 80111ac:	4604      	mov	r4, r0
 80111ae:	e7e4      	b.n	801117a <__pow5mult+0x6a>
 80111b0:	4638      	mov	r0, r7
 80111b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b6:	bf00      	nop
 80111b8:	08014680 	.word	0x08014680
 80111bc:	080144a5 	.word	0x080144a5
 80111c0:	0801452c 	.word	0x0801452c

080111c4 <__lshift>:
 80111c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c8:	460c      	mov	r4, r1
 80111ca:	6849      	ldr	r1, [r1, #4]
 80111cc:	6923      	ldr	r3, [r4, #16]
 80111ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111d2:	68a3      	ldr	r3, [r4, #8]
 80111d4:	4607      	mov	r7, r0
 80111d6:	4691      	mov	r9, r2
 80111d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111dc:	f108 0601 	add.w	r6, r8, #1
 80111e0:	42b3      	cmp	r3, r6
 80111e2:	db0b      	blt.n	80111fc <__lshift+0x38>
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7ff fddb 	bl	8010da0 <_Balloc>
 80111ea:	4605      	mov	r5, r0
 80111ec:	b948      	cbnz	r0, 8011202 <__lshift+0x3e>
 80111ee:	4602      	mov	r2, r0
 80111f0:	4b28      	ldr	r3, [pc, #160]	; (8011294 <__lshift+0xd0>)
 80111f2:	4829      	ldr	r0, [pc, #164]	; (8011298 <__lshift+0xd4>)
 80111f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80111f8:	f000 fb76 	bl	80118e8 <__assert_func>
 80111fc:	3101      	adds	r1, #1
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	e7ee      	b.n	80111e0 <__lshift+0x1c>
 8011202:	2300      	movs	r3, #0
 8011204:	f100 0114 	add.w	r1, r0, #20
 8011208:	f100 0210 	add.w	r2, r0, #16
 801120c:	4618      	mov	r0, r3
 801120e:	4553      	cmp	r3, sl
 8011210:	db33      	blt.n	801127a <__lshift+0xb6>
 8011212:	6920      	ldr	r0, [r4, #16]
 8011214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011218:	f104 0314 	add.w	r3, r4, #20
 801121c:	f019 091f 	ands.w	r9, r9, #31
 8011220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011228:	d02b      	beq.n	8011282 <__lshift+0xbe>
 801122a:	f1c9 0e20 	rsb	lr, r9, #32
 801122e:	468a      	mov	sl, r1
 8011230:	2200      	movs	r2, #0
 8011232:	6818      	ldr	r0, [r3, #0]
 8011234:	fa00 f009 	lsl.w	r0, r0, r9
 8011238:	4302      	orrs	r2, r0
 801123a:	f84a 2b04 	str.w	r2, [sl], #4
 801123e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011242:	459c      	cmp	ip, r3
 8011244:	fa22 f20e 	lsr.w	r2, r2, lr
 8011248:	d8f3      	bhi.n	8011232 <__lshift+0x6e>
 801124a:	ebac 0304 	sub.w	r3, ip, r4
 801124e:	3b15      	subs	r3, #21
 8011250:	f023 0303 	bic.w	r3, r3, #3
 8011254:	3304      	adds	r3, #4
 8011256:	f104 0015 	add.w	r0, r4, #21
 801125a:	4584      	cmp	ip, r0
 801125c:	bf38      	it	cc
 801125e:	2304      	movcc	r3, #4
 8011260:	50ca      	str	r2, [r1, r3]
 8011262:	b10a      	cbz	r2, 8011268 <__lshift+0xa4>
 8011264:	f108 0602 	add.w	r6, r8, #2
 8011268:	3e01      	subs	r6, #1
 801126a:	4638      	mov	r0, r7
 801126c:	612e      	str	r6, [r5, #16]
 801126e:	4621      	mov	r1, r4
 8011270:	f7ff fdd6 	bl	8010e20 <_Bfree>
 8011274:	4628      	mov	r0, r5
 8011276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801127a:	f842 0f04 	str.w	r0, [r2, #4]!
 801127e:	3301      	adds	r3, #1
 8011280:	e7c5      	b.n	801120e <__lshift+0x4a>
 8011282:	3904      	subs	r1, #4
 8011284:	f853 2b04 	ldr.w	r2, [r3], #4
 8011288:	f841 2f04 	str.w	r2, [r1, #4]!
 801128c:	459c      	cmp	ip, r3
 801128e:	d8f9      	bhi.n	8011284 <__lshift+0xc0>
 8011290:	e7ea      	b.n	8011268 <__lshift+0xa4>
 8011292:	bf00      	nop
 8011294:	0801451b 	.word	0x0801451b
 8011298:	0801452c 	.word	0x0801452c

0801129c <__mcmp>:
 801129c:	b530      	push	{r4, r5, lr}
 801129e:	6902      	ldr	r2, [r0, #16]
 80112a0:	690c      	ldr	r4, [r1, #16]
 80112a2:	1b12      	subs	r2, r2, r4
 80112a4:	d10e      	bne.n	80112c4 <__mcmp+0x28>
 80112a6:	f100 0314 	add.w	r3, r0, #20
 80112aa:	3114      	adds	r1, #20
 80112ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80112b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80112b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80112b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80112bc:	42a5      	cmp	r5, r4
 80112be:	d003      	beq.n	80112c8 <__mcmp+0x2c>
 80112c0:	d305      	bcc.n	80112ce <__mcmp+0x32>
 80112c2:	2201      	movs	r2, #1
 80112c4:	4610      	mov	r0, r2
 80112c6:	bd30      	pop	{r4, r5, pc}
 80112c8:	4283      	cmp	r3, r0
 80112ca:	d3f3      	bcc.n	80112b4 <__mcmp+0x18>
 80112cc:	e7fa      	b.n	80112c4 <__mcmp+0x28>
 80112ce:	f04f 32ff 	mov.w	r2, #4294967295
 80112d2:	e7f7      	b.n	80112c4 <__mcmp+0x28>

080112d4 <__mdiff>:
 80112d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d8:	460c      	mov	r4, r1
 80112da:	4606      	mov	r6, r0
 80112dc:	4611      	mov	r1, r2
 80112de:	4620      	mov	r0, r4
 80112e0:	4617      	mov	r7, r2
 80112e2:	f7ff ffdb 	bl	801129c <__mcmp>
 80112e6:	1e05      	subs	r5, r0, #0
 80112e8:	d110      	bne.n	801130c <__mdiff+0x38>
 80112ea:	4629      	mov	r1, r5
 80112ec:	4630      	mov	r0, r6
 80112ee:	f7ff fd57 	bl	8010da0 <_Balloc>
 80112f2:	b930      	cbnz	r0, 8011302 <__mdiff+0x2e>
 80112f4:	4b39      	ldr	r3, [pc, #228]	; (80113dc <__mdiff+0x108>)
 80112f6:	4602      	mov	r2, r0
 80112f8:	f240 2132 	movw	r1, #562	; 0x232
 80112fc:	4838      	ldr	r0, [pc, #224]	; (80113e0 <__mdiff+0x10c>)
 80112fe:	f000 faf3 	bl	80118e8 <__assert_func>
 8011302:	2301      	movs	r3, #1
 8011304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130c:	bfa4      	itt	ge
 801130e:	463b      	movge	r3, r7
 8011310:	4627      	movge	r7, r4
 8011312:	4630      	mov	r0, r6
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	bfa6      	itte	ge
 8011318:	461c      	movge	r4, r3
 801131a:	2500      	movge	r5, #0
 801131c:	2501      	movlt	r5, #1
 801131e:	f7ff fd3f 	bl	8010da0 <_Balloc>
 8011322:	b920      	cbnz	r0, 801132e <__mdiff+0x5a>
 8011324:	4b2d      	ldr	r3, [pc, #180]	; (80113dc <__mdiff+0x108>)
 8011326:	4602      	mov	r2, r0
 8011328:	f44f 7110 	mov.w	r1, #576	; 0x240
 801132c:	e7e6      	b.n	80112fc <__mdiff+0x28>
 801132e:	693e      	ldr	r6, [r7, #16]
 8011330:	60c5      	str	r5, [r0, #12]
 8011332:	6925      	ldr	r5, [r4, #16]
 8011334:	f107 0114 	add.w	r1, r7, #20
 8011338:	f104 0914 	add.w	r9, r4, #20
 801133c:	f100 0e14 	add.w	lr, r0, #20
 8011340:	f107 0210 	add.w	r2, r7, #16
 8011344:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011348:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801134c:	46f2      	mov	sl, lr
 801134e:	2700      	movs	r7, #0
 8011350:	f859 3b04 	ldr.w	r3, [r9], #4
 8011354:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011358:	fa1f f883 	uxth.w	r8, r3
 801135c:	fa17 f78b 	uxtah	r7, r7, fp
 8011360:	0c1b      	lsrs	r3, r3, #16
 8011362:	eba7 0808 	sub.w	r8, r7, r8
 8011366:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801136a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801136e:	fa1f f888 	uxth.w	r8, r8
 8011372:	141f      	asrs	r7, r3, #16
 8011374:	454d      	cmp	r5, r9
 8011376:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801137a:	f84a 3b04 	str.w	r3, [sl], #4
 801137e:	d8e7      	bhi.n	8011350 <__mdiff+0x7c>
 8011380:	1b2b      	subs	r3, r5, r4
 8011382:	3b15      	subs	r3, #21
 8011384:	f023 0303 	bic.w	r3, r3, #3
 8011388:	3304      	adds	r3, #4
 801138a:	3415      	adds	r4, #21
 801138c:	42a5      	cmp	r5, r4
 801138e:	bf38      	it	cc
 8011390:	2304      	movcc	r3, #4
 8011392:	4419      	add	r1, r3
 8011394:	4473      	add	r3, lr
 8011396:	469e      	mov	lr, r3
 8011398:	460d      	mov	r5, r1
 801139a:	4565      	cmp	r5, ip
 801139c:	d30e      	bcc.n	80113bc <__mdiff+0xe8>
 801139e:	f10c 0203 	add.w	r2, ip, #3
 80113a2:	1a52      	subs	r2, r2, r1
 80113a4:	f022 0203 	bic.w	r2, r2, #3
 80113a8:	3903      	subs	r1, #3
 80113aa:	458c      	cmp	ip, r1
 80113ac:	bf38      	it	cc
 80113ae:	2200      	movcc	r2, #0
 80113b0:	441a      	add	r2, r3
 80113b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80113b6:	b17b      	cbz	r3, 80113d8 <__mdiff+0x104>
 80113b8:	6106      	str	r6, [r0, #16]
 80113ba:	e7a5      	b.n	8011308 <__mdiff+0x34>
 80113bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80113c0:	fa17 f488 	uxtah	r4, r7, r8
 80113c4:	1422      	asrs	r2, r4, #16
 80113c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80113ca:	b2a4      	uxth	r4, r4
 80113cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80113d0:	f84e 4b04 	str.w	r4, [lr], #4
 80113d4:	1417      	asrs	r7, r2, #16
 80113d6:	e7e0      	b.n	801139a <__mdiff+0xc6>
 80113d8:	3e01      	subs	r6, #1
 80113da:	e7ea      	b.n	80113b2 <__mdiff+0xde>
 80113dc:	0801451b 	.word	0x0801451b
 80113e0:	0801452c 	.word	0x0801452c

080113e4 <__d2b>:
 80113e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	4689      	mov	r9, r1
 80113ea:	2101      	movs	r1, #1
 80113ec:	ec57 6b10 	vmov	r6, r7, d0
 80113f0:	4690      	mov	r8, r2
 80113f2:	f7ff fcd5 	bl	8010da0 <_Balloc>
 80113f6:	4604      	mov	r4, r0
 80113f8:	b930      	cbnz	r0, 8011408 <__d2b+0x24>
 80113fa:	4602      	mov	r2, r0
 80113fc:	4b25      	ldr	r3, [pc, #148]	; (8011494 <__d2b+0xb0>)
 80113fe:	4826      	ldr	r0, [pc, #152]	; (8011498 <__d2b+0xb4>)
 8011400:	f240 310a 	movw	r1, #778	; 0x30a
 8011404:	f000 fa70 	bl	80118e8 <__assert_func>
 8011408:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801140c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011410:	bb35      	cbnz	r5, 8011460 <__d2b+0x7c>
 8011412:	2e00      	cmp	r6, #0
 8011414:	9301      	str	r3, [sp, #4]
 8011416:	d028      	beq.n	801146a <__d2b+0x86>
 8011418:	4668      	mov	r0, sp
 801141a:	9600      	str	r6, [sp, #0]
 801141c:	f7ff fd8c 	bl	8010f38 <__lo0bits>
 8011420:	9900      	ldr	r1, [sp, #0]
 8011422:	b300      	cbz	r0, 8011466 <__d2b+0x82>
 8011424:	9a01      	ldr	r2, [sp, #4]
 8011426:	f1c0 0320 	rsb	r3, r0, #32
 801142a:	fa02 f303 	lsl.w	r3, r2, r3
 801142e:	430b      	orrs	r3, r1
 8011430:	40c2      	lsrs	r2, r0
 8011432:	6163      	str	r3, [r4, #20]
 8011434:	9201      	str	r2, [sp, #4]
 8011436:	9b01      	ldr	r3, [sp, #4]
 8011438:	61a3      	str	r3, [r4, #24]
 801143a:	2b00      	cmp	r3, #0
 801143c:	bf14      	ite	ne
 801143e:	2202      	movne	r2, #2
 8011440:	2201      	moveq	r2, #1
 8011442:	6122      	str	r2, [r4, #16]
 8011444:	b1d5      	cbz	r5, 801147c <__d2b+0x98>
 8011446:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801144a:	4405      	add	r5, r0
 801144c:	f8c9 5000 	str.w	r5, [r9]
 8011450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011454:	f8c8 0000 	str.w	r0, [r8]
 8011458:	4620      	mov	r0, r4
 801145a:	b003      	add	sp, #12
 801145c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011464:	e7d5      	b.n	8011412 <__d2b+0x2e>
 8011466:	6161      	str	r1, [r4, #20]
 8011468:	e7e5      	b.n	8011436 <__d2b+0x52>
 801146a:	a801      	add	r0, sp, #4
 801146c:	f7ff fd64 	bl	8010f38 <__lo0bits>
 8011470:	9b01      	ldr	r3, [sp, #4]
 8011472:	6163      	str	r3, [r4, #20]
 8011474:	2201      	movs	r2, #1
 8011476:	6122      	str	r2, [r4, #16]
 8011478:	3020      	adds	r0, #32
 801147a:	e7e3      	b.n	8011444 <__d2b+0x60>
 801147c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011484:	f8c9 0000 	str.w	r0, [r9]
 8011488:	6918      	ldr	r0, [r3, #16]
 801148a:	f7ff fd35 	bl	8010ef8 <__hi0bits>
 801148e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011492:	e7df      	b.n	8011454 <__d2b+0x70>
 8011494:	0801451b 	.word	0x0801451b
 8011498:	0801452c 	.word	0x0801452c

0801149c <_calloc_r>:
 801149c:	b513      	push	{r0, r1, r4, lr}
 801149e:	434a      	muls	r2, r1
 80114a0:	4611      	mov	r1, r2
 80114a2:	9201      	str	r2, [sp, #4]
 80114a4:	f000 f85a 	bl	801155c <_malloc_r>
 80114a8:	4604      	mov	r4, r0
 80114aa:	b118      	cbz	r0, 80114b4 <_calloc_r+0x18>
 80114ac:	9a01      	ldr	r2, [sp, #4]
 80114ae:	2100      	movs	r1, #0
 80114b0:	f7fe f93a 	bl	800f728 <memset>
 80114b4:	4620      	mov	r0, r4
 80114b6:	b002      	add	sp, #8
 80114b8:	bd10      	pop	{r4, pc}
	...

080114bc <_free_r>:
 80114bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114be:	2900      	cmp	r1, #0
 80114c0:	d048      	beq.n	8011554 <_free_r+0x98>
 80114c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114c6:	9001      	str	r0, [sp, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f1a1 0404 	sub.w	r4, r1, #4
 80114ce:	bfb8      	it	lt
 80114d0:	18e4      	addlt	r4, r4, r3
 80114d2:	f000 fa65 	bl	80119a0 <__malloc_lock>
 80114d6:	4a20      	ldr	r2, [pc, #128]	; (8011558 <_free_r+0x9c>)
 80114d8:	9801      	ldr	r0, [sp, #4]
 80114da:	6813      	ldr	r3, [r2, #0]
 80114dc:	4615      	mov	r5, r2
 80114de:	b933      	cbnz	r3, 80114ee <_free_r+0x32>
 80114e0:	6063      	str	r3, [r4, #4]
 80114e2:	6014      	str	r4, [r2, #0]
 80114e4:	b003      	add	sp, #12
 80114e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114ea:	f000 ba5f 	b.w	80119ac <__malloc_unlock>
 80114ee:	42a3      	cmp	r3, r4
 80114f0:	d90b      	bls.n	801150a <_free_r+0x4e>
 80114f2:	6821      	ldr	r1, [r4, #0]
 80114f4:	1862      	adds	r2, r4, r1
 80114f6:	4293      	cmp	r3, r2
 80114f8:	bf04      	itt	eq
 80114fa:	681a      	ldreq	r2, [r3, #0]
 80114fc:	685b      	ldreq	r3, [r3, #4]
 80114fe:	6063      	str	r3, [r4, #4]
 8011500:	bf04      	itt	eq
 8011502:	1852      	addeq	r2, r2, r1
 8011504:	6022      	streq	r2, [r4, #0]
 8011506:	602c      	str	r4, [r5, #0]
 8011508:	e7ec      	b.n	80114e4 <_free_r+0x28>
 801150a:	461a      	mov	r2, r3
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	b10b      	cbz	r3, 8011514 <_free_r+0x58>
 8011510:	42a3      	cmp	r3, r4
 8011512:	d9fa      	bls.n	801150a <_free_r+0x4e>
 8011514:	6811      	ldr	r1, [r2, #0]
 8011516:	1855      	adds	r5, r2, r1
 8011518:	42a5      	cmp	r5, r4
 801151a:	d10b      	bne.n	8011534 <_free_r+0x78>
 801151c:	6824      	ldr	r4, [r4, #0]
 801151e:	4421      	add	r1, r4
 8011520:	1854      	adds	r4, r2, r1
 8011522:	42a3      	cmp	r3, r4
 8011524:	6011      	str	r1, [r2, #0]
 8011526:	d1dd      	bne.n	80114e4 <_free_r+0x28>
 8011528:	681c      	ldr	r4, [r3, #0]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	6053      	str	r3, [r2, #4]
 801152e:	4421      	add	r1, r4
 8011530:	6011      	str	r1, [r2, #0]
 8011532:	e7d7      	b.n	80114e4 <_free_r+0x28>
 8011534:	d902      	bls.n	801153c <_free_r+0x80>
 8011536:	230c      	movs	r3, #12
 8011538:	6003      	str	r3, [r0, #0]
 801153a:	e7d3      	b.n	80114e4 <_free_r+0x28>
 801153c:	6825      	ldr	r5, [r4, #0]
 801153e:	1961      	adds	r1, r4, r5
 8011540:	428b      	cmp	r3, r1
 8011542:	bf04      	itt	eq
 8011544:	6819      	ldreq	r1, [r3, #0]
 8011546:	685b      	ldreq	r3, [r3, #4]
 8011548:	6063      	str	r3, [r4, #4]
 801154a:	bf04      	itt	eq
 801154c:	1949      	addeq	r1, r1, r5
 801154e:	6021      	streq	r1, [r4, #0]
 8011550:	6054      	str	r4, [r2, #4]
 8011552:	e7c7      	b.n	80114e4 <_free_r+0x28>
 8011554:	b003      	add	sp, #12
 8011556:	bd30      	pop	{r4, r5, pc}
 8011558:	20002514 	.word	0x20002514

0801155c <_malloc_r>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	1ccd      	adds	r5, r1, #3
 8011560:	f025 0503 	bic.w	r5, r5, #3
 8011564:	3508      	adds	r5, #8
 8011566:	2d0c      	cmp	r5, #12
 8011568:	bf38      	it	cc
 801156a:	250c      	movcc	r5, #12
 801156c:	2d00      	cmp	r5, #0
 801156e:	4606      	mov	r6, r0
 8011570:	db01      	blt.n	8011576 <_malloc_r+0x1a>
 8011572:	42a9      	cmp	r1, r5
 8011574:	d903      	bls.n	801157e <_malloc_r+0x22>
 8011576:	230c      	movs	r3, #12
 8011578:	6033      	str	r3, [r6, #0]
 801157a:	2000      	movs	r0, #0
 801157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801157e:	f000 fa0f 	bl	80119a0 <__malloc_lock>
 8011582:	4921      	ldr	r1, [pc, #132]	; (8011608 <_malloc_r+0xac>)
 8011584:	680a      	ldr	r2, [r1, #0]
 8011586:	4614      	mov	r4, r2
 8011588:	b99c      	cbnz	r4, 80115b2 <_malloc_r+0x56>
 801158a:	4f20      	ldr	r7, [pc, #128]	; (801160c <_malloc_r+0xb0>)
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	b923      	cbnz	r3, 801159a <_malloc_r+0x3e>
 8011590:	4621      	mov	r1, r4
 8011592:	4630      	mov	r0, r6
 8011594:	f000 f998 	bl	80118c8 <_sbrk_r>
 8011598:	6038      	str	r0, [r7, #0]
 801159a:	4629      	mov	r1, r5
 801159c:	4630      	mov	r0, r6
 801159e:	f000 f993 	bl	80118c8 <_sbrk_r>
 80115a2:	1c43      	adds	r3, r0, #1
 80115a4:	d123      	bne.n	80115ee <_malloc_r+0x92>
 80115a6:	230c      	movs	r3, #12
 80115a8:	6033      	str	r3, [r6, #0]
 80115aa:	4630      	mov	r0, r6
 80115ac:	f000 f9fe 	bl	80119ac <__malloc_unlock>
 80115b0:	e7e3      	b.n	801157a <_malloc_r+0x1e>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	1b5b      	subs	r3, r3, r5
 80115b6:	d417      	bmi.n	80115e8 <_malloc_r+0x8c>
 80115b8:	2b0b      	cmp	r3, #11
 80115ba:	d903      	bls.n	80115c4 <_malloc_r+0x68>
 80115bc:	6023      	str	r3, [r4, #0]
 80115be:	441c      	add	r4, r3
 80115c0:	6025      	str	r5, [r4, #0]
 80115c2:	e004      	b.n	80115ce <_malloc_r+0x72>
 80115c4:	6863      	ldr	r3, [r4, #4]
 80115c6:	42a2      	cmp	r2, r4
 80115c8:	bf0c      	ite	eq
 80115ca:	600b      	streq	r3, [r1, #0]
 80115cc:	6053      	strne	r3, [r2, #4]
 80115ce:	4630      	mov	r0, r6
 80115d0:	f000 f9ec 	bl	80119ac <__malloc_unlock>
 80115d4:	f104 000b 	add.w	r0, r4, #11
 80115d8:	1d23      	adds	r3, r4, #4
 80115da:	f020 0007 	bic.w	r0, r0, #7
 80115de:	1ac2      	subs	r2, r0, r3
 80115e0:	d0cc      	beq.n	801157c <_malloc_r+0x20>
 80115e2:	1a1b      	subs	r3, r3, r0
 80115e4:	50a3      	str	r3, [r4, r2]
 80115e6:	e7c9      	b.n	801157c <_malloc_r+0x20>
 80115e8:	4622      	mov	r2, r4
 80115ea:	6864      	ldr	r4, [r4, #4]
 80115ec:	e7cc      	b.n	8011588 <_malloc_r+0x2c>
 80115ee:	1cc4      	adds	r4, r0, #3
 80115f0:	f024 0403 	bic.w	r4, r4, #3
 80115f4:	42a0      	cmp	r0, r4
 80115f6:	d0e3      	beq.n	80115c0 <_malloc_r+0x64>
 80115f8:	1a21      	subs	r1, r4, r0
 80115fa:	4630      	mov	r0, r6
 80115fc:	f000 f964 	bl	80118c8 <_sbrk_r>
 8011600:	3001      	adds	r0, #1
 8011602:	d1dd      	bne.n	80115c0 <_malloc_r+0x64>
 8011604:	e7cf      	b.n	80115a6 <_malloc_r+0x4a>
 8011606:	bf00      	nop
 8011608:	20002514 	.word	0x20002514
 801160c:	20002518 	.word	0x20002518

08011610 <__ssputs_r>:
 8011610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011614:	688e      	ldr	r6, [r1, #8]
 8011616:	429e      	cmp	r6, r3
 8011618:	4682      	mov	sl, r0
 801161a:	460c      	mov	r4, r1
 801161c:	4690      	mov	r8, r2
 801161e:	461f      	mov	r7, r3
 8011620:	d838      	bhi.n	8011694 <__ssputs_r+0x84>
 8011622:	898a      	ldrh	r2, [r1, #12]
 8011624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011628:	d032      	beq.n	8011690 <__ssputs_r+0x80>
 801162a:	6825      	ldr	r5, [r4, #0]
 801162c:	6909      	ldr	r1, [r1, #16]
 801162e:	eba5 0901 	sub.w	r9, r5, r1
 8011632:	6965      	ldr	r5, [r4, #20]
 8011634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801163c:	3301      	adds	r3, #1
 801163e:	444b      	add	r3, r9
 8011640:	106d      	asrs	r5, r5, #1
 8011642:	429d      	cmp	r5, r3
 8011644:	bf38      	it	cc
 8011646:	461d      	movcc	r5, r3
 8011648:	0553      	lsls	r3, r2, #21
 801164a:	d531      	bpl.n	80116b0 <__ssputs_r+0xa0>
 801164c:	4629      	mov	r1, r5
 801164e:	f7ff ff85 	bl	801155c <_malloc_r>
 8011652:	4606      	mov	r6, r0
 8011654:	b950      	cbnz	r0, 801166c <__ssputs_r+0x5c>
 8011656:	230c      	movs	r3, #12
 8011658:	f8ca 3000 	str.w	r3, [sl]
 801165c:	89a3      	ldrh	r3, [r4, #12]
 801165e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011662:	81a3      	strh	r3, [r4, #12]
 8011664:	f04f 30ff 	mov.w	r0, #4294967295
 8011668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801166c:	6921      	ldr	r1, [r4, #16]
 801166e:	464a      	mov	r2, r9
 8011670:	f7fe f84c 	bl	800f70c <memcpy>
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167e:	81a3      	strh	r3, [r4, #12]
 8011680:	6126      	str	r6, [r4, #16]
 8011682:	6165      	str	r5, [r4, #20]
 8011684:	444e      	add	r6, r9
 8011686:	eba5 0509 	sub.w	r5, r5, r9
 801168a:	6026      	str	r6, [r4, #0]
 801168c:	60a5      	str	r5, [r4, #8]
 801168e:	463e      	mov	r6, r7
 8011690:	42be      	cmp	r6, r7
 8011692:	d900      	bls.n	8011696 <__ssputs_r+0x86>
 8011694:	463e      	mov	r6, r7
 8011696:	4632      	mov	r2, r6
 8011698:	6820      	ldr	r0, [r4, #0]
 801169a:	4641      	mov	r1, r8
 801169c:	f000 f966 	bl	801196c <memmove>
 80116a0:	68a3      	ldr	r3, [r4, #8]
 80116a2:	6822      	ldr	r2, [r4, #0]
 80116a4:	1b9b      	subs	r3, r3, r6
 80116a6:	4432      	add	r2, r6
 80116a8:	60a3      	str	r3, [r4, #8]
 80116aa:	6022      	str	r2, [r4, #0]
 80116ac:	2000      	movs	r0, #0
 80116ae:	e7db      	b.n	8011668 <__ssputs_r+0x58>
 80116b0:	462a      	mov	r2, r5
 80116b2:	f000 f981 	bl	80119b8 <_realloc_r>
 80116b6:	4606      	mov	r6, r0
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d1e1      	bne.n	8011680 <__ssputs_r+0x70>
 80116bc:	6921      	ldr	r1, [r4, #16]
 80116be:	4650      	mov	r0, sl
 80116c0:	f7ff fefc 	bl	80114bc <_free_r>
 80116c4:	e7c7      	b.n	8011656 <__ssputs_r+0x46>
	...

080116c8 <_svfiprintf_r>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	4698      	mov	r8, r3
 80116ce:	898b      	ldrh	r3, [r1, #12]
 80116d0:	061b      	lsls	r3, r3, #24
 80116d2:	b09d      	sub	sp, #116	; 0x74
 80116d4:	4607      	mov	r7, r0
 80116d6:	460d      	mov	r5, r1
 80116d8:	4614      	mov	r4, r2
 80116da:	d50e      	bpl.n	80116fa <_svfiprintf_r+0x32>
 80116dc:	690b      	ldr	r3, [r1, #16]
 80116de:	b963      	cbnz	r3, 80116fa <_svfiprintf_r+0x32>
 80116e0:	2140      	movs	r1, #64	; 0x40
 80116e2:	f7ff ff3b 	bl	801155c <_malloc_r>
 80116e6:	6028      	str	r0, [r5, #0]
 80116e8:	6128      	str	r0, [r5, #16]
 80116ea:	b920      	cbnz	r0, 80116f6 <_svfiprintf_r+0x2e>
 80116ec:	230c      	movs	r3, #12
 80116ee:	603b      	str	r3, [r7, #0]
 80116f0:	f04f 30ff 	mov.w	r0, #4294967295
 80116f4:	e0d1      	b.n	801189a <_svfiprintf_r+0x1d2>
 80116f6:	2340      	movs	r3, #64	; 0x40
 80116f8:	616b      	str	r3, [r5, #20]
 80116fa:	2300      	movs	r3, #0
 80116fc:	9309      	str	r3, [sp, #36]	; 0x24
 80116fe:	2320      	movs	r3, #32
 8011700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011704:	f8cd 800c 	str.w	r8, [sp, #12]
 8011708:	2330      	movs	r3, #48	; 0x30
 801170a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80118b4 <_svfiprintf_r+0x1ec>
 801170e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011712:	f04f 0901 	mov.w	r9, #1
 8011716:	4623      	mov	r3, r4
 8011718:	469a      	mov	sl, r3
 801171a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801171e:	b10a      	cbz	r2, 8011724 <_svfiprintf_r+0x5c>
 8011720:	2a25      	cmp	r2, #37	; 0x25
 8011722:	d1f9      	bne.n	8011718 <_svfiprintf_r+0x50>
 8011724:	ebba 0b04 	subs.w	fp, sl, r4
 8011728:	d00b      	beq.n	8011742 <_svfiprintf_r+0x7a>
 801172a:	465b      	mov	r3, fp
 801172c:	4622      	mov	r2, r4
 801172e:	4629      	mov	r1, r5
 8011730:	4638      	mov	r0, r7
 8011732:	f7ff ff6d 	bl	8011610 <__ssputs_r>
 8011736:	3001      	adds	r0, #1
 8011738:	f000 80aa 	beq.w	8011890 <_svfiprintf_r+0x1c8>
 801173c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801173e:	445a      	add	r2, fp
 8011740:	9209      	str	r2, [sp, #36]	; 0x24
 8011742:	f89a 3000 	ldrb.w	r3, [sl]
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 80a2 	beq.w	8011890 <_svfiprintf_r+0x1c8>
 801174c:	2300      	movs	r3, #0
 801174e:	f04f 32ff 	mov.w	r2, #4294967295
 8011752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011756:	f10a 0a01 	add.w	sl, sl, #1
 801175a:	9304      	str	r3, [sp, #16]
 801175c:	9307      	str	r3, [sp, #28]
 801175e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011762:	931a      	str	r3, [sp, #104]	; 0x68
 8011764:	4654      	mov	r4, sl
 8011766:	2205      	movs	r2, #5
 8011768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801176c:	4851      	ldr	r0, [pc, #324]	; (80118b4 <_svfiprintf_r+0x1ec>)
 801176e:	f7ee fd47 	bl	8000200 <memchr>
 8011772:	9a04      	ldr	r2, [sp, #16]
 8011774:	b9d8      	cbnz	r0, 80117ae <_svfiprintf_r+0xe6>
 8011776:	06d0      	lsls	r0, r2, #27
 8011778:	bf44      	itt	mi
 801177a:	2320      	movmi	r3, #32
 801177c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011780:	0711      	lsls	r1, r2, #28
 8011782:	bf44      	itt	mi
 8011784:	232b      	movmi	r3, #43	; 0x2b
 8011786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801178a:	f89a 3000 	ldrb.w	r3, [sl]
 801178e:	2b2a      	cmp	r3, #42	; 0x2a
 8011790:	d015      	beq.n	80117be <_svfiprintf_r+0xf6>
 8011792:	9a07      	ldr	r2, [sp, #28]
 8011794:	4654      	mov	r4, sl
 8011796:	2000      	movs	r0, #0
 8011798:	f04f 0c0a 	mov.w	ip, #10
 801179c:	4621      	mov	r1, r4
 801179e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117a2:	3b30      	subs	r3, #48	; 0x30
 80117a4:	2b09      	cmp	r3, #9
 80117a6:	d94e      	bls.n	8011846 <_svfiprintf_r+0x17e>
 80117a8:	b1b0      	cbz	r0, 80117d8 <_svfiprintf_r+0x110>
 80117aa:	9207      	str	r2, [sp, #28]
 80117ac:	e014      	b.n	80117d8 <_svfiprintf_r+0x110>
 80117ae:	eba0 0308 	sub.w	r3, r0, r8
 80117b2:	fa09 f303 	lsl.w	r3, r9, r3
 80117b6:	4313      	orrs	r3, r2
 80117b8:	9304      	str	r3, [sp, #16]
 80117ba:	46a2      	mov	sl, r4
 80117bc:	e7d2      	b.n	8011764 <_svfiprintf_r+0x9c>
 80117be:	9b03      	ldr	r3, [sp, #12]
 80117c0:	1d19      	adds	r1, r3, #4
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	9103      	str	r1, [sp, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	bfbb      	ittet	lt
 80117ca:	425b      	neglt	r3, r3
 80117cc:	f042 0202 	orrlt.w	r2, r2, #2
 80117d0:	9307      	strge	r3, [sp, #28]
 80117d2:	9307      	strlt	r3, [sp, #28]
 80117d4:	bfb8      	it	lt
 80117d6:	9204      	strlt	r2, [sp, #16]
 80117d8:	7823      	ldrb	r3, [r4, #0]
 80117da:	2b2e      	cmp	r3, #46	; 0x2e
 80117dc:	d10c      	bne.n	80117f8 <_svfiprintf_r+0x130>
 80117de:	7863      	ldrb	r3, [r4, #1]
 80117e0:	2b2a      	cmp	r3, #42	; 0x2a
 80117e2:	d135      	bne.n	8011850 <_svfiprintf_r+0x188>
 80117e4:	9b03      	ldr	r3, [sp, #12]
 80117e6:	1d1a      	adds	r2, r3, #4
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	9203      	str	r2, [sp, #12]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	bfb8      	it	lt
 80117f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80117f4:	3402      	adds	r4, #2
 80117f6:	9305      	str	r3, [sp, #20]
 80117f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80118c4 <_svfiprintf_r+0x1fc>
 80117fc:	7821      	ldrb	r1, [r4, #0]
 80117fe:	2203      	movs	r2, #3
 8011800:	4650      	mov	r0, sl
 8011802:	f7ee fcfd 	bl	8000200 <memchr>
 8011806:	b140      	cbz	r0, 801181a <_svfiprintf_r+0x152>
 8011808:	2340      	movs	r3, #64	; 0x40
 801180a:	eba0 000a 	sub.w	r0, r0, sl
 801180e:	fa03 f000 	lsl.w	r0, r3, r0
 8011812:	9b04      	ldr	r3, [sp, #16]
 8011814:	4303      	orrs	r3, r0
 8011816:	3401      	adds	r4, #1
 8011818:	9304      	str	r3, [sp, #16]
 801181a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181e:	4826      	ldr	r0, [pc, #152]	; (80118b8 <_svfiprintf_r+0x1f0>)
 8011820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011824:	2206      	movs	r2, #6
 8011826:	f7ee fceb 	bl	8000200 <memchr>
 801182a:	2800      	cmp	r0, #0
 801182c:	d038      	beq.n	80118a0 <_svfiprintf_r+0x1d8>
 801182e:	4b23      	ldr	r3, [pc, #140]	; (80118bc <_svfiprintf_r+0x1f4>)
 8011830:	bb1b      	cbnz	r3, 801187a <_svfiprintf_r+0x1b2>
 8011832:	9b03      	ldr	r3, [sp, #12]
 8011834:	3307      	adds	r3, #7
 8011836:	f023 0307 	bic.w	r3, r3, #7
 801183a:	3308      	adds	r3, #8
 801183c:	9303      	str	r3, [sp, #12]
 801183e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011840:	4433      	add	r3, r6
 8011842:	9309      	str	r3, [sp, #36]	; 0x24
 8011844:	e767      	b.n	8011716 <_svfiprintf_r+0x4e>
 8011846:	fb0c 3202 	mla	r2, ip, r2, r3
 801184a:	460c      	mov	r4, r1
 801184c:	2001      	movs	r0, #1
 801184e:	e7a5      	b.n	801179c <_svfiprintf_r+0xd4>
 8011850:	2300      	movs	r3, #0
 8011852:	3401      	adds	r4, #1
 8011854:	9305      	str	r3, [sp, #20]
 8011856:	4619      	mov	r1, r3
 8011858:	f04f 0c0a 	mov.w	ip, #10
 801185c:	4620      	mov	r0, r4
 801185e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011862:	3a30      	subs	r2, #48	; 0x30
 8011864:	2a09      	cmp	r2, #9
 8011866:	d903      	bls.n	8011870 <_svfiprintf_r+0x1a8>
 8011868:	2b00      	cmp	r3, #0
 801186a:	d0c5      	beq.n	80117f8 <_svfiprintf_r+0x130>
 801186c:	9105      	str	r1, [sp, #20]
 801186e:	e7c3      	b.n	80117f8 <_svfiprintf_r+0x130>
 8011870:	fb0c 2101 	mla	r1, ip, r1, r2
 8011874:	4604      	mov	r4, r0
 8011876:	2301      	movs	r3, #1
 8011878:	e7f0      	b.n	801185c <_svfiprintf_r+0x194>
 801187a:	ab03      	add	r3, sp, #12
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	462a      	mov	r2, r5
 8011880:	4b0f      	ldr	r3, [pc, #60]	; (80118c0 <_svfiprintf_r+0x1f8>)
 8011882:	a904      	add	r1, sp, #16
 8011884:	4638      	mov	r0, r7
 8011886:	f7fd fff7 	bl	800f878 <_printf_float>
 801188a:	1c42      	adds	r2, r0, #1
 801188c:	4606      	mov	r6, r0
 801188e:	d1d6      	bne.n	801183e <_svfiprintf_r+0x176>
 8011890:	89ab      	ldrh	r3, [r5, #12]
 8011892:	065b      	lsls	r3, r3, #25
 8011894:	f53f af2c 	bmi.w	80116f0 <_svfiprintf_r+0x28>
 8011898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801189a:	b01d      	add	sp, #116	; 0x74
 801189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a0:	ab03      	add	r3, sp, #12
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	462a      	mov	r2, r5
 80118a6:	4b06      	ldr	r3, [pc, #24]	; (80118c0 <_svfiprintf_r+0x1f8>)
 80118a8:	a904      	add	r1, sp, #16
 80118aa:	4638      	mov	r0, r7
 80118ac:	f7fe fa88 	bl	800fdc0 <_printf_i>
 80118b0:	e7eb      	b.n	801188a <_svfiprintf_r+0x1c2>
 80118b2:	bf00      	nop
 80118b4:	0801468c 	.word	0x0801468c
 80118b8:	08014696 	.word	0x08014696
 80118bc:	0800f879 	.word	0x0800f879
 80118c0:	08011611 	.word	0x08011611
 80118c4:	08014692 	.word	0x08014692

080118c8 <_sbrk_r>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4d06      	ldr	r5, [pc, #24]	; (80118e4 <_sbrk_r+0x1c>)
 80118cc:	2300      	movs	r3, #0
 80118ce:	4604      	mov	r4, r0
 80118d0:	4608      	mov	r0, r1
 80118d2:	602b      	str	r3, [r5, #0]
 80118d4:	f7f4 f924 	bl	8005b20 <_sbrk>
 80118d8:	1c43      	adds	r3, r0, #1
 80118da:	d102      	bne.n	80118e2 <_sbrk_r+0x1a>
 80118dc:	682b      	ldr	r3, [r5, #0]
 80118de:	b103      	cbz	r3, 80118e2 <_sbrk_r+0x1a>
 80118e0:	6023      	str	r3, [r4, #0]
 80118e2:	bd38      	pop	{r3, r4, r5, pc}
 80118e4:	20002898 	.word	0x20002898

080118e8 <__assert_func>:
 80118e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118ea:	4614      	mov	r4, r2
 80118ec:	461a      	mov	r2, r3
 80118ee:	4b09      	ldr	r3, [pc, #36]	; (8011914 <__assert_func+0x2c>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4605      	mov	r5, r0
 80118f4:	68d8      	ldr	r0, [r3, #12]
 80118f6:	b14c      	cbz	r4, 801190c <__assert_func+0x24>
 80118f8:	4b07      	ldr	r3, [pc, #28]	; (8011918 <__assert_func+0x30>)
 80118fa:	9100      	str	r1, [sp, #0]
 80118fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011900:	4906      	ldr	r1, [pc, #24]	; (801191c <__assert_func+0x34>)
 8011902:	462b      	mov	r3, r5
 8011904:	f000 f80e 	bl	8011924 <fiprintf>
 8011908:	f000 faa4 	bl	8011e54 <abort>
 801190c:	4b04      	ldr	r3, [pc, #16]	; (8011920 <__assert_func+0x38>)
 801190e:	461c      	mov	r4, r3
 8011910:	e7f3      	b.n	80118fa <__assert_func+0x12>
 8011912:	bf00      	nop
 8011914:	20000018 	.word	0x20000018
 8011918:	0801469d 	.word	0x0801469d
 801191c:	080146aa 	.word	0x080146aa
 8011920:	080146d8 	.word	0x080146d8

08011924 <fiprintf>:
 8011924:	b40e      	push	{r1, r2, r3}
 8011926:	b503      	push	{r0, r1, lr}
 8011928:	4601      	mov	r1, r0
 801192a:	ab03      	add	r3, sp, #12
 801192c:	4805      	ldr	r0, [pc, #20]	; (8011944 <fiprintf+0x20>)
 801192e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011932:	6800      	ldr	r0, [r0, #0]
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	f000 f88f 	bl	8011a58 <_vfiprintf_r>
 801193a:	b002      	add	sp, #8
 801193c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011940:	b003      	add	sp, #12
 8011942:	4770      	bx	lr
 8011944:	20000018 	.word	0x20000018

08011948 <__ascii_mbtowc>:
 8011948:	b082      	sub	sp, #8
 801194a:	b901      	cbnz	r1, 801194e <__ascii_mbtowc+0x6>
 801194c:	a901      	add	r1, sp, #4
 801194e:	b142      	cbz	r2, 8011962 <__ascii_mbtowc+0x1a>
 8011950:	b14b      	cbz	r3, 8011966 <__ascii_mbtowc+0x1e>
 8011952:	7813      	ldrb	r3, [r2, #0]
 8011954:	600b      	str	r3, [r1, #0]
 8011956:	7812      	ldrb	r2, [r2, #0]
 8011958:	1e10      	subs	r0, r2, #0
 801195a:	bf18      	it	ne
 801195c:	2001      	movne	r0, #1
 801195e:	b002      	add	sp, #8
 8011960:	4770      	bx	lr
 8011962:	4610      	mov	r0, r2
 8011964:	e7fb      	b.n	801195e <__ascii_mbtowc+0x16>
 8011966:	f06f 0001 	mvn.w	r0, #1
 801196a:	e7f8      	b.n	801195e <__ascii_mbtowc+0x16>

0801196c <memmove>:
 801196c:	4288      	cmp	r0, r1
 801196e:	b510      	push	{r4, lr}
 8011970:	eb01 0402 	add.w	r4, r1, r2
 8011974:	d902      	bls.n	801197c <memmove+0x10>
 8011976:	4284      	cmp	r4, r0
 8011978:	4623      	mov	r3, r4
 801197a:	d807      	bhi.n	801198c <memmove+0x20>
 801197c:	1e43      	subs	r3, r0, #1
 801197e:	42a1      	cmp	r1, r4
 8011980:	d008      	beq.n	8011994 <memmove+0x28>
 8011982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011986:	f803 2f01 	strb.w	r2, [r3, #1]!
 801198a:	e7f8      	b.n	801197e <memmove+0x12>
 801198c:	4402      	add	r2, r0
 801198e:	4601      	mov	r1, r0
 8011990:	428a      	cmp	r2, r1
 8011992:	d100      	bne.n	8011996 <memmove+0x2a>
 8011994:	bd10      	pop	{r4, pc}
 8011996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801199a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801199e:	e7f7      	b.n	8011990 <memmove+0x24>

080119a0 <__malloc_lock>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__malloc_lock+0x8>)
 80119a2:	f000 bc17 	b.w	80121d4 <__retarget_lock_acquire_recursive>
 80119a6:	bf00      	nop
 80119a8:	200028a0 	.word	0x200028a0

080119ac <__malloc_unlock>:
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__malloc_unlock+0x8>)
 80119ae:	f000 bc12 	b.w	80121d6 <__retarget_lock_release_recursive>
 80119b2:	bf00      	nop
 80119b4:	200028a0 	.word	0x200028a0

080119b8 <_realloc_r>:
 80119b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ba:	4607      	mov	r7, r0
 80119bc:	4614      	mov	r4, r2
 80119be:	460e      	mov	r6, r1
 80119c0:	b921      	cbnz	r1, 80119cc <_realloc_r+0x14>
 80119c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80119c6:	4611      	mov	r1, r2
 80119c8:	f7ff bdc8 	b.w	801155c <_malloc_r>
 80119cc:	b922      	cbnz	r2, 80119d8 <_realloc_r+0x20>
 80119ce:	f7ff fd75 	bl	80114bc <_free_r>
 80119d2:	4625      	mov	r5, r4
 80119d4:	4628      	mov	r0, r5
 80119d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d8:	f000 fc62 	bl	80122a0 <_malloc_usable_size_r>
 80119dc:	42a0      	cmp	r0, r4
 80119de:	d20f      	bcs.n	8011a00 <_realloc_r+0x48>
 80119e0:	4621      	mov	r1, r4
 80119e2:	4638      	mov	r0, r7
 80119e4:	f7ff fdba 	bl	801155c <_malloc_r>
 80119e8:	4605      	mov	r5, r0
 80119ea:	2800      	cmp	r0, #0
 80119ec:	d0f2      	beq.n	80119d4 <_realloc_r+0x1c>
 80119ee:	4631      	mov	r1, r6
 80119f0:	4622      	mov	r2, r4
 80119f2:	f7fd fe8b 	bl	800f70c <memcpy>
 80119f6:	4631      	mov	r1, r6
 80119f8:	4638      	mov	r0, r7
 80119fa:	f7ff fd5f 	bl	80114bc <_free_r>
 80119fe:	e7e9      	b.n	80119d4 <_realloc_r+0x1c>
 8011a00:	4635      	mov	r5, r6
 8011a02:	e7e7      	b.n	80119d4 <_realloc_r+0x1c>

08011a04 <__sfputc_r>:
 8011a04:	6893      	ldr	r3, [r2, #8]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	b410      	push	{r4}
 8011a0c:	6093      	str	r3, [r2, #8]
 8011a0e:	da08      	bge.n	8011a22 <__sfputc_r+0x1e>
 8011a10:	6994      	ldr	r4, [r2, #24]
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	db01      	blt.n	8011a1a <__sfputc_r+0x16>
 8011a16:	290a      	cmp	r1, #10
 8011a18:	d103      	bne.n	8011a22 <__sfputc_r+0x1e>
 8011a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a1e:	f000 b94b 	b.w	8011cb8 <__swbuf_r>
 8011a22:	6813      	ldr	r3, [r2, #0]
 8011a24:	1c58      	adds	r0, r3, #1
 8011a26:	6010      	str	r0, [r2, #0]
 8011a28:	7019      	strb	r1, [r3, #0]
 8011a2a:	4608      	mov	r0, r1
 8011a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a30:	4770      	bx	lr

08011a32 <__sfputs_r>:
 8011a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a34:	4606      	mov	r6, r0
 8011a36:	460f      	mov	r7, r1
 8011a38:	4614      	mov	r4, r2
 8011a3a:	18d5      	adds	r5, r2, r3
 8011a3c:	42ac      	cmp	r4, r5
 8011a3e:	d101      	bne.n	8011a44 <__sfputs_r+0x12>
 8011a40:	2000      	movs	r0, #0
 8011a42:	e007      	b.n	8011a54 <__sfputs_r+0x22>
 8011a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a48:	463a      	mov	r2, r7
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ff ffda 	bl	8011a04 <__sfputc_r>
 8011a50:	1c43      	adds	r3, r0, #1
 8011a52:	d1f3      	bne.n	8011a3c <__sfputs_r+0xa>
 8011a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a58 <_vfiprintf_r>:
 8011a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	b09d      	sub	sp, #116	; 0x74
 8011a60:	4614      	mov	r4, r2
 8011a62:	4698      	mov	r8, r3
 8011a64:	4606      	mov	r6, r0
 8011a66:	b118      	cbz	r0, 8011a70 <_vfiprintf_r+0x18>
 8011a68:	6983      	ldr	r3, [r0, #24]
 8011a6a:	b90b      	cbnz	r3, 8011a70 <_vfiprintf_r+0x18>
 8011a6c:	f000 fb14 	bl	8012098 <__sinit>
 8011a70:	4b89      	ldr	r3, [pc, #548]	; (8011c98 <_vfiprintf_r+0x240>)
 8011a72:	429d      	cmp	r5, r3
 8011a74:	d11b      	bne.n	8011aae <_vfiprintf_r+0x56>
 8011a76:	6875      	ldr	r5, [r6, #4]
 8011a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a7a:	07d9      	lsls	r1, r3, #31
 8011a7c:	d405      	bmi.n	8011a8a <_vfiprintf_r+0x32>
 8011a7e:	89ab      	ldrh	r3, [r5, #12]
 8011a80:	059a      	lsls	r2, r3, #22
 8011a82:	d402      	bmi.n	8011a8a <_vfiprintf_r+0x32>
 8011a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a86:	f000 fba5 	bl	80121d4 <__retarget_lock_acquire_recursive>
 8011a8a:	89ab      	ldrh	r3, [r5, #12]
 8011a8c:	071b      	lsls	r3, r3, #28
 8011a8e:	d501      	bpl.n	8011a94 <_vfiprintf_r+0x3c>
 8011a90:	692b      	ldr	r3, [r5, #16]
 8011a92:	b9eb      	cbnz	r3, 8011ad0 <_vfiprintf_r+0x78>
 8011a94:	4629      	mov	r1, r5
 8011a96:	4630      	mov	r0, r6
 8011a98:	f000 f96e 	bl	8011d78 <__swsetup_r>
 8011a9c:	b1c0      	cbz	r0, 8011ad0 <_vfiprintf_r+0x78>
 8011a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011aa0:	07dc      	lsls	r4, r3, #31
 8011aa2:	d50e      	bpl.n	8011ac2 <_vfiprintf_r+0x6a>
 8011aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa8:	b01d      	add	sp, #116	; 0x74
 8011aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aae:	4b7b      	ldr	r3, [pc, #492]	; (8011c9c <_vfiprintf_r+0x244>)
 8011ab0:	429d      	cmp	r5, r3
 8011ab2:	d101      	bne.n	8011ab8 <_vfiprintf_r+0x60>
 8011ab4:	68b5      	ldr	r5, [r6, #8]
 8011ab6:	e7df      	b.n	8011a78 <_vfiprintf_r+0x20>
 8011ab8:	4b79      	ldr	r3, [pc, #484]	; (8011ca0 <_vfiprintf_r+0x248>)
 8011aba:	429d      	cmp	r5, r3
 8011abc:	bf08      	it	eq
 8011abe:	68f5      	ldreq	r5, [r6, #12]
 8011ac0:	e7da      	b.n	8011a78 <_vfiprintf_r+0x20>
 8011ac2:	89ab      	ldrh	r3, [r5, #12]
 8011ac4:	0598      	lsls	r0, r3, #22
 8011ac6:	d4ed      	bmi.n	8011aa4 <_vfiprintf_r+0x4c>
 8011ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aca:	f000 fb84 	bl	80121d6 <__retarget_lock_release_recursive>
 8011ace:	e7e9      	b.n	8011aa4 <_vfiprintf_r+0x4c>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ad4:	2320      	movs	r3, #32
 8011ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ade:	2330      	movs	r3, #48	; 0x30
 8011ae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ca4 <_vfiprintf_r+0x24c>
 8011ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ae8:	f04f 0901 	mov.w	r9, #1
 8011aec:	4623      	mov	r3, r4
 8011aee:	469a      	mov	sl, r3
 8011af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011af4:	b10a      	cbz	r2, 8011afa <_vfiprintf_r+0xa2>
 8011af6:	2a25      	cmp	r2, #37	; 0x25
 8011af8:	d1f9      	bne.n	8011aee <_vfiprintf_r+0x96>
 8011afa:	ebba 0b04 	subs.w	fp, sl, r4
 8011afe:	d00b      	beq.n	8011b18 <_vfiprintf_r+0xc0>
 8011b00:	465b      	mov	r3, fp
 8011b02:	4622      	mov	r2, r4
 8011b04:	4629      	mov	r1, r5
 8011b06:	4630      	mov	r0, r6
 8011b08:	f7ff ff93 	bl	8011a32 <__sfputs_r>
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	f000 80aa 	beq.w	8011c66 <_vfiprintf_r+0x20e>
 8011b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b14:	445a      	add	r2, fp
 8011b16:	9209      	str	r2, [sp, #36]	; 0x24
 8011b18:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	f000 80a2 	beq.w	8011c66 <_vfiprintf_r+0x20e>
 8011b22:	2300      	movs	r3, #0
 8011b24:	f04f 32ff 	mov.w	r2, #4294967295
 8011b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b2c:	f10a 0a01 	add.w	sl, sl, #1
 8011b30:	9304      	str	r3, [sp, #16]
 8011b32:	9307      	str	r3, [sp, #28]
 8011b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b38:	931a      	str	r3, [sp, #104]	; 0x68
 8011b3a:	4654      	mov	r4, sl
 8011b3c:	2205      	movs	r2, #5
 8011b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b42:	4858      	ldr	r0, [pc, #352]	; (8011ca4 <_vfiprintf_r+0x24c>)
 8011b44:	f7ee fb5c 	bl	8000200 <memchr>
 8011b48:	9a04      	ldr	r2, [sp, #16]
 8011b4a:	b9d8      	cbnz	r0, 8011b84 <_vfiprintf_r+0x12c>
 8011b4c:	06d1      	lsls	r1, r2, #27
 8011b4e:	bf44      	itt	mi
 8011b50:	2320      	movmi	r3, #32
 8011b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b56:	0713      	lsls	r3, r2, #28
 8011b58:	bf44      	itt	mi
 8011b5a:	232b      	movmi	r3, #43	; 0x2b
 8011b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b60:	f89a 3000 	ldrb.w	r3, [sl]
 8011b64:	2b2a      	cmp	r3, #42	; 0x2a
 8011b66:	d015      	beq.n	8011b94 <_vfiprintf_r+0x13c>
 8011b68:	9a07      	ldr	r2, [sp, #28]
 8011b6a:	4654      	mov	r4, sl
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	f04f 0c0a 	mov.w	ip, #10
 8011b72:	4621      	mov	r1, r4
 8011b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b78:	3b30      	subs	r3, #48	; 0x30
 8011b7a:	2b09      	cmp	r3, #9
 8011b7c:	d94e      	bls.n	8011c1c <_vfiprintf_r+0x1c4>
 8011b7e:	b1b0      	cbz	r0, 8011bae <_vfiprintf_r+0x156>
 8011b80:	9207      	str	r2, [sp, #28]
 8011b82:	e014      	b.n	8011bae <_vfiprintf_r+0x156>
 8011b84:	eba0 0308 	sub.w	r3, r0, r8
 8011b88:	fa09 f303 	lsl.w	r3, r9, r3
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	9304      	str	r3, [sp, #16]
 8011b90:	46a2      	mov	sl, r4
 8011b92:	e7d2      	b.n	8011b3a <_vfiprintf_r+0xe2>
 8011b94:	9b03      	ldr	r3, [sp, #12]
 8011b96:	1d19      	adds	r1, r3, #4
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	9103      	str	r1, [sp, #12]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	bfbb      	ittet	lt
 8011ba0:	425b      	neglt	r3, r3
 8011ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba6:	9307      	strge	r3, [sp, #28]
 8011ba8:	9307      	strlt	r3, [sp, #28]
 8011baa:	bfb8      	it	lt
 8011bac:	9204      	strlt	r2, [sp, #16]
 8011bae:	7823      	ldrb	r3, [r4, #0]
 8011bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8011bb2:	d10c      	bne.n	8011bce <_vfiprintf_r+0x176>
 8011bb4:	7863      	ldrb	r3, [r4, #1]
 8011bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8011bb8:	d135      	bne.n	8011c26 <_vfiprintf_r+0x1ce>
 8011bba:	9b03      	ldr	r3, [sp, #12]
 8011bbc:	1d1a      	adds	r2, r3, #4
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	9203      	str	r2, [sp, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	bfb8      	it	lt
 8011bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bca:	3402      	adds	r4, #2
 8011bcc:	9305      	str	r3, [sp, #20]
 8011bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011cb4 <_vfiprintf_r+0x25c>
 8011bd2:	7821      	ldrb	r1, [r4, #0]
 8011bd4:	2203      	movs	r2, #3
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	f7ee fb12 	bl	8000200 <memchr>
 8011bdc:	b140      	cbz	r0, 8011bf0 <_vfiprintf_r+0x198>
 8011bde:	2340      	movs	r3, #64	; 0x40
 8011be0:	eba0 000a 	sub.w	r0, r0, sl
 8011be4:	fa03 f000 	lsl.w	r0, r3, r0
 8011be8:	9b04      	ldr	r3, [sp, #16]
 8011bea:	4303      	orrs	r3, r0
 8011bec:	3401      	adds	r4, #1
 8011bee:	9304      	str	r3, [sp, #16]
 8011bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf4:	482c      	ldr	r0, [pc, #176]	; (8011ca8 <_vfiprintf_r+0x250>)
 8011bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bfa:	2206      	movs	r2, #6
 8011bfc:	f7ee fb00 	bl	8000200 <memchr>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d03f      	beq.n	8011c84 <_vfiprintf_r+0x22c>
 8011c04:	4b29      	ldr	r3, [pc, #164]	; (8011cac <_vfiprintf_r+0x254>)
 8011c06:	bb1b      	cbnz	r3, 8011c50 <_vfiprintf_r+0x1f8>
 8011c08:	9b03      	ldr	r3, [sp, #12]
 8011c0a:	3307      	adds	r3, #7
 8011c0c:	f023 0307 	bic.w	r3, r3, #7
 8011c10:	3308      	adds	r3, #8
 8011c12:	9303      	str	r3, [sp, #12]
 8011c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c16:	443b      	add	r3, r7
 8011c18:	9309      	str	r3, [sp, #36]	; 0x24
 8011c1a:	e767      	b.n	8011aec <_vfiprintf_r+0x94>
 8011c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c20:	460c      	mov	r4, r1
 8011c22:	2001      	movs	r0, #1
 8011c24:	e7a5      	b.n	8011b72 <_vfiprintf_r+0x11a>
 8011c26:	2300      	movs	r3, #0
 8011c28:	3401      	adds	r4, #1
 8011c2a:	9305      	str	r3, [sp, #20]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	f04f 0c0a 	mov.w	ip, #10
 8011c32:	4620      	mov	r0, r4
 8011c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c38:	3a30      	subs	r2, #48	; 0x30
 8011c3a:	2a09      	cmp	r2, #9
 8011c3c:	d903      	bls.n	8011c46 <_vfiprintf_r+0x1ee>
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d0c5      	beq.n	8011bce <_vfiprintf_r+0x176>
 8011c42:	9105      	str	r1, [sp, #20]
 8011c44:	e7c3      	b.n	8011bce <_vfiprintf_r+0x176>
 8011c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e7f0      	b.n	8011c32 <_vfiprintf_r+0x1da>
 8011c50:	ab03      	add	r3, sp, #12
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	462a      	mov	r2, r5
 8011c56:	4b16      	ldr	r3, [pc, #88]	; (8011cb0 <_vfiprintf_r+0x258>)
 8011c58:	a904      	add	r1, sp, #16
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f7fd fe0c 	bl	800f878 <_printf_float>
 8011c60:	4607      	mov	r7, r0
 8011c62:	1c78      	adds	r0, r7, #1
 8011c64:	d1d6      	bne.n	8011c14 <_vfiprintf_r+0x1bc>
 8011c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c68:	07d9      	lsls	r1, r3, #31
 8011c6a:	d405      	bmi.n	8011c78 <_vfiprintf_r+0x220>
 8011c6c:	89ab      	ldrh	r3, [r5, #12]
 8011c6e:	059a      	lsls	r2, r3, #22
 8011c70:	d402      	bmi.n	8011c78 <_vfiprintf_r+0x220>
 8011c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c74:	f000 faaf 	bl	80121d6 <__retarget_lock_release_recursive>
 8011c78:	89ab      	ldrh	r3, [r5, #12]
 8011c7a:	065b      	lsls	r3, r3, #25
 8011c7c:	f53f af12 	bmi.w	8011aa4 <_vfiprintf_r+0x4c>
 8011c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c82:	e711      	b.n	8011aa8 <_vfiprintf_r+0x50>
 8011c84:	ab03      	add	r3, sp, #12
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	462a      	mov	r2, r5
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <_vfiprintf_r+0x258>)
 8011c8c:	a904      	add	r1, sp, #16
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f7fe f896 	bl	800fdc0 <_printf_i>
 8011c94:	e7e4      	b.n	8011c60 <_vfiprintf_r+0x208>
 8011c96:	bf00      	nop
 8011c98:	08014804 	.word	0x08014804
 8011c9c:	08014824 	.word	0x08014824
 8011ca0:	080147e4 	.word	0x080147e4
 8011ca4:	0801468c 	.word	0x0801468c
 8011ca8:	08014696 	.word	0x08014696
 8011cac:	0800f879 	.word	0x0800f879
 8011cb0:	08011a33 	.word	0x08011a33
 8011cb4:	08014692 	.word	0x08014692

08011cb8 <__swbuf_r>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	460e      	mov	r6, r1
 8011cbc:	4614      	mov	r4, r2
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	b118      	cbz	r0, 8011cca <__swbuf_r+0x12>
 8011cc2:	6983      	ldr	r3, [r0, #24]
 8011cc4:	b90b      	cbnz	r3, 8011cca <__swbuf_r+0x12>
 8011cc6:	f000 f9e7 	bl	8012098 <__sinit>
 8011cca:	4b21      	ldr	r3, [pc, #132]	; (8011d50 <__swbuf_r+0x98>)
 8011ccc:	429c      	cmp	r4, r3
 8011cce:	d12b      	bne.n	8011d28 <__swbuf_r+0x70>
 8011cd0:	686c      	ldr	r4, [r5, #4]
 8011cd2:	69a3      	ldr	r3, [r4, #24]
 8011cd4:	60a3      	str	r3, [r4, #8]
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	071a      	lsls	r2, r3, #28
 8011cda:	d52f      	bpl.n	8011d3c <__swbuf_r+0x84>
 8011cdc:	6923      	ldr	r3, [r4, #16]
 8011cde:	b36b      	cbz	r3, 8011d3c <__swbuf_r+0x84>
 8011ce0:	6923      	ldr	r3, [r4, #16]
 8011ce2:	6820      	ldr	r0, [r4, #0]
 8011ce4:	1ac0      	subs	r0, r0, r3
 8011ce6:	6963      	ldr	r3, [r4, #20]
 8011ce8:	b2f6      	uxtb	r6, r6
 8011cea:	4283      	cmp	r3, r0
 8011cec:	4637      	mov	r7, r6
 8011cee:	dc04      	bgt.n	8011cfa <__swbuf_r+0x42>
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f000 f93c 	bl	8011f70 <_fflush_r>
 8011cf8:	bb30      	cbnz	r0, 8011d48 <__swbuf_r+0x90>
 8011cfa:	68a3      	ldr	r3, [r4, #8]
 8011cfc:	3b01      	subs	r3, #1
 8011cfe:	60a3      	str	r3, [r4, #8]
 8011d00:	6823      	ldr	r3, [r4, #0]
 8011d02:	1c5a      	adds	r2, r3, #1
 8011d04:	6022      	str	r2, [r4, #0]
 8011d06:	701e      	strb	r6, [r3, #0]
 8011d08:	6963      	ldr	r3, [r4, #20]
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	4283      	cmp	r3, r0
 8011d0e:	d004      	beq.n	8011d1a <__swbuf_r+0x62>
 8011d10:	89a3      	ldrh	r3, [r4, #12]
 8011d12:	07db      	lsls	r3, r3, #31
 8011d14:	d506      	bpl.n	8011d24 <__swbuf_r+0x6c>
 8011d16:	2e0a      	cmp	r6, #10
 8011d18:	d104      	bne.n	8011d24 <__swbuf_r+0x6c>
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f000 f927 	bl	8011f70 <_fflush_r>
 8011d22:	b988      	cbnz	r0, 8011d48 <__swbuf_r+0x90>
 8011d24:	4638      	mov	r0, r7
 8011d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d28:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <__swbuf_r+0x9c>)
 8011d2a:	429c      	cmp	r4, r3
 8011d2c:	d101      	bne.n	8011d32 <__swbuf_r+0x7a>
 8011d2e:	68ac      	ldr	r4, [r5, #8]
 8011d30:	e7cf      	b.n	8011cd2 <__swbuf_r+0x1a>
 8011d32:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <__swbuf_r+0xa0>)
 8011d34:	429c      	cmp	r4, r3
 8011d36:	bf08      	it	eq
 8011d38:	68ec      	ldreq	r4, [r5, #12]
 8011d3a:	e7ca      	b.n	8011cd2 <__swbuf_r+0x1a>
 8011d3c:	4621      	mov	r1, r4
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f000 f81a 	bl	8011d78 <__swsetup_r>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d0cb      	beq.n	8011ce0 <__swbuf_r+0x28>
 8011d48:	f04f 37ff 	mov.w	r7, #4294967295
 8011d4c:	e7ea      	b.n	8011d24 <__swbuf_r+0x6c>
 8011d4e:	bf00      	nop
 8011d50:	08014804 	.word	0x08014804
 8011d54:	08014824 	.word	0x08014824
 8011d58:	080147e4 	.word	0x080147e4

08011d5c <__ascii_wctomb>:
 8011d5c:	b149      	cbz	r1, 8011d72 <__ascii_wctomb+0x16>
 8011d5e:	2aff      	cmp	r2, #255	; 0xff
 8011d60:	bf85      	ittet	hi
 8011d62:	238a      	movhi	r3, #138	; 0x8a
 8011d64:	6003      	strhi	r3, [r0, #0]
 8011d66:	700a      	strbls	r2, [r1, #0]
 8011d68:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d6c:	bf98      	it	ls
 8011d6e:	2001      	movls	r0, #1
 8011d70:	4770      	bx	lr
 8011d72:	4608      	mov	r0, r1
 8011d74:	4770      	bx	lr
	...

08011d78 <__swsetup_r>:
 8011d78:	4b32      	ldr	r3, [pc, #200]	; (8011e44 <__swsetup_r+0xcc>)
 8011d7a:	b570      	push	{r4, r5, r6, lr}
 8011d7c:	681d      	ldr	r5, [r3, #0]
 8011d7e:	4606      	mov	r6, r0
 8011d80:	460c      	mov	r4, r1
 8011d82:	b125      	cbz	r5, 8011d8e <__swsetup_r+0x16>
 8011d84:	69ab      	ldr	r3, [r5, #24]
 8011d86:	b913      	cbnz	r3, 8011d8e <__swsetup_r+0x16>
 8011d88:	4628      	mov	r0, r5
 8011d8a:	f000 f985 	bl	8012098 <__sinit>
 8011d8e:	4b2e      	ldr	r3, [pc, #184]	; (8011e48 <__swsetup_r+0xd0>)
 8011d90:	429c      	cmp	r4, r3
 8011d92:	d10f      	bne.n	8011db4 <__swsetup_r+0x3c>
 8011d94:	686c      	ldr	r4, [r5, #4]
 8011d96:	89a3      	ldrh	r3, [r4, #12]
 8011d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d9c:	0719      	lsls	r1, r3, #28
 8011d9e:	d42c      	bmi.n	8011dfa <__swsetup_r+0x82>
 8011da0:	06dd      	lsls	r5, r3, #27
 8011da2:	d411      	bmi.n	8011dc8 <__swsetup_r+0x50>
 8011da4:	2309      	movs	r3, #9
 8011da6:	6033      	str	r3, [r6, #0]
 8011da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	f04f 30ff 	mov.w	r0, #4294967295
 8011db2:	e03e      	b.n	8011e32 <__swsetup_r+0xba>
 8011db4:	4b25      	ldr	r3, [pc, #148]	; (8011e4c <__swsetup_r+0xd4>)
 8011db6:	429c      	cmp	r4, r3
 8011db8:	d101      	bne.n	8011dbe <__swsetup_r+0x46>
 8011dba:	68ac      	ldr	r4, [r5, #8]
 8011dbc:	e7eb      	b.n	8011d96 <__swsetup_r+0x1e>
 8011dbe:	4b24      	ldr	r3, [pc, #144]	; (8011e50 <__swsetup_r+0xd8>)
 8011dc0:	429c      	cmp	r4, r3
 8011dc2:	bf08      	it	eq
 8011dc4:	68ec      	ldreq	r4, [r5, #12]
 8011dc6:	e7e6      	b.n	8011d96 <__swsetup_r+0x1e>
 8011dc8:	0758      	lsls	r0, r3, #29
 8011dca:	d512      	bpl.n	8011df2 <__swsetup_r+0x7a>
 8011dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dce:	b141      	cbz	r1, 8011de2 <__swsetup_r+0x6a>
 8011dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dd4:	4299      	cmp	r1, r3
 8011dd6:	d002      	beq.n	8011dde <__swsetup_r+0x66>
 8011dd8:	4630      	mov	r0, r6
 8011dda:	f7ff fb6f 	bl	80114bc <_free_r>
 8011dde:	2300      	movs	r3, #0
 8011de0:	6363      	str	r3, [r4, #52]	; 0x34
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	2300      	movs	r3, #0
 8011dec:	6063      	str	r3, [r4, #4]
 8011dee:	6923      	ldr	r3, [r4, #16]
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	89a3      	ldrh	r3, [r4, #12]
 8011df4:	f043 0308 	orr.w	r3, r3, #8
 8011df8:	81a3      	strh	r3, [r4, #12]
 8011dfa:	6923      	ldr	r3, [r4, #16]
 8011dfc:	b94b      	cbnz	r3, 8011e12 <__swsetup_r+0x9a>
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e08:	d003      	beq.n	8011e12 <__swsetup_r+0x9a>
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f000 fa07 	bl	8012220 <__smakebuf_r>
 8011e12:	89a0      	ldrh	r0, [r4, #12]
 8011e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e18:	f010 0301 	ands.w	r3, r0, #1
 8011e1c:	d00a      	beq.n	8011e34 <__swsetup_r+0xbc>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	60a3      	str	r3, [r4, #8]
 8011e22:	6963      	ldr	r3, [r4, #20]
 8011e24:	425b      	negs	r3, r3
 8011e26:	61a3      	str	r3, [r4, #24]
 8011e28:	6923      	ldr	r3, [r4, #16]
 8011e2a:	b943      	cbnz	r3, 8011e3e <__swsetup_r+0xc6>
 8011e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e30:	d1ba      	bne.n	8011da8 <__swsetup_r+0x30>
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	0781      	lsls	r1, r0, #30
 8011e36:	bf58      	it	pl
 8011e38:	6963      	ldrpl	r3, [r4, #20]
 8011e3a:	60a3      	str	r3, [r4, #8]
 8011e3c:	e7f4      	b.n	8011e28 <__swsetup_r+0xb0>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e7f7      	b.n	8011e32 <__swsetup_r+0xba>
 8011e42:	bf00      	nop
 8011e44:	20000018 	.word	0x20000018
 8011e48:	08014804 	.word	0x08014804
 8011e4c:	08014824 	.word	0x08014824
 8011e50:	080147e4 	.word	0x080147e4

08011e54 <abort>:
 8011e54:	b508      	push	{r3, lr}
 8011e56:	2006      	movs	r0, #6
 8011e58:	f000 fa52 	bl	8012300 <raise>
 8011e5c:	2001      	movs	r0, #1
 8011e5e:	f7f3 fde7 	bl	8005a30 <_exit>
	...

08011e64 <__sflush_r>:
 8011e64:	898a      	ldrh	r2, [r1, #12]
 8011e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	0710      	lsls	r0, r2, #28
 8011e6e:	460c      	mov	r4, r1
 8011e70:	d458      	bmi.n	8011f24 <__sflush_r+0xc0>
 8011e72:	684b      	ldr	r3, [r1, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	dc05      	bgt.n	8011e84 <__sflush_r+0x20>
 8011e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	dc02      	bgt.n	8011e84 <__sflush_r+0x20>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e86:	2e00      	cmp	r6, #0
 8011e88:	d0f9      	beq.n	8011e7e <__sflush_r+0x1a>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e90:	682f      	ldr	r7, [r5, #0]
 8011e92:	602b      	str	r3, [r5, #0]
 8011e94:	d032      	beq.n	8011efc <__sflush_r+0x98>
 8011e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e98:	89a3      	ldrh	r3, [r4, #12]
 8011e9a:	075a      	lsls	r2, r3, #29
 8011e9c:	d505      	bpl.n	8011eaa <__sflush_r+0x46>
 8011e9e:	6863      	ldr	r3, [r4, #4]
 8011ea0:	1ac0      	subs	r0, r0, r3
 8011ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ea4:	b10b      	cbz	r3, 8011eaa <__sflush_r+0x46>
 8011ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ea8:	1ac0      	subs	r0, r0, r3
 8011eaa:	2300      	movs	r3, #0
 8011eac:	4602      	mov	r2, r0
 8011eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eb0:	6a21      	ldr	r1, [r4, #32]
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	47b0      	blx	r6
 8011eb6:	1c43      	adds	r3, r0, #1
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	d106      	bne.n	8011eca <__sflush_r+0x66>
 8011ebc:	6829      	ldr	r1, [r5, #0]
 8011ebe:	291d      	cmp	r1, #29
 8011ec0:	d82c      	bhi.n	8011f1c <__sflush_r+0xb8>
 8011ec2:	4a2a      	ldr	r2, [pc, #168]	; (8011f6c <__sflush_r+0x108>)
 8011ec4:	40ca      	lsrs	r2, r1
 8011ec6:	07d6      	lsls	r6, r2, #31
 8011ec8:	d528      	bpl.n	8011f1c <__sflush_r+0xb8>
 8011eca:	2200      	movs	r2, #0
 8011ecc:	6062      	str	r2, [r4, #4]
 8011ece:	04d9      	lsls	r1, r3, #19
 8011ed0:	6922      	ldr	r2, [r4, #16]
 8011ed2:	6022      	str	r2, [r4, #0]
 8011ed4:	d504      	bpl.n	8011ee0 <__sflush_r+0x7c>
 8011ed6:	1c42      	adds	r2, r0, #1
 8011ed8:	d101      	bne.n	8011ede <__sflush_r+0x7a>
 8011eda:	682b      	ldr	r3, [r5, #0]
 8011edc:	b903      	cbnz	r3, 8011ee0 <__sflush_r+0x7c>
 8011ede:	6560      	str	r0, [r4, #84]	; 0x54
 8011ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ee2:	602f      	str	r7, [r5, #0]
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	d0ca      	beq.n	8011e7e <__sflush_r+0x1a>
 8011ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011eec:	4299      	cmp	r1, r3
 8011eee:	d002      	beq.n	8011ef6 <__sflush_r+0x92>
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	f7ff fae3 	bl	80114bc <_free_r>
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8011efa:	e7c1      	b.n	8011e80 <__sflush_r+0x1c>
 8011efc:	6a21      	ldr	r1, [r4, #32]
 8011efe:	2301      	movs	r3, #1
 8011f00:	4628      	mov	r0, r5
 8011f02:	47b0      	blx	r6
 8011f04:	1c41      	adds	r1, r0, #1
 8011f06:	d1c7      	bne.n	8011e98 <__sflush_r+0x34>
 8011f08:	682b      	ldr	r3, [r5, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d0c4      	beq.n	8011e98 <__sflush_r+0x34>
 8011f0e:	2b1d      	cmp	r3, #29
 8011f10:	d001      	beq.n	8011f16 <__sflush_r+0xb2>
 8011f12:	2b16      	cmp	r3, #22
 8011f14:	d101      	bne.n	8011f1a <__sflush_r+0xb6>
 8011f16:	602f      	str	r7, [r5, #0]
 8011f18:	e7b1      	b.n	8011e7e <__sflush_r+0x1a>
 8011f1a:	89a3      	ldrh	r3, [r4, #12]
 8011f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f20:	81a3      	strh	r3, [r4, #12]
 8011f22:	e7ad      	b.n	8011e80 <__sflush_r+0x1c>
 8011f24:	690f      	ldr	r7, [r1, #16]
 8011f26:	2f00      	cmp	r7, #0
 8011f28:	d0a9      	beq.n	8011e7e <__sflush_r+0x1a>
 8011f2a:	0793      	lsls	r3, r2, #30
 8011f2c:	680e      	ldr	r6, [r1, #0]
 8011f2e:	bf08      	it	eq
 8011f30:	694b      	ldreq	r3, [r1, #20]
 8011f32:	600f      	str	r7, [r1, #0]
 8011f34:	bf18      	it	ne
 8011f36:	2300      	movne	r3, #0
 8011f38:	eba6 0807 	sub.w	r8, r6, r7
 8011f3c:	608b      	str	r3, [r1, #8]
 8011f3e:	f1b8 0f00 	cmp.w	r8, #0
 8011f42:	dd9c      	ble.n	8011e7e <__sflush_r+0x1a>
 8011f44:	6a21      	ldr	r1, [r4, #32]
 8011f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f48:	4643      	mov	r3, r8
 8011f4a:	463a      	mov	r2, r7
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	47b0      	blx	r6
 8011f50:	2800      	cmp	r0, #0
 8011f52:	dc06      	bgt.n	8011f62 <__sflush_r+0xfe>
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f5a:	81a3      	strh	r3, [r4, #12]
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f60:	e78e      	b.n	8011e80 <__sflush_r+0x1c>
 8011f62:	4407      	add	r7, r0
 8011f64:	eba8 0800 	sub.w	r8, r8, r0
 8011f68:	e7e9      	b.n	8011f3e <__sflush_r+0xda>
 8011f6a:	bf00      	nop
 8011f6c:	20400001 	.word	0x20400001

08011f70 <_fflush_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	690b      	ldr	r3, [r1, #16]
 8011f74:	4605      	mov	r5, r0
 8011f76:	460c      	mov	r4, r1
 8011f78:	b913      	cbnz	r3, 8011f80 <_fflush_r+0x10>
 8011f7a:	2500      	movs	r5, #0
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	bd38      	pop	{r3, r4, r5, pc}
 8011f80:	b118      	cbz	r0, 8011f8a <_fflush_r+0x1a>
 8011f82:	6983      	ldr	r3, [r0, #24]
 8011f84:	b90b      	cbnz	r3, 8011f8a <_fflush_r+0x1a>
 8011f86:	f000 f887 	bl	8012098 <__sinit>
 8011f8a:	4b14      	ldr	r3, [pc, #80]	; (8011fdc <_fflush_r+0x6c>)
 8011f8c:	429c      	cmp	r4, r3
 8011f8e:	d11b      	bne.n	8011fc8 <_fflush_r+0x58>
 8011f90:	686c      	ldr	r4, [r5, #4]
 8011f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d0ef      	beq.n	8011f7a <_fflush_r+0xa>
 8011f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f9c:	07d0      	lsls	r0, r2, #31
 8011f9e:	d404      	bmi.n	8011faa <_fflush_r+0x3a>
 8011fa0:	0599      	lsls	r1, r3, #22
 8011fa2:	d402      	bmi.n	8011faa <_fflush_r+0x3a>
 8011fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fa6:	f000 f915 	bl	80121d4 <__retarget_lock_acquire_recursive>
 8011faa:	4628      	mov	r0, r5
 8011fac:	4621      	mov	r1, r4
 8011fae:	f7ff ff59 	bl	8011e64 <__sflush_r>
 8011fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fb4:	07da      	lsls	r2, r3, #31
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	d4e0      	bmi.n	8011f7c <_fflush_r+0xc>
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	059b      	lsls	r3, r3, #22
 8011fbe:	d4dd      	bmi.n	8011f7c <_fflush_r+0xc>
 8011fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fc2:	f000 f908 	bl	80121d6 <__retarget_lock_release_recursive>
 8011fc6:	e7d9      	b.n	8011f7c <_fflush_r+0xc>
 8011fc8:	4b05      	ldr	r3, [pc, #20]	; (8011fe0 <_fflush_r+0x70>)
 8011fca:	429c      	cmp	r4, r3
 8011fcc:	d101      	bne.n	8011fd2 <_fflush_r+0x62>
 8011fce:	68ac      	ldr	r4, [r5, #8]
 8011fd0:	e7df      	b.n	8011f92 <_fflush_r+0x22>
 8011fd2:	4b04      	ldr	r3, [pc, #16]	; (8011fe4 <_fflush_r+0x74>)
 8011fd4:	429c      	cmp	r4, r3
 8011fd6:	bf08      	it	eq
 8011fd8:	68ec      	ldreq	r4, [r5, #12]
 8011fda:	e7da      	b.n	8011f92 <_fflush_r+0x22>
 8011fdc:	08014804 	.word	0x08014804
 8011fe0:	08014824 	.word	0x08014824
 8011fe4:	080147e4 	.word	0x080147e4

08011fe8 <std>:
 8011fe8:	2300      	movs	r3, #0
 8011fea:	b510      	push	{r4, lr}
 8011fec:	4604      	mov	r4, r0
 8011fee:	e9c0 3300 	strd	r3, r3, [r0]
 8011ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ff6:	6083      	str	r3, [r0, #8]
 8011ff8:	8181      	strh	r1, [r0, #12]
 8011ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8011ffc:	81c2      	strh	r2, [r0, #14]
 8011ffe:	6183      	str	r3, [r0, #24]
 8012000:	4619      	mov	r1, r3
 8012002:	2208      	movs	r2, #8
 8012004:	305c      	adds	r0, #92	; 0x5c
 8012006:	f7fd fb8f 	bl	800f728 <memset>
 801200a:	4b05      	ldr	r3, [pc, #20]	; (8012020 <std+0x38>)
 801200c:	6263      	str	r3, [r4, #36]	; 0x24
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <std+0x3c>)
 8012010:	62a3      	str	r3, [r4, #40]	; 0x28
 8012012:	4b05      	ldr	r3, [pc, #20]	; (8012028 <std+0x40>)
 8012014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012016:	4b05      	ldr	r3, [pc, #20]	; (801202c <std+0x44>)
 8012018:	6224      	str	r4, [r4, #32]
 801201a:	6323      	str	r3, [r4, #48]	; 0x30
 801201c:	bd10      	pop	{r4, pc}
 801201e:	bf00      	nop
 8012020:	08012339 	.word	0x08012339
 8012024:	0801235b 	.word	0x0801235b
 8012028:	08012393 	.word	0x08012393
 801202c:	080123b7 	.word	0x080123b7

08012030 <_cleanup_r>:
 8012030:	4901      	ldr	r1, [pc, #4]	; (8012038 <_cleanup_r+0x8>)
 8012032:	f000 b8af 	b.w	8012194 <_fwalk_reent>
 8012036:	bf00      	nop
 8012038:	08011f71 	.word	0x08011f71

0801203c <__sfmoreglue>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	1e4a      	subs	r2, r1, #1
 8012040:	2568      	movs	r5, #104	; 0x68
 8012042:	4355      	muls	r5, r2
 8012044:	460e      	mov	r6, r1
 8012046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801204a:	f7ff fa87 	bl	801155c <_malloc_r>
 801204e:	4604      	mov	r4, r0
 8012050:	b140      	cbz	r0, 8012064 <__sfmoreglue+0x28>
 8012052:	2100      	movs	r1, #0
 8012054:	e9c0 1600 	strd	r1, r6, [r0]
 8012058:	300c      	adds	r0, #12
 801205a:	60a0      	str	r0, [r4, #8]
 801205c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012060:	f7fd fb62 	bl	800f728 <memset>
 8012064:	4620      	mov	r0, r4
 8012066:	bd70      	pop	{r4, r5, r6, pc}

08012068 <__sfp_lock_acquire>:
 8012068:	4801      	ldr	r0, [pc, #4]	; (8012070 <__sfp_lock_acquire+0x8>)
 801206a:	f000 b8b3 	b.w	80121d4 <__retarget_lock_acquire_recursive>
 801206e:	bf00      	nop
 8012070:	200028a4 	.word	0x200028a4

08012074 <__sfp_lock_release>:
 8012074:	4801      	ldr	r0, [pc, #4]	; (801207c <__sfp_lock_release+0x8>)
 8012076:	f000 b8ae 	b.w	80121d6 <__retarget_lock_release_recursive>
 801207a:	bf00      	nop
 801207c:	200028a4 	.word	0x200028a4

08012080 <__sinit_lock_acquire>:
 8012080:	4801      	ldr	r0, [pc, #4]	; (8012088 <__sinit_lock_acquire+0x8>)
 8012082:	f000 b8a7 	b.w	80121d4 <__retarget_lock_acquire_recursive>
 8012086:	bf00      	nop
 8012088:	2000289f 	.word	0x2000289f

0801208c <__sinit_lock_release>:
 801208c:	4801      	ldr	r0, [pc, #4]	; (8012094 <__sinit_lock_release+0x8>)
 801208e:	f000 b8a2 	b.w	80121d6 <__retarget_lock_release_recursive>
 8012092:	bf00      	nop
 8012094:	2000289f 	.word	0x2000289f

08012098 <__sinit>:
 8012098:	b510      	push	{r4, lr}
 801209a:	4604      	mov	r4, r0
 801209c:	f7ff fff0 	bl	8012080 <__sinit_lock_acquire>
 80120a0:	69a3      	ldr	r3, [r4, #24]
 80120a2:	b11b      	cbz	r3, 80120ac <__sinit+0x14>
 80120a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a8:	f7ff bff0 	b.w	801208c <__sinit_lock_release>
 80120ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120b0:	6523      	str	r3, [r4, #80]	; 0x50
 80120b2:	4b13      	ldr	r3, [pc, #76]	; (8012100 <__sinit+0x68>)
 80120b4:	4a13      	ldr	r2, [pc, #76]	; (8012104 <__sinit+0x6c>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80120ba:	42a3      	cmp	r3, r4
 80120bc:	bf04      	itt	eq
 80120be:	2301      	moveq	r3, #1
 80120c0:	61a3      	streq	r3, [r4, #24]
 80120c2:	4620      	mov	r0, r4
 80120c4:	f000 f820 	bl	8012108 <__sfp>
 80120c8:	6060      	str	r0, [r4, #4]
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 f81c 	bl	8012108 <__sfp>
 80120d0:	60a0      	str	r0, [r4, #8]
 80120d2:	4620      	mov	r0, r4
 80120d4:	f000 f818 	bl	8012108 <__sfp>
 80120d8:	2200      	movs	r2, #0
 80120da:	60e0      	str	r0, [r4, #12]
 80120dc:	2104      	movs	r1, #4
 80120de:	6860      	ldr	r0, [r4, #4]
 80120e0:	f7ff ff82 	bl	8011fe8 <std>
 80120e4:	68a0      	ldr	r0, [r4, #8]
 80120e6:	2201      	movs	r2, #1
 80120e8:	2109      	movs	r1, #9
 80120ea:	f7ff ff7d 	bl	8011fe8 <std>
 80120ee:	68e0      	ldr	r0, [r4, #12]
 80120f0:	2202      	movs	r2, #2
 80120f2:	2112      	movs	r1, #18
 80120f4:	f7ff ff78 	bl	8011fe8 <std>
 80120f8:	2301      	movs	r3, #1
 80120fa:	61a3      	str	r3, [r4, #24]
 80120fc:	e7d2      	b.n	80120a4 <__sinit+0xc>
 80120fe:	bf00      	nop
 8012100:	08014460 	.word	0x08014460
 8012104:	08012031 	.word	0x08012031

08012108 <__sfp>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	4607      	mov	r7, r0
 801210c:	f7ff ffac 	bl	8012068 <__sfp_lock_acquire>
 8012110:	4b1e      	ldr	r3, [pc, #120]	; (801218c <__sfp+0x84>)
 8012112:	681e      	ldr	r6, [r3, #0]
 8012114:	69b3      	ldr	r3, [r6, #24]
 8012116:	b913      	cbnz	r3, 801211e <__sfp+0x16>
 8012118:	4630      	mov	r0, r6
 801211a:	f7ff ffbd 	bl	8012098 <__sinit>
 801211e:	3648      	adds	r6, #72	; 0x48
 8012120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012124:	3b01      	subs	r3, #1
 8012126:	d503      	bpl.n	8012130 <__sfp+0x28>
 8012128:	6833      	ldr	r3, [r6, #0]
 801212a:	b30b      	cbz	r3, 8012170 <__sfp+0x68>
 801212c:	6836      	ldr	r6, [r6, #0]
 801212e:	e7f7      	b.n	8012120 <__sfp+0x18>
 8012130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012134:	b9d5      	cbnz	r5, 801216c <__sfp+0x64>
 8012136:	4b16      	ldr	r3, [pc, #88]	; (8012190 <__sfp+0x88>)
 8012138:	60e3      	str	r3, [r4, #12]
 801213a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801213e:	6665      	str	r5, [r4, #100]	; 0x64
 8012140:	f000 f847 	bl	80121d2 <__retarget_lock_init_recursive>
 8012144:	f7ff ff96 	bl	8012074 <__sfp_lock_release>
 8012148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801214c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012150:	6025      	str	r5, [r4, #0]
 8012152:	61a5      	str	r5, [r4, #24]
 8012154:	2208      	movs	r2, #8
 8012156:	4629      	mov	r1, r5
 8012158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801215c:	f7fd fae4 	bl	800f728 <memset>
 8012160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012168:	4620      	mov	r0, r4
 801216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801216c:	3468      	adds	r4, #104	; 0x68
 801216e:	e7d9      	b.n	8012124 <__sfp+0x1c>
 8012170:	2104      	movs	r1, #4
 8012172:	4638      	mov	r0, r7
 8012174:	f7ff ff62 	bl	801203c <__sfmoreglue>
 8012178:	4604      	mov	r4, r0
 801217a:	6030      	str	r0, [r6, #0]
 801217c:	2800      	cmp	r0, #0
 801217e:	d1d5      	bne.n	801212c <__sfp+0x24>
 8012180:	f7ff ff78 	bl	8012074 <__sfp_lock_release>
 8012184:	230c      	movs	r3, #12
 8012186:	603b      	str	r3, [r7, #0]
 8012188:	e7ee      	b.n	8012168 <__sfp+0x60>
 801218a:	bf00      	nop
 801218c:	08014460 	.word	0x08014460
 8012190:	ffff0001 	.word	0xffff0001

08012194 <_fwalk_reent>:
 8012194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012198:	4606      	mov	r6, r0
 801219a:	4688      	mov	r8, r1
 801219c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121a0:	2700      	movs	r7, #0
 80121a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121a6:	f1b9 0901 	subs.w	r9, r9, #1
 80121aa:	d505      	bpl.n	80121b8 <_fwalk_reent+0x24>
 80121ac:	6824      	ldr	r4, [r4, #0]
 80121ae:	2c00      	cmp	r4, #0
 80121b0:	d1f7      	bne.n	80121a2 <_fwalk_reent+0xe>
 80121b2:	4638      	mov	r0, r7
 80121b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b8:	89ab      	ldrh	r3, [r5, #12]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d907      	bls.n	80121ce <_fwalk_reent+0x3a>
 80121be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121c2:	3301      	adds	r3, #1
 80121c4:	d003      	beq.n	80121ce <_fwalk_reent+0x3a>
 80121c6:	4629      	mov	r1, r5
 80121c8:	4630      	mov	r0, r6
 80121ca:	47c0      	blx	r8
 80121cc:	4307      	orrs	r7, r0
 80121ce:	3568      	adds	r5, #104	; 0x68
 80121d0:	e7e9      	b.n	80121a6 <_fwalk_reent+0x12>

080121d2 <__retarget_lock_init_recursive>:
 80121d2:	4770      	bx	lr

080121d4 <__retarget_lock_acquire_recursive>:
 80121d4:	4770      	bx	lr

080121d6 <__retarget_lock_release_recursive>:
 80121d6:	4770      	bx	lr

080121d8 <__swhatbuf_r>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	460e      	mov	r6, r1
 80121dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e0:	2900      	cmp	r1, #0
 80121e2:	b096      	sub	sp, #88	; 0x58
 80121e4:	4614      	mov	r4, r2
 80121e6:	461d      	mov	r5, r3
 80121e8:	da07      	bge.n	80121fa <__swhatbuf_r+0x22>
 80121ea:	2300      	movs	r3, #0
 80121ec:	602b      	str	r3, [r5, #0]
 80121ee:	89b3      	ldrh	r3, [r6, #12]
 80121f0:	061a      	lsls	r2, r3, #24
 80121f2:	d410      	bmi.n	8012216 <__swhatbuf_r+0x3e>
 80121f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121f8:	e00e      	b.n	8012218 <__swhatbuf_r+0x40>
 80121fa:	466a      	mov	r2, sp
 80121fc:	f000 f902 	bl	8012404 <_fstat_r>
 8012200:	2800      	cmp	r0, #0
 8012202:	dbf2      	blt.n	80121ea <__swhatbuf_r+0x12>
 8012204:	9a01      	ldr	r2, [sp, #4]
 8012206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801220a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801220e:	425a      	negs	r2, r3
 8012210:	415a      	adcs	r2, r3
 8012212:	602a      	str	r2, [r5, #0]
 8012214:	e7ee      	b.n	80121f4 <__swhatbuf_r+0x1c>
 8012216:	2340      	movs	r3, #64	; 0x40
 8012218:	2000      	movs	r0, #0
 801221a:	6023      	str	r3, [r4, #0]
 801221c:	b016      	add	sp, #88	; 0x58
 801221e:	bd70      	pop	{r4, r5, r6, pc}

08012220 <__smakebuf_r>:
 8012220:	898b      	ldrh	r3, [r1, #12]
 8012222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012224:	079d      	lsls	r5, r3, #30
 8012226:	4606      	mov	r6, r0
 8012228:	460c      	mov	r4, r1
 801222a:	d507      	bpl.n	801223c <__smakebuf_r+0x1c>
 801222c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	6123      	str	r3, [r4, #16]
 8012234:	2301      	movs	r3, #1
 8012236:	6163      	str	r3, [r4, #20]
 8012238:	b002      	add	sp, #8
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	ab01      	add	r3, sp, #4
 801223e:	466a      	mov	r2, sp
 8012240:	f7ff ffca 	bl	80121d8 <__swhatbuf_r>
 8012244:	9900      	ldr	r1, [sp, #0]
 8012246:	4605      	mov	r5, r0
 8012248:	4630      	mov	r0, r6
 801224a:	f7ff f987 	bl	801155c <_malloc_r>
 801224e:	b948      	cbnz	r0, 8012264 <__smakebuf_r+0x44>
 8012250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012254:	059a      	lsls	r2, r3, #22
 8012256:	d4ef      	bmi.n	8012238 <__smakebuf_r+0x18>
 8012258:	f023 0303 	bic.w	r3, r3, #3
 801225c:	f043 0302 	orr.w	r3, r3, #2
 8012260:	81a3      	strh	r3, [r4, #12]
 8012262:	e7e3      	b.n	801222c <__smakebuf_r+0xc>
 8012264:	4b0d      	ldr	r3, [pc, #52]	; (801229c <__smakebuf_r+0x7c>)
 8012266:	62b3      	str	r3, [r6, #40]	; 0x28
 8012268:	89a3      	ldrh	r3, [r4, #12]
 801226a:	6020      	str	r0, [r4, #0]
 801226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012270:	81a3      	strh	r3, [r4, #12]
 8012272:	9b00      	ldr	r3, [sp, #0]
 8012274:	6163      	str	r3, [r4, #20]
 8012276:	9b01      	ldr	r3, [sp, #4]
 8012278:	6120      	str	r0, [r4, #16]
 801227a:	b15b      	cbz	r3, 8012294 <__smakebuf_r+0x74>
 801227c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012280:	4630      	mov	r0, r6
 8012282:	f000 f8d1 	bl	8012428 <_isatty_r>
 8012286:	b128      	cbz	r0, 8012294 <__smakebuf_r+0x74>
 8012288:	89a3      	ldrh	r3, [r4, #12]
 801228a:	f023 0303 	bic.w	r3, r3, #3
 801228e:	f043 0301 	orr.w	r3, r3, #1
 8012292:	81a3      	strh	r3, [r4, #12]
 8012294:	89a0      	ldrh	r0, [r4, #12]
 8012296:	4305      	orrs	r5, r0
 8012298:	81a5      	strh	r5, [r4, #12]
 801229a:	e7cd      	b.n	8012238 <__smakebuf_r+0x18>
 801229c:	08012031 	.word	0x08012031

080122a0 <_malloc_usable_size_r>:
 80122a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122a4:	1f18      	subs	r0, r3, #4
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	bfbc      	itt	lt
 80122aa:	580b      	ldrlt	r3, [r1, r0]
 80122ac:	18c0      	addlt	r0, r0, r3
 80122ae:	4770      	bx	lr

080122b0 <_raise_r>:
 80122b0:	291f      	cmp	r1, #31
 80122b2:	b538      	push	{r3, r4, r5, lr}
 80122b4:	4604      	mov	r4, r0
 80122b6:	460d      	mov	r5, r1
 80122b8:	d904      	bls.n	80122c4 <_raise_r+0x14>
 80122ba:	2316      	movs	r3, #22
 80122bc:	6003      	str	r3, [r0, #0]
 80122be:	f04f 30ff 	mov.w	r0, #4294967295
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80122c6:	b112      	cbz	r2, 80122ce <_raise_r+0x1e>
 80122c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122cc:	b94b      	cbnz	r3, 80122e2 <_raise_r+0x32>
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 f830 	bl	8012334 <_getpid_r>
 80122d4:	462a      	mov	r2, r5
 80122d6:	4601      	mov	r1, r0
 80122d8:	4620      	mov	r0, r4
 80122da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122de:	f000 b817 	b.w	8012310 <_kill_r>
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d00a      	beq.n	80122fc <_raise_r+0x4c>
 80122e6:	1c59      	adds	r1, r3, #1
 80122e8:	d103      	bne.n	80122f2 <_raise_r+0x42>
 80122ea:	2316      	movs	r3, #22
 80122ec:	6003      	str	r3, [r0, #0]
 80122ee:	2001      	movs	r0, #1
 80122f0:	e7e7      	b.n	80122c2 <_raise_r+0x12>
 80122f2:	2400      	movs	r4, #0
 80122f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80122f8:	4628      	mov	r0, r5
 80122fa:	4798      	blx	r3
 80122fc:	2000      	movs	r0, #0
 80122fe:	e7e0      	b.n	80122c2 <_raise_r+0x12>

08012300 <raise>:
 8012300:	4b02      	ldr	r3, [pc, #8]	; (801230c <raise+0xc>)
 8012302:	4601      	mov	r1, r0
 8012304:	6818      	ldr	r0, [r3, #0]
 8012306:	f7ff bfd3 	b.w	80122b0 <_raise_r>
 801230a:	bf00      	nop
 801230c:	20000018 	.word	0x20000018

08012310 <_kill_r>:
 8012310:	b538      	push	{r3, r4, r5, lr}
 8012312:	4d07      	ldr	r5, [pc, #28]	; (8012330 <_kill_r+0x20>)
 8012314:	2300      	movs	r3, #0
 8012316:	4604      	mov	r4, r0
 8012318:	4608      	mov	r0, r1
 801231a:	4611      	mov	r1, r2
 801231c:	602b      	str	r3, [r5, #0]
 801231e:	f7f3 fb77 	bl	8005a10 <_kill>
 8012322:	1c43      	adds	r3, r0, #1
 8012324:	d102      	bne.n	801232c <_kill_r+0x1c>
 8012326:	682b      	ldr	r3, [r5, #0]
 8012328:	b103      	cbz	r3, 801232c <_kill_r+0x1c>
 801232a:	6023      	str	r3, [r4, #0]
 801232c:	bd38      	pop	{r3, r4, r5, pc}
 801232e:	bf00      	nop
 8012330:	20002898 	.word	0x20002898

08012334 <_getpid_r>:
 8012334:	f7f3 bb64 	b.w	8005a00 <_getpid>

08012338 <__sread>:
 8012338:	b510      	push	{r4, lr}
 801233a:	460c      	mov	r4, r1
 801233c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012340:	f000 f894 	bl	801246c <_read_r>
 8012344:	2800      	cmp	r0, #0
 8012346:	bfab      	itete	ge
 8012348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801234a:	89a3      	ldrhlt	r3, [r4, #12]
 801234c:	181b      	addge	r3, r3, r0
 801234e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012352:	bfac      	ite	ge
 8012354:	6563      	strge	r3, [r4, #84]	; 0x54
 8012356:	81a3      	strhlt	r3, [r4, #12]
 8012358:	bd10      	pop	{r4, pc}

0801235a <__swrite>:
 801235a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801235e:	461f      	mov	r7, r3
 8012360:	898b      	ldrh	r3, [r1, #12]
 8012362:	05db      	lsls	r3, r3, #23
 8012364:	4605      	mov	r5, r0
 8012366:	460c      	mov	r4, r1
 8012368:	4616      	mov	r6, r2
 801236a:	d505      	bpl.n	8012378 <__swrite+0x1e>
 801236c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012370:	2302      	movs	r3, #2
 8012372:	2200      	movs	r2, #0
 8012374:	f000 f868 	bl	8012448 <_lseek_r>
 8012378:	89a3      	ldrh	r3, [r4, #12]
 801237a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801237e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012382:	81a3      	strh	r3, [r4, #12]
 8012384:	4632      	mov	r2, r6
 8012386:	463b      	mov	r3, r7
 8012388:	4628      	mov	r0, r5
 801238a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801238e:	f000 b817 	b.w	80123c0 <_write_r>

08012392 <__sseek>:
 8012392:	b510      	push	{r4, lr}
 8012394:	460c      	mov	r4, r1
 8012396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801239a:	f000 f855 	bl	8012448 <_lseek_r>
 801239e:	1c43      	adds	r3, r0, #1
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	bf15      	itete	ne
 80123a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80123a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123ae:	81a3      	strheq	r3, [r4, #12]
 80123b0:	bf18      	it	ne
 80123b2:	81a3      	strhne	r3, [r4, #12]
 80123b4:	bd10      	pop	{r4, pc}

080123b6 <__sclose>:
 80123b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ba:	f000 b813 	b.w	80123e4 <_close_r>
	...

080123c0 <_write_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4d07      	ldr	r5, [pc, #28]	; (80123e0 <_write_r+0x20>)
 80123c4:	4604      	mov	r4, r0
 80123c6:	4608      	mov	r0, r1
 80123c8:	4611      	mov	r1, r2
 80123ca:	2200      	movs	r2, #0
 80123cc:	602a      	str	r2, [r5, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	f7f3 fb55 	bl	8005a7e <_write>
 80123d4:	1c43      	adds	r3, r0, #1
 80123d6:	d102      	bne.n	80123de <_write_r+0x1e>
 80123d8:	682b      	ldr	r3, [r5, #0]
 80123da:	b103      	cbz	r3, 80123de <_write_r+0x1e>
 80123dc:	6023      	str	r3, [r4, #0]
 80123de:	bd38      	pop	{r3, r4, r5, pc}
 80123e0:	20002898 	.word	0x20002898

080123e4 <_close_r>:
 80123e4:	b538      	push	{r3, r4, r5, lr}
 80123e6:	4d06      	ldr	r5, [pc, #24]	; (8012400 <_close_r+0x1c>)
 80123e8:	2300      	movs	r3, #0
 80123ea:	4604      	mov	r4, r0
 80123ec:	4608      	mov	r0, r1
 80123ee:	602b      	str	r3, [r5, #0]
 80123f0:	f7f3 fb61 	bl	8005ab6 <_close>
 80123f4:	1c43      	adds	r3, r0, #1
 80123f6:	d102      	bne.n	80123fe <_close_r+0x1a>
 80123f8:	682b      	ldr	r3, [r5, #0]
 80123fa:	b103      	cbz	r3, 80123fe <_close_r+0x1a>
 80123fc:	6023      	str	r3, [r4, #0]
 80123fe:	bd38      	pop	{r3, r4, r5, pc}
 8012400:	20002898 	.word	0x20002898

08012404 <_fstat_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	; (8012424 <_fstat_r+0x20>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	4611      	mov	r1, r2
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	f7f3 fb5c 	bl	8005ace <_fstat>
 8012416:	1c43      	adds	r3, r0, #1
 8012418:	d102      	bne.n	8012420 <_fstat_r+0x1c>
 801241a:	682b      	ldr	r3, [r5, #0]
 801241c:	b103      	cbz	r3, 8012420 <_fstat_r+0x1c>
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	bf00      	nop
 8012424:	20002898 	.word	0x20002898

08012428 <_isatty_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4d06      	ldr	r5, [pc, #24]	; (8012444 <_isatty_r+0x1c>)
 801242c:	2300      	movs	r3, #0
 801242e:	4604      	mov	r4, r0
 8012430:	4608      	mov	r0, r1
 8012432:	602b      	str	r3, [r5, #0]
 8012434:	f7f3 fb5b 	bl	8005aee <_isatty>
 8012438:	1c43      	adds	r3, r0, #1
 801243a:	d102      	bne.n	8012442 <_isatty_r+0x1a>
 801243c:	682b      	ldr	r3, [r5, #0]
 801243e:	b103      	cbz	r3, 8012442 <_isatty_r+0x1a>
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	20002898 	.word	0x20002898

08012448 <_lseek_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4d07      	ldr	r5, [pc, #28]	; (8012468 <_lseek_r+0x20>)
 801244c:	4604      	mov	r4, r0
 801244e:	4608      	mov	r0, r1
 8012450:	4611      	mov	r1, r2
 8012452:	2200      	movs	r2, #0
 8012454:	602a      	str	r2, [r5, #0]
 8012456:	461a      	mov	r2, r3
 8012458:	f7f3 fb54 	bl	8005b04 <_lseek>
 801245c:	1c43      	adds	r3, r0, #1
 801245e:	d102      	bne.n	8012466 <_lseek_r+0x1e>
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	b103      	cbz	r3, 8012466 <_lseek_r+0x1e>
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	bd38      	pop	{r3, r4, r5, pc}
 8012468:	20002898 	.word	0x20002898

0801246c <_read_r>:
 801246c:	b538      	push	{r3, r4, r5, lr}
 801246e:	4d07      	ldr	r5, [pc, #28]	; (801248c <_read_r+0x20>)
 8012470:	4604      	mov	r4, r0
 8012472:	4608      	mov	r0, r1
 8012474:	4611      	mov	r1, r2
 8012476:	2200      	movs	r2, #0
 8012478:	602a      	str	r2, [r5, #0]
 801247a:	461a      	mov	r2, r3
 801247c:	f7f3 fae2 	bl	8005a44 <_read>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d102      	bne.n	801248a <_read_r+0x1e>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	b103      	cbz	r3, 801248a <_read_r+0x1e>
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	20002898 	.word	0x20002898

08012490 <cos>:
 8012490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012492:	ec53 2b10 	vmov	r2, r3, d0
 8012496:	4824      	ldr	r0, [pc, #144]	; (8012528 <cos+0x98>)
 8012498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801249c:	4281      	cmp	r1, r0
 801249e:	dc06      	bgt.n	80124ae <cos+0x1e>
 80124a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8012520 <cos+0x90>
 80124a4:	f000 faa4 	bl	80129f0 <__kernel_cos>
 80124a8:	ec51 0b10 	vmov	r0, r1, d0
 80124ac:	e007      	b.n	80124be <cos+0x2e>
 80124ae:	481f      	ldr	r0, [pc, #124]	; (801252c <cos+0x9c>)
 80124b0:	4281      	cmp	r1, r0
 80124b2:	dd09      	ble.n	80124c8 <cos+0x38>
 80124b4:	ee10 0a10 	vmov	r0, s0
 80124b8:	4619      	mov	r1, r3
 80124ba:	f7ed fef5 	bl	80002a8 <__aeabi_dsub>
 80124be:	ec41 0b10 	vmov	d0, r0, r1
 80124c2:	b005      	add	sp, #20
 80124c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80124c8:	4668      	mov	r0, sp
 80124ca:	f000 f885 	bl	80125d8 <__ieee754_rem_pio2>
 80124ce:	f000 0003 	and.w	r0, r0, #3
 80124d2:	2801      	cmp	r0, #1
 80124d4:	d007      	beq.n	80124e6 <cos+0x56>
 80124d6:	2802      	cmp	r0, #2
 80124d8:	d012      	beq.n	8012500 <cos+0x70>
 80124da:	b9c0      	cbnz	r0, 801250e <cos+0x7e>
 80124dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124e0:	ed9d 0b00 	vldr	d0, [sp]
 80124e4:	e7de      	b.n	80124a4 <cos+0x14>
 80124e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124ea:	ed9d 0b00 	vldr	d0, [sp]
 80124ee:	f000 fe87 	bl	8013200 <__kernel_sin>
 80124f2:	ec53 2b10 	vmov	r2, r3, d0
 80124f6:	ee10 0a10 	vmov	r0, s0
 80124fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124fe:	e7de      	b.n	80124be <cos+0x2e>
 8012500:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012504:	ed9d 0b00 	vldr	d0, [sp]
 8012508:	f000 fa72 	bl	80129f0 <__kernel_cos>
 801250c:	e7f1      	b.n	80124f2 <cos+0x62>
 801250e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012512:	ed9d 0b00 	vldr	d0, [sp]
 8012516:	2001      	movs	r0, #1
 8012518:	f000 fe72 	bl	8013200 <__kernel_sin>
 801251c:	e7c4      	b.n	80124a8 <cos+0x18>
 801251e:	bf00      	nop
	...
 8012528:	3fe921fb 	.word	0x3fe921fb
 801252c:	7fefffff 	.word	0x7fefffff

08012530 <sin>:
 8012530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012532:	ec53 2b10 	vmov	r2, r3, d0
 8012536:	4826      	ldr	r0, [pc, #152]	; (80125d0 <sin+0xa0>)
 8012538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801253c:	4281      	cmp	r1, r0
 801253e:	dc07      	bgt.n	8012550 <sin+0x20>
 8012540:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80125c8 <sin+0x98>
 8012544:	2000      	movs	r0, #0
 8012546:	f000 fe5b 	bl	8013200 <__kernel_sin>
 801254a:	ec51 0b10 	vmov	r0, r1, d0
 801254e:	e007      	b.n	8012560 <sin+0x30>
 8012550:	4820      	ldr	r0, [pc, #128]	; (80125d4 <sin+0xa4>)
 8012552:	4281      	cmp	r1, r0
 8012554:	dd09      	ble.n	801256a <sin+0x3a>
 8012556:	ee10 0a10 	vmov	r0, s0
 801255a:	4619      	mov	r1, r3
 801255c:	f7ed fea4 	bl	80002a8 <__aeabi_dsub>
 8012560:	ec41 0b10 	vmov	d0, r0, r1
 8012564:	b005      	add	sp, #20
 8012566:	f85d fb04 	ldr.w	pc, [sp], #4
 801256a:	4668      	mov	r0, sp
 801256c:	f000 f834 	bl	80125d8 <__ieee754_rem_pio2>
 8012570:	f000 0003 	and.w	r0, r0, #3
 8012574:	2801      	cmp	r0, #1
 8012576:	d008      	beq.n	801258a <sin+0x5a>
 8012578:	2802      	cmp	r0, #2
 801257a:	d00d      	beq.n	8012598 <sin+0x68>
 801257c:	b9d0      	cbnz	r0, 80125b4 <sin+0x84>
 801257e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012582:	ed9d 0b00 	vldr	d0, [sp]
 8012586:	2001      	movs	r0, #1
 8012588:	e7dd      	b.n	8012546 <sin+0x16>
 801258a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801258e:	ed9d 0b00 	vldr	d0, [sp]
 8012592:	f000 fa2d 	bl	80129f0 <__kernel_cos>
 8012596:	e7d8      	b.n	801254a <sin+0x1a>
 8012598:	ed9d 1b02 	vldr	d1, [sp, #8]
 801259c:	ed9d 0b00 	vldr	d0, [sp]
 80125a0:	2001      	movs	r0, #1
 80125a2:	f000 fe2d 	bl	8013200 <__kernel_sin>
 80125a6:	ec53 2b10 	vmov	r2, r3, d0
 80125aa:	ee10 0a10 	vmov	r0, s0
 80125ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80125b2:	e7d5      	b.n	8012560 <sin+0x30>
 80125b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125b8:	ed9d 0b00 	vldr	d0, [sp]
 80125bc:	f000 fa18 	bl	80129f0 <__kernel_cos>
 80125c0:	e7f1      	b.n	80125a6 <sin+0x76>
 80125c2:	bf00      	nop
 80125c4:	f3af 8000 	nop.w
	...
 80125d0:	3fe921fb 	.word	0x3fe921fb
 80125d4:	7fefffff 	.word	0x7fefffff

080125d8 <__ieee754_rem_pio2>:
 80125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125dc:	ed2d 8b02 	vpush	{d8}
 80125e0:	ec55 4b10 	vmov	r4, r5, d0
 80125e4:	4bca      	ldr	r3, [pc, #808]	; (8012910 <__ieee754_rem_pio2+0x338>)
 80125e6:	b08b      	sub	sp, #44	; 0x2c
 80125e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80125ec:	4598      	cmp	r8, r3
 80125ee:	4682      	mov	sl, r0
 80125f0:	9502      	str	r5, [sp, #8]
 80125f2:	dc08      	bgt.n	8012606 <__ieee754_rem_pio2+0x2e>
 80125f4:	2200      	movs	r2, #0
 80125f6:	2300      	movs	r3, #0
 80125f8:	ed80 0b00 	vstr	d0, [r0]
 80125fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012600:	f04f 0b00 	mov.w	fp, #0
 8012604:	e028      	b.n	8012658 <__ieee754_rem_pio2+0x80>
 8012606:	4bc3      	ldr	r3, [pc, #780]	; (8012914 <__ieee754_rem_pio2+0x33c>)
 8012608:	4598      	cmp	r8, r3
 801260a:	dc78      	bgt.n	80126fe <__ieee754_rem_pio2+0x126>
 801260c:	9b02      	ldr	r3, [sp, #8]
 801260e:	4ec2      	ldr	r6, [pc, #776]	; (8012918 <__ieee754_rem_pio2+0x340>)
 8012610:	2b00      	cmp	r3, #0
 8012612:	ee10 0a10 	vmov	r0, s0
 8012616:	a3b0      	add	r3, pc, #704	; (adr r3, 80128d8 <__ieee754_rem_pio2+0x300>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	4629      	mov	r1, r5
 801261e:	dd39      	ble.n	8012694 <__ieee754_rem_pio2+0xbc>
 8012620:	f7ed fe42 	bl	80002a8 <__aeabi_dsub>
 8012624:	45b0      	cmp	r8, r6
 8012626:	4604      	mov	r4, r0
 8012628:	460d      	mov	r5, r1
 801262a:	d01b      	beq.n	8012664 <__ieee754_rem_pio2+0x8c>
 801262c:	a3ac      	add	r3, pc, #688	; (adr r3, 80128e0 <__ieee754_rem_pio2+0x308>)
 801262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012632:	f7ed fe39 	bl	80002a8 <__aeabi_dsub>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	e9ca 2300 	strd	r2, r3, [sl]
 801263e:	4620      	mov	r0, r4
 8012640:	4629      	mov	r1, r5
 8012642:	f7ed fe31 	bl	80002a8 <__aeabi_dsub>
 8012646:	a3a6      	add	r3, pc, #664	; (adr r3, 80128e0 <__ieee754_rem_pio2+0x308>)
 8012648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264c:	f7ed fe2c 	bl	80002a8 <__aeabi_dsub>
 8012650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012654:	f04f 0b01 	mov.w	fp, #1
 8012658:	4658      	mov	r0, fp
 801265a:	b00b      	add	sp, #44	; 0x2c
 801265c:	ecbd 8b02 	vpop	{d8}
 8012660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012664:	a3a0      	add	r3, pc, #640	; (adr r3, 80128e8 <__ieee754_rem_pio2+0x310>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	f7ed fe1d 	bl	80002a8 <__aeabi_dsub>
 801266e:	a3a0      	add	r3, pc, #640	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x318>)
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	4604      	mov	r4, r0
 8012676:	460d      	mov	r5, r1
 8012678:	f7ed fe16 	bl	80002a8 <__aeabi_dsub>
 801267c:	4602      	mov	r2, r0
 801267e:	460b      	mov	r3, r1
 8012680:	e9ca 2300 	strd	r2, r3, [sl]
 8012684:	4620      	mov	r0, r4
 8012686:	4629      	mov	r1, r5
 8012688:	f7ed fe0e 	bl	80002a8 <__aeabi_dsub>
 801268c:	a398      	add	r3, pc, #608	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x318>)
 801268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012692:	e7db      	b.n	801264c <__ieee754_rem_pio2+0x74>
 8012694:	f7ed fe0a 	bl	80002ac <__adddf3>
 8012698:	45b0      	cmp	r8, r6
 801269a:	4604      	mov	r4, r0
 801269c:	460d      	mov	r5, r1
 801269e:	d016      	beq.n	80126ce <__ieee754_rem_pio2+0xf6>
 80126a0:	a38f      	add	r3, pc, #572	; (adr r3, 80128e0 <__ieee754_rem_pio2+0x308>)
 80126a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a6:	f7ed fe01 	bl	80002ac <__adddf3>
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	e9ca 2300 	strd	r2, r3, [sl]
 80126b2:	4620      	mov	r0, r4
 80126b4:	4629      	mov	r1, r5
 80126b6:	f7ed fdf7 	bl	80002a8 <__aeabi_dsub>
 80126ba:	a389      	add	r3, pc, #548	; (adr r3, 80128e0 <__ieee754_rem_pio2+0x308>)
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	f7ed fdf4 	bl	80002ac <__adddf3>
 80126c4:	f04f 3bff 	mov.w	fp, #4294967295
 80126c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80126cc:	e7c4      	b.n	8012658 <__ieee754_rem_pio2+0x80>
 80126ce:	a386      	add	r3, pc, #536	; (adr r3, 80128e8 <__ieee754_rem_pio2+0x310>)
 80126d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d4:	f7ed fdea 	bl	80002ac <__adddf3>
 80126d8:	a385      	add	r3, pc, #532	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x318>)
 80126da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126de:	4604      	mov	r4, r0
 80126e0:	460d      	mov	r5, r1
 80126e2:	f7ed fde3 	bl	80002ac <__adddf3>
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	e9ca 2300 	strd	r2, r3, [sl]
 80126ee:	4620      	mov	r0, r4
 80126f0:	4629      	mov	r1, r5
 80126f2:	f7ed fdd9 	bl	80002a8 <__aeabi_dsub>
 80126f6:	a37e      	add	r3, pc, #504	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x318>)
 80126f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fc:	e7e0      	b.n	80126c0 <__ieee754_rem_pio2+0xe8>
 80126fe:	4b87      	ldr	r3, [pc, #540]	; (801291c <__ieee754_rem_pio2+0x344>)
 8012700:	4598      	cmp	r8, r3
 8012702:	f300 80d9 	bgt.w	80128b8 <__ieee754_rem_pio2+0x2e0>
 8012706:	f000 fe39 	bl	801337c <fabs>
 801270a:	ec55 4b10 	vmov	r4, r5, d0
 801270e:	ee10 0a10 	vmov	r0, s0
 8012712:	a379      	add	r3, pc, #484	; (adr r3, 80128f8 <__ieee754_rem_pio2+0x320>)
 8012714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012718:	4629      	mov	r1, r5
 801271a:	f7ed ff7d 	bl	8000618 <__aeabi_dmul>
 801271e:	4b80      	ldr	r3, [pc, #512]	; (8012920 <__ieee754_rem_pio2+0x348>)
 8012720:	2200      	movs	r2, #0
 8012722:	f7ed fdc3 	bl	80002ac <__adddf3>
 8012726:	f7ee fa27 	bl	8000b78 <__aeabi_d2iz>
 801272a:	4683      	mov	fp, r0
 801272c:	f7ed ff0a 	bl	8000544 <__aeabi_i2d>
 8012730:	4602      	mov	r2, r0
 8012732:	460b      	mov	r3, r1
 8012734:	ec43 2b18 	vmov	d8, r2, r3
 8012738:	a367      	add	r3, pc, #412	; (adr r3, 80128d8 <__ieee754_rem_pio2+0x300>)
 801273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273e:	f7ed ff6b 	bl	8000618 <__aeabi_dmul>
 8012742:	4602      	mov	r2, r0
 8012744:	460b      	mov	r3, r1
 8012746:	4620      	mov	r0, r4
 8012748:	4629      	mov	r1, r5
 801274a:	f7ed fdad 	bl	80002a8 <__aeabi_dsub>
 801274e:	a364      	add	r3, pc, #400	; (adr r3, 80128e0 <__ieee754_rem_pio2+0x308>)
 8012750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012754:	4606      	mov	r6, r0
 8012756:	460f      	mov	r7, r1
 8012758:	ec51 0b18 	vmov	r0, r1, d8
 801275c:	f7ed ff5c 	bl	8000618 <__aeabi_dmul>
 8012760:	f1bb 0f1f 	cmp.w	fp, #31
 8012764:	4604      	mov	r4, r0
 8012766:	460d      	mov	r5, r1
 8012768:	dc0d      	bgt.n	8012786 <__ieee754_rem_pio2+0x1ae>
 801276a:	4b6e      	ldr	r3, [pc, #440]	; (8012924 <__ieee754_rem_pio2+0x34c>)
 801276c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012774:	4543      	cmp	r3, r8
 8012776:	d006      	beq.n	8012786 <__ieee754_rem_pio2+0x1ae>
 8012778:	4622      	mov	r2, r4
 801277a:	462b      	mov	r3, r5
 801277c:	4630      	mov	r0, r6
 801277e:	4639      	mov	r1, r7
 8012780:	f7ed fd92 	bl	80002a8 <__aeabi_dsub>
 8012784:	e00f      	b.n	80127a6 <__ieee754_rem_pio2+0x1ce>
 8012786:	462b      	mov	r3, r5
 8012788:	4622      	mov	r2, r4
 801278a:	4630      	mov	r0, r6
 801278c:	4639      	mov	r1, r7
 801278e:	f7ed fd8b 	bl	80002a8 <__aeabi_dsub>
 8012792:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012796:	9303      	str	r3, [sp, #12]
 8012798:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801279c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80127a0:	f1b8 0f10 	cmp.w	r8, #16
 80127a4:	dc02      	bgt.n	80127ac <__ieee754_rem_pio2+0x1d4>
 80127a6:	e9ca 0100 	strd	r0, r1, [sl]
 80127aa:	e039      	b.n	8012820 <__ieee754_rem_pio2+0x248>
 80127ac:	a34e      	add	r3, pc, #312	; (adr r3, 80128e8 <__ieee754_rem_pio2+0x310>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	ec51 0b18 	vmov	r0, r1, d8
 80127b6:	f7ed ff2f 	bl	8000618 <__aeabi_dmul>
 80127ba:	4604      	mov	r4, r0
 80127bc:	460d      	mov	r5, r1
 80127be:	4602      	mov	r2, r0
 80127c0:	460b      	mov	r3, r1
 80127c2:	4630      	mov	r0, r6
 80127c4:	4639      	mov	r1, r7
 80127c6:	f7ed fd6f 	bl	80002a8 <__aeabi_dsub>
 80127ca:	4602      	mov	r2, r0
 80127cc:	460b      	mov	r3, r1
 80127ce:	4680      	mov	r8, r0
 80127d0:	4689      	mov	r9, r1
 80127d2:	4630      	mov	r0, r6
 80127d4:	4639      	mov	r1, r7
 80127d6:	f7ed fd67 	bl	80002a8 <__aeabi_dsub>
 80127da:	4622      	mov	r2, r4
 80127dc:	462b      	mov	r3, r5
 80127de:	f7ed fd63 	bl	80002a8 <__aeabi_dsub>
 80127e2:	a343      	add	r3, pc, #268	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x318>)
 80127e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e8:	4604      	mov	r4, r0
 80127ea:	460d      	mov	r5, r1
 80127ec:	ec51 0b18 	vmov	r0, r1, d8
 80127f0:	f7ed ff12 	bl	8000618 <__aeabi_dmul>
 80127f4:	4622      	mov	r2, r4
 80127f6:	462b      	mov	r3, r5
 80127f8:	f7ed fd56 	bl	80002a8 <__aeabi_dsub>
 80127fc:	4602      	mov	r2, r0
 80127fe:	460b      	mov	r3, r1
 8012800:	4604      	mov	r4, r0
 8012802:	460d      	mov	r5, r1
 8012804:	4640      	mov	r0, r8
 8012806:	4649      	mov	r1, r9
 8012808:	f7ed fd4e 	bl	80002a8 <__aeabi_dsub>
 801280c:	9a03      	ldr	r2, [sp, #12]
 801280e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	2b31      	cmp	r3, #49	; 0x31
 8012816:	dc24      	bgt.n	8012862 <__ieee754_rem_pio2+0x28a>
 8012818:	e9ca 0100 	strd	r0, r1, [sl]
 801281c:	4646      	mov	r6, r8
 801281e:	464f      	mov	r7, r9
 8012820:	e9da 8900 	ldrd	r8, r9, [sl]
 8012824:	4630      	mov	r0, r6
 8012826:	4642      	mov	r2, r8
 8012828:	464b      	mov	r3, r9
 801282a:	4639      	mov	r1, r7
 801282c:	f7ed fd3c 	bl	80002a8 <__aeabi_dsub>
 8012830:	462b      	mov	r3, r5
 8012832:	4622      	mov	r2, r4
 8012834:	f7ed fd38 	bl	80002a8 <__aeabi_dsub>
 8012838:	9b02      	ldr	r3, [sp, #8]
 801283a:	2b00      	cmp	r3, #0
 801283c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012840:	f6bf af0a 	bge.w	8012658 <__ieee754_rem_pio2+0x80>
 8012844:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012848:	f8ca 3004 	str.w	r3, [sl, #4]
 801284c:	f8ca 8000 	str.w	r8, [sl]
 8012850:	f8ca 0008 	str.w	r0, [sl, #8]
 8012854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012858:	f8ca 300c 	str.w	r3, [sl, #12]
 801285c:	f1cb 0b00 	rsb	fp, fp, #0
 8012860:	e6fa      	b.n	8012658 <__ieee754_rem_pio2+0x80>
 8012862:	a327      	add	r3, pc, #156	; (adr r3, 8012900 <__ieee754_rem_pio2+0x328>)
 8012864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012868:	ec51 0b18 	vmov	r0, r1, d8
 801286c:	f7ed fed4 	bl	8000618 <__aeabi_dmul>
 8012870:	4604      	mov	r4, r0
 8012872:	460d      	mov	r5, r1
 8012874:	4602      	mov	r2, r0
 8012876:	460b      	mov	r3, r1
 8012878:	4640      	mov	r0, r8
 801287a:	4649      	mov	r1, r9
 801287c:	f7ed fd14 	bl	80002a8 <__aeabi_dsub>
 8012880:	4602      	mov	r2, r0
 8012882:	460b      	mov	r3, r1
 8012884:	4606      	mov	r6, r0
 8012886:	460f      	mov	r7, r1
 8012888:	4640      	mov	r0, r8
 801288a:	4649      	mov	r1, r9
 801288c:	f7ed fd0c 	bl	80002a8 <__aeabi_dsub>
 8012890:	4622      	mov	r2, r4
 8012892:	462b      	mov	r3, r5
 8012894:	f7ed fd08 	bl	80002a8 <__aeabi_dsub>
 8012898:	a31b      	add	r3, pc, #108	; (adr r3, 8012908 <__ieee754_rem_pio2+0x330>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	4604      	mov	r4, r0
 80128a0:	460d      	mov	r5, r1
 80128a2:	ec51 0b18 	vmov	r0, r1, d8
 80128a6:	f7ed feb7 	bl	8000618 <__aeabi_dmul>
 80128aa:	4622      	mov	r2, r4
 80128ac:	462b      	mov	r3, r5
 80128ae:	f7ed fcfb 	bl	80002a8 <__aeabi_dsub>
 80128b2:	4604      	mov	r4, r0
 80128b4:	460d      	mov	r5, r1
 80128b6:	e75f      	b.n	8012778 <__ieee754_rem_pio2+0x1a0>
 80128b8:	4b1b      	ldr	r3, [pc, #108]	; (8012928 <__ieee754_rem_pio2+0x350>)
 80128ba:	4598      	cmp	r8, r3
 80128bc:	dd36      	ble.n	801292c <__ieee754_rem_pio2+0x354>
 80128be:	ee10 2a10 	vmov	r2, s0
 80128c2:	462b      	mov	r3, r5
 80128c4:	4620      	mov	r0, r4
 80128c6:	4629      	mov	r1, r5
 80128c8:	f7ed fcee 	bl	80002a8 <__aeabi_dsub>
 80128cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80128d0:	e9ca 0100 	strd	r0, r1, [sl]
 80128d4:	e694      	b.n	8012600 <__ieee754_rem_pio2+0x28>
 80128d6:	bf00      	nop
 80128d8:	54400000 	.word	0x54400000
 80128dc:	3ff921fb 	.word	0x3ff921fb
 80128e0:	1a626331 	.word	0x1a626331
 80128e4:	3dd0b461 	.word	0x3dd0b461
 80128e8:	1a600000 	.word	0x1a600000
 80128ec:	3dd0b461 	.word	0x3dd0b461
 80128f0:	2e037073 	.word	0x2e037073
 80128f4:	3ba3198a 	.word	0x3ba3198a
 80128f8:	6dc9c883 	.word	0x6dc9c883
 80128fc:	3fe45f30 	.word	0x3fe45f30
 8012900:	2e000000 	.word	0x2e000000
 8012904:	3ba3198a 	.word	0x3ba3198a
 8012908:	252049c1 	.word	0x252049c1
 801290c:	397b839a 	.word	0x397b839a
 8012910:	3fe921fb 	.word	0x3fe921fb
 8012914:	4002d97b 	.word	0x4002d97b
 8012918:	3ff921fb 	.word	0x3ff921fb
 801291c:	413921fb 	.word	0x413921fb
 8012920:	3fe00000 	.word	0x3fe00000
 8012924:	08014844 	.word	0x08014844
 8012928:	7fefffff 	.word	0x7fefffff
 801292c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012930:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012934:	ee10 0a10 	vmov	r0, s0
 8012938:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801293c:	ee10 6a10 	vmov	r6, s0
 8012940:	460f      	mov	r7, r1
 8012942:	f7ee f919 	bl	8000b78 <__aeabi_d2iz>
 8012946:	f7ed fdfd 	bl	8000544 <__aeabi_i2d>
 801294a:	4602      	mov	r2, r0
 801294c:	460b      	mov	r3, r1
 801294e:	4630      	mov	r0, r6
 8012950:	4639      	mov	r1, r7
 8012952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012956:	f7ed fca7 	bl	80002a8 <__aeabi_dsub>
 801295a:	4b22      	ldr	r3, [pc, #136]	; (80129e4 <__ieee754_rem_pio2+0x40c>)
 801295c:	2200      	movs	r2, #0
 801295e:	f7ed fe5b 	bl	8000618 <__aeabi_dmul>
 8012962:	460f      	mov	r7, r1
 8012964:	4606      	mov	r6, r0
 8012966:	f7ee f907 	bl	8000b78 <__aeabi_d2iz>
 801296a:	f7ed fdeb 	bl	8000544 <__aeabi_i2d>
 801296e:	4602      	mov	r2, r0
 8012970:	460b      	mov	r3, r1
 8012972:	4630      	mov	r0, r6
 8012974:	4639      	mov	r1, r7
 8012976:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801297a:	f7ed fc95 	bl	80002a8 <__aeabi_dsub>
 801297e:	4b19      	ldr	r3, [pc, #100]	; (80129e4 <__ieee754_rem_pio2+0x40c>)
 8012980:	2200      	movs	r2, #0
 8012982:	f7ed fe49 	bl	8000618 <__aeabi_dmul>
 8012986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801298a:	ad04      	add	r5, sp, #16
 801298c:	f04f 0803 	mov.w	r8, #3
 8012990:	46a9      	mov	r9, r5
 8012992:	2600      	movs	r6, #0
 8012994:	2700      	movs	r7, #0
 8012996:	4632      	mov	r2, r6
 8012998:	463b      	mov	r3, r7
 801299a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801299e:	46c3      	mov	fp, r8
 80129a0:	3d08      	subs	r5, #8
 80129a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80129a6:	f7ee f89f 	bl	8000ae8 <__aeabi_dcmpeq>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d1f3      	bne.n	8012996 <__ieee754_rem_pio2+0x3be>
 80129ae:	4b0e      	ldr	r3, [pc, #56]	; (80129e8 <__ieee754_rem_pio2+0x410>)
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	2302      	movs	r3, #2
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	4622      	mov	r2, r4
 80129b8:	465b      	mov	r3, fp
 80129ba:	4651      	mov	r1, sl
 80129bc:	4648      	mov	r0, r9
 80129be:	f000 f8df 	bl	8012b80 <__kernel_rem_pio2>
 80129c2:	9b02      	ldr	r3, [sp, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	4683      	mov	fp, r0
 80129c8:	f6bf ae46 	bge.w	8012658 <__ieee754_rem_pio2+0x80>
 80129cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80129d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80129d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80129d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80129dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80129e0:	e73a      	b.n	8012858 <__ieee754_rem_pio2+0x280>
 80129e2:	bf00      	nop
 80129e4:	41700000 	.word	0x41700000
 80129e8:	080148c4 	.word	0x080148c4
 80129ec:	00000000 	.word	0x00000000

080129f0 <__kernel_cos>:
 80129f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	ec57 6b10 	vmov	r6, r7, d0
 80129f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80129fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012a00:	ed8d 1b00 	vstr	d1, [sp]
 8012a04:	da07      	bge.n	8012a16 <__kernel_cos+0x26>
 8012a06:	ee10 0a10 	vmov	r0, s0
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	f7ee f8b4 	bl	8000b78 <__aeabi_d2iz>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f000 8088 	beq.w	8012b26 <__kernel_cos+0x136>
 8012a16:	4632      	mov	r2, r6
 8012a18:	463b      	mov	r3, r7
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	4639      	mov	r1, r7
 8012a1e:	f7ed fdfb 	bl	8000618 <__aeabi_dmul>
 8012a22:	4b51      	ldr	r3, [pc, #324]	; (8012b68 <__kernel_cos+0x178>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	4604      	mov	r4, r0
 8012a28:	460d      	mov	r5, r1
 8012a2a:	f7ed fdf5 	bl	8000618 <__aeabi_dmul>
 8012a2e:	a340      	add	r3, pc, #256	; (adr r3, 8012b30 <__kernel_cos+0x140>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	4682      	mov	sl, r0
 8012a36:	468b      	mov	fp, r1
 8012a38:	4620      	mov	r0, r4
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	f7ed fdec 	bl	8000618 <__aeabi_dmul>
 8012a40:	a33d      	add	r3, pc, #244	; (adr r3, 8012b38 <__kernel_cos+0x148>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	f7ed fc31 	bl	80002ac <__adddf3>
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	462b      	mov	r3, r5
 8012a4e:	f7ed fde3 	bl	8000618 <__aeabi_dmul>
 8012a52:	a33b      	add	r3, pc, #236	; (adr r3, 8012b40 <__kernel_cos+0x150>)
 8012a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a58:	f7ed fc26 	bl	80002a8 <__aeabi_dsub>
 8012a5c:	4622      	mov	r2, r4
 8012a5e:	462b      	mov	r3, r5
 8012a60:	f7ed fdda 	bl	8000618 <__aeabi_dmul>
 8012a64:	a338      	add	r3, pc, #224	; (adr r3, 8012b48 <__kernel_cos+0x158>)
 8012a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6a:	f7ed fc1f 	bl	80002ac <__adddf3>
 8012a6e:	4622      	mov	r2, r4
 8012a70:	462b      	mov	r3, r5
 8012a72:	f7ed fdd1 	bl	8000618 <__aeabi_dmul>
 8012a76:	a336      	add	r3, pc, #216	; (adr r3, 8012b50 <__kernel_cos+0x160>)
 8012a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7c:	f7ed fc14 	bl	80002a8 <__aeabi_dsub>
 8012a80:	4622      	mov	r2, r4
 8012a82:	462b      	mov	r3, r5
 8012a84:	f7ed fdc8 	bl	8000618 <__aeabi_dmul>
 8012a88:	a333      	add	r3, pc, #204	; (adr r3, 8012b58 <__kernel_cos+0x168>)
 8012a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8e:	f7ed fc0d 	bl	80002ac <__adddf3>
 8012a92:	4622      	mov	r2, r4
 8012a94:	462b      	mov	r3, r5
 8012a96:	f7ed fdbf 	bl	8000618 <__aeabi_dmul>
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f7ed fdbb 	bl	8000618 <__aeabi_dmul>
 8012aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	460d      	mov	r5, r1
 8012aaa:	4630      	mov	r0, r6
 8012aac:	4639      	mov	r1, r7
 8012aae:	f7ed fdb3 	bl	8000618 <__aeabi_dmul>
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7ed fbf5 	bl	80002a8 <__aeabi_dsub>
 8012abe:	4b2b      	ldr	r3, [pc, #172]	; (8012b6c <__kernel_cos+0x17c>)
 8012ac0:	4598      	cmp	r8, r3
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460f      	mov	r7, r1
 8012ac6:	dc10      	bgt.n	8012aea <__kernel_cos+0xfa>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4650      	mov	r0, sl
 8012ace:	4659      	mov	r1, fp
 8012ad0:	f7ed fbea 	bl	80002a8 <__aeabi_dsub>
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	4926      	ldr	r1, [pc, #152]	; (8012b70 <__kernel_cos+0x180>)
 8012ad8:	4602      	mov	r2, r0
 8012ada:	2000      	movs	r0, #0
 8012adc:	f7ed fbe4 	bl	80002a8 <__aeabi_dsub>
 8012ae0:	ec41 0b10 	vmov	d0, r0, r1
 8012ae4:	b003      	add	sp, #12
 8012ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aea:	4b22      	ldr	r3, [pc, #136]	; (8012b74 <__kernel_cos+0x184>)
 8012aec:	4920      	ldr	r1, [pc, #128]	; (8012b70 <__kernel_cos+0x180>)
 8012aee:	4598      	cmp	r8, r3
 8012af0:	bfcc      	ite	gt
 8012af2:	4d21      	ldrgt	r5, [pc, #132]	; (8012b78 <__kernel_cos+0x188>)
 8012af4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012af8:	2400      	movs	r4, #0
 8012afa:	4622      	mov	r2, r4
 8012afc:	462b      	mov	r3, r5
 8012afe:	2000      	movs	r0, #0
 8012b00:	f7ed fbd2 	bl	80002a8 <__aeabi_dsub>
 8012b04:	4622      	mov	r2, r4
 8012b06:	4680      	mov	r8, r0
 8012b08:	4689      	mov	r9, r1
 8012b0a:	462b      	mov	r3, r5
 8012b0c:	4650      	mov	r0, sl
 8012b0e:	4659      	mov	r1, fp
 8012b10:	f7ed fbca 	bl	80002a8 <__aeabi_dsub>
 8012b14:	4632      	mov	r2, r6
 8012b16:	463b      	mov	r3, r7
 8012b18:	f7ed fbc6 	bl	80002a8 <__aeabi_dsub>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	460b      	mov	r3, r1
 8012b20:	4640      	mov	r0, r8
 8012b22:	4649      	mov	r1, r9
 8012b24:	e7da      	b.n	8012adc <__kernel_cos+0xec>
 8012b26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012b60 <__kernel_cos+0x170>
 8012b2a:	e7db      	b.n	8012ae4 <__kernel_cos+0xf4>
 8012b2c:	f3af 8000 	nop.w
 8012b30:	be8838d4 	.word	0xbe8838d4
 8012b34:	bda8fae9 	.word	0xbda8fae9
 8012b38:	bdb4b1c4 	.word	0xbdb4b1c4
 8012b3c:	3e21ee9e 	.word	0x3e21ee9e
 8012b40:	809c52ad 	.word	0x809c52ad
 8012b44:	3e927e4f 	.word	0x3e927e4f
 8012b48:	19cb1590 	.word	0x19cb1590
 8012b4c:	3efa01a0 	.word	0x3efa01a0
 8012b50:	16c15177 	.word	0x16c15177
 8012b54:	3f56c16c 	.word	0x3f56c16c
 8012b58:	5555554c 	.word	0x5555554c
 8012b5c:	3fa55555 	.word	0x3fa55555
 8012b60:	00000000 	.word	0x00000000
 8012b64:	3ff00000 	.word	0x3ff00000
 8012b68:	3fe00000 	.word	0x3fe00000
 8012b6c:	3fd33332 	.word	0x3fd33332
 8012b70:	3ff00000 	.word	0x3ff00000
 8012b74:	3fe90000 	.word	0x3fe90000
 8012b78:	3fd20000 	.word	0x3fd20000
 8012b7c:	00000000 	.word	0x00000000

08012b80 <__kernel_rem_pio2>:
 8012b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b84:	ed2d 8b02 	vpush	{d8}
 8012b88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012b8c:	f112 0f14 	cmn.w	r2, #20
 8012b90:	9308      	str	r3, [sp, #32]
 8012b92:	9101      	str	r1, [sp, #4]
 8012b94:	4bc6      	ldr	r3, [pc, #792]	; (8012eb0 <__kernel_rem_pio2+0x330>)
 8012b96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012b98:	9009      	str	r0, [sp, #36]	; 0x24
 8012b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b9e:	9304      	str	r3, [sp, #16]
 8012ba0:	9b08      	ldr	r3, [sp, #32]
 8012ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ba6:	bfa8      	it	ge
 8012ba8:	1ed4      	subge	r4, r2, #3
 8012baa:	9306      	str	r3, [sp, #24]
 8012bac:	bfb2      	itee	lt
 8012bae:	2400      	movlt	r4, #0
 8012bb0:	2318      	movge	r3, #24
 8012bb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8012bb6:	f06f 0317 	mvn.w	r3, #23
 8012bba:	fb04 3303 	mla	r3, r4, r3, r3
 8012bbe:	eb03 0a02 	add.w	sl, r3, r2
 8012bc2:	9b04      	ldr	r3, [sp, #16]
 8012bc4:	9a06      	ldr	r2, [sp, #24]
 8012bc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012ea0 <__kernel_rem_pio2+0x320>
 8012bca:	eb03 0802 	add.w	r8, r3, r2
 8012bce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012bd0:	1aa7      	subs	r7, r4, r2
 8012bd2:	ae20      	add	r6, sp, #128	; 0x80
 8012bd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012bd8:	2500      	movs	r5, #0
 8012bda:	4545      	cmp	r5, r8
 8012bdc:	dd18      	ble.n	8012c10 <__kernel_rem_pio2+0x90>
 8012bde:	9b08      	ldr	r3, [sp, #32]
 8012be0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012be4:	aa20      	add	r2, sp, #128	; 0x80
 8012be6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012ea0 <__kernel_rem_pio2+0x320>
 8012bea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012bee:	f1c3 0301 	rsb	r3, r3, #1
 8012bf2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012bf6:	9307      	str	r3, [sp, #28]
 8012bf8:	9b07      	ldr	r3, [sp, #28]
 8012bfa:	9a04      	ldr	r2, [sp, #16]
 8012bfc:	4443      	add	r3, r8
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	db2f      	blt.n	8012c62 <__kernel_rem_pio2+0xe2>
 8012c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012c0a:	462f      	mov	r7, r5
 8012c0c:	2600      	movs	r6, #0
 8012c0e:	e01b      	b.n	8012c48 <__kernel_rem_pio2+0xc8>
 8012c10:	42ef      	cmn	r7, r5
 8012c12:	d407      	bmi.n	8012c24 <__kernel_rem_pio2+0xa4>
 8012c14:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012c18:	f7ed fc94 	bl	8000544 <__aeabi_i2d>
 8012c1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c20:	3501      	adds	r5, #1
 8012c22:	e7da      	b.n	8012bda <__kernel_rem_pio2+0x5a>
 8012c24:	ec51 0b18 	vmov	r0, r1, d8
 8012c28:	e7f8      	b.n	8012c1c <__kernel_rem_pio2+0x9c>
 8012c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c2e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012c32:	f7ed fcf1 	bl	8000618 <__aeabi_dmul>
 8012c36:	4602      	mov	r2, r0
 8012c38:	460b      	mov	r3, r1
 8012c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c3e:	f7ed fb35 	bl	80002ac <__adddf3>
 8012c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c46:	3601      	adds	r6, #1
 8012c48:	9b06      	ldr	r3, [sp, #24]
 8012c4a:	429e      	cmp	r6, r3
 8012c4c:	f1a7 0708 	sub.w	r7, r7, #8
 8012c50:	ddeb      	ble.n	8012c2a <__kernel_rem_pio2+0xaa>
 8012c52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c56:	3508      	adds	r5, #8
 8012c58:	ecab 7b02 	vstmia	fp!, {d7}
 8012c5c:	f108 0801 	add.w	r8, r8, #1
 8012c60:	e7ca      	b.n	8012bf8 <__kernel_rem_pio2+0x78>
 8012c62:	9b04      	ldr	r3, [sp, #16]
 8012c64:	aa0c      	add	r2, sp, #48	; 0x30
 8012c66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012c6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012c72:	9c04      	ldr	r4, [sp, #16]
 8012c74:	930a      	str	r3, [sp, #40]	; 0x28
 8012c76:	ab98      	add	r3, sp, #608	; 0x260
 8012c78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c7c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012c80:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012c84:	f8cd b008 	str.w	fp, [sp, #8]
 8012c88:	4625      	mov	r5, r4
 8012c8a:	2d00      	cmp	r5, #0
 8012c8c:	dc78      	bgt.n	8012d80 <__kernel_rem_pio2+0x200>
 8012c8e:	ec47 6b10 	vmov	d0, r6, r7
 8012c92:	4650      	mov	r0, sl
 8012c94:	f000 fbfc 	bl	8013490 <scalbn>
 8012c98:	ec57 6b10 	vmov	r6, r7, d0
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012ca2:	ee10 0a10 	vmov	r0, s0
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	f7ed fcb6 	bl	8000618 <__aeabi_dmul>
 8012cac:	ec41 0b10 	vmov	d0, r0, r1
 8012cb0:	f000 fb6e 	bl	8013390 <floor>
 8012cb4:	4b7f      	ldr	r3, [pc, #508]	; (8012eb4 <__kernel_rem_pio2+0x334>)
 8012cb6:	ec51 0b10 	vmov	r0, r1, d0
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f7ed fcac 	bl	8000618 <__aeabi_dmul>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	f7ed faee 	bl	80002a8 <__aeabi_dsub>
 8012ccc:	460f      	mov	r7, r1
 8012cce:	4606      	mov	r6, r0
 8012cd0:	f7ed ff52 	bl	8000b78 <__aeabi_d2iz>
 8012cd4:	9007      	str	r0, [sp, #28]
 8012cd6:	f7ed fc35 	bl	8000544 <__aeabi_i2d>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	460b      	mov	r3, r1
 8012cde:	4630      	mov	r0, r6
 8012ce0:	4639      	mov	r1, r7
 8012ce2:	f7ed fae1 	bl	80002a8 <__aeabi_dsub>
 8012ce6:	f1ba 0f00 	cmp.w	sl, #0
 8012cea:	4606      	mov	r6, r0
 8012cec:	460f      	mov	r7, r1
 8012cee:	dd70      	ble.n	8012dd2 <__kernel_rem_pio2+0x252>
 8012cf0:	1e62      	subs	r2, r4, #1
 8012cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8012cf4:	9d07      	ldr	r5, [sp, #28]
 8012cf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cfa:	f1ca 0118 	rsb	r1, sl, #24
 8012cfe:	fa40 f301 	asr.w	r3, r0, r1
 8012d02:	441d      	add	r5, r3
 8012d04:	408b      	lsls	r3, r1
 8012d06:	1ac0      	subs	r0, r0, r3
 8012d08:	ab0c      	add	r3, sp, #48	; 0x30
 8012d0a:	9507      	str	r5, [sp, #28]
 8012d0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012d10:	f1ca 0317 	rsb	r3, sl, #23
 8012d14:	fa40 f303 	asr.w	r3, r0, r3
 8012d18:	9302      	str	r3, [sp, #8]
 8012d1a:	9b02      	ldr	r3, [sp, #8]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	dd66      	ble.n	8012dee <__kernel_rem_pio2+0x26e>
 8012d20:	9b07      	ldr	r3, [sp, #28]
 8012d22:	2200      	movs	r2, #0
 8012d24:	3301      	adds	r3, #1
 8012d26:	9307      	str	r3, [sp, #28]
 8012d28:	4615      	mov	r5, r2
 8012d2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012d2e:	4294      	cmp	r4, r2
 8012d30:	f300 8099 	bgt.w	8012e66 <__kernel_rem_pio2+0x2e6>
 8012d34:	f1ba 0f00 	cmp.w	sl, #0
 8012d38:	dd07      	ble.n	8012d4a <__kernel_rem_pio2+0x1ca>
 8012d3a:	f1ba 0f01 	cmp.w	sl, #1
 8012d3e:	f000 80a5 	beq.w	8012e8c <__kernel_rem_pio2+0x30c>
 8012d42:	f1ba 0f02 	cmp.w	sl, #2
 8012d46:	f000 80c1 	beq.w	8012ecc <__kernel_rem_pio2+0x34c>
 8012d4a:	9b02      	ldr	r3, [sp, #8]
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d14e      	bne.n	8012dee <__kernel_rem_pio2+0x26e>
 8012d50:	4632      	mov	r2, r6
 8012d52:	463b      	mov	r3, r7
 8012d54:	4958      	ldr	r1, [pc, #352]	; (8012eb8 <__kernel_rem_pio2+0x338>)
 8012d56:	2000      	movs	r0, #0
 8012d58:	f7ed faa6 	bl	80002a8 <__aeabi_dsub>
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	460f      	mov	r7, r1
 8012d60:	2d00      	cmp	r5, #0
 8012d62:	d044      	beq.n	8012dee <__kernel_rem_pio2+0x26e>
 8012d64:	4650      	mov	r0, sl
 8012d66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012ea8 <__kernel_rem_pio2+0x328>
 8012d6a:	f000 fb91 	bl	8013490 <scalbn>
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	ec53 2b10 	vmov	r2, r3, d0
 8012d76:	f7ed fa97 	bl	80002a8 <__aeabi_dsub>
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	460f      	mov	r7, r1
 8012d7e:	e036      	b.n	8012dee <__kernel_rem_pio2+0x26e>
 8012d80:	4b4e      	ldr	r3, [pc, #312]	; (8012ebc <__kernel_rem_pio2+0x33c>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	4630      	mov	r0, r6
 8012d86:	4639      	mov	r1, r7
 8012d88:	f7ed fc46 	bl	8000618 <__aeabi_dmul>
 8012d8c:	f7ed fef4 	bl	8000b78 <__aeabi_d2iz>
 8012d90:	f7ed fbd8 	bl	8000544 <__aeabi_i2d>
 8012d94:	4b4a      	ldr	r3, [pc, #296]	; (8012ec0 <__kernel_rem_pio2+0x340>)
 8012d96:	2200      	movs	r2, #0
 8012d98:	4680      	mov	r8, r0
 8012d9a:	4689      	mov	r9, r1
 8012d9c:	f7ed fc3c 	bl	8000618 <__aeabi_dmul>
 8012da0:	4602      	mov	r2, r0
 8012da2:	460b      	mov	r3, r1
 8012da4:	4630      	mov	r0, r6
 8012da6:	4639      	mov	r1, r7
 8012da8:	f7ed fa7e 	bl	80002a8 <__aeabi_dsub>
 8012dac:	f7ed fee4 	bl	8000b78 <__aeabi_d2iz>
 8012db0:	9b02      	ldr	r3, [sp, #8]
 8012db2:	f843 0b04 	str.w	r0, [r3], #4
 8012db6:	3d01      	subs	r5, #1
 8012db8:	9302      	str	r3, [sp, #8]
 8012dba:	ab70      	add	r3, sp, #448	; 0x1c0
 8012dbc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	4649      	mov	r1, r9
 8012dc8:	f7ed fa70 	bl	80002ac <__adddf3>
 8012dcc:	4606      	mov	r6, r0
 8012dce:	460f      	mov	r7, r1
 8012dd0:	e75b      	b.n	8012c8a <__kernel_rem_pio2+0x10a>
 8012dd2:	d105      	bne.n	8012de0 <__kernel_rem_pio2+0x260>
 8012dd4:	1e63      	subs	r3, r4, #1
 8012dd6:	aa0c      	add	r2, sp, #48	; 0x30
 8012dd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012ddc:	15c3      	asrs	r3, r0, #23
 8012dde:	e79b      	b.n	8012d18 <__kernel_rem_pio2+0x198>
 8012de0:	4b38      	ldr	r3, [pc, #224]	; (8012ec4 <__kernel_rem_pio2+0x344>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	f7ed fe9e 	bl	8000b24 <__aeabi_dcmpge>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d139      	bne.n	8012e60 <__kernel_rem_pio2+0x2e0>
 8012dec:	9002      	str	r0, [sp, #8]
 8012dee:	2200      	movs	r2, #0
 8012df0:	2300      	movs	r3, #0
 8012df2:	4630      	mov	r0, r6
 8012df4:	4639      	mov	r1, r7
 8012df6:	f7ed fe77 	bl	8000ae8 <__aeabi_dcmpeq>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	f000 80b4 	beq.w	8012f68 <__kernel_rem_pio2+0x3e8>
 8012e00:	f104 3bff 	add.w	fp, r4, #4294967295
 8012e04:	465b      	mov	r3, fp
 8012e06:	2200      	movs	r2, #0
 8012e08:	9904      	ldr	r1, [sp, #16]
 8012e0a:	428b      	cmp	r3, r1
 8012e0c:	da65      	bge.n	8012eda <__kernel_rem_pio2+0x35a>
 8012e0e:	2a00      	cmp	r2, #0
 8012e10:	d07b      	beq.n	8012f0a <__kernel_rem_pio2+0x38a>
 8012e12:	ab0c      	add	r3, sp, #48	; 0x30
 8012e14:	f1aa 0a18 	sub.w	sl, sl, #24
 8012e18:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	f000 80a0 	beq.w	8012f62 <__kernel_rem_pio2+0x3e2>
 8012e22:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012ea8 <__kernel_rem_pio2+0x328>
 8012e26:	4650      	mov	r0, sl
 8012e28:	f000 fb32 	bl	8013490 <scalbn>
 8012e2c:	4f23      	ldr	r7, [pc, #140]	; (8012ebc <__kernel_rem_pio2+0x33c>)
 8012e2e:	ec55 4b10 	vmov	r4, r5, d0
 8012e32:	46d8      	mov	r8, fp
 8012e34:	2600      	movs	r6, #0
 8012e36:	f1b8 0f00 	cmp.w	r8, #0
 8012e3a:	f280 80cf 	bge.w	8012fdc <__kernel_rem_pio2+0x45c>
 8012e3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012ea0 <__kernel_rem_pio2+0x320>
 8012e42:	465f      	mov	r7, fp
 8012e44:	f04f 0800 	mov.w	r8, #0
 8012e48:	2f00      	cmp	r7, #0
 8012e4a:	f2c0 80fd 	blt.w	8013048 <__kernel_rem_pio2+0x4c8>
 8012e4e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012e50:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012ec8 <__kernel_rem_pio2+0x348>
 8012e54:	ec55 4b18 	vmov	r4, r5, d8
 8012e58:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8012e5c:	2600      	movs	r6, #0
 8012e5e:	e0e5      	b.n	801302c <__kernel_rem_pio2+0x4ac>
 8012e60:	2302      	movs	r3, #2
 8012e62:	9302      	str	r3, [sp, #8]
 8012e64:	e75c      	b.n	8012d20 <__kernel_rem_pio2+0x1a0>
 8012e66:	f8db 3000 	ldr.w	r3, [fp]
 8012e6a:	b955      	cbnz	r5, 8012e82 <__kernel_rem_pio2+0x302>
 8012e6c:	b123      	cbz	r3, 8012e78 <__kernel_rem_pio2+0x2f8>
 8012e6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012e72:	f8cb 3000 	str.w	r3, [fp]
 8012e76:	2301      	movs	r3, #1
 8012e78:	3201      	adds	r2, #1
 8012e7a:	f10b 0b04 	add.w	fp, fp, #4
 8012e7e:	461d      	mov	r5, r3
 8012e80:	e755      	b.n	8012d2e <__kernel_rem_pio2+0x1ae>
 8012e82:	1acb      	subs	r3, r1, r3
 8012e84:	f8cb 3000 	str.w	r3, [fp]
 8012e88:	462b      	mov	r3, r5
 8012e8a:	e7f5      	b.n	8012e78 <__kernel_rem_pio2+0x2f8>
 8012e8c:	1e62      	subs	r2, r4, #1
 8012e8e:	ab0c      	add	r3, sp, #48	; 0x30
 8012e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012e98:	a90c      	add	r1, sp, #48	; 0x30
 8012e9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012e9e:	e754      	b.n	8012d4a <__kernel_rem_pio2+0x1ca>
	...
 8012eac:	3ff00000 	.word	0x3ff00000
 8012eb0:	08014a10 	.word	0x08014a10
 8012eb4:	40200000 	.word	0x40200000
 8012eb8:	3ff00000 	.word	0x3ff00000
 8012ebc:	3e700000 	.word	0x3e700000
 8012ec0:	41700000 	.word	0x41700000
 8012ec4:	3fe00000 	.word	0x3fe00000
 8012ec8:	080149d0 	.word	0x080149d0
 8012ecc:	1e62      	subs	r2, r4, #1
 8012ece:	ab0c      	add	r3, sp, #48	; 0x30
 8012ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012ed8:	e7de      	b.n	8012e98 <__kernel_rem_pio2+0x318>
 8012eda:	a90c      	add	r1, sp, #48	; 0x30
 8012edc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	430a      	orrs	r2, r1
 8012ee4:	e790      	b.n	8012e08 <__kernel_rem_pio2+0x288>
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012eec:	2900      	cmp	r1, #0
 8012eee:	d0fa      	beq.n	8012ee6 <__kernel_rem_pio2+0x366>
 8012ef0:	9a08      	ldr	r2, [sp, #32]
 8012ef2:	18e3      	adds	r3, r4, r3
 8012ef4:	18a6      	adds	r6, r4, r2
 8012ef6:	aa20      	add	r2, sp, #128	; 0x80
 8012ef8:	1c65      	adds	r5, r4, #1
 8012efa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012efe:	9302      	str	r3, [sp, #8]
 8012f00:	9b02      	ldr	r3, [sp, #8]
 8012f02:	42ab      	cmp	r3, r5
 8012f04:	da04      	bge.n	8012f10 <__kernel_rem_pio2+0x390>
 8012f06:	461c      	mov	r4, r3
 8012f08:	e6b5      	b.n	8012c76 <__kernel_rem_pio2+0xf6>
 8012f0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e7eb      	b.n	8012ee8 <__kernel_rem_pio2+0x368>
 8012f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f16:	f7ed fb15 	bl	8000544 <__aeabi_i2d>
 8012f1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f20:	46b3      	mov	fp, r6
 8012f22:	461c      	mov	r4, r3
 8012f24:	2700      	movs	r7, #0
 8012f26:	f04f 0800 	mov.w	r8, #0
 8012f2a:	f04f 0900 	mov.w	r9, #0
 8012f2e:	9b06      	ldr	r3, [sp, #24]
 8012f30:	429f      	cmp	r7, r3
 8012f32:	dd06      	ble.n	8012f42 <__kernel_rem_pio2+0x3c2>
 8012f34:	ab70      	add	r3, sp, #448	; 0x1c0
 8012f36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012f3a:	e9c3 8900 	strd	r8, r9, [r3]
 8012f3e:	3501      	adds	r5, #1
 8012f40:	e7de      	b.n	8012f00 <__kernel_rem_pio2+0x380>
 8012f42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012f46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012f4a:	f7ed fb65 	bl	8000618 <__aeabi_dmul>
 8012f4e:	4602      	mov	r2, r0
 8012f50:	460b      	mov	r3, r1
 8012f52:	4640      	mov	r0, r8
 8012f54:	4649      	mov	r1, r9
 8012f56:	f7ed f9a9 	bl	80002ac <__adddf3>
 8012f5a:	3701      	adds	r7, #1
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	4689      	mov	r9, r1
 8012f60:	e7e5      	b.n	8012f2e <__kernel_rem_pio2+0x3ae>
 8012f62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f66:	e754      	b.n	8012e12 <__kernel_rem_pio2+0x292>
 8012f68:	ec47 6b10 	vmov	d0, r6, r7
 8012f6c:	f1ca 0000 	rsb	r0, sl, #0
 8012f70:	f000 fa8e 	bl	8013490 <scalbn>
 8012f74:	ec57 6b10 	vmov	r6, r7, d0
 8012f78:	4b9f      	ldr	r3, [pc, #636]	; (80131f8 <__kernel_rem_pio2+0x678>)
 8012f7a:	ee10 0a10 	vmov	r0, s0
 8012f7e:	2200      	movs	r2, #0
 8012f80:	4639      	mov	r1, r7
 8012f82:	f7ed fdcf 	bl	8000b24 <__aeabi_dcmpge>
 8012f86:	b300      	cbz	r0, 8012fca <__kernel_rem_pio2+0x44a>
 8012f88:	4b9c      	ldr	r3, [pc, #624]	; (80131fc <__kernel_rem_pio2+0x67c>)
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	4639      	mov	r1, r7
 8012f90:	f7ed fb42 	bl	8000618 <__aeabi_dmul>
 8012f94:	f7ed fdf0 	bl	8000b78 <__aeabi_d2iz>
 8012f98:	4605      	mov	r5, r0
 8012f9a:	f7ed fad3 	bl	8000544 <__aeabi_i2d>
 8012f9e:	4b96      	ldr	r3, [pc, #600]	; (80131f8 <__kernel_rem_pio2+0x678>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f7ed fb39 	bl	8000618 <__aeabi_dmul>
 8012fa6:	460b      	mov	r3, r1
 8012fa8:	4602      	mov	r2, r0
 8012faa:	4639      	mov	r1, r7
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7ed f97b 	bl	80002a8 <__aeabi_dsub>
 8012fb2:	f7ed fde1 	bl	8000b78 <__aeabi_d2iz>
 8012fb6:	f104 0b01 	add.w	fp, r4, #1
 8012fba:	ab0c      	add	r3, sp, #48	; 0x30
 8012fbc:	f10a 0a18 	add.w	sl, sl, #24
 8012fc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012fc4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8012fc8:	e72b      	b.n	8012e22 <__kernel_rem_pio2+0x2a2>
 8012fca:	4630      	mov	r0, r6
 8012fcc:	4639      	mov	r1, r7
 8012fce:	f7ed fdd3 	bl	8000b78 <__aeabi_d2iz>
 8012fd2:	ab0c      	add	r3, sp, #48	; 0x30
 8012fd4:	46a3      	mov	fp, r4
 8012fd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012fda:	e722      	b.n	8012e22 <__kernel_rem_pio2+0x2a2>
 8012fdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8012fde:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8012fe2:	ab0c      	add	r3, sp, #48	; 0x30
 8012fe4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012fe8:	f7ed faac 	bl	8000544 <__aeabi_i2d>
 8012fec:	4622      	mov	r2, r4
 8012fee:	462b      	mov	r3, r5
 8012ff0:	f7ed fb12 	bl	8000618 <__aeabi_dmul>
 8012ff4:	4632      	mov	r2, r6
 8012ff6:	e9c9 0100 	strd	r0, r1, [r9]
 8012ffa:	463b      	mov	r3, r7
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	4629      	mov	r1, r5
 8013000:	f7ed fb0a 	bl	8000618 <__aeabi_dmul>
 8013004:	f108 38ff 	add.w	r8, r8, #4294967295
 8013008:	4604      	mov	r4, r0
 801300a:	460d      	mov	r5, r1
 801300c:	e713      	b.n	8012e36 <__kernel_rem_pio2+0x2b6>
 801300e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013012:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013016:	f7ed faff 	bl	8000618 <__aeabi_dmul>
 801301a:	4602      	mov	r2, r0
 801301c:	460b      	mov	r3, r1
 801301e:	4620      	mov	r0, r4
 8013020:	4629      	mov	r1, r5
 8013022:	f7ed f943 	bl	80002ac <__adddf3>
 8013026:	3601      	adds	r6, #1
 8013028:	4604      	mov	r4, r0
 801302a:	460d      	mov	r5, r1
 801302c:	9b04      	ldr	r3, [sp, #16]
 801302e:	429e      	cmp	r6, r3
 8013030:	dc01      	bgt.n	8013036 <__kernel_rem_pio2+0x4b6>
 8013032:	45b0      	cmp	r8, r6
 8013034:	daeb      	bge.n	801300e <__kernel_rem_pio2+0x48e>
 8013036:	ab48      	add	r3, sp, #288	; 0x120
 8013038:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801303c:	e9c3 4500 	strd	r4, r5, [r3]
 8013040:	3f01      	subs	r7, #1
 8013042:	f108 0801 	add.w	r8, r8, #1
 8013046:	e6ff      	b.n	8012e48 <__kernel_rem_pio2+0x2c8>
 8013048:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801304a:	2b02      	cmp	r3, #2
 801304c:	dc0b      	bgt.n	8013066 <__kernel_rem_pio2+0x4e6>
 801304e:	2b00      	cmp	r3, #0
 8013050:	dc6e      	bgt.n	8013130 <__kernel_rem_pio2+0x5b0>
 8013052:	d045      	beq.n	80130e0 <__kernel_rem_pio2+0x560>
 8013054:	9b07      	ldr	r3, [sp, #28]
 8013056:	f003 0007 	and.w	r0, r3, #7
 801305a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801305e:	ecbd 8b02 	vpop	{d8}
 8013062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013066:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013068:	2b03      	cmp	r3, #3
 801306a:	d1f3      	bne.n	8013054 <__kernel_rem_pio2+0x4d4>
 801306c:	ab48      	add	r3, sp, #288	; 0x120
 801306e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8013072:	46d0      	mov	r8, sl
 8013074:	46d9      	mov	r9, fp
 8013076:	f1b9 0f00 	cmp.w	r9, #0
 801307a:	f1a8 0808 	sub.w	r8, r8, #8
 801307e:	dc64      	bgt.n	801314a <__kernel_rem_pio2+0x5ca>
 8013080:	465c      	mov	r4, fp
 8013082:	2c01      	cmp	r4, #1
 8013084:	f1aa 0a08 	sub.w	sl, sl, #8
 8013088:	dc7e      	bgt.n	8013188 <__kernel_rem_pio2+0x608>
 801308a:	2000      	movs	r0, #0
 801308c:	2100      	movs	r1, #0
 801308e:	f1bb 0f01 	cmp.w	fp, #1
 8013092:	f300 8097 	bgt.w	80131c4 <__kernel_rem_pio2+0x644>
 8013096:	9b02      	ldr	r3, [sp, #8]
 8013098:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801309c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f040 8099 	bne.w	80131d8 <__kernel_rem_pio2+0x658>
 80130a6:	9b01      	ldr	r3, [sp, #4]
 80130a8:	e9c3 5600 	strd	r5, r6, [r3]
 80130ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80130b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80130b4:	e7ce      	b.n	8013054 <__kernel_rem_pio2+0x4d4>
 80130b6:	ab48      	add	r3, sp, #288	; 0x120
 80130b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80130bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c0:	f7ed f8f4 	bl	80002ac <__adddf3>
 80130c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130c8:	f1bb 0f00 	cmp.w	fp, #0
 80130cc:	daf3      	bge.n	80130b6 <__kernel_rem_pio2+0x536>
 80130ce:	9b02      	ldr	r3, [sp, #8]
 80130d0:	b113      	cbz	r3, 80130d8 <__kernel_rem_pio2+0x558>
 80130d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130d6:	4619      	mov	r1, r3
 80130d8:	9b01      	ldr	r3, [sp, #4]
 80130da:	e9c3 0100 	strd	r0, r1, [r3]
 80130de:	e7b9      	b.n	8013054 <__kernel_rem_pio2+0x4d4>
 80130e0:	2000      	movs	r0, #0
 80130e2:	2100      	movs	r1, #0
 80130e4:	e7f0      	b.n	80130c8 <__kernel_rem_pio2+0x548>
 80130e6:	ab48      	add	r3, sp, #288	; 0x120
 80130e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80130ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f0:	f7ed f8dc 	bl	80002ac <__adddf3>
 80130f4:	3c01      	subs	r4, #1
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	daf5      	bge.n	80130e6 <__kernel_rem_pio2+0x566>
 80130fa:	9b02      	ldr	r3, [sp, #8]
 80130fc:	b1e3      	cbz	r3, 8013138 <__kernel_rem_pio2+0x5b8>
 80130fe:	4602      	mov	r2, r0
 8013100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013104:	9c01      	ldr	r4, [sp, #4]
 8013106:	e9c4 2300 	strd	r2, r3, [r4]
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013112:	f7ed f8c9 	bl	80002a8 <__aeabi_dsub>
 8013116:	ad4a      	add	r5, sp, #296	; 0x128
 8013118:	2401      	movs	r4, #1
 801311a:	45a3      	cmp	fp, r4
 801311c:	da0f      	bge.n	801313e <__kernel_rem_pio2+0x5be>
 801311e:	9b02      	ldr	r3, [sp, #8]
 8013120:	b113      	cbz	r3, 8013128 <__kernel_rem_pio2+0x5a8>
 8013122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013126:	4619      	mov	r1, r3
 8013128:	9b01      	ldr	r3, [sp, #4]
 801312a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801312e:	e791      	b.n	8013054 <__kernel_rem_pio2+0x4d4>
 8013130:	465c      	mov	r4, fp
 8013132:	2000      	movs	r0, #0
 8013134:	2100      	movs	r1, #0
 8013136:	e7de      	b.n	80130f6 <__kernel_rem_pio2+0x576>
 8013138:	4602      	mov	r2, r0
 801313a:	460b      	mov	r3, r1
 801313c:	e7e2      	b.n	8013104 <__kernel_rem_pio2+0x584>
 801313e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013142:	f7ed f8b3 	bl	80002ac <__adddf3>
 8013146:	3401      	adds	r4, #1
 8013148:	e7e7      	b.n	801311a <__kernel_rem_pio2+0x59a>
 801314a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801314e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8013152:	4620      	mov	r0, r4
 8013154:	4632      	mov	r2, r6
 8013156:	463b      	mov	r3, r7
 8013158:	4629      	mov	r1, r5
 801315a:	f7ed f8a7 	bl	80002ac <__adddf3>
 801315e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013162:	4602      	mov	r2, r0
 8013164:	460b      	mov	r3, r1
 8013166:	4620      	mov	r0, r4
 8013168:	4629      	mov	r1, r5
 801316a:	f7ed f89d 	bl	80002a8 <__aeabi_dsub>
 801316e:	4632      	mov	r2, r6
 8013170:	463b      	mov	r3, r7
 8013172:	f7ed f89b 	bl	80002ac <__adddf3>
 8013176:	ed9d 7b04 	vldr	d7, [sp, #16]
 801317a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801317e:	ed88 7b00 	vstr	d7, [r8]
 8013182:	f109 39ff 	add.w	r9, r9, #4294967295
 8013186:	e776      	b.n	8013076 <__kernel_rem_pio2+0x4f6>
 8013188:	e9da 8900 	ldrd	r8, r9, [sl]
 801318c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013190:	4640      	mov	r0, r8
 8013192:	4632      	mov	r2, r6
 8013194:	463b      	mov	r3, r7
 8013196:	4649      	mov	r1, r9
 8013198:	f7ed f888 	bl	80002ac <__adddf3>
 801319c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131a0:	4602      	mov	r2, r0
 80131a2:	460b      	mov	r3, r1
 80131a4:	4640      	mov	r0, r8
 80131a6:	4649      	mov	r1, r9
 80131a8:	f7ed f87e 	bl	80002a8 <__aeabi_dsub>
 80131ac:	4632      	mov	r2, r6
 80131ae:	463b      	mov	r3, r7
 80131b0:	f7ed f87c 	bl	80002ac <__adddf3>
 80131b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80131b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80131bc:	ed8a 7b00 	vstr	d7, [sl]
 80131c0:	3c01      	subs	r4, #1
 80131c2:	e75e      	b.n	8013082 <__kernel_rem_pio2+0x502>
 80131c4:	ab48      	add	r3, sp, #288	; 0x120
 80131c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed f86d 	bl	80002ac <__adddf3>
 80131d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131d6:	e75a      	b.n	801308e <__kernel_rem_pio2+0x50e>
 80131d8:	9b01      	ldr	r3, [sp, #4]
 80131da:	9a01      	ldr	r2, [sp, #4]
 80131dc:	601d      	str	r5, [r3, #0]
 80131de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80131e2:	605c      	str	r4, [r3, #4]
 80131e4:	609f      	str	r7, [r3, #8]
 80131e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80131ea:	60d3      	str	r3, [r2, #12]
 80131ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131f0:	6110      	str	r0, [r2, #16]
 80131f2:	6153      	str	r3, [r2, #20]
 80131f4:	e72e      	b.n	8013054 <__kernel_rem_pio2+0x4d4>
 80131f6:	bf00      	nop
 80131f8:	41700000 	.word	0x41700000
 80131fc:	3e700000 	.word	0x3e700000

08013200 <__kernel_sin>:
 8013200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013204:	ed2d 8b04 	vpush	{d8-d9}
 8013208:	eeb0 8a41 	vmov.f32	s16, s2
 801320c:	eef0 8a61 	vmov.f32	s17, s3
 8013210:	ec55 4b10 	vmov	r4, r5, d0
 8013214:	b083      	sub	sp, #12
 8013216:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801321a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801321e:	9001      	str	r0, [sp, #4]
 8013220:	da06      	bge.n	8013230 <__kernel_sin+0x30>
 8013222:	ee10 0a10 	vmov	r0, s0
 8013226:	4629      	mov	r1, r5
 8013228:	f7ed fca6 	bl	8000b78 <__aeabi_d2iz>
 801322c:	2800      	cmp	r0, #0
 801322e:	d051      	beq.n	80132d4 <__kernel_sin+0xd4>
 8013230:	4622      	mov	r2, r4
 8013232:	462b      	mov	r3, r5
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	f7ed f9ee 	bl	8000618 <__aeabi_dmul>
 801323c:	4682      	mov	sl, r0
 801323e:	468b      	mov	fp, r1
 8013240:	4602      	mov	r2, r0
 8013242:	460b      	mov	r3, r1
 8013244:	4620      	mov	r0, r4
 8013246:	4629      	mov	r1, r5
 8013248:	f7ed f9e6 	bl	8000618 <__aeabi_dmul>
 801324c:	a341      	add	r3, pc, #260	; (adr r3, 8013354 <__kernel_sin+0x154>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	4680      	mov	r8, r0
 8013254:	4689      	mov	r9, r1
 8013256:	4650      	mov	r0, sl
 8013258:	4659      	mov	r1, fp
 801325a:	f7ed f9dd 	bl	8000618 <__aeabi_dmul>
 801325e:	a33f      	add	r3, pc, #252	; (adr r3, 801335c <__kernel_sin+0x15c>)
 8013260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013264:	f7ed f820 	bl	80002a8 <__aeabi_dsub>
 8013268:	4652      	mov	r2, sl
 801326a:	465b      	mov	r3, fp
 801326c:	f7ed f9d4 	bl	8000618 <__aeabi_dmul>
 8013270:	a33c      	add	r3, pc, #240	; (adr r3, 8013364 <__kernel_sin+0x164>)
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	f7ed f819 	bl	80002ac <__adddf3>
 801327a:	4652      	mov	r2, sl
 801327c:	465b      	mov	r3, fp
 801327e:	f7ed f9cb 	bl	8000618 <__aeabi_dmul>
 8013282:	a33a      	add	r3, pc, #232	; (adr r3, 801336c <__kernel_sin+0x16c>)
 8013284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013288:	f7ed f80e 	bl	80002a8 <__aeabi_dsub>
 801328c:	4652      	mov	r2, sl
 801328e:	465b      	mov	r3, fp
 8013290:	f7ed f9c2 	bl	8000618 <__aeabi_dmul>
 8013294:	a337      	add	r3, pc, #220	; (adr r3, 8013374 <__kernel_sin+0x174>)
 8013296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329a:	f7ed f807 	bl	80002ac <__adddf3>
 801329e:	9b01      	ldr	r3, [sp, #4]
 80132a0:	4606      	mov	r6, r0
 80132a2:	460f      	mov	r7, r1
 80132a4:	b9eb      	cbnz	r3, 80132e2 <__kernel_sin+0xe2>
 80132a6:	4602      	mov	r2, r0
 80132a8:	460b      	mov	r3, r1
 80132aa:	4650      	mov	r0, sl
 80132ac:	4659      	mov	r1, fp
 80132ae:	f7ed f9b3 	bl	8000618 <__aeabi_dmul>
 80132b2:	a325      	add	r3, pc, #148	; (adr r3, 8013348 <__kernel_sin+0x148>)
 80132b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b8:	f7ec fff6 	bl	80002a8 <__aeabi_dsub>
 80132bc:	4642      	mov	r2, r8
 80132be:	464b      	mov	r3, r9
 80132c0:	f7ed f9aa 	bl	8000618 <__aeabi_dmul>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	4620      	mov	r0, r4
 80132ca:	4629      	mov	r1, r5
 80132cc:	f7ec ffee 	bl	80002ac <__adddf3>
 80132d0:	4604      	mov	r4, r0
 80132d2:	460d      	mov	r5, r1
 80132d4:	ec45 4b10 	vmov	d0, r4, r5
 80132d8:	b003      	add	sp, #12
 80132da:	ecbd 8b04 	vpop	{d8-d9}
 80132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e2:	4b1b      	ldr	r3, [pc, #108]	; (8013350 <__kernel_sin+0x150>)
 80132e4:	ec51 0b18 	vmov	r0, r1, d8
 80132e8:	2200      	movs	r2, #0
 80132ea:	f7ed f995 	bl	8000618 <__aeabi_dmul>
 80132ee:	4632      	mov	r2, r6
 80132f0:	ec41 0b19 	vmov	d9, r0, r1
 80132f4:	463b      	mov	r3, r7
 80132f6:	4640      	mov	r0, r8
 80132f8:	4649      	mov	r1, r9
 80132fa:	f7ed f98d 	bl	8000618 <__aeabi_dmul>
 80132fe:	4602      	mov	r2, r0
 8013300:	460b      	mov	r3, r1
 8013302:	ec51 0b19 	vmov	r0, r1, d9
 8013306:	f7ec ffcf 	bl	80002a8 <__aeabi_dsub>
 801330a:	4652      	mov	r2, sl
 801330c:	465b      	mov	r3, fp
 801330e:	f7ed f983 	bl	8000618 <__aeabi_dmul>
 8013312:	ec53 2b18 	vmov	r2, r3, d8
 8013316:	f7ec ffc7 	bl	80002a8 <__aeabi_dsub>
 801331a:	a30b      	add	r3, pc, #44	; (adr r3, 8013348 <__kernel_sin+0x148>)
 801331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013320:	4606      	mov	r6, r0
 8013322:	460f      	mov	r7, r1
 8013324:	4640      	mov	r0, r8
 8013326:	4649      	mov	r1, r9
 8013328:	f7ed f976 	bl	8000618 <__aeabi_dmul>
 801332c:	4602      	mov	r2, r0
 801332e:	460b      	mov	r3, r1
 8013330:	4630      	mov	r0, r6
 8013332:	4639      	mov	r1, r7
 8013334:	f7ec ffba 	bl	80002ac <__adddf3>
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	4620      	mov	r0, r4
 801333e:	4629      	mov	r1, r5
 8013340:	f7ec ffb2 	bl	80002a8 <__aeabi_dsub>
 8013344:	e7c4      	b.n	80132d0 <__kernel_sin+0xd0>
 8013346:	bf00      	nop
 8013348:	55555549 	.word	0x55555549
 801334c:	3fc55555 	.word	0x3fc55555
 8013350:	3fe00000 	.word	0x3fe00000
 8013354:	5acfd57c 	.word	0x5acfd57c
 8013358:	3de5d93a 	.word	0x3de5d93a
 801335c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013360:	3e5ae5e6 	.word	0x3e5ae5e6
 8013364:	57b1fe7d 	.word	0x57b1fe7d
 8013368:	3ec71de3 	.word	0x3ec71de3
 801336c:	19c161d5 	.word	0x19c161d5
 8013370:	3f2a01a0 	.word	0x3f2a01a0
 8013374:	1110f8a6 	.word	0x1110f8a6
 8013378:	3f811111 	.word	0x3f811111

0801337c <fabs>:
 801337c:	ec51 0b10 	vmov	r0, r1, d0
 8013380:	ee10 2a10 	vmov	r2, s0
 8013384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013388:	ec43 2b10 	vmov	d0, r2, r3
 801338c:	4770      	bx	lr
	...

08013390 <floor>:
 8013390:	ec51 0b10 	vmov	r0, r1, d0
 8013394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013398:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801339c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80133a0:	2e13      	cmp	r6, #19
 80133a2:	ee10 5a10 	vmov	r5, s0
 80133a6:	ee10 8a10 	vmov	r8, s0
 80133aa:	460c      	mov	r4, r1
 80133ac:	dc32      	bgt.n	8013414 <floor+0x84>
 80133ae:	2e00      	cmp	r6, #0
 80133b0:	da14      	bge.n	80133dc <floor+0x4c>
 80133b2:	a333      	add	r3, pc, #204	; (adr r3, 8013480 <floor+0xf0>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	f7ec ff78 	bl	80002ac <__adddf3>
 80133bc:	2200      	movs	r2, #0
 80133be:	2300      	movs	r3, #0
 80133c0:	f7ed fbba 	bl	8000b38 <__aeabi_dcmpgt>
 80133c4:	b138      	cbz	r0, 80133d6 <floor+0x46>
 80133c6:	2c00      	cmp	r4, #0
 80133c8:	da57      	bge.n	801347a <floor+0xea>
 80133ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80133ce:	431d      	orrs	r5, r3
 80133d0:	d001      	beq.n	80133d6 <floor+0x46>
 80133d2:	4c2d      	ldr	r4, [pc, #180]	; (8013488 <floor+0xf8>)
 80133d4:	2500      	movs	r5, #0
 80133d6:	4621      	mov	r1, r4
 80133d8:	4628      	mov	r0, r5
 80133da:	e025      	b.n	8013428 <floor+0x98>
 80133dc:	4f2b      	ldr	r7, [pc, #172]	; (801348c <floor+0xfc>)
 80133de:	4137      	asrs	r7, r6
 80133e0:	ea01 0307 	and.w	r3, r1, r7
 80133e4:	4303      	orrs	r3, r0
 80133e6:	d01f      	beq.n	8013428 <floor+0x98>
 80133e8:	a325      	add	r3, pc, #148	; (adr r3, 8013480 <floor+0xf0>)
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	f7ec ff5d 	bl	80002ac <__adddf3>
 80133f2:	2200      	movs	r2, #0
 80133f4:	2300      	movs	r3, #0
 80133f6:	f7ed fb9f 	bl	8000b38 <__aeabi_dcmpgt>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d0eb      	beq.n	80133d6 <floor+0x46>
 80133fe:	2c00      	cmp	r4, #0
 8013400:	bfbe      	ittt	lt
 8013402:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013406:	fa43 f606 	asrlt.w	r6, r3, r6
 801340a:	19a4      	addlt	r4, r4, r6
 801340c:	ea24 0407 	bic.w	r4, r4, r7
 8013410:	2500      	movs	r5, #0
 8013412:	e7e0      	b.n	80133d6 <floor+0x46>
 8013414:	2e33      	cmp	r6, #51	; 0x33
 8013416:	dd0b      	ble.n	8013430 <floor+0xa0>
 8013418:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801341c:	d104      	bne.n	8013428 <floor+0x98>
 801341e:	ee10 2a10 	vmov	r2, s0
 8013422:	460b      	mov	r3, r1
 8013424:	f7ec ff42 	bl	80002ac <__adddf3>
 8013428:	ec41 0b10 	vmov	d0, r0, r1
 801342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013430:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013434:	f04f 33ff 	mov.w	r3, #4294967295
 8013438:	fa23 f707 	lsr.w	r7, r3, r7
 801343c:	4207      	tst	r7, r0
 801343e:	d0f3      	beq.n	8013428 <floor+0x98>
 8013440:	a30f      	add	r3, pc, #60	; (adr r3, 8013480 <floor+0xf0>)
 8013442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013446:	f7ec ff31 	bl	80002ac <__adddf3>
 801344a:	2200      	movs	r2, #0
 801344c:	2300      	movs	r3, #0
 801344e:	f7ed fb73 	bl	8000b38 <__aeabi_dcmpgt>
 8013452:	2800      	cmp	r0, #0
 8013454:	d0bf      	beq.n	80133d6 <floor+0x46>
 8013456:	2c00      	cmp	r4, #0
 8013458:	da02      	bge.n	8013460 <floor+0xd0>
 801345a:	2e14      	cmp	r6, #20
 801345c:	d103      	bne.n	8013466 <floor+0xd6>
 801345e:	3401      	adds	r4, #1
 8013460:	ea25 0507 	bic.w	r5, r5, r7
 8013464:	e7b7      	b.n	80133d6 <floor+0x46>
 8013466:	2301      	movs	r3, #1
 8013468:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801346c:	fa03 f606 	lsl.w	r6, r3, r6
 8013470:	4435      	add	r5, r6
 8013472:	4545      	cmp	r5, r8
 8013474:	bf38      	it	cc
 8013476:	18e4      	addcc	r4, r4, r3
 8013478:	e7f2      	b.n	8013460 <floor+0xd0>
 801347a:	2500      	movs	r5, #0
 801347c:	462c      	mov	r4, r5
 801347e:	e7aa      	b.n	80133d6 <floor+0x46>
 8013480:	8800759c 	.word	0x8800759c
 8013484:	7e37e43c 	.word	0x7e37e43c
 8013488:	bff00000 	.word	0xbff00000
 801348c:	000fffff 	.word	0x000fffff

08013490 <scalbn>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	ec55 4b10 	vmov	r4, r5, d0
 8013496:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801349a:	4606      	mov	r6, r0
 801349c:	462b      	mov	r3, r5
 801349e:	b99a      	cbnz	r2, 80134c8 <scalbn+0x38>
 80134a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134a4:	4323      	orrs	r3, r4
 80134a6:	d036      	beq.n	8013516 <scalbn+0x86>
 80134a8:	4b39      	ldr	r3, [pc, #228]	; (8013590 <scalbn+0x100>)
 80134aa:	4629      	mov	r1, r5
 80134ac:	ee10 0a10 	vmov	r0, s0
 80134b0:	2200      	movs	r2, #0
 80134b2:	f7ed f8b1 	bl	8000618 <__aeabi_dmul>
 80134b6:	4b37      	ldr	r3, [pc, #220]	; (8013594 <scalbn+0x104>)
 80134b8:	429e      	cmp	r6, r3
 80134ba:	4604      	mov	r4, r0
 80134bc:	460d      	mov	r5, r1
 80134be:	da10      	bge.n	80134e2 <scalbn+0x52>
 80134c0:	a32b      	add	r3, pc, #172	; (adr r3, 8013570 <scalbn+0xe0>)
 80134c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c6:	e03a      	b.n	801353e <scalbn+0xae>
 80134c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80134cc:	428a      	cmp	r2, r1
 80134ce:	d10c      	bne.n	80134ea <scalbn+0x5a>
 80134d0:	ee10 2a10 	vmov	r2, s0
 80134d4:	4620      	mov	r0, r4
 80134d6:	4629      	mov	r1, r5
 80134d8:	f7ec fee8 	bl	80002ac <__adddf3>
 80134dc:	4604      	mov	r4, r0
 80134de:	460d      	mov	r5, r1
 80134e0:	e019      	b.n	8013516 <scalbn+0x86>
 80134e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80134e6:	460b      	mov	r3, r1
 80134e8:	3a36      	subs	r2, #54	; 0x36
 80134ea:	4432      	add	r2, r6
 80134ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80134f0:	428a      	cmp	r2, r1
 80134f2:	dd08      	ble.n	8013506 <scalbn+0x76>
 80134f4:	2d00      	cmp	r5, #0
 80134f6:	a120      	add	r1, pc, #128	; (adr r1, 8013578 <scalbn+0xe8>)
 80134f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134fc:	da1c      	bge.n	8013538 <scalbn+0xa8>
 80134fe:	a120      	add	r1, pc, #128	; (adr r1, 8013580 <scalbn+0xf0>)
 8013500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013504:	e018      	b.n	8013538 <scalbn+0xa8>
 8013506:	2a00      	cmp	r2, #0
 8013508:	dd08      	ble.n	801351c <scalbn+0x8c>
 801350a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801350e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013512:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013516:	ec45 4b10 	vmov	d0, r4, r5
 801351a:	bd70      	pop	{r4, r5, r6, pc}
 801351c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013520:	da19      	bge.n	8013556 <scalbn+0xc6>
 8013522:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013526:	429e      	cmp	r6, r3
 8013528:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801352c:	dd0a      	ble.n	8013544 <scalbn+0xb4>
 801352e:	a112      	add	r1, pc, #72	; (adr r1, 8013578 <scalbn+0xe8>)
 8013530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1e2      	bne.n	80134fe <scalbn+0x6e>
 8013538:	a30f      	add	r3, pc, #60	; (adr r3, 8013578 <scalbn+0xe8>)
 801353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353e:	f7ed f86b 	bl	8000618 <__aeabi_dmul>
 8013542:	e7cb      	b.n	80134dc <scalbn+0x4c>
 8013544:	a10a      	add	r1, pc, #40	; (adr r1, 8013570 <scalbn+0xe0>)
 8013546:	e9d1 0100 	ldrd	r0, r1, [r1]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d0b8      	beq.n	80134c0 <scalbn+0x30>
 801354e:	a10e      	add	r1, pc, #56	; (adr r1, 8013588 <scalbn+0xf8>)
 8013550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013554:	e7b4      	b.n	80134c0 <scalbn+0x30>
 8013556:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801355a:	3236      	adds	r2, #54	; 0x36
 801355c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013560:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013564:	4620      	mov	r0, r4
 8013566:	4b0c      	ldr	r3, [pc, #48]	; (8013598 <scalbn+0x108>)
 8013568:	2200      	movs	r2, #0
 801356a:	e7e8      	b.n	801353e <scalbn+0xae>
 801356c:	f3af 8000 	nop.w
 8013570:	c2f8f359 	.word	0xc2f8f359
 8013574:	01a56e1f 	.word	0x01a56e1f
 8013578:	8800759c 	.word	0x8800759c
 801357c:	7e37e43c 	.word	0x7e37e43c
 8013580:	8800759c 	.word	0x8800759c
 8013584:	fe37e43c 	.word	0xfe37e43c
 8013588:	c2f8f359 	.word	0xc2f8f359
 801358c:	81a56e1f 	.word	0x81a56e1f
 8013590:	43500000 	.word	0x43500000
 8013594:	ffff3cb0 	.word	0xffff3cb0
 8013598:	3c900000 	.word	0x3c900000

0801359c <_init>:
 801359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801359e:	bf00      	nop
 80135a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a2:	bc08      	pop	{r3}
 80135a4:	469e      	mov	lr, r3
 80135a6:	4770      	bx	lr

080135a8 <_fini>:
 80135a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135aa:	bf00      	nop
 80135ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ae:	bc08      	pop	{r3}
 80135b0:	469e      	mov	lr, r3
 80135b2:	4770      	bx	lr
