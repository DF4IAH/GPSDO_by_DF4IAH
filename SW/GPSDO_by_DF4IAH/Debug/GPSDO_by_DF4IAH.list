
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb0  08012f18  08012f18  00022f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ac8  08013ac8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013ac8  08013ac8  00023ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ad0  08013ad0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ad0  08013ad0  00023ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ad4  08013ad4  00023ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08013ad8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065d4  200001e8  08013cc0  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200067bc  08013cc0  000367bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028480  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004961  00000000  00000000  00058698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  0005d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0005edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027574  00000000  00000000  00060ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a6c  00000000  00000000  00088034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ca8  00000000  00000000  000abaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091dc  00000000  00000000  0019579c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012efc 	.word	0x08012efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08012efc 	.word	0x08012efc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb4:	f043 0204 	orr.w	r2, r3, #4
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <MX_ADC1_Init+0x178>)
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <MX_ADC1_Init+0x17c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <MX_ADC1_Init+0x178>)
 800100e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b54      	ldr	r3, [pc, #336]	; (8001168 <MX_ADC1_Init+0x178>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <MX_ADC1_Init+0x178>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <MX_ADC1_Init+0x178>)
 8001022:	2201      	movs	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <MX_ADC1_Init+0x178>)
 8001028:	2208      	movs	r2, #8
 800102a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_ADC1_Init+0x178>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <MX_ADC1_Init+0x178>)
 8001034:	2200      	movs	r2, #0
 8001036:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_ADC1_Init+0x178>)
 800103a:	2205      	movs	r2, #5
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <MX_ADC1_Init+0x178>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_ADC1_Init+0x178>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_ADC1_Init+0x178>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_ADC1_Init+0x178>)
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_ADC1_Init+0x178>)
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_ADC1_Init+0x178>)
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_ADC1_Init+0x178>)
 800106a:	221c      	movs	r2, #28
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_ADC1_Init+0x178>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_ADC1_Init+0x178>)
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_ADC1_Init+0x178>)
 800107c:	2201      	movs	r2, #1
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4839      	ldr	r0, [pc, #228]	; (8001168 <MX_ADC1_Init+0x178>)
 8001082:	f006 fd19 	bl	8007ab8 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800108c:	f004 fb4e 	bl	800572c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <MX_ADC1_Init+0x180>)
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001094:	2306      	movs	r3, #6
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001098:	2306      	movs	r3, #6
 800109a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109c:	237f      	movs	r3, #127	; 0x7f
 800109e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a0:	2304      	movs	r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ae:	f007 f875 	bl	800819c <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80010b8:	f004 fb38 	bl	800572c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_ADC1_Init+0x184>)
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c0:	230c      	movs	r3, #12
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ce:	f007 f865 	bl	800819c <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80010d8:	f004 fb28 	bl	800572c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_ADC1_Init+0x188>)
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2312      	movs	r3, #18
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_ADC1_Init+0x178>)
 80010ea:	f007 f857 	bl	800819c <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010f4:	f004 fb1a 	bl	800572c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x180>)
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010fc:	2318      	movs	r3, #24
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <MX_ADC1_Init+0x178>)
 800110a:	f007 f847 	bl	800819c <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001114:	f004 fb0a 	bl	800572c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_ADC1_Init+0x18c>)
 800111a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001122:	2305      	movs	r3, #5
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <MX_ADC1_Init+0x178>)
 800112c:	f007 f836 	bl	800819c <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001136:	f004 faf9 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <MX_ADC1_Init+0x190>)
 800113e:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <MX_ADC1_Init+0x190>)
 8001144:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <MX_ADC1_Init+0x190>)
 800114a:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <MX_ADC1_Init+0x190>)
 8001150:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <MX_ADC1_Init+0x190>)
 8001156:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <MX_ADC1_Init+0x190>)
 800115c:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20006430 	.word	0x20006430
 800116c:	50040000 	.word	0x50040000
 8001170:	80000001 	.word	0x80000001
 8001174:	2a000400 	.word	0x2a000400
 8001178:	25b00200 	.word	0x25b00200
 800117c:	43210000 	.word	0x43210000
 8001180:	20000204 	.word	0x20000204

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a0      	sub	sp, #128	; 0x80
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	2254      	movs	r2, #84	; 0x54
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00d ff6d 	bl	800f084 <memset>
  if(adcHandle->Instance==ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_ADC_MspInit+0x138>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d17f      	bne.n	80012b4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00b f9dd 	bl	800c584 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011d0:	f004 faac 	bl	800572c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a39      	ldr	r2, [pc, #228]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_ADC_MspInit+0x13c>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800121c:	2330      	movs	r3, #48	; 0x30
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001220:	230b      	movs	r3, #11
 8001222:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f008 fa07 	bl	8009644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001236:	2302      	movs	r3, #2
 8001238:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123a:	230b      	movs	r3, #11
 800123c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001246:	4619      	mov	r1, r3
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <HAL_ADC_MspInit+0x140>)
 800124a:	f008 f9fb 	bl	8009644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_ADC_MspInit+0x148>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800128a:	f007 ff57 	bl	800913c <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001294:	f004 fa4a 	bl	800572c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 800129c:	64da      	str	r2, [r3, #76]	; 0x4c
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_ADC_MspInit+0x144>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2012      	movs	r0, #18
 80012aa:	f007 ff0f 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012ae:	2012      	movs	r0, #18
 80012b0:	f007 ff28 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3780      	adds	r7, #128	; 0x80
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	50040000 	.word	0x50040000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	20006494 	.word	0x20006494
 80012cc:	40020008 	.word	0x40020008

080012d0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe71 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d16c      	bne.n	80013c6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <DF4IAH_ADC_Start_DMA+0x2a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e068      	b.n	80013cc <DF4IAH_ADC_Start_DMA+0xfc>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f007 fbf2 	bl	8008aec <ADC_Enable>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d154      	bne.n	80013bc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f023 0206 	bic.w	r2, r3, #6
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58
 800133e:	e002      	b.n	8001346 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <DF4IAH_ADC_Start_DMA+0x104>)
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <DF4IAH_ADC_Start_DMA+0x10c>)
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	221c      	movs	r2, #28
 8001364:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fed2 	bl	800913c <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3340      	adds	r3, #64	; 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f007 ff80 	bl	80092ac <HAL_DMA_Start_IT>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fdf3 	bl	8000fa0 <LL_ADC_REG_StartConversion>
 80013ba:	e006      	b.n	80013ca <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013c4:	e001      	b.n	80013ca <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c6:	2302      	movs	r3, #2
 80013c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08008c6f 	.word	0x08008c6f
 80013d8:	08008d47 	.word	0x08008d47
 80013dc:	08008d63 	.word	0x08008d63

080013e0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f007 fab7 	bl	800895c <HAL_ADC_GetState>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d013      	beq.n	8001432 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				gAdcVrefint_val = adc_dma_buf[0];
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_ADC_ConvCpltCallback+0x60>)
 8001418:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh10_val = adc_dma_buf[1];
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 800141c:	885a      	ldrh	r2, [r3, #2]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_ADC_ConvCpltCallback+0x64>)
 8001420:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh9_val = adc_dma_buf[2];
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001424:	889a      	ldrh	r2, [r3, #4]
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_ADC_ConvCpltCallback+0x68>)
 8001428:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh16_val = adc_dma_buf[4];
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_ADC_ConvCpltCallback+0x5c>)
 800142c:	891a      	ldrh	r2, [r3, #8]
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001430:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000234 	.word	0x20000234
 8001440:	20000222 	.word	0x20000222
 8001444:	2000021e 	.word	0x2000021e
 8001448:	2000021c 	.word	0x2000021c
 800144c:	20000220 	.word	0x20000220

08001450 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_ADC_ErrorCallback+0x20>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_ADC_ErrorCallback+0x20>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000240 	.word	0x20000240

08001474 <adc_init>:


void adc_init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001478:	217f      	movs	r1, #127	; 0x7f
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <adc_init+0x1c>)
 800147c:	f007 fcb8 	bl	8008df0 <HAL_ADCEx_Calibration_Start>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <adc_init+0x16>
	{
		Error_Handler();
 8001486:	f004 f951 	bl	800572c <Error_Handler>
	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20006430 	.word	0x20006430

08001494 <adc_start>:

void adc_start(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <adc_start+0x30>)
 800149a:	f007 fa5f 	bl	800895c <HAL_ADC_GetState>
 800149e:	4603      	mov	r3, r0
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00a      	beq.n	80014be <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80014a8:	2305      	movs	r3, #5
 80014aa:	461a      	mov	r2, r3
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <adc_start+0x34>)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <adc_start+0x30>)
 80014b0:	f7ff ff0e 	bl	80012d0 <DF4IAH_ADC_Start_DMA>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <adc_start+0x2a>
			Error_Handler();
 80014ba:	f004 f937 	bl	800572c <Error_Handler>
		}
	}
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20006430 	.word	0x20006430
 80014c8:	20000234 	.word	0x20000234

080014cc <adc_stop>:

void adc_stop(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <adc_stop+0x38>)
 80014d2:	f007 fa43 	bl	800895c <HAL_ADC_GetState>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <adc_stop+0x38>)
 80014e2:	f006 fc31 	bl	8007d48 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80014e6:	e00a      	b.n	80014fe <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <adc_stop+0x38>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d103      	bne.n	80014fe <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <adc_stop+0x38>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20006430 	.word	0x20006430

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_DMA_Init+0x48>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <MX_DMA_Init+0x48>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6493      	str	r3, [r2, #72]	; 0x48
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_DMA_Init+0x48>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	200b      	movs	r0, #11
 800152c:	f007 fdce 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001530:	200b      	movs	r0, #11
 8001532:	f007 fde7 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2011      	movs	r0, #17
 800153c:	f007 fdc6 	bl	80090cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001540:	2011      	movs	r0, #17
 8001542:	f007 fddf 	bl	8009104 <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <MX_GPIO_Init+0x144>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <MX_GPIO_Init+0x144>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <MX_GPIO_Init+0x144>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <MX_GPIO_Init+0x144>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a44      	ldr	r2, [pc, #272]	; (8001698 <MX_GPIO_Init+0x144>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_GPIO_Init+0x144>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_GPIO_Init+0x144>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <MX_GPIO_Init+0x144>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <MX_GPIO_Init+0x144>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <MX_GPIO_Init+0x144>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a38      	ldr	r2, [pc, #224]	; (8001698 <MX_GPIO_Init+0x144>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <MX_GPIO_Init+0x144>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f008 fa82 	bl	8009adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2110      	movs	r1, #16
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_GPIO_Init+0x148>)
 80015de:	f008 fa7d 	bl	8009adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	482d      	ldr	r0, [pc, #180]	; (800169c <MX_GPIO_Init+0x148>)
 80015e8:	f008 fa78 	bl	8009adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4827      	ldr	r0, [pc, #156]	; (800169c <MX_GPIO_Init+0x148>)
 8001600:	f008 f820 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001604:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f008 f812 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f008 f802 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001640:	2310      	movs	r3, #16
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_GPIO_Init+0x148>)
 8001658:	f007 fff4 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800165c:	2320      	movs	r3, #32
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001660:	2311      	movs	r3, #17
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <MX_GPIO_Init+0x148>)
 8001674:	f007 ffe6 	bl	8009644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8001678:	2308      	movs	r3, #8
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_GPIO_Init+0x150>)
 800168c:	f007 ffda 	bl	8009644 <HAL_GPIO_Init>

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400
 80016a0:	10110000 	.word	0x10110000
 80016a4:	48001c00 	.word	0x48001c00

080016a8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2120      	movs	r1, #32
 80016b6:	4818      	ldr	r0, [pc, #96]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016b8:	f008 fa10 	bl	8009adc <HAL_GPIO_WritePin>
	uDelay(2);
 80016bc:	2002      	movs	r0, #2
 80016be:	f002 fa7d 	bl	8003bbc <uDelay>

	/* TimeSlot starts here */

	if (bit) {
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d010      	beq.n	80016ea <onewireMasterWr_bit+0x42>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	4812      	ldr	r0, [pc, #72]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016ce:	f008 fa05 	bl	8009adc <HAL_GPIO_WritePin>
		uDelay(2);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f002 fa72 	bl	8003bbc <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	480e      	ldr	r0, [pc, #56]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016de:	f008 f9fd 	bl	8009adc <HAL_GPIO_WritePin>
		uDelay(88);
 80016e2:	2058      	movs	r0, #88	; 0x58
 80016e4:	f002 fa6a 	bl	8003bbc <uDelay>
 80016e8:	e00c      	b.n	8001704 <onewireMasterWr_bit+0x5c>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <onewireMasterWr_bit+0x70>)
 80016f0:	f008 f9f4 	bl	8009adc <HAL_GPIO_WritePin>
		uDelay(90);
 80016f4:	205a      	movs	r0, #90	; 0x5a
 80016f6:	f002 fa61 	bl	8003bbc <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2120      	movs	r1, #32
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <onewireMasterWr_bit+0x70>)
 8001700:	f008 f9ec 	bl	8009adc <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <onewireMasterWr_bit+0x70>)
 800170a:	f008 f9e7 	bl	8009adc <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000400 	.word	0x48000400

0800171c <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e00d      	b.n	8001748 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	fa42 f303 	asr.w	r3, r2, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffb3 	bl	80016a8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3301      	adds	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d9ee      	bls.n	800172c <onewireMasterWr_byte+0x10>
	}
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d124      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11f      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3302      	adds	r3, #2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3303      	adds	r3, #3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d115      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d110      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3305      	adds	r3, #5
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10b      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3306      	adds	r3, #6
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3307      	adds	r3, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d010      	beq.n	80017da <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80017b8:	2308      	movs	r3, #8
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e009      	b.n	80017d2 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffa8 	bl	800171c <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f2      	bne.n	80017be <onewireMasterWr_romCode+0x66>
 80017d8:	e000      	b.n	80017dc <onewireMasterWr_romCode+0x84>
		return;
 80017da:	bf00      	nop
	}
}
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2120      	movs	r1, #32
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <onewireMasterRd_bit+0x68>)
 80017f0:	f008 f974 	bl	8009adc <HAL_GPIO_WritePin>
	uDelay(2);
 80017f4:	2002      	movs	r0, #2
 80017f6:	f002 f9e1 	bl	8003bbc <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <onewireMasterRd_bit+0x68>)
 8001800:	f008 f96c 	bl	8009adc <HAL_GPIO_WritePin>
	uDelay(2);
 8001804:	2002      	movs	r0, #2
 8001806:	f002 f9d9 	bl	8003bbc <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2120      	movs	r1, #32
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <onewireMasterRd_bit+0x68>)
 8001810:	f008 f964 	bl	8009adc <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8001814:	200d      	movs	r0, #13
 8001816:	f002 f9d1 	bl	8003bbc <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 800181a:	2120      	movs	r1, #32
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <onewireMasterRd_bit+0x68>)
 800181e:	f008 f945 	bl	8009aac <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8001826:	204b      	movs	r0, #75	; 0x4b
 8001828:	f002 f9c8 	bl	8003bbc <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2120      	movs	r1, #32
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <onewireMasterRd_bit+0x68>)
 8001832:	f008 f953 	bl	8009adc <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	48000400 	.word	0x48000400

08001850 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d902      	bls.n	800186a <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	e016      	b.n	8001898 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 800186a:	2300      	movs	r3, #0
 800186c:	72fb      	strb	r3, [r7, #11]
 800186e:	e00e      	b.n	800188e <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8001870:	f7ff ffb8 	bl	80017e4 <onewireMasterRd_bit>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	2201      	movs	r2, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	3301      	adds	r3, #1
 800188c:	72fb      	strb	r3, [r7, #11]
 800188e:	7afa      	ldrb	r2, [r7, #11]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3ec      	bcc.n	8001870 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2120      	movs	r1, #32
 80018aa:	4813      	ldr	r0, [pc, #76]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018ac:	f008 f916 	bl	8009adc <HAL_GPIO_WritePin>
	uDelay(2000);
 80018b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b4:	f002 f982 	bl	8003bbc <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2120      	movs	r1, #32
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018be:	f008 f90d 	bl	8009adc <HAL_GPIO_WritePin>
	uDelay(550);
 80018c2:	f240 2026 	movw	r0, #550	; 0x226
 80018c6:	f002 f979 	bl	8003bbc <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	480a      	ldr	r0, [pc, #40]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018d0:	f008 f904 	bl	8009adc <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120);
 80018d4:	2078      	movs	r0, #120	; 0x78
 80018d6:	f002 f971 	bl	8003bbc <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80018da:	2120      	movs	r1, #32
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <onewireMasterCheck_presence+0x58>)
 80018de:	f008 f8e5 	bl	8009aac <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	uDelay(550 - 120);
 80018e6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 80018ea:	f002 f967 	bl	8003bbc <uDelay>

	return presence;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	48000400 	.word	0x48000400

080018fc <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	603a      	str	r2, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	460b      	mov	r3, r1
 800190a:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 8001918:	23ff      	movs	r3, #255	; 0xff
 800191a:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 800191c:	23ff      	movs	r3, #255	; 0xff
 800191e:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 800192c:	e0d0      	b.n	8001ad0 <onewireMasterTree_search+0x1d4>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 800192e:	f7ff ffb7 	bl	80018a0 <onewireMasterCheck_presence>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e0d3      	b.n	8001ae4 <onewireMasterTree_search+0x1e8>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80cc 	bne.w	8001adc <onewireMasterTree_search+0x1e0>
			break;
		}

		if (searchAlarms) {
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 800194a:	20ec      	movs	r0, #236	; 0xec
 800194c:	f7ff fee6 	bl	800171c <onewireMasterWr_byte>
 8001950:	e002      	b.n	8001958 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8001952:	20f0      	movs	r0, #240	; 0xf0
 8001954:	f7ff fee2 	bl	800171c <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 800195c:	e092      	b.n	8001a84 <onewireMasterTree_search+0x188>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 800195e:	7fbb      	ldrb	r3, [r7, #30]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f107 0220 	add.w	r2, r7, #32
 8001968:	4413      	add	r3, r2
 800196a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800196e:	461a      	mov	r2, r3
 8001970:	7fbb      	ldrb	r3, [r7, #30]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	fa42 f303 	asr.w	r3, r2, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 8001982:	f7ff ff2f 	bl	80017e4 <onewireMasterRd_bit>
 8001986:	4603      	mov	r3, r0
 8001988:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 800198a:	f7ff ff2b 	bl	80017e4 <onewireMasterRd_bit>
 800198e:	4603      	mov	r3, r0
 8001990:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 8001992:	7c7b      	ldrb	r3, [r7, #17]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <onewireMasterTree_search+0xa8>
 8001998:	7c3b      	ldrb	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <onewireMasterTree_search+0xa8>
				/* Only (common or single) '0' */
				direction = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	777b      	strb	r3, [r7, #29]
 80019a2:	e030      	b.n	8001a06 <onewireMasterTree_search+0x10a>
			}
			else if (b_pos && !b_neg) {
 80019a4:	7c7b      	ldrb	r3, [r7, #17]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <onewireMasterTree_search+0xba>
 80019aa:	7c3b      	ldrb	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <onewireMasterTree_search+0xba>
				/* Only (common or single) '1' */
				direction = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	777b      	strb	r3, [r7, #29]
 80019b4:	e027      	b.n	8001a06 <onewireMasterTree_search+0x10a>
			}
			else if (!b_pos && !b_neg) {
 80019b6:	7c7b      	ldrb	r3, [r7, #17]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11c      	bne.n	80019f6 <onewireMasterTree_search+0xfa>
 80019bc:	7c3b      	ldrb	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <onewireMasterTree_search+0xfa>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80019c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019c6:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dd02      	ble.n	80019d4 <onewireMasterTree_search+0xd8>
					/* Follow last trace */
					direction = bitNow;
 80019ce:	7cbb      	ldrb	r3, [r7, #18]
 80019d0:	777b      	strb	r3, [r7, #29]
 80019d2:	e00a      	b.n	80019ea <onewireMasterTree_search+0xee>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80019d4:	7f3b      	ldrb	r3, [r7, #28]
 80019d6:	7fba      	ldrb	r2, [r7, #30]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d104      	bne.n	80019e6 <onewireMasterTree_search+0xea>
					/* Select now the '1' branch */
					direction = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 80019e0:	23ff      	movs	r3, #255	; 0xff
 80019e2:	773b      	strb	r3, [r7, #28]
 80019e4:	e001      	b.n	80019ea <onewireMasterTree_search+0xee>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 80019ea:	7f7b      	ldrb	r3, [r7, #29]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <onewireMasterTree_search+0x10a>
					bitIdxLastZero = bitIdxNow;
 80019f0:	7fbb      	ldrb	r3, [r7, #30]
 80019f2:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 80019f4:	e007      	b.n	8001a06 <onewireMasterTree_search+0x10a>
				}
			}
			else if (b_pos && b_neg) {
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <onewireMasterTree_search+0x10a>
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <onewireMasterTree_search+0x10a>
				/* No devices anymore */
				return 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e06e      	b.n	8001ae4 <onewireMasterTree_search+0x1e8>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 8001a06:	7f7b      	ldrb	r3, [r7, #29]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <onewireMasterTree_search+0x144>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001a0c:	7fbb      	ldrb	r3, [r7, #30]
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f107 0220 	add.w	r2, r7, #32
 8001a16:	4413      	add	r3, r2
 8001a18:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a1c:	7fbb      	ldrb	r3, [r7, #30]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	7fb9      	ldrb	r1, [r7, #30]
 8001a2c:	08c9      	lsrs	r1, r1, #3
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	440b      	add	r3, r1
 8001a3a:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001a3e:	e01a      	b.n	8001a76 <onewireMasterTree_search+0x17a>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001a40:	7fbb      	ldrb	r3, [r7, #30]
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f107 0220 	add.w	r2, r7, #32
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a50:	7fbb      	ldrb	r3, [r7, #30]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	7fb9      	ldrb	r1, [r7, #30]
 8001a64:	08c9      	lsrs	r1, r1, #3
 8001a66:	b2c9      	uxtb	r1, r1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	440b      	add	r3, r1
 8001a72:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a76:	7f7b      	ldrb	r3, [r7, #29]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe15 	bl	80016a8 <onewireMasterWr_bit>

			++bitIdxNow;
 8001a7e:	7fbb      	ldrb	r3, [r7, #30]
 8001a80:	3301      	adds	r3, #1
 8001a82:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001a84:	7fbb      	ldrb	r3, [r7, #30]
 8001a86:	2b3f      	cmp	r3, #63	; 0x3f
 8001a88:	f67f af69 	bls.w	800195e <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001a8c:	7f3b      	ldrb	r3, [r7, #28]
 8001a8e:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d101      	bne.n	8001a9e <onewireMasterTree_search+0x1a2>
			lastDeviceFlag = 1U;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00f      	b.n	8001ac4 <onewireMasterTree_search+0x1c8>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	441a      	add	r2, r3
 8001aac:	f107 0108 	add.w	r1, r7, #8
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	7819      	ldrb	r1, [r3, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4413      	add	r3, r2
 8001aba:	460a      	mov	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	ddec      	ble.n	8001aa4 <onewireMasterTree_search+0x1a8>
		}
		++devicesCnt;
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	3301      	adds	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001ad0:	7ffa      	ldrb	r2, [r7, #31]
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f4ff af2a 	bcc.w	800192e <onewireMasterTree_search+0x32>
 8001ada:	e000      	b.n	8001ade <onewireMasterTree_search+0x1e2>
			break;
 8001adc:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001ade:	f7ff fedf 	bl	80018a0 <onewireMasterCheck_presence>

	return devicesCnt;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	460b      	mov	r3, r1
 8001afa:	71bb      	strb	r3, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d124      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11f      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3302      	adds	r3, #2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11a      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3303      	adds	r3, #3
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d115      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d110      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3305      	adds	r3, #5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3306      	adds	r3, #6
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3307      	adds	r3, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001b52:	231f      	movs	r3, #31
 8001b54:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b0b      	cmp	r3, #11
 8001b5a:	d00a      	beq.n	8001b72 <onewireDS18B20_setAdcWidth+0x86>
 8001b5c:	2b0b      	cmp	r3, #11
 8001b5e:	dc0d      	bgt.n	8001b7c <onewireDS18B20_setAdcWidth+0x90>
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d010      	beq.n	8001b86 <onewireDS18B20_setAdcWidth+0x9a>
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d109      	bne.n	8001b7c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	73fb      	strb	r3, [r7, #15]
		break;
 8001b70:	e00a      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	73fb      	strb	r3, [r7, #15]
		break;
 8001b7a:	e005      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b82:	73fb      	strb	r3, [r7, #15]
		break;
 8001b84:	e000      	b.n	8001b88 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001b86:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001b88:	f7ff fe8a 	bl	80018a0 <onewireMasterCheck_presence>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001b98:	20cc      	movs	r0, #204	; 0xcc
 8001b9a:	f7ff fdbf 	bl	800171c <onewireMasterWr_byte>
 8001b9e:	e005      	b.n	8001bac <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001ba0:	2055      	movs	r0, #85	; 0x55
 8001ba2:	f7ff fdbb 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f7ff fdd6 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001bac:	204e      	movs	r0, #78	; 0x4e
 8001bae:	f7ff fdb5 	bl	800171c <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdb1 	bl	800171c <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fdad 	bl	800171c <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fda9 	bl	800171c <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001bca:	f7ff fe69 	bl	80018a0 <onewireMasterCheck_presence>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d124      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3301      	adds	r3, #1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d115      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d110      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3305      	adds	r3, #5
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3307      	adds	r3, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001c30:	f7ff fe36 	bl	80018a0 <onewireMasterCheck_presence>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11d      	bne.n	8001c76 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c40:	20cc      	movs	r0, #204	; 0xcc
 8001c42:	f7ff fd6b 	bl	800171c <onewireMasterWr_byte>
 8001c46:	e005      	b.n	8001c54 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c48:	2055      	movs	r0, #85	; 0x55
 8001c4a:	f7ff fd67 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd82 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001c54:	2044      	movs	r0, #68	; 0x44
 8001c56:	f7ff fd61 	bl	800171c <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001c5e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c62:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c6a:	f005 fce1 	bl	8007630 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	e000      	b.n	8001c78 <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d124      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11f      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11a      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3303      	adds	r3, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d115      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d110      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3305      	adds	r3, #5
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001cdc:	f005 fca8 	bl	8007630 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d205      	bcs.n	8001cf6 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 fca9 	bl	8007648 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001cf6:	f7ff fdd3 	bl	80018a0 <onewireMasterCheck_presence>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d116      	bne.n	8001d2e <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d103      	bne.n	8001d0e <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001d06:	20cc      	movs	r0, #204	; 0xcc
 8001d08:	f7ff fd08 	bl	800171c <onewireMasterWr_byte>
 8001d0c:	e005      	b.n	8001d1a <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001d0e:	2055      	movs	r0, #85	; 0x55
 8001d10:	f7ff fd04 	bl	800171c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fd1f 	bl	8001758 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001d1a:	20be      	movs	r0, #190	; 0xbe
 8001d1c:	f7ff fcfe 	bl	800171c <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f7ff fd95 	bl	8001850 <onewireMasterRd_field>
 8001d26:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	e000      	b.n	8001d30 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_I2C1_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <MX_I2C1_Init+0x7c>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d74:	f007 feca 	bl	8009b0c <HAL_I2C_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d7e:	f003 fcd5 	bl	800572c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d86:	f009 fc9a 	bl	800b6be <HAL_I2CEx_ConfigAnalogFilter>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d90:	f003 fccc 	bl	800572c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_I2C1_Init+0x74>)
 8001d98:	f009 fcdc 	bl	800b754 <HAL_I2CEx_ConfigDigitalFilter>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f003 fcc3 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200064ec 	.word	0x200064ec
 8001db0:	40005400 	.word	0x40005400
 8001db4:	00403e5a 	.word	0x00403e5a

08001db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09e      	sub	sp, #120	; 0x78
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2254      	movs	r2, #84	; 0x54
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00d f953 	bl	800f084 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_I2C_MspInit+0xc8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d146      	bne.n	8001e76 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00a fbc4 	bl	800c584 <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e02:	f003 fc93 	bl	800572c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e36:	4619      	mov	r1, r3
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <HAL_I2C_MspInit+0xd0>)
 8001e3a:	f007 fc03 	bl	8009644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_I2C_MspInit+0xcc>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201f      	movs	r0, #31
 8001e5c:	f007 f936 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e60:	201f      	movs	r0, #31
 8001e62:	f007 f94f 	bl	8009104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2020      	movs	r0, #32
 8001e6c:	f007 f92e 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e70:	2020      	movs	r0, #32
 8001e72:	f007 f947 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3778      	adds	r7, #120	; 0x78
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005400 	.word	0x40005400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400

08001e8c <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	e03e      	b.n	8001f22 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	2364      	movs	r3, #100	; 0x64
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4820      	ldr	r0, [pc, #128]	; (8001f34 <i2cBusGetDeviceList+0xa8>)
 8001eb2:	f007 ff2b 	bl	8009d0c <HAL_I2C_IsDeviceReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d12c      	bne.n	8001f1a <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b60      	cmp	r3, #96	; 0x60
 8001eca:	d01f      	beq.n	8001f0c <i2cBusGetDeviceList+0x80>
 8001ecc:	2b60      	cmp	r3, #96	; 0x60
 8001ece:	dc25      	bgt.n	8001f1c <i2cBusGetDeviceList+0x90>
 8001ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed2:	d014      	beq.n	8001efe <i2cBusGetDeviceList+0x72>
 8001ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed6:	dc21      	bgt.n	8001f1c <i2cBusGetDeviceList+0x90>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d002      	beq.n	8001ee2 <i2cBusGetDeviceList+0x56>
 8001edc:	2b22      	cmp	r3, #34	; 0x22
 8001ede:	d007      	beq.n	8001ef0 <i2cBusGetDeviceList+0x64>
 8001ee0:	e01c      	b.n	8001f1c <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
				break;
 8001eee:	e015      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
				break;
 8001efc:	e00e      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
				break;
 8001f0a:	e007      	b.n	8001f1c <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
				break;
 8001f18:	e000      	b.n	8001f1c <i2cBusGetDeviceList+0x90>
			}
		}
 8001f1a:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	73bb      	strb	r3, [r7, #14]
 8001f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dabc      	bge.n	8001ea4 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200064ec 	.word	0x200064ec

08001f38 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	460b      	mov	r3, r1
 8001f44:	71bb      	strb	r3, [r7, #6]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f5c:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f70:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	b299      	uxth	r1, r3
 8001f94:	f107 0208 	add.w	r2, r7, #8
 8001f98:	2302      	movs	r3, #2
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001f9c:	f007 fe46 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <i2cDeviceDacMcp4725_set+0x76>
		return 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fae:	bf00      	nop
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fb2:	f008 f99e 	bl	800a2f2 <HAL_I2C_GetState>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d1f9      	bne.n	8001fb0 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <i2cDeviceDacMcp4725_set+0xa0>)
 8001fbe:	f008 f9a6 	bl	800a30e <HAL_I2C_GetError>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d101      	bne.n	8001fcc <i2cDeviceDacMcp4725_set+0x94>
		return 2U;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e000      	b.n	8001fce <i2cDeviceDacMcp4725_set+0x96>
	}
	return 0U;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200064ec 	.word	0x200064ec

08001fdc <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d02c      	beq.n	800204c <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	2303      	movs	r3, #3
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	4831      	ldr	r0, [pc, #196]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002008:	f007 fe10 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1U;
 8002016:	2301      	movs	r3, #1
 8002018:	e053      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800201a:	bf00      	nop
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800201e:	f008 f968 	bl	800a2f2 <HAL_I2C_GetState>
 8002022:	4603      	mov	r3, r0
 8002024:	2b20      	cmp	r3, #32
 8002026:	d1f9      	bne.n	800201c <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002028:	2313      	movs	r3, #19
 800202a:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 800202c:	230d      	movs	r3, #13
 800202e:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002030:	f107 020c 	add.w	r2, r7, #12
 8002034:	2302      	movs	r3, #2
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	4824      	ldr	r0, [pc, #144]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800203a:	f007 fdf7 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002048:	2301      	movs	r3, #1
 800204a:	e03a      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 800204c:	2312      	movs	r3, #18
 800204e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002054:	2309      	movs	r3, #9
 8002056:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002058:	f107 020c 	add.w	r2, r7, #12
 800205c:	2303      	movs	r3, #3
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002062:	f007 fde3 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002070:	2301      	movs	r3, #1
 8002072:	e026      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002074:	bf00      	nop
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002078:	f008 f93b 	bl	800a2f2 <HAL_I2C_GetState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b20      	cmp	r3, #32
 8002080:	d1f9      	bne.n	8002076 <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1UL);
 8002082:	2001      	movs	r0, #1
 8002084:	f005 fae0 	bl	8007648 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 8002088:	2313      	movs	r3, #19
 800208a:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 800208c:	2308      	movs	r3, #8
 800208e:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002090:	f107 020c 	add.w	r2, r7, #12
 8002094:	2302      	movs	r3, #2
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800209a:	f007 fdc7 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00a      	b.n	80020c2 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020ac:	bf00      	nop
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020b0:	f008 f91f 	bl	800a2f2 <HAL_I2C_GetState>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d1f9      	bne.n	80020ae <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1UL);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f005 fac4 	bl	8007648 <HAL_Delay>
	return 0U;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200064ec 	.word	0x200064ec

080020d0 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ff80 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	460a      	mov	r2, r1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	4613      	mov	r3, r2
 80020f0:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	b2da      	uxtb	r2, r3
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	4313      	orrs	r3, r2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002112:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5f 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 8002134:	e00f      	b.n	8002156 <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff4b 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	e006      	b.n	800215e <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	3b01      	subs	r3, #1
 8002154:	70fb      	strb	r3, [r7, #3]
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ec      	bne.n	8002136 <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0U;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800216e:	2300      	movs	r3, #0
 8002170:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002172:	23ff      	movs	r3, #255	; 0xff
 8002174:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 8002176:	23f0      	movs	r3, #240	; 0xf0
 8002178:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800217a:	463a      	mov	r2, r7
 800217c:	2303      	movs	r3, #3
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4854      	ldr	r0, [pc, #336]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002182:	f007 fd53 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8002186:	4603      	mov	r3, r0
 8002188:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1U;
 8002190:	2301      	movs	r3, #1
 8002192:	e09a      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002194:	bf00      	nop
 8002196:	484f      	ldr	r0, [pc, #316]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002198:	f008 f8ab 	bl	800a2f2 <HAL_I2C_GetState>
 800219c:	4603      	mov	r3, r0
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d1f9      	bne.n	8002196 <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 80021a2:	230c      	movs	r3, #12
 80021a4:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 80021a6:	23ff      	movs	r3, #255	; 0xff
 80021a8:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 80021aa:	23f0      	movs	r3, #240	; 0xf0
 80021ac:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021ae:	463a      	mov	r2, r7
 80021b0:	2303      	movs	r3, #3
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	4847      	ldr	r0, [pc, #284]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021b6:	f007 fd39 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 80021ba:	4603      	mov	r3, r0
 80021bc:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021be:	79bb      	ldrb	r3, [r7, #6]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e080      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021c8:	bf00      	nop
 80021ca:	4842      	ldr	r0, [pc, #264]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021cc:	f008 f891 	bl	800a2f2 <HAL_I2C_GetState>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d1f9      	bne.n	80021ca <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 80021d6:	2312      	movs	r3, #18
 80021d8:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 80021da:	2300      	movs	r3, #0
 80021dc:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80021de:	2308      	movs	r3, #8
 80021e0:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021e2:	463a      	mov	r2, r7
 80021e4:	2303      	movs	r3, #3
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	483a      	ldr	r0, [pc, #232]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021ea:	f007 fd1f 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 80021ee:	4603      	mov	r3, r0
 80021f0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e066      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021fc:	bf00      	nop
 80021fe:	4835      	ldr	r0, [pc, #212]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002200:	f008 f877 	bl	800a2f2 <HAL_I2C_GetState>
 8002204:	4603      	mov	r3, r0
 8002206:	2b20      	cmp	r3, #32
 8002208:	d1f9      	bne.n	80021fe <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 800220a:	230a      	movs	r3, #10
 800220c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 800220e:	2300      	movs	r3, #0
 8002210:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002212:	463a      	mov	r2, r7
 8002214:	2302      	movs	r3, #2
 8002216:	2140      	movs	r1, #64	; 0x40
 8002218:	482e      	ldr	r0, [pc, #184]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800221a:	f007 fd07 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1U;
 8002228:	2301      	movs	r3, #1
 800222a:	e04e      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800222c:	bf00      	nop
 800222e:	4829      	ldr	r0, [pc, #164]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002230:	f008 f85f 	bl	800a2f2 <HAL_I2C_GetState>
 8002234:	4603      	mov	r3, r0
 8002236:	2b20      	cmp	r3, #32
 8002238:	d1f9      	bne.n	800222e <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800223a:	2300      	movs	r3, #0
 800223c:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 800223e:	2300      	movs	r3, #0
 8002240:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002242:	463a      	mov	r2, r7
 8002244:	2302      	movs	r3, #2
 8002246:	2140      	movs	r1, #64	; 0x40
 8002248:	4822      	ldr	r0, [pc, #136]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800224a:	f007 fcef 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1U;
 8002258:	2301      	movs	r3, #1
 800225a:	e036      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800225c:	bf00      	nop
 800225e:	481d      	ldr	r0, [pc, #116]	; (80022d4 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002260:	f008 f847 	bl	800a2f2 <HAL_I2C_GetState>
 8002264:	4603      	mov	r3, r0
 8002266:	2b20      	cmp	r3, #32
 8002268:	d1f9      	bne.n	800225e <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800226a:	2304      	movs	r3, #4
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	e00b      	b.n	8002288 <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002270:	2100      	movs	r1, #0
 8002272:	2038      	movs	r0, #56	; 0x38
 8002274:	f7ff feb2 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1U;
 800227e:	2301      	movs	r3, #1
 8002280:	e023      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	3b01      	subs	r3, #1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 800228e:	2100      	movs	r1, #0
 8002290:	2008      	movs	r0, #8
 8002292:	f7ff fea3 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1U;
 800229c:	2301      	movs	r3, #1
 800229e:	e014      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 80022a0:	f7ff ff16 	bl	80020d0 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 80022a4:	2100      	movs	r1, #0
 80022a6:	2006      	movs	r0, #6
 80022a8:	f7ff fe98 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e009      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 80022b6:	2100      	movs	r1, #0
 80022b8:	200c      	movs	r0, #12
 80022ba:	f7ff fe8f 	bl	8001fdc <i2cMCP23017_Lcd16x2_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	return 0U;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200064ec 	.word	0x200064ec

080022d8 <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 80022dc:	f7ff ff44 	bl	8002168 <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U,  1U);
 80022e0:	2101      	movs	r1, #1
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff fefd 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L0_P1_str, sizeof(I2c_Lcd_Welcome_L0_P1_str) - 1);
 80022e8:	210d      	movs	r1, #13
 80022ea:	480a      	ldr	r0, [pc, #40]	; (8002314 <i2cMCP23017_Lcd16x2_Welcome+0x3c>)
 80022ec:	f7ff ff1c 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U,  1U);
 80022f0:	2101      	movs	r1, #1
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fef5 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P1_str, sizeof(I2c_Lcd_Welcome_L1_P1_str) - 1);
 80022f8:	2106      	movs	r1, #6
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <i2cMCP23017_Lcd16x2_Welcome+0x40>)
 80022fc:	f7ff ff14 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	i2cMCP23017_Lcd16x2_SetAddr(1U, 10U);
 8002300:	210a      	movs	r1, #10
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff feed 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P2_str, sizeof(I2c_Lcd_Welcome_L1_P2_str) - 1);
 8002308:	2105      	movs	r1, #5
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <i2cMCP23017_Lcd16x2_Welcome+0x44>)
 800230c:	f7ff ff0c 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	08013414 	.word	0x08013414
 8002318:	08013424 	.word	0x08013424
 800231c:	0801342c 	.word	0x0801342c

08002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af02      	add	r7, sp, #8
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 800232e:	f107 041c 	add.w	r4, r7, #28
 8002332:	461d      	mov	r5, r3
 8002334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 800233e:	f107 0408 	add.w	r4, r7, #8
 8002342:	461d      	mov	r5, r3
 8002344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 800234c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d013      	beq.n	8002382 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002360:	d302      	bcc.n	8002368 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 8002362:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002366:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 8002368:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800236c:	f107 0008 	add.w	r0, r7, #8
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	23df      	movs	r3, #223	; 0xdf
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 800237c:	2111      	movs	r1, #17
 800237e:	f00d faf3 	bl	800f968 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff feac 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	2110      	movs	r1, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fec9 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002396:	2100      	movs	r1, #0
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff fea2 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	2110      	movs	r1, #16
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff febf 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023aa:	bf00      	nop
 80023ac:	3730      	adds	r7, #48	; 0x30
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	08012f30 	.word	0x08012f30
 80023b8:	08012f44 	.word	0x08012f44
 80023bc:	08012f18 	.word	0x08012f18

080023c0 <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b090      	sub	sp, #64	; 0x40
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d4:	d302      	bcc.n	80023dc <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80023d6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80023da:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 80023dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80023e4:	22df      	movs	r2, #223	; 0xdf
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 80023ea:	2111      	movs	r1, #17
 80023ec:	f00d fabc 	bl	800f968 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 80023f0:	f107 0010 	add.w	r0, r7, #16
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <i2cMCP23017_Lcd16x2_Locked+0x78>)
 80023fc:	2111      	movs	r1, #17
 80023fe:	f00d fab3 	bl	800f968 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002402:	2100      	movs	r1, #0
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fe6c 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	2110      	movs	r1, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe89 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 8002416:	2100      	movs	r1, #0
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff fe62 	bl	80020e2 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	2110      	movs	r1, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fe7f 	bl	8002128 <i2cMCP23017_Lcd16x2_WriteStr>
}
 800242a:	bf00      	nop
 800242c:	3738      	adds	r7, #56	; 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	08012f58 	.word	0x08012f58
 8002438:	08012f6c 	.word	0x08012f6c

0800243c <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 8002446:	2300      	movs	r3, #0
 8002448:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 800244e:	f107 020c 	add.w	r2, r7, #12
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2144      	movs	r1, #68	; 0x44
 800245a:	481f      	ldr	r0, [pc, #124]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800245c:	f007 fd5e 	bl	8009f1c <HAL_I2C_Master_Seq_Transmit_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	e02f      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800246e:	bf00      	nop
 8002470:	4819      	ldr	r0, [pc, #100]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002472:	f007 ff3e 	bl	800a2f2 <HAL_I2C_GetState>
 8002476:	4603      	mov	r3, r0
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1f9      	bne.n	8002470 <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 800247c:	4816      	ldr	r0, [pc, #88]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800247e:	f007 ff46 	bl	800a30e <HAL_I2C_GetError>
 8002482:	4603      	mov	r3, r0
 8002484:	2b04      	cmp	r3, #4
 8002486:	d101      	bne.n	800248c <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	e020      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 800248c:	f107 0208 	add.w	r2, r7, #8
 8002490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2144      	movs	r1, #68	; 0x44
 800249a:	480f      	ldr	r0, [pc, #60]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 800249c:	f007 fdc2 	bl	800a024 <HAL_I2C_Master_Seq_Receive_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e00f      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024ae:	bf00      	nop
 80024b0:	4809      	ldr	r0, [pc, #36]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024b2:	f007 ff1e 	bl	800a2f2 <HAL_I2C_GetState>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d1f9      	bne.n	80024b0 <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024be:	f007 ff26 	bl	800a30e <HAL_I2C_GetError>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d101      	bne.n	80024cc <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 80024cc:	7a3b      	ldrb	r3, [r7, #8]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200064ec 	.word	0x200064ec

080024dc <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 80024e4:	f005 f8a4 	bl	8007630 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f7ff ffa3 	bl	800243c <i2cSmartLCD_Gfx240x128_Read>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	e00c      	b.n	8002522 <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 8002508:	f005 f892 	bl	8007630 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	429a      	cmp	r2, r3
 8002514:	d903      	bls.n	800251e <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 8002516:	2001      	movs	r0, #1
 8002518:	f005 f896 	bl	8007648 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 800251c:	e7e8      	b.n	80024f0 <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 800251e:	bf00      	nop
	} while (1);
	return 1U;
 8002520:	2301      	movs	r3, #1
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253a:	f7ff ffcf 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002542:	f107 020c 	add.w	r2, r7, #12
 8002546:	2301      	movs	r3, #1
 8002548:	2144      	movs	r1, #68	; 0x44
 800254a:	480f      	ldr	r0, [pc, #60]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800254c:	f007 fb6e 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1U;
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800255e:	bf00      	nop
 8002560:	4809      	ldr	r0, [pc, #36]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002562:	f007 fec6 	bl	800a2f2 <HAL_I2C_GetState>
 8002566:	4603      	mov	r3, r0
 8002568:	2b20      	cmp	r3, #32
 800256a:	d1f9      	bne.n	8002560 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 800256e:	f007 fece 	bl	800a30e <HAL_I2C_GetError>
 8002572:	4603      	mov	r3, r0
 8002574:	2b10      	cmp	r3, #16
 8002576:	d101      	bne.n	800257c <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1U;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	return 0U;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200064ec 	.word	0x200064ec

0800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f7ff ff9c 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	2302      	movs	r3, #2
 80025b2:	2144      	movs	r1, #68	; 0x44
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025b6:	f007 fb39 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1U;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00f      	b.n	80025e8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025c8:	bf00      	nop
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025cc:	f007 fe91 	bl	800a2f2 <HAL_I2C_GetState>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d1f9      	bne.n	80025ca <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025d8:	f007 fe99 	bl	800a30e <HAL_I2C_GetError>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d101      	bne.n	80025e6 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1U;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	return 0U;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200064ec 	.word	0x200064ec

080025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	460b      	mov	r3, r1
 8002600:	71bb      	strb	r3, [r7, #6]
 8002602:	4613      	mov	r3, r2
 8002604:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260a:	f7ff ff67 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	2303      	movs	r3, #3
 8002620:	2144      	movs	r1, #68	; 0x44
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002624:	f007 fb02 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1U;
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002636:	bf00      	nop
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 800263a:	f007 fe5a 	bl	800a2f2 <HAL_I2C_GetState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b20      	cmp	r3, #32
 8002642:	d1f9      	bne.n	8002638 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002644:	4806      	ldr	r0, [pc, #24]	; (8002660 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002646:	f007 fe62 	bl	800a30e <HAL_I2C_GetError>
 800264a:	4603      	mov	r3, r0
 800264c:	2b10      	cmp	r3, #16
 800264e:	d101      	bne.n	8002654 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	return 0U;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200064ec 	.word	0x200064ec

08002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	4603      	mov	r3, r0
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	460b      	mov	r3, r1
 800267c:	717b      	strb	r3, [r7, #5]
 800267e:	4613      	mov	r3, r2
 8002680:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002686:	f7ff ff29 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800269a:	f107 0208 	add.w	r2, r7, #8
 800269e:	2304      	movs	r3, #4
 80026a0:	2144      	movs	r1, #68	; 0x44
 80026a2:	480f      	ldr	r0, [pc, #60]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026a4:	f007 fac2 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80026b6:	bf00      	nop
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026ba:	f007 fe1a 	bl	800a2f2 <HAL_I2C_GetState>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d1f9      	bne.n	80026b8 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026c6:	f007 fe22 	bl	800a30e <HAL_I2C_GetError>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d101      	bne.n	80026d4 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	return 0U;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	200064ec 	.word	0x200064ec

080026e4 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80026e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ec:	f7ff fef6 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff fea3 	bl	800243c <i2cSmartLCD_Gfx240x128_Read>
 80026f6:	4603      	mov	r3, r0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}

080026fc <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b0c5      	sub	sp, #276	; 0x114
 8002700:	af00      	add	r7, sp, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	463a      	mov	r2, r7
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	4622      	mov	r2, r4
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	1dbb      	adds	r3, r7, #6
 8002714:	4602      	mov	r2, r0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	1d7b      	adds	r3, r7, #5
 800271a:	460a      	mov	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	3304      	adds	r3, #4
 8002728:	22fc      	movs	r2, #252	; 0xfc
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f00c fca9 	bl	800f084 <memset>

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2bef      	cmp	r3, #239	; 0xef
 8002738:	d903      	bls.n	8002742 <i2cSmartLCD_Gfx240x128_WriteText+0x46>
			Error_Handler();
 800273a:	f002 fff7 	bl	800572c <Error_Handler>
			return 2U;
 800273e:	2302      	movs	r3, #2
 8002740:	e09c      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 8002742:	1dbb      	adds	r3, r7, #6
 8002744:	f993 3000 	ldrsb.w	r3, [r3]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da03      	bge.n	8002754 <i2cSmartLCD_Gfx240x128_WriteText+0x58>
			Error_Handler();
 800274c:	f002 ffee 	bl	800572c <Error_Handler>
			return 3U;
 8002750:	2303      	movs	r3, #3
 8002752:	e093      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Overflow */
		if (((LCD1_SMART_LCD_SIZE_X - 1U) - (len * LCD1_SYSFONT_WIDTH)) < pos_x) {
 8002754:	1d7b      	adds	r3, r7, #5
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f1c3 02ef 	rsb	r2, r3, #239	; 0xef
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	f080 8081 	bcs.w	8002870 <i2cSmartLCD_Gfx240x128_WriteText+0x174>
			Error_Handler();
 800276e:	f002 ffdd 	bl	800572c <Error_Handler>
			return 4U;
 8002772:	2304      	movs	r3, #4
 8002774:	e082      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}
	}

	while (len) {
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 8002776:	1d7b      	adds	r3, r7, #5
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d903      	bls.n	8002786 <i2cSmartLCD_Gfx240x128_WriteText+0x8a>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 800277e:	2307      	movs	r3, #7
 8002780:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002784:	e003      	b.n	800278e <i2cSmartLCD_Gfx240x128_WriteText+0x92>
		} else {
			remaining = len;
 8002786:	1d7b      	adds	r3, r7, #5
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 800278e:	1d7b      	adds	r3, r7, #5
 8002790:	1d7a      	adds	r2, r7, #5
 8002792:	7811      	ldrb	r1, [r2, #0]
 8002794:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002798:	1a8a      	subs	r2, r1, r2
 800279a:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	2020      	movs	r0, #32
 80027a8:	f7ff ff24 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <i2cSmartLCD_Gfx240x128_WriteText+0xba>
			return 1U;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e062      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	2230      	movs	r2, #48	; 0x30
 80027bc:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80027c6:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80027ce:	e010      	b.n	80027f2 <i2cSmartLCD_Gfx240x128_WriteText+0xf6>
			i2cTxBuf[2 + idx] = *(str++);
 80027d0:	463b      	mov	r3, r7
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	463a      	mov	r2, r7
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80027de:	3202      	adds	r2, #2
 80027e0:	7819      	ldrb	r1, [r3, #0]
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 80027e8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80027ec:	3301      	adds	r3, #1
 80027ee:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80027f2:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80027f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3e8      	bcc.n	80027d0 <i2cSmartLCD_Gfx240x128_WriteText+0xd4>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80027fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002802:	f7ff fe6b 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 8002806:	2002      	movs	r0, #2
 8002808:	f004 ff1e 	bl	8007648 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 800280c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002810:	b29b      	uxth	r3, r3
 8002812:	3302      	adds	r3, #2
 8002814:	b29b      	uxth	r3, r3
 8002816:	f107 020c 	add.w	r2, r7, #12
 800281a:	2144      	movs	r1, #68	; 0x44
 800281c:	481a      	ldr	r0, [pc, #104]	; (8002888 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 800281e:	f007 fa05 	bl	8009c2c <HAL_I2C_Master_Transmit_IT>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 8002828:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <i2cSmartLCD_Gfx240x128_WriteText+0x138>
			return 1U;
 8002830:	2301      	movs	r3, #1
 8002832:	e023      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002834:	bf00      	nop
 8002836:	4814      	ldr	r0, [pc, #80]	; (8002888 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 8002838:	f007 fd5b 	bl	800a2f2 <HAL_I2C_GetState>
 800283c:	4603      	mov	r3, r0
 800283e:	2b20      	cmp	r3, #32
 8002840:	d1f9      	bne.n	8002836 <i2cSmartLCD_Gfx240x128_WriteText+0x13a>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002842:	4811      	ldr	r0, [pc, #68]	; (8002888 <i2cSmartLCD_Gfx240x128_WriteText+0x18c>)
 8002844:	f007 fd63 	bl	800a30e <HAL_I2C_GetError>
 8002848:	4603      	mov	r3, r0
 800284a:	2b10      	cmp	r3, #16
 800284c:	d101      	bne.n	8002852 <i2cSmartLCD_Gfx240x128_WriteText+0x156>
			return 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	e014      	b.n	800287c <i2cSmartLCD_Gfx240x128_WriteText+0x180>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 8002852:	2002      	movs	r0, #2
 8002854:	f004 fef8 	bl	8007648 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 8002858:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800285c:	461a      	mov	r2, r3
 800285e:	0052      	lsls	r2, r2, #1
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	b2d9      	uxtb	r1, r3
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	1dfa      	adds	r2, r7, #7
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	440a      	add	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
	while (len) {
 8002870:	1d7b      	adds	r3, r7, #5
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af7e 	bne.w	8002776 <i2cSmartLCD_Gfx240x128_WriteText+0x7a>
	}
	return 0U;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	200064ec 	.word	0x200064ec

0800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= fromPos_x) {
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2bef      	cmp	r3, #239	; 0xef
 80028a0:	d903      	bls.n	80028aa <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x1e>
			Error_Handler();
 80028a2:	f002 ff43 	bl	800572c <Error_Handler>
			return 2U;
 80028a6:	2302      	movs	r3, #2
 80028a8:	e017      	b.n	80028da <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= fromPos_y) {
 80028aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da03      	bge.n	80028ba <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
			Error_Handler();
 80028b2:	f002 ff3b 	bl	800572c <Error_Handler>
			return 3U;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e00f      	b.n	80028da <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80028ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028be:	f7ff fe0d 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 80028c2:	79ba      	ldrb	r2, [r7, #6]
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	4619      	mov	r1, r3
 80028c8:	2020      	movs	r0, #32
 80028ca:	f7ff fe93 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4c>
		return 1U;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
	}
	return 0U;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	460b      	mov	r3, r1
 80028ee:	71bb      	strb	r3, [r7, #6]
 80028f0:	4613      	mov	r3, r2
 80028f2:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= toPos_x) {
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2bef      	cmp	r3, #239	; 0xef
 80028f8:	d903      	bls.n	8002902 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x20>
			Error_Handler();
 80028fa:	f002 ff17 	bl	800572c <Error_Handler>
			return 2U;
 80028fe:	2302      	movs	r3, #2
 8002900:	e017      	b.n	8002932 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= toPos_y) {
 8002902:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	da03      	bge.n	8002912 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
			Error_Handler();
 800290a:	f002 ff0f 	bl	800572c <Error_Handler>
			return 3U;
 800290e:	2303      	movs	r3, #3
 8002910:	e00f      	b.n	8002932 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002916:	f7ff fde1 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 800291a:	797b      	ldrb	r3, [r7, #5]
 800291c:	79ba      	ldrb	r2, [r7, #6]
 800291e:	79f9      	ldrb	r1, [r7, #7]
 8002920:	2032      	movs	r0, #50	; 0x32
 8002922:	f7ff fe9f 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x4e>
		return 1U;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
	}
	return 0U;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <i2cSmartLCD_Gfx240x128_Draw_Point>:

#if defined(PLL_BY_SOFTWARE)
static uint8_t i2cSmartLCD_Gfx240x128_Draw_Point(uint8_t pos_x, uint8_t pos_y, uint8_t fillType)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	460b      	mov	r3, r1
 8002946:	71bb      	strb	r3, [r7, #6]
 8002948:	4613      	mov	r3, r2
 800294a:	717b      	strb	r3, [r7, #5]
	uint8_t ret;

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2bef      	cmp	r3, #239	; 0xef
 8002950:	d903      	bls.n	800295a <i2cSmartLCD_Gfx240x128_Draw_Point+0x20>
			Error_Handler();
 8002952:	f002 feeb 	bl	800572c <Error_Handler>
			return 2U;
 8002956:	2302      	movs	r3, #2
 8002958:	e01b      	b.n	8002992 <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 800295a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	da03      	bge.n	800296a <i2cSmartLCD_Gfx240x128_Draw_Point+0x30>
			Error_Handler();
 8002962:	f002 fee3 	bl	800572c <Error_Handler>
			return 3U;
 8002966:	2303      	movs	r3, #3
 8002968:	e013      	b.n	8002992 <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}
	}

	/* There is no explicit draw pixel in Smart-LCD */
	ret  = i2cSmartLCD_Gfx240x128_Draw_SetStartPos(pos_x, pos_y);
 800296a:	79ba      	ldrb	r2, [r7, #6]
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff8b 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]
	ret |= i2cSmartLCD_Gfx240x128_Draw_Line_to(pos_x, pos_y, fillType);
 800297a:	797a      	ldrb	r2, [r7, #5]
 800297c:	79b9      	ldrb	r1, [r7, #6]
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffae 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	4313      	orrs	r3, r2
 800298e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <i2cSmartLCD_Gfx240x128_Draw_Rect>:
#endif

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t lineType)
{
 800299a:	b590      	push	{r4, r7, lr}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4604      	mov	r4, r0
 80029a2:	4608      	mov	r0, r1
 80029a4:	4611      	mov	r1, r2
 80029a6:	461a      	mov	r2, r3
 80029a8:	4623      	mov	r3, r4
 80029aa:	71fb      	strb	r3, [r7, #7]
 80029ac:	4603      	mov	r3, r0
 80029ae:	71bb      	strb	r3, [r7, #6]
 80029b0:	460b      	mov	r3, r1
 80029b2:	717b      	strb	r3, [r7, #5]
 80029b4:	4613      	mov	r3, r2
 80029b6:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	2bef      	cmp	r3, #239	; 0xef
 80029bc:	d903      	bls.n	80029c6 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x2c>
			Error_Handler();
 80029be:	f002 feb5 	bl	800572c <Error_Handler>
			return 2U;
 80029c2:	2302      	movs	r3, #2
 80029c4:	e03a      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 80029c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da03      	bge.n	80029d6 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x3c>
			Error_Handler();
 80029ce:	f002 fead 	bl	800572c <Error_Handler>
			return 3U;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e032      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 80029d6:	79fa      	ldrb	r2, [r7, #7]
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	4413      	add	r3, r2
 80029dc:	3b01      	subs	r3, #1
 80029de:	2bef      	cmp	r3, #239	; 0xef
 80029e0:	d903      	bls.n	80029ea <i2cSmartLCD_Gfx240x128_Draw_Rect+0x50>
			Error_Handler();
 80029e2:	f002 fea3 	bl	800572c <Error_Handler>
			return 4U;
 80029e6:	2304      	movs	r3, #4
 80029e8:	e028      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 80029ea:	79ba      	ldrb	r2, [r7, #6]
 80029ec:	793b      	ldrb	r3, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3b01      	subs	r3, #1
 80029f2:	2b7f      	cmp	r3, #127	; 0x7f
 80029f4:	d903      	bls.n	80029fe <i2cSmartLCD_Gfx240x128_Draw_Rect+0x64>
			Error_Handler();
 80029f6:	f002 fe99 	bl	800572c <Error_Handler>
			return 5U;
 80029fa:	2305      	movs	r3, #5
 80029fc:	e01e      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80029fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a02:	f7ff fd6b 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002a06:	79ba      	ldrb	r2, [r7, #6]
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	2020      	movs	r0, #32
 8002a0e:	f7ff fdf1 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <i2cSmartLCD_Gfx240x128_Draw_Rect+0x82>
		return 1U;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e00f      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a20:	f7ff fd5c 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT, width, height, lineType)) {
 8002a24:	7e3b      	ldrb	r3, [r7, #24]
 8002a26:	793a      	ldrb	r2, [r7, #4]
 8002a28:	7979      	ldrb	r1, [r7, #5]
 8002a2a:	2034      	movs	r0, #52	; 0x34
 8002a2c:	f7ff fe1a 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa0>
		return 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}
	return 0U;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}

08002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	71fb      	strb	r3, [r7, #7]
 8002a56:	4603      	mov	r3, r0
 8002a58:	71bb      	strb	r3, [r7, #6]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	717b      	strb	r3, [r7, #5]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	2bef      	cmp	r3, #239	; 0xef
 8002a66:	d903      	bls.n	8002a70 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x2c>
			Error_Handler();
 8002a68:	f002 fe60 	bl	800572c <Error_Handler>
			return 2U;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e03a      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 8002a70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da03      	bge.n	8002a80 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
			Error_Handler();
 8002a78:	f002 fe58 	bl	800572c <Error_Handler>
			return 3U;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e032      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	4413      	add	r3, r2
 8002a86:	3b01      	subs	r3, #1
 8002a88:	2bef      	cmp	r3, #239	; 0xef
 8002a8a:	d903      	bls.n	8002a94 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x50>
			Error_Handler();
 8002a8c:	f002 fe4e 	bl	800572c <Error_Handler>
			return 4U;
 8002a90:	2304      	movs	r3, #4
 8002a92:	e028      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 8002a94:	79ba      	ldrb	r2, [r7, #6]
 8002a96:	793b      	ldrb	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a9e:	d903      	bls.n	8002aa8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x64>
			Error_Handler();
 8002aa0:	f002 fe44 	bl	800572c <Error_Handler>
			return 5U;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	e01e      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aac:	f7ff fd16 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002ab0:	79ba      	ldrb	r2, [r7, #6]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	2020      	movs	r0, #32
 8002ab8:	f7ff fd9c 	bl	80025f4 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x82>
		return 1U;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aca:	f7ff fd07 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 8002ace:	7e3b      	ldrb	r3, [r7, #24]
 8002ad0:	793a      	ldrb	r2, [r7, #4]
 8002ad2:	7979      	ldrb	r1, [r7, #5]
 8002ad4:	2036      	movs	r0, #54	; 0x36
 8002ad6:	f7ff fdc5 	bl	8002664 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa0>
		return 1U;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}
	return 0U;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}

08002aee <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 8002af4:	f7ff fdf6 	bl	80026e4 <i2cSmartLCD_Gfx240x128_GetVer>
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d925      	bls.n	8002b4e <i2cSmartLCD_Gfx240x128_Init+0x60>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b06:	f7ff fce9 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f7ff fd3d 	bl	800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b16:	f7ff fce1 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 8002b1a:	2011      	movs	r0, #17
 8002b1c:	f7ff fd06 	bl	800252c <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2U;
 8002b26:	2302      	movs	r3, #2
 8002b28:	e012      	b.n	8002b50 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b2e:	f7ff fcd5 	bl	80024dc <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 8002b32:	2101      	movs	r1, #1
 8002b34:	2014      	movs	r0, #20
 8002b36:	f7ff fd29 	bl	800258c <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1U;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e005      	b.n	8002b50 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		HAL_Delay(10UL);
 8002b44:	200a      	movs	r0, #10
 8002b46:	f004 fd7f 	bl	8007648 <HAL_Delay>
		return 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <i2cSmartLCD_Gfx240x128_Init+0x62>
	}
	return 1U;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(uint32_t bf)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* Display init */
	if (bf & 0x80000000UL) {
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da06      	bge.n	8002b74 <i2cSmartLCD_Gfx240x128_Template+0x1c>
		if (i2cSmartLCD_Gfx240x128_Init()) {
 8002b66:	f7ff ffc2 	bl	8002aee <i2cSmartLCD_Gfx240x128_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <i2cSmartLCD_Gfx240x128_Template+0x1c>
			return 1U;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0f8      	b.n	8002d66 <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}

	/* Header Line */
	if (bf & 0x00000001UL) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <i2cSmartLCD_Gfx240x128_Template+0x38>
		i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002b7e:	2108      	movs	r1, #8
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fe83 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
				0U,
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U));

		i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002b86:	2201      	movs	r2, #1
 8002b88:	2108      	movs	r1, #8
 8002b8a:	20ef      	movs	r0, #239	; 0xef
 8002b8c:	f7ff fea9 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U),
				LCD1_PIXEL_SET);
	}

	/* Header Text */
	if (bf & 0x00000002UL) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d011      	beq.n	8002bbe <i2cSmartLCD_Gfx240x128_Template+0x66>
		i2cSmartLCD_Gfx240x128_WriteText(
 8002b9a:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <i2cSmartLCD_Gfx240x128_Template+0x218>)
 8002b9c:	220d      	movs	r2, #13
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	201e      	movs	r0, #30
 8002ba2:	f7ff fdab 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L0_P1_str), I2c_Lcd_Welcome_L0_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002ba6:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <i2cSmartLCD_Gfx240x128_Template+0x21c>)
 8002ba8:	2206      	movs	r2, #6
 8002baa:	2100      	movs	r1, #0
 8002bac:	2072      	movs	r0, #114	; 0x72
 8002bae:	f7ff fda5 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  * 19U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L1_P1_str), I2c_Lcd_Welcome_L1_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <i2cSmartLCD_Gfx240x128_Template+0x220>)
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	20a2      	movs	r0, #162	; 0xa2
 8002bba:	f7ff fd9f 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd_Welcome_L1_P2_str), I2c_Lcd_Welcome_L1_P2_str);
	}


	/* LCKD print */
	if (bf & 0x00000010UL) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d019      	beq.n	8002bfc <i2cSmartLCD_Gfx240x128_Template+0xa4>
		uint8_t line_str[] = "LCKD";
 8002bc8:	4a6c      	ldr	r2, [pc, #432]	; (8002d7c <i2cSmartLCD_Gfx240x128_Template+0x224>)
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd2:	6018      	str	r0, [r3, #0]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	7019      	strb	r1, [r3, #0]
		if (i2cSmartLCD_Gfx240x128_WriteText(
				0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  0U),
				0U + ((LCD1_SYSFONT_HEIGHT + 0U) *  0U),
				strlen((char*)line_str), line_str)) {
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fb01 	bl	80001e4 <strlen>
 8002be2:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	2100      	movs	r1, #0
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fd85 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <i2cSmartLCD_Gfx240x128_Template+0xa4>
			return 1U;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b4      	b.n	8002d66 <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}


	/* Timing scale below the header line */
	if (bf & 0x00000100UL) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80ae 	beq.w	8002d64 <i2cSmartLCD_Gfx240x128_Template+0x20c>
		uint8_t pos_x 		= DacGfxPos_x_min;
 8002c08:	2309      	movs	r3, #9
 8002c0a:	75fb      	strb	r3, [r7, #23]
		uint8_t mrk10Min	= 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	75bb      	strb	r3, [r7, #22]
		uint8_t mrk5Dac		= 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	757b      	strb	r3, [r7, #21]

		/* Draw plot line x-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c14:	2309      	movs	r3, #9
 8002c16:	222b      	movs	r2, #43	; 0x2b
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe36 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002c20:	23e6      	movs	r3, #230	; 0xe6
 8002c22:	212b      	movs	r1, #43	; 0x2b
 8002c24:	2201      	movs	r2, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fe5b 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_bot,
					LCD1_PIXEL_SET);
		}

		/* Draw x-axis scale lines */
		while (pos_x <= DacGfxPos_x_max) {
 8002c2c:	e02f      	b.n	8002c8e <i2cSmartLCD_Gfx240x128_Template+0x136>
			uint8_t drawHrExtra = (!(mrk10Min % 6)) ?  2U : 0U;
 8002c2e:	7dba      	ldrb	r2, [r7, #22]
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <i2cSmartLCD_Gfx240x128_Template+0x228>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	0899      	lsrs	r1, r3, #2
 8002c38:	460b      	mov	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	440b      	add	r3, r1
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <i2cSmartLCD_Gfx240x128_Template+0xf4>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e000      	b.n	8002c4e <i2cSmartLCD_Gfx240x128_Template+0xf6>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74fb      	strb	r3, [r7, #19]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					pos_x,
					(DacGfxPos_y_bot + (1U + drawHrExtra)));
 8002c50:	222b      	movs	r2, #43	; 0x2b
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	4413      	add	r3, r2
 8002c56:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe13 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002c66:	232b      	movs	r3, #43	; 0x2b
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2d9      	uxtb	r1, r3
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe36 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					pos_x,
					(DacGfxPos_y_bot + 1U),
					LCD1_PIXEL_SET);

			/* New scale mark at every 10 minutes */
			++mrk10Min;
 8002c76:	7dbb      	ldrb	r3, [r7, #22]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	75bb      	strb	r3, [r7, #22]
			pos_x = DacGfxPos_x_min + (10U * mrk10Min);
 8002c7c:	7dbb      	ldrb	r3, [r7, #22]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2209      	movs	r2, #9
 8002c8a:	4413      	add	r3, r2
 8002c8c:	75fb      	strb	r3, [r7, #23]
		while (pos_x <= DacGfxPos_x_max) {
 8002c8e:	22e6      	movs	r2, #230	; 0xe6
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d9cb      	bls.n	8002c2e <i2cSmartLCD_Gfx240x128_Template+0xd6>
		}

		/* Draw plot line y-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c96:	2309      	movs	r3, #9
 8002c98:	222b      	movs	r2, #43	; 0x2b
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fdf5 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	210d      	movs	r1, #13
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe1a 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_top,
					LCD1_PIXEL_SET);
		}

		/* Draw y-axis scale lines */
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002cae:	e02a      	b.n	8002d06 <i2cSmartLCD_Gfx240x128_Template+0x1ae>
			uint8_t drawExtra = (mrk5Dac == 3U) ?  2U : 0U;
 8002cb0:	7d7b      	ldrb	r3, [r7, #21]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d101      	bne.n	8002cba <i2cSmartLCD_Gfx240x128_Template+0x162>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e000      	b.n	8002cbc <i2cSmartLCD_Gfx240x128_Template+0x164>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	753b      	strb	r3, [r7, #20]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					(DacGfxPos_x_min - (1 + drawExtra)),
 8002cbe:	2209      	movs	r2, #9
 8002cc0:	7d3b      	ldrb	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	212b      	movs	r1, #43	; 0x2b
					(DacGfxPos_y_bot - (mrk5Dac * 5U)));
 8002ccc:	7d7b      	ldrb	r3, [r7, #21]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	0080      	lsls	r0, r0, #2
 8002cd2:	4403      	add	r3, r0
 8002cd4:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cd6:	1acb      	subs	r3, r1, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7ff fdd5 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002ce2:	2309      	movs	r3, #9
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	222b      	movs	r2, #43	; 0x2b
					(DacGfxPos_x_min - 1U),
					(DacGfxPos_y_bot - (mrk5Dac * 5U)),
 8002cea:	7d7b      	ldrb	r3, [r7, #21]
 8002cec:	4619      	mov	r1, r3
 8002cee:	0089      	lsls	r1, r1, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7ff fdf1 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					LCD1_PIXEL_SET);

			++mrk5Dac;
 8002d00:	7d7b      	ldrb	r3, [r7, #21]
 8002d02:	3301      	adds	r3, #1
 8002d04:	757b      	strb	r3, [r7, #21]
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002d06:	232b      	movs	r3, #43	; 0x2b
 8002d08:	4619      	mov	r1, r3
 8002d0a:	7d7a      	ldrb	r2, [r7, #21]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	1acb      	subs	r3, r1, r3
 8002d14:	220d      	movs	r2, #13
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d2ca      	bcs.n	8002cb0 <i2cSmartLCD_Gfx240x128_Template+0x158>
		}

		/* Write 'DAC' at y-axis */
		{
			uint8_t buf[] = "DAC";
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <i2cSmartLCD_Gfx240x128_Template+0x22c>)
 8002d1c:	60bb      	str	r3, [r7, #8]

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d1e:	2309      	movs	r3, #9
 8002d20:	3b09      	subs	r3, #9
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	232b      	movs	r3, #43	; 0x2b
 8002d26:	3b1c      	subs	r3, #28
 8002d28:	b2d9      	uxtb	r1, r3
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f7ff fce4 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (3U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[0]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d34:	2309      	movs	r3, #9
 8002d36:	3b09      	subs	r3, #9
 8002d38:	b2d8      	uxtb	r0, r3
 8002d3a:	232b      	movs	r3, #43	; 0x2b
 8002d3c:	3b13      	subs	r3, #19
 8002d3e:	b2d9      	uxtb	r1, r3
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	3301      	adds	r3, #1
 8002d46:	2201      	movs	r2, #1
 8002d48:	f7ff fcd8 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (2U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[1]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002d4c:	2309      	movs	r3, #9
 8002d4e:	3b09      	subs	r3, #9
 8002d50:	b2d8      	uxtb	r0, r3
 8002d52:	232b      	movs	r3, #43	; 0x2b
 8002d54:	3b0a      	subs	r3, #10
 8002d56:	b2d9      	uxtb	r1, r3
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f7ff fccc 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (1U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[2]));
		}
	}
	return 0U;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	08013414 	.word	0x08013414
 8002d74:	08013424 	.word	0x08013424
 8002d78:	0801342c 	.word	0x0801342c
 8002d7c:	08012f80 	.word	0x08012f80
 8002d80:	aaaaaaab 	.word	0xaaaaaaab
 8002d84:	00434144 	.word	0x00434144

08002d88 <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template(0x80000003UL)) {
 8002d8c:	4814      	ldr	r0, [pc, #80]	; (8002de0 <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002d8e:	f7ff fee3 	bl	8002b58 <i2cSmartLCD_Gfx240x128_Template>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <i2cSmartLCD_Gfx240x128_Welcome+0x14>
		return 1U;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e01e      	b.n	8002dda <i2cSmartLCD_Gfx240x128_Welcome+0x52>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 8002d9e:	2209      	movs	r2, #9
 8002da0:	2114      	movs	r1, #20
 8002da2:	2006      	movs	r0, #6
 8002da4:	f7ff fcaa 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  2U)),
				strlen((char*)I2c_Lcd_Welcome_L2_str), I2c_Lcd_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 8002daa:	2210      	movs	r2, #16
 8002dac:	211e      	movs	r1, #30
 8002dae:	2006      	movs	r0, #6
 8002db0:	f7ff fca4 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)),
				strlen((char*)I2c_Lcd_Welcome_L3_str), I2c_Lcd_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	2128      	movs	r1, #40	; 0x28
 8002dba:	2006      	movs	r0, #6
 8002dbc:	f7ff fc9e 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  4U)),
				strlen((char*)I2c_Lcd_Welcome_L4_str), I2c_Lcd_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <i2cSmartLCD_Gfx240x128_Welcome+0x68>)
 8002dc2:	2218      	movs	r2, #24
 8002dc4:	2132      	movs	r1, #50	; 0x32
 8002dc6:	2006      	movs	r0, #6
 8002dc8:	f7ff fc98 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  5U)),
				strlen((char*)I2c_Lcd_Welcome_L5_str), I2c_Lcd_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <i2cSmartLCD_Gfx240x128_Welcome+0x6c>)
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	213c      	movs	r1, #60	; 0x3c
 8002dd2:	2006      	movs	r0, #6
 8002dd4:	f7ff fc92 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  6U)),
				strlen((char*)I2c_Lcd_Welcome_L6_str), I2c_Lcd_Welcome_L6_str);
	}
	return 0U;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	80000003 	.word	0x80000003
 8002de4:	08013434 	.word	0x08013434
 8002de8:	08013440 	.word	0x08013440
 8002dec:	08013454 	.word	0x08013454
 8002df0:	0801347c 	.word	0x0801347c
 8002df4:	08013498 	.word	0x08013498

08002df8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Draw_Rect(
 8002e04:	2301      	movs	r3, #1
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2328      	movs	r3, #40	; 0x28
 8002e0a:	226e      	movs	r2, #110	; 0x6e
 8002e0c:	214c      	movs	r1, #76	; 0x4c
 8002e0e:	203e      	movs	r0, #62	; 0x3e
 8002e10:	f7ff fdc3 	bl	800299a <i2cSmartLCD_Gfx240x128_Draw_Rect>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x26>
				(      ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)  - 4U),
				(      ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)  - 4U),
				( 8U + ((LCD1_SYSFONT_WIDTH  + 0U) * 17U)      ),
				(10U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)      ),
				LCD1_PIXEL_SET)) {
			return 1U;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e05e      	b.n	8002edc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}
		HAL_Delay(1UL);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f004 fc12 	bl	8007648 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xec>)
 8002e26:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)),
				strlen((char*)line0_str), line0_str)) {
 8002e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd f9d3 	bl	80001e4 <strlen>
 8002e3e:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e46:	2150      	movs	r1, #80	; 0x50
 8002e48:	2042      	movs	r0, #66	; 0x42
 8002e4a:	f7ff fc57 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x60>
			return 1U;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e041      	b.n	8002edc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}

		if (temp) {
 8002e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7eU);
 8002e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e64:	f107 000c 	add.w	r0, r7, #12
 8002e68:	227e      	movs	r2, #126	; 0x7e
 8002e6a:	9200      	str	r2, [sp, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf0>)
 8002e6e:	211f      	movs	r1, #31
 8002e70:	f00c fd7a 	bl	800f968 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) *  9U)),
					strlen((char*)line1_str), line1_str)) {
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd f9b3 	bl	80001e4 <strlen>
 8002e7e:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	215c      	movs	r1, #92	; 0x5c
 8002e88:	2042      	movs	r0, #66	; 0x42
 8002e8a:	f7ff fc37 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
				return 1U;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e021      	b.n	8002edc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}

		if (tAcc) {
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01d      	beq.n	8002eda <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999U ?  999U : tAcc));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf28      	it	cs
 8002ea8:	4613      	movcs	r3, r2
 8002eaa:	f107 000c 	add.w	r0, r7, #12
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>)
 8002eb0:	211f      	movs	r1, #31
 8002eb2:	f00c fd59 	bl	800f968 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) * 10U)),
					strlen((char*)line2_str), line2_str)) {
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd f992 	bl	80001e4 <strlen>
 8002ec0:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	2166      	movs	r1, #102	; 0x66
 8002eca:	2042      	movs	r0, #66	; 0x42
 8002ecc:	f7ff fc16 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
				return 1U;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}
	}
	return 0U;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3740      	adds	r7, #64	; 0x40
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee4:	08012f30 	.word	0x08012f30
 8002ee8:	08012f88 	.word	0x08012f88
 8002eec:	08012f9c 	.word	0x08012f9c

08002ef0 <i2cSmartLCD_Gfx240x128_locator_print>:


static uint8_t i2cSmartLCD_Gfx240x128_locator_print(const uint8_t* locatorStr)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	uint8_t line_str[16];

	snprintf((char*)line_str, sizeof(line_str) - 1, "%6s", locatorStr);
 8002ef8:	f107 0008 	add.w	r0, r7, #8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <i2cSmartLCD_Gfx240x128_locator_print+0x44>)
 8002f00:	210f      	movs	r1, #15
 8002f02:	f00c fd31 	bl	800f968 <sniprintf>

	if (i2cSmartLCD_Gfx240x128_WriteText(
			(((LCD1_SYSFONT_WIDTH  + 0U) * 34U) - 1U),
			(((LCD1_SYSFONT_HEIGHT + 0U) *  0U) - 0U),
			strlen((char*)line_str), line_str)) {
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f96a 	bl	80001e4 <strlen>
 8002f10:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	2100      	movs	r1, #0
 8002f1a:	20cb      	movs	r0, #203	; 0xcb
 8002f1c:	f7ff fbee 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <i2cSmartLCD_Gfx240x128_locator_print+0x3a>
		return 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <i2cSmartLCD_Gfx240x128_locator_print+0x3c>
	}
	return 0U;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	08012fb0 	.word	0x08012fb0

08002f38 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo, const uint8_t* locatorStr)
{
 8002f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f3c:	b09e      	sub	sp, #120	; 0x78
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	61f8      	str	r0, [r7, #28]
 8002f42:	617a      	str	r2, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	837b      	strh	r3, [r7, #26]
	static uint16_t s_svPosElevAzim_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Each time drop a channel two force a redraw */
	static uint8_t	s_svPosElevRefresh_last					= 	0U;
	s_svId_last[s_svPosElevRefresh_last++] = 0xffU;
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	b2d1      	uxtb	r1, r2
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f5c:	7011      	strb	r1, [r2, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 8002f62:	21ff      	movs	r1, #255	; 0xff
 8002f64:	5499      	strb	r1, [r3, r2]
	s_svPosElevRefresh_last %= SvPosElevCnt_max;
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <i2cSmartLCD_Gfx240x128_Locked+0xb4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	08d9      	lsrs	r1, r3, #3
 8002f72:	460b      	mov	r3, r1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a5b      	subs	r3, r3, r1
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002f7e:	701a      	strb	r2, [r3, #0]


	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8002f80:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d902      	bls.n	8002f8e <i2cSmartLCD_Gfx240x128_Locked+0x56>
		svPosElevCnt = SvPosElevCnt_max;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	}

	/* Timeout check */
	now = HAL_GetTick();
 8002f8e:	f004 fb4f 	bl	8007630 <HAL_GetTick>
 8002f92:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8002f94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f080 85e3 	bcs.w	8003b64 <i2cSmartLCD_Gfx240x128_Locked+0xc2c>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d248      	bcs.n	800303c <i2cSmartLCD_Gfx240x128_Locked+0x104>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8002faa:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fae:	461a      	mov	r2, r3
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2341      	movs	r3, #65	; 0x41
 8002fd4:	213e      	movs	r1, #62	; 0x3e
 8002fd6:	f7ff fd35 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8002fda:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002fe2:	e021      	b.n	8003028 <i2cSmartLCD_Gfx240x128_Locked+0xf0>
 8002fe4:	20000260 	.word	0x20000260
 8002fe8:	20000264 	.word	0x20000264
 8002fec:	88888889 	.word	0x88888889
 8002ff0:	20000273 	.word	0x20000273
			s_svId_last[thisIdx]			= 	0U;
 8002ff4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ff8:	4ac7      	ldr	r2, [pc, #796]	; (8003318 <i2cSmartLCD_Gfx240x128_Locked+0x3e0>)
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[thisIdx]	=	0U;
 8002ffe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003002:	4ac6      	ldr	r2, [pc, #792]	; (800331c <i2cSmartLCD_Gfx240x128_Locked+0x3e4>)
 8003004:	2100      	movs	r1, #0
 8003006:	54d1      	strb	r1, [r2, r3]
			s_svPosElevElev_last[thisIdx]	= 	0U;
 8003008:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800300c:	4ac4      	ldr	r2, [pc, #784]	; (8003320 <i2cSmartLCD_Gfx240x128_Locked+0x3e8>)
 800300e:	2100      	movs	r1, #0
 8003010:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[thisIdx]	= 	0U;
 8003012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003016:	4ac3      	ldr	r2, [pc, #780]	; (8003324 <i2cSmartLCD_Gfx240x128_Locked+0x3ec>)
 8003018:	2100      	movs	r1, #0
 800301a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 800301e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003022:	3301      	adds	r3, #1
 8003024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003028:	4bbf      	ldr	r3, [pc, #764]	; (8003328 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003030:	429a      	cmp	r2, r3
 8003032:	d3df      	bcc.n	8002ff4 <i2cSmartLCD_Gfx240x128_Locked+0xbc>
		}

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 8003034:	4abc      	ldr	r2, [pc, #752]	; (8003328 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 8003036:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800303a:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 800303c:	f004 faf8 	bl	8007630 <HAL_GetTick>
 8003040:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8003042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	f080 858e 	bcs.w	8003b68 <i2cSmartLCD_Gfx240x128_Locked+0xc30>
		return;
	}

	/* Print Locator */
	if (strcmp((char*)s_locatorStrLast, (char*)locatorStr)) {
 800304c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003050:	48b6      	ldr	r0, [pc, #728]	; (800332c <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 8003052:	f7fd f8bd 	bl	80001d0 <strcmp>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <i2cSmartLCD_Gfx240x128_Locked+0x138>
		i2cSmartLCD_Gfx240x128_locator_print(locatorStr);
 800305c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003060:	f7ff ff46 	bl	8002ef0 <i2cSmartLCD_Gfx240x128_locator_print>

		/* Write back changed string */
		strncpy((char*)s_locatorStrLast, (char*)locatorStr, sizeof(s_locatorStrLast) - 1);
 8003064:	220f      	movs	r2, #15
 8003066:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800306a:	48b0      	ldr	r0, [pc, #704]	; (800332c <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 800306c:	f00c fcb0 	bl	800f9d0 <strncpy>
	}

	/* Timeout check */
	now = HAL_GetTick();
 8003070:	f004 fade 	bl	8007630 <HAL_GetTick>
 8003074:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8003076:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	f080 8576 	bcs.w	8003b6c <i2cSmartLCD_Gfx240x128_Locked+0xc34>
		return;
	}

#if defined(PLL_BY_SOFTWARE)
	/* Plot DAC graph element */
	if (now >= s_dacPlotNxtTim)
 8003080:	4bab      	ldr	r3, [pc, #684]	; (8003330 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003086:	429a      	cmp	r2, r3
 8003088:	f0c0 8095 	bcc.w	80031b6 <i2cSmartLCD_Gfx240x128_Locked+0x27e>
	{
		/* Calculate for next minute */
		s_dacPlotNxtTim = (now + 60000UL) - ((now + 60000UL) % 60000UL);
 800308c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	4aa7      	ldr	r2, [pc, #668]	; (8003334 <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 8003096:	fba2 1203 	umull	r1, r2, r2, r3
 800309a:	0b92      	lsrs	r2, r2, #14
 800309c:	f64e 2160 	movw	r1, #60000	; 0xea60
 80030a0:	fb01 f202 	mul.w	r2, r1, r2
 80030a4:	1a9a      	subs	r2, r3, r2
 80030a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80030ae:	3360      	adds	r3, #96	; 0x60
 80030b0:	4a9f      	ldr	r2, [pc, #636]	; (8003330 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 80030b2:	6013      	str	r3, [r2, #0]

		/* Calculate x position*/
		s_dacPlotPosOfs++;
 80030b4:	4ba0      	ldr	r3, [pc, #640]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b9e      	ldr	r3, [pc, #632]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030be:	701a      	strb	r2, [r3, #0]
		if (s_dacPlotPosOfs > (DacGfxPos_x_max - DacGfxPos_x_min)) {
 80030c0:	4b9d      	ldr	r3, [pc, #628]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	23e6      	movs	r3, #230	; 0xe6
 80030c8:	4619      	mov	r1, r3
 80030ca:	2309      	movs	r3, #9
 80030cc:	1acb      	subs	r3, r1, r3
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dd02      	ble.n	80030d8 <i2cSmartLCD_Gfx240x128_Locked+0x1a0>
			s_dacPlotPosOfs = 1U;
 80030d2:	4b99      	ldr	r3, [pc, #612]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
		}

		/* Erase x-slot + 2 more columns right of it*/
		{
			i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80030d8:	2209      	movs	r2, #9
 80030da:	4b97      	ldr	r3, [pc, #604]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	b2d8      	uxtb	r0, r3
 80030e2:	210d      	movs	r1, #13
 80030e4:	222b      	movs	r2, #43	; 0x2b
 80030e6:	230d      	movs	r3, #13
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	9200      	str	r2, [sp, #0]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f7ff fca7 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
					LCD1_PIXEL_CLR);
		}

		/* Plot DAC value */
		{
			float 	ampt_y		= (DacGfxPos_y_bot - DacGfxPos_y_top) / 2.0f;
 80030f6:	232b      	movs	r3, #43	; 0x2b
 80030f8:	461a      	mov	r2, r3
 80030fa:	230d      	movs	r3, #13
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003106:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800310a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			uint8_t midPos_y 	= DacGfxPos_y_bot - ampt_y;
 8003112:	232b      	movs	r3, #43	; 0x2b
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003128:	edc7 7a01 	vstr	s15, [r7, #4]
 800312c:	793b      	ldrb	r3, [r7, #4]
 800312e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			int16_t dacValPlot	= (int16_t)dacVal - (int16_t)I2C_DAC_MCP4725_0_VAL;
 8003132:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003136:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800313a:	b29b      	uxth	r3, r3
 800313c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			/* Clipping */
			if (dacValPlot >  (int16_t)ampt_y) {
 8003140:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003148:	ee17 3a90 	vmov	r3, s15
 800314c:	b21b      	sxth	r3, r3
 800314e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8003152:	429a      	cmp	r2, r3
 8003154:	dd07      	ble.n	8003166 <i2cSmartLCD_Gfx240x128_Locked+0x22e>
				dacValPlot =  (int16_t)ampt_y;
 8003156:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800315a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315e:	ee17 3a90 	vmov	r3, s15
 8003162:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			if (dacValPlot < -(int16_t)ampt_y) {
 8003166:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800316a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800316e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003172:	ee17 3a90 	vmov	r3, s15
 8003176:	b21b      	sxth	r3, r3
 8003178:	425b      	negs	r3, r3
 800317a:	429a      	cmp	r2, r3
 800317c:	da0b      	bge.n	8003196 <i2cSmartLCD_Gfx240x128_Locked+0x25e>
				dacValPlot = -(int16_t)ampt_y;
 800317e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003186:	ee17 3a90 	vmov	r3, s15
 800318a:	b21b      	sxth	r3, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	425b      	negs	r3, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}

			i2cSmartLCD_Gfx240x128_Draw_Point(
 8003196:	2209      	movs	r2, #9
 8003198:	4b67      	ldr	r3, [pc, #412]	; (8003338 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7ff fbc2 	bl	800293a <i2cSmartLCD_Gfx240x128_Draw_Point>
		}
	}
#endif

	/* Timeout check */
	now = HAL_GetTick();
 80031b6:	f004 fa3b 	bl	8007630 <HAL_GetTick>
 80031ba:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 80031bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f080 84d5 	bcs.w	8003b70 <i2cSmartLCD_Gfx240x128_Locked+0xc38>
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
#endif
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 80031c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d024      	beq.n	8003218 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 80031d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d01d      	beq.n	8003218 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 80031dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031e0:	f107 0020 	add.w	r0, r7, #32
 80031e4:	227e      	movs	r2, #126	; 0x7e
 80031e6:	9200      	str	r2, [sp, #0]
 80031e8:	4a55      	ldr	r2, [pc, #340]	; (8003340 <i2cSmartLCD_Gfx240x128_Locked+0x408>)
 80031ea:	211f      	movs	r1, #31
 80031ec:	f00c fbbc 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  7) - 0U),
						strlen((char*)line1_str), line1_str)) {
 80031f0:	f107 0320 	add.w	r3, r7, #32
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fc fff5 	bl	80001e4 <strlen>
 80031fa:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	f107 0320 	add.w	r3, r7, #32
 8003202:	2146      	movs	r1, #70	; 0x46
 8003204:	20a1      	movs	r0, #161	; 0xa1
 8003206:	f7ff fa79 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 84b1 	bne.w	8003b74 <i2cSmartLCD_Gfx240x128_Locked+0xc3c>
					return;
				}
				s_tempLast = temp;
 8003212:	4a4a      	ldr	r2, [pc, #296]	; (800333c <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003218:	f004 fa0a 	bl	8007630 <HAL_GetTick>
 800321c:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800321e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	429a      	cmp	r2, r3
 8003224:	f080 84a8 	bcs.w	8003b78 <i2cSmartLCD_Gfx240x128_Locked+0xc40>
			return;
		}

		if (gDOP) {
 8003228:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d042      	beq.n	80032b6 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 8003230:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	eeb4 7a67 	vcmp.f32	s14, s15
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	d034      	beq.n	80032b6 <i2cSmartLCD_Gfx240x128_Locked+0x37e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 800324c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003250:	4a3d      	ldr	r2, [pc, #244]	; (8003348 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b29b      	uxth	r3, r3
 800325a:	461c      	mov	r4, r3
 800325c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003260:	4a39      	ldr	r2, [pc, #228]	; (8003348 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003262:	fba2 1203 	umull	r1, r2, r2, r3
 8003266:	0952      	lsrs	r2, r2, #5
 8003268:	2164      	movs	r1, #100	; 0x64
 800326a:	fb01 f202 	mul.w	r2, r1, r2
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	f107 0020 	add.w	r0, r7, #32
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4623      	mov	r3, r4
 800327a:	4a34      	ldr	r2, [pc, #208]	; (800334c <i2cSmartLCD_Gfx240x128_Locked+0x414>)
 800327c:	211f      	movs	r1, #31
 800327e:	f00c fb73 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  8) - 0U),
						strlen((char*)line2_str), line2_str)) {
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	4618      	mov	r0, r3
 8003288:	f7fc ffac 	bl	80001e4 <strlen>
 800328c:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800328e:	b2da      	uxtb	r2, r3
 8003290:	f107 0320 	add.w	r3, r7, #32
 8003294:	2150      	movs	r1, #80	; 0x50
 8003296:	20a1      	movs	r0, #161	; 0xa1
 8003298:	f7ff fa30 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 846c 	bne.w	8003b7c <i2cSmartLCD_Gfx240x128_Locked+0xc44>
					return;
				}
				s_gDOPLast = gDOP;
 80032a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 80032b2:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80032b6:	f004 f9bb 	bl	8007630 <HAL_GetTick>
 80032ba:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80032bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f080 845d 	bcs.w	8003b80 <i2cSmartLCD_Gfx240x128_Locked+0xc48>
			return;
		}

		if (tAcc) {
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d045      	beq.n	8003358 <i2cSmartLCD_Gfx240x128_Locked+0x420>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d040      	beq.n	8003358 <i2cSmartLCD_Gfx240x128_Locked+0x420>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf28      	it	cs
 80032e0:	4613      	movcs	r3, r2
 80032e2:	f107 0020 	add.w	r0, r7, #32
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <i2cSmartLCD_Gfx240x128_Locked+0x41c>)
 80032e8:	211f      	movs	r1, #31
 80032ea:	f00c fb3d 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  9) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80032ee:	f107 0320 	add.w	r3, r7, #32
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fc ff76 	bl	80001e4 <strlen>
 80032f8:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	f107 0320 	add.w	r3, r7, #32
 8003300:	215a      	movs	r1, #90	; 0x5a
 8003302:	20a1      	movs	r0, #161	; 0xa1
 8003304:	f7ff f9fa 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 843a 	bne.w	8003b84 <i2cSmartLCD_Gfx240x128_Locked+0xc4c>
					return;
				}
				s_tAccLast = tAcc;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e01f      	b.n	8003358 <i2cSmartLCD_Gfx240x128_Locked+0x420>
 8003318:	20000264 	.word	0x20000264
 800331c:	20000274 	.word	0x20000274
 8003320:	20000284 	.word	0x20000284
 8003324:	20000294 	.word	0x20000294
 8003328:	20000273 	.word	0x20000273
 800332c:	200002b4 	.word	0x200002b4
 8003330:	200002c4 	.word	0x200002c4
 8003334:	45e7b273 	.word	0x45e7b273
 8003338:	200002c8 	.word	0x200002c8
 800333c:	200002ca 	.word	0x200002ca
 8003340:	08012fb4 	.word	0x08012fb4
 8003344:	200002cc 	.word	0x200002cc
 8003348:	51eb851f 	.word	0x51eb851f
 800334c:	08012fc4 	.word	0x08012fc4
 8003350:	200002d0 	.word	0x200002d0
 8003354:	08012fd4 	.word	0x08012fd4
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003358:	f004 f96a 	bl	8007630 <HAL_GetTick>
 800335c:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800335e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	f080 8410 	bcs.w	8003b88 <i2cSmartLCD_Gfx240x128_Locked+0xc50>
			return;
		}

		if (devPsS) {
 8003368:	edd7 7a03 	vldr	s15, [r7, #12]
 800336c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d040      	beq.n	80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x4c0>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <i2cSmartLCD_Gfx240x128_Locked+0x624>)
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003380:	eeb4 7a67 	vcmp.f32	s14, s15
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d036      	beq.n	80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x4c0>
				uint8_t line2_str[32];

				/* Clamping */
				{
					if (devPsS >  99.9999f) {
 800338a:	edd7 7a03 	vldr	s15, [r7, #12]
 800338e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003560 <i2cSmartLCD_Gfx240x128_Locked+0x628>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	dd01      	ble.n	80033a0 <i2cSmartLCD_Gfx240x128_Locked+0x468>
						devPsS =  99.9999f;
 800339c:	4b71      	ldr	r3, [pc, #452]	; (8003564 <i2cSmartLCD_Gfx240x128_Locked+0x62c>)
 800339e:	60fb      	str	r3, [r7, #12]
					}
					if (devPsS < -99.9999f) {
 80033a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80033a4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003568 <i2cSmartLCD_Gfx240x128_Locked+0x630>
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d501      	bpl.n	80033b6 <i2cSmartLCD_Gfx240x128_Locked+0x47e>
						devPsS = -99.9999f;
 80033b2:	4b6e      	ldr	r3, [pc, #440]	; (800356c <i2cSmartLCD_Gfx240x128_Locked+0x634>)
 80033b4:	60fb      	str	r3, [r7, #12]
					}
				}

				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7fd f8d6 	bl	8000568 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	f107 0020 	add.w	r0, r7, #32
 80033c4:	e9cd 2300 	strd	r2, r3, [sp]
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <i2cSmartLCD_Gfx240x128_Locked+0x638>)
 80033ca:	211f      	movs	r1, #31
 80033cc:	f00c facc 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 10) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fc ff05 	bl	80001e4 <strlen>
 80033da:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	20a1      	movs	r0, #161	; 0xa1
 80033e6:	f7ff f989 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 83cd 	bne.w	8003b8c <i2cSmartLCD_Gfx240x128_Locked+0xc54>
					return;
				}
				s_devPsSLast = devPsS;
 80033f2:	4a5a      	ldr	r2, [pc, #360]	; (800355c <i2cSmartLCD_Gfx240x128_Locked+0x624>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6013      	str	r3, [r2, #0]
			}
		}

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 80033f8:	f004 f91a 	bl	8007630 <HAL_GetTick>
 80033fc:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80033fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	429a      	cmp	r2, r3
 8003404:	f080 83c4 	bcs.w	8003b90 <i2cSmartLCD_Gfx240x128_Locked+0xc58>
			return;
		}

		if (dacVal) {
 8003408:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800340c:	2b00      	cmp	r3, #0
 800340e:	d024      	beq.n	800345a <i2cSmartLCD_Gfx240x128_Locked+0x522>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <i2cSmartLCD_Gfx240x128_Locked+0x63c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800341a:	429a      	cmp	r2, r3
 800341c:	d01d      	beq.n	800345a <i2cSmartLCD_Gfx240x128_Locked+0x522>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 800341e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003422:	f107 0020 	add.w	r0, r7, #32
 8003426:	4a54      	ldr	r2, [pc, #336]	; (8003578 <i2cSmartLCD_Gfx240x128_Locked+0x640>)
 8003428:	211f      	movs	r1, #31
 800342a:	f00c fa9d 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 11) - 0U),
						strlen((char*)line2_str), line2_str)) {
 800342e:	f107 0320 	add.w	r3, r7, #32
 8003432:	4618      	mov	r0, r3
 8003434:	f7fc fed6 	bl	80001e4 <strlen>
 8003438:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800343a:	b2da      	uxtb	r2, r3
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	216e      	movs	r1, #110	; 0x6e
 8003442:	20a1      	movs	r0, #161	; 0xa1
 8003444:	f7ff f95a 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 83a2 	bne.w	8003b94 <i2cSmartLCD_Gfx240x128_Locked+0xc5c>
					return;
				}
				s_dacValLast = dacVal;
 8003450:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <i2cSmartLCD_Gfx240x128_Locked+0x63c>)
 8003458:	701a      	strb	r2, [r3, #0]
		}
#endif

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 800345a:	f004 f8e9 	bl	8007630 <HAL_GetTick>
 800345e:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003460:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	f080 8397 	bcs.w	8003b98 <i2cSmartLCD_Gfx240x128_Locked+0xc60>
			return;
		}

		if (dacFraction) {
 800346a:	edd7 7a02 	vldr	s15, [r7, #8]
 800346e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	d02a      	beq.n	80034ce <i2cSmartLCD_Gfx240x128_Locked+0x596>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8003478:	4b40      	ldr	r3, [pc, #256]	; (800357c <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003482:	eeb4 7a67 	vcmp.f32	s14, s15
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	d020      	beq.n	80034ce <i2cSmartLCD_Gfx240x128_Locked+0x596>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f7fd f86b 	bl	8000568 <__aeabi_f2d>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	f107 0020 	add.w	r0, r7, #32
 800349a:	e9cd 2300 	strd	r2, r3, [sp]
 800349e:	4a38      	ldr	r2, [pc, #224]	; (8003580 <i2cSmartLCD_Gfx240x128_Locked+0x648>)
 80034a0:	211f      	movs	r1, #31
 80034a2:	f00c fa61 	bl	800f968 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 12) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80034a6:	f107 0320 	add.w	r3, r7, #32
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc fe9a 	bl	80001e4 <strlen>
 80034b0:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	2178      	movs	r1, #120	; 0x78
 80034ba:	20a1      	movs	r0, #161	; 0xa1
 80034bc:	f7ff f91e 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 836a 	bne.w	8003b9c <i2cSmartLCD_Gfx240x128_Locked+0xc64>
					return;
				}
				s_dacFractionLast = dacFraction;
 80034c8:	4a2c      	ldr	r2, [pc, #176]	; (800357c <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6013      	str	r3, [r2, #0]
#endif
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80034d4:	e33e      	b.n	8003b54 <i2cSmartLCD_Gfx240x128_Locked+0xc1c>
		uint8_t svCh	= svElevSort[svChIdx];
 80034d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80034da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034de:	4413      	add	r3, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t svId 	= svInfo->svid[svCh];
 80034e6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80034ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80034ee:	4413      	add	r3, r2
 80034f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int8_t  svElev	= svInfo->elev[svCh];
 80034f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80034fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003500:	4413      	add	r3, r2
 8003502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003506:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		int16_t svAzim	= svInfo->azim[svCh];
 800350a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800350e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003512:	324c      	adds	r2, #76	; 0x4c
 8003514:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003518:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		int8_t  svCno	= svInfo->cno[svCh];
 800351c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003520:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003524:	4413      	add	r3, r2
 8003526:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800352a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

		/* Timeout check */
		now = HAL_GetTick();
 800352e:	f004 f87f 	bl	8007630 <HAL_GetTick>
 8003532:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003534:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	429a      	cmp	r2, r3
 800353a:	f080 8331 	bcs.w	8003ba0 <i2cSmartLCD_Gfx240x128_Locked+0xc68>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 800353e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003542:	2b28      	cmp	r3, #40	; 0x28
 8003544:	d902      	bls.n	800354c <i2cSmartLCD_Gfx240x128_Locked+0x614>
			svCno = SvCno_max;
 8003546:	2328      	movs	r3, #40	; 0x28
 8003548:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		}

		/* Limit the elevation data */
		if (svElev > 90) {
 800354c:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 8003550:	2b5a      	cmp	r3, #90	; 0x5a
 8003552:	dd17      	ble.n	8003584 <i2cSmartLCD_Gfx240x128_Locked+0x64c>
			svElev = 90;
 8003554:	235a      	movs	r3, #90	; 0x5a
 8003556:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800355a:	e01a      	b.n	8003592 <i2cSmartLCD_Gfx240x128_Locked+0x65a>
 800355c:	20000000 	.word	0x20000000
 8003560:	42c7fff3 	.word	0x42c7fff3
 8003564:	42c7fff3 	.word	0x42c7fff3
 8003568:	c2c7fff3 	.word	0xc2c7fff3
 800356c:	c2c7fff3 	.word	0xc2c7fff3
 8003570:	08012fe4 	.word	0x08012fe4
 8003574:	200002d4 	.word	0x200002d4
 8003578:	08012ff4 	.word	0x08012ff4
 800357c:	20000004 	.word	0x20000004
 8003580:	08013004 	.word	0x08013004
		}
		else if (svElev <  0) {
 8003584:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 8003588:	2b00      	cmp	r3, #0
 800358a:	da02      	bge.n	8003592 <i2cSmartLCD_Gfx240x128_Locked+0x65a>
			svElev =  0;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);	// [0 .. 24] <-- [0 .. 90]
 8003592:	f997 206a 	ldrsb.w	r2, [r7, #106]	; 0x6a
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	4add      	ldr	r2, [pc, #884]	; (8003918 <i2cSmartLCD_Gfx240x128_Locked+0x9e0>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 80035ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80035b0:	4ada      	ldr	r2, [pc, #872]	; (800391c <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3330      	adds	r3, #48	; 0x30
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 80035c2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80035c6:	4ad5      	ldr	r2, [pc, #852]	; (800391c <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 80035c8:	fba2 1203 	umull	r1, r2, r2, r3
 80035cc:	0952      	lsrs	r2, r2, #5
 80035ce:	2164      	movs	r1, #100	; 0x64
 80035d0:	fb01 f202 	mul.w	r2, r1, r2
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4ad1      	ldr	r2, [pc, #836]	; (8003920 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	3330      	adds	r3, #48	; 0x30
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 80035ea:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80035ee:	4bcc      	ldr	r3, [pc, #816]	; (8003920 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 80035f0:	fba3 1302 	umull	r1, r3, r3, r2
 80035f4:	08d9      	lsrs	r1, r3, #3
 80035f6:	460b      	mov	r3, r1
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3330      	adds	r3, #48	; 0x30
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 800360a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800360e:	4ac5      	ldr	r2, [pc, #788]	; (8003924 <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 8003610:	5cd3      	ldrb	r3, [r2, r3]
 8003612:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003616:	429a      	cmp	r2, r3
 8003618:	d11c      	bne.n	8003654 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 800361a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800361e:	4ac2      	ldr	r2, [pc, #776]	; (8003928 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	461a      	mov	r2, r3
 8003624:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 8003628:	429a      	cmp	r2, r3
 800362a:	d113      	bne.n	8003654 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 800362c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003630:	4abe      	ldr	r2, [pc, #760]	; (800392c <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 8003632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003636:	461a      	mov	r2, r3
 8003638:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 800363c:	429a      	cmp	r2, r3
 800363e:	d109      	bne.n	8003654 <i2cSmartLCD_Gfx240x128_Locked+0x71c>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 8003640:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003644:	4aba      	ldr	r2, [pc, #744]	; (8003930 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	461a      	mov	r2, r3
 800364a:	f997 3069 	ldrsb.w	r3, [r7, #105]	; 0x69
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 800364e:	429a      	cmp	r2, r3
 8003650:	f000 827b 	beq.w	8003b4a <i2cSmartLCD_Gfx240x128_Locked+0xc12>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 8003654:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003658:	49b2      	ldr	r1, [pc, #712]	; (8003924 <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 800365a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800365e:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 8003660:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003664:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 8003668:	4aaf      	ldr	r2, [pc, #700]	; (8003928 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 800366a:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[svChIdx]	= svAzim;
 800366c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003670:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8003674:	4aad      	ldr	r2, [pc, #692]	; (800392c <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 8003676:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 800367a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800367e:	f897 1069 	ldrb.w	r1, [r7, #105]	; 0x69
 8003682:	4aab      	ldr	r2, [pc, #684]	; (8003930 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 8003684:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 8003686:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800368a:	461a      	mov	r2, r3
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	4413      	add	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	3302      	adds	r3, #2
 8003696:	b2d8      	uxtb	r0, r3
 8003698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800369c:	2201      	movs	r2, #1
 800369e:	2178      	movs	r1, #120	; 0x78
 80036a0:	f7ff f82c 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 80036a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036a8:	461a      	mov	r2, r3
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3302      	adds	r3, #2
 80036b4:	b2d8      	uxtb	r0, r3
 80036b6:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80036ba:	2201      	movs	r2, #1
 80036bc:	2170      	movs	r1, #112	; 0x70
 80036be:	f7ff f81d 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 80036c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036c6:	461a      	mov	r2, r3
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3302      	adds	r3, #2
 80036d2:	b2d8      	uxtb	r0, r3
 80036d4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80036d8:	2201      	movs	r2, #1
 80036da:	2168      	movs	r1, #104	; 0x68
 80036dc:	f7ff f80e 	bl	80026fc <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80036e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036e4:	461a      	mov	r2, r3
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	b2d8      	uxtb	r0, r3
 80036ee:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80036f2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80036f6:	b2d9      	uxtb	r1, r3
 80036f8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2201      	movs	r2, #1
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	f7ff f99d 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	((LCD1_SMART_LCD_SIZE_Y - 1) 		- svElev),  											// [127 .. 103]
						1, 						(1 + svElev),																				// [1 .. 25]
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800370a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800370e:	461a      	mov	r2, r3
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	b2d8      	uxtb	r0, r3
 8003718:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800371c:	f1c3 0319 	rsb	r3, r3, #25
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2200      	movs	r2, #0
 8003724:	9200      	str	r2, [sp, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	2166      	movs	r1, #102	; 0x66
 800372a:	f7ff f98b 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800372e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003732:	461a      	mov	r2, r3
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	4413      	add	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003744:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8003748:	b2d9      	uxtb	r1, r3
 800374a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800374e:	3301      	adds	r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2201      	movs	r2, #1
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	2208      	movs	r2, #8
 8003758:	f7ff f974 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						8, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800375c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003760:	461a      	mov	r2, r3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4413      	add	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3301      	adds	r3, #1
 800376c:	b2d8      	uxtb	r0, r3
 800376e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003772:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2200      	movs	r2, #0
 800377a:	9200      	str	r2, [sp, #0]
 800377c:	2208      	movs	r2, #8
 800377e:	213c      	movs	r1, #60	; 0x3c
 8003780:	f7ff f960 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float 	ArrowSize = 4.49f;
 8003784:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <i2cSmartLCD_Gfx240x128_Locked+0x9fc>)
 8003786:	657b      	str	r3, [r7, #84]	; 0x54
				const float 	pntOrig_x = 4.5f + (svChIdx * 10U);
 8003788:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379c:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				const float 	pntOrig_y = 56.0f;
 80037a8:	4b63      	ldr	r3, [pc, #396]	; (8003938 <i2cSmartLCD_Gfx240x128_Locked+0xa00>)
 80037aa:	64fb      	str	r3, [r7, #76]	; 0x4c

				uint8_t pntWipeTL_x	= (uint8_t) (pntOrig_x - 4.5f);
 80037ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80037b0:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80037c0:	793b      	ldrb	r3, [r7, #4]
 80037c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				uint8_t pntWipeTL_y	= (uint8_t) (pntOrig_y - 4.5f);
 80037c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80037ca:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80037ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80037da:	793b      	ldrb	r3, [r7, #4]
 80037dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				uint8_t lenWipe_xy	= 10U;
 80037e0:	230a      	movs	r3, #10
 80037e2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

				uint8_t pntFront_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 80037e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037e8:	f7fc febe 	bl	8000568 <__aeabi_f2d>
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037f2:	f7fc feb9 	bl	8000568 <__aeabi_f2d>
 80037f6:	4680      	mov	r8, r0
 80037f8:	4689      	mov	r9, r1
 80037fa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fea0 	bl	8000544 <__aeabi_i2d>
 8003804:	a342      	add	r3, pc, #264	; (adr r3, 8003910 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc ff05 	bl	8000618 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 800381c:	f7fd f826 	bl	800086c <__aeabi_ddiv>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	ec43 2b17 	vmov	d7, r2, r3
 8003828:	eeb0 0a47 	vmov.f32	s0, s14
 800382c:	eef0 0a67 	vmov.f32	s1, s15
 8003830:	f00e fb2e 	bl	8011e90 <sin>
 8003834:	ec53 2b10 	vmov	r2, r3, d0
 8003838:	4640      	mov	r0, r8
 800383a:	4649      	mov	r1, r9
 800383c:	f7fc feec 	bl	8000618 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4620      	mov	r0, r4
 8003846:	4629      	mov	r1, r5
 8003848:	f7fc fd30 	bl	80002ac <__adddf3>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd f9b8 	bl	8000bc8 <__aeabi_d2uiz>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				uint8_t pntFront_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 800385e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003860:	f7fc fe82 	bl	8000568 <__aeabi_f2d>
 8003864:	4604      	mov	r4, r0
 8003866:	460d      	mov	r5, r1
 8003868:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800386a:	f7fc fe7d 	bl	8000568 <__aeabi_f2d>
 800386e:	4680      	mov	r8, r0
 8003870:	4689      	mov	r9, r1
 8003872:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fe64 	bl	8000544 <__aeabi_i2d>
 800387c:	a324      	add	r3, pc, #144	; (adr r3, 8003910 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc fec9 	bl	8000618 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 8003894:	f7fc ffea 	bl	800086c <__aeabi_ddiv>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	ec43 2b17 	vmov	d7, r2, r3
 80038a0:	eeb0 0a47 	vmov.f32	s0, s14
 80038a4:	eef0 0a67 	vmov.f32	s1, s15
 80038a8:	f00e faa2 	bl	8011df0 <cos>
 80038ac:	ec53 2b10 	vmov	r2, r3, d0
 80038b0:	4640      	mov	r0, r8
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fc feb0 	bl	8000618 <__aeabi_dmul>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4620      	mov	r0, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	f7fc fcf4 	bl	80002ac <__adddf3>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fd f97c 	bl	8000bc8 <__aeabi_d2uiz>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				uint8_t pntLeft_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim - 155)	/ 180.0f));
 80038d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038d8:	f7fc fe46 	bl	8000568 <__aeabi_f2d>
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038e2:	f7fc fe41 	bl	8000568 <__aeabi_f2d>
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80038ee:	3b9b      	subs	r3, #155	; 0x9b
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fe27 	bl	8000544 <__aeabi_i2d>
 80038f6:	a306      	add	r3, pc, #24	; (adr r3, 8003910 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc fe8c 	bl	8000618 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	e018      	b.n	8003940 <i2cSmartLCD_Gfx240x128_Locked+0xa08>
 800390e:	bf00      	nop
 8003910:	54442d18 	.word	0x54442d18
 8003914:	400921fb 	.word	0x400921fb
 8003918:	b60b60b7 	.word	0xb60b60b7
 800391c:	51eb851f 	.word	0x51eb851f
 8003920:	cccccccd 	.word	0xcccccccd
 8003924:	20000264 	.word	0x20000264
 8003928:	20000284 	.word	0x20000284
 800392c:	20000294 	.word	0x20000294
 8003930:	20000274 	.word	0x20000274
 8003934:	408fae14 	.word	0x408fae14
 8003938:	42600000 	.word	0x42600000
 800393c:	40668000 	.word	0x40668000
 8003940:	4b9d      	ldr	r3, [pc, #628]	; (8003bb8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003942:	f7fc ff93 	bl	800086c <__aeabi_ddiv>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	ec43 2b17 	vmov	d7, r2, r3
 800394e:	eeb0 0a47 	vmov.f32	s0, s14
 8003952:	eef0 0a67 	vmov.f32	s1, s15
 8003956:	f00e fa9b 	bl	8011e90 <sin>
 800395a:	ec53 2b10 	vmov	r2, r3, d0
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	f7fc fe59 	bl	8000618 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4620      	mov	r0, r4
 800396c:	4629      	mov	r1, r5
 800396e:	f7fc fc9d 	bl	80002ac <__adddf3>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f925 	bl	8000bc8 <__aeabi_d2uiz>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint8_t pntLeft_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim - 155)	/ 180.0f));
 8003984:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003986:	f7fc fdef 	bl	8000568 <__aeabi_f2d>
 800398a:	4604      	mov	r4, r0
 800398c:	460d      	mov	r5, r1
 800398e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003990:	f7fc fdea 	bl	8000568 <__aeabi_f2d>
 8003994:	4680      	mov	r8, r0
 8003996:	4689      	mov	r9, r1
 8003998:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800399c:	3b9b      	subs	r3, #155	; 0x9b
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fdd0 	bl	8000544 <__aeabi_i2d>
 80039a4:	a382      	add	r3, pc, #520	; (adr r3, 8003bb0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f7fc fe35 	bl	8000618 <__aeabi_dmul>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 80039bc:	f7fc ff56 	bl	800086c <__aeabi_ddiv>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	ec43 2b17 	vmov	d7, r2, r3
 80039c8:	eeb0 0a47 	vmov.f32	s0, s14
 80039cc:	eef0 0a67 	vmov.f32	s1, s15
 80039d0:	f00e fa0e 	bl	8011df0 <cos>
 80039d4:	ec53 2b10 	vmov	r2, r3, d0
 80039d8:	4640      	mov	r0, r8
 80039da:	4649      	mov	r1, r9
 80039dc:	f7fc fe1c 	bl	8000618 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4620      	mov	r0, r4
 80039e6:	4629      	mov	r1, r5
 80039e8:	f7fc fc60 	bl	80002ac <__adddf3>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f8e8 	bl	8000bc8 <__aeabi_d2uiz>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				uint8_t pntRight_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim + 155)	/ 180.0f));
 80039fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a00:	f7fc fdb2 	bl	8000568 <__aeabi_f2d>
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003a0a:	f7fc fdad 	bl	8000568 <__aeabi_f2d>
 8003a0e:	4680      	mov	r8, r0
 8003a10:	4689      	mov	r9, r1
 8003a12:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003a16:	339b      	adds	r3, #155	; 0x9b
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fd93 	bl	8000544 <__aeabi_i2d>
 8003a1e:	a364      	add	r3, pc, #400	; (adr r3, 8003bb0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fdf8 	bl	8000618 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	4b60      	ldr	r3, [pc, #384]	; (8003bb8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003a36:	f7fc ff19 	bl	800086c <__aeabi_ddiv>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	ec43 2b17 	vmov	d7, r2, r3
 8003a42:	eeb0 0a47 	vmov.f32	s0, s14
 8003a46:	eef0 0a67 	vmov.f32	s1, s15
 8003a4a:	f00e fa21 	bl	8011e90 <sin>
 8003a4e:	ec53 2b10 	vmov	r2, r3, d0
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f7fc fddf 	bl	8000618 <__aeabi_dmul>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4629      	mov	r1, r5
 8003a62:	f7fc fc23 	bl	80002ac <__adddf3>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f7fd f8ab 	bl	8000bc8 <__aeabi_d2uiz>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				uint8_t pntRight_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim + 155)	/ 180.0f));
 8003a78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a7a:	f7fc fd75 	bl	8000568 <__aeabi_f2d>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	460d      	mov	r5, r1
 8003a82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003a84:	f7fc fd70 	bl	8000568 <__aeabi_f2d>
 8003a88:	4680      	mov	r8, r0
 8003a8a:	4689      	mov	r9, r1
 8003a8c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003a90:	339b      	adds	r3, #155	; 0x9b
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fd56 	bl	8000544 <__aeabi_i2d>
 8003a98:	a345      	add	r3, pc, #276	; (adr r3, 8003bb0 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fdbb 	bl	8000618 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003ab0:	f7fc fedc 	bl	800086c <__aeabi_ddiv>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	ec43 2b17 	vmov	d7, r2, r3
 8003abc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac0:	eef0 0a67 	vmov.f32	s1, s15
 8003ac4:	f00e f994 	bl	8011df0 <cos>
 8003ac8:	ec53 2b10 	vmov	r2, r3, d0
 8003acc:	4640      	mov	r0, r8
 8003ace:	4649      	mov	r1, r9
 8003ad0:	f7fc fda2 	bl	8000618 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	4629      	mov	r1, r5
 8003adc:	f7fc fbe6 	bl	80002ac <__adddf3>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f86e 	bl	8000bc8 <__aeabi_d2uiz>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003af2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003af6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003afa:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8003afe:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8003b02:	2400      	movs	r4, #0
 8003b04:	9400      	str	r4, [sp, #0]
 8003b06:	f7fe ff9d 	bl	8002a44 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						pntWipeTL_x, 	pntWipeTL_y,
						lenWipe_xy, 	lenWipe_xy,
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003b0a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b0e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe feb9 	bl	800288c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						pntFront_x, 	pntFront_y);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b1a:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003b1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b22:	2201      	movs	r2, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fedc 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						pntOrig_x, 		pntOrig_y,
						LCD1_PIXEL_SET);
#endif

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b2a:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8003b2e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b32:	2201      	movs	r2, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fed4 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						pntRight_x, 	pntRight_y,
						LCD1_PIXEL_SET);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003b3a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003b3e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b42:	2201      	movs	r2, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fecc 	bl	80028e2 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003b4a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003b54:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8003b58:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	f4ff acba 	bcc.w	80034d6 <i2cSmartLCD_Gfx240x128_Locked+0x59e>
 8003b62:	e01e      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b64:	bf00      	nop
 8003b66:	e01c      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b68:	bf00      	nop
 8003b6a:	e01a      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b6c:	bf00      	nop
 8003b6e:	e018      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
		return;
 8003b70:	bf00      	nop
 8003b72:	e016      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b74:	bf00      	nop
 8003b76:	e014      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b78:	bf00      	nop
 8003b7a:	e012      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b7c:	bf00      	nop
 8003b7e:	e010      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b80:	bf00      	nop
 8003b82:	e00e      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b84:	bf00      	nop
 8003b86:	e00c      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b88:	bf00      	nop
 8003b8a:	e00a      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b8c:	bf00      	nop
 8003b8e:	e008      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b90:	bf00      	nop
 8003b92:	e006      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b94:	bf00      	nop
 8003b96:	e004      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
			return;
 8003ba0:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 8003ba2:	3770      	adds	r7, #112	; 0x70
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	400921fb 	.word	0x400921fb
 8003bb8:	40668000 	.word	0x40668000

08003bbc <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	4413      	add	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <uDelay+0x3c>)
 8003bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8003bdc:	e002      	b.n	8003be4 <uDelay+0x28>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f9      	bne.n	8003bde <uDelay+0x22>
	}
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	cccccccd 	.word	0xcccccccd

08003bfc <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003c08:	e004      	b.n	8003c14 <memclear+0x18>
		*(ary++) = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	807a      	strh	r2, [r7, #2]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f5      	bne.n	8003c0a <memclear+0xe>
	}
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <calcDcfPhasemod>:

};  Anzahl Einsen: 256 Anzahl Nullen: 256.
*/

void calcDcfPhasemod(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
	/* The result of this function is OK verified against the table above */
	uint16_t shift = 1U;
 8003c32:	2301      	movs	r3, #1
 8003c34:	80fb      	strh	r3, [r7, #6]
#if 0
	/* Prepare */
	memclear(gDcfPhaseMod, 512);
#endif

	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003c36:	2300      	movs	r3, #0
 8003c38:	80bb      	strh	r3, [r7, #4]
 8003c3a:	e02a      	b.n	8003c92 <calcDcfPhasemod+0x66>
		uint8_t b5		= (0 != (shift & 0b000010000U));
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	70fb      	strb	r3, [r7, #3]
		uint8_t b9		= (0 != (shift & 0b100000000U));
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	70bb      	strb	r3, [r7, #2]
		uint8_t xor59	= (b5 != b9);
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	78bb      	ldrb	r3, [r7, #2]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	707b      	strb	r3, [r7, #1]
		shift <<= 1;
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	80fb      	strh	r3, [r7, #6]
		if (xor59) {
 8003c76:	787b      	ldrb	r3, [r7, #1]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <calcDcfPhasemod+0x58>
			shift |= 0x01U;
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	80fb      	strh	r3, [r7, #6]
		}

		gDcfPhaseMod[idx] 		 =  xor59;
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <calcDcfPhasemod+0x7c>)
 8003c88:	787a      	ldrb	r2, [r7, #1]
 8003c8a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003c8c:	88bb      	ldrh	r3, [r7, #4]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	80bb      	strh	r3, [r7, #4]
 8003c92:	88bb      	ldrh	r3, [r7, #4]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d3d0      	bcc.n	8003c3c <calcDcfPhasemod+0x10>
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	20000308 	.word	0x20000308

08003cac <calcDcfPrnCorrelation>:

uint8_t calcDcfPrnCorrelation(uint8_t sub32Frm, volatile int32_t in_ary[PRN_CORRELATION_BUF_SIZE], uint16_t* shiftPos, uint16_t* corSum)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b091      	sub	sp, #68	; 0x44
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]
	int32_t  maxSum = 0L,	minSum = 0L;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t maxPos = 0U, 	minPos = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cc8:	2300      	movs	r3, #0
 8003cca:	86bb      	strh	r3, [r7, #52]	; 0x34
	int32_t  deciderBoundaryLo = 0L;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
	int32_t  deciderBoundaryHi = 0L;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]

	/* Decider adjustments */
	{
		int32_t	 deciderMax	= 0L;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t	 deciderMin	= 0L;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Starting second */
		for (uint16_t idx = 0; idx < 31U; ++idx) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003ce0:	e06f      	b.n	8003dc2 <calcDcfPrnCorrelation+0x116>
			if ((deciderMax < in_ary[idx % PRN_CORRELATION_BUF_SIZE])		&& ((deciderMin + 60L) > in_ary[idx % PRN_CORRELATION_BUF_SIZE])) {
 8003ce2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ce4:	4a9d      	ldr	r2, [pc, #628]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003ce6:	fba2 1203 	umull	r1, r2, r2, r3
 8003cea:	0a92      	lsrs	r2, r2, #10
 8003cec:	f640 7123 	movw	r1, #3875	; 0xf23
 8003cf0:	fb01 f202 	mul.w	r2, r1, r2
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d02:	429a      	cmp	r2, r3
 8003d04:	da24      	bge.n	8003d50 <calcDcfPrnCorrelation+0xa4>
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8003d0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d0e:	4993      	ldr	r1, [pc, #588]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003d10:	fba1 0103 	umull	r0, r1, r1, r3
 8003d14:	0a89      	lsrs	r1, r1, #10
 8003d16:	f640 7023 	movw	r0, #3875	; 0xf23
 8003d1a:	fb00 f101 	mul.w	r1, r0, r1
 8003d1e:	1a5b      	subs	r3, r3, r1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	440b      	add	r3, r1
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	db10      	blt.n	8003d50 <calcDcfPrnCorrelation+0xa4>
				deciderMax = in_ary[idx % PRN_CORRELATION_BUF_SIZE];
 8003d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d30:	4a8a      	ldr	r2, [pc, #552]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003d32:	fba2 1203 	umull	r1, r2, r2, r3
 8003d36:	0a92      	lsrs	r2, r2, #10
 8003d38:	f640 7123 	movw	r1, #3875	; 0xf23
 8003d3c:	fb01 f202 	mul.w	r2, r1, r2
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4413      	add	r3, r2
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4e:	e035      	b.n	8003dbc <calcDcfPrnCorrelation+0x110>
			}
			else if ((deciderMin > in_ary[idx % PRN_CORRELATION_BUF_SIZE])	&& ((deciderMax - 60L) < in_ary[idx % PRN_CORRELATION_BUF_SIZE])) {
 8003d50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d52:	4a82      	ldr	r2, [pc, #520]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003d54:	fba2 1203 	umull	r1, r2, r2, r3
 8003d58:	0a92      	lsrs	r2, r2, #10
 8003d5a:	f640 7123 	movw	r1, #3875	; 0xf23
 8003d5e:	fb01 f202 	mul.w	r2, r1, r2
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	dd23      	ble.n	8003dbc <calcDcfPrnCorrelation+0x110>
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f1a3 023b 	sub.w	r2, r3, #59	; 0x3b
 8003d7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d7c:	4977      	ldr	r1, [pc, #476]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003d7e:	fba1 0103 	umull	r0, r1, r1, r3
 8003d82:	0a89      	lsrs	r1, r1, #10
 8003d84:	f640 7023 	movw	r0, #3875	; 0xf23
 8003d88:	fb00 f101 	mul.w	r1, r0, r1
 8003d8c:	1a5b      	subs	r3, r3, r1
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	440b      	add	r3, r1
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dc0f      	bgt.n	8003dbc <calcDcfPrnCorrelation+0x110>
				deciderMin = in_ary[idx % PRN_CORRELATION_BUF_SIZE];
 8003d9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d9e:	4a6f      	ldr	r2, [pc, #444]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003da0:	fba2 1203 	umull	r1, r2, r2, r3
 8003da4:	0a92      	lsrs	r2, r2, #10
 8003da6:	f640 7123 	movw	r1, #3875	; 0xf23
 8003daa:	fb01 f202 	mul.w	r2, r1, r2
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	4413      	add	r3, r2
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = 0; idx < 31U; ++idx) {
 8003dbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003dc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dc4:	2b1e      	cmp	r3, #30
 8003dc6:	d98c      	bls.n	8003ce2 <calcDcfPrnCorrelation+0x36>
			}
		}

		/* Middle of a second */
		for (uint16_t idx = (PRN_CORRELATION_BUF_SIZE / 2); idx < ((PRN_CORRELATION_BUF_SIZE / 2) + 31U); ++idx) {
 8003dc8:	f240 7391 	movw	r3, #1937	; 0x791
 8003dcc:	853b      	strh	r3, [r7, #40]	; 0x28
 8003dce:	e06f      	b.n	8003eb0 <calcDcfPrnCorrelation+0x204>
			if ((deciderMax < in_ary[idx % PRN_CORRELATION_BUF_SIZE])		&& ((deciderMin + 60L) > in_ary[idx % PRN_CORRELATION_BUF_SIZE])) {
 8003dd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dd2:	4a62      	ldr	r2, [pc, #392]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003dd4:	fba2 1203 	umull	r1, r2, r2, r3
 8003dd8:	0a92      	lsrs	r2, r2, #10
 8003dda:	f640 7123 	movw	r1, #3875	; 0xf23
 8003dde:	fb01 f202 	mul.w	r2, r1, r2
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	4413      	add	r3, r2
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df0:	429a      	cmp	r2, r3
 8003df2:	da24      	bge.n	8003e3e <calcDcfPrnCorrelation+0x192>
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8003dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dfc:	4957      	ldr	r1, [pc, #348]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003dfe:	fba1 0103 	umull	r0, r1, r1, r3
 8003e02:	0a89      	lsrs	r1, r1, #10
 8003e04:	f640 7023 	movw	r0, #3875	; 0xf23
 8003e08:	fb00 f101 	mul.w	r1, r0, r1
 8003e0c:	1a5b      	subs	r3, r3, r1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	440b      	add	r3, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	db10      	blt.n	8003e3e <calcDcfPrnCorrelation+0x192>
				deciderMax = in_ary[idx % PRN_CORRELATION_BUF_SIZE];
 8003e1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e1e:	4a4f      	ldr	r2, [pc, #316]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003e20:	fba2 1203 	umull	r1, r2, r2, r3
 8003e24:	0a92      	lsrs	r2, r2, #10
 8003e26:	f640 7123 	movw	r1, #3875	; 0xf23
 8003e2a:	fb01 f202 	mul.w	r2, r1, r2
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	4413      	add	r3, r2
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3c:	e035      	b.n	8003eaa <calcDcfPrnCorrelation+0x1fe>
			}
			else if ((deciderMin > in_ary[idx % PRN_CORRELATION_BUF_SIZE])	&& ((deciderMax - 60L) < in_ary[idx % PRN_CORRELATION_BUF_SIZE])) {
 8003e3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e40:	4a46      	ldr	r2, [pc, #280]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003e42:	fba2 1203 	umull	r1, r2, r2, r3
 8003e46:	0a92      	lsrs	r2, r2, #10
 8003e48:	f640 7123 	movw	r1, #3875	; 0xf23
 8003e4c:	fb01 f202 	mul.w	r2, r1, r2
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4413      	add	r3, r2
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	dd23      	ble.n	8003eaa <calcDcfPrnCorrelation+0x1fe>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	f1a3 023b 	sub.w	r2, r3, #59	; 0x3b
 8003e68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e6a:	493c      	ldr	r1, [pc, #240]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003e6c:	fba1 0103 	umull	r0, r1, r1, r3
 8003e70:	0a89      	lsrs	r1, r1, #10
 8003e72:	f640 7023 	movw	r0, #3875	; 0xf23
 8003e76:	fb00 f101 	mul.w	r1, r0, r1
 8003e7a:	1a5b      	subs	r3, r3, r1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	440b      	add	r3, r1
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	dc0f      	bgt.n	8003eaa <calcDcfPrnCorrelation+0x1fe>
				deciderMin = in_ary[idx % PRN_CORRELATION_BUF_SIZE];
 8003e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e8c:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003e8e:	fba2 1203 	umull	r1, r2, r2, r3
 8003e92:	0a92      	lsrs	r2, r2, #10
 8003e94:	f640 7123 	movw	r1, #3875	; 0xf23
 8003e98:	fb01 f202 	mul.w	r2, r1, r2
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = (PRN_CORRELATION_BUF_SIZE / 2); idx < ((PRN_CORRELATION_BUF_SIZE / 2) + 31U); ++idx) {
 8003eaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eac:	3301      	adds	r3, #1
 8003eae:	853b      	strh	r3, [r7, #40]	; 0x28
 8003eb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eb2:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8003eb6:	d38b      	bcc.n	8003dd0 <calcDcfPrnCorrelation+0x124>
			}
		}

		/* Calculate the boundaries */
		deciderBoundaryLo =  -((deciderMax - deciderMin) / 3);
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	4a28      	ldr	r2, [pc, #160]	; (8003f60 <calcDcfPrnCorrelation+0x2b4>)
 8003ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ec4:	17db      	asrs	r3, r3, #31
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	61fb      	str	r3, [r7, #28]
		deciderBoundaryHi =  +((deciderMax - deciderMin) / 3);
 8003eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <calcDcfPrnCorrelation+0x2b4>)
 8003ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed6:	17db      	asrs	r3, r3, #31
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	61bb      	str	r3, [r7, #24]
	}

	/* Decider on each timing position */
	for (uint16_t shft = (sub32Frm * 128U); shft < ((sub32Frm + 2U) * 128U); shft++) {
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	01db      	lsls	r3, r3, #7
 8003ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ee4:	e07f      	b.n	8003fe6 <calcDcfPrnCorrelation+0x33a>
		int16_t sum = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	84bb      	strh	r3, [r7, #36]	; 0x24

		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8003eea:	2300      	movs	r3, #0
 8003eec:	847b      	strh	r3, [r7, #34]	; 0x22
 8003eee:	e05e      	b.n	8003fae <calcDcfPrnCorrelation+0x302>
			uint16_t thisPos = ((idx * PRN_CORRELATION_OVERAMPLE) + shft) % PRN_CORRELATION_BUF_SIZE;
 8003ef0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	461a      	mov	r2, r3
 8003efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003efe:	4413      	add	r3, r2
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <calcDcfPrnCorrelation+0x2b0>)
 8003f02:	fb82 1203 	smull	r1, r2, r2, r3
 8003f06:	1291      	asrs	r1, r2, #10
 8003f08:	17da      	asrs	r2, r3, #31
 8003f0a:	1a8a      	subs	r2, r1, r2
 8003f0c:	f640 7123 	movw	r1, #3875	; 0xf23
 8003f10:	fb01 f202 	mul.w	r2, r1, r2
 8003f14:	1a9a      	subs	r2, r3, r2
 8003f16:	4613      	mov	r3, r2
 8003f18:	82fb      	strh	r3, [r7, #22]

			if (
					((in_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	681b      	ldr	r3, [r3, #0]
			if (
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	da04      	bge.n	8003f34 <calcDcfPrnCorrelation+0x288>
					((in_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <calcDcfPrnCorrelation+0x2b8>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d00c      	beq.n	8003f4e <calcDcfPrnCorrelation+0x2a2>
					((in_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8003f34:	8afb      	ldrh	r3, [r7, #22]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	681b      	ldr	r3, [r3, #0]
					((in_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	dd11      	ble.n	8003f68 <calcDcfPrnCorrelation+0x2bc>
					((in_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8003f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <calcDcfPrnCorrelation+0x2b8>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <calcDcfPrnCorrelation+0x2bc>
				) {  	/* non-inverse correlation */
				sum++;
 8003f4e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f5a:	e025      	b.n	8003fa8 <calcDcfPrnCorrelation+0x2fc>
 8003f5c:	43a66aa1 	.word	0x43a66aa1
 8003f60:	55555556 	.word	0x55555556
 8003f64:	20000308 	.word	0x20000308
			}
			else if (	/* inverse correlation */
					((in_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f68:	8afb      	ldrh	r3, [r7, #22]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4413      	add	r3, r2
 8003f70:	681b      	ldr	r3, [r3, #0]
			else if (	/* inverse correlation */
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	dd04      	ble.n	8003f82 <calcDcfPrnCorrelation+0x2d6>
					((in_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f7a:	4a33      	ldr	r2, [pc, #204]	; (8004048 <calcDcfPrnCorrelation+0x39c>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d00c      	beq.n	8003f9c <calcDcfPrnCorrelation+0x2f0>
					((in_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 8003f82:	8afb      	ldrh	r3, [r7, #22]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
					((in_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	da0a      	bge.n	8003fa8 <calcDcfPrnCorrelation+0x2fc>
					((in_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 8003f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f94:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <calcDcfPrnCorrelation+0x39c>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <calcDcfPrnCorrelation+0x2fc>
				) {
				sum--;
 8003f9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8003fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003faa:	3301      	adds	r3, #1
 8003fac:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb4:	d39c      	bcc.n	8003ef0 <calcDcfPrnCorrelation+0x244>
			}
		}  // for (idx)

		if (maxSum < sum) {
 8003fb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	da05      	bge.n	8003fcc <calcDcfPrnCorrelation+0x320>
			maxSum = sum;
 8003fc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			maxPos = shft;
 8003fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fca:	e009      	b.n	8003fe0 <calcDcfPrnCorrelation+0x334>
		}
		else if (minSum > sum) {
 8003fcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	dd04      	ble.n	8003fe0 <calcDcfPrnCorrelation+0x334>
			minSum = sum;
 8003fd6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003fda:	63bb      	str	r3, [r7, #56]	; 0x38
			minPos = shft;
 8003fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fde:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (uint16_t shft = (sub32Frm * 128U); shft < ((sub32Frm + 2U) * 128U); shft++) {
 8003fe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	3302      	adds	r3, #2
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f4ff af79 	bcc.w	8003ee6 <calcDcfPrnCorrelation+0x23a>
		}
	}  // for (shft)

	/* Decider */
	if (maxSum > -minSum) {
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	425b      	negs	r3, r3
 8003ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dd0e      	ble.n	800401c <calcDcfPrnCorrelation+0x370>
		/* Bitstream is non-inverse PRN */
		if (shiftPos) {
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <calcDcfPrnCorrelation+0x35e>
			*shiftPos 	=  maxPos;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004008:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <calcDcfPrnCorrelation+0x36c>
			*corSum		= +maxSum;
 8004010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004012:	b29a      	uxth	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '0' */
		return 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	e00f      	b.n	800403c <calcDcfPrnCorrelation+0x390>
	}
	else {
		/* Bitstream is inverse PRN */
		if (shiftPos) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <calcDcfPrnCorrelation+0x37c>
			*shiftPos	=  minPos;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004026:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <calcDcfPrnCorrelation+0x38e>
			*corSum		= -minSum;
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	b29b      	uxth	r3, r3
 8004032:	425b      	negs	r3, r3
 8004034:	b29a      	uxth	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '1' */
		return 1U;
 800403a:	2301      	movs	r3, #1
	}
}
 800403c:	4618      	mov	r0, r3
 800403e:	3744      	adds	r7, #68	; 0x44
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000308 	.word	0x20000308

0800404c <calcDcfTelegram>:

uint8_t calcDcfTelegram(uint8_t* tc_ary, dcfTimeTelegr_t* dcfNxtMinuteTime)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	if (tc_ary && dcfNxtMinuteTime) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 81b8 	beq.w	80043ce <calcDcfTelegram+0x382>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 81b4 	beq.w	80043ce <calcDcfTelegram+0x382>
		dcfNxtMinuteTime->rufBit	=  tc_ary[15];																	// b1:  Calling staff in Braunschweig, b0: else.
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	330f      	adds	r3, #15
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	b2d9      	uxtb	r1, r3
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	7813      	ldrb	r3, [r2, #0]
 8004076:	f361 0300 	bfi	r3, r1, #0, #1
 800407a:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a1		=  tc_ary[16];																	// b1:  time change (MEZ <--> MESZ) to come in the next hour, b0: else.
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3310      	adds	r3, #16
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	b2d9      	uxtb	r1, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	7813      	ldrb	r3, [r2, #0]
 800408c:	f361 0341 	bfi	r3, r1, #1, #1
 8004090:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->z			= (tc_ary[17] << 1) | tc_ary[18];												// b01: MEZ, b10: MESZ.
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3311      	adds	r3, #17
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	b25a      	sxtb	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3312      	adds	r3, #18
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	b2d9      	uxtb	r1, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	7813      	ldrb	r3, [r2, #0]
 80040b2:	f361 0383 	bfi	r3, r1, #2, #2
 80040b6:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a2		=  tc_ary[19];																	// b1:  additional second to be added within the next hour, b0: else.
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3313      	adds	r3, #19
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	7813      	ldrb	r3, [r2, #0]
 80040c8:	f361 1304 	bfi	r3, r1, #4, #1
 80040cc:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->s			=  tc_ary[20];																	// b1:  Startbit
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3314      	adds	r3, #20
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	7813      	ldrb	r3, [r2, #0]
 80040de:	f361 1345 	bfi	r3, r1, #5, #1
 80040e2:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->_02		= 0U;																			// filling the byte.
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	7813      	ldrb	r3, [r2, #0]
 80040e8:	f36f 1387 	bfc	r3, #6, #2
 80040ec:	7013      	strb	r3, [r2, #0]

		dcfNxtMinuteTime->mn_xM		= (tc_ary[24] << 3) | (tc_ary[23] << 2) | (tc_ary[22] << 1) | (tc_ary[21]);		// BCD code for the minute, right digit.
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3318      	adds	r3, #24
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	b25a      	sxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3317      	adds	r3, #23
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	b25b      	sxtb	r3, r3
 8004102:	4313      	orrs	r3, r2
 8004104:	b25a      	sxtb	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3316      	adds	r3, #22
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	b25b      	sxtb	r3, r3
 8004110:	4313      	orrs	r3, r2
 8004112:	b25a      	sxtb	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3315      	adds	r3, #21
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b25b      	sxtb	r3, r3
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	7853      	ldrb	r3, [r2, #1]
 800412a:	f361 0303 	bfi	r3, r1, #0, #4
 800412e:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_Mx		=                     (tc_ary[27] << 2) | (tc_ary[26] << 1) | (tc_ary[25]);		// BCD code for the minute, left  digit.
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	331b      	adds	r3, #27
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	b25a      	sxtb	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	331a      	adds	r3, #26
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	b25b      	sxtb	r3, r3
 8004144:	4313      	orrs	r3, r2
 8004146:	b25a      	sxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3319      	adds	r3, #25
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b25b      	sxtb	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b25b      	sxtb	r3, r3
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	7853      	ldrb	r3, [r2, #1]
 800415e:	f361 1306 	bfi	r3, r1, #4, #3
 8004162:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_P1		=  tc_ary[28];																	// Even parity for the minute.
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	331c      	adds	r3, #28
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2d9      	uxtb	r1, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	7853      	ldrb	r3, [r2, #1]
 8004174:	f361 13c7 	bfi	r3, r1, #7, #1
 8004178:	7053      	strb	r3, [r2, #1]

		dcfNxtMinuteTime->hr_xH		= (tc_ary[32] << 3) | (tc_ary[31] << 2) | (tc_ary[30] << 1) | (tc_ary[29]);		// BCD code for the hour, right digit.
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3320      	adds	r3, #32
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	b25a      	sxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	331f      	adds	r3, #31
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	b25b      	sxtb	r3, r3
 800418e:	4313      	orrs	r3, r2
 8004190:	b25a      	sxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	331e      	adds	r3, #30
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b25b      	sxtb	r3, r3
 800419c:	4313      	orrs	r3, r2
 800419e:	b25a      	sxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	331d      	adds	r3, #29
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	b2d9      	uxtb	r1, r3
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	7893      	ldrb	r3, [r2, #2]
 80041b6:	f361 0303 	bfi	r3, r1, #0, #4
 80041ba:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_Hx		=                                         (tc_ary[34] << 1) | (tc_ary[33]);		// BCD code for the hour, left  digit.
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3322      	adds	r3, #34	; 0x22
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	b25a      	sxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3321      	adds	r3, #33	; 0x21
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	b2d9      	uxtb	r1, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	7893      	ldrb	r3, [r2, #2]
 80041dc:	f361 1305 	bfi	r3, r1, #4, #2
 80041e0:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_P2		=  tc_ary[35];																	// Even parity for the hour.
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3323      	adds	r3, #35	; 0x23
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	b2d9      	uxtb	r1, r3
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	7893      	ldrb	r3, [r2, #2]
 80041f2:	f361 1386 	bfi	r3, r1, #6, #1
 80041f6:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->_11		= 0U;																			// filling the byte.
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	7893      	ldrb	r3, [r2, #2]
 80041fc:	f36f 13c7 	bfc	r3, #7, #1
 8004200:	7093      	strb	r3, [r2, #2]

		dcfNxtMinuteTime->dy_xD		= (tc_ary[39] << 3) | (tc_ary[38] << 2) | (tc_ary[37] << 1) | (tc_ary[36]);		// BCD code for the day of the month, right digit.
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3327      	adds	r3, #39	; 0x27
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	b25a      	sxtb	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3326      	adds	r3, #38	; 0x26
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	b25b      	sxtb	r3, r3
 8004216:	4313      	orrs	r3, r2
 8004218:	b25a      	sxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3325      	adds	r3, #37	; 0x25
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	b25b      	sxtb	r3, r3
 8004224:	4313      	orrs	r3, r2
 8004226:	b25a      	sxtb	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	b25b      	sxtb	r3, r3
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	b2d9      	uxtb	r1, r3
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	78d3      	ldrb	r3, [r2, #3]
 800423e:	f361 0303 	bfi	r3, r1, #0, #4
 8004242:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->dy_Dx		=                                         (tc_ary[41] << 1) | (tc_ary[40]);		// BCD code for the day of the month, left  digit.
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3329      	adds	r3, #41	; 0x29
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	b25a      	sxtb	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3328      	adds	r3, #40	; 0x28
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b25b      	sxtb	r3, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	b25b      	sxtb	r3, r3
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	b2d9      	uxtb	r1, r3
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	78d3      	ldrb	r3, [r2, #3]
 8004264:	f361 1305 	bfi	r3, r1, #4, #2
 8004268:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->_22		= 0U;																			// filling the byte.
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	78d3      	ldrb	r3, [r2, #3]
 800426e:	f36f 1387 	bfc	r3, #6, #2
 8004272:	70d3      	strb	r3, [r2, #3]

		dcfNxtMinuteTime->wd_xD		=                     (tc_ary[44] << 2) | (tc_ary[43] << 1) | (tc_ary[42]);		// BCD code for the day of the week, 1=monday .. 7=sunday (ISO 8601).
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	332c      	adds	r3, #44	; 0x2c
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	b25a      	sxtb	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	332b      	adds	r3, #43	; 0x2b
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	b25b      	sxtb	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b25a      	sxtb	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	332a      	adds	r3, #42	; 0x2a
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b25b      	sxtb	r3, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	b25b      	sxtb	r3, r3
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	b2d9      	uxtb	r1, r3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	7913      	ldrb	r3, [r2, #4]
 80042a2:	f361 0302 	bfi	r3, r1, #0, #3
 80042a6:	7113      	strb	r3, [r2, #4]
		dcfNxtMinuteTime->_35		= 0U;																			// filling the byte.
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	7913      	ldrb	r3, [r2, #4]
 80042ac:	f36f 03c7 	bfc	r3, #3, #5
 80042b0:	7113      	strb	r3, [r2, #4]

		dcfNxtMinuteTime->mo_xM		= (tc_ary[48] << 3) | (tc_ary[47] << 2) | (tc_ary[46] << 1) | (tc_ary[45]);		// BCD code for the month, right digit.
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3330      	adds	r3, #48	; 0x30
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	b25a      	sxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	332f      	adds	r3, #47	; 0x2f
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b25a      	sxtb	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	332e      	adds	r3, #46	; 0x2e
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	332d      	adds	r3, #45	; 0x2d
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	b2d9      	uxtb	r1, r3
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	7953      	ldrb	r3, [r2, #5]
 80042ee:	f361 0303 	bfi	r3, r1, #0, #4
 80042f2:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->mo_Mx		= (tc_ary[49]);																	// BCD code for the month, left  digit.
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3331      	adds	r3, #49	; 0x31
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	b2d9      	uxtb	r1, r3
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	7953      	ldrb	r3, [r2, #5]
 8004304:	f361 1304 	bfi	r3, r1, #4, #1
 8004308:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->_43		= 0U;																			// filling the byte.
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	7953      	ldrb	r3, [r2, #5]
 800430e:	f36f 1347 	bfc	r3, #5, #3
 8004312:	7153      	strb	r3, [r2, #5]

		dcfNxtMinuteTime->yr_xY		= (tc_ary[53] << 3) | (tc_ary[52] << 2) | (tc_ary[51] << 1) | (tc_ary[50]);		// BCD code for the last two digits of the year, right digit.
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3335      	adds	r3, #53	; 0x35
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	b25a      	sxtb	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3334      	adds	r3, #52	; 0x34
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	b25b      	sxtb	r3, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	b25a      	sxtb	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3333      	adds	r3, #51	; 0x33
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	b25b      	sxtb	r3, r3
 8004336:	4313      	orrs	r3, r2
 8004338:	b25a      	sxtb	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3332      	adds	r3, #50	; 0x32
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b25b      	sxtb	r3, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	b25b      	sxtb	r3, r3
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	b2d9      	uxtb	r1, r3
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	7993      	ldrb	r3, [r2, #6]
 8004350:	f361 0303 	bfi	r3, r1, #0, #4
 8004354:	7193      	strb	r3, [r2, #6]
		dcfNxtMinuteTime->yr_Yx		= (tc_ary[57] << 3) | (tc_ary[56] << 2) | (tc_ary[55] << 1) | (tc_ary[54]);		// BCD code for the last two digits of the year, left  digit.
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3339      	adds	r3, #57	; 0x39
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	b25a      	sxtb	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3338      	adds	r3, #56	; 0x38
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	b25b      	sxtb	r3, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	b25a      	sxtb	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3337      	adds	r3, #55	; 0x37
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	b25b      	sxtb	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b25a      	sxtb	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3336      	adds	r3, #54	; 0x36
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b25b      	sxtb	r3, r3
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	b2d9      	uxtb	r1, r3
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	7993      	ldrb	r3, [r2, #6]
 8004392:	f361 1307 	bfi	r3, r1, #4, #4
 8004396:	7193      	strb	r3, [r2, #6]

		dcfNxtMinuteTime->hr_P3		= (tc_ary[58]);																	// Even parity for the date block.
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	333a      	adds	r3, #58	; 0x3a
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	b2d9      	uxtb	r1, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	79d3      	ldrb	r3, [r2, #7]
 80043a8:	f361 0300 	bfi	r3, r1, #0, #1
 80043ac:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->prn_59	= (tc_ary[59]);																	// b0:  Minute ends.
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	333b      	adds	r3, #59	; 0x3b
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2d9      	uxtb	r1, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	79d3      	ldrb	r3, [r2, #7]
 80043be:	f361 0341 	bfi	r3, r1, #1, #1
 80043c2:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->_57		= 0U;																			// filling the byte.
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	7a13      	ldrb	r3, [r2, #8]
 80043c8:	f36f 0306 	bfc	r3, #0, #7
 80043cc:	7213      	strb	r3, [r2, #8]
	}

	/* Parity checks */
	{
		if (!dcfNxtMinuteTime->s) {
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <calcDcfTelegram+0x394>
			return 11U;
 80043dc:	230b      	movs	r3, #11
 80043de:	e0be      	b.n	800455e <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3318      	adds	r3, #24
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3317      	adds	r3, #23
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4053      	eors	r3, r2
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3316      	adds	r3, #22
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4053      	eors	r3, r2
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3315      	adds	r3, #21
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4053      	eors	r3, r2
 8004402:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	331b      	adds	r3, #27
 8004408:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 800440a:	4053      	eors	r3, r2
 800440c:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	331a      	adds	r3, #26
 8004412:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 8004414:	4053      	eors	r3, r2
 8004416:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3319      	adds	r3, #25
 800441c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 800441e:	4053      	eors	r3, r2
 8004420:	b2da      	uxtb	r2, r3
				tc_ary[28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	331c      	adds	r3, #28
 8004426:	781b      	ldrb	r3, [r3, #0]
		if (
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <calcDcfTelegram+0x3e4>
		) {
			/* Bad parity P1 */
			return 1U;
 800442c:	2301      	movs	r3, #1
 800442e:	e096      	b.n	800455e <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3320      	adds	r3, #32
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	331f      	adds	r3, #31
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4053      	eors	r3, r2
 800443e:	b2da      	uxtb	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	331e      	adds	r3, #30
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	4053      	eors	r3, r2
 8004448:	b2da      	uxtb	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	331d      	adds	r3, #29
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4053      	eors	r3, r2
 8004452:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3322      	adds	r3, #34	; 0x22
 8004458:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 800445a:	4053      	eors	r3, r2
 800445c:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3321      	adds	r3, #33	; 0x21
 8004462:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 8004464:	4053      	eors	r3, r2
 8004466:	b2da      	uxtb	r2, r3
				tc_ary[35]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3323      	adds	r3, #35	; 0x23
 800446c:	781b      	ldrb	r3, [r3, #0]
		if (
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <calcDcfTelegram+0x42a>
		) {
			/* Bad parity P2 */
			return 2U;
 8004472:	2302      	movs	r3, #2
 8004474:	e073      	b.n	800455e <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3327      	adds	r3, #39	; 0x27
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3326      	adds	r3, #38	; 0x26
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	4053      	eors	r3, r2
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3325      	adds	r3, #37	; 0x25
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4053      	eors	r3, r2
 800448e:	b2da      	uxtb	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3324      	adds	r3, #36	; 0x24
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4053      	eors	r3, r2
 8004498:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3329      	adds	r3, #41	; 0x29
 800449e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044a0:	4053      	eors	r3, r2
 80044a2:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3328      	adds	r3, #40	; 0x28
 80044a8:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044aa:	4053      	eors	r3, r2
 80044ac:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	332c      	adds	r3, #44	; 0x2c
 80044b2:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044b4:	4053      	eors	r3, r2
 80044b6:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	332b      	adds	r3, #43	; 0x2b
 80044bc:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044be:	4053      	eors	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	332a      	adds	r3, #42	; 0x2a
 80044c6:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044c8:	4053      	eors	r3, r2
 80044ca:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3330      	adds	r3, #48	; 0x30
 80044d0:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044d2:	4053      	eors	r3, r2
 80044d4:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	332f      	adds	r3, #47	; 0x2f
 80044da:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044dc:	4053      	eors	r3, r2
 80044de:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	332e      	adds	r3, #46	; 0x2e
 80044e4:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044e6:	4053      	eors	r3, r2
 80044e8:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	332d      	adds	r3, #45	; 0x2d
 80044ee:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044f0:	4053      	eors	r3, r2
 80044f2:	b2da      	uxtb	r2, r3
	                                                   tc_ary[49]  ^
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3331      	adds	r3, #49	; 0x31
 80044f8:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80044fa:	4053      	eors	r3, r2
 80044fc:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3335      	adds	r3, #53	; 0x35
 8004502:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004504:	4053      	eors	r3, r2
 8004506:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3334      	adds	r3, #52	; 0x34
 800450c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800450e:	4053      	eors	r3, r2
 8004510:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3333      	adds	r3, #51	; 0x33
 8004516:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004518:	4053      	eors	r3, r2
 800451a:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3332      	adds	r3, #50	; 0x32
 8004520:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004522:	4053      	eors	r3, r2
 8004524:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3339      	adds	r3, #57	; 0x39
 800452a:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800452c:	4053      	eors	r3, r2
 800452e:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3338      	adds	r3, #56	; 0x38
 8004534:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004536:	4053      	eors	r3, r2
 8004538:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3337      	adds	r3, #55	; 0x37
 800453e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004540:	4053      	eors	r3, r2
 8004542:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3336      	adds	r3, #54	; 0x36
 8004548:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800454a:	4053      	eors	r3, r2
 800454c:	b2da      	uxtb	r2, r3
				tc_ary[58]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	333a      	adds	r3, #58	; 0x3a
 8004552:	781b      	ldrb	r3, [r3, #0]
		if (
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <calcDcfTelegram+0x510>
		) {
			/* Bad parity P3 */
			return 3U;
 8004558:	2303      	movs	r3, #3
 800455a:	e000      	b.n	800455e <calcDcfTelegram+0x512>
		}
	}

	/* All well */
	return 0U;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <main_get_MaidenheadLocator_from_LatLon>:


uint8_t main_get_MaidenheadLocator_from_LatLon(uint8_t maxLen, uint8_t* tgtStr, float lat, float lon)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	; 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	ed87 0a01 	vstr	s0, [r7, #4]
 800457a:	edc7 0a00 	vstr	s1, [r7]
 800457e:	73fb      	strb	r3, [r7, #15]
	if (
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b06      	cmp	r3, #6
 8004584:	f240 80d3 	bls.w	800472e <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(maxLen >= 7)   &&
 8004588:	edd7 7a01 	vldr	s15, [r7, #4]
 800458c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800473c <main_get_MaidenheadLocator_from_LatLon+0x1d0>
 8004590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004598:	f340 80c9 	ble.w	800472e <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			( -90.0f < lat) && (lat <  +90.0f) &&
 800459c:	edd7 7a01 	vldr	s15, [r7, #4]
 80045a0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004740 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 80045a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ac:	f140 80bf 	bpl.w	800472e <main_get_MaidenheadLocator_from_LatLon+0x1c2>
 80045b0:	edd7 7a00 	vldr	s15, [r7]
 80045b4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004744 <main_get_MaidenheadLocator_from_LatLon+0x1d8>
 80045b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	f340 80b5 	ble.w	800472e <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(-180.0f < lon) && (lon < +180.0f))
 80045c4:	edd7 7a00 	vldr	s15, [r7]
 80045c8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004748 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 80045cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d4:	f140 80ab 	bpl.w	800472e <main_get_MaidenheadLocator_from_LatLon+0x1c2>
	{
		/* Grid movement */
		lon += 180.0f;
 80045d8:	edd7 7a00 	vldr	s15, [r7]
 80045dc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004748 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 80045e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e4:	edc7 7a00 	vstr	s15, [r7]
		lat +=  90.0f;
 80045e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ec:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004740 <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 80045f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f4:	edc7 7a01 	vstr	s15, [r7, #4]

		lon *= 25U;
 80045f8:	edd7 7a00 	vldr	s15, [r7]
 80045fc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004604:	edc7 7a00 	vstr	s15, [r7]
		lon	-= 0.5f;
 8004608:	edd7 7a00 	vldr	s15, [r7]
 800460c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004614:	edc7 7a00 	vstr	s15, [r7]
		lon /= 2U;
 8004618:	ed97 7a00 	vldr	s14, [r7]
 800461c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004624:	edc7 7a00 	vstr	s15, [r7]
		uint32_t lon_i = (uint32_t) lon;
 8004628:	edd7 7a00 	vldr	s15, [r7]
 800462c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004630:	ee17 3a90 	vmov	r3, s15
 8004634:	61fb      	str	r3, [r7, #28]

		lat *= 25U;
 8004636:	edd7 7a01 	vldr	s15, [r7, #4]
 800463a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800463e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004642:	edc7 7a01 	vstr	s15, [r7, #4]
		lat	-= 0.5f;
 8004646:	edd7 7a01 	vldr	s15, [r7, #4]
 800464a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800464e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004652:	edc7 7a01 	vstr	s15, [r7, #4]
		uint32_t lat_i = (uint32_t) lat;
 8004656:	edd7 7a01 	vldr	s15, [r7, #4]
 800465a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465e:	ee17 3a90 	vmov	r3, s15
 8004662:	61bb      	str	r3, [r7, #24]

		uint8_t	lon_p0	= (uint8_t) (lon_i / 250UL);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	4a39      	ldr	r2, [pc, #228]	; (800474c <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	75fb      	strb	r3, [r7, #23]
		uint8_t	lat_p0	= (uint8_t) (lat_i / 250UL);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	4a36      	ldr	r2, [pc, #216]	; (800474c <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	75bb      	strb	r3, [r7, #22]

		lon_i -= lon_p0 * 250UL;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	22fa      	movs	r2, #250	; 0xfa
 8004680:	fb02 f303 	mul.w	r3, r2, r3
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p0 * 250UL;
 800468a:	7dbb      	ldrb	r3, [r7, #22]
 800468c:	22fa      	movs	r2, #250	; 0xfa
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p1 = (uint8_t) (lon_i / 25UL);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	757b      	strb	r3, [r7, #21]
		uint8_t lat_p1 = (uint8_t) (lat_i / 25UL);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	4a2a      	ldr	r2, [pc, #168]	; (8004750 <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	08db      	lsrs	r3, r3, #3
 80046ae:	753b      	strb	r3, [r7, #20]

		lon_i -= lon_p1 * 25UL;
 80046b0:	7d7a      	ldrb	r2, [r7, #21]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p1 * 25UL;
 80046c2:	7d3a      	ldrb	r2, [r7, #20]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009a      	lsls	r2, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p2 = lon_i;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	74fb      	strb	r3, [r7, #19]
		uint8_t lat_p2 = lat_i;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	74bb      	strb	r3, [r7, #18]

		/* Output string */
		*(tgtStr + 0)	= 'A' + lon_p0;
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	3341      	adds	r3, #65	; 0x41
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 1)	= 'A' + lat_p0;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3301      	adds	r3, #1
 80046ea:	7dba      	ldrb	r2, [r7, #22]
 80046ec:	3241      	adds	r2, #65	; 0x41
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 2)	= '0' + lon_p1;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3302      	adds	r3, #2
 80046f6:	7d7a      	ldrb	r2, [r7, #21]
 80046f8:	3230      	adds	r2, #48	; 0x30
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 3)	= '0' + lat_p1;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3303      	adds	r3, #3
 8004702:	7d3a      	ldrb	r2, [r7, #20]
 8004704:	3230      	adds	r2, #48	; 0x30
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 4)	= 'a' + lon_p2;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3304      	adds	r3, #4
 800470e:	7cfa      	ldrb	r2, [r7, #19]
 8004710:	3261      	adds	r2, #97	; 0x61
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 5)	= 'a' + lat_p2;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3305      	adds	r3, #5
 800471a:	7cba      	ldrb	r2, [r7, #18]
 800471c:	3261      	adds	r2, #97	; 0x61
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 6)	= 0;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3306      	adds	r3, #6
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]

		return 0;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <main_get_MaidenheadLocator_from_LatLon+0x1c4>
	}

	/* Error */
	return 1;
 800472e:	2301      	movs	r3, #1
}
 8004730:	4618      	mov	r0, r3
 8004732:	3724      	adds	r7, #36	; 0x24
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	c2b40000 	.word	0xc2b40000
 8004740:	42b40000 	.word	0x42b40000
 8004744:	c3340000 	.word	0xc3340000
 8004748:	43340000 	.word	0x43340000
 800474c:	10624dd3 	.word	0x10624dd3
 8004750:	51eb851f 	.word	0x51eb851f

08004754 <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)
  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8004758:	4b80      	ldr	r3, [pc, #512]	; (800495c <mainLoop_PLL_calc+0x208>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  gI2cDacMode = 0b00;
 800475e:	4b80      	ldr	r3, [pc, #512]	; (8004960 <mainLoop_PLL_calc+0x20c>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8004764:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <mainLoop_PLL_calc+0x210>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d012      	beq.n	8004792 <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 800476c:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <mainLoop_PLL_calc+0x214>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800496c <mainLoop_PLL_calc+0x218>
 8004776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d508      	bpl.n	8004792 <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  giTim2Ch2_TicksDiff 	= 0L;
 8004780:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
			  giTim2Ch2_TicksEvt	= 0UL;
 8004786:	4b7b      	ldr	r3, [pc, #492]	; (8004974 <mainLoop_PLL_calc+0x220>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 800478c:	4b73      	ldr	r3, [pc, #460]	; (800495c <mainLoop_PLL_calc+0x208>)
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (gUbloxTimeAcc >= 250UL) {  // when worse than that stop time tracking
 8004792:	4b79      	ldr	r3, [pc, #484]	; (8004978 <mainLoop_PLL_calc+0x224>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2bf9      	cmp	r3, #249	; 0xf9
 8004798:	d908      	bls.n	80047ac <mainLoop_PLL_calc+0x58>
		  /* Keep sum-up registers cleared */
		  giTim2Ch2_TicksDiff 	= 0L;
 800479a:	4b75      	ldr	r3, [pc, #468]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
		  giTim2Ch2_TicksEvt	= 0UL;
 80047a0:	4b74      	ldr	r3, [pc, #464]	; (8004974 <mainLoop_PLL_calc+0x220>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 80047a6:	4b6d      	ldr	r3, [pc, #436]	; (800495c <mainLoop_PLL_calc+0x208>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
	  }

	  if (giTim2Ch2_TicksEvt > 15) {
 80047ac:	4b71      	ldr	r3, [pc, #452]	; (8004974 <mainLoop_PLL_calc+0x220>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	f240 80c8 	bls.w	8004946 <mainLoop_PLL_calc+0x1f2>
		  /* Fractions accounting */
		  if (0 < giTim2Ch2_TicksDiff) {
 80047b6:	4b6e      	ldr	r3, [pc, #440]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dd2d      	ble.n	800481a <mainLoop_PLL_calc+0xc6>
			  if (giTim2Ch2_ppm > 0.0f) {
 80047be:	4b6f      	ldr	r3, [pc, #444]	; (800497c <mainLoop_PLL_calc+0x228>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	dd12      	ble.n	80047f4 <mainLoop_PLL_calc+0xa0>
				  gI2cDacFraction -= giTim2Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 80047ce:	4b68      	ldr	r3, [pc, #416]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047da:	eddf 6a69 	vldr	s13, [pc, #420]	; 8004980 <mainLoop_PLL_calc+0x22c>
 80047de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047e2:	4b68      	ldr	r3, [pc, #416]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80047e4:	ed93 7a00 	vldr	s14, [r3]
 80047e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ec:	4b65      	ldr	r3, [pc, #404]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80047ee:	edc3 7a00 	vstr	s15, [r3]
 80047f2:	e043      	b.n	800487c <mainLoop_PLL_calc+0x128>
			  } else {
				  gI2cDacFraction += giTim2Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 80047f4:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004800:	eddf 6a61 	vldr	s13, [pc, #388]	; 8004988 <mainLoop_PLL_calc+0x234>
 8004804:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004808:	4b5e      	ldr	r3, [pc, #376]	; (8004984 <mainLoop_PLL_calc+0x230>)
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004814:	edc3 7a00 	vstr	s15, [r3]
 8004818:	e030      	b.n	800487c <mainLoop_PLL_calc+0x128>
			  }
		  }
		  else if (giTim2Ch2_TicksDiff < 0) {
 800481a:	4b55      	ldr	r3, [pc, #340]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da2c      	bge.n	800487c <mainLoop_PLL_calc+0x128>
			  if (giTim2Ch2_ppm < 0.0f) {
 8004822:	4b56      	ldr	r3, [pc, #344]	; (800497c <mainLoop_PLL_calc+0x228>)
 8004824:	edd3 7a00 	vldr	s15, [r3]
 8004828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	d512      	bpl.n	8004858 <mainLoop_PLL_calc+0x104>
				  gI2cDacFraction -= giTim2Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 8004832:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800483e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004980 <mainLoop_PLL_calc+0x22c>
 8004842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004848:	ed93 7a00 	vldr	s14, [r3]
 800484c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004852:	edc3 7a00 	vstr	s15, [r3]
 8004856:	e011      	b.n	800487c <mainLoop_PLL_calc+0x128>
			  } else {
				  gI2cDacFraction += giTim2Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004864:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004988 <mainLoop_PLL_calc+0x234>
 8004868:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800486c:	4b45      	ldr	r3, [pc, #276]	; (8004984 <mainLoop_PLL_calc+0x230>)
 800486e:	edd3 7a00 	vldr	s15, [r3]
 8004872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004876:	4b43      	ldr	r3, [pc, #268]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004878:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (gI2cDacFraction > +0.501f) {
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <mainLoop_PLL_calc+0x230>)
 800487e:	edd3 7a00 	vldr	s15, [r3]
 8004882:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800498c <mainLoop_PLL_calc+0x238>
 8004886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	dd28      	ble.n	80048e2 <mainLoop_PLL_calc+0x18e>
			  if (gI2cDacVal < 2046) {
 8004890:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8004898:	4293      	cmp	r3, r2
 800489a:	d805      	bhi.n	80048a8 <mainLoop_PLL_calc+0x154>
				  ++gI2cDacVal;
 800489c:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 80048a6:	801a      	strh	r2, [r3, #0]
			  }

			  gI2cDacFraction -= 1.0f;
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80048aa:	edd3 7a00 	vldr	s15, [r3]
 80048ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048b6:	4b33      	ldr	r3, [pc, #204]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80048b8:	edc3 7a00 	vstr	s15, [r3]

			  if (gI2cDacFraction > +0.501f) {
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80048be:	edd3 7a00 	vldr	s15, [r3]
 80048c2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800498c <mainLoop_PLL_calc+0x238>
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	dc00      	bgt.n	80048d2 <mainLoop_PLL_calc+0x17e>
		  giTim2Ch2_TicksDiff	= 0UL;
	  }
  }

#endif
}
 80048d0:	e03f      	b.n	8004952 <mainLoop_PLL_calc+0x1fe>
				  gI2cDacFraction = +0.5f;
 80048d2:	4b2c      	ldr	r3, [pc, #176]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80048d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80048d8:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <mainLoop_PLL_calc+0x208>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
}
 80048e0:	e037      	b.n	8004952 <mainLoop_PLL_calc+0x1fe>
		  else if (gI2cDacFraction < -0.501f) {
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <mainLoop_PLL_calc+0x230>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004994 <mainLoop_PLL_calc+0x240>
 80048ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d400      	bmi.n	80048f8 <mainLoop_PLL_calc+0x1a4>
}
 80048f6:	e02c      	b.n	8004952 <mainLoop_PLL_calc+0x1fe>
			  if (gI2cDacVal > 0) {
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <mainLoop_PLL_calc+0x1b8>
				  --gI2cDacVal;
 8004900:	4b23      	ldr	r3, [pc, #140]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <mainLoop_PLL_calc+0x23c>)
 800490a:	801a      	strh	r2, [r3, #0]
			  gI2cDacFraction += 1.0f;
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <mainLoop_PLL_calc+0x230>)
 800490e:	edd3 7a00 	vldr	s15, [r3]
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <mainLoop_PLL_calc+0x230>)
 800491c:	edc3 7a00 	vstr	s15, [r3]
			  if (gI2cDacFraction < -0.501f) {
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004922:	edd3 7a00 	vldr	s15, [r3]
 8004926:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004994 <mainLoop_PLL_calc+0x240>
 800492a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d400      	bmi.n	8004936 <mainLoop_PLL_calc+0x1e2>
}
 8004934:	e00d      	b.n	8004952 <mainLoop_PLL_calc+0x1fe>
				  gI2cDacFraction = -0.5f;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <mainLoop_PLL_calc+0x230>)
 8004938:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800493c:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <mainLoop_PLL_calc+0x208>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
}
 8004944:	e005      	b.n	8004952 <mainLoop_PLL_calc+0x1fe>
		  giTim2Ch2_TicksDiff	= 0UL;
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <mainLoop_PLL_calc+0x21c>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
		  gpioLockedLED = GPIO_PIN_RESET;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <mainLoop_PLL_calc+0x208>)
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000244 	.word	0x20000244
 8004960:	20000255 	.word	0x20000255
 8004964:	20000246 	.word	0x20000246
 8004968:	2000024c 	.word	0x2000024c
 800496c:	42200000 	.word	0x42200000
 8004970:	200005c8 	.word	0x200005c8
 8004974:	200005c4 	.word	0x200005c4
 8004978:	2000000c 	.word	0x2000000c
 800497c:	200005d0 	.word	0x200005d0
 8004980:	47435000 	.word	0x47435000
 8004984:	2000025c 	.word	0x2000025c
 8004988:	48435000 	.word	0x48435000
 800498c:	3f004189 	.word	0x3f004189
 8004990:	20000258 	.word	0x20000258
 8004994:	bf004189 	.word	0xbf004189

08004998 <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
	  }

# endif

#endif
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
	}
#endif

	/* Request only when needed */
	{
		if (!gUbloxNavPosllh.iTOW) {
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <mainLoop_ublox_requests+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <mainLoop_ublox_requests+0x12>
			ublox_NavPosllh_req(&gUbloxNavPosllh);
 80049b4:	480c      	ldr	r0, [pc, #48]	; (80049e8 <mainLoop_ublox_requests+0x40>)
 80049b6:	f002 f8ef 	bl	8006b98 <ublox_NavPosllh_req>
		}

		if (!gUbloxNavClock.iTOW) {
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <mainLoop_ublox_requests+0x44>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <mainLoop_ublox_requests+0x20>
			ublox_NavClock_req(&gUbloxNavClock);
 80049c2:	480a      	ldr	r0, [pc, #40]	; (80049ec <mainLoop_ublox_requests+0x44>)
 80049c4:	f002 f924 	bl	8006c10 <ublox_NavClock_req>
		}

		if (!gUbloxNavDop.iTOW) {
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <mainLoop_ublox_requests+0x48>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <mainLoop_ublox_requests+0x2e>
			ublox_NavDop_req(&gUbloxNavDop);
 80049d0:	4807      	ldr	r0, [pc, #28]	; (80049f0 <mainLoop_ublox_requests+0x48>)
 80049d2:	f002 f959 	bl	8006c88 <ublox_NavDop_req>
		}

		if (!gUbloxNavSvinfo.iTOW) {
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <mainLoop_ublox_requests+0x4c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <mainLoop_ublox_requests+0x3c>
			ublox_NavSvinfo_req(&gUbloxNavSvinfo);
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <mainLoop_ublox_requests+0x4c>)
 80049e0:	f002 f98e 	bl	8006d00 <ublox_NavSvinfo_req>
		}
	}
}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	200042ac 	.word	0x200042ac
 80049ec:	200042c8 	.word	0x200042c8
 80049f0:	200042dc 	.word	0x200042dc
 80049f4:	200042f0 	.word	0x200042f0

080049f8 <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	gUbloxRespBf = ublox_All_resp();
 80049fc:	f002 f9bc 	bl	8006d78 <ublox_All_resp>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <mainLoop_ublox_waitForResponses+0x1c>)
 8004a04:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	gUbloxTimeAcc = gUbloxNavClock.tAcc;
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <mainLoop_ublox_waitForResponses+0x20>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <mainLoop_ublox_waitForResponses+0x24>)
 8004a0c:	6013      	str	r3, [r2, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200042a8 	.word	0x200042a8
 8004a18:	200042c8 	.word	0x200042c8
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8004a20:	b480      	push	{r7}
 8004a22:	b08d      	sub	sp, #52	; 0x34
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8004a28:	2318      	movs	r3, #24
 8004a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004a3a:	e013      	b.n	8004a64 <mainLoop_ublox_svinfo_sort+0x44>
		elevSortSrcCh[srcIdx] = srcIdx;
 8004a3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a44:	4413      	add	r3, r2
 8004a46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004a4a:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8004a4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004a64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a68:	2b17      	cmp	r3, #23
 8004a6a:	d9e7      	bls.n	8004a3c <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004a72:	e098      	b.n	8004ba6 <mainLoop_ublox_svinfo_sort+0x186>
		uint8_t elevMaxCh 	= 0xffU;
 8004a74:	23ff      	movs	r3, #255	; 0xff
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 8004a7a:	2381      	movs	r3, #129	; 0x81
 8004a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004a8c:	e044      	b.n	8004b18 <mainLoop_ublox_svinfo_sort+0xf8>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8004a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a96:	4413      	add	r3, r2
 8004a98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= gUbloxNavSvinfo.elev[elevCh];
 8004aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004aa4:	4a46      	ldr	r2, [pc, #280]	; (8004bc0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (gUbloxNavSvinfo.quality[elevCh] & 0x0dU) && !(gUbloxNavSvinfo.quality[elevCh] & 0x10U);
 8004ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ab4:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004abc:	f003 030d 	and.w	r3, r3, #13
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <mainLoop_ublox_svinfo_sort+0xbc>
 8004ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ac8:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <mainLoop_ublox_svinfo_sort+0x1a0>)
 8004aca:	4413      	add	r3, r2
 8004acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <mainLoop_ublox_svinfo_sort+0xbc>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <mainLoop_ublox_svinfo_sort+0xbe>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 8004ae2:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 8004ae6:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004aea:	429a      	cmp	r2, r3
 8004aec:	dd0f      	ble.n	8004b0e <mainLoop_ublox_svinfo_sort+0xee>
 8004aee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <mainLoop_ublox_svinfo_sort+0xee>
				srcIdxHit	= srcIdx;
 8004af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004afa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8004afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 8004b06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b12:	3301      	adds	r3, #1
 8004b14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004b18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3b4      	bcc.n	8004a8e <mainLoop_ublox_svinfo_sort+0x6e>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8004b24:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dd04      	ble.n	8004b36 <mainLoop_ublox_svinfo_sort+0x116>
			++posElevCnt;
 8004b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b30:	3301      	adds	r3, #1
 8004b32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 8004b36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004b42:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8004b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004b4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b56:	e013      	b.n	8004b80 <mainLoop_ublox_svinfo_sort+0x160>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 8004b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b62:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004b66:	440a      	add	r2, r1
 8004b68:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8004b6c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004b70:	440b      	add	r3, r1
 8004b72:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004b84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d3e5      	bcc.n	8004b58 <mainLoop_ublox_svinfo_sort+0x138>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8004b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b94:	4413      	add	r3, r2
 8004b96:	22ff      	movs	r2, #255	; 0xff
 8004b98:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004baa:	2b17      	cmp	r3, #23
 8004bac:	f67f af62 	bls.w	8004a74 <mainLoop_ublox_svinfo_sort+0x54>
	}

	return posElevCnt;
 8004bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3734      	adds	r7, #52	; 0x34
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	200042f0 	.word	0x200042f0

08004bc4 <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
# if 0
		ublox_NavSvinfo_print(&gUbloxNavSvinfo);
# endif
	}
#endif
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <mainLoop_ow_temp_waitForResponse+0x54>)
 8004be6:	4413      	add	r3, r2
 8004be8:	78fc      	ldrb	r4, [r7, #3]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fd f847 	bl	8001c80 <onewireDS18B20_tempRead>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <mainLoop_ow_temp_waitForResponse+0x58>)
 8004bf8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <mainLoop_ow_temp_waitForResponse+0x58>)
 8004c00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004c12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <mainLoop_ow_temp_waitForResponse+0x5c>)
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	edc3 7a00 	vstr	s15, [r3]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}
 8004c28:	200064dc 	.word	0x200064dc
 8004c2c:	20000248 	.word	0x20000248
 8004c30:	2000024c 	.word	0x2000024c

08004c34 <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <mainLoop_ow_tempAlarm_req+0x30>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2001      	movs	r0, #1
 8004c60:	f7fc fe4c 	bl	80018fc <onewireMasterTree_search>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <mainLoop_ow_tempAlarm_req+0x34>)
 8004c6a:	701a      	strb	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000246 	.word	0x20000246
 8004c78:	200002d5 	.word	0x200002d5

08004c7c <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
	gAdc_VDDA 		= (3.0f * VREFINT_CAL) / gAdcVrefint_val;  // p. 448f
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <mainLoop_adc_volts_resp+0xa0>)
 8004c92:	edd3 7a00 	vldr	s15, [r3]
 8004c96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c9a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <mainLoop_adc_volts_resp+0xa4>)
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <mainLoop_adc_volts_resp+0xa8>)
 8004cb0:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh9_volts	= ( gAdcCh9_val * gAdc_VDDA / 65536.0f);
 8004cb4:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <mainLoop_adc_volts_resp+0xac>)
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <mainLoop_adc_volts_resp+0xa8>)
 8004cc2:	edd3 7a00 	vldr	s15, [r3]
 8004cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cca:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004d3c <mainLoop_adc_volts_resp+0xb0>
 8004cce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <mainLoop_adc_volts_resp+0xb4>)
 8004cd4:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh10_volts	= (gAdcCh10_val * gAdc_VDDA / 65536.0f);
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <mainLoop_adc_volts_resp+0xb8>)
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <mainLoop_adc_volts_resp+0xa8>)
 8004ce6:	edd3 7a00 	vldr	s15, [r3]
 8004cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cee:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004d3c <mainLoop_adc_volts_resp+0xb0>
 8004cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <mainLoop_adc_volts_resp+0xbc>)
 8004cf8:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh16_volts	= (gAdcCh16_val * gAdc_VDDA / 65536.0f);
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <mainLoop_adc_volts_resp+0xc0>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <mainLoop_adc_volts_resp+0xa8>)
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d12:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004d3c <mainLoop_adc_volts_resp+0xb0>
 8004d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <mainLoop_adc_volts_resp+0xc4>)
 8004d1c:	edc3 7a00 	vstr	s15, [r3]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	08013410 	.word	0x08013410
 8004d30:	20000222 	.word	0x20000222
 8004d34:	20000224 	.word	0x20000224
 8004d38:	2000021c 	.word	0x2000021c
 8004d3c:	47800000 	.word	0x47800000
 8004d40:	20000228 	.word	0x20000228
 8004d44:	2000021e 	.word	0x2000021e
 8004d48:	2000022c 	.word	0x2000022c
 8004d4c:	20000220 	.word	0x20000220
 8004d50:	20000230 	.word	0x20000230

08004d54 <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
		  gAdcCh16_val,
		  gAdcCh16_val,
		  gAdcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
#endif
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
	if (giTim2Ch2_TicksEvt) {
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <mainLoop_tim_deviation_resp+0xe4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05e      	beq.n	8004e2e <mainLoop_tim_deviation_resp+0xca>
		/* Export accumulated deviation */
		if (giTim2Ch2_TicksDiff >= 0L) {
 8004d70:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <mainLoop_tim_deviation_resp+0xe8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db20      	blt.n	8004dba <mainLoop_tim_deviation_resp+0x56>
			giTim2Ch2_TicksSumDev = (int32_t) (+0.5f + giTim2Ch2_TicksDiff * 100.0f / (6.0f * giTim2Ch2_TicksEvt));
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <mainLoop_tim_deviation_resp+0xe8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d84:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004e50 <mainLoop_tim_deviation_resp+0xec>
 8004d88:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d8c:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <mainLoop_tim_deviation_resp+0xe4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d98:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db0:	ee17 2a90 	vmov	r2, s15
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <mainLoop_tim_deviation_resp+0xf0>)
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e01f      	b.n	8004dfa <mainLoop_tim_deviation_resp+0x96>
		}
		else {
			giTim2Ch2_TicksSumDev = (int32_t) (-0.5f + giTim2Ch2_TicksDiff * 100.0f / (6.0f * giTim2Ch2_TicksEvt));
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <mainLoop_tim_deviation_resp+0xe8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e50 <mainLoop_tim_deviation_resp+0xec>
 8004dca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <mainLoop_tim_deviation_resp+0xe4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004dde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df2:	ee17 2a90 	vmov	r2, s15
 8004df6:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <mainLoop_tim_deviation_resp+0xf0>)
 8004df8:	601a      	str	r2, [r3, #0]
		}

		gMdevPsS = giTim2Ch2_TicksDiff * 100.0f / (6.0f * giTim2Ch2_TicksEvt);
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <mainLoop_tim_deviation_resp+0xe8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e06:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004e50 <mainLoop_tim_deviation_resp+0xec>
 8004e0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <mainLoop_tim_deviation_resp+0xe4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004e1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <mainLoop_tim_deviation_resp+0xf4>)
 8004e28:	edc3 7a00 	vstr	s15, [r3]
	}
	else {
		giTim2Ch2_TicksSumDev 	= 0L;
		gMdevPsS 		= 0.0f;
	}
}
 8004e2c:	e006      	b.n	8004e3c <mainLoop_tim_deviation_resp+0xd8>
		giTim2Ch2_TicksSumDev 	= 0L;
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <mainLoop_tim_deviation_resp+0xf0>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
		gMdevPsS 		= 0.0f;
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <mainLoop_tim_deviation_resp+0xf4>)
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	200005c4 	.word	0x200005c4
 8004e4c:	200005c8 	.word	0x200005c8
 8004e50:	42c80000 	.word	0x42c80000
 8004e54:	200005cc 	.word	0x200005cc
 8004e58:	200002fc 	.word	0x200002fc

08004e5c <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
			  gMdevPsS);
		msg[4] = chr;
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
# endif
#endif
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b093      	sub	sp, #76	; 0x4c
 8004e7c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* Early setting, if possible */
  MX_GPIO_Init();
 8004e7e:	f7fc fb69 	bl	8001554 <MX_GPIO_Init>

  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004e82:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e88:	e002      	b.n	8004e90 <main+0x18>
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f9      	bne.n	8004e8a <main+0x12>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e96:	f002 fb97 	bl	80075c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e9a:	f000 fbd3 	bl	8005644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e9e:	f7fc fb59 	bl	8001554 <MX_GPIO_Init>
  MX_RTC_Init();
 8004ea2:	f000 fc49 	bl	8005738 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004ea6:	f001 fa35 	bl	8006314 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004eaa:	f001 fa63 	bl	8006374 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004eae:	f7fc f89f 	bl	8000ff0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004eb2:	f7fc ff41 	bl	8001d38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004eb6:	f000 fc97 	bl	80057e8 <MX_SPI1_Init>
  MX_DMA_Init();
 8004eba:	f7fc fb25 	bl	8001508 <MX_DMA_Init>
  MX_TIM2_Init();
 8004ebe:	f000 ff01 	bl	8005cc4 <MX_TIM2_Init>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004ec6:	f107 0310 	add.w	r3, r7, #16
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fc ffde 	bl	8001e8c <i2cBusGetDeviceList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <main+0x94>
	  /* Switch DAC to high impedance (500kR) mode */
	  gI2cDacModeLast	= 0b11;
 8004ee0:	4b89      	ldr	r3, [pc, #548]	; (8005108 <main+0x290>)
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	701a      	strb	r2, [r3, #0]
	  gI2cDacMode		= 0b11;
 8004ee6:	4b89      	ldr	r3, [pc, #548]	; (800510c <main+0x294>)
 8004ee8:	2203      	movs	r2, #3
 8004eea:	701a      	strb	r2, [r3, #0]
	  gI2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004eec:	4b88      	ldr	r3, [pc, #544]	; (8005110 <main+0x298>)
 8004eee:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8004ef2:	801a      	strh	r2, [r3, #0]
	  gI2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8004ef4:	4b87      	ldr	r3, [pc, #540]	; (8005114 <main+0x29c>)
 8004ef6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8004efa:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 8004efc:	4b83      	ldr	r3, [pc, #524]	; (800510c <main+0x294>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4a84      	ldr	r2, [pc, #528]	; (8005114 <main+0x29c>)
 8004f02:	8812      	ldrh	r2, [r2, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fd f816 	bl	8001f38 <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <main+0xa2>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004f16:	f7fd f9df 	bl	80022d8 <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <main+0xb0>
	  i2cSmartLCD_Gfx240x128_Welcome();
 8004f24:	f7fd ff30 	bl	8002d88 <i2cSmartLCD_Gfx240x128_Welcome>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
  }
#endif

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 8004f28:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <main+0x2a0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004f2e:	4b7a      	ldr	r3, [pc, #488]	; (8005118 <main+0x2a0>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	2110      	movs	r1, #16
 8004f36:	4879      	ldr	r0, [pc, #484]	; (800511c <main+0x2a4>)
 8004f38:	f004 fdd0 	bl	8009adc <HAL_GPIO_WritePin>

  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8004f3c:	4b78      	ldr	r3, [pc, #480]	; (8005120 <main+0x2a8>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 8004f42:	4b77      	ldr	r3, [pc, #476]	; (8005120 <main+0x2a8>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f50:	f004 fdc4 	bl	8009adc <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 8004f54:	f001 fdfa 	bl	8006b4c <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8004f58:	f001 fbaa 	bl	80066b0 <ubloxUartSpeedFast>

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  do {

#if defined(PLL_BY_SOFTWARE)
	  if (ubloxSetFrequency(1U)) {
 8004f62:	2001      	movs	r0, #1
 8004f64:	f001 fcaa 	bl	80068bc <ubloxSetFrequency>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d014      	beq.n	8004f98 <main+0x120>
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		  }
#endif
		  if (!(--ubloxRetries)) {
 8004f6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <main+0x116>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <main+0x2ac>)
 8004f82:	61fb      	str	r3, [r7, #28]
			  uint32_t aircr_val = 0x05fa0304UL;
 8004f84:	4b68      	ldr	r3, [pc, #416]	; (8005128 <main+0x2b0>)
 8004f86:	61bb      	str	r3, [r7, #24]
			  *AIRCR = aircr_val;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300UL);
 8004f8e:	f240 5014 	movw	r0, #1300	; 0x514
 8004f92:	f002 fb59 	bl	8007648 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8004f96:	e002      	b.n	8004f9e <main+0x126>
		  gpioHoRelayOut = GPIO_PIN_SET;
 8004f98:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <main+0x2a0>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
	  break;
 8004f9e:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004fa0:	4b5d      	ldr	r3, [pc, #372]	; (8005118 <main+0x2a0>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	485c      	ldr	r0, [pc, #368]	; (800511c <main+0x2a4>)
 8004faa:	f004 fd97 	bl	8009adc <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8004fae:	f7fc fa61 	bl	8001474 <adc_init>


  /* TIMER: Prepare the Time Capture for TIM2 CH2 (GPS PPS), TIM15 CH1 fractional reload and Time Capture of TIM15 CH2 (DCF77 Phase) */
  tim_start();
 8004fb2:	f001 f8f5 	bl	80061a0 <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <main+0x150>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fd f9ac 	bl	8002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <main+0x162>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f7fd ff0f 	bl	8002df8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 8004fda:	2110      	movs	r1, #16
 8004fdc:	4853      	ldr	r0, [pc, #332]	; (800512c <main+0x2b4>)
 8004fde:	f7fe fe0d 	bl	8003bfc <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 8004fe2:	4a52      	ldr	r2, [pc, #328]	; (800512c <main+0x2b4>)
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fc fc88 	bl	80018fc <onewireMasterTree_search>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <main+0x2b8>)
 8004ff2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, msg, len, 25);
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffa:	e00e      	b.n	800501a <main+0x1a2>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 8004ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4a4a      	ldr	r2, [pc, #296]	; (800512c <main+0x2b4>)
 8005004:	4413      	add	r3, r2
 8005006:	2228      	movs	r2, #40	; 0x28
 8005008:	2132      	movs	r1, #50	; 0x32
 800500a:	200c      	movs	r0, #12
 800500c:	f7fc fd6e 	bl	8001aec <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 8005010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005014:	3301      	adds	r3, #1
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	4b45      	ldr	r3, [pc, #276]	; (8005130 <main+0x2b8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005022:	429a      	cmp	r2, r3
 8005024:	d3ea      	bcc.n	8004ffc <main+0x184>
#endif
	  }
  }

  /* Generate DCF77 pseudo phase noise modulation */
  calcDcfPhasemod();
 8005026:	f7fe fe01 	bl	8003c2c <calcDcfPhasemod>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 8005030:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 810f 	bne.w	8005258 <main+0x3e0>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 800503a:	f7ff fcdd 	bl	80049f8 <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 800503e:	483d      	ldr	r0, [pc, #244]	; (8005134 <main+0x2bc>)
 8005040:	f001 f8c6 	bl	80061d0 <tim_get_timeStamp>
 8005044:	4603      	mov	r3, r0
 8005046:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <main+0x2c0>)
 8005048:	6013      	str	r3, [r2, #0]

#if defined(DCF77_ENABLED)  &&  defined(PLL_BY_SOFTWARE)
		  /* Decode PRN modulation */
		  {
			  static uint8_t sub32Frm 	= 0U;
			  uint16_t shiftPos 		= 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	81fb      	strh	r3, [r7, #14]
			  uint16_t corSum			= 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	81bb      	strh	r3, [r7, #12]

			  /* Copy current second phase timings to calculation array - 160 ms for 3x 1/16 subframe */
			  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = calcDcfPrnCorrelation(sub32Frm, giTim2Ch4_Phase_ary, &shiftPos, &corSum);
 8005052:	4b3a      	ldr	r3, [pc, #232]	; (800513c <main+0x2c4>)
 8005054:	7818      	ldrb	r0, [r3, #0]
 8005056:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <main+0x2c8>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	461c      	mov	r4, r3
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	f107 020e 	add.w	r2, r7, #14
 8005064:	4937      	ldr	r1, [pc, #220]	; (8005144 <main+0x2cc>)
 8005066:	f7fe fe21 	bl	8003cac <calcDcfPrnCorrelation>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <main+0x2d0>)
 8005070:	551a      	strb	r2, [r3, r4]

			  /* Start next cycle */
			  giTim2Ch4_Phase_ary_idx = 0U;
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <main+0x2d4>)
 8005074:	2200      	movs	r2, #0
 8005076:	801a      	strh	r2, [r3, #0]

			  if (corSum < 5000U) {  // TODO: find working value
 8005078:	89bb      	ldrh	r3, [r7, #12]
 800507a:	f241 3287 	movw	r2, #4999	; 0x1387
 800507e:	4293      	cmp	r3, r2
 8005080:	d813      	bhi.n	80050aa <main+0x232>
				  /* Clear unvalid data */
				  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = 0U;
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <main+0x2c8>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <main+0x2d0>)
 800508a:	2100      	movs	r1, #0
 800508c:	5499      	strb	r1, [r3, r2]

				  /* Try next two subframes */
				  sub32Frm += 2U;
 800508e:	4b2b      	ldr	r3, [pc, #172]	; (800513c <main+0x2c4>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3302      	adds	r3, #2
 8005094:	b2da      	uxtb	r2, r3
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <main+0x2c4>)
 8005098:	701a      	strb	r2, [r3, #0]
				  sub32Frm &= 0x1fU;
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <main+0x2c4>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <main+0x2c4>)
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e00a      	b.n	80050c0 <main+0x248>
			  }
			  else {
				  /* Subframe position fine tuning: start one subframe before the target point */
				  sub32Frm = ((shiftPos / 128U) + 0x1eU) & 0x1fU;
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	331e      	adds	r3, #30
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <main+0x2c4>)
 80050be:	701a      	strb	r2, [r3, #0]
			  }

			  /* Sync to first 10 x '1' bits for seconds [0 .. 9] */
			  if (((gDcfTimeCode_ary[gDcfTimeCode_ary_idx]) != 1) && (gDcfTimeCode_ary_idx < 10)) {
 80050c0:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <main+0x2c8>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <main+0x2d0>)
 80050c8:	5c9b      	ldrb	r3, [r3, r2]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d007      	beq.n	80050de <main+0x266>
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <main+0x2c8>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b09      	cmp	r3, #9
 80050d4:	d803      	bhi.n	80050de <main+0x266>
				  /* Resync to next starting minute */
				  gDcfTimeCode_ary_idx = 0U;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <main+0x2c8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e010      	b.n	8005100 <main+0x288>
			  }
			  else {
				  /* Go ahead */
				  gDcfTimeCode_ary_idx++;
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <main+0x2c8>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4b16      	ldr	r3, [pc, #88]	; (8005140 <main+0x2c8>)
 80050e8:	701a      	strb	r2, [r3, #0]

				  /* No more than 61 seconds in one minute (incl. extra second of a minute) */
				  if (gDcfTimeCode_ary_idx > 59U) {  // ignore any leap seconds
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <main+0x2c8>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b3b      	cmp	r3, #59	; 0x3b
 80050f0:	d906      	bls.n	8005100 <main+0x288>
					  gDcfTimeCode_ary_idx = 0U;
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <main+0x2c8>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]

					  /* End of a minute, calculate next minute data */
					  /*uint8_t status =*/
					  calcDcfTelegram(gDcfTimeCode_ary, &gDcfNxtMinuteTime);
 80050f8:	4915      	ldr	r1, [pc, #84]	; (8005150 <main+0x2d8>)
 80050fa:	4813      	ldr	r0, [pc, #76]	; (8005148 <main+0x2d0>)
 80050fc:	f7fe ffa6 	bl	800404c <calcDcfTelegram>
			  }
		  }
#endif

		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005106:	e042      	b.n	800518e <main+0x316>
 8005108:	20000254 	.word	0x20000254
 800510c:	20000255 	.word	0x20000255
 8005110:	20000256 	.word	0x20000256
 8005114:	20000258 	.word	0x20000258
 8005118:	20000245 	.word	0x20000245
 800511c:	48000400 	.word	0x48000400
 8005120:	20000244 	.word	0x20000244
 8005124:	e000ed0c 	.word	0xe000ed0c
 8005128:	05fa0304 	.word	0x05fa0304
 800512c:	200064dc 	.word	0x200064dc
 8005130:	20000246 	.word	0x20000246
 8005134:	20006654 	.word	0x20006654
 8005138:	2000054c 	.word	0x2000054c
 800513c:	2000058c 	.word	0x2000058c
 8005140:	20000508 	.word	0x20000508
 8005144:	20000608 	.word	0x20000608
 8005148:	2000050c 	.word	0x2000050c
 800514c:	20000600 	.word	0x20000600
 8005150:	20004294 	.word	0x20004294
			  if (gMtempWaitUntil[owDeviceIdx]) {
 8005154:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005158:	4aa7      	ldr	r2, [pc, #668]	; (80053f8 <main+0x580>)
 800515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <main+0x30c>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 8005162:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005166:	4aa4      	ldr	r2, [pc, #656]	; (80053f8 <main+0x580>)
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fd2e 	bl	8004bd4 <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 8005178:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800517c:	4a9e      	ldr	r2, [pc, #632]	; (80053f8 <main+0x580>)
 800517e:	2100      	movs	r1, #0
 8005180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005184:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005188:	3301      	adds	r3, #1
 800518a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800518e:	4b9b      	ldr	r3, [pc, #620]	; (80053fc <main+0x584>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005196:	429a      	cmp	r2, r3
 8005198:	d3dc      	bcc.n	8005154 <main+0x2dc>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 800519a:	4899      	ldr	r0, [pc, #612]	; (8005400 <main+0x588>)
 800519c:	f001 f818 	bl	80061d0 <tim_get_timeStamp>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4a98      	ldr	r2, [pc, #608]	; (8005404 <main+0x58c>)
 80051a4:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 80051a6:	f7fc f991 	bl	80014cc <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 80051aa:	f7ff fd6f 	bl	8004c8c <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 80051ae:	4894      	ldr	r0, [pc, #592]	; (8005400 <main+0x588>)
 80051b0:	f001 f80e 	bl	80061d0 <tim_get_timeStamp>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4a94      	ldr	r2, [pc, #592]	; (8005408 <main+0x590>)
 80051b8:	6013      	str	r3, [r2, #0]


		  /* Calculate Maidenhead Locator if not done, yet */
		  if ((gLocator[0] == 0) && gUbloxNavPosllh.iTOW) {
 80051ba:	4b94      	ldr	r3, [pc, #592]	; (800540c <main+0x594>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d12d      	bne.n	800521e <main+0x3a6>
 80051c2:	4b93      	ldr	r3, [pc, #588]	; (8005410 <main+0x598>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d029      	beq.n	800521e <main+0x3a6>
			  main_get_MaidenheadLocator_from_LatLon(sizeof(gLocator), gLocator, gUbloxNavPosllh.lat * 1e-7, gUbloxNavPosllh.lon * 1e-7);
 80051ca:	4b91      	ldr	r3, [pc, #580]	; (8005410 <main+0x598>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f9b8 	bl	8000544 <__aeabi_i2d>
 80051d4:	a386      	add	r3, pc, #536	; (adr r3, 80053f0 <main+0x578>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb fa1d 	bl	8000618 <__aeabi_dmul>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7fb fd0f 	bl	8000c08 <__aeabi_d2f>
 80051ea:	4604      	mov	r4, r0
 80051ec:	4b88      	ldr	r3, [pc, #544]	; (8005410 <main+0x598>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb f9a7 	bl	8000544 <__aeabi_i2d>
 80051f6:	a37e      	add	r3, pc, #504	; (adr r3, 80053f0 <main+0x578>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f7fb fa0c 	bl	8000618 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	f7fb fcfe 	bl	8000c08 <__aeabi_d2f>
 800520c:	4603      	mov	r3, r0
 800520e:	ee00 3a90 	vmov	s1, r3
 8005212:	ee00 4a10 	vmov	s0, r4
 8005216:	497d      	ldr	r1, [pc, #500]	; (800540c <main+0x594>)
 8005218:	2007      	movs	r0, #7
 800521a:	f7ff f9a7 	bl	800456c <main_get_MaidenheadLocator_from_LatLon>
		  }

		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 800521e:	f7ff fda1 	bl	8004d64 <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 8005222:	4877      	ldr	r0, [pc, #476]	; (8005400 <main+0x588>)
 8005224:	f000 ffd4 	bl	80061d0 <tim_get_timeStamp>
 8005228:	4603      	mov	r3, r0
 800522a:	4a7a      	ldr	r2, [pc, #488]	; (8005414 <main+0x59c>)
 800522c:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  mainLoop_PLL_calc();
 800522e:	f7ff fa91 	bl	8004754 <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 8005232:	4873      	ldr	r0, [pc, #460]	; (8005400 <main+0x588>)
 8005234:	f000 ffcc 	bl	80061d0 <tim_get_timeStamp>
 8005238:	4603      	mov	r3, r0
 800523a:	4a77      	ldr	r2, [pc, #476]	; (8005418 <main+0x5a0>)
 800523c:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 800523e:	4877      	ldr	r0, [pc, #476]	; (800541c <main+0x5a4>)
 8005240:	f7ff fbee 	bl	8004a20 <mainLoop_ublox_svinfo_sort>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b75      	ldr	r3, [pc, #468]	; (8005420 <main+0x5a8>)
 800524a:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 800524c:	486c      	ldr	r0, [pc, #432]	; (8005400 <main+0x588>)
 800524e:	f000 ffbf 	bl	80061d0 <tim_get_timeStamp>
 8005252:	4603      	mov	r3, r0
 8005254:	4a73      	ldr	r2, [pc, #460]	; (8005424 <main+0x5ac>)
 8005256:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Request these frames */
		  gUbloxNavClock.iTOW	= 0UL;
 8005258:	4b73      	ldr	r3, [pc, #460]	; (8005428 <main+0x5b0>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
		  gUbloxNavDop.iTOW		= 0UL;
 800525e:	4b73      	ldr	r3, [pc, #460]	; (800542c <main+0x5b4>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
		  gUbloxNavSvinfo.iTOW	= 0UL;
 8005264:	4b72      	ldr	r3, [pc, #456]	; (8005430 <main+0x5b8>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 800526a:	f7ff fb9d 	bl	80049a8 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 800526e:	4864      	ldr	r0, [pc, #400]	; (8005400 <main+0x588>)
 8005270:	f000 ffae 	bl	80061d0 <tim_get_timeStamp>
 8005274:	4603      	mov	r3, r0
 8005276:	4a6f      	ldr	r2, [pc, #444]	; (8005434 <main+0x5bc>)
 8005278:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 800527a:	f7ff fce3 	bl	8004c44 <mainLoop_ow_tempAlarm_req>

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 800527e:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <main+0x584>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <main+0x450>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 8005286:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <main+0x5c0>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <main+0x5c0>)
 8005290:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 8005292:	4b69      	ldr	r3, [pc, #420]	; (8005438 <main+0x5c0>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	4a59      	ldr	r2, [pc, #356]	; (80053fc <main+0x584>)
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	fbb3 f1f2 	udiv	r1, r3, r2
 800529e:	fb02 f201 	mul.w	r2, r2, r1
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b64      	ldr	r3, [pc, #400]	; (8005438 <main+0x5c0>)
 80052a8:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 80052aa:	4b63      	ldr	r3, [pc, #396]	; (8005438 <main+0x5c0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4a62      	ldr	r2, [pc, #392]	; (800543c <main+0x5c4>)
 80052b2:	4413      	add	r3, r2
 80052b4:	4a60      	ldr	r2, [pc, #384]	; (8005438 <main+0x5c0>)
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	4614      	mov	r4, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fc fc8b 	bl	8001bd6 <onewireDS18B20_tempReq>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a4d      	ldr	r2, [pc, #308]	; (80053f8 <main+0x580>)
 80052c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 80052c8:	484d      	ldr	r0, [pc, #308]	; (8005400 <main+0x588>)
 80052ca:	f000 ff81 	bl	80061d0 <tim_get_timeStamp>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a5b      	ldr	r2, [pc, #364]	; (8005440 <main+0x5c8>)
 80052d2:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 80052d4:	f7fc f8de 	bl	8001494 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 80052d8:	f7ff fdc7 	bl	8004e6a <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 80052dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 8182 	bne.w	80055ea <main+0x772>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 80052e6:	4b57      	ldr	r3, [pc, #348]	; (8005444 <main+0x5cc>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	2110      	movs	r1, #16
 80052ee:	4856      	ldr	r0, [pc, #344]	; (8005448 <main+0x5d0>)
 80052f0:	f004 fbf4 	bl	8009adc <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <main+0x5cc>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d120      	bne.n	800533e <main+0x4c6>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01b      	beq.n	800533e <main+0x4c6>
				  if ((gI2cDacModeLast != gI2cDacMode) || (gI2cDacValLast != gI2cDacVal)) {
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <main+0x5d4>)
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	4b51      	ldr	r3, [pc, #324]	; (8005450 <main+0x5d8>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d105      	bne.n	800531e <main+0x4a6>
 8005312:	4b50      	ldr	r3, [pc, #320]	; (8005454 <main+0x5dc>)
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	4b50      	ldr	r3, [pc, #320]	; (8005458 <main+0x5e0>)
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d00f      	beq.n	800533e <main+0x4c6>
					  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <main+0x5d8>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <main+0x5e0>)
 8005324:	8812      	ldrh	r2, [r2, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	2000      	movs	r0, #0
 800532a:	f7fc fe05 	bl	8001f38 <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  gI2cDacModeLast 	= gI2cDacMode;
 800532e:	4b48      	ldr	r3, [pc, #288]	; (8005450 <main+0x5d8>)
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	4b46      	ldr	r3, [pc, #280]	; (800544c <main+0x5d4>)
 8005334:	701a      	strb	r2, [r3, #0]
					  gI2cDacValLast 	= gI2cDacVal;
 8005336:	4b48      	ldr	r3, [pc, #288]	; (8005458 <main+0x5e0>)
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	4b46      	ldr	r3, [pc, #280]	; (8005454 <main+0x5dc>)
 800533c:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 800533e:	4830      	ldr	r0, [pc, #192]	; (8005400 <main+0x588>)
 8005340:	f000 ff46 	bl	80061d0 <tim_get_timeStamp>
 8005344:	4603      	mov	r3, r0
 8005346:	4a45      	ldr	r2, [pc, #276]	; (800545c <main+0x5e4>)
 8005348:	6013      	str	r3, [r2, #0]

		  /* Update Locked-LED */
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 800534a:	4b45      	ldr	r3, [pc, #276]	; (8005460 <main+0x5e8>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005358:	f004 fbc0 	bl	8009adc <HAL_GPIO_WritePin>

		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 800535c:	f7ff fc32 	bl	8004bc4 <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 8005360:	4827      	ldr	r0, [pc, #156]	; (8005400 <main+0x588>)
 8005362:	f000 ff35 	bl	80061d0 <tim_get_timeStamp>
 8005366:	4603      	mov	r3, r0
 8005368:	4a3e      	ldr	r2, [pc, #248]	; (8005464 <main+0x5ec>)
 800536a:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 800536c:	f7ff fd76 	bl	8004e5c <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 8005370:	4823      	ldr	r0, [pc, #140]	; (8005400 <main+0x588>)
 8005372:	f000 ff2d 	bl	80061d0 <tim_get_timeStamp>
 8005376:	4603      	mov	r3, r0
 8005378:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <main+0x5f0>)
 800537a:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 800537c:	f7ff fb0c 	bl	8004998 <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 8005380:	481f      	ldr	r0, [pc, #124]	; (8005400 <main+0x588>)
 8005382:	f000 ff25 	bl	80061d0 <tim_get_timeStamp>
 8005386:	4603      	mov	r3, r0
 8005388:	4a38      	ldr	r2, [pc, #224]	; (800546c <main+0x5f4>)
 800538a:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 800538c:	f7ff fce2 	bl	8004d54 <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 8005390:	481b      	ldr	r0, [pc, #108]	; (8005400 <main+0x588>)
 8005392:	f000 ff1d 	bl	80061d0 <tim_get_timeStamp>
 8005396:	4603      	mov	r3, r0
 8005398:	4a35      	ldr	r2, [pc, #212]	; (8005470 <main+0x5f8>)
 800539a:	6013      	str	r3, [r2, #0]


		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 800539c:	f7ff fc4a 	bl	8004c34 <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 80053a0:	f7ff fc6c 	bl	8004c7c <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 80053a4:	4816      	ldr	r0, [pc, #88]	; (8005400 <main+0x588>)
 80053a6:	f000 ff13 	bl	80061d0 <tim_get_timeStamp>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a31      	ldr	r2, [pc, #196]	; (8005474 <main+0x5fc>)
 80053ae:	6013      	str	r3, [r2, #0]

		  float temp = (owDs18b20_Temp[gMowSensorIdx] >> 4) + 0.5f;
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <main+0x5c0>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b30      	ldr	r3, [pc, #192]	; (8005478 <main+0x600>)
 80053b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053bc:	111b      	asrs	r3, r3, #4
 80053be:	b21b      	sxth	r3, r3
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  if (temp > 99.0f) {
 80053d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053d8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800547c <main+0x604>
 80053dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e4:	dd4e      	ble.n	8005484 <main+0x60c>
			  temp = 99.0f;
 80053e6:	4b26      	ldr	r3, [pc, #152]	; (8005480 <main+0x608>)
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	e055      	b.n	8005498 <main+0x620>
 80053ec:	f3af 8000 	nop.w
 80053f0:	9abcaf48 	.word	0x9abcaf48
 80053f4:	3e7ad7f2 	.word	0x3e7ad7f2
 80053f8:	200002f0 	.word	0x200002f0
 80053fc:	20000246 	.word	0x20000246
 8005400:	20006654 	.word	0x20006654
 8005404:	20000550 	.word	0x20000550
 8005408:	20000554 	.word	0x20000554
 800540c:	20000300 	.word	0x20000300
 8005410:	200042ac 	.word	0x200042ac
 8005414:	20000558 	.word	0x20000558
 8005418:	2000055c 	.word	0x2000055c
 800541c:	200002d8 	.word	0x200002d8
 8005420:	200002d6 	.word	0x200002d6
 8005424:	20000560 	.word	0x20000560
 8005428:	200042c8 	.word	0x200042c8
 800542c:	200042dc 	.word	0x200042dc
 8005430:	200042f0 	.word	0x200042f0
 8005434:	20000564 	.word	0x20000564
 8005438:	200002f8 	.word	0x200002f8
 800543c:	200064dc 	.word	0x200064dc
 8005440:	20000568 	.word	0x20000568
 8005444:	20000245 	.word	0x20000245
 8005448:	48000400 	.word	0x48000400
 800544c:	20000254 	.word	0x20000254
 8005450:	20000255 	.word	0x20000255
 8005454:	20000256 	.word	0x20000256
 8005458:	20000258 	.word	0x20000258
 800545c:	2000056c 	.word	0x2000056c
 8005460:	20000244 	.word	0x20000244
 8005464:	20000570 	.word	0x20000570
 8005468:	20000574 	.word	0x20000574
 800546c:	20000578 	.word	0x20000578
 8005470:	2000057c 	.word	0x2000057c
 8005474:	20000580 	.word	0x20000580
 8005478:	20000248 	.word	0x20000248
 800547c:	42c60000 	.word	0x42c60000
 8005480:	42c60000 	.word	0x42c60000
		  }
		  else if (temp < 0.0f) {
 8005484:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005490:	d502      	bpl.n	8005498 <main+0x620>
			  temp = 0.0f;
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
		  }


		  /* Drop NEO data when falling back to out-of-lock state */
		  if (!gpioLockedLED) {
 8005498:	4b56      	ldr	r3, [pc, #344]	; (80055f4 <main+0x77c>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <main+0x634>
			  gUbloxNavPosllh.iTOW 	= 0UL;
 80054a0:	4b55      	ldr	r3, [pc, #340]	; (80055f8 <main+0x780>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
			  gLocator[0] 			= 0x00U;
 80054a6:	4b55      	ldr	r3, [pc, #340]	; (80055fc <main+0x784>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
		  }

		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01f      	beq.n	80054f6 <main+0x67e>
			  if (!gpioLockedLED) {
 80054b6:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <main+0x77c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10d      	bne.n	80054da <main+0x662>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(((int16_t) temp), gUbloxTimeAcc);
 80054be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c6:	ee17 3a90 	vmov	r3, s15
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	4a4c      	ldr	r2, [pc, #304]	; (8005600 <main+0x788>)
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fc ff24 	bl	8002320 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 80054d8:	e00d      	b.n	80054f6 <main+0x67e>
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked(((int16_t) temp), gUbloxTimeAcc, giTim2Ch2_TicksSumDev);
 80054da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e2:	ee17 3a90 	vmov	r3, s15
 80054e6:	b21b      	sxth	r3, r3
 80054e8:	4a45      	ldr	r2, [pc, #276]	; (8005600 <main+0x788>)
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	4a45      	ldr	r2, [pc, #276]	; (8005604 <main+0x78c>)
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fc ff65 	bl	80023c0 <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 80054f6:	4844      	ldr	r0, [pc, #272]	; (8005608 <main+0x790>)
 80054f8:	f000 fe6a 	bl	80061d0 <tim_get_timeStamp>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a43      	ldr	r2, [pc, #268]	; (800560c <main+0x794>)
 8005500:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d068      	beq.n	80055de <main+0x766>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 800550c:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <main+0x77c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <main+0x6ca>
				  if (lcd1StateLast) {
 8005514:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <main+0x798>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <main+0x6a8>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 800551c:	f7fd fc34 	bl	8002d88 <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8005520:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	b21b      	sxth	r3, r3
 800552e:	4a34      	ldr	r2, [pc, #208]	; (8005600 <main+0x788>)
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd fc5f 	bl	8002df8 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ((int16_t) temp),
						  gUbloxTimeAcc);
				  lcd1StateLast = 0U;
 800553a:	4b35      	ldr	r3, [pc, #212]	; (8005610 <main+0x798>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e04d      	b.n	80055de <main+0x766>
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 8005542:	4b34      	ldr	r3, [pc, #208]	; (8005614 <main+0x79c>)
 8005544:	617b      	str	r3, [r7, #20]

				  if (!lcd1StateLast) {
 8005546:	4b32      	ldr	r3, [pc, #200]	; (8005610 <main+0x798>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <main+0x6dc>
					  /* Locked template */
#if defined(PLL_BY_SOFTWARE)
					  /* With DAC graph template */
					  i2cSmartLCD_Gfx240x128_Template(0x80000113UL);
 800554e:	4832      	ldr	r0, [pc, #200]	; (8005618 <main+0x7a0>)
 8005550:	f7fd fb02 	bl	8002b58 <i2cSmartLCD_Gfx240x128_Template>
					  i2cSmartLCD_Gfx240x128_Template(0x80000013UL);
#endif
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (700UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 8005554:	f002 f86c 	bl	8007630 <HAL_GetTick>
 8005558:	4b2c      	ldr	r3, [pc, #176]	; (800560c <main+0x794>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	441a      	add	r2, r3
 8005560:	4b2e      	ldr	r3, [pc, #184]	; (800561c <main+0x7a4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	fbb3 f2f2 	udiv	r2, r3, r2
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	fb01 f202 	mul.w	r2, r1, r2
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <main+0x7a8>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0b9b      	lsrs	r3, r3, #14
 800557c:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 800557e:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8005582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800558a:	ee17 3a90 	vmov	r3, s15
 800558e:	b21c      	sxth	r4, r3
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <main+0x788>)
 8005592:	681d      	ldr	r5, [r3, #0]
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <main+0x78c>)
 8005596:	681e      	ldr	r6, [r3, #0]
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <main+0x7ac>)
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <main+0x7b0>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <main+0x7b4>)
 80055a6:	ed92 7a00 	vldr	s14, [r2]
 80055aa:	4a21      	ldr	r2, [pc, #132]	; (8005630 <main+0x7b8>)
 80055ac:	8892      	ldrh	r2, [r2, #4]
 80055ae:	4921      	ldr	r1, [pc, #132]	; (8005634 <main+0x7bc>)
 80055b0:	7809      	ldrb	r1, [r1, #0]
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <main+0x784>)
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	4b20      	ldr	r3, [pc, #128]	; (8005638 <main+0x7c0>)
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <main+0x7c4>)
 80055bc:	9303      	str	r3, [sp, #12]
 80055be:	9102      	str	r1, [sp, #8]
 80055c0:	9201      	str	r2, [sp, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	eef0 0a47 	vmov.f32	s1, s14
 80055ca:	eeb0 0a67 	vmov.f32	s0, s15
 80055ce:	4633      	mov	r3, r6
 80055d0:	462a      	mov	r2, r5
 80055d2:	4621      	mov	r1, r4
 80055d4:	f7fd fcb0 	bl	8002f38 <i2cSmartLCD_Gfx240x128_Locked>
						  gUbloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &gUbloxNavSvinfo,
						  gLocator);
				  lcd1StateLast = 1U;
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <main+0x798>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 80055de:	480a      	ldr	r0, [pc, #40]	; (8005608 <main+0x790>)
 80055e0:	f000 fdf6 	bl	80061d0 <tim_get_timeStamp>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <main+0x7c8>)
 80055e8:	6013      	str	r3, [r2, #0]
# if 0
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
# endif
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  if (!loopEntry) {
 80055f0:	e51e      	b.n	8005030 <main+0x1b8>
 80055f2:	bf00      	nop
 80055f4:	20000244 	.word	0x20000244
 80055f8:	200042ac 	.word	0x200042ac
 80055fc:	20000300 	.word	0x20000300
 8005600:	2000000c 	.word	0x2000000c
 8005604:	200005cc 	.word	0x200005cc
 8005608:	20006654 	.word	0x20006654
 800560c:	20000584 	.word	0x20000584
 8005610:	2000058d 	.word	0x2000058d
 8005614:	03938700 	.word	0x03938700
 8005618:	80000113 	.word	0x80000113
 800561c:	2000054c 	.word	0x2000054c
 8005620:	45e7b273 	.word	0x45e7b273
 8005624:	200002fc 	.word	0x200002fc
 8005628:	20000258 	.word	0x20000258
 800562c:	2000025c 	.word	0x2000025c
 8005630:	200042dc 	.word	0x200042dc
 8005634:	200002d6 	.word	0x200002d6
 8005638:	200042f0 	.word	0x200042f0
 800563c:	200002d8 	.word	0x200002d8
 8005640:	20000588 	.word	0x20000588

08005644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b096      	sub	sp, #88	; 0x58
 8005648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	2244      	movs	r2, #68	; 0x44
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f009 fd16 	bl	800f084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005658:	463b      	mov	r3, r7
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800566a:	f006 f8dd 	bl	800b828 <HAL_PWREx_ControlVoltageScaling>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005674:	f000 f85a 	bl	800572c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005678:	f006 f8b8 	bl	800b7ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800567c:	4b21      	ldr	r3, [pc, #132]	; (8005704 <SystemClock_Config+0xc0>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <SystemClock_Config+0xc0>)
 8005684:	f023 0318 	bic.w	r3, r3, #24
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800568c:	2307      	movs	r3, #7
 800568e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005696:	2301      	movs	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800569a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800569e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80056a0:	2310      	movs	r3, #16
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056a4:	2302      	movs	r3, #2
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056a8:	2303      	movs	r3, #3
 80056aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80056ac:	2301      	movs	r3, #1
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80056b0:	230c      	movs	r3, #12
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80056b4:	2307      	movs	r3, #7
 80056b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80056b8:	2302      	movs	r3, #2
 80056ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80056bc:	2302      	movs	r3, #2
 80056be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	4618      	mov	r0, r3
 80056c6:	f006 f905 	bl	800b8d4 <HAL_RCC_OscConfig>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80056d0:	f000 f82c 	bl	800572c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056d4:	230f      	movs	r3, #15
 80056d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056d8:	2303      	movs	r3, #3
 80056da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80056e8:	463b      	mov	r3, r7
 80056ea:	2103      	movs	r1, #3
 80056ec:	4618      	mov	r0, r3
 80056ee:	f006 fd11 	bl	800c114 <HAL_RCC_ClockConfig>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80056f8:	f000 f818 	bl	800572c <Error_Handler>
  }
}
 80056fc:	bf00      	nop
 80056fe:	3758      	adds	r7, #88	; 0x58
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000

08005708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800571a:	f001 ff75 	bl	8007608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00

0800572c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005730:	b672      	cpsid	i
}
 8005732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005734:	e7fe      	b.n	8005734 <Error_Handler+0x8>
	...

08005738 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <MX_RTC_Init+0x48>)
 800573e:	4a11      	ldr	r2, [pc, #68]	; (8005784 <MX_RTC_Init+0x4c>)
 8005740:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <MX_RTC_Init+0x48>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <MX_RTC_Init+0x48>)
 800574a:	227f      	movs	r2, #127	; 0x7f
 800574c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <MX_RTC_Init+0x48>)
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <MX_RTC_Init+0x48>)
 8005756:	2200      	movs	r2, #0
 8005758:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <MX_RTC_Init+0x48>)
 800575c:	2200      	movs	r2, #0
 800575e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <MX_RTC_Init+0x48>)
 8005762:	2200      	movs	r2, #0
 8005764:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <MX_RTC_Init+0x48>)
 8005768:	2200      	movs	r2, #0
 800576a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800576c:	4804      	ldr	r0, [pc, #16]	; (8005780 <MX_RTC_Init+0x48>)
 800576e:	f007 f9ef 	bl	800cb50 <HAL_RTC_Init>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005778:	f7ff ffd8 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20006538 	.word	0x20006538
 8005784:	40002800 	.word	0x40002800

08005788 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b098      	sub	sp, #96	; 0x60
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	2254      	movs	r2, #84	; 0x54
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f009 fc73 	bl	800f084 <memset>
  if(rtcHandle->Instance==RTC)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <HAL_RTC_MspInit+0x58>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d117      	bne.n	80057d8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80057a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80057ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057b4:	f107 030c 	add.w	r3, r7, #12
 80057b8:	4618      	mov	r0, r3
 80057ba:	f006 fee3 	bl	800c584 <HAL_RCCEx_PeriphCLKConfig>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80057c4:	f7ff ffb2 	bl	800572c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <HAL_RTC_MspInit+0x5c>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <HAL_RTC_MspInit+0x5c>)
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80057d8:	bf00      	nop
 80057da:	3760      	adds	r7, #96	; 0x60
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40002800 	.word	0x40002800
 80057e4:	40021000 	.word	0x40021000

080057e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <MX_SPI1_Init+0x74>)
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <MX_SPI1_Init+0x78>)
 80057f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <MX_SPI1_Init+0x74>)
 80057f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <MX_SPI1_Init+0x74>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005800:	4b16      	ldr	r3, [pc, #88]	; (800585c <MX_SPI1_Init+0x74>)
 8005802:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005806:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <MX_SPI1_Init+0x74>)
 800580a:	2200      	movs	r2, #0
 800580c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <MX_SPI1_Init+0x74>)
 8005810:	2200      	movs	r2, #0
 8005812:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005814:	4b11      	ldr	r3, [pc, #68]	; (800585c <MX_SPI1_Init+0x74>)
 8005816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <MX_SPI1_Init+0x74>)
 800581e:	2200      	movs	r2, #0
 8005820:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <MX_SPI1_Init+0x74>)
 8005824:	2200      	movs	r2, #0
 8005826:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <MX_SPI1_Init+0x74>)
 800582a:	2200      	movs	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <MX_SPI1_Init+0x74>)
 8005830:	2200      	movs	r2, #0
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <MX_SPI1_Init+0x74>)
 8005836:	2207      	movs	r2, #7
 8005838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <MX_SPI1_Init+0x74>)
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <MX_SPI1_Init+0x74>)
 8005842:	2208      	movs	r2, #8
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005846:	4805      	ldr	r0, [pc, #20]	; (800585c <MX_SPI1_Init+0x74>)
 8005848:	f007 fa94 	bl	800cd74 <HAL_SPI_Init>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005852:	f7ff ff6b 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2000655c 	.word	0x2000655c
 8005860:	40013000 	.word	0x40013000

08005864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_SPI_MspInit+0x7c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d128      	bne.n	80058d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 800588c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005890:	6613      	str	r3, [r2, #96]	; 0x60
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 8005894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <HAL_SPI_MspInit+0x80>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80058b6:	23c2      	movs	r3, #194	; 0xc2
 80058b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ba:	2302      	movs	r3, #2
 80058bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c2:	2303      	movs	r3, #3
 80058c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80058c6:	2305      	movs	r3, #5
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	4619      	mov	r1, r3
 80058d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058d4:	f003 feb6 	bl	8009644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80058d8:	bf00      	nop
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40013000 	.word	0x40013000
 80058e4:	40021000 	.word	0x40021000

080058e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_MspInit+0x44>)
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	4a0e      	ldr	r2, [pc, #56]	; (800592c <HAL_MspInit+0x44>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6613      	str	r3, [r2, #96]	; 0x60
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_MspInit+0x44>)
 80058fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_MspInit+0x44>)
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <HAL_MspInit+0x44>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	6593      	str	r3, [r2, #88]	; 0x58
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_MspInit+0x44>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000

08005930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8005940:	2200      	movs	r2, #0
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	2019      	movs	r0, #25
 8005946:	f003 fbc1 	bl	80090cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800594a:	2019      	movs	r0, #25
 800594c:	f003 fbda 	bl	8009104 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005950:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <HAL_InitTick+0x9c>)
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <HAL_InitTick+0x9c>)
 8005956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800595a:	6613      	str	r3, [r2, #96]	; 0x60
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <HAL_InitTick+0x9c>)
 800595e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005968:	f107 0210 	add.w	r2, r7, #16
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f006 fd74 	bl	800c460 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005978:	f006 fd5c 	bl	800c434 <HAL_RCC_GetPCLK2Freq>
 800597c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <HAL_InitTick+0xa0>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	0c9b      	lsrs	r3, r3, #18
 8005988:	3b01      	subs	r3, #1
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <HAL_InitTick+0xa4>)
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <HAL_InitTick+0xa8>)
 8005990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <HAL_InitTick+0xa4>)
 8005994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005998:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800599a:	4a0e      	ldr	r2, [pc, #56]	; (80059d4 <HAL_InitTick+0xa4>)
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_InitTick+0xa4>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_InitTick+0xa4>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80059ac:	4809      	ldr	r0, [pc, #36]	; (80059d4 <HAL_InitTick+0xa4>)
 80059ae:	f007 fa84 	bl	800ceba <HAL_TIM_Base_Init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80059b8:	4806      	ldr	r0, [pc, #24]	; (80059d4 <HAL_InitTick+0xa4>)
 80059ba:	f007 fadf 	bl	800cf7c <HAL_TIM_Base_Start_IT>
 80059be:	4603      	mov	r3, r0
 80059c0:	e000      	b.n	80059c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3730      	adds	r7, #48	; 0x30
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	200065c0 	.word	0x200065c0
 80059d8:	40012c00 	.word	0x40012c00

080059dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059e0:	e7fe      	b.n	80059e0 <NMI_Handler+0x4>

080059e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <HardFault_Handler+0x4>

080059e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059ec:	e7fe      	b.n	80059ec <MemManage_Handler+0x4>

080059ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059f2:	e7fe      	b.n	80059f2 <BusFault_Handler+0x4>

080059f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059f8:	e7fe      	b.n	80059f8 <UsageFault_Handler+0x4>

080059fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a38:	4802      	ldr	r0, [pc, #8]	; (8005a44 <DMA1_Channel1_IRQHandler+0x10>)
 8005a3a:	f003 fd16 	bl	800946a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20006494 	.word	0x20006494

08005a48 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8005a4c:	4802      	ldr	r0, [pc, #8]	; (8005a58 <DMA1_Channel7_IRQHandler+0x10>)
 8005a4e:	f003 fd0c 	bl	800946a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000660c 	.word	0x2000660c

08005a5c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <ADC1_IRQHandler+0x10>)
 8005a62:	f002 f9d2 	bl	8007e0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20006430 	.word	0x20006430

08005a70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a74:	4802      	ldr	r0, [pc, #8]	; (8005a80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005a76:	f007 fc53 	bl	800d320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200065c0 	.word	0x200065c0

08005a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a88:	4802      	ldr	r0, [pc, #8]	; (8005a94 <TIM2_IRQHandler+0x10>)
 8005a8a:	f007 fc49 	bl	800d320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20006654 	.word	0x20006654

08005a98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <I2C1_EV_IRQHandler+0x10>)
 8005a9e:	f004 fb45 	bl	800a12c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	200064ec 	.word	0x200064ec

08005aac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005ab0:	4802      	ldr	r0, [pc, #8]	; (8005abc <I2C1_ER_IRQHandler+0x10>)
 8005ab2:	f004 fb55 	bl	800a160 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	200064ec 	.word	0x200064ec

08005ac0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ac4:	4802      	ldr	r0, [pc, #8]	; (8005ad0 <USART1_IRQHandler+0x10>)
 8005ac6:	f008 fa5b 	bl	800df80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	200066a0 	.word	0x200066a0

08005ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
	return 1;
 8005ad8:	2301      	movs	r3, #1
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <_kill>:

int _kill(int pid, int sig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005aee:	f009 fa91 	bl	800f014 <__errno>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2216      	movs	r2, #22
 8005af6:	601a      	str	r2, [r3, #0]
	return -1;
 8005af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_exit>:

void _exit (int status)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffe7 	bl	8005ae4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b16:	e7fe      	b.n	8005b16 <_exit+0x12>

08005b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e00a      	b.n	8005b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b2a:	f3af 8000 	nop.w
 8005b2e:	4601      	mov	r1, r0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	60ba      	str	r2, [r7, #8]
 8005b36:	b2ca      	uxtb	r2, r1
 8005b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dbf0      	blt.n	8005b2a <_read+0x12>
	}

return len;
 8005b48:	687b      	ldr	r3, [r7, #4]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e009      	b.n	8005b78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	60ba      	str	r2, [r7, #8]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3301      	adds	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	dbf1      	blt.n	8005b64 <_write+0x12>
	}
	return len;
 8005b80:	687b      	ldr	r3, [r7, #4]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_close>:

int _close(int file)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
	return -1;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <_isatty>:

int _isatty(int file)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
	return 1;
 8005bca:	2301      	movs	r3, #1
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
	return 0;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <_sbrk+0x5c>)
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <_sbrk+0x60>)
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <_sbrk+0x64>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <_sbrk+0x64>)
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <_sbrk+0x68>)
 8005c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <_sbrk+0x64>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d207      	bcs.n	8005c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c24:	f009 f9f6 	bl	800f014 <__errno>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	220c      	movs	r2, #12
 8005c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e009      	b.n	8005c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <_sbrk+0x64>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <_sbrk+0x64>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <_sbrk+0x64>)
 8005c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000c000 	.word	0x2000c000
 8005c54:	00000400 	.word	0x00000400
 8005c58:	20000590 	.word	0x20000590
 8005c5c:	200067c0 	.word	0x200067c0

08005c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c64:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <SystemInit+0x5c>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	4a14      	ldr	r2, [pc, #80]	; (8005cbc <SystemInit+0x5c>)
 8005c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <SystemInit+0x60>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <SystemInit+0x60>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <SystemInit+0x60>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c86:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <SystemInit+0x60>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <SystemInit+0x60>)
 8005c8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <SystemInit+0x60>)
 8005c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <SystemInit+0x60>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <SystemInit+0x60>)
 8005ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <SystemInit+0x60>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	619a      	str	r2, [r3, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed00 	.word	0xe000ed00
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cca:	f107 0314 	add.w	r3, r7, #20
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf0:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999999;
 8005cf6:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005cf8:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <MX_TIM2_Init+0xc4>)
 8005cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cfc:	4b21      	ldr	r3, [pc, #132]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d02:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005d08:	481e      	ldr	r0, [pc, #120]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005d0a:	f007 f98b 	bl	800d024 <HAL_TIM_IC_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005d14:	f7ff fd0a 	bl	800572c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d20:	f107 0314 	add.w	r3, r7, #20
 8005d24:	4619      	mov	r1, r3
 8005d26:	4817      	ldr	r0, [pc, #92]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005d28:	f007 fea6 	bl	800da78 <HAL_TIMEx_MasterConfigSynchronization>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d32:	f7ff fcfb 	bl	800572c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	2204      	movs	r2, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	480d      	ldr	r0, [pc, #52]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005d4e:	f007 fc06 	bl	800d55e <HAL_TIM_IC_ConfigChannel>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005d58:	f7ff fce8 	bl	800572c <Error_Handler>
  }
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV4;
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 3;
 8005d60:	2303      	movs	r3, #3
 8005d62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005d64:	1d3b      	adds	r3, r7, #4
 8005d66:	220c      	movs	r2, #12
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4806      	ldr	r0, [pc, #24]	; (8005d84 <MX_TIM2_Init+0xc0>)
 8005d6c:	f007 fbf7 	bl	800d55e <HAL_TIM_IC_ConfigChannel>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8005d76:	f7ff fcd9 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d7a:	bf00      	nop
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20006654 	.word	0x20006654
 8005d88:	039386ff 	.word	0x039386ff

08005d8c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d94:	f107 0314 	add.w	r3, r7, #20
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d17d      	bne.n	8005eaa <HAL_TIM_IC_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dae:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	4a40      	ldr	r2, [pc, #256]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dba:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	4a3a      	ldr	r2, [pc, #232]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dd2:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dde:	4b35      	ldr	r3, [pc, #212]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de2:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dea:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <HAL_TIM_IC_MspInit+0x128>)
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_PHASE_TIM2_CH4_Pin;
 8005df6:	2308      	movs	r3, #8
 8005df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e06:	2301      	movs	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_PHASE_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e14:	f003 fc16 	bl	8009644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8005e18:	2308      	movs	r3, #8
 8005e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e24:	2300      	movs	r3, #0
 8005e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	4619      	mov	r1, r3
 8005e32:	4821      	ldr	r0, [pc, #132]	; (8005eb8 <HAL_TIM_IC_MspInit+0x12c>)
 8005e34:	f003 fc06 	bl	8009644 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005e38:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIM_IC_MspInit+0x134>)
 8005e3c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005e3e:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e40:	2204      	movs	r2, #4
 8005e42:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e64:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e68:	2220      	movs	r2, #32
 8005e6a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8005e6c:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005e72:	4812      	ldr	r0, [pc, #72]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e74:	f003 f962 	bl	800913c <HAL_DMA_Init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8005e7e:	f7ff fc55 	bl	800572c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
 8005e94:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <HAL_TIM_IC_MspInit+0x130>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	201c      	movs	r0, #28
 8005ea0:	f003 f914 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ea4:	201c      	movs	r0, #28
 8005ea6:	f003 f92d 	bl	8009104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005eaa:	bf00      	nop
 8005eac:	3728      	adds	r7, #40	; 0x28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	48000400 	.word	0x48000400
 8005ebc:	2000660c 	.word	0x2000660c
 8005ec0:	40020080 	.word	0x40020080

08005ec4 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a9d      	ldr	r2, [pc, #628]	; (8006144 <HAL_TIM_IC_CaptureCallback+0x280>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f040 8133 	bne.w	800613c <HAL_TIM_IC_CaptureCallback+0x278>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7f1b      	ldrb	r3, [r3, #28]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d161      	bne.n	8005fa2 <HAL_TIM_IC_CaptureCallback+0xde>
			/* GPS 1PPS pulse captured */
			giTim2Ch2_TS = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8005ede:	2104      	movs	r1, #4
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f007 fbd1 	bl	800d688 <HAL_TIM_ReadCapturedValue>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a97      	ldr	r2, [pc, #604]	; (8006148 <HAL_TIM_IC_CaptureCallback+0x284>)
 8005eea:	6013      	str	r3, [r2, #0]
			if (giTim2Ch2_TS < 60000UL) {
#else
			/* 1 PPS mode */
			{
#endif
				int32_t diff = giTim2Ch2_TS - giTim2Ch2_TS_ary[giTim2Ch2_TS_ary_idx];
 8005eec:	4b96      	ldr	r3, [pc, #600]	; (8006148 <HAL_TIM_IC_CaptureCallback+0x284>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b96      	ldr	r3, [pc, #600]	; (800614c <HAL_TIM_IC_CaptureCallback+0x288>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4b95      	ldr	r3, [pc, #596]	; (8006150 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8005efa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	60bb      	str	r3, [r7, #8]

#if !defined(PLL_BY_SOFTWARE)
				if ((-100000 < diff) && (diff < +100000)) {
#else
				/* Clamp below +/-5 ppm */
				if ((-3000 < diff) && (diff < +3000)) {
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4a93      	ldr	r2, [pc, #588]	; (8006154 <HAL_TIM_IC_CaptureCallback+0x290>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	db1b      	blt.n	8005f42 <HAL_TIM_IC_CaptureCallback+0x7e>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005f10:	4293      	cmp	r3, r2
 8005f12:	dc16      	bgt.n	8005f42 <HAL_TIM_IC_CaptureCallback+0x7e>
#endif
					/* Store accumulated difference */
					++giTim2Ch2_TicksEvt;
 8005f14:	4b90      	ldr	r3, [pc, #576]	; (8006158 <HAL_TIM_IC_CaptureCallback+0x294>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a8f      	ldr	r2, [pc, #572]	; (8006158 <HAL_TIM_IC_CaptureCallback+0x294>)
 8005f1c:	6013      	str	r3, [r2, #0]
					giTim2Ch2_TicksDiff += diff;
 8005f1e:	4b8f      	ldr	r3, [pc, #572]	; (800615c <HAL_TIM_IC_CaptureCallback+0x298>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a8d      	ldr	r2, [pc, #564]	; (800615c <HAL_TIM_IC_CaptureCallback+0x298>)
 8005f28:	6013      	str	r3, [r2, #0]

					/* Calculate PPMs */
					giTim2Ch2_ppm = diff / 600.0f;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f34:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006160 <HAL_TIM_IC_CaptureCallback+0x29c>
 8005f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f3c:	4b89      	ldr	r3, [pc, #548]	; (8006164 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8005f3e:	edc3 7a00 	vstr	s15, [r3]
				}

				if (giTim2Ch2_TicksEvt > 1UL) {
 8005f42:	4b85      	ldr	r3, [pc, #532]	; (8006158 <HAL_TIM_IC_CaptureCallback+0x294>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d91c      	bls.n	8005f84 <HAL_TIM_IC_CaptureCallback+0xc0>
					/* Write back TimeStamp to 10 sec circle-buffer */
					giTim2Ch2_TS_ary[giTim2Ch2_TS_ary_idx++] = giTim2Ch2_TS;
 8005f4a:	4b80      	ldr	r3, [pc, #512]	; (800614c <HAL_TIM_IC_CaptureCallback+0x288>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	b2d1      	uxtb	r1, r2
 8005f54:	4a7d      	ldr	r2, [pc, #500]	; (800614c <HAL_TIM_IC_CaptureCallback+0x288>)
 8005f56:	7011      	strb	r1, [r2, #0]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4b7b      	ldr	r3, [pc, #492]	; (8006148 <HAL_TIM_IC_CaptureCallback+0x284>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a7c      	ldr	r2, [pc, #496]	; (8006150 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8005f60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					giTim2Ch2_TS_ary_idx %= 10;
 8005f64:	4b79      	ldr	r3, [pc, #484]	; (800614c <HAL_TIM_IC_CaptureCallback+0x288>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b7f      	ldr	r3, [pc, #508]	; (8006168 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f70:	08d9      	lsrs	r1, r3, #3
 8005f72:	460b      	mov	r3, r1
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	4b73      	ldr	r3, [pc, #460]	; (800614c <HAL_TIM_IC_CaptureCallback+0x288>)
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e00e      	b.n	8005fa2 <HAL_TIM_IC_CaptureCallback+0xde>
				}
				else {
					/* Fast fill of the timestamp buffer */
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e008      	b.n	8005f9c <HAL_TIM_IC_CaptureCallback+0xd8>
						giTim2Ch2_TS_ary[idx] = giTim2Ch2_TS;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	4a6e      	ldr	r2, [pc, #440]	; (8006148 <HAL_TIM_IC_CaptureCallback+0x284>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	496f      	ldr	r1, [pc, #444]	; (8006150 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8005f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d9f3      	bls.n	8005f8a <HAL_TIM_IC_CaptureCallback+0xc6>
					}
				}
			}
		}  // if (CHANNEL_2)

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7f1b      	ldrb	r3, [r3, #28]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	f040 80c8 	bne.w	800613c <HAL_TIM_IC_CaptureCallback+0x278>
			/* DCF77 77500 Hz / 4 = 19375 Hz pulse captured */
			static uint16_t cntCwClk	= 0UL;
			static uint8_t cntPhaseClk	= 0U;

			giTim2Ch4_TS				= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8005fac:	210c      	movs	r1, #12
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f007 fb6a 	bl	800d688 <HAL_TIM_ReadCapturedValue>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4a6d      	ldr	r2, [pc, #436]	; (800616c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005fb8:	6013      	str	r3, [r2, #0]

			/* One per second */
			if (++cntCwClk >= 19375U) {
 8005fba:	4b6d      	ldr	r3, [pc, #436]	; (8006170 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	4b6b      	ldr	r3, [pc, #428]	; (8006170 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f644 32ae 	movw	r2, #19374	; 0x4bae
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d92a      	bls.n	8006028 <HAL_TIM_IC_CaptureCallback+0x164>
				cntCwClk = 0U;
 8005fd2:	4b67      	ldr	r3, [pc, #412]	; (8006170 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	801a      	strh	r2, [r3, #0]

				/* Timestamp @ 60 MHz */
				giTim2Ch4_TS_ary[9] = giTim2Ch4_TS_ary[8];
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4a65      	ldr	r2, [pc, #404]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fde:	6253      	str	r3, [r2, #36]	; 0x24
				giTim2Ch4_TS_ary[8] = giTim2Ch4_TS_ary[7];
 8005fe0:	4b64      	ldr	r3, [pc, #400]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	4a63      	ldr	r2, [pc, #396]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fe6:	6213      	str	r3, [r2, #32]
				giTim2Ch4_TS_ary[7] = giTim2Ch4_TS_ary[6];
 8005fe8:	4b62      	ldr	r3, [pc, #392]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	4a61      	ldr	r2, [pc, #388]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005fee:	61d3      	str	r3, [r2, #28]
				giTim2Ch4_TS_ary[6] = giTim2Ch4_TS_ary[5];
 8005ff0:	4b60      	ldr	r3, [pc, #384]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	4a5f      	ldr	r2, [pc, #380]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005ff6:	6193      	str	r3, [r2, #24]
				giTim2Ch4_TS_ary[5] = giTim2Ch4_TS_ary[4];
 8005ff8:	4b5e      	ldr	r3, [pc, #376]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	4a5d      	ldr	r2, [pc, #372]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8005ffe:	6153      	str	r3, [r2, #20]
				giTim2Ch4_TS_ary[4] = giTim2Ch4_TS_ary[3];
 8006000:	4b5c      	ldr	r3, [pc, #368]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a5b      	ldr	r2, [pc, #364]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8006006:	6113      	str	r3, [r2, #16]
				giTim2Ch4_TS_ary[3] = giTim2Ch4_TS_ary[2];
 8006008:	4b5a      	ldr	r3, [pc, #360]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a59      	ldr	r2, [pc, #356]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800600e:	60d3      	str	r3, [r2, #12]
				giTim2Ch4_TS_ary[2] = giTim2Ch4_TS_ary[1];
 8006010:	4b58      	ldr	r3, [pc, #352]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a57      	ldr	r2, [pc, #348]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8006016:	6093      	str	r3, [r2, #8]
				giTim2Ch4_TS_ary[1] = giTim2Ch4_TS_ary[0];
 8006018:	4b56      	ldr	r3, [pc, #344]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a55      	ldr	r2, [pc, #340]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800601e:	6053      	str	r3, [r2, #4]
				giTim2Ch4_TS_ary[0] = giTim2Ch4_TS;
 8006020:	4b52      	ldr	r3, [pc, #328]	; (800616c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a53      	ldr	r2, [pc, #332]	; (8006174 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8006026:	6013      	str	r3, [r2, #0]
			}

			/* 120 (DCF77) / 4 (TIM2_IC4 div 4) 	= 30 -->  0 .. 29 */
			/* and 6x oversampling 					=  5 -->  0 ..  4 */
			if (cntPhaseClk++ >= 4U) {
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	b2d1      	uxtb	r1, r2
 8006030:	4a51      	ldr	r2, [pc, #324]	; (8006178 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8006032:	7011      	strb	r1, [r2, #0]
 8006034:	2b03      	cmp	r3, #3
 8006036:	f240 8081 	bls.w	800613c <HAL_TIM_IC_CaptureCallback+0x278>
				 * One phase data bit clock	= 1.54839 ms = 92903.2258065 ticks @ 60 MHz
				 * One frame				= 512 x phase data bit clock = 792.7742 ms
				 * One second				= 645.8333 bit clocks, 6x oversampling = 3875 time stamps / sec ==>  480000 / 31 = 15483.87097...
				 * DCF77 PRN phase mod: +/-13 deg = +/-466 ns = +/- 28 ticks @ 60 MHz
				 */
				cntPhaseClk = 0U;
 800603a:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]

				if (giTim2Ch4_Phase_ary_idx == 0U) {
 8006040:	4b4e      	ldr	r3, [pc, #312]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d114      	bne.n	8006074 <HAL_TIM_IC_CaptureCallback+0x1b0>
					giTim2Ch4_Phase_TS_idx_0 = giTim2Ch4_TS;
 800604a:	4b48      	ldr	r3, [pc, #288]	; (800616c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a4c      	ldr	r2, [pc, #304]	; (8006180 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8006050:	6013      	str	r3, [r2, #0]
					giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx++] = giTim2Ch4_TS - giTim2Ch4_Phase_TS_idx_0;
 8006052:	4b46      	ldr	r3, [pc, #280]	; (800616c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1ad1      	subs	r1, r2, r3
 800605c:	4b47      	ldr	r3, [pc, #284]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	b290      	uxth	r0, r2
 8006066:	4a45      	ldr	r2, [pc, #276]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006068:	8010      	strh	r0, [r2, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	4b45      	ldr	r3, [pc, #276]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 800606e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}
			}
		}  // if (CHANNEL_4)

	}  // if (htim == &htim2)
}
 8006072:	e063      	b.n	800613c <HAL_TIM_IC_CaptureCallback+0x278>
				else if (giTim2Ch4_Phase_ary_idx < PRN_CORRELATION_BUF_SIZE) {
 8006074:	4b41      	ldr	r3, [pc, #260]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f640 7222 	movw	r2, #3874	; 0xf22
 800607e:	4293      	cmp	r3, r2
 8006080:	d851      	bhi.n	8006126 <HAL_TIM_IC_CaptureCallback+0x262>
					giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx] = giTim2Ch4_TS - (giTim2Ch4_Phase_TS_idx_0 + ((giTim2Ch4_Phase_ary_idx * 480000UL + 15UL) / 31UL));
 8006082:	4b3a      	ldr	r3, [pc, #232]	; (800616c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	4b3d      	ldr	r3, [pc, #244]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8006090:	fb03 f302 	mul.w	r3, r3, r2
 8006094:	f103 020f 	add.w	r2, r3, #15
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800609a:	fba3 0302 	umull	r0, r3, r3, r2
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	0852      	lsrs	r2, r2, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	091a      	lsrs	r2, r3, #4
 80060a6:	4b36      	ldr	r3, [pc, #216]	; (8006180 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4413      	add	r3, r2
 80060ac:	1ac9      	subs	r1, r1, r3
 80060ae:	4b33      	ldr	r3, [pc, #204]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80060b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx] < -30000000L) {
 80060bc:	4b2f      	ldr	r3, [pc, #188]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80060c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ca:	4a31      	ldr	r2, [pc, #196]	; (8006190 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	da0c      	bge.n	80060ea <HAL_TIM_IC_CaptureCallback+0x226>
						giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx] += 60000000L;
 80060d0:	4b2a      	ldr	r3, [pc, #168]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b299      	uxth	r1, r3
 80060d6:	460a      	mov	r2, r1
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80060da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80060e0:	4413      	add	r3, r2
 80060e2:	4a28      	ldr	r2, [pc, #160]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80060e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80060e8:	e015      	b.n	8006116 <HAL_TIM_IC_CaptureCallback+0x252>
					else if (giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx] > 30000000L) {
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	4a27      	ldr	r2, [pc, #156]	; (8006198 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	dd0b      	ble.n	8006116 <HAL_TIM_IC_CaptureCallback+0x252>
						giTim2Ch4_Phase_ary[giTim2Ch4_Phase_ary_idx] -= 60000000L;
 80060fe:	4b1f      	ldr	r3, [pc, #124]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b299      	uxth	r1, r3
 8006104:	460a      	mov	r2, r1
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8006108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610c:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800610e:	4413      	add	r3, r2
 8006110:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8006112:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					giTim2Ch4_Phase_ary_idx++;
 8006116:	4b19      	ldr	r3, [pc, #100]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	3301      	adds	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	4b16      	ldr	r3, [pc, #88]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006122:	801a      	strh	r2, [r3, #0]
}
 8006124:	e00a      	b.n	800613c <HAL_TIM_IC_CaptureCallback+0x278>
				else if (giTim2Ch4_Phase_ary_idx == PRN_CORRELATION_BUF_SIZE) {
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f640 7223 	movw	r2, #3875	; 0xf23
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <HAL_TIM_IC_CaptureCallback+0x278>
					giTim2Ch4_Phase_ary_idx = 0xffffU;
 8006134:	4b11      	ldr	r3, [pc, #68]	; (800617c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8006136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800613a:	801a      	strh	r2, [r3, #0]
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20006654 	.word	0x20006654
 8006148:	20000594 	.word	0x20000594
 800614c:	20000598 	.word	0x20000598
 8006150:	2000059c 	.word	0x2000059c
 8006154:	fffff449 	.word	0xfffff449
 8006158:	200005c4 	.word	0x200005c4
 800615c:	200005c8 	.word	0x200005c8
 8006160:	44160000 	.word	0x44160000
 8006164:	200005d0 	.word	0x200005d0
 8006168:	cccccccd 	.word	0xcccccccd
 800616c:	200005d4 	.word	0x200005d4
 8006170:	2000429e 	.word	0x2000429e
 8006174:	200005d8 	.word	0x200005d8
 8006178:	200042a0 	.word	0x200042a0
 800617c:	20000600 	.word	0x20000600
 8006180:	20000604 	.word	0x20000604
 8006184:	20000608 	.word	0x20000608
 8006188:	00075300 	.word	0x00075300
 800618c:	08421085 	.word	0x08421085
 8006190:	fe363c80 	.word	0xfe363c80
 8006194:	03938700 	.word	0x03938700
 8006198:	01c9c380 	.word	0x01c9c380
 800619c:	fc6c7900 	.word	0xfc6c7900

080061a0 <tim_start>:


void tim_start(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
	/* TIM2 IC CH2 NEO-x */
	{
		if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 80061a4:	2104      	movs	r1, #4
 80061a6:	4809      	ldr	r0, [pc, #36]	; (80061cc <tim_start+0x2c>)
 80061a8:	f006 ff94 	bl	800d0d4 <HAL_TIM_IC_Start_IT>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <tim_start+0x16>
			/* Starting Error */
			Error_Handler();
 80061b2:	f7ff fabb 	bl	800572c <Error_Handler>
		}
	}

	/* TIM2 IC CH4 DCF77*/
	{
		if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK) {
 80061b6:	210c      	movs	r1, #12
 80061b8:	4804      	ldr	r0, [pc, #16]	; (80061cc <tim_start+0x2c>)
 80061ba:	f006 ff8b 	bl	800d0d4 <HAL_TIM_IC_Start_IT>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <tim_start+0x28>
			/* Starting Error */
			Error_Handler();
 80061c4:	f7ff fab2 	bl	800572c <Error_Handler>
		}
	}
}
 80061c8:	bf00      	nop
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20006654 	.word	0x20006654

080061d0 <tim_get_timeStamp>:

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <HAL_UART_TxCpltCallback+0x1c>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	701a      	strb	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	200042a1 	.word	0x200042a1

0800620c <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006220:	b29b      	uxth	r3, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	b29a      	uxth	r2, r3
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <HAL_UART_RxCpltCallback+0x30>)
 8006228:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_UART_RxCpltCallback+0x34>)
 800622c:	2201      	movs	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200042a4 	.word	0x200042a4
 8006240:	200042a2 	.word	0x200042a2

08006244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006252:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a2b      	ldr	r2, [pc, #172]	; (8006304 <HAL_UART_ErrorCallback+0xc0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d148      	bne.n	80062ee <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006272:	b29b      	uxth	r3, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b23      	ldr	r3, [pc, #140]	; (8006308 <HAL_UART_ErrorCallback+0xc4>)
 800627a:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 800627c:	4b23      	ldr	r3, [pc, #140]	; (800630c <HAL_UART_ErrorCallback+0xc8>)
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8006282:	e03a      	b.n	80062fa <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0301 	and.w	r3, r3, #1
		else if (
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <HAL_UART_ErrorCallback+0xc4>)
 80062b6:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80062b8:	4b14      	ldr	r3, [pc, #80]	; (800630c <HAL_UART_ErrorCallback+0xc8>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
}
 80062be:	e01c      	b.n	80062fa <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00e      	beq.n	80062e8 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	b29a      	uxth	r2, r3
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_UART_ErrorCallback+0xc4>)
 80062de:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <HAL_UART_ErrorCallback+0xc8>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
}
 80062e6:	e008      	b.n	80062fa <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 80062e8:	f7ff fa20 	bl	800572c <Error_Handler>
}
 80062ec:	e005      	b.n	80062fa <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a07      	ldr	r2, [pc, #28]	; (8006310 <HAL_UART_ErrorCallback+0xcc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 80062f6:	f7ff fa19 	bl	800572c <Error_Handler>
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200066a0 	.word	0x200066a0
 8006308:	200042a4 	.word	0x200042a4
 800630c:	200042a2 	.word	0x200042a2
 8006310:	20006724 	.word	0x20006724

08006314 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006318:	4b14      	ldr	r3, [pc, #80]	; (800636c <MX_USART1_UART_Init+0x58>)
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <MX_USART1_UART_Init+0x5c>)
 800631c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006328:	2200      	movs	r2, #0
 800632a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <MX_USART1_UART_Init+0x58>)
 800632e:	2200      	movs	r2, #0
 8006330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006332:	4b0e      	ldr	r3, [pc, #56]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006334:	2200      	movs	r2, #0
 8006336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <MX_USART1_UART_Init+0x58>)
 800633a:	220c      	movs	r2, #12
 800633c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006340:	2200      	movs	r2, #0
 8006342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006346:	2200      	movs	r2, #0
 8006348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800634a:	4b08      	ldr	r3, [pc, #32]	; (800636c <MX_USART1_UART_Init+0x58>)
 800634c:	2200      	movs	r2, #0
 800634e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006352:	2200      	movs	r2, #0
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006356:	4805      	ldr	r0, [pc, #20]	; (800636c <MX_USART1_UART_Init+0x58>)
 8006358:	f007 fc12 	bl	800db80 <HAL_UART_Init>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006362:	f7ff f9e3 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006366:	bf00      	nop
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200066a0 	.word	0x200066a0
 8006370:	40013800 	.word	0x40013800

08006374 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <MX_USART2_UART_Init+0x58>)
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <MX_USART2_UART_Init+0x5c>)
 800637c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <MX_USART2_UART_Init+0x58>)
 8006380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <MX_USART2_UART_Init+0x58>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <MX_USART2_UART_Init+0x58>)
 800638e:	2200      	movs	r2, #0
 8006390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <MX_USART2_UART_Init+0x58>)
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <MX_USART2_UART_Init+0x58>)
 800639a:	220c      	movs	r2, #12
 800639c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <MX_USART2_UART_Init+0x58>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <MX_USART2_UART_Init+0x58>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <MX_USART2_UART_Init+0x58>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <MX_USART2_UART_Init+0x58>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80063b6:	4805      	ldr	r0, [pc, #20]	; (80063cc <MX_USART2_UART_Init+0x58>)
 80063b8:	f007 fbe2 	bl	800db80 <HAL_UART_Init>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80063c2:	f7ff f9b3 	bl	800572c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80063c6:	bf00      	nop
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20006724 	.word	0x20006724
 80063d0:	40004400 	.word	0x40004400

080063d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0a0      	sub	sp, #128	; 0x80
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	2254      	movs	r2, #84	; 0x54
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f008 fe45 	bl	800f084 <memset>
  if(uartHandle->Instance==USART1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a54      	ldr	r2, [pc, #336]	; (8006550 <HAL_UART_MspInit+0x17c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d152      	bne.n	80064aa <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006404:	2301      	movs	r3, #1
 8006406:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8006408:	2302      	movs	r3, #2
 800640a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800640c:	f107 0318 	add.w	r3, r7, #24
 8006410:	4618      	mov	r0, r3
 8006412:	f006 f8b7 	bl	800c584 <HAL_RCCEx_PeriphCLKConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800641c:	f7ff f986 	bl	800572c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <HAL_UART_MspInit+0x180>)
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	4a4b      	ldr	r2, [pc, #300]	; (8006554 <HAL_UART_MspInit+0x180>)
 8006426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800642a:	6613      	str	r3, [r2, #96]	; 0x60
 800642c:	4b49      	ldr	r3, [pc, #292]	; (8006554 <HAL_UART_MspInit+0x180>)
 800642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006438:	4b46      	ldr	r3, [pc, #280]	; (8006554 <HAL_UART_MspInit+0x180>)
 800643a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643c:	4a45      	ldr	r2, [pc, #276]	; (8006554 <HAL_UART_MspInit+0x180>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006444:	4b43      	ldr	r3, [pc, #268]	; (8006554 <HAL_UART_MspInit+0x180>)
 8006446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8006450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006454:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006456:	2302      	movs	r3, #2
 8006458:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645a:	2300      	movs	r3, #0
 800645c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645e:	2300      	movs	r3, #0
 8006460:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006462:	2307      	movs	r3, #7
 8006464:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8006466:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800646a:	4619      	mov	r1, r3
 800646c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006470:	f003 f8e8 	bl	8009644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8006474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006478:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647a:	2302      	movs	r3, #2
 800647c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800647e:	2301      	movs	r3, #1
 8006480:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2300      	movs	r3, #0
 8006484:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006486:	2307      	movs	r3, #7
 8006488:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800648a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800648e:	4619      	mov	r1, r3
 8006490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006494:	f003 f8d6 	bl	8009644 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006498:	2200      	movs	r2, #0
 800649a:	2100      	movs	r1, #0
 800649c:	2025      	movs	r0, #37	; 0x25
 800649e:	f002 fe15 	bl	80090cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80064a2:	2025      	movs	r0, #37	; 0x25
 80064a4:	f002 fe2e 	bl	8009104 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80064a8:	e04d      	b.n	8006546 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <HAL_UART_MspInit+0x184>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d148      	bne.n	8006546 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80064b4:	2302      	movs	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80064b8:	2308      	movs	r3, #8
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064bc:	f107 0318 	add.w	r3, r7, #24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f006 f85f 	bl	800c584 <HAL_RCCEx_PeriphCLKConfig>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80064cc:	f7ff f92e 	bl	800572c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064da:	6593      	str	r3, [r2, #88]	; 0x58
 80064dc:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064f4:	4b17      	ldr	r3, [pc, #92]	; (8006554 <HAL_UART_MspInit+0x180>)
 80064f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8006500:	2304      	movs	r3, #4
 8006502:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006504:	2302      	movs	r3, #2
 8006506:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006508:	2300      	movs	r3, #0
 800650a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800650c:	2301      	movs	r3, #1
 800650e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006510:	2307      	movs	r3, #7
 8006512:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8006514:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006518:	4619      	mov	r1, r3
 800651a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800651e:	f003 f891 	bl	8009644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006530:	2301      	movs	r3, #1
 8006532:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8006534:	2303      	movs	r3, #3
 8006536:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8006538:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800653c:	4619      	mov	r1, r3
 800653e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006542:	f003 f87f 	bl	8009644 <HAL_GPIO_Init>
}
 8006546:	bf00      	nop
 8006548:	3780      	adds	r7, #128	; 0x80
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40013800 	.word	0x40013800
 8006554:	40021000 	.word	0x40021000
 8006558:	40004400 	.word	0x40004400

0800655c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_UART_MspDeInit+0x5c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d10f      	bne.n	800658e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <HAL_UART_MspDeInit+0x60>)
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	4a12      	ldr	r2, [pc, #72]	; (80065bc <HAL_UART_MspDeInit+0x60>)
 8006574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006578:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 800657a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800657e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006582:	f003 f9c9 	bl	8009918 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006586:	2025      	movs	r0, #37	; 0x25
 8006588:	f002 fdca 	bl	8009120 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800658c:	e010      	b.n	80065b0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <HAL_UART_MspDeInit+0x64>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10b      	bne.n	80065b0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8006598:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_UART_MspDeInit+0x60>)
 800659a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659c:	4a07      	ldr	r2, [pc, #28]	; (80065bc <HAL_UART_MspDeInit+0x60>)
 800659e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065a2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80065a4:	f248 0104 	movw	r1, #32772	; 0x8004
 80065a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065ac:	f003 f9b4 	bl	8009918 <HAL_GPIO_DeInit>
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40013800 	.word	0x40013800
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40004400 	.word	0x40004400

080065c4 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <MX_USART1_UART_Init_38400baud+0x5c>)
 80065cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80065d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065ea:	220c      	movs	r2, #12
 80065ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 8006602:	2200      	movs	r2, #0
 8006604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006606:	4805      	ldr	r0, [pc, #20]	; (800661c <MX_USART1_UART_Init_38400baud+0x58>)
 8006608:	f007 faba 	bl	800db80 <HAL_UART_Init>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8006612:	f7ff f88b 	bl	800572c <Error_Handler>
  }

}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200066a0 	.word	0x200066a0
 8006620:	40013800 	.word	0x40013800

08006624 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	4613      	mov	r3, r2
 8006634:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
 800663a:	2300      	movs	r3, #0
 800663c:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	2b07      	cmp	r3, #7
 8006642:	d92f      	bls.n	80066a4 <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3302      	adds	r3, #2
 8006648:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	3b04      	subs	r3, #4
 800664e:	82bb      	strh	r3, [r7, #20]
 8006650:	e00d      	b.n	800666e <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	60fa      	str	r2, [r7, #12]
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	4413      	add	r3, r2
 800665e:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 8006660:	7dba      	ldrb	r2, [r7, #22]
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	4413      	add	r3, r2
 8006666:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006668:	8abb      	ldrh	r3, [r7, #20]
 800666a:	3b01      	subs	r3, #1
 800666c:	82bb      	strh	r3, [r7, #20]
 800666e:	8abb      	ldrh	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1ee      	bne.n	8006652 <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 8006674:	7a7b      	ldrb	r3, [r7, #9]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	60fa      	str	r2, [r7, #12]
 8006680:	7dfa      	ldrb	r2, [r7, #23]
 8006682:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	7dba      	ldrb	r2, [r7, #22]
 8006688:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <calcChecksumRFC1145+0x82>
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7dfa      	ldrb	r2, [r7, #23]
 800669a:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	7dba      	ldrb	r2, [r7, #22]
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e000      	b.n	80066a6 <calcChecksumRFC1145+0x82>
		return;
 80066a4:	bf00      	nop
	}
}
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b092      	sub	sp, #72	; 0x48
 80066b4:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 80066b6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t cfg_Port1_Req[]		= {
 80066bc:	4a7a      	ldr	r2, [pc, #488]	; (80068a8 <ubloxUartSpeedFast+0x1f8>)
 80066be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80066c4:	c303      	stmia	r3!, {r0, r1}
 80066c6:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 80066c8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	2201      	movs	r2, #1
 80066d4:	2109      	movs	r1, #9
 80066d6:	f7ff ffa5 	bl	8006624 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	60da      	str	r2, [r3, #12]
 80066ec:	611a      	str	r2, [r3, #16]
 80066ee:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	713b      	strb	r3, [r7, #4]
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	717b      	strb	r3, [r7, #5]
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	b2db      	uxtb	r3, r3
 8006704:	71bb      	strb	r3, [r7, #6]
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	0e1b      	lsrs	r3, r3, #24
 800670a:	b2db      	uxtb	r3, r3
 800670c:	71fb      	strb	r3, [r7, #7]

	int cnt = 3;
 800670e:	2303      	movs	r3, #3
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 8006712:	e0bb      	b.n	800688c <ubloxUartSpeedFast+0x1dc>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8006714:	4b65      	ldr	r3, [pc, #404]	; (80068ac <ubloxUartSpeedFast+0x1fc>)
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800671a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671e:	2209      	movs	r2, #9
 8006720:	4619      	mov	r1, r3
 8006722:	4863      	ldr	r0, [pc, #396]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006724:	f007 fab4 	bl	800dc90 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8006728:	bf00      	nop
 800672a:	4b60      	ldr	r3, [pc, #384]	; (80068ac <ubloxUartSpeedFast+0x1fc>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	d1fa      	bne.n	800672a <ubloxUartSpeedFast+0x7a>
		}

		gUart1RxReady = RESET;
 8006734:	4b5f      	ldr	r3, [pc, #380]	; (80068b4 <ubloxUartSpeedFast+0x204>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800673a:	485d      	ldr	r0, [pc, #372]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 800673c:	f007 fb9e 	bl	800de7c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006740:	485b      	ldr	r0, [pc, #364]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006742:	f007 fe3f 	bl	800e3c4 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800674a:	495b      	ldr	r1, [pc, #364]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 800674c:	4858      	ldr	r0, [pc, #352]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 800674e:	f007 fafb 	bl	800dd48 <HAL_UART_Receive_IT>
		int i = 11;
 8006752:	230b      	movs	r3, #11
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 8006756:	e005      	b.n	8006764 <ubloxUartSpeedFast+0xb4>
			HAL_Delay(100UL);
 8006758:	2064      	movs	r0, #100	; 0x64
 800675a:	f000 ff75 	bl	8007648 <HAL_Delay>
			--i;
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	3b01      	subs	r3, #1
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <ubloxUartSpeedFast+0xc4>
 800676a:	4b52      	ldr	r3, [pc, #328]	; (80068b4 <ubloxUartSpeedFast+0x204>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d1f1      	bne.n	8006758 <ubloxUartSpeedFast+0xa8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006774:	4b50      	ldr	r3, [pc, #320]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2bb5      	cmp	r3, #181	; 0xb5
 800677a:	f040 8081 	bne.w	8006880 <ubloxUartSpeedFast+0x1d0>
 800677e:	4b4e      	ldr	r3, [pc, #312]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	2b62      	cmp	r3, #98	; 0x62
 8006784:	d17c      	bne.n	8006880 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8006786:	4b4c      	ldr	r3, [pc, #304]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006788:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800678a:	2b06      	cmp	r3, #6
 800678c:	d178      	bne.n	8006880 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800678e:	4b4a      	ldr	r3, [pc, #296]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d174      	bne.n	8006880 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8006796:	4b48      	ldr	r3, [pc, #288]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006798:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800679a:	2b14      	cmp	r3, #20
 800679c:	d170      	bne.n	8006880 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800679e:	4b46      	ldr	r3, [pc, #280]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 80067a0:	795b      	ldrb	r3, [r3, #5]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d16c      	bne.n	8006880 <ubloxUartSpeedFast+0x1d0>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
 80067aa:	e00c      	b.n	80067c6 <ubloxUartSpeedFast+0x116>
				cfg_Port1_Set[i] = ublox_Response[i];
 80067ac:	4a42      	ldr	r2, [pc, #264]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	4413      	add	r3, r2
 80067b2:	7819      	ldrb	r1, [r3, #0]
 80067b4:	f107 0208 	add.w	r2, r7, #8
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	4413      	add	r3, r2
 80067bc:	460a      	mov	r2, r1
 80067be:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	3301      	adds	r3, #1
 80067c4:	637b      	str	r3, [r7, #52]	; 0x34
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	2b1b      	cmp	r3, #27
 80067ca:	d9ef      	bls.n	80067ac <ubloxUartSpeedFast+0xfc>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80067cc:	793b      	ldrb	r3, [r7, #4]
 80067ce:	75bb      	strb	r3, [r7, #22]
			cfg_Port1_Set[6 +  9] = buf[1];
 80067d0:	797b      	ldrb	r3, [r7, #5]
 80067d2:	75fb      	strb	r3, [r7, #23]
			cfg_Port1_Set[6 + 10] = buf[2];
 80067d4:	79bb      	ldrb	r3, [r7, #6]
 80067d6:	763b      	strb	r3, [r7, #24]
			cfg_Port1_Set[6 + 11] = buf[3];
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	767b      	strb	r3, [r7, #25]

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 80067dc:	f107 0008 	add.w	r0, r7, #8
 80067e0:	2300      	movs	r3, #0
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	2201      	movs	r2, #1
 80067e8:	211c      	movs	r1, #28
 80067ea:	f7ff ff1b 	bl	8006624 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80067ee:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <ubloxUartSpeedFast+0x1fc>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80067f4:	f107 0308 	add.w	r3, r7, #8
 80067f8:	221c      	movs	r2, #28
 80067fa:	4619      	mov	r1, r3
 80067fc:	482c      	ldr	r0, [pc, #176]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 80067fe:	f007 fa47 	bl	800dc90 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006802:	bf00      	nop
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <ubloxUartSpeedFast+0x1fc>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b01      	cmp	r3, #1
 800680c:	d1fa      	bne.n	8006804 <ubloxUartSpeedFast+0x154>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800680e:	4828      	ldr	r0, [pc, #160]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006810:	f007 fade 	bl	800ddd0 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8006814:	4826      	ldr	r0, [pc, #152]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006816:	f007 fa01 	bl	800dc1c <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 800681a:	f7ff fed3 	bl	80065c4 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 800681e:	4b25      	ldr	r3, [pc, #148]	; (80068b4 <ubloxUartSpeedFast+0x204>)
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8006824:	4822      	ldr	r0, [pc, #136]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006826:	f007 fb29 	bl	800de7c <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 800682a:	4821      	ldr	r0, [pc, #132]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 800682c:	f007 fdca 	bl	800e3c4 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006834:	4920      	ldr	r1, [pc, #128]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006836:	481e      	ldr	r0, [pc, #120]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006838:	f007 fa86 	bl	800dd48 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 800683c:	bf00      	nop
 800683e:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <ubloxUartSpeedFast+0x204>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d1fa      	bne.n	800683e <ubloxUartSpeedFast+0x18e>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006848:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2bb5      	cmp	r3, #181	; 0xb5
 800684e:	d127      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
 8006850:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b62      	cmp	r3, #98	; 0x62
 8006856:	d123      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006858:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 800685a:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800685c:	2b05      	cmp	r3, #5
 800685e:	d11f      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006860:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11b      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 800686a:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800686c:	2b02      	cmp	r3, #2
 800686e:	d117      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 8006872:	795b      	ldrb	r3, [r3, #5]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <ubloxUartSpeedFast+0x208>)
 800687a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800687c:	2b06      	cmp	r3, #6
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100UL);
				}
#endif
			}
			return;
 800687e:	e00f      	b.n	80068a0 <ubloxUartSpeedFast+0x1f0>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200UL);
 8006880:	20c8      	movs	r0, #200	; 0xc8
 8006882:	f000 fee1 	bl	8007648 <HAL_Delay>
			--cnt;
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	3b01      	subs	r3, #1
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 800688c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688e:	2b00      	cmp	r3, #0
 8006890:	f47f af40 	bne.w	8006714 <ubloxUartSpeedFast+0x64>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 8006894:	4806      	ldr	r0, [pc, #24]	; (80068b0 <ubloxUartSpeedFast+0x200>)
 8006896:	f007 f9c1 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800689a:	f7ff fe93 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
 800689e:	e000      	b.n	80068a2 <ubloxUartSpeedFast+0x1f2>
			return;
 80068a0:	bf00      	nop
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		HAL_Delay(100UL);
	}
#endif
}
 80068a2:	3740      	adds	r7, #64	; 0x40
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	08013014 	.word	0x08013014
 80068ac:	200042a1 	.word	0x200042a1
 80068b0:	200066a0 	.word	0x200066a0
 80068b4:	200042a2 	.word	0x200042a2
 80068b8:	20004428 	.word	0x20004428

080068bc <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b094      	sub	sp, #80	; 0x50
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	4603      	mov	r3, r0
 80068c4:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	f107 0318 	add.w	r3, r7, #24
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f008 fbd6 	bl	800f084 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	743b      	strb	r3, [r7, #16]
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	747b      	strb	r3, [r7, #17]
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 80068e8:	2300      	movs	r3, #0
 80068ea:	74bb      	strb	r3, [r7, #18]
	buf[3] = (frequency & 0xff000000UL) >> 24;
 80068ec:	2300      	movs	r3, #0
 80068ee:	74fb      	strb	r3, [r7, #19]

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 80068f0:	4a91      	ldr	r2, [pc, #580]	; (8006b38 <ubloxSetFrequency+0x27c>)
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068fa:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 80068fe:	f107 0008 	add.w	r0, r7, #8
 8006902:	2300      	movs	r3, #0
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2300      	movs	r3, #0
 8006908:	2201      	movs	r2, #1
 800690a:	2108      	movs	r1, #8
 800690c:	f7ff fe8a 	bl	8006624 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8006910:	2303      	movs	r3, #3
 8006912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while (tryCtr) {
 8006916:	e104      	b.n	8006b22 <ubloxSetFrequency+0x266>
			HAL_Delay(100);
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8006918:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <ubloxSetFrequency+0x280>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 800691e:	4888      	ldr	r0, [pc, #544]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006920:	f007 faac 	bl	800de7c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006924:	4886      	ldr	r0, [pc, #536]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006926:	f007 fd4d 	bl	800e3c4 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800692a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800692e:	4985      	ldr	r1, [pc, #532]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006930:	4883      	ldr	r0, [pc, #524]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006932:	f007 fa09 	bl	800dd48 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8006936:	4b84      	ldr	r3, [pc, #528]	; (8006b48 <ubloxSetFrequency+0x28c>)
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	2208      	movs	r2, #8
 8006942:	4619      	mov	r1, r3
 8006944:	487e      	ldr	r0, [pc, #504]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006946:	f007 f9a3 	bl	800dc90 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 800694a:	bf00      	nop
 800694c:	4b7e      	ldr	r3, [pc, #504]	; (8006b48 <ubloxSetFrequency+0x28c>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	d1fa      	bne.n	800694c <ubloxSetFrequency+0x90>
		}

		/* Wait for the response */
		int i = 11;
 8006956:	230b      	movs	r3, #11
 8006958:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 800695a:	e005      	b.n	8006968 <ubloxSetFrequency+0xac>
			HAL_Delay(100UL);
 800695c:	2064      	movs	r0, #100	; 0x64
 800695e:	f000 fe73 	bl	8007648 <HAL_Delay>
			--i;
 8006962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006964:	3b01      	subs	r3, #1
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 8006968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <ubloxSetFrequency+0xbc>
 800696e:	4b73      	ldr	r3, [pc, #460]	; (8006b3c <ubloxSetFrequency+0x280>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	d1f1      	bne.n	800695c <ubloxSetFrequency+0xa0>
			HAL_Delay(100);
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006978:	4b72      	ldr	r3, [pc, #456]	; (8006b44 <ubloxSetFrequency+0x288>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2bb5      	cmp	r3, #181	; 0xb5
 800697e:	f040 80c7 	bne.w	8006b10 <ubloxSetFrequency+0x254>
 8006982:	4b70      	ldr	r3, [pc, #448]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b62      	cmp	r3, #98	; 0x62
 8006988:	f040 80c2 	bne.w	8006b10 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 800698c:	4b6d      	ldr	r3, [pc, #436]	; (8006b44 <ubloxSetFrequency+0x288>)
 800698e:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006990:	2b06      	cmp	r3, #6
 8006992:	f040 80bd 	bne.w	8006b10 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006996:	4b6b      	ldr	r3, [pc, #428]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b31      	cmp	r3, #49	; 0x31
 800699c:	f040 80b8 	bne.w	8006b10 <ubloxSetFrequency+0x254>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a4:	e00c      	b.n	80069c0 <ubloxSetFrequency+0x104>
				cfg_tp5_Set[i] = ublox_Response[i];
 80069a6:	4a67      	ldr	r2, [pc, #412]	; (8006b44 <ubloxSetFrequency+0x288>)
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	4413      	add	r3, r2
 80069ac:	7819      	ldrb	r1, [r3, #0]
 80069ae:	f107 0214 	add.w	r2, r7, #20
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	4413      	add	r3, r2
 80069b6:	460a      	mov	r2, r1
 80069b8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	3301      	adds	r3, #1
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	2b27      	cmp	r3, #39	; 0x27
 80069c4:	d9ef      	bls.n	80069a6 <ubloxSetFrequency+0xea>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 80069c6:	7c3b      	ldrb	r3, [r7, #16]
 80069c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cfg_tp5_Set[6 +  9] = buf[1];
 80069cc:	7c7b      	ldrb	r3, [r7, #17]
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cfg_tp5_Set[6 + 10] = buf[2];
 80069d2:	7cbb      	ldrb	r3, [r7, #18]
 80069d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			cfg_tp5_Set[6 + 11] = buf[3];
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 80069de:	7c3b      	ldrb	r3, [r7, #16]
 80069e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			cfg_tp5_Set[6 + 13] = buf[1];
 80069e4:	7c7b      	ldrb	r3, [r7, #17]
 80069e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			cfg_tp5_Set[6 + 14] = buf[2];
 80069ea:	7cbb      	ldrb	r3, [r7, #18]
 80069ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			cfg_tp5_Set[6 + 15] = buf[3];
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			if (frequency > 1) {
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d918      	bls.n	8006a2e <ubloxSetFrequency+0x172>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x00;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x00;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x80;
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x00;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x00;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x80;
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006a2c:	e017      	b.n	8006a5e <ubloxSetFrequency+0x1a2>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 8006a2e:	2399      	movs	r3, #153	; 0x99
 8006a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x99;
 8006a34:	2399      	movs	r3, #153	; 0x99
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x99;
 8006a3a:	2399      	movs	r3, #153	; 0x99
 8006a3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x19;
 8006a40:	2319      	movs	r3, #25
 8006a42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 8006a46:	2399      	movs	r3, #153	; 0x99
 8006a48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x99;
 8006a4c:	2399      	movs	r3, #153	; 0x99
 8006a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x99;
 8006a52:	2399      	movs	r3, #153	; 0x99
 8006a54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x19;
 8006a58:	2319      	movs	r3, #25
 8006a5a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8006a5e:	23cf      	movs	r3, #207	; 0xcf
 8006a60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8006a64:	f107 0014 	add.w	r0, r7, #20
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2201      	movs	r2, #1
 8006a70:	2128      	movs	r1, #40	; 0x28
 8006a72:	f7ff fdd7 	bl	8006624 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <ubloxSetFrequency+0x28c>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8006a7c:	4830      	ldr	r0, [pc, #192]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006a7e:	f007 f9a7 	bl	800ddd0 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	2228      	movs	r2, #40	; 0x28
 8006a88:	4619      	mov	r1, r3
 8006a8a:	482d      	ldr	r0, [pc, #180]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006a8c:	f007 f900 	bl	800dc90 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006a90:	bf00      	nop
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <ubloxSetFrequency+0x28c>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d1fa      	bne.n	8006a92 <ubloxSetFrequency+0x1d6>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006a9c:	4828      	ldr	r0, [pc, #160]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006a9e:	f007 f997 	bl	800ddd0 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8006aa2:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <ubloxSetFrequency+0x280>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006aa8:	4825      	ldr	r0, [pc, #148]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006aaa:	f007 fc8b 	bl	800e3c4 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ab2:	4924      	ldr	r1, [pc, #144]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006ab4:	4822      	ldr	r0, [pc, #136]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006ab6:	f007 f947 	bl	800dd48 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006aba:	bf00      	nop
 8006abc:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <ubloxSetFrequency+0x280>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d1fa      	bne.n	8006abc <ubloxSetFrequency+0x200>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8006ac6:	481e      	ldr	r0, [pc, #120]	; (8006b40 <ubloxSetFrequency+0x284>)
 8006ac8:	f007 f9d8 	bl	800de7c <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006acc:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2bb5      	cmp	r3, #181	; 0xb5
 8006ad2:	d11d      	bne.n	8006b10 <ubloxSetFrequency+0x254>
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b62      	cmp	r3, #98	; 0x62
 8006ada:	d119      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006ade:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d115      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006ae4:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d111      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006aee:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10d      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006af4:	4b13      	ldr	r3, [pc, #76]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006af6:	795b      	ldrb	r3, [r3, #5]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006afe:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	d105      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <ubloxSetFrequency+0x288>)
 8006b06:	79db      	ldrb	r3, [r3, #7]
 8006b08:	2b31      	cmp	r3, #49	; 0x31
 8006b0a:	d101      	bne.n	8006b10 <ubloxSetFrequency+0x254>
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100);
				}
#endif
				return 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e00e      	b.n	8006b2e <ubloxSetFrequency+0x272>
			HAL_Delay(100);
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8006b10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b14:	3b01      	subs	r3, #1
 8006b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		HAL_Delay(1500UL);
 8006b1a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006b1e:	f000 fd93 	bl	8007648 <HAL_Delay>
	while (tryCtr) {
 8006b22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f aef6 	bne.w	8006918 <ubloxSetFrequency+0x5c>
	}

	return 1;
 8006b2c:	2301      	movs	r3, #1
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3748      	adds	r7, #72	; 0x48
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08013020 	.word	0x08013020
 8006b3c:	200042a2 	.word	0x200042a2
 8006b40:	200066a0 	.word	0x200066a0
 8006b44:	20004428 	.word	0x20004428
 8006b48:	200042a1 	.word	0x200042a1

08006b4c <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0ac      	sub	sp, #176	; 0xb0
 8006b50:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8006b52:	4a0e      	ldr	r2, [pc, #56]	; (8006b8c <ubloxMsgsTurnOff+0x40>)
 8006b54:	463b      	mov	r3, r7
 8006b56:	4611      	mov	r1, r2
 8006b58:	22af      	movs	r2, #175	; 0xaf
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f008 fa84 	bl	800f068 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <ubloxMsgsTurnOff+0x44>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8006b66:	463b      	mov	r3, r7
 8006b68:	22af      	movs	r2, #175	; 0xaf
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4809      	ldr	r0, [pc, #36]	; (8006b94 <ubloxMsgsTurnOff+0x48>)
 8006b6e:	f007 f88f 	bl	800dc90 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006b72:	bf00      	nop
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <ubloxMsgsTurnOff+0x44>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d1fa      	bne.n	8006b74 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8006b7e:	4805      	ldr	r0, [pc, #20]	; (8006b94 <ubloxMsgsTurnOff+0x48>)
 8006b80:	f007 f926 	bl	800ddd0 <HAL_UART_AbortTransmit_IT>
}
 8006b84:	bf00      	nop
 8006b86:	37b0      	adds	r7, #176	; 0xb0
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	08013028 	.word	0x08013028
 8006b90:	200042a1 	.word	0x200042a1
 8006b94:	200066a0 	.word	0x200066a0

08006b98 <ublox_NavPosllh_req>:

void ublox_NavPosllh_req(UbloxNavPosllh_t* ubloxNavPosllh)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Posllh_Req[] 		= {
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <ublox_NavPosllh_req+0x68>)
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006baa:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x02,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Posllh_Req, sizeof(nav_Posllh_Req), 1, 0, 0);
 8006bae:	f107 0008 	add.w	r0, r7, #8
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2201      	movs	r2, #1
 8006bba:	2108      	movs	r1, #8
 8006bbc:	f7ff fd32 	bl	8006624 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavPosllh) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d018      	beq.n	8006bf8 <ublox_NavPosllh_req+0x60>
		gUbloxNavPosllh_resp = ubloxNavPosllh;
 8006bc6:	4a0f      	ldr	r2, [pc, #60]	; (8006c04 <ublox_NavPosllh_req+0x6c>)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006bcc:	480e      	ldr	r0, [pc, #56]	; (8006c08 <ublox_NavPosllh_req+0x70>)
 8006bce:	f007 f825 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006bd2:	f7ff fcf7 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-POSLLH request */
	gUart1TxReady = RESET;
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <ublox_NavPosllh_req+0x74>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Posllh_Req, sizeof(nav_Posllh_Req));
 8006bdc:	f107 0308 	add.w	r3, r7, #8
 8006be0:	2208      	movs	r2, #8
 8006be2:	4619      	mov	r1, r3
 8006be4:	4808      	ldr	r0, [pc, #32]	; (8006c08 <ublox_NavPosllh_req+0x70>)
 8006be6:	f007 f853 	bl	800dc90 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006bea:	bf00      	nop
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <ublox_NavPosllh_req+0x74>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d1fa      	bne.n	8006bec <ublox_NavPosllh_req+0x54>
 8006bf6:	e000      	b.n	8006bfa <ublox_NavPosllh_req+0x62>
		return;
 8006bf8:	bf00      	nop
	}
}
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	080130d8 	.word	0x080130d8
 8006c04:	20004418 	.word	0x20004418
 8006c08:	200066a0 	.word	0x200066a0
 8006c0c:	200042a1 	.word	0x200042a1

08006c10 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006c18:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <ublox_NavClock_req+0x68>)
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c22:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006c26:	f107 0008 	add.w	r0, r7, #8
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2201      	movs	r2, #1
 8006c32:	2108      	movs	r1, #8
 8006c34:	f7ff fcf6 	bl	8006624 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <ublox_NavClock_req+0x60>
		gUbloxNavClock_resp = ubloxNavClock;
 8006c3e:	4a0f      	ldr	r2, [pc, #60]	; (8006c7c <ublox_NavClock_req+0x6c>)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006c44:	480e      	ldr	r0, [pc, #56]	; (8006c80 <ublox_NavClock_req+0x70>)
 8006c46:	f006 ffe9 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006c4a:	f7ff fcbb 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <ublox_NavClock_req+0x74>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8006c54:	f107 0308 	add.w	r3, r7, #8
 8006c58:	2208      	movs	r2, #8
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4808      	ldr	r0, [pc, #32]	; (8006c80 <ublox_NavClock_req+0x70>)
 8006c5e:	f007 f817 	bl	800dc90 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006c62:	bf00      	nop
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <ublox_NavClock_req+0x74>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d1fa      	bne.n	8006c64 <ublox_NavClock_req+0x54>
 8006c6e:	e000      	b.n	8006c72 <ublox_NavClock_req+0x62>
		return;
 8006c70:	bf00      	nop
	}
}
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	080130e0 	.word	0x080130e0
 8006c7c:	2000441c 	.word	0x2000441c
 8006c80:	200066a0 	.word	0x200066a0
 8006c84:	200042a1 	.word	0x200042a1

08006c88 <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <ublox_NavDop_req+0x68>)
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c9a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8006c9e:	f107 0008 	add.w	r0, r7, #8
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2108      	movs	r1, #8
 8006cac:	f7ff fcba 	bl	8006624 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d018      	beq.n	8006ce8 <ublox_NavDop_req+0x60>
		gUbloxNavDop_resp = ubloxNavDop;
 8006cb6:	4a0f      	ldr	r2, [pc, #60]	; (8006cf4 <ublox_NavDop_req+0x6c>)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006cbc:	480e      	ldr	r0, [pc, #56]	; (8006cf8 <ublox_NavDop_req+0x70>)
 8006cbe:	f006 ffad 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006cc2:	f7ff fc7f 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <ublox_NavDop_req+0x74>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4808      	ldr	r0, [pc, #32]	; (8006cf8 <ublox_NavDop_req+0x70>)
 8006cd6:	f006 ffdb 	bl	800dc90 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006cda:	bf00      	nop
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <ublox_NavDop_req+0x74>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d1fa      	bne.n	8006cdc <ublox_NavDop_req+0x54>
 8006ce6:	e000      	b.n	8006cea <ublox_NavDop_req+0x62>
		return;
 8006ce8:	bf00      	nop
	}
}
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	080130e8 	.word	0x080130e8
 8006cf4:	20004420 	.word	0x20004420
 8006cf8:	200066a0 	.word	0x200066a0
 8006cfc:	200042a1 	.word	0x200042a1

08006d00 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8006d08:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <ublox_NavSvinfo_req+0x68>)
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d12:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 8006d16:	f107 0008 	add.w	r0, r7, #8
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2201      	movs	r2, #1
 8006d22:	2108      	movs	r1, #8
 8006d24:	f7ff fc7e 	bl	8006624 <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d018      	beq.n	8006d60 <ublox_NavSvinfo_req+0x60>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8006d2e:	4a0f      	ldr	r2, [pc, #60]	; (8006d6c <ublox_NavSvinfo_req+0x6c>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006d34:	480e      	ldr	r0, [pc, #56]	; (8006d70 <ublox_NavSvinfo_req+0x70>)
 8006d36:	f006 ff71 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006d3a:	f7ff fc43 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <ublox_NavSvinfo_req+0x74>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4808      	ldr	r0, [pc, #32]	; (8006d70 <ublox_NavSvinfo_req+0x70>)
 8006d4e:	f006 ff9f 	bl	800dc90 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006d52:	bf00      	nop
 8006d54:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <ublox_NavSvinfo_req+0x74>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d1fa      	bne.n	8006d54 <ublox_NavSvinfo_req+0x54>
 8006d5e:	e000      	b.n	8006d62 <ublox_NavSvinfo_req+0x62>
		return;
 8006d60:	bf00      	nop
	}
}
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	080130f0 	.word	0x080130f0
 8006d6c:	20004424 	.word	0x20004424
 8006d70:	200066a0 	.word	0x200066a0
 8006d74:	200042a1 	.word	0x200042a1

08006d78 <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006d82:	4859      	ldr	r0, [pc, #356]	; (8006ee8 <ublox_All_resp+0x170>)
 8006d84:	f006 ff4a 	bl	800dc1c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006d88:	f7ff fc1c 	bl	80065c4 <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8006d8c:	4856      	ldr	r0, [pc, #344]	; (8006ee8 <ublox_All_resp+0x170>)
 8006d8e:	f007 fb19 	bl	800e3c4 <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8006d92:	4b56      	ldr	r3, [pc, #344]	; (8006eec <ublox_All_resp+0x174>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d9c:	4954      	ldr	r1, [pc, #336]	; (8006ef0 <ublox_All_resp+0x178>)
 8006d9e:	4852      	ldr	r0, [pc, #328]	; (8006ee8 <ublox_All_resp+0x170>)
 8006da0:	f006 ffd2 	bl	800dd48 <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8006da4:	2364      	movs	r3, #100	; 0x64
 8006da6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006daa:	e007      	b.n	8006dbc <ublox_All_resp+0x44>
			HAL_Delay(10UL);
 8006dac:	200a      	movs	r0, #10
 8006dae:	f000 fc4b 	bl	8007648 <HAL_Delay>
			--cnt;
 8006db2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006db6:	3b01      	subs	r3, #1
 8006db8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006dbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <ublox_All_resp+0x56>
 8006dc4:	4b49      	ldr	r3, [pc, #292]	; (8006eec <ublox_All_resp+0x174>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d1ee      	bne.n	8006dac <ublox_All_resp+0x34>
		}

		if (gUart1RxCnt) {
 8006dce:	4b49      	ldr	r3, [pc, #292]	; (8006ef4 <ublox_All_resp+0x17c>)
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0dc      	beq.n	8006d92 <ublox_All_resp+0x1a>
			dataIdx		= 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	847b      	strh	r3, [r7, #34]	; 0x22
			dataCnt 	= gUart1RxCnt;
 8006ddc:	4b45      	ldr	r3, [pc, #276]	; (8006ef4 <ublox_All_resp+0x17c>)
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	827b      	strh	r3, [r7, #18]
			break;
 8006de2:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8006de4:	e3b4      	b.n	8007550 <ublox_All_resp+0x7d8>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006de8:	4a41      	ldr	r2, [pc, #260]	; (8006ef0 <ublox_All_resp+0x178>)
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	747b      	strb	r3, [r7, #17]
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8006dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a3f      	ldr	r2, [pc, #252]	; (8006ef0 <ublox_All_resp+0x178>)
 8006df4:	5cd3      	ldrb	r3, [r2, r3]
 8006df6:	743b      	strb	r3, [r7, #16]

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8006df8:	7c7b      	ldrb	r3, [r7, #17]
 8006dfa:	2bb5      	cmp	r3, #181	; 0xb5
 8006dfc:	d102      	bne.n	8006e04 <ublox_All_resp+0x8c>
 8006dfe:	7c3b      	ldrb	r3, [r7, #16]
 8006e00:	2b62      	cmp	r3, #98	; 0x62
 8006e02:	d003      	beq.n	8006e0c <ublox_All_resp+0x94>
			dataIdx++;
 8006e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e06:	3301      	adds	r3, #1
 8006e08:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 8006e0a:	e3a1      	b.n	8007550 <ublox_All_resp+0x7d8>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8006e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e0e:	3302      	adds	r3, #2
 8006e10:	4a37      	ldr	r2, [pc, #220]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e12:	5cd3      	ldrb	r3, [r2, r3]
 8006e14:	73fb      	strb	r3, [r7, #15]
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8006e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e18:	3303      	adds	r3, #3
 8006e1a:	4a35      	ldr	r2, [pc, #212]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e1c:	5cd3      	ldrb	r3, [r2, r3]
 8006e1e:	73bb      	strb	r3, [r7, #14]
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8006e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e22:	3304      	adds	r3, #4
 8006e24:	4a32      	ldr	r2, [pc, #200]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e26:	5cd3      	ldrb	r3, [r2, r3]
 8006e28:	b21a      	sxth	r2, r3
 8006e2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e2c:	3305      	adds	r3, #5
 8006e2e:	4930      	ldr	r1, [pc, #192]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e30:	5ccb      	ldrb	r3, [r1, r3]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	b21b      	sxth	r3, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	81bb      	strh	r3, [r7, #12]

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8006e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e3e:	1d9a      	adds	r2, r3, #6
 8006e40:	89bb      	ldrh	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	8a7b      	ldrh	r3, [r7, #18]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	f280 8388 	bge.w	800755e <ublox_All_resp+0x7e6>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 8006e4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	3306      	adds	r3, #6
 8006e56:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e58:	5cd3      	ldrb	r3, [r2, r3]
 8006e5a:	72fb      	strb	r3, [r7, #11]
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 8006e5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e5e:	89bb      	ldrh	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	3307      	adds	r3, #7
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	72bb      	strb	r3, [r7, #10]

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	71fb      	strb	r3, [r7, #7]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	71bb      	strb	r3, [r7, #6]
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8006e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e74:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <ublox_All_resp+0x178>)
 8006e76:	1898      	adds	r0, r3, r2
 8006e78:	89bb      	ldrh	r3, [r7, #12]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	b299      	uxth	r1, r3
 8006e7e:	1dfa      	adds	r2, r7, #7
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	f7ff fbcc 	bl	8006624 <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	7afa      	ldrb	r2, [r7, #11]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d103      	bne.n	8006e9c <ublox_All_resp+0x124>
 8006e94:	79bb      	ldrb	r3, [r7, #6]
 8006e96:	7aba      	ldrb	r2, [r7, #10]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d003      	beq.n	8006ea4 <ublox_All_resp+0x12c>
			dataIdx++;
 8006e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 8006ea2:	e355      	b.n	8007550 <ublox_All_resp+0x7d8>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	b21a      	sxth	r2, r3
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	b21b      	sxth	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	813b      	strh	r3, [r7, #8]
		switch (clsID)
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006eba:	f000 8218 	beq.w	80072ee <ublox_All_resp+0x576>
 8006ebe:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006ec2:	f300 833f 	bgt.w	8007544 <ublox_All_resp+0x7cc>
 8006ec6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006eca:	f000 817e 	beq.w	80071ca <ublox_All_resp+0x452>
 8006ece:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006ed2:	f300 8337 	bgt.w	8007544 <ublox_All_resp+0x7cc>
 8006ed6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006eda:	d00d      	beq.n	8006ef8 <ublox_All_resp+0x180>
 8006edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ee0:	f000 80d8 	beq.w	8007094 <ublox_All_resp+0x31c>
 8006ee4:	e32e      	b.n	8007544 <ublox_All_resp+0x7cc>
 8006ee6:	bf00      	nop
 8006ee8:	200066a0 	.word	0x200066a0
 8006eec:	200042a2 	.word	0x200042a2
 8006ef0:	20004428 	.word	0x20004428
 8006ef4:	200042a4 	.word	0x200042a4
		{
		case 0x0102:
		{
			/* NavPosllh */
			if (len == 0x001c) {
 8006ef8:	89bb      	ldrh	r3, [r7, #12]
 8006efa:	2b1c      	cmp	r3, #28
 8006efc:	f040 831d 	bne.w	800753a <ublox_All_resp+0x7c2>
				gUbloxNavPosllh_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8006f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f02:	3306      	adds	r3, #6
 8006f04:	4a61      	ldr	r2, [pc, #388]	; (800708c <ublox_All_resp+0x314>)
 8006f06:	5cd3      	ldrb	r3, [r2, r3]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f0c:	3307      	adds	r3, #7
 8006f0e:	4a5f      	ldr	r2, [pc, #380]	; (800708c <ublox_All_resp+0x314>)
 8006f10:	5cd3      	ldrb	r3, [r2, r3]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	ea41 0203 	orr.w	r2, r1, r3
 8006f18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	495b      	ldr	r1, [pc, #364]	; (800708c <ublox_All_resp+0x314>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	431a      	orrs	r2, r3
 8006f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f26:	3309      	adds	r3, #9
 8006f28:	4958      	ldr	r1, [pc, #352]	; (800708c <ublox_All_resp+0x314>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	061b      	lsls	r3, r3, #24
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	4b57      	ldr	r3, [pc, #348]	; (8007090 <ublox_All_resp+0x318>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	601a      	str	r2, [r3, #0]
				gUbloxNavPosllh_resp->lon		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24);
 8006f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f38:	330a      	adds	r3, #10
 8006f3a:	4a54      	ldr	r2, [pc, #336]	; (800708c <ublox_All_resp+0x314>)
 8006f3c:	5cd3      	ldrb	r3, [r2, r3]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f42:	330b      	adds	r3, #11
 8006f44:	4a51      	ldr	r2, [pc, #324]	; (800708c <ublox_All_resp+0x314>)
 8006f46:	5cd3      	ldrb	r3, [r2, r3]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	ea41 0203 	orr.w	r2, r1, r3
 8006f4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f50:	330c      	adds	r3, #12
 8006f52:	494e      	ldr	r1, [pc, #312]	; (800708c <ublox_All_resp+0x314>)
 8006f54:	5ccb      	ldrb	r3, [r1, r3]
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	ea42 0103 	orr.w	r1, r2, r3
 8006f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f5e:	330d      	adds	r3, #13
 8006f60:	4a4a      	ldr	r2, [pc, #296]	; (800708c <ublox_All_resp+0x314>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	061a      	lsls	r2, r3, #24
 8006f66:	4b4a      	ldr	r3, [pc, #296]	; (8007090 <ublox_All_resp+0x318>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
				gUbloxNavPosllh_resp->lat		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24);
 8006f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f70:	330e      	adds	r3, #14
 8006f72:	4a46      	ldr	r2, [pc, #280]	; (800708c <ublox_All_resp+0x314>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	4619      	mov	r1, r3
 8006f78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f7a:	330f      	adds	r3, #15
 8006f7c:	4a43      	ldr	r2, [pc, #268]	; (800708c <ublox_All_resp+0x314>)
 8006f7e:	5cd3      	ldrb	r3, [r2, r3]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	ea41 0203 	orr.w	r2, r1, r3
 8006f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f88:	3310      	adds	r3, #16
 8006f8a:	4940      	ldr	r1, [pc, #256]	; (800708c <ublox_All_resp+0x314>)
 8006f8c:	5ccb      	ldrb	r3, [r1, r3]
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	ea42 0103 	orr.w	r1, r2, r3
 8006f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f96:	3311      	adds	r3, #17
 8006f98:	4a3c      	ldr	r2, [pc, #240]	; (800708c <ublox_All_resp+0x314>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	061a      	lsls	r2, r3, #24
 8006f9e:	4b3c      	ldr	r3, [pc, #240]	; (8007090 <ublox_All_resp+0x318>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
				gUbloxNavPosllh_resp->height	= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8006fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fa8:	3312      	adds	r3, #18
 8006faa:	4a38      	ldr	r2, [pc, #224]	; (800708c <ublox_All_resp+0x314>)
 8006fac:	5cd3      	ldrb	r3, [r2, r3]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fb2:	3313      	adds	r3, #19
 8006fb4:	4a35      	ldr	r2, [pc, #212]	; (800708c <ublox_All_resp+0x314>)
 8006fb6:	5cd3      	ldrb	r3, [r2, r3]
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	ea41 0203 	orr.w	r2, r1, r3
 8006fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	4932      	ldr	r1, [pc, #200]	; (800708c <ublox_All_resp+0x314>)
 8006fc4:	5ccb      	ldrb	r3, [r1, r3]
 8006fc6:	041b      	lsls	r3, r3, #16
 8006fc8:	ea42 0103 	orr.w	r1, r2, r3
 8006fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fce:	3315      	adds	r3, #21
 8006fd0:	4a2e      	ldr	r2, [pc, #184]	; (800708c <ublox_All_resp+0x314>)
 8006fd2:	5cd3      	ldrb	r3, [r2, r3]
 8006fd4:	061a      	lsls	r2, r3, #24
 8006fd6:	4b2e      	ldr	r3, [pc, #184]	; (8007090 <ublox_All_resp+0x318>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	60da      	str	r2, [r3, #12]
				gUbloxNavPosllh_resp->hMSL		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 8006fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fe0:	3316      	adds	r3, #22
 8006fe2:	4a2a      	ldr	r2, [pc, #168]	; (800708c <ublox_All_resp+0x314>)
 8006fe4:	5cd3      	ldrb	r3, [r2, r3]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fea:	3317      	adds	r3, #23
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <ublox_All_resp+0x314>)
 8006fee:	5cd3      	ldrb	r3, [r2, r3]
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	ea41 0203 	orr.w	r2, r1, r3
 8006ff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ff8:	3318      	adds	r3, #24
 8006ffa:	4924      	ldr	r1, [pc, #144]	; (800708c <ublox_All_resp+0x314>)
 8006ffc:	5ccb      	ldrb	r3, [r1, r3]
 8006ffe:	041b      	lsls	r3, r3, #16
 8007000:	ea42 0103 	orr.w	r1, r2, r3
 8007004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007006:	3319      	adds	r3, #25
 8007008:	4a20      	ldr	r2, [pc, #128]	; (800708c <ublox_All_resp+0x314>)
 800700a:	5cd3      	ldrb	r3, [r2, r3]
 800700c:	061a      	lsls	r2, r3, #24
 800700e:	4b20      	ldr	r3, [pc, #128]	; (8007090 <ublox_All_resp+0x318>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	611a      	str	r2, [r3, #16]
				gUbloxNavPosllh_resp->hAcc		= ublox_Response[dataIdx + 6 + 20] | (ublox_Response[dataIdx + 6 + 21] << 8) | (ublox_Response[dataIdx + 6 + 22] << 16) | (ublox_Response[dataIdx + 6 + 23] << 24);
 8007016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007018:	331a      	adds	r3, #26
 800701a:	4a1c      	ldr	r2, [pc, #112]	; (800708c <ublox_All_resp+0x314>)
 800701c:	5cd3      	ldrb	r3, [r2, r3]
 800701e:	4619      	mov	r1, r3
 8007020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007022:	331b      	adds	r3, #27
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <ublox_All_resp+0x314>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	ea41 0203 	orr.w	r2, r1, r3
 800702e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007030:	331c      	adds	r3, #28
 8007032:	4916      	ldr	r1, [pc, #88]	; (800708c <ublox_All_resp+0x314>)
 8007034:	5ccb      	ldrb	r3, [r1, r3]
 8007036:	041b      	lsls	r3, r3, #16
 8007038:	431a      	orrs	r2, r3
 800703a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800703c:	331d      	adds	r3, #29
 800703e:	4913      	ldr	r1, [pc, #76]	; (800708c <ublox_All_resp+0x314>)
 8007040:	5ccb      	ldrb	r3, [r1, r3]
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	431a      	orrs	r2, r3
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <ublox_All_resp+0x318>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	615a      	str	r2, [r3, #20]
				gUbloxNavPosllh_resp->vAcc		= ublox_Response[dataIdx + 6 + 24] | (ublox_Response[dataIdx + 6 + 25] << 8) | (ublox_Response[dataIdx + 6 + 26] << 16) | (ublox_Response[dataIdx + 6 + 27] << 24);
 800704c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800704e:	331e      	adds	r3, #30
 8007050:	4a0e      	ldr	r2, [pc, #56]	; (800708c <ublox_All_resp+0x314>)
 8007052:	5cd3      	ldrb	r3, [r2, r3]
 8007054:	4619      	mov	r1, r3
 8007056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007058:	331f      	adds	r3, #31
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <ublox_All_resp+0x314>)
 800705c:	5cd3      	ldrb	r3, [r2, r3]
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	ea41 0203 	orr.w	r2, r1, r3
 8007064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007066:	3320      	adds	r3, #32
 8007068:	4908      	ldr	r1, [pc, #32]	; (800708c <ublox_All_resp+0x314>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	431a      	orrs	r2, r3
 8007070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007072:	3321      	adds	r3, #33	; 0x21
 8007074:	4905      	ldr	r1, [pc, #20]	; (800708c <ublox_All_resp+0x314>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	061b      	lsls	r3, r3, #24
 800707a:	431a      	orrs	r2, r3
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <ublox_All_resp+0x318>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	619a      	str	r2, [r3, #24]

				bf |= USART_UBLOX_RESP_BF_NAV_POSLLH;
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 800708a:	e256      	b.n	800753a <ublox_All_resp+0x7c2>
 800708c:	20004428 	.word	0x20004428
 8007090:	20004418 	.word	0x20004418

		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 8007094:	89bb      	ldrh	r3, [r7, #12]
 8007096:	2b12      	cmp	r3, #18
 8007098:	f040 8251 	bne.w	800753e <ublox_All_resp+0x7c6>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800709c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800709e:	3306      	adds	r3, #6
 80070a0:	4a96      	ldr	r2, [pc, #600]	; (80072fc <ublox_All_resp+0x584>)
 80070a2:	5cd3      	ldrb	r3, [r2, r3]
 80070a4:	4619      	mov	r1, r3
 80070a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070a8:	3307      	adds	r3, #7
 80070aa:	4a94      	ldr	r2, [pc, #592]	; (80072fc <ublox_All_resp+0x584>)
 80070ac:	5cd3      	ldrb	r3, [r2, r3]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	ea41 0203 	orr.w	r2, r1, r3
 80070b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070b6:	3308      	adds	r3, #8
 80070b8:	4990      	ldr	r1, [pc, #576]	; (80072fc <ublox_All_resp+0x584>)
 80070ba:	5ccb      	ldrb	r3, [r1, r3]
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	431a      	orrs	r2, r3
 80070c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070c2:	3309      	adds	r3, #9
 80070c4:	498d      	ldr	r1, [pc, #564]	; (80072fc <ublox_All_resp+0x584>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	061b      	lsls	r3, r3, #24
 80070ca:	431a      	orrs	r2, r3
 80070cc:	4b8c      	ldr	r3, [pc, #560]	; (8007300 <ublox_All_resp+0x588>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 80070d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070d4:	330a      	adds	r3, #10
 80070d6:	4a89      	ldr	r2, [pc, #548]	; (80072fc <ublox_All_resp+0x584>)
 80070d8:	5cd3      	ldrb	r3, [r2, r3]
 80070da:	b21a      	sxth	r2, r3
 80070dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070de:	330b      	adds	r3, #11
 80070e0:	4986      	ldr	r1, [pc, #536]	; (80072fc <ublox_All_resp+0x584>)
 80070e2:	5ccb      	ldrb	r3, [r1, r3]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	b21b      	sxth	r3, r3
 80070e8:	4313      	orrs	r3, r2
 80070ea:	b21a      	sxth	r2, r3
 80070ec:	4b84      	ldr	r3, [pc, #528]	; (8007300 <ublox_All_resp+0x588>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	b292      	uxth	r2, r2
 80070f2:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80070f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070f6:	330c      	adds	r3, #12
 80070f8:	4a80      	ldr	r2, [pc, #512]	; (80072fc <ublox_All_resp+0x584>)
 80070fa:	5cd3      	ldrb	r3, [r2, r3]
 80070fc:	b21a      	sxth	r2, r3
 80070fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007100:	330d      	adds	r3, #13
 8007102:	497e      	ldr	r1, [pc, #504]	; (80072fc <ublox_All_resp+0x584>)
 8007104:	5ccb      	ldrb	r3, [r1, r3]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	b21b      	sxth	r3, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	b21a      	sxth	r2, r3
 800710e:	4b7c      	ldr	r3, [pc, #496]	; (8007300 <ublox_All_resp+0x588>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	b292      	uxth	r2, r2
 8007114:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 8007116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007118:	330e      	adds	r3, #14
 800711a:	4a78      	ldr	r2, [pc, #480]	; (80072fc <ublox_All_resp+0x584>)
 800711c:	5cd3      	ldrb	r3, [r2, r3]
 800711e:	b21a      	sxth	r2, r3
 8007120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007122:	330f      	adds	r3, #15
 8007124:	4975      	ldr	r1, [pc, #468]	; (80072fc <ublox_All_resp+0x584>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	b21b      	sxth	r3, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	b21a      	sxth	r2, r3
 8007130:	4b73      	ldr	r3, [pc, #460]	; (8007300 <ublox_All_resp+0x588>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	b292      	uxth	r2, r2
 8007136:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 8007138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800713a:	3310      	adds	r3, #16
 800713c:	4a6f      	ldr	r2, [pc, #444]	; (80072fc <ublox_All_resp+0x584>)
 800713e:	5cd3      	ldrb	r3, [r2, r3]
 8007140:	b21a      	sxth	r2, r3
 8007142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007144:	3311      	adds	r3, #17
 8007146:	496d      	ldr	r1, [pc, #436]	; (80072fc <ublox_All_resp+0x584>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	b21b      	sxth	r3, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	b21a      	sxth	r2, r3
 8007152:	4b6b      	ldr	r3, [pc, #428]	; (8007300 <ublox_All_resp+0x588>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	b292      	uxth	r2, r2
 8007158:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 800715a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800715c:	3312      	adds	r3, #18
 800715e:	4a67      	ldr	r2, [pc, #412]	; (80072fc <ublox_All_resp+0x584>)
 8007160:	5cd3      	ldrb	r3, [r2, r3]
 8007162:	b21a      	sxth	r2, r3
 8007164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007166:	3313      	adds	r3, #19
 8007168:	4964      	ldr	r1, [pc, #400]	; (80072fc <ublox_All_resp+0x584>)
 800716a:	5ccb      	ldrb	r3, [r1, r3]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	b21b      	sxth	r3, r3
 8007170:	4313      	orrs	r3, r2
 8007172:	b21a      	sxth	r2, r3
 8007174:	4b62      	ldr	r3, [pc, #392]	; (8007300 <ublox_All_resp+0x588>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b292      	uxth	r2, r2
 800717a:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 800717c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800717e:	3314      	adds	r3, #20
 8007180:	4a5e      	ldr	r2, [pc, #376]	; (80072fc <ublox_All_resp+0x584>)
 8007182:	5cd3      	ldrb	r3, [r2, r3]
 8007184:	b21a      	sxth	r2, r3
 8007186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007188:	3315      	adds	r3, #21
 800718a:	495c      	ldr	r1, [pc, #368]	; (80072fc <ublox_All_resp+0x584>)
 800718c:	5ccb      	ldrb	r3, [r1, r3]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	b21b      	sxth	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b21a      	sxth	r2, r3
 8007196:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <ublox_All_resp+0x588>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b292      	uxth	r2, r2
 800719c:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 800719e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071a0:	3316      	adds	r3, #22
 80071a2:	4a56      	ldr	r2, [pc, #344]	; (80072fc <ublox_All_resp+0x584>)
 80071a4:	5cd3      	ldrb	r3, [r2, r3]
 80071a6:	b21a      	sxth	r2, r3
 80071a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071aa:	3317      	adds	r3, #23
 80071ac:	4953      	ldr	r1, [pc, #332]	; (80072fc <ublox_All_resp+0x584>)
 80071ae:	5ccb      	ldrb	r3, [r1, r3]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	b21b      	sxth	r3, r3
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b21a      	sxth	r2, r3
 80071b8:	4b51      	ldr	r3, [pc, #324]	; (8007300 <ublox_All_resp+0x588>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	b292      	uxth	r2, r2
 80071be:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	f043 0304 	orr.w	r3, r3, #4
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80071c8:	e1b9      	b.n	800753e <ublox_All_resp+0x7c6>

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 80071ca:	89bb      	ldrh	r3, [r7, #12]
 80071cc:	2b14      	cmp	r3, #20
 80071ce:	f040 81b8 	bne.w	8007542 <ublox_All_resp+0x7ca>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80071d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071d4:	3306      	adds	r3, #6
 80071d6:	4a49      	ldr	r2, [pc, #292]	; (80072fc <ublox_All_resp+0x584>)
 80071d8:	5cd3      	ldrb	r3, [r2, r3]
 80071da:	4619      	mov	r1, r3
 80071dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071de:	3307      	adds	r3, #7
 80071e0:	4a46      	ldr	r2, [pc, #280]	; (80072fc <ublox_All_resp+0x584>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	ea41 0203 	orr.w	r2, r1, r3
 80071ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071ec:	3308      	adds	r3, #8
 80071ee:	4943      	ldr	r1, [pc, #268]	; (80072fc <ublox_All_resp+0x584>)
 80071f0:	5ccb      	ldrb	r3, [r1, r3]
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	431a      	orrs	r2, r3
 80071f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071f8:	3309      	adds	r3, #9
 80071fa:	4940      	ldr	r1, [pc, #256]	; (80072fc <ublox_All_resp+0x584>)
 80071fc:	5ccb      	ldrb	r3, [r1, r3]
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	431a      	orrs	r2, r3
 8007202:	4b40      	ldr	r3, [pc, #256]	; (8007304 <ublox_All_resp+0x58c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 8007208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800720a:	330a      	adds	r3, #10
 800720c:	4a3b      	ldr	r2, [pc, #236]	; (80072fc <ublox_All_resp+0x584>)
 800720e:	5cd3      	ldrb	r3, [r2, r3]
 8007210:	4619      	mov	r1, r3
 8007212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007214:	330b      	adds	r3, #11
 8007216:	4a39      	ldr	r2, [pc, #228]	; (80072fc <ublox_All_resp+0x584>)
 8007218:	5cd3      	ldrb	r3, [r2, r3]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	ea41 0203 	orr.w	r2, r1, r3
 8007220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007222:	330c      	adds	r3, #12
 8007224:	4935      	ldr	r1, [pc, #212]	; (80072fc <ublox_All_resp+0x584>)
 8007226:	5ccb      	ldrb	r3, [r1, r3]
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	ea42 0103 	orr.w	r1, r2, r3
 800722e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007230:	330d      	adds	r3, #13
 8007232:	4a32      	ldr	r2, [pc, #200]	; (80072fc <ublox_All_resp+0x584>)
 8007234:	5cd3      	ldrb	r3, [r2, r3]
 8007236:	061a      	lsls	r2, r3, #24
 8007238:	4b32      	ldr	r3, [pc, #200]	; (8007304 <ublox_All_resp+0x58c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 8007240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007242:	330e      	adds	r3, #14
 8007244:	4a2d      	ldr	r2, [pc, #180]	; (80072fc <ublox_All_resp+0x584>)
 8007246:	5cd3      	ldrb	r3, [r2, r3]
 8007248:	4619      	mov	r1, r3
 800724a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800724c:	330f      	adds	r3, #15
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <ublox_All_resp+0x584>)
 8007250:	5cd3      	ldrb	r3, [r2, r3]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	ea41 0203 	orr.w	r2, r1, r3
 8007258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800725a:	3310      	adds	r3, #16
 800725c:	4927      	ldr	r1, [pc, #156]	; (80072fc <ublox_All_resp+0x584>)
 800725e:	5ccb      	ldrb	r3, [r1, r3]
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	ea42 0103 	orr.w	r1, r2, r3
 8007266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007268:	3311      	adds	r3, #17
 800726a:	4a24      	ldr	r2, [pc, #144]	; (80072fc <ublox_All_resp+0x584>)
 800726c:	5cd3      	ldrb	r3, [r2, r3]
 800726e:	061a      	lsls	r2, r3, #24
 8007270:	4b24      	ldr	r3, [pc, #144]	; (8007304 <ublox_All_resp+0x58c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8007278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800727a:	3312      	adds	r3, #18
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <ublox_All_resp+0x584>)
 800727e:	5cd3      	ldrb	r3, [r2, r3]
 8007280:	4619      	mov	r1, r3
 8007282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007284:	3313      	adds	r3, #19
 8007286:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <ublox_All_resp+0x584>)
 8007288:	5cd3      	ldrb	r3, [r2, r3]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	ea41 0203 	orr.w	r2, r1, r3
 8007290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007292:	3314      	adds	r3, #20
 8007294:	4919      	ldr	r1, [pc, #100]	; (80072fc <ublox_All_resp+0x584>)
 8007296:	5ccb      	ldrb	r3, [r1, r3]
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	431a      	orrs	r2, r3
 800729c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800729e:	3315      	adds	r3, #21
 80072a0:	4916      	ldr	r1, [pc, #88]	; (80072fc <ublox_All_resp+0x584>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	431a      	orrs	r2, r3
 80072a8:	4b16      	ldr	r3, [pc, #88]	; (8007304 <ublox_All_resp+0x58c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80072ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b0:	3316      	adds	r3, #22
 80072b2:	4a12      	ldr	r2, [pc, #72]	; (80072fc <ublox_All_resp+0x584>)
 80072b4:	5cd3      	ldrb	r3, [r2, r3]
 80072b6:	4619      	mov	r1, r3
 80072b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072ba:	3317      	adds	r3, #23
 80072bc:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <ublox_All_resp+0x584>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	ea41 0203 	orr.w	r2, r1, r3
 80072c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c8:	3318      	adds	r3, #24
 80072ca:	490c      	ldr	r1, [pc, #48]	; (80072fc <ublox_All_resp+0x584>)
 80072cc:	5ccb      	ldrb	r3, [r1, r3]
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	431a      	orrs	r2, r3
 80072d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072d4:	3319      	adds	r3, #25
 80072d6:	4909      	ldr	r1, [pc, #36]	; (80072fc <ublox_All_resp+0x584>)
 80072d8:	5ccb      	ldrb	r3, [r1, r3]
 80072da:	061b      	lsls	r3, r3, #24
 80072dc:	431a      	orrs	r2, r3
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <ublox_All_resp+0x58c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	f043 0302 	orr.w	r3, r3, #2
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80072ec:	e129      	b.n	8007542 <ublox_All_resp+0x7ca>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 80072ee:	4b06      	ldr	r3, [pc, #24]	; (8007308 <ublox_All_resp+0x590>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	61fb      	str	r3, [r7, #28]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 80072f4:	f44f 7394 	mov.w	r3, #296	; 0x128
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	e00f      	b.n	800731c <ublox_All_resp+0x5a4>
 80072fc:	20004428 	.word	0x20004428
 8007300:	20004420 	.word	0x20004420
 8007304:	2000441c 	.word	0x2000441c
 8007308:	20004424 	.word	0x20004424
						*(ptr++) = 0U;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	61fa      	str	r2, [r7, #28]
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3b01      	subs	r3, #1
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f4      	bne.n	800730c <ublox_All_resp+0x594>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007324:	3306      	adds	r3, #6
 8007326:	4a91      	ldr	r2, [pc, #580]	; (800756c <ublox_All_resp+0x7f4>)
 8007328:	5cd3      	ldrb	r3, [r2, r3]
 800732a:	4619      	mov	r1, r3
 800732c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800732e:	3307      	adds	r3, #7
 8007330:	4a8e      	ldr	r2, [pc, #568]	; (800756c <ublox_All_resp+0x7f4>)
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	ea41 0203 	orr.w	r2, r1, r3
 800733a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800733c:	3308      	adds	r3, #8
 800733e:	498b      	ldr	r1, [pc, #556]	; (800756c <ublox_All_resp+0x7f4>)
 8007340:	5ccb      	ldrb	r3, [r1, r3]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	431a      	orrs	r2, r3
 8007346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007348:	3309      	adds	r3, #9
 800734a:	4988      	ldr	r1, [pc, #544]	; (800756c <ublox_All_resp+0x7f4>)
 800734c:	5ccb      	ldrb	r3, [r1, r3]
 800734e:	061b      	lsls	r3, r3, #24
 8007350:	431a      	orrs	r2, r3
 8007352:	4b87      	ldr	r3, [pc, #540]	; (8007570 <ublox_All_resp+0x7f8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 8007358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800735a:	f103 020a 	add.w	r2, r3, #10
 800735e:	4b84      	ldr	r3, [pc, #528]	; (8007570 <ublox_All_resp+0x7f8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4982      	ldr	r1, [pc, #520]	; (800756c <ublox_All_resp+0x7f4>)
 8007364:	5c8a      	ldrb	r2, [r1, r2]
 8007366:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 8007368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800736a:	f103 020b 	add.w	r2, r3, #11
 800736e:	4b80      	ldr	r3, [pc, #512]	; (8007570 <ublox_All_resp+0x7f8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	497e      	ldr	r1, [pc, #504]	; (800756c <ublox_All_resp+0x7f4>)
 8007374:	5c8a      	ldrb	r2, [r1, r2]
 8007376:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8007378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800737a:	330c      	adds	r3, #12
 800737c:	4a7b      	ldr	r2, [pc, #492]	; (800756c <ublox_All_resp+0x7f4>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	b21a      	sxth	r2, r3
 8007382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007384:	330d      	adds	r3, #13
 8007386:	4979      	ldr	r1, [pc, #484]	; (800756c <ublox_All_resp+0x7f4>)
 8007388:	5ccb      	ldrb	r3, [r1, r3]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	b21b      	sxth	r3, r3
 800738e:	4313      	orrs	r3, r2
 8007390:	b21a      	sxth	r2, r3
 8007392:	4b77      	ldr	r3, [pc, #476]	; (8007570 <ublox_All_resp+0x7f8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b292      	uxth	r2, r2
 8007398:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 800739a:	4b75      	ldr	r3, [pc, #468]	; (8007570 <ublox_All_resp+0x7f8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	791b      	ldrb	r3, [r3, #4]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b18      	cmp	r3, #24
 80073a4:	d903      	bls.n	80073ae <ublox_All_resp+0x636>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 80073a6:	4b72      	ldr	r3, [pc, #456]	; (8007570 <ublox_All_resp+0x7f8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2218      	movs	r2, #24
 80073ac:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e0b4      	b.n	800751e <ublox_All_resp+0x7a6>
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 80073b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b6:	f103 010e 	add.w	r1, r3, #14
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	4a6a      	ldr	r2, [pc, #424]	; (8007570 <ublox_All_resp+0x7f8>)
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	4968      	ldr	r1, [pc, #416]	; (800756c <ublox_All_resp+0x7f4>)
 80073cc:	5cc9      	ldrb	r1, [r1, r3]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	3308      	adds	r3, #8
 80073d4:	460a      	mov	r2, r1
 80073d6:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 80073d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073da:	f103 010f 	add.w	r1, r3, #15
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4613      	mov	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	4a61      	ldr	r2, [pc, #388]	; (8007570 <ublox_All_resp+0x7f8>)
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	495f      	ldr	r1, [pc, #380]	; (800756c <ublox_All_resp+0x7f4>)
 80073f0:	5cc9      	ldrb	r1, [r1, r3]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	3320      	adds	r3, #32
 80073f8:	460a      	mov	r2, r1
 80073fa:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 80073fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073fe:	f103 0110 	add.w	r1, r3, #16
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	4a58      	ldr	r2, [pc, #352]	; (8007570 <ublox_All_resp+0x7f8>)
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	4956      	ldr	r1, [pc, #344]	; (800756c <ublox_All_resp+0x7f4>)
 8007414:	5cc9      	ldrb	r1, [r1, r3]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	3338      	adds	r3, #56	; 0x38
 800741c:	460a      	mov	r2, r1
 800741e:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 8007420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007422:	f103 0111 	add.w	r1, r3, #17
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4613      	mov	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	4a4f      	ldr	r2, [pc, #316]	; (8007570 <ublox_All_resp+0x7f8>)
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	494d      	ldr	r1, [pc, #308]	; (800756c <ublox_All_resp+0x7f4>)
 8007438:	5cc9      	ldrb	r1, [r1, r3]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	3350      	adds	r3, #80	; 0x50
 8007440:	460a      	mov	r2, r1
 8007442:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 8007444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007446:	f103 0112 	add.w	r1, r3, #18
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	4a46      	ldr	r2, [pc, #280]	; (8007570 <ublox_All_resp+0x7f8>)
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	4944      	ldr	r1, [pc, #272]	; (800756c <ublox_All_resp+0x7f4>)
 800745c:	5cc9      	ldrb	r1, [r1, r3]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	3368      	adds	r3, #104	; 0x68
 8007464:	460a      	mov	r2, r1
 8007466:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 8007468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800746a:	f103 0113 	add.w	r1, r3, #19
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	4a3c      	ldr	r2, [pc, #240]	; (800756c <ublox_All_resp+0x7f4>)
 800747c:	5cd1      	ldrb	r1, [r2, r3]
 800747e:	4b3c      	ldr	r3, [pc, #240]	; (8007570 <ublox_All_resp+0x7f8>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	b249      	sxtb	r1, r1
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	4413      	add	r3, r2
 8007488:	3380      	adds	r3, #128	; 0x80
 800748a:	460a      	mov	r2, r1
 800748c:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 800748e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007490:	f103 0114 	add.w	r1, r3, #20
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4613      	mov	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	4a32      	ldr	r2, [pc, #200]	; (800756c <ublox_All_resp+0x7f4>)
 80074a2:	5cd3      	ldrb	r3, [r2, r3]
 80074a4:	b219      	sxth	r1, r3
 80074a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074a8:	f103 0015 	add.w	r0, r3, #21
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4403      	add	r3, r0
 80074b8:	4a2c      	ldr	r2, [pc, #176]	; (800756c <ublox_All_resp+0x7f4>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	b21a      	sxth	r2, r3
 80074c0:	4b2b      	ldr	r3, [pc, #172]	; (8007570 <ublox_All_resp+0x7f8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	b211      	sxth	r1, r2
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	324c      	adds	r2, #76	; 0x4c
 80074cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 80074d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074d2:	f103 0116 	add.w	r1, r3, #22
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	4a22      	ldr	r2, [pc, #136]	; (800756c <ublox_All_resp+0x7f4>)
 80074e4:	5cd3      	ldrb	r3, [r2, r3]
 80074e6:	b299      	uxth	r1, r3
 80074e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ea:	f103 0017 	add.w	r0, r3, #23
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4403      	add	r3, r0
 80074fa:	4a1c      	ldr	r2, [pc, #112]	; (800756c <ublox_All_resp+0x7f4>)
 80074fc:	5cd3      	ldrb	r3, [r2, r3]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b29b      	uxth	r3, r3
 8007504:	430b      	orrs	r3, r1
 8007506:	b29b      	uxth	r3, r3
 8007508:	b21a      	sxth	r2, r3
 800750a:	4b19      	ldr	r3, [pc, #100]	; (8007570 <ublox_All_resp+0x7f8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4611      	mov	r1, r2
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	3232      	adds	r2, #50	; 0x32
 8007514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	3301      	adds	r3, #1
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <ublox_All_resp+0x7f8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4293      	cmp	r3, r2
 800752c:	f6ff af42 	blt.w	80073b4 <ublox_All_resp+0x63c>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	f043 0308 	orr.w	r3, r3, #8
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 8007538:	e004      	b.n	8007544 <ublox_All_resp+0x7cc>
			break;
 800753a:	bf00      	nop
 800753c:	e002      	b.n	8007544 <ublox_All_resp+0x7cc>
			break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <ublox_All_resp+0x7cc>
			break;
 8007542:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 8007544:	89ba      	ldrh	r2, [r7, #12]
 8007546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007548:	4413      	add	r3, r2
 800754a:	b29b      	uxth	r3, r3
 800754c:	3308      	adds	r3, #8
 800754e:	847b      	strh	r3, [r7, #34]	; 0x22
	while (dataIdx < (dataCnt - 8)) {
 8007550:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007552:	8a7b      	ldrh	r3, [r7, #18]
 8007554:	3b08      	subs	r3, #8
 8007556:	429a      	cmp	r2, r3
 8007558:	f6ff ac45 	blt.w	8006de6 <ublox_All_resp+0x6e>
 800755c:	e000      	b.n	8007560 <ublox_All_resp+0x7e8>
			break;
 800755e:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007562:	4618      	mov	r0, r3
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20004428 	.word	0x20004428
 8007570:	20004424 	.word	0x20004424

08007574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007578:	f7fe fb72 	bl	8005c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800757c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800757e:	e003      	b.n	8007588 <LoopCopyDataInit>

08007580 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007582:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007584:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007586:	3104      	adds	r1, #4

08007588 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007588:	480a      	ldr	r0, [pc, #40]	; (80075b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800758a:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800758c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800758e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007590:	d3f6      	bcc.n	8007580 <CopyDataInit>
	ldr	r2, =_sbss
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8007594:	e002      	b.n	800759c <LoopFillZerobss>

08007596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007596:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007598:	f842 3b04 	str.w	r3, [r2], #4

0800759c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800759c:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <LoopForever+0x16>)
	cmp	r2, r3
 800759e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80075a0:	d3f9      	bcc.n	8007596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075a2:	f007 fd3d 	bl	800f020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80075a6:	f7fd fc67 	bl	8004e78 <main>

080075aa <LoopForever>:

LoopForever:
    b LoopForever
 80075aa:	e7fe      	b.n	80075aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80075ac:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80075b0:	08013ad8 	.word	0x08013ad8
	ldr	r0, =_sdata
 80075b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80075b8:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80075bc:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80075c0:	200067bc 	.word	0x200067bc

080075c4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80075c4:	e7fe      	b.n	80075c4 <CAN1_RX0_IRQHandler>
	...

080075c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <HAL_Init+0x3c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <HAL_Init+0x3c>)
 80075d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075de:	2003      	movs	r0, #3
 80075e0:	f001 fd69 	bl	80090b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80075e4:	200f      	movs	r0, #15
 80075e6:	f7fe f9a3 	bl	8005930 <HAL_InitTick>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	71fb      	strb	r3, [r7, #7]
 80075f4:	e001      	b.n	80075fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80075f6:	f7fe f977 	bl	80058e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80075fa:	79fb      	ldrb	r3, [r7, #7]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40022000 	.word	0x40022000

08007608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_IncTick+0x20>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	4b06      	ldr	r3, [pc, #24]	; (800762c <HAL_IncTick+0x24>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4413      	add	r3, r2
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <HAL_IncTick+0x24>)
 800761a:	6013      	str	r3, [r2, #0]
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000014 	.word	0x20000014
 800762c:	200067a8 	.word	0x200067a8

08007630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return uwTick;
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <HAL_GetTick+0x14>)
 8007636:	681b      	ldr	r3, [r3, #0]
}
 8007638:	4618      	mov	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200067a8 	.word	0x200067a8

08007648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007650:	f7ff ffee 	bl	8007630 <HAL_GetTick>
 8007654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d005      	beq.n	800766e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_Delay+0x44>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800766e:	bf00      	nop
 8007670:	f7ff ffde 	bl	8007630 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d8f7      	bhi.n	8007670 <HAL_Delay+0x28>
  {
  }
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000014 	.word	0x20000014

08007690 <LL_ADC_SetCommonClock>:
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LL_ADC_SetCommonPathInternalCh>:
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <LL_ADC_GetCommonPathInternalCh>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <LL_ADC_SetOffset>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3360      	adds	r3, #96	; 0x60
 800770a:	461a      	mov	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <LL_ADC_SetOffset+0x44>)
 800771a:	4013      	ands	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	4313      	orrs	r3, r2
 8007728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	601a      	str	r2, [r3, #0]
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	03fff000 	.word	0x03fff000

08007740 <LL_ADC_GetOffsetChannel>:
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3360      	adds	r3, #96	; 0x60
 800774e:	461a      	mov	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <LL_ADC_SetOffsetState>:
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3360      	adds	r3, #96	; 0x60
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	431a      	orrs	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <LL_ADC_REG_SetSequencerRanks>:
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3330      	adds	r3, #48	; 0x30
 80077d8:	461a      	mov	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	f003 030c 	and.w	r3, r3, #12
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	211f      	movs	r1, #31
 80077f4:	fa01 f303 	lsl.w	r3, r1, r3
 80077f8:	43db      	mvns	r3, r3
 80077fa:	401a      	ands	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0e9b      	lsrs	r3, r3, #26
 8007800:	f003 011f 	and.w	r1, r3, #31
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	431a      	orrs	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <LL_ADC_SetChannelSamplingTime>:
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3314      	adds	r3, #20
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	0e5b      	lsrs	r3, r3, #25
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	4413      	add	r3, r2
 8007864:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	0d1b      	lsrs	r3, r3, #20
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2107      	movs	r1, #7
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	43db      	mvns	r3, r3
 800787a:	401a      	ands	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	0d1b      	lsrs	r3, r3, #20
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	fa01 f303 	lsl.w	r3, r1, r3
 800788a:	431a      	orrs	r2, r3
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_ADC_SetChannelSingleDiff>:
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078b4:	43db      	mvns	r3, r3
 80078b6:	401a      	ands	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0318 	and.w	r3, r3, #24
 80078be:	4908      	ldr	r1, [pc, #32]	; (80078e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80078c0:	40d9      	lsrs	r1, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	400b      	ands	r3, r1
 80078c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ca:	431a      	orrs	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	0007ffff 	.word	0x0007ffff

080078e4 <LL_ADC_DisableDeepPowerDown>:
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80078f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6093      	str	r3, [r2, #8]
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791c:	d101      	bne.n	8007922 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <LL_ADC_EnableInternalRegulator>:
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800796c:	d101      	bne.n	8007972 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <LL_ADC_Enable>:
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007994:	f043 0201 	orr.w	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	609a      	str	r2, [r3, #8]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_ADC_Disable>:
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079bc:	f043 0202 	orr.w	r2, r3, #2
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	609a      	str	r2, [r3, #8]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <LL_ADC_IsEnabled>:
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <LL_ADC_IsEnabled+0x18>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <LL_ADC_IsEnabled+0x1a>
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <LL_ADC_IsDisableOngoing>:
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d101      	bne.n	8007a0e <LL_ADC_IsDisableOngoing+0x18>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <LL_ADC_IsDisableOngoing+0x1a>
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LL_ADC_REG_StopConversion>:
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a30:	f043 0210 	orr.w	r2, r3, #16
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	609a      	str	r2, [r3, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <LL_ADC_REG_IsConversionOngoing>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d101      	bne.n	8007a5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a7e:	f043 0220 	orr.w	r2, r3, #32
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d101      	bne.n	8007aaa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e12c      	b.n	8007d2c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7f9 fb4f 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff ff05 	bl	8007908 <LL_ADC_IsDeepPowerDownEnabled>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff feeb 	bl	80078e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ff20 	bl	8007958 <LL_ADC_IsInternalRegulatorEnabled>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d115      	bne.n	8007b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff ff04 	bl	8007930 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b28:	4b82      	ldr	r3, [pc, #520]	; (8007d34 <HAL_ADC_Init+0x27c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	099b      	lsrs	r3, r3, #6
 8007b2e:	4a82      	ldr	r2, [pc, #520]	; (8007d38 <HAL_ADC_Init+0x280>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	099b      	lsrs	r3, r3, #6
 8007b36:	3301      	adds	r3, #1
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007b3c:	e002      	b.n	8007b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f9      	bne.n	8007b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff ff02 	bl	8007958 <LL_ADC_IsInternalRegulatorEnabled>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10d      	bne.n	8007b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0210 	orr.w	r2, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6a:	f043 0201 	orr.w	r2, r3, #1
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff ff62 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8007b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80c5 	bne.w	8007d1a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 80c1 	bne.w	8007d1a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ba0:	f043 0202 	orr.w	r2, r3, #2
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff ff0f 	bl	80079d0 <LL_ADC_IsEnabled>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bb8:	4860      	ldr	r0, [pc, #384]	; (8007d3c <HAL_ADC_Init+0x284>)
 8007bba:	f7ff ff09 	bl	80079d0 <LL_ADC_IsEnabled>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	485d      	ldr	r0, [pc, #372]	; (8007d40 <HAL_ADC_Init+0x288>)
 8007bcc:	f7ff fd60 	bl	8007690 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7e5b      	ldrb	r3, [r3, #25]
 8007bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d106      	bne.n	8007c0c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	3b01      	subs	r3, #1
 8007c04:	045b      	lsls	r3, r3, #17
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <HAL_ADC_Init+0x28c>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	69b9      	ldr	r1, [r7, #24]
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff feff 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8007c46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff20 	bl	8007a92 <LL_ADC_INJ_IsConversionOngoing>
 8007c52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d13d      	bne.n	8007cd6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d13a      	bne.n	8007cd6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007c64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c7c:	f023 0302 	bic.w	r3, r3, #2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	69b9      	ldr	r1, [r7, #24]
 8007c86:	430b      	orrs	r3, r1
 8007c88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d118      	bne.n	8007cc6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c9e:	f023 0304 	bic.w	r3, r3, #4
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007caa:	4311      	orrs	r1, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	611a      	str	r2, [r3, #16]
 8007cc4:	e007      	b.n	8007cd6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0201 	bic.w	r2, r2, #1
 8007cd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	f023 010f 	bic.w	r1, r3, #15
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	1e5a      	subs	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8007cf6:	e007      	b.n	8007d08 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 020f 	bic.w	r2, r2, #15
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	f023 0303 	bic.w	r3, r3, #3
 8007d10:	f043 0201 	orr.w	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
 8007d18:	e007      	b.n	8007d2a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f043 0210 	orr.w	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000008 	.word	0x20000008
 8007d38:	053e2d63 	.word	0x053e2d63
 8007d3c:	50040000 	.word	0x50040000
 8007d40:	50040300 	.word	0x50040300
 8007d44:	fff0c007 	.word	0xfff0c007

08007d48 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_ADC_Stop_DMA+0x16>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e051      	b.n	8007e02 <HAL_ADC_Stop_DMA+0xba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007d66:	2103      	movs	r1, #3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fe03 	bl	8008974 <ADC_ConversionStop>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d13f      	bne.n	8007df8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d10f      	bne.n	8007db6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fae6 	bl	800936c <HAL_DMA_Abort>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0210 	bic.w	r2, r2, #16
 8007dc4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 feef 	bl	8008bb0 <ADC_Disable>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	e002      	b.n	8007dde <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fee9 	bl	8008bb0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	f043 0201 	orr.w	r2, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b088      	sub	sp, #32
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d017      	beq.n	8007e60 <HAL_ADC_IRQHandler+0x56>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f854 	bl	8008f00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <HAL_ADC_IRQHandler+0x6a>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d109      	bne.n	8007e88 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d05e      	beq.n	8007f3c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d059      	beq.n	8007f3c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff fc7c 	bl	80077a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03e      	beq.n	8007f2e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d135      	bne.n	8007f2e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d12e      	bne.n	8007f2e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fdb5 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11a      	bne.n	8007f16 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 020c 	bic.w	r2, r2, #12
 8007eee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d112      	bne.n	8007f2e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0c:	f043 0201 	orr.w	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	655a      	str	r2, [r3, #84]	; 0x54
 8007f14:	e00b      	b.n	8007f2e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1a:	f043 0210 	orr.w	r2, r3, #16
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7f9 fa56 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	220c      	movs	r2, #12
 8007f3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <HAL_ADC_IRQHandler+0x146>
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d072      	beq.n	8008040 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d06d      	beq.n	8008040 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f68:	f003 0310 	and.w	r3, r3, #16
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d105      	bne.n	8007f7c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff fc4d 	bl	8007820 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007f86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fc08 	bl	80077a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007f92:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d047      	beq.n	8008032 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <HAL_ADC_IRQHandler+0x1b2>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d03f      	beq.n	8008032 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d13a      	bne.n	8008032 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d133      	bne.n	8008032 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d12e      	bne.n	8008032 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fd5a 	bl	8007a92 <LL_ADC_INJ_IsConversionOngoing>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11a      	bne.n	800801a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ff2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d112      	bne.n	8008032 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	f043 0201 	orr.w	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	655a      	str	r2, [r3, #84]	; 0x54
 8008018:	e00b      	b.n	8008032 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	f043 0210 	orr.w	r2, r3, #16
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802a:	f043 0201 	orr.w	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 ff3c 	bl	8008eb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2260      	movs	r2, #96	; 0x60
 800803e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008046:	2b00      	cmp	r3, #0
 8008048:	d011      	beq.n	800806e <HAL_ADC_IRQHandler+0x264>
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f890 	bl	8008186 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2280      	movs	r2, #128	; 0x80
 800806c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008074:	2b00      	cmp	r3, #0
 8008076:	d012      	beq.n	800809e <HAL_ADC_IRQHandler+0x294>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 ff22 	bl	8008ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d012      	beq.n	80080ce <HAL_ADC_IRQHandler+0x2c4>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00d      	beq.n	80080ce <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ff14 	bl	8008eec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02a      	beq.n	800812e <HAL_ADC_IRQHandler+0x324>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d025      	beq.n	800812e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80080ea:	2301      	movs	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	e008      	b.n	8008102 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80080fe:	2301      	movs	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10e      	bne.n	8008126 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008118:	f043 0202 	orr.w	r2, r3, #2
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7f9 f995 	bl	8001450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2210      	movs	r2, #16
 800812c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008134:	2b00      	cmp	r3, #0
 8008136:	d018      	beq.n	800816a <HAL_ADC_IRQHandler+0x360>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	f043 0208 	orr.w	r2, r3, #8
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008162:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fead 	bl	8008ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800816a:	bf00      	nop
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b0b6      	sub	sp, #216	; 0xd8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_ADC_ConfigChannel+0x22>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e3b9      	b.n	8008932 <HAL_ADC_ConfigChannel+0x796>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fc3a 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 839e 	bne.w	8008914 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b05      	cmp	r3, #5
 80081de:	d824      	bhi.n	800822a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	3b02      	subs	r3, #2
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d81b      	bhi.n	8008222 <HAL_ADC_ConfigChannel+0x86>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <HAL_ADC_ConfigChannel+0x54>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008209 	.word	0x08008209
 80081f8:	08008211 	.word	0x08008211
 80081fc:	08008219 	.word	0x08008219
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	220c      	movs	r2, #12
 8008204:	605a      	str	r2, [r3, #4]
          break;
 8008206:	e011      	b.n	800822c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2212      	movs	r2, #18
 800820c:	605a      	str	r2, [r3, #4]
          break;
 800820e:	e00d      	b.n	800822c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2218      	movs	r2, #24
 8008214:	605a      	str	r2, [r3, #4]
          break;
 8008216:	e009      	b.n	800822c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800821e:	605a      	str	r2, [r3, #4]
          break;
 8008220:	e004      	b.n	800822c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2206      	movs	r2, #6
 8008226:	605a      	str	r2, [r3, #4]
          break;
 8008228:	e000      	b.n	800822c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800822a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	6859      	ldr	r1, [r3, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	f7ff fac5 	bl	80077c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fbfe 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8008248:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fc1e 	bl	8007a92 <LL_ADC_INJ_IsConversionOngoing>
 8008256:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800825a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800825e:	2b00      	cmp	r3, #0
 8008260:	f040 81a6 	bne.w	80085b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 81a1 	bne.w	80085b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	461a      	mov	r2, r3
 800827c:	f7ff fae3 	bl	8007846 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	08db      	lsrs	r3, r3, #3
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00a      	beq.n	80082b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6919      	ldr	r1, [r3, #16]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082b2:	f7ff fa21 	bl	80076f8 <LL_ADC_SetOffset>
 80082b6:	e17b      	b.n	80085b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fa3e 	bl	8007740 <LL_ADC_GetOffsetChannel>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <HAL_ADC_ConfigChannel+0x148>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fa33 	bl	8007740 <LL_ADC_GetOffsetChannel>
 80082da:	4603      	mov	r3, r0
 80082dc:	0e9b      	lsrs	r3, r3, #26
 80082de:	f003 021f 	and.w	r2, r3, #31
 80082e2:	e01e      	b.n	8008322 <HAL_ADC_ConfigChannel+0x186>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fa28 	bl	8007740 <LL_ADC_GetOffsetChannel>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082fa:	fa93 f3a3 	rbit	r3, r3
 80082fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800830a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8008312:	2320      	movs	r3, #32
 8008314:	e004      	b.n	8008320 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8008316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800831a:	fab3 f383 	clz	r3, r3
 800831e:	b2db      	uxtb	r3, r3
 8008320:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <HAL_ADC_ConfigChannel+0x19e>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	0e9b      	lsrs	r3, r3, #26
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	e018      	b.n	800836c <HAL_ADC_ConfigChannel+0x1d0>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008342:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008346:	fa93 f3a3 	rbit	r3, r3
 800834a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800835e:	2320      	movs	r3, #32
 8008360:	e004      	b.n	800836c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8008362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008366:	fab3 f383 	clz	r3, r3
 800836a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800836c:	429a      	cmp	r2, r3
 800836e:	d106      	bne.n	800837e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2200      	movs	r2, #0
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff f9f7 	bl	800776c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2101      	movs	r1, #1
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff f9db 	bl	8007740 <LL_ADC_GetOffsetChannel>
 800838a:	4603      	mov	r3, r0
 800838c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <HAL_ADC_ConfigChannel+0x20e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff f9d0 	bl	8007740 <LL_ADC_GetOffsetChannel>
 80083a0:	4603      	mov	r3, r0
 80083a2:	0e9b      	lsrs	r3, r3, #26
 80083a4:	f003 021f 	and.w	r2, r3, #31
 80083a8:	e01e      	b.n	80083e8 <HAL_ADC_ConfigChannel+0x24c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2101      	movs	r1, #1
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff f9c5 	bl	8007740 <LL_ADC_GetOffsetChannel>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083c0:	fa93 f3a3 	rbit	r3, r3
 80083c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80083c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80083d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80083d8:	2320      	movs	r3, #32
 80083da:	e004      	b.n	80083e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80083dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083e0:	fab3 f383 	clz	r3, r3
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <HAL_ADC_ConfigChannel+0x264>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	0e9b      	lsrs	r3, r3, #26
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	e018      	b.n	8008432 <HAL_ADC_ConfigChannel+0x296>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008414:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800841c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8008424:	2320      	movs	r3, #32
 8008426:	e004      	b.n	8008432 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8008428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800842c:	fab3 f383 	clz	r3, r3
 8008430:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008432:	429a      	cmp	r2, r3
 8008434:	d106      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	2101      	movs	r1, #1
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff f994 	bl	800776c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff f978 	bl	8007740 <LL_ADC_GetOffsetChannel>
 8008450:	4603      	mov	r3, r0
 8008452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <HAL_ADC_ConfigChannel+0x2d4>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2102      	movs	r1, #2
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff f96d 	bl	8007740 <LL_ADC_GetOffsetChannel>
 8008466:	4603      	mov	r3, r0
 8008468:	0e9b      	lsrs	r3, r3, #26
 800846a:	f003 021f 	and.w	r2, r3, #31
 800846e:	e01e      	b.n	80084ae <HAL_ADC_ConfigChannel+0x312>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2102      	movs	r1, #2
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f962 	bl	8007740 <LL_ADC_GetOffsetChannel>
 800847c:	4603      	mov	r3, r0
 800847e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008486:	fa93 f3a3 	rbit	r3, r3
 800848a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800848e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800849e:	2320      	movs	r3, #32
 80084a0:	e004      	b.n	80084ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80084a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a6:	fab3 f383 	clz	r3, r3
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x32a>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	0e9b      	lsrs	r3, r3, #26
 80084c0:	f003 031f 	and.w	r3, r3, #31
 80084c4:	e016      	b.n	80084f4 <HAL_ADC_ConfigChannel+0x358>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084d2:	fa93 f3a3 	rbit	r3, r3
 80084d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80084d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80084de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80084e6:	2320      	movs	r3, #32
 80084e8:	e004      	b.n	80084f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80084ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ee:	fab3 f383 	clz	r3, r3
 80084f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d106      	bne.n	8008506 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2200      	movs	r2, #0
 80084fe:	2102      	movs	r1, #2
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff f933 	bl	800776c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2103      	movs	r1, #3
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff f917 	bl	8007740 <LL_ADC_GetOffsetChannel>
 8008512:	4603      	mov	r3, r0
 8008514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <HAL_ADC_ConfigChannel+0x396>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2103      	movs	r1, #3
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff f90c 	bl	8007740 <LL_ADC_GetOffsetChannel>
 8008528:	4603      	mov	r3, r0
 800852a:	0e9b      	lsrs	r3, r3, #26
 800852c:	f003 021f 	and.w	r2, r3, #31
 8008530:	e017      	b.n	8008562 <HAL_ADC_ConfigChannel+0x3c6>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2103      	movs	r1, #3
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff f901 	bl	8007740 <LL_ADC_GetOffsetChannel>
 800853e:	4603      	mov	r3, r0
 8008540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008544:	fa93 f3a3 	rbit	r3, r3
 8008548:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800854a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800854c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800854e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8008554:	2320      	movs	r3, #32
 8008556:	e003      	b.n	8008560 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855a:	fab3 f383 	clz	r3, r3
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <HAL_ADC_ConfigChannel+0x3de>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	0e9b      	lsrs	r3, r3, #26
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	e011      	b.n	800859e <HAL_ADC_ConfigChannel+0x402>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008582:	fa93 f3a3 	rbit	r3, r3
 8008586:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800858c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8008592:	2320      	movs	r3, #32
 8008594:	e003      	b.n	800859e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	fab3 f383 	clz	r3, r3
 800859c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800859e:	429a      	cmp	r2, r3
 80085a0:	d106      	bne.n	80085b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	2103      	movs	r1, #3
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff f8de 	bl	800776c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fa0b 	bl	80079d0 <LL_ADC_IsEnabled>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 813f 	bne.w	8008840 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f7ff f964 	bl	800789c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	4a8e      	ldr	r2, [pc, #568]	; (8008814 <HAL_ADC_ConfigChannel+0x678>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	f040 8130 	bne.w	8008840 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <HAL_ADC_ConfigChannel+0x46c>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	0e9b      	lsrs	r3, r3, #26
 80085f6:	3301      	adds	r3, #1
 80085f8:	f003 031f 	and.w	r3, r3, #31
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	bf94      	ite	ls
 8008600:	2301      	movls	r3, #1
 8008602:	2300      	movhi	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	e019      	b.n	800863c <HAL_ADC_ConfigChannel+0x4a0>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008610:	fa93 f3a3 	rbit	r3, r3
 8008614:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008618:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800861a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008620:	2320      	movs	r3, #32
 8008622:	e003      	b.n	800862c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008626:	fab3 f383 	clz	r3, r3
 800862a:	b2db      	uxtb	r3, r3
 800862c:	3301      	adds	r3, #1
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2b09      	cmp	r3, #9
 8008634:	bf94      	ite	ls
 8008636:	2301      	movls	r3, #1
 8008638:	2300      	movhi	r3, #0
 800863a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800863c:	2b00      	cmp	r3, #0
 800863e:	d079      	beq.n	8008734 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008648:	2b00      	cmp	r3, #0
 800864a:	d107      	bne.n	800865c <HAL_ADC_ConfigChannel+0x4c0>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	0e9b      	lsrs	r3, r3, #26
 8008652:	3301      	adds	r3, #1
 8008654:	069b      	lsls	r3, r3, #26
 8008656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800865a:	e015      	b.n	8008688 <HAL_ADC_ConfigChannel+0x4ec>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800866a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800866e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008674:	2320      	movs	r3, #32
 8008676:	e003      	b.n	8008680 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800867a:	fab3 f383 	clz	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	3301      	adds	r3, #1
 8008682:	069b      	lsls	r3, r3, #26
 8008684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <HAL_ADC_ConfigChannel+0x50c>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	0e9b      	lsrs	r3, r3, #26
 800869a:	3301      	adds	r3, #1
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	2101      	movs	r1, #1
 80086a2:	fa01 f303 	lsl.w	r3, r1, r3
 80086a6:	e017      	b.n	80086d8 <HAL_ADC_ConfigChannel+0x53c>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b0:	fa93 f3a3 	rbit	r3, r3
 80086b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80086b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80086ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80086c0:	2320      	movs	r3, #32
 80086c2:	e003      	b.n	80086cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80086c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c6:	fab3 f383 	clz	r3, r3
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	3301      	adds	r3, #1
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	2101      	movs	r1, #1
 80086d4:	fa01 f303 	lsl.w	r3, r1, r3
 80086d8:	ea42 0103 	orr.w	r1, r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <HAL_ADC_ConfigChannel+0x562>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	0e9b      	lsrs	r3, r3, #26
 80086ee:	3301      	adds	r3, #1
 80086f0:	f003 021f 	and.w	r2, r3, #31
 80086f4:	4613      	mov	r3, r2
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	4413      	add	r3, r2
 80086fa:	051b      	lsls	r3, r3, #20
 80086fc:	e018      	b.n	8008730 <HAL_ADC_ConfigChannel+0x594>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	fa93 f3a3 	rbit	r3, r3
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8008716:	2320      	movs	r3, #32
 8008718:	e003      	b.n	8008722 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800871a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871c:	fab3 f383 	clz	r3, r3
 8008720:	b2db      	uxtb	r3, r3
 8008722:	3301      	adds	r3, #1
 8008724:	f003 021f 	and.w	r2, r3, #31
 8008728:	4613      	mov	r3, r2
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	4413      	add	r3, r2
 800872e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008730:	430b      	orrs	r3, r1
 8008732:	e080      	b.n	8008836 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	2b00      	cmp	r3, #0
 800873e:	d107      	bne.n	8008750 <HAL_ADC_ConfigChannel+0x5b4>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	0e9b      	lsrs	r3, r3, #26
 8008746:	3301      	adds	r3, #1
 8008748:	069b      	lsls	r3, r3, #26
 800874a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800874e:	e015      	b.n	800877c <HAL_ADC_ConfigChannel+0x5e0>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	fa93 f3a3 	rbit	r3, r3
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008768:	2320      	movs	r3, #32
 800876a:	e003      	b.n	8008774 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	fab3 f383 	clz	r3, r3
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3301      	adds	r3, #1
 8008776:	069b      	lsls	r3, r3, #26
 8008778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_ADC_ConfigChannel+0x600>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	0e9b      	lsrs	r3, r3, #26
 800878e:	3301      	adds	r3, #1
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2101      	movs	r1, #1
 8008796:	fa01 f303 	lsl.w	r3, r1, r3
 800879a:	e017      	b.n	80087cc <HAL_ADC_ConfigChannel+0x630>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	fa93 f3a3 	rbit	r3, r3
 80087a8:	61fb      	str	r3, [r7, #28]
  return result;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80087b4:	2320      	movs	r3, #32
 80087b6:	e003      	b.n	80087c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	fab3 f383 	clz	r3, r3
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3301      	adds	r3, #1
 80087c2:	f003 031f 	and.w	r3, r3, #31
 80087c6:	2101      	movs	r1, #1
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	ea42 0103 	orr.w	r1, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10d      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x65c>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	0e9b      	lsrs	r3, r3, #26
 80087e2:	3301      	adds	r3, #1
 80087e4:	f003 021f 	and.w	r2, r3, #31
 80087e8:	4613      	mov	r3, r2
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	4413      	add	r3, r2
 80087ee:	3b1e      	subs	r3, #30
 80087f0:	051b      	lsls	r3, r3, #20
 80087f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80087f6:	e01d      	b.n	8008834 <HAL_ADC_ConfigChannel+0x698>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	fa93 f3a3 	rbit	r3, r3
 8008804:	613b      	str	r3, [r7, #16]
  return result;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008810:	2320      	movs	r3, #32
 8008812:	e005      	b.n	8008820 <HAL_ADC_ConfigChannel+0x684>
 8008814:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	fab3 f383 	clz	r3, r3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	3301      	adds	r3, #1
 8008822:	f003 021f 	and.w	r2, r3, #31
 8008826:	4613      	mov	r3, r2
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	4413      	add	r3, r2
 800882c:	3b1e      	subs	r3, #30
 800882e:	051b      	lsls	r3, r3, #20
 8008830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008834:	430b      	orrs	r3, r1
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	6892      	ldr	r2, [r2, #8]
 800883a:	4619      	mov	r1, r3
 800883c:	f7ff f803 	bl	8007846 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_ADC_ConfigChannel+0x7a0>)
 8008846:	4013      	ands	r3, r2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d06c      	beq.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800884c:	483c      	ldr	r0, [pc, #240]	; (8008940 <HAL_ADC_ConfigChannel+0x7a4>)
 800884e:	f7fe ff45 	bl	80076dc <LL_ADC_GetCommonPathInternalCh>
 8008852:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a3a      	ldr	r2, [pc, #232]	; (8008944 <HAL_ADC_ConfigChannel+0x7a8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d127      	bne.n	80088b0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d121      	bne.n	80088b0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a35      	ldr	r2, [pc, #212]	; (8008948 <HAL_ADC_ConfigChannel+0x7ac>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d157      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800887a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800887e:	4619      	mov	r1, r3
 8008880:	482f      	ldr	r0, [pc, #188]	; (8008940 <HAL_ADC_ConfigChannel+0x7a4>)
 8008882:	f7fe ff18 	bl	80076b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008886:	4b31      	ldr	r3, [pc, #196]	; (800894c <HAL_ADC_ConfigChannel+0x7b0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	099b      	lsrs	r3, r3, #6
 800888c:	4a30      	ldr	r2, [pc, #192]	; (8008950 <HAL_ADC_ConfigChannel+0x7b4>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	099b      	lsrs	r3, r3, #6
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	4613      	mov	r3, r2
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80088a0:	e002      	b.n	80088a8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f9      	bne.n	80088a2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80088ae:	e03a      	b.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a27      	ldr	r2, [pc, #156]	; (8008954 <HAL_ADC_ConfigChannel+0x7b8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d113      	bne.n	80088e2 <HAL_ADC_ConfigChannel+0x746>
 80088ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10d      	bne.n	80088e2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <HAL_ADC_ConfigChannel+0x7ac>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d12a      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80088d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088d8:	4619      	mov	r1, r3
 80088da:	4819      	ldr	r0, [pc, #100]	; (8008940 <HAL_ADC_ConfigChannel+0x7a4>)
 80088dc:	f7fe feeb 	bl	80076b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80088e0:	e021      	b.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <HAL_ADC_ConfigChannel+0x7bc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d11c      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80088ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d116      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a12      	ldr	r2, [pc, #72]	; (8008948 <HAL_ADC_ConfigChannel+0x7ac>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d111      	bne.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800890a:	4619      	mov	r1, r3
 800890c:	480c      	ldr	r0, [pc, #48]	; (8008940 <HAL_ADC_ConfigChannel+0x7a4>)
 800890e:	f7fe fed2 	bl	80076b6 <LL_ADC_SetCommonPathInternalCh>
 8008912:	e008      	b.n	8008926 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008918:	f043 0220 	orr.w	r2, r3, #32
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800892e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008932:	4618      	mov	r0, r3
 8008934:	37d8      	adds	r7, #216	; 0xd8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	80080000 	.word	0x80080000
 8008940:	50040300 	.word	0x50040300
 8008944:	c7520000 	.word	0xc7520000
 8008948:	50040000 	.word	0x50040000
 800894c:	20000008 	.word	0x20000008
 8008950:	053e2d63 	.word	0x053e2d63
 8008954:	cb840000 	.word	0xcb840000
 8008958:	80000001 	.word	0x80000001

0800895c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f85a 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8008990:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f87b 	bl	8007a92 <LL_ADC_INJ_IsConversionOngoing>
 800899c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8098 	beq.w	8008adc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d02a      	beq.n	8008a10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7e5b      	ldrb	r3, [r3, #25]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d126      	bne.n	8008a10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7e1b      	ldrb	r3, [r3, #24]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d122      	bne.n	8008a10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80089ca:	2301      	movs	r3, #1
 80089cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80089ce:	e014      	b.n	80089fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4a45      	ldr	r2, [pc, #276]	; (8008ae8 <ADC_ConversionStop+0x174>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d90d      	bls.n	80089f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089dc:	f043 0210 	orr.w	r2, r3, #16
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e8:	f043 0201 	orr.w	r2, r3, #1
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e074      	b.n	8008ade <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	3301      	adds	r3, #1
 80089f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d1e3      	bne.n	80089d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2240      	movs	r2, #64	; 0x40
 8008a0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d014      	beq.n	8008a40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f812 	bl	8007a44 <LL_ADC_REG_IsConversionOngoing>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe ffe3 	bl	80079f6 <LL_ADC_IsDisableOngoing>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe ffee 	bl	8007a1c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d014      	beq.n	8008a70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff f821 	bl	8007a92 <LL_ADC_INJ_IsConversionOngoing>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00c      	beq.n	8008a70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe ffcb 	bl	80079f6 <LL_ADC_IsDisableOngoing>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fffd 	bl	8007a6a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d005      	beq.n	8008a82 <ADC_ConversionStop+0x10e>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d105      	bne.n	8008a88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	617b      	str	r3, [r7, #20]
        break;
 8008a80:	e005      	b.n	8008a8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008a82:	2308      	movs	r3, #8
 8008a84:	617b      	str	r3, [r7, #20]
        break;
 8008a86:	e002      	b.n	8008a8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008a88:	2304      	movs	r3, #4
 8008a8a:	617b      	str	r3, [r7, #20]
        break;
 8008a8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008a8e:	f7fe fdcf 	bl	8007630 <HAL_GetTick>
 8008a92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008a94:	e01b      	b.n	8008ace <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008a96:	f7fe fdcb 	bl	8007630 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b05      	cmp	r3, #5
 8008aa2:	d914      	bls.n	8008ace <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00d      	beq.n	8008ace <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab6:	f043 0210 	orr.w	r2, r3, #16
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e007      	b.n	8008ade <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1dc      	bne.n	8008a96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	a33fffff 	.word	0xa33fffff

08008aec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe ff69 	bl	80079d0 <LL_ADC_IsEnabled>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d14d      	bne.n	8008ba0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	4b28      	ldr	r3, [pc, #160]	; (8008bac <ADC_Enable+0xc0>)
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00d      	beq.n	8008b2e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b16:	f043 0210 	orr.w	r2, r3, #16
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b22:	f043 0201 	orr.w	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e039      	b.n	8008ba2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe ff24 	bl	8007980 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008b38:	f7fe fd7a 	bl	8007630 <HAL_GetTick>
 8008b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008b3e:	e028      	b.n	8008b92 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff43 	bl	80079d0 <LL_ADC_IsEnabled>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe ff13 	bl	8007980 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008b5a:	f7fe fd69 	bl	8007630 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d914      	bls.n	8008b92 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d00d      	beq.n	8008b92 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7a:	f043 0210 	orr.w	r2, r3, #16
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b86:	f043 0201 	orr.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e007      	b.n	8008ba2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d1cf      	bne.n	8008b40 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	8000003f 	.word	0x8000003f

08008bb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe ff1a 	bl	80079f6 <LL_ADC_IsDisableOngoing>
 8008bc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe ff01 	bl	80079d0 <LL_ADC_IsEnabled>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d047      	beq.n	8008c64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d144      	bne.n	8008c64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 030d 	and.w	r3, r3, #13
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d10c      	bne.n	8008c02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fedb 	bl	80079a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008bfa:	f7fe fd19 	bl	8007630 <HAL_GetTick>
 8008bfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008c00:	e029      	b.n	8008c56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f043 0210 	orr.w	r2, r3, #16
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e023      	b.n	8008c66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008c1e:	f7fe fd07 	bl	8007630 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d914      	bls.n	8008c56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3e:	f043 0210 	orr.w	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4a:	f043 0201 	orr.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e007      	b.n	8008c66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1dc      	bne.n	8008c1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d14b      	bne.n	8008d20 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d021      	beq.n	8008ce6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fd7b 	bl	80077a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d032      	beq.n	8008d18 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d12b      	bne.n	8008d18 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d11f      	bne.n	8008d18 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	f043 0201 	orr.w	r2, r3, #1
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ce4:	e018      	b.n	8008d18 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d111      	bne.n	8008d18 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d105      	bne.n	8008d18 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d10:	f043 0201 	orr.w	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7f8 fb61 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008d1e:	e00e      	b.n	8008d3e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d24:	f003 0310 	and.w	r3, r3, #16
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7f8 fb8f 	bl	8001450 <HAL_ADC_ErrorCallback>
}
 8008d32:	e004      	b.n	8008d3e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fa0c 	bl	8008172 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d80:	f043 0204 	orr.w	r2, r3, #4
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7f8 fb61 	bl	8001450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <LL_ADC_StartCalibration>:
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	609a      	str	r2, [r3, #8]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <LL_ADC_IsCalibrationOnGoing>:
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ddc:	d101      	bne.n	8008de2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_ADCEx_Calibration_Start+0x1c>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e04d      	b.n	8008ea8 <HAL_ADCEx_Calibration_Start+0xb8>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fecb 	bl	8008bb0 <ADC_Disable>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d136      	bne.n	8008e92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e2c:	f023 0302 	bic.w	r3, r3, #2
 8008e30:	f043 0202 	orr.w	r2, r3, #2
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff ffa9 	bl	8008d96 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008e44:	e014      	b.n	8008e70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8008e52:	d30d      	bcc.n	8008e70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e58:	f023 0312 	bic.w	r3, r3, #18
 8008e5c:	f043 0210 	orr.w	r2, r3, #16
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e01b      	b.n	8008ea8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff ffa7 	bl	8008dc8 <LL_ADC_IsCalibrationOnGoing>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e2      	bne.n	8008e46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	f043 0201 	orr.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	655a      	str	r2, [r3, #84]	; 0x54
 8008e90:	e005      	b.n	8008e9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	f043 0210 	orr.w	r2, r3, #16
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <__NVIC_SetPriorityGrouping+0x44>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f30:	4013      	ands	r3, r2
 8008f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f46:	4a04      	ldr	r2, [pc, #16]	; (8008f58 <__NVIC_SetPriorityGrouping+0x44>)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	60d3      	str	r3, [r2, #12]
}
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	e000ed00 	.word	0xe000ed00

08008f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <__NVIC_GetPriorityGrouping+0x18>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	f003 0307 	and.w	r3, r3, #7
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	e000ed00 	.word	0xe000ed00

08008f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	db0b      	blt.n	8008fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	f003 021f 	and.w	r2, r3, #31
 8008f90:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <__NVIC_EnableIRQ+0x38>)
 8008f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	2001      	movs	r0, #1
 8008f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	e000e100 	.word	0xe000e100

08008fb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	db12      	blt.n	8008fec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f003 021f 	and.w	r2, r3, #31
 8008fcc:	490a      	ldr	r1, [pc, #40]	; (8008ff8 <__NVIC_DisableIRQ+0x44>)
 8008fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fda:	3320      	adds	r3, #32
 8008fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008fe0:	f3bf 8f4f 	dsb	sy
}
 8008fe4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fe6:	f3bf 8f6f 	isb	sy
}
 8008fea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	e000e100 	.word	0xe000e100

08008ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900c:	2b00      	cmp	r3, #0
 800900e:	db0a      	blt.n	8009026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	490c      	ldr	r1, [pc, #48]	; (8009048 <__NVIC_SetPriority+0x4c>)
 8009016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901a:	0112      	lsls	r2, r2, #4
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	440b      	add	r3, r1
 8009020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009024:	e00a      	b.n	800903c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4908      	ldr	r1, [pc, #32]	; (800904c <__NVIC_SetPriority+0x50>)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	3b04      	subs	r3, #4
 8009034:	0112      	lsls	r2, r2, #4
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	440b      	add	r3, r1
 800903a:	761a      	strb	r2, [r3, #24]
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	e000e100 	.word	0xe000e100
 800904c:	e000ed00 	.word	0xe000ed00

08009050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	; 0x24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f1c3 0307 	rsb	r3, r3, #7
 800906a:	2b04      	cmp	r3, #4
 800906c:	bf28      	it	cs
 800906e:	2304      	movcs	r3, #4
 8009070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3304      	adds	r3, #4
 8009076:	2b06      	cmp	r3, #6
 8009078:	d902      	bls.n	8009080 <NVIC_EncodePriority+0x30>
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	3b03      	subs	r3, #3
 800907e:	e000      	b.n	8009082 <NVIC_EncodePriority+0x32>
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	43da      	mvns	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	401a      	ands	r2, r3
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009098:	f04f 31ff 	mov.w	r1, #4294967295
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	43d9      	mvns	r1, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090a8:	4313      	orrs	r3, r2
         );
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3724      	adds	r7, #36	; 0x24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff ff28 	bl	8008f14 <__NVIC_SetPriorityGrouping>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80090de:	f7ff ff3d 	bl	8008f5c <__NVIC_GetPriorityGrouping>
 80090e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7ff ffb1 	bl	8009050 <NVIC_EncodePriority>
 80090ee:	4602      	mov	r2, r0
 80090f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff ff80 	bl	8008ffc <__NVIC_SetPriority>
}
 80090fc:	bf00      	nop
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff ff30 	bl	8008f78 <__NVIC_EnableIRQ>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800912a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ff40 	bl	8008fb4 <__NVIC_DisableIRQ>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e098      	b.n	8009280 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	4b4d      	ldr	r3, [pc, #308]	; (800928c <HAL_DMA_Init+0x150>)
 8009156:	429a      	cmp	r2, r3
 8009158:	d80f      	bhi.n	800917a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	4b4b      	ldr	r3, [pc, #300]	; (8009290 <HAL_DMA_Init+0x154>)
 8009162:	4413      	add	r3, r2
 8009164:	4a4b      	ldr	r2, [pc, #300]	; (8009294 <HAL_DMA_Init+0x158>)
 8009166:	fba2 2303 	umull	r2, r3, r2, r3
 800916a:	091b      	lsrs	r3, r3, #4
 800916c:	009a      	lsls	r2, r3, #2
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a48      	ldr	r2, [pc, #288]	; (8009298 <HAL_DMA_Init+0x15c>)
 8009176:	641a      	str	r2, [r3, #64]	; 0x40
 8009178:	e00e      	b.n	8009198 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	4b46      	ldr	r3, [pc, #280]	; (800929c <HAL_DMA_Init+0x160>)
 8009182:	4413      	add	r3, r2
 8009184:	4a43      	ldr	r2, [pc, #268]	; (8009294 <HAL_DMA_Init+0x158>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	009a      	lsls	r2, r3, #2
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a42      	ldr	r2, [pc, #264]	; (80092a0 <HAL_DMA_Init+0x164>)
 8009196:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80091bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f2:	d039      	beq.n	8009268 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f8:	4a27      	ldr	r2, [pc, #156]	; (8009298 <HAL_DMA_Init+0x15c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d11a      	bne.n	8009234 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091fe:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <HAL_DMA_Init+0x168>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009206:	f003 031c 	and.w	r3, r3, #28
 800920a:	210f      	movs	r1, #15
 800920c:	fa01 f303 	lsl.w	r3, r1, r3
 8009210:	43db      	mvns	r3, r3
 8009212:	4924      	ldr	r1, [pc, #144]	; (80092a4 <HAL_DMA_Init+0x168>)
 8009214:	4013      	ands	r3, r2
 8009216:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009218:	4b22      	ldr	r3, [pc, #136]	; (80092a4 <HAL_DMA_Init+0x168>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6859      	ldr	r1, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009224:	f003 031c 	and.w	r3, r3, #28
 8009228:	fa01 f303 	lsl.w	r3, r1, r3
 800922c:	491d      	ldr	r1, [pc, #116]	; (80092a4 <HAL_DMA_Init+0x168>)
 800922e:	4313      	orrs	r3, r2
 8009230:	600b      	str	r3, [r1, #0]
 8009232:	e019      	b.n	8009268 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009234:	4b1c      	ldr	r3, [pc, #112]	; (80092a8 <HAL_DMA_Init+0x16c>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923c:	f003 031c 	and.w	r3, r3, #28
 8009240:	210f      	movs	r1, #15
 8009242:	fa01 f303 	lsl.w	r3, r1, r3
 8009246:	43db      	mvns	r3, r3
 8009248:	4917      	ldr	r1, [pc, #92]	; (80092a8 <HAL_DMA_Init+0x16c>)
 800924a:	4013      	ands	r3, r2
 800924c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <HAL_DMA_Init+0x16c>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6859      	ldr	r1, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925a:	f003 031c 	and.w	r3, r3, #28
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	4911      	ldr	r1, [pc, #68]	; (80092a8 <HAL_DMA_Init+0x16c>)
 8009264:	4313      	orrs	r3, r2
 8009266:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	40020407 	.word	0x40020407
 8009290:	bffdfff8 	.word	0xbffdfff8
 8009294:	cccccccd 	.word	0xcccccccd
 8009298:	40020000 	.word	0x40020000
 800929c:	bffdfbf8 	.word	0xbffdfbf8
 80092a0:	40020400 	.word	0x40020400
 80092a4:	400200a8 	.word	0x400200a8
 80092a8:	400204a8 	.word	0x400204a8

080092ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_DMA_Start_IT+0x20>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e04b      	b.n	8009364 <HAL_DMA_Start_IT+0xb8>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d13a      	bne.n	8009356 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 f96d 	bl	80095e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	2b00      	cmp	r3, #0
 8009310:	d008      	beq.n	8009324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 020e 	orr.w	r2, r2, #14
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	e00f      	b.n	8009344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0204 	bic.w	r2, r2, #4
 8009332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 020a 	orr.w	r2, r2, #10
 8009342:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0201 	orr.w	r2, r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e005      	b.n	8009362 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800935e:	2302      	movs	r3, #2
 8009360:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d008      	beq.n	8009396 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2204      	movs	r2, #4
 8009388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e022      	b.n	80093dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 020e 	bic.w	r2, r2, #14
 80093a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	f003 021c 	and.w	r2, r3, #28
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	2101      	movs	r1, #1
 80093c4:	fa01 f202 	lsl.w	r2, r1, r2
 80093c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d005      	beq.n	800940c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2204      	movs	r2, #4
 8009404:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	e029      	b.n	8009460 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 020e 	bic.w	r2, r2, #14
 800941a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009430:	f003 021c 	and.w	r2, r3, #28
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009438:	2101      	movs	r1, #1
 800943a:	fa01 f202 	lsl.w	r2, r1, r2
 800943e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
    }
  }
  return status;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	f003 031c 	and.w	r3, r3, #28
 800948a:	2204      	movs	r2, #4
 800948c:	409a      	lsls	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4013      	ands	r3, r2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d026      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x7a>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d021      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d107      	bne.n	80094be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0204 	bic.w	r2, r2, #4
 80094bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	f003 021c 	and.w	r2, r3, #28
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	2104      	movs	r1, #4
 80094cc:	fa01 f202 	lsl.w	r2, r1, r2
 80094d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d071      	beq.n	80095be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80094e2:	e06c      	b.n	80095be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e8:	f003 031c 	and.w	r3, r3, #28
 80094ec:	2202      	movs	r2, #2
 80094ee:	409a      	lsls	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4013      	ands	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d02e      	beq.n	8009556 <HAL_DMA_IRQHandler+0xec>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d029      	beq.n	8009556 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 020a 	bic.w	r2, r2, #10
 800951e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952c:	f003 021c 	and.w	r2, r3, #28
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	2102      	movs	r1, #2
 8009536:	fa01 f202 	lsl.w	r2, r1, r2
 800953a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d038      	beq.n	80095be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009554:	e033      	b.n	80095be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	f003 031c 	and.w	r3, r3, #28
 800955e:	2208      	movs	r2, #8
 8009560:	409a      	lsls	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4013      	ands	r3, r2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d02a      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x156>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b00      	cmp	r3, #0
 8009572:	d025      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 020e 	bic.w	r2, r2, #14
 8009582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009588:	f003 021c 	and.w	r2, r3, #28
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	2101      	movs	r1, #1
 8009592:	fa01 f202 	lsl.w	r2, r1, r2
 8009596:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
}
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095d6:	b2db      	uxtb	r3, r3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f6:	f003 021c 	and.w	r2, r3, #28
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	2101      	movs	r1, #1
 8009600:	fa01 f202 	lsl.w	r2, r1, r2
 8009604:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b10      	cmp	r3, #16
 8009614:	d108      	bne.n	8009628 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009626:	e007      	b.n	8009638 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	60da      	str	r2, [r3, #12]
}
 8009638:	bf00      	nop
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009652:	e148      	b.n	80098e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	2101      	movs	r1, #1
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	fa01 f303 	lsl.w	r3, r1, r3
 8009660:	4013      	ands	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 813a 	beq.w	80098e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d00b      	beq.n	800968c <HAL_GPIO_Init+0x48>
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d007      	beq.n	800968c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009680:	2b11      	cmp	r3, #17
 8009682:	d003      	beq.n	800968c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	2b12      	cmp	r3, #18
 800968a:	d130      	bne.n	80096ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	2203      	movs	r2, #3
 8009698:	fa02 f303 	lsl.w	r3, r2, r3
 800969c:	43db      	mvns	r3, r3
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4013      	ands	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	fa02 f303 	lsl.w	r3, r2, r3
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096c2:	2201      	movs	r2, #1
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	43db      	mvns	r3, r3
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4013      	ands	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	091b      	lsrs	r3, r3, #4
 80096d8:	f003 0201 	and.w	r2, r3, #1
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	2203      	movs	r2, #3
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4013      	ands	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d003      	beq.n	800972e <HAL_GPIO_Init+0xea>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	2b12      	cmp	r3, #18
 800972c:	d123      	bne.n	8009776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	08da      	lsrs	r2, r3, #3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3208      	adds	r2, #8
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	220f      	movs	r2, #15
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	43db      	mvns	r3, r3
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4013      	ands	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	fa02 f303 	lsl.w	r3, r2, r3
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	08da      	lsrs	r2, r3, #3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3208      	adds	r2, #8
 8009770:	6939      	ldr	r1, [r7, #16]
 8009772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	2203      	movs	r2, #3
 8009782:	fa02 f303 	lsl.w	r3, r2, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	4013      	ands	r3, r2
 800978c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f003 0203 	and.w	r2, r3, #3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	fa02 f303 	lsl.w	r3, r2, r3
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 8094 	beq.w	80098e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097b8:	4b52      	ldr	r3, [pc, #328]	; (8009904 <HAL_GPIO_Init+0x2c0>)
 80097ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097bc:	4a51      	ldr	r2, [pc, #324]	; (8009904 <HAL_GPIO_Init+0x2c0>)
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	6613      	str	r3, [r2, #96]	; 0x60
 80097c4:	4b4f      	ldr	r3, [pc, #316]	; (8009904 <HAL_GPIO_Init+0x2c0>)
 80097c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80097d0:	4a4d      	ldr	r2, [pc, #308]	; (8009908 <HAL_GPIO_Init+0x2c4>)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	089b      	lsrs	r3, r3, #2
 80097d6:	3302      	adds	r3, #2
 80097d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	220f      	movs	r2, #15
 80097e8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ec:	43db      	mvns	r3, r3
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4013      	ands	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80097fa:	d00d      	beq.n	8009818 <HAL_GPIO_Init+0x1d4>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a43      	ldr	r2, [pc, #268]	; (800990c <HAL_GPIO_Init+0x2c8>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <HAL_GPIO_Init+0x1d0>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a42      	ldr	r2, [pc, #264]	; (8009910 <HAL_GPIO_Init+0x2cc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d101      	bne.n	8009810 <HAL_GPIO_Init+0x1cc>
 800980c:	2302      	movs	r3, #2
 800980e:	e004      	b.n	800981a <HAL_GPIO_Init+0x1d6>
 8009810:	2307      	movs	r3, #7
 8009812:	e002      	b.n	800981a <HAL_GPIO_Init+0x1d6>
 8009814:	2301      	movs	r3, #1
 8009816:	e000      	b.n	800981a <HAL_GPIO_Init+0x1d6>
 8009818:	2300      	movs	r3, #0
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	f002 0203 	and.w	r2, r2, #3
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	4093      	lsls	r3, r2
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800982a:	4937      	ldr	r1, [pc, #220]	; (8009908 <HAL_GPIO_Init+0x2c4>)
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	089b      	lsrs	r3, r3, #2
 8009830:	3302      	adds	r3, #2
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009838:	4b36      	ldr	r3, [pc, #216]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	43db      	mvns	r3, r3
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4013      	ands	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800985c:	4a2d      	ldr	r2, [pc, #180]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009862:	4b2c      	ldr	r3, [pc, #176]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	43db      	mvns	r3, r3
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	4013      	ands	r3, r2
 8009870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009886:	4a23      	ldr	r2, [pc, #140]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800988c:	4b21      	ldr	r3, [pc, #132]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	43db      	mvns	r3, r3
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4013      	ands	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80098b0:	4a18      	ldr	r2, [pc, #96]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80098b6:	4b17      	ldr	r3, [pc, #92]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	43db      	mvns	r3, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4013      	ands	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098da:	4a0e      	ldr	r2, [pc, #56]	; (8009914 <HAL_GPIO_Init+0x2d0>)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3301      	adds	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f aeaf 	bne.w	8009654 <HAL_GPIO_Init+0x10>
  }
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40021000 	.word	0x40021000
 8009908:	40010000 	.word	0x40010000
 800990c:	48000400 	.word	0x48000400
 8009910:	48000800 	.word	0x48000800
 8009914:	40010400 	.word	0x40010400

08009918 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009926:	e0ab      	b.n	8009a80 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009928:	2201      	movs	r2, #1
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	4013      	ands	r3, r2
 8009934:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 809e 	beq.w	8009a7a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800993e:	4a57      	ldr	r2, [pc, #348]	; (8009a9c <HAL_GPIO_DeInit+0x184>)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	089b      	lsrs	r3, r3, #2
 8009944:	3302      	adds	r3, #2
 8009946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800994a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	220f      	movs	r2, #15
 8009956:	fa02 f303 	lsl.w	r3, r2, r3
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4013      	ands	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009966:	d00d      	beq.n	8009984 <HAL_GPIO_DeInit+0x6c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a4d      	ldr	r2, [pc, #308]	; (8009aa0 <HAL_GPIO_DeInit+0x188>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d007      	beq.n	8009980 <HAL_GPIO_DeInit+0x68>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a4c      	ldr	r2, [pc, #304]	; (8009aa4 <HAL_GPIO_DeInit+0x18c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d101      	bne.n	800997c <HAL_GPIO_DeInit+0x64>
 8009978:	2302      	movs	r3, #2
 800997a:	e004      	b.n	8009986 <HAL_GPIO_DeInit+0x6e>
 800997c:	2307      	movs	r3, #7
 800997e:	e002      	b.n	8009986 <HAL_GPIO_DeInit+0x6e>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <HAL_GPIO_DeInit+0x6e>
 8009984:	2300      	movs	r3, #0
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	f002 0203 	and.w	r2, r2, #3
 800998c:	0092      	lsls	r2, r2, #2
 800998e:	4093      	lsls	r3, r2
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	d132      	bne.n	80099fc <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009996:	4b44      	ldr	r3, [pc, #272]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	43db      	mvns	r3, r3
 800999e:	4942      	ldr	r1, [pc, #264]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80099a4:	4b40      	ldr	r3, [pc, #256]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	43db      	mvns	r3, r3
 80099ac:	493e      	ldr	r1, [pc, #248]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80099b2:	4b3d      	ldr	r3, [pc, #244]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099b4:	689a      	ldr	r2, [r3, #8]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	43db      	mvns	r3, r3
 80099ba:	493b      	ldr	r1, [pc, #236]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099bc:	4013      	ands	r3, r2
 80099be:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80099c0:	4b39      	ldr	r3, [pc, #228]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	43db      	mvns	r3, r3
 80099c8:	4937      	ldr	r1, [pc, #220]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	220f      	movs	r2, #15
 80099d8:	fa02 f303 	lsl.w	r3, r2, r3
 80099dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80099de:	4a2f      	ldr	r2, [pc, #188]	; (8009a9c <HAL_GPIO_DeInit+0x184>)
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	3302      	adds	r3, #2
 80099e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	43da      	mvns	r2, r3
 80099ee:	482b      	ldr	r0, [pc, #172]	; (8009a9c <HAL_GPIO_DeInit+0x184>)
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	089b      	lsrs	r3, r3, #2
 80099f4:	400a      	ands	r2, r1
 80099f6:	3302      	adds	r3, #2
 80099f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	2103      	movs	r1, #3
 8009a06:	fa01 f303 	lsl.w	r3, r1, r3
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	08da      	lsrs	r2, r3, #3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3208      	adds	r2, #8
 8009a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f003 0307 	and.w	r3, r3, #7
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	220f      	movs	r2, #15
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	08d2      	lsrs	r2, r2, #3
 8009a30:	4019      	ands	r1, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3208      	adds	r2, #8
 8009a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	2103      	movs	r1, #3
 8009a44:	fa01 f303 	lsl.w	r3, r1, r3
 8009a48:	43db      	mvns	r3, r3
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	2101      	movs	r1, #1
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	401a      	ands	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	2103      	movs	r1, #3
 8009a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a72:	43db      	mvns	r3, r3
 8009a74:	401a      	ands	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f47f af4d 	bne.w	8009928 <HAL_GPIO_DeInit+0x10>
  }
}
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	40010000 	.word	0x40010000
 8009aa0:	48000400 	.word	0x48000400
 8009aa4:	48000800 	.word	0x48000800
 8009aa8:	40010400 	.word	0x40010400

08009aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	887b      	ldrh	r3, [r7, #2]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	e001      	b.n	8009ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	807b      	strh	r3, [r7, #2]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009aec:	787b      	ldrb	r3, [r7, #1]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009af2:	887a      	ldrh	r2, [r7, #2]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009af8:	e002      	b.n	8009b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009afa:	887a      	ldrh	r2, [r7, #2]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e081      	b.n	8009c22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7f8 f940 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2224      	movs	r2, #36	; 0x24
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0201 	bic.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d107      	bne.n	8009b86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b82:	609a      	str	r2, [r3, #8]
 8009b84:	e006      	b.n	8009b94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689a      	ldr	r2, [r3, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d104      	bne.n	8009ba6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ba4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6812      	ldr	r2, [r2, #0]
 8009bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691a      	ldr	r2, [r3, #16]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	ea42 0103 	orr.w	r1, r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	021a      	lsls	r2, r3, #8
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69d9      	ldr	r1, [r3, #28]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1a      	ldr	r2, [r3, #32]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0201 	orr.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	607a      	str	r2, [r7, #4]
 8009c36:	461a      	mov	r2, r3
 8009c38:	460b      	mov	r3, r1
 8009c3a:	817b      	strh	r3, [r7, #10]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d153      	bne.n	8009cf4 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d101      	bne.n	8009c60 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e04a      	b.n	8009cf6 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_I2C_Master_Transmit_IT+0x42>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e043      	b.n	8009cf6 <HAL_I2C_Master_Transmit_IT+0xca>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2221      	movs	r2, #33	; 0x21
 8009c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2210      	movs	r2, #16
 8009c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	893a      	ldrh	r2, [r7, #8]
 8009c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4a19      	ldr	r2, [pc, #100]	; (8009d00 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8009c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a18      	ldr	r2, [pc, #96]	; (8009d04 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009ca2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2bff      	cmp	r3, #255	; 0xff
 8009cac:	d906      	bls.n	8009cbc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	22ff      	movs	r2, #255	; 0xff
 8009cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	e007      	b.n	8009ccc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cca:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	8979      	ldrh	r1, [r7, #10]
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f001 fbe4 	bl	800b4a8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ce8:	2101      	movs	r1, #1
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 fc0a 	bl	800b504 <I2C_Enable_IRQ>

    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e000      	b.n	8009cf6 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009cf4:	2302      	movs	r3, #2
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	ffff0000 	.word	0xffff0000
 8009d04:	0800a327 	.word	0x0800a327
 8009d08:	80002000 	.word	0x80002000

08009d0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	; 0x28
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	f040 80f1 	bne.w	8009f10 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d3c:	d101      	bne.n	8009d42 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e0e7      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_I2C_IsDeviceReady+0x44>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e0e0      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2224      	movs	r2, #36	; 0x24
 8009d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d107      	bne.n	8009d7e <HAL_I2C_IsDeviceReady+0x72>
 8009d6e:	897b      	ldrh	r3, [r7, #10]
 8009d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d7c:	e004      	b.n	8009d88 <HAL_I2C_IsDeviceReady+0x7c>
 8009d7e:	897b      	ldrh	r3, [r7, #10]
 8009d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d84:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	6812      	ldr	r2, [r2, #0]
 8009d8c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009d8e:	f7fd fc4f 	bl	8007630 <HAL_GetTick>
 8009d92:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	bf0c      	ite	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	2300      	movne	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b10      	cmp	r3, #16
 8009db6:	bf0c      	ite	eq
 8009db8:	2301      	moveq	r3, #1
 8009dba:	2300      	movne	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009dc0:	e034      	b.n	8009e2c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d01a      	beq.n	8009e00 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009dca:	f7fd fc31 	bl	8007630 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d302      	bcc.n	8009de0 <HAL_I2C_IsDeviceReady+0xd4>
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10f      	bne.n	8009e00 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dec:	f043 0220 	orr.w	r2, r3, #32
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e088      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	bf0c      	ite	eq
 8009e0e:	2301      	moveq	r3, #1
 8009e10:	2300      	movne	r3, #0
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	bf0c      	ite	eq
 8009e24:	2301      	moveq	r3, #1
 8009e26:	2300      	movne	r3, #0
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009e2c:	7ffb      	ldrb	r3, [r7, #31]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <HAL_I2C_IsDeviceReady+0x12c>
 8009e32:	7fbb      	ldrb	r3, [r7, #30]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0c4      	beq.n	8009dc2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	f003 0310 	and.w	r3, r3, #16
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	d01a      	beq.n	8009e7c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2120      	movs	r1, #32
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f001 fae8 	bl	800b426 <I2C_WaitOnFlagUntilTimeout>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e058      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2220      	movs	r2, #32
 8009e66:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e04a      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	2120      	movs	r1, #32
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f001 facd 	bl	800b426 <I2C_WaitOnFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e03d      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d118      	bne.n	8009ee0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ebc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2120      	movs	r1, #32
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f001 faac 	bl	800b426 <I2C_WaitOnFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e01c      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2220      	movs	r2, #32
 8009ede:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f63f af3b 	bhi.w	8009d66 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efc:	f043 0220 	orr.w	r2, r3, #32
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009f10:	2302      	movs	r3, #2
  }
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3720      	adds	r7, #32
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	607a      	str	r2, [r7, #4]
 8009f26:	461a      	mov	r2, r3
 8009f28:	460b      	mov	r3, r1
 8009f2a:	817b      	strh	r3, [r7, #10]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8009f30:	4b3a      	ldr	r3, [pc, #232]	; (800a01c <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 8009f32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d167      	bne.n	800a010 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e061      	b.n	800a012 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2221      	movs	r2, #33	; 0x21
 8009f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2210      	movs	r2, #16
 8009f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	893a      	ldrh	r2, [r7, #8]
 8009f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a27      	ldr	r2, [pc, #156]	; (800a020 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 8009f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2bff      	cmp	r3, #255	; 0xff
 8009f8c:	d906      	bls.n	8009f9c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	22ff      	movs	r2, #255	; 0xff
 8009f92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	e007      	b.n	8009fac <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	2b11      	cmp	r3, #17
 8009fb2:	d10e      	bne.n	8009fd2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	2baa      	cmp	r3, #170	; 0xaa
 8009fb8:	d003      	beq.n	8009fc2 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8009fc0:	d101      	bne.n	8009fc6 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	e00a      	b.n	8009fe8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f001 fb58 	bl	800b688 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	2bff      	cmp	r3, #255	; 0xff
 8009fe0:	d802      	bhi.n	8009fe8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	8979      	ldrh	r1, [r7, #10]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f001 fa56 	bl	800b4a8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a004:	2101      	movs	r1, #1
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fa7c 	bl	800b504 <I2C_Enable_IRQ>

    return HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a010:	2302      	movs	r3, #2
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	80002000 	.word	0x80002000
 800a020:	0800a327 	.word	0x0800a327

0800a024 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	461a      	mov	r2, r3
 800a030:	460b      	mov	r3, r1
 800a032:	817b      	strh	r3, [r7, #10]
 800a034:	4613      	mov	r3, r2
 800a036:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800a038:	4b3a      	ldr	r3, [pc, #232]	; (800a124 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800a03a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b20      	cmp	r3, #32
 800a046:	d167      	bne.n	800a118 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 800a052:	2302      	movs	r3, #2
 800a054:	e061      	b.n	800a11a <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2222      	movs	r2, #34	; 0x22
 800a062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2210      	movs	r2, #16
 800a06a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	893a      	ldrh	r2, [r7, #8]
 800a07e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a27      	ldr	r2, [pc, #156]	; (800a128 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800a08a:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a090:	b29b      	uxth	r3, r3
 800a092:	2bff      	cmp	r3, #255	; 0xff
 800a094:	d906      	bls.n	800a0a4 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a09c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	e007      	b.n	800a0b4 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	2b12      	cmp	r3, #18
 800a0ba:	d10e      	bne.n	800a0da <HAL_I2C_Master_Seq_Receive_IT+0xb6>
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	2baa      	cmp	r3, #170	; 0xaa
 800a0c0:	d003      	beq.n	800a0ca <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a0c8:	d101      	bne.n	800a0ce <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	e00a      	b.n	800a0f0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f001 fad4 	bl	800b688 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	2bff      	cmp	r3, #255	; 0xff
 800a0e8:	d802      	bhi.n	800a0f0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	8979      	ldrh	r1, [r7, #10]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f001 f9d2 	bl	800b4a8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a10c:	2102      	movs	r1, #2
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f001 f9f8 	bl	800b504 <I2C_Enable_IRQ>

    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	80002400 	.word	0x80002400
 800a128:	0800a327 	.word	0x0800a327

0800a12c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	4798      	blx	r3
  }
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	0a1b      	lsrs	r3, r3, #8
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d010      	beq.n	800a1a6 <HAL_I2C_ER_IRQHandler+0x46>
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	09db      	lsrs	r3, r3, #7
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a194:	f043 0201 	orr.w	r2, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	0a9b      	lsrs	r3, r3, #10
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <HAL_I2C_ER_IRQHandler+0x74>
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	09db      	lsrs	r3, r3, #7
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c2:	f043 0208 	orr.w	r2, r3, #8
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	0a5b      	lsrs	r3, r3, #9
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <HAL_I2C_ER_IRQHandler+0xa2>
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	09db      	lsrs	r3, r3, #7
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f0:	f043 0202 	orr.w	r2, r3, #2
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a200:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f003 030b 	and.w	r3, r3, #11
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a212:	68f9      	ldr	r1, [r7, #12]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 ffcd 	bl	800b1b4 <I2C_ITError>
  }
}
 800a21a:	bf00      	nop
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a22a:	bf00      	nop
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a23e:	bf00      	nop
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a266:	bf00      	nop
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	460b      	mov	r3, r1
 800a27c:	70fb      	strb	r3, [r7, #3]
 800a27e:	4613      	mov	r3, r2
 800a280:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a300:	b2db      	uxtb	r3, r3
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af02      	add	r7, sp, #8
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <I2C_Master_ISR_IT+0x1e>
 800a340:	2302      	movs	r3, #2
 800a342:	e114      	b.n	800a56e <I2C_Master_ISR_IT+0x248>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	091b      	lsrs	r3, r3, #4
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d013      	beq.n	800a380 <I2C_Master_ISR_IT+0x5a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	091b      	lsrs	r3, r3, #4
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00d      	beq.n	800a380 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2210      	movs	r2, #16
 800a36a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a370:	f043 0204 	orr.w	r2, r3, #4
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f001 f812 	bl	800b3a2 <I2C_Flush_TXDR>
 800a37e:	e0e1      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	089b      	lsrs	r3, r3, #2
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d023      	beq.n	800a3d4 <I2C_Master_ISR_IT+0xae>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	089b      	lsrs	r3, r3, #2
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01d      	beq.n	800a3d4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f023 0304 	bic.w	r3, r3, #4
 800a39e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3d2:	e0b7      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01e      	beq.n	800a41e <I2C_Master_ISR_IT+0xf8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d018      	beq.n	800a41e <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	781a      	ldrb	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a41c:	e092      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	09db      	lsrs	r3, r3, #7
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d05d      	beq.n	800a4e6 <I2C_Master_ISR_IT+0x1c0>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	099b      	lsrs	r3, r3, #6
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d057      	beq.n	800a4e6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d040      	beq.n	800a4c2 <I2C_Master_ISR_IT+0x19c>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	d13c      	bne.n	800a4c2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a454:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2bff      	cmp	r3, #255	; 0xff
 800a45e:	d90e      	bls.n	800a47e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	22ff      	movs	r2, #255	; 0xff
 800a464:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	8a79      	ldrh	r1, [r7, #18]
 800a46e:	2300      	movs	r3, #0
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f001 f816 	bl	800b4a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a47c:	e032      	b.n	800a4e4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a490:	d00b      	beq.n	800a4aa <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	b2da      	uxtb	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	8a79      	ldrh	r1, [r7, #18]
 800a49e:	2000      	movs	r0, #0
 800a4a0:	9000      	str	r0, [sp, #0]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f001 f800 	bl	800b4a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4a8:	e01c      	b.n	800a4e4 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	8a79      	ldrh	r1, [r7, #18]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fff4 	bl	800b4a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4c0:	e010      	b.n	800a4e4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4d0:	d003      	beq.n	800a4da <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fba9 	bl	800ac2a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4d8:	e034      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a4da:	2140      	movs	r1, #64	; 0x40
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 fe69 	bl	800b1b4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4e2:	e02f      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
 800a4e4:	e02e      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	099b      	lsrs	r3, r3, #6
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d028      	beq.n	800a544 <I2C_Master_ISR_IT+0x21e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	099b      	lsrs	r3, r3, #6
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d022      	beq.n	800a544 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a502:	b29b      	uxth	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d119      	bne.n	800a53c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a516:	d015      	beq.n	800a544 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a520:	d108      	bne.n	800a534 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a530:	605a      	str	r2, [r3, #4]
 800a532:	e007      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 fb78 	bl	800ac2a <I2C_ITMasterSeqCplt>
 800a53a:	e003      	b.n	800a544 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fe38 	bl	800b1b4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	095b      	lsrs	r3, r3, #5
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d009      	beq.n	800a564 <I2C_Master_ISR_IT+0x23e>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	095b      	lsrs	r3, r3, #5
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a55c:	6979      	ldr	r1, [r7, #20]
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fbfe 	bl	800ad60 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <I2C_Slave_ISR_IT+0x24>
 800a596:	2302      	movs	r3, #2
 800a598:	e0ec      	b.n	800a774 <I2C_Slave_ISR_IT+0x1fe>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	095b      	lsrs	r3, r3, #5
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d009      	beq.n	800a5c2 <I2C_Slave_ISR_IT+0x4c>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a5ba:	6939      	ldr	r1, [r7, #16]
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 fc99 	bl	800aef4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	091b      	lsrs	r3, r3, #4
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d04d      	beq.n	800a66a <I2C_Slave_ISR_IT+0xf4>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	091b      	lsrs	r3, r3, #4
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d047      	beq.n	800a66a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d128      	bne.n	800a636 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b28      	cmp	r3, #40	; 0x28
 800a5ee:	d108      	bne.n	800a602 <I2C_Slave_ISR_IT+0x8c>
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5f6:	d104      	bne.n	800a602 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a5f8:	6939      	ldr	r1, [r7, #16]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 fd84 	bl	800b108 <I2C_ITListenCplt>
 800a600:	e032      	b.n	800a668 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b29      	cmp	r3, #41	; 0x29
 800a60c:	d10e      	bne.n	800a62c <I2C_Slave_ISR_IT+0xb6>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a614:	d00a      	beq.n	800a62c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2210      	movs	r2, #16
 800a61c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 febf 	bl	800b3a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 fb3d 	bl	800aca4 <I2C_ITSlaveSeqCplt>
 800a62a:	e01d      	b.n	800a668 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2210      	movs	r2, #16
 800a632:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a634:	e096      	b.n	800a764 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2210      	movs	r2, #16
 800a63c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	f043 0204 	orr.w	r2, r3, #4
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d004      	beq.n	800a65a <I2C_Slave_ISR_IT+0xe4>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a656:	f040 8085 	bne.w	800a764 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65e:	4619      	mov	r1, r3
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 fda7 	bl	800b1b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a666:	e07d      	b.n	800a764 <I2C_Slave_ISR_IT+0x1ee>
 800a668:	e07c      	b.n	800a764 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	089b      	lsrs	r3, r3, #2
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d030      	beq.n	800a6d8 <I2C_Slave_ISR_IT+0x162>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	089b      	lsrs	r3, r3, #2
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d02a      	beq.n	800a6d8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a686:	b29b      	uxth	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d018      	beq.n	800a6be <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d14f      	bne.n	800a768 <I2C_Slave_ISR_IT+0x1f2>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6ce:	d04b      	beq.n	800a768 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fae7 	bl	800aca4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a6d6:	e047      	b.n	800a768 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	08db      	lsrs	r3, r3, #3
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	08db      	lsrs	r3, r3, #3
 800a6e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d004      	beq.n	800a6fa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a6f0:	6939      	ldr	r1, [r7, #16]
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fa15 	bl	800ab22 <I2C_ITAddrCplt>
 800a6f8:	e037      	b.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d031      	beq.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d02b      	beq.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d018      	beq.n	800a74e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a74c:	e00d      	b.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a754:	d002      	beq.n	800a75c <I2C_Slave_ISR_IT+0x1e6>
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 faa1 	bl	800aca4 <I2C_ITSlaveSeqCplt>
 800a762:	e002      	b.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a764:	bf00      	nop
 800a766:	e000      	b.n	800a76a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a768:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af02      	add	r7, sp, #8
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <I2C_Master_ISR_DMA+0x1a>
 800a792:	2302      	movs	r3, #2
 800a794:	e0e1      	b.n	800a95a <I2C_Master_ISR_DMA+0x1de>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	091b      	lsrs	r3, r3, #4
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <I2C_Master_ISR_DMA+0x5e>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	091b      	lsrs	r3, r3, #4
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d011      	beq.n	800a7da <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2210      	movs	r2, #16
 800a7bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c2:	f043 0204 	orr.w	r2, r3, #4
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a7ca:	2120      	movs	r1, #32
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 fe99 	bl	800b504 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fde5 	bl	800b3a2 <I2C_Flush_TXDR>
 800a7d8:	e0ba      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	09db      	lsrs	r3, r3, #7
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d072      	beq.n	800a8cc <I2C_Master_ISR_DMA+0x150>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	099b      	lsrs	r3, r3, #6
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d06c      	beq.n	800a8cc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a800:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a806:	b29b      	uxth	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d04e      	beq.n	800a8aa <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a818:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2bff      	cmp	r3, #255	; 0xff
 800a822:	d906      	bls.n	800a832 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	22ff      	movs	r2, #255	; 0xff
 800a828:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a82a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	e010      	b.n	800a854 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a844:	d003      	beq.n	800a84e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e002      	b.n	800a854 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a84e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a852:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	8a79      	ldrh	r1, [r7, #18]
 800a85c:	2300      	movs	r3, #0
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 fe20 	bl	800b4a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b22      	cmp	r3, #34	; 0x22
 800a884:	d108      	bne.n	800a898 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a894:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a896:	e05b      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a8a8:	e052      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8b8:	d003      	beq.n	800a8c2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 f9b5 	bl	800ac2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a8c0:	e046      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a8c2:	2140      	movs	r1, #64	; 0x40
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fc75 	bl	800b1b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a8ca:	e041      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	099b      	lsrs	r3, r3, #6
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d029      	beq.n	800a92c <I2C_Master_ISR_DMA+0x1b0>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	099b      	lsrs	r3, r3, #6
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d023      	beq.n	800a92c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d119      	bne.n	800a922 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8fc:	d027      	beq.n	800a94e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a906:	d108      	bne.n	800a91a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a916:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a918:	e019      	b.n	800a94e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f985 	bl	800ac2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a920:	e015      	b.n	800a94e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a922:	2140      	movs	r1, #64	; 0x40
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fc45 	bl	800b1b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a92a:	e010      	b.n	800a94e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	095b      	lsrs	r3, r3, #5
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00b      	beq.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	095b      	lsrs	r3, r3, #5
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 fa0a 	bl	800ad60 <I2C_ITMasterCplt>
 800a94c:	e000      	b.n	800a950 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a94e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b088      	sub	sp, #32
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a972:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <I2C_Slave_ISR_DMA+0x24>
 800a982:	2302      	movs	r3, #2
 800a984:	e0c9      	b.n	800ab1a <I2C_Slave_ISR_DMA+0x1b8>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	095b      	lsrs	r3, r3, #5
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <I2C_Slave_ISR_DMA+0x4c>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	095b      	lsrs	r3, r3, #5
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 faa3 	bl	800aef4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	091b      	lsrs	r3, r3, #4
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 809a 	beq.w	800aaf0 <I2C_Slave_ISR_DMA+0x18e>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	091b      	lsrs	r3, r3, #4
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 8093 	beq.w	800aaf0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	0b9b      	lsrs	r3, r3, #14
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d105      	bne.n	800a9e2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	0bdb      	lsrs	r3, r3, #15
 800a9da:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d07f      	beq.n	800aae2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00d      	beq.n	800aa06 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	0bdb      	lsrs	r3, r3, #15
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d007      	beq.n	800aa06 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800aa02:	2301      	movs	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00d      	beq.n	800aa2a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	0b9b      	lsrs	r3, r3, #14
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800aa26:	2301      	movs	r3, #1
 800aa28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d128      	bne.n	800aa82 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b28      	cmp	r3, #40	; 0x28
 800aa3a:	d108      	bne.n	800aa4e <I2C_Slave_ISR_DMA+0xec>
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa42:	d104      	bne.n	800aa4e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 fb5e 	bl	800b108 <I2C_ITListenCplt>
 800aa4c:	e048      	b.n	800aae0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b29      	cmp	r3, #41	; 0x29
 800aa58:	d10e      	bne.n	800aa78 <I2C_Slave_ISR_DMA+0x116>
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa60:	d00a      	beq.n	800aa78 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2210      	movs	r2, #16
 800aa68:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fc99 	bl	800b3a2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 f917 	bl	800aca4 <I2C_ITSlaveSeqCplt>
 800aa76:	e033      	b.n	800aae0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800aa80:	e034      	b.n	800aaec <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2210      	movs	r2, #16
 800aa88:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	f043 0204 	orr.w	r2, r3, #4
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa9c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <I2C_Slave_ISR_DMA+0x14a>
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaaa:	d11f      	bne.n	800aaec <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b21      	cmp	r3, #33	; 0x21
 800aab0:	d002      	beq.n	800aab8 <I2C_Slave_ISR_DMA+0x156>
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	2b29      	cmp	r3, #41	; 0x29
 800aab6:	d103      	bne.n	800aac0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2221      	movs	r2, #33	; 0x21
 800aabc:	631a      	str	r2, [r3, #48]	; 0x30
 800aabe:	e008      	b.n	800aad2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	2b22      	cmp	r3, #34	; 0x22
 800aac4:	d002      	beq.n	800aacc <I2C_Slave_ISR_DMA+0x16a>
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaca:	d102      	bne.n	800aad2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2222      	movs	r2, #34	; 0x22
 800aad0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fb6b 	bl	800b1b4 <I2C_ITError>
      if (treatdmanack == 1U)
 800aade:	e005      	b.n	800aaec <I2C_Slave_ISR_DMA+0x18a>
 800aae0:	e004      	b.n	800aaec <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2210      	movs	r2, #16
 800aae8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aaea:	e011      	b.n	800ab10 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800aaec:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aaee:	e00f      	b.n	800ab10 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <I2C_Slave_ISR_DMA+0x1ae>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	08db      	lsrs	r3, r3, #3
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 f809 	bl	800ab22 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ab38:	2b28      	cmp	r3, #40	; 0x28
 800ab3a:	d16a      	bne.n	800ac12 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	0c1b      	lsrs	r3, r3, #16
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ab5a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab68:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ab76:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d138      	bne.n	800abf2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800ab80:	897b      	ldrh	r3, [r7, #10]
 800ab82:	09db      	lsrs	r3, r3, #7
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	89bb      	ldrh	r3, [r7, #12]
 800ab88:	4053      	eors	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f003 0306 	and.w	r3, r3, #6
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d11c      	bne.n	800abce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ab94:	897b      	ldrh	r3, [r7, #10]
 800ab96:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d13b      	bne.n	800ac22 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2208      	movs	r2, #8
 800abb6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800abc0:	89ba      	ldrh	r2, [r7, #12]
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff fb53 	bl	800a272 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800abcc:	e029      	b.n	800ac22 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800abce:	893b      	ldrh	r3, [r7, #8]
 800abd0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800abd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fcf8 	bl	800b5cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800abe4:	89ba      	ldrh	r2, [r7, #12]
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fb41 	bl	800a272 <HAL_I2C_AddrCallback>
}
 800abf0:	e017      	b.n	800ac22 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800abf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fce8 	bl	800b5cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ac04:	89ba      	ldrh	r2, [r7, #12]
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff fb31 	bl	800a272 <HAL_I2C_AddrCallback>
}
 800ac10:	e007      	b.n	800ac22 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2208      	movs	r2, #8
 800ac18:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ac22:	bf00      	nop
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b21      	cmp	r3, #33	; 0x21
 800ac44:	d115      	bne.n	800ac72 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2211      	movs	r2, #17
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fcb5 	bl	800b5cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fad9 	bl	800a222 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ac70:	e014      	b.n	800ac9c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2212      	movs	r2, #18
 800ac7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac86:	2102      	movs	r1, #2
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fc9f 	bl	800b5cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff facd 	bl	800a236 <HAL_I2C_MasterRxCpltCallback>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	0b9b      	lsrs	r3, r3, #14
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d008      	beq.n	800acda <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	e00d      	b.n	800acf6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	0bdb      	lsrs	r3, r3, #15
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b29      	cmp	r3, #41	; 0x29
 800ad00:	d112      	bne.n	800ad28 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2228      	movs	r2, #40	; 0x28
 800ad06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2221      	movs	r2, #33	; 0x21
 800ad0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad10:	2101      	movs	r1, #1
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fc5a 	bl	800b5cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fa92 	bl	800a24a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad26:	e017      	b.n	800ad58 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b2a      	cmp	r3, #42	; 0x2a
 800ad32:	d111      	bne.n	800ad58 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2228      	movs	r2, #40	; 0x28
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2222      	movs	r2, #34	; 0x22
 800ad40:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ad42:	2102      	movs	r1, #2
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc41 	bl	800b5cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fa83 	bl	800a25e <HAL_I2C_SlaveRxCpltCallback>
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2220      	movs	r2, #32
 800ad74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b21      	cmp	r3, #33	; 0x21
 800ad80:	d107      	bne.n	800ad92 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad82:	2101      	movs	r1, #1
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fc21 	bl	800b5cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2211      	movs	r2, #17
 800ad8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ad90:	e00c      	b.n	800adac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b22      	cmp	r3, #34	; 0x22
 800ad9c:	d106      	bne.n	800adac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ad9e:	2102      	movs	r1, #2
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc13 	bl	800b5cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2212      	movs	r2, #18
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6859      	ldr	r1, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b4d      	ldr	r3, [pc, #308]	; (800aeec <I2C_ITMasterCplt+0x18c>)
 800adb8:	400b      	ands	r3, r1
 800adba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a4a      	ldr	r2, [pc, #296]	; (800aef0 <I2C_ITMasterCplt+0x190>)
 800adc6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	091b      	lsrs	r3, r3, #4
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2210      	movs	r2, #16
 800adda:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade0:	f043 0204 	orr.w	r2, r3, #4
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b60      	cmp	r3, #96	; 0x60
 800adf2:	d10b      	bne.n	800ae0c <I2C_ITMasterCplt+0xac>
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	089b      	lsrs	r3, r3, #2
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fac8 	bl	800b3a2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b60      	cmp	r3, #96	; 0x60
 800ae22:	d002      	beq.n	800ae2a <I2C_ITMasterCplt+0xca>
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d006      	beq.n	800ae38 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f9bf 	bl	800b1b4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae36:	e054      	b.n	800aee2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b21      	cmp	r3, #33	; 0x21
 800ae42:	d124      	bne.n	800ae8e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b40      	cmp	r3, #64	; 0x40
 800ae5c:	d10b      	bne.n	800ae76 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fa17 	bl	800a2a2 <HAL_I2C_MemTxCpltCallback>
}
 800ae74:	e035      	b.n	800aee2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff f9cb 	bl	800a222 <HAL_I2C_MasterTxCpltCallback>
}
 800ae8c:	e029      	b.n	800aee2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b22      	cmp	r3, #34	; 0x22
 800ae98:	d123      	bne.n	800aee2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b40      	cmp	r3, #64	; 0x40
 800aeb2:	d10b      	bne.n	800aecc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff f9f6 	bl	800a2b6 <HAL_I2C_MemRxCpltCallback>
}
 800aeca:	e00a      	b.n	800aee2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff f9aa 	bl	800a236 <HAL_I2C_MasterRxCpltCallback>
}
 800aee2:	bf00      	nop
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	fe00e800 	.word	0xfe00e800
 800aef0:	ffff0000 	.word	0xffff0000

0800aef4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af10:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2220      	movs	r2, #32
 800af18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b21      	cmp	r3, #33	; 0x21
 800af1e:	d002      	beq.n	800af26 <I2C_ITSlaveCplt+0x32>
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b29      	cmp	r3, #41	; 0x29
 800af24:	d108      	bne.n	800af38 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800af26:	f248 0101 	movw	r1, #32769	; 0x8001
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb4e 	bl	800b5cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2221      	movs	r2, #33	; 0x21
 800af34:	631a      	str	r2, [r3, #48]	; 0x30
 800af36:	e00d      	b.n	800af54 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	2b22      	cmp	r3, #34	; 0x22
 800af3c:	d002      	beq.n	800af44 <I2C_ITSlaveCplt+0x50>
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	2b2a      	cmp	r3, #42	; 0x2a
 800af42:	d107      	bne.n	800af54 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800af44:	f248 0102 	movw	r1, #32770	; 0x8002
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fb3f 	bl	800b5cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2222      	movs	r2, #34	; 0x22
 800af52:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af62:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6859      	ldr	r1, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b64      	ldr	r3, [pc, #400]	; (800b100 <I2C_ITSlaveCplt+0x20c>)
 800af70:	400b      	ands	r3, r1
 800af72:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa14 	bl	800b3a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	0b9b      	lsrs	r3, r3, #14
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d013      	beq.n	800afae <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d020      	beq.n	800afe0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800afac:	e018      	b.n	800afe0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	0bdb      	lsrs	r3, r3, #15
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d012      	beq.n	800afe0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	b29a      	uxth	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	089b      	lsrs	r3, r3, #2
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d020      	beq.n	800b02e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 0304 	bic.w	r3, r3, #4
 800aff2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	b2d2      	uxtb	r2, r2
 800b000:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00c      	beq.n	800b02e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b018:	3b01      	subs	r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b024:	b29b      	uxth	r3, r3
 800b026:	3b01      	subs	r3, #1
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03c:	f043 0204 	orr.w	r2, r3, #4
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b056:	2b00      	cmp	r3, #0
 800b058:	d010      	beq.n	800b07c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f8a7 	bl	800b1b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b28      	cmp	r3, #40	; 0x28
 800b070:	d141      	bne.n	800b0f6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b072:	6979      	ldr	r1, [r7, #20]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f847 	bl	800b108 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b07a:	e03c      	b.n	800b0f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b084:	d014      	beq.n	800b0b0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fe0c 	bl	800aca4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <I2C_ITSlaveCplt+0x210>)
 800b090:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff f8f0 	bl	800a28e <HAL_I2C_ListenCpltCallback>
}
 800b0ae:	e022      	b.n	800b0f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b22      	cmp	r3, #34	; 0x22
 800b0ba:	d10e      	bne.n	800b0da <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff f8c3 	bl	800a25e <HAL_I2C_SlaveRxCpltCallback>
}
 800b0d8:	e00d      	b.n	800b0f6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff f8aa 	bl	800a24a <HAL_I2C_SlaveTxCpltCallback>
}
 800b0f6:	bf00      	nop
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	fe00e800 	.word	0xfe00e800
 800b104:	ffff0000 	.word	0xffff0000

0800b108 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a26      	ldr	r2, [pc, #152]	; (800b1b0 <I2C_ITListenCplt+0xa8>)
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2220      	movs	r2, #32
 800b122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	089b      	lsrs	r3, r3, #2
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d022      	beq.n	800b186 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d012      	beq.n	800b186 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b164:	3b01      	subs	r3, #1
 800b166:	b29a      	uxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b170:	b29b      	uxth	r3, r3
 800b172:	3b01      	subs	r3, #1
 800b174:	b29a      	uxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17e:	f043 0204 	orr.w	r2, r3, #4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b186:	f248 0103 	movw	r1, #32771	; 0x8003
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fa1e 	bl	800b5cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2210      	movs	r2, #16
 800b196:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff f874 	bl	800a28e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	ffff0000 	.word	0xffff0000

0800b1b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a5d      	ldr	r2, [pc, #372]	; (800b348 <I2C_ITError+0x194>)
 800b1d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b28      	cmp	r3, #40	; 0x28
 800b1ea:	d005      	beq.n	800b1f8 <I2C_ITError+0x44>
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	2b29      	cmp	r3, #41	; 0x29
 800b1f0:	d002      	beq.n	800b1f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f6:	d10b      	bne.n	800b210 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b1f8:	2103      	movs	r1, #3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9e6 	bl	800b5cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2228      	movs	r2, #40	; 0x28
 800b204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a50      	ldr	r2, [pc, #320]	; (800b34c <I2C_ITError+0x198>)
 800b20c:	635a      	str	r2, [r3, #52]	; 0x34
 800b20e:	e011      	b.n	800b234 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b210:	f248 0103 	movw	r1, #32771	; 0x8003
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f9d9 	bl	800b5cc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b60      	cmp	r3, #96	; 0x60
 800b224:	d003      	beq.n	800b22e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2220      	movs	r2, #32
 800b22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d039      	beq.n	800b2b6 <I2C_ITError+0x102>
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b11      	cmp	r3, #17
 800b246:	d002      	beq.n	800b24e <I2C_ITError+0x9a>
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b21      	cmp	r3, #33	; 0x21
 800b24c:	d133      	bne.n	800b2b6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b25c:	d107      	bne.n	800b26e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b26c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe f9a8 	bl	80095c8 <HAL_DMA_GetState>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d017      	beq.n	800b2ae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b282:	4a33      	ldr	r2, [pc, #204]	; (800b350 <I2C_ITError+0x19c>)
 800b284:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe f8a8 	bl	80093e8 <HAL_DMA_Abort_IT>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d04d      	beq.n	800b33a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b2ac:	e045      	b.n	800b33a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f850 	bl	800b354 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b2b4:	e041      	b.n	800b33a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d039      	beq.n	800b332 <I2C_ITError+0x17e>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b12      	cmp	r3, #18
 800b2c2:	d002      	beq.n	800b2ca <I2C_ITError+0x116>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b22      	cmp	r3, #34	; 0x22
 800b2c8:	d133      	bne.n	800b332 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2d8:	d107      	bne.n	800b2ea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe f96a 	bl	80095c8 <HAL_DMA_GetState>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d017      	beq.n	800b32a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <I2C_ITError+0x19c>)
 800b300:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe f86a 	bl	80093e8 <HAL_DMA_Abort_IT>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d011      	beq.n	800b33e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b328:	e009      	b.n	800b33e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f812 	bl	800b354 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b330:	e005      	b.n	800b33e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f80e 	bl	800b354 <I2C_TreatErrorCallback>
  }
}
 800b338:	e002      	b.n	800b340 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b33e:	bf00      	nop
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	ffff0000 	.word	0xffff0000
 800b34c:	0800a577 	.word	0x0800a577
 800b350:	0800b3eb 	.word	0x0800b3eb

0800b354 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b60      	cmp	r3, #96	; 0x60
 800b366:	d10e      	bne.n	800b386 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe ffad 	bl	800a2de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b384:	e009      	b.n	800b39a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7fe ff98 	bl	800a2ca <HAL_I2C_ErrorCallback>
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d103      	bne.n	800b3c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d007      	beq.n	800b3de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	699a      	ldr	r2, [r3, #24]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0201 	orr.w	r2, r2, #1
 800b3dc:	619a      	str	r2, [r3, #24]
  }
}
 800b3de:	bf00      	nop
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	2200      	movs	r2, #0
 800b406:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b414:	2200      	movs	r2, #0
 800b416:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f7ff ff9b 	bl	800b354 <I2C_TreatErrorCallback>
}
 800b41e:	bf00      	nop
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	603b      	str	r3, [r7, #0]
 800b432:	4613      	mov	r3, r2
 800b434:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b436:	e022      	b.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d01e      	beq.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b440:	f7fc f8f6 	bl	8007630 <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d302      	bcc.n	800b456 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d113      	bne.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	f043 0220 	orr.w	r2, r3, #32
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2220      	movs	r2, #32
 800b466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e00f      	b.n	800b49e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699a      	ldr	r2, [r3, #24]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4013      	ands	r3, r2
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	bf0c      	ite	eq
 800b48e:	2301      	moveq	r3, #1
 800b490:	2300      	movne	r3, #0
 800b492:	b2db      	uxtb	r3, r3
 800b494:	461a      	mov	r2, r3
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d0cd      	beq.n	800b438 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	607b      	str	r3, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	817b      	strh	r3, [r7, #10]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	0d5b      	lsrs	r3, r3, #21
 800b4c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <I2C_TransferConfig+0x58>)
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	43db      	mvns	r3, r3
 800b4ce:	ea02 0103 	and.w	r1, r2, r3
 800b4d2:	897b      	ldrh	r3, [r7, #10]
 800b4d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b4d8:	7a7b      	ldrb	r3, [r7, #9]
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b4f2:	bf00      	nop
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	03ff63ff 	.word	0x03ff63ff

0800b504 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b518:	4a2a      	ldr	r2, [pc, #168]	; (800b5c4 <I2C_Enable_IRQ+0xc0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d004      	beq.n	800b528 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b522:	4a29      	ldr	r2, [pc, #164]	; (800b5c8 <I2C_Enable_IRQ+0xc4>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d11d      	bne.n	800b564 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	da03      	bge.n	800b538 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b536:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b538:	887b      	ldrh	r3, [r7, #2]
 800b53a:	2b10      	cmp	r3, #16
 800b53c:	d103      	bne.n	800b546 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b544:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b546:	887b      	ldrh	r3, [r7, #2]
 800b548:	2b20      	cmp	r3, #32
 800b54a:	d103      	bne.n	800b554 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b554:	887b      	ldrh	r3, [r7, #2]
 800b556:	2b40      	cmp	r3, #64	; 0x40
 800b558:	d125      	bne.n	800b5a6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b560:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b562:	e020      	b.n	800b5a6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	da03      	bge.n	800b574 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b572:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b574:	887b      	ldrh	r3, [r7, #2]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b584:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b586:	887b      	ldrh	r3, [r7, #2]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b596:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b598:	887b      	ldrh	r3, [r7, #2]
 800b59a:	2b20      	cmp	r3, #32
 800b59c:	d103      	bne.n	800b5a6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f043 0320 	orr.w	r3, r3, #32
 800b5a4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	6819      	ldr	r1, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	0800a77d 	.word	0x0800a77d
 800b5c8:	0800a963 	.word	0x0800a963

0800b5cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b5dc:	887b      	ldrh	r3, [r7, #2]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00f      	beq.n	800b606 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b5ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b5fa:	2b28      	cmp	r3, #40	; 0x28
 800b5fc:	d003      	beq.n	800b606 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b604:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b606:	887b      	ldrh	r3, [r7, #2]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00f      	beq.n	800b630 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b616:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b624:	2b28      	cmp	r3, #40	; 0x28
 800b626:	d003      	beq.n	800b630 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b62e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b634:	2b00      	cmp	r3, #0
 800b636:	da03      	bge.n	800b640 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b63e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b640:	887b      	ldrh	r3, [r7, #2]
 800b642:	2b10      	cmp	r3, #16
 800b644:	d103      	bne.n	800b64e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b64c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b64e:	887b      	ldrh	r3, [r7, #2]
 800b650:	2b20      	cmp	r3, #32
 800b652:	d103      	bne.n	800b65c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f043 0320 	orr.w	r3, r3, #32
 800b65a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b65c:	887b      	ldrh	r3, [r7, #2]
 800b65e:	2b40      	cmp	r3, #64	; 0x40
 800b660:	d103      	bne.n	800b66a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b668:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6819      	ldr	r1, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	43da      	mvns	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	400a      	ands	r2, r1
 800b67a:	601a      	str	r2, [r3, #0]
}
 800b67c:	bf00      	nop
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	2baa      	cmp	r3, #170	; 0xaa
 800b696:	d103      	bne.n	800b6a0 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b69e:	e008      	b.n	800b6b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800b6a8:	d103      	bne.n	800b6b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b6b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d138      	bne.n	800b746 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d101      	bne.n	800b6e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e032      	b.n	800b748 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2224      	movs	r2, #36	; 0x24
 800b6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b710:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6819      	ldr	r1, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f042 0201 	orr.w	r2, r2, #1
 800b730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	e000      	b.n	800b748 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b746:	2302      	movs	r3, #2
  }
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b20      	cmp	r3, #32
 800b768:	d139      	bne.n	800b7de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b770:	2b01      	cmp	r3, #1
 800b772:	d101      	bne.n	800b778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b774:	2302      	movs	r3, #2
 800b776:	e033      	b.n	800b7e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2224      	movs	r2, #36	; 0x24
 800b784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0201 	bic.w	r2, r2, #1
 800b796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b7a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f042 0201 	orr.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b7de:	2302      	movs	r3, #2
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7f0:	4b05      	ldr	r3, [pc, #20]	; (800b808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a04      	ldr	r2, [pc, #16]	; (800b808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7fa:	6013      	str	r3, [r2, #0]
}
 800b7fc:	bf00      	nop
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	40007000 	.word	0x40007000

0800b80c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b810:	4b04      	ldr	r3, [pc, #16]	; (800b824 <HAL_PWREx_GetVoltageRange+0x18>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b818:	4618      	mov	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	40007000 	.word	0x40007000

0800b828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b836:	d130      	bne.n	800b89a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b838:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b844:	d038      	beq.n	800b8b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b846:	4b20      	ldr	r3, [pc, #128]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b856:	4b1d      	ldr	r3, [pc, #116]	; (800b8cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2232      	movs	r2, #50	; 0x32
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	0c9b      	lsrs	r3, r3, #18
 800b868:	3301      	adds	r3, #1
 800b86a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b86c:	e002      	b.n	800b874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3b01      	subs	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b874:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b880:	d102      	bne.n	800b888 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1f2      	bne.n	800b86e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b888:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b894:	d110      	bne.n	800b8b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e00f      	b.n	800b8ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b89a:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a6:	d007      	beq.n	800b8b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b8a8:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b8b0:	4a05      	ldr	r2, [pc, #20]	; (800b8c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b8b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40007000 	.word	0x40007000
 800b8cc:	20000008 	.word	0x20000008
 800b8d0:	431bde83 	.word	0x431bde83

0800b8d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f000 bc11 	b.w	800c10a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8e8:	4ba0      	ldr	r3, [pc, #640]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 030c 	and.w	r3, r3, #12
 800b8f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b8f2:	4b9e      	ldr	r3, [pc, #632]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 0310 	and.w	r3, r3, #16
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 80e4 	beq.w	800bad2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d007      	beq.n	800b920 <HAL_RCC_OscConfig+0x4c>
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	2b0c      	cmp	r3, #12
 800b914:	f040 808b 	bne.w	800ba2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	f040 8087 	bne.w	800ba2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b920:	4b92      	ldr	r3, [pc, #584]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <HAL_RCC_OscConfig+0x64>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e3e8      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1a      	ldr	r2, [r3, #32]
 800b93c:	4b8b      	ldr	r3, [pc, #556]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0308 	and.w	r3, r3, #8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <HAL_RCC_OscConfig+0x7e>
 800b948:	4b88      	ldr	r3, [pc, #544]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b950:	e005      	b.n	800b95e <HAL_RCC_OscConfig+0x8a>
 800b952:	4b86      	ldr	r3, [pc, #536]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b958:	091b      	lsrs	r3, r3, #4
 800b95a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b95e:	4293      	cmp	r3, r2
 800b960:	d223      	bcs.n	800b9aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fdac 	bl	800c4c4 <RCC_SetFlashLatencyFromMSIRange>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e3c9      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b976:	4b7d      	ldr	r3, [pc, #500]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a7c      	ldr	r2, [pc, #496]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b97c:	f043 0308 	orr.w	r3, r3, #8
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	4b7a      	ldr	r3, [pc, #488]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	4977      	ldr	r1, [pc, #476]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b990:	4313      	orrs	r3, r2
 800b992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b994:	4b75      	ldr	r3, [pc, #468]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	021b      	lsls	r3, r3, #8
 800b9a2:	4972      	ldr	r1, [pc, #456]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	604b      	str	r3, [r1, #4]
 800b9a8:	e025      	b.n	800b9f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9aa:	4b70      	ldr	r3, [pc, #448]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a6f      	ldr	r2, [pc, #444]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9b0:	f043 0308 	orr.w	r3, r3, #8
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	4b6d      	ldr	r3, [pc, #436]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	496a      	ldr	r1, [pc, #424]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b9c8:	4b68      	ldr	r3, [pc, #416]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	69db      	ldr	r3, [r3, #28]
 800b9d4:	021b      	lsls	r3, r3, #8
 800b9d6:	4965      	ldr	r1, [pc, #404]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d109      	bne.n	800b9f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fd6c 	bl	800c4c4 <RCC_SetFlashLatencyFromMSIRange>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e389      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b9f6:	f000 fc6f 	bl	800c2d8 <HAL_RCC_GetSysClockFreq>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4b5b      	ldr	r3, [pc, #364]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	091b      	lsrs	r3, r3, #4
 800ba02:	f003 030f 	and.w	r3, r3, #15
 800ba06:	495a      	ldr	r1, [pc, #360]	; (800bb70 <HAL_RCC_OscConfig+0x29c>)
 800ba08:	5ccb      	ldrb	r3, [r1, r3]
 800ba0a:	f003 031f 	and.w	r3, r3, #31
 800ba0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba12:	4a58      	ldr	r2, [pc, #352]	; (800bb74 <HAL_RCC_OscConfig+0x2a0>)
 800ba14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ba16:	4b58      	ldr	r3, [pc, #352]	; (800bb78 <HAL_RCC_OscConfig+0x2a4>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f9 ff88 	bl	8005930 <HAL_InitTick>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d052      	beq.n	800bad0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	e36d      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d032      	beq.n	800ba9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ba36:	4b4d      	ldr	r3, [pc, #308]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a4c      	ldr	r2, [pc, #304]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba3c:	f043 0301 	orr.w	r3, r3, #1
 800ba40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ba42:	f7fb fdf5 	bl	8007630 <HAL_GetTick>
 800ba46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ba48:	e008      	b.n	800ba5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba4a:	f7fb fdf1 	bl	8007630 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d901      	bls.n	800ba5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e356      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ba5c:	4b43      	ldr	r3, [pc, #268]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0302 	and.w	r3, r3, #2
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0f0      	beq.n	800ba4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ba68:	4b40      	ldr	r3, [pc, #256]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a3f      	ldr	r2, [pc, #252]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba6e:	f043 0308 	orr.w	r3, r3, #8
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	4b3d      	ldr	r3, [pc, #244]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	493a      	ldr	r1, [pc, #232]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba86:	4b39      	ldr	r3, [pc, #228]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	021b      	lsls	r3, r3, #8
 800ba94:	4935      	ldr	r1, [pc, #212]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	604b      	str	r3, [r1, #4]
 800ba9a:	e01a      	b.n	800bad2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ba9c:	4b33      	ldr	r3, [pc, #204]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a32      	ldr	r2, [pc, #200]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800baa2:	f023 0301 	bic.w	r3, r3, #1
 800baa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800baa8:	f7fb fdc2 	bl	8007630 <HAL_GetTick>
 800baac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bab0:	f7fb fdbe 	bl	8007630 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b02      	cmp	r3, #2
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e323      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bac2:	4b2a      	ldr	r3, [pc, #168]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1f0      	bne.n	800bab0 <HAL_RCC_OscConfig+0x1dc>
 800bace:	e000      	b.n	800bad2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d073      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2b08      	cmp	r3, #8
 800bae2:	d005      	beq.n	800baf0 <HAL_RCC_OscConfig+0x21c>
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b0c      	cmp	r3, #12
 800bae8:	d10e      	bne.n	800bb08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b03      	cmp	r3, #3
 800baee:	d10b      	bne.n	800bb08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baf0:	4b1e      	ldr	r3, [pc, #120]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d063      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x2f0>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d15f      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e300      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb10:	d106      	bne.n	800bb20 <HAL_RCC_OscConfig+0x24c>
 800bb12:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a15      	ldr	r2, [pc, #84]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	e01d      	b.n	800bb5c <HAL_RCC_OscConfig+0x288>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb28:	d10c      	bne.n	800bb44 <HAL_RCC_OscConfig+0x270>
 800bb2a:	4b10      	ldr	r3, [pc, #64]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a0f      	ldr	r2, [pc, #60]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a0c      	ldr	r2, [pc, #48]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	e00b      	b.n	800bb5c <HAL_RCC_OscConfig+0x288>
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a08      	ldr	r2, [pc, #32]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a05      	ldr	r2, [pc, #20]	; (800bb6c <HAL_RCC_OscConfig+0x298>)
 800bb56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d01b      	beq.n	800bb9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb64:	f7fb fd64 	bl	8007630 <HAL_GetTick>
 800bb68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb6a:	e010      	b.n	800bb8e <HAL_RCC_OscConfig+0x2ba>
 800bb6c:	40021000 	.word	0x40021000
 800bb70:	080134c0 	.word	0x080134c0
 800bb74:	20000008 	.word	0x20000008
 800bb78:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb7c:	f7fb fd58 	bl	8007630 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b64      	cmp	r3, #100	; 0x64
 800bb88:	d901      	bls.n	800bb8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e2bd      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb8e:	4baf      	ldr	r3, [pc, #700]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0f0      	beq.n	800bb7c <HAL_RCC_OscConfig+0x2a8>
 800bb9a:	e014      	b.n	800bbc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb9c:	f7fb fd48 	bl	8007630 <HAL_GetTick>
 800bba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bba2:	e008      	b.n	800bbb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bba4:	f7fb fd44 	bl	8007630 <HAL_GetTick>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	2b64      	cmp	r3, #100	; 0x64
 800bbb0:	d901      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e2a9      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bbb6:	4ba5      	ldr	r3, [pc, #660]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f0      	bne.n	800bba4 <HAL_RCC_OscConfig+0x2d0>
 800bbc2:	e000      	b.n	800bbc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d060      	beq.n	800bc94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b04      	cmp	r3, #4
 800bbd6:	d005      	beq.n	800bbe4 <HAL_RCC_OscConfig+0x310>
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	2b0c      	cmp	r3, #12
 800bbdc:	d119      	bne.n	800bc12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d116      	bne.n	800bc12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbe4:	4b99      	ldr	r3, [pc, #612]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <HAL_RCC_OscConfig+0x328>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d101      	bne.n	800bbfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e286      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbfc:	4b93      	ldr	r3, [pc, #588]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	061b      	lsls	r3, r3, #24
 800bc0a:	4990      	ldr	r1, [pc, #576]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc10:	e040      	b.n	800bc94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d023      	beq.n	800bc62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc1a:	4b8c      	ldr	r3, [pc, #560]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a8b      	ldr	r2, [pc, #556]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc26:	f7fb fd03 	bl	8007630 <HAL_GetTick>
 800bc2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc2c:	e008      	b.n	800bc40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc2e:	f7fb fcff 	bl	8007630 <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d901      	bls.n	800bc40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e264      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc40:	4b82      	ldr	r3, [pc, #520]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0f0      	beq.n	800bc2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc4c:	4b7f      	ldr	r3, [pc, #508]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	061b      	lsls	r3, r3, #24
 800bc5a:	497c      	ldr	r1, [pc, #496]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	604b      	str	r3, [r1, #4]
 800bc60:	e018      	b.n	800bc94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc62:	4b7a      	ldr	r3, [pc, #488]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a79      	ldr	r2, [pc, #484]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc6e:	f7fb fcdf 	bl	8007630 <HAL_GetTick>
 800bc72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bc74:	e008      	b.n	800bc88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc76:	f7fb fcdb 	bl	8007630 <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d901      	bls.n	800bc88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e240      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bc88:	4b70      	ldr	r3, [pc, #448]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f0      	bne.n	800bc76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0308 	and.w	r3, r3, #8
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d03c      	beq.n	800bd1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d01c      	beq.n	800bce2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bca8:	4b68      	ldr	r3, [pc, #416]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bcaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcae:	4a67      	ldr	r2, [pc, #412]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bcb0:	f043 0301 	orr.w	r3, r3, #1
 800bcb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcb8:	f7fb fcba 	bl	8007630 <HAL_GetTick>
 800bcbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bcbe:	e008      	b.n	800bcd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcc0:	f7fb fcb6 	bl	8007630 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e21b      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bcd2:	4b5e      	ldr	r3, [pc, #376]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bcd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0ef      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x3ec>
 800bce0:	e01b      	b.n	800bd1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bce2:	4b5a      	ldr	r3, [pc, #360]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bce8:	4a58      	ldr	r2, [pc, #352]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bcea:	f023 0301 	bic.w	r3, r3, #1
 800bcee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcf2:	f7fb fc9d 	bl	8007630 <HAL_GetTick>
 800bcf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bcf8:	e008      	b.n	800bd0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcfa:	f7fb fc99 	bl	8007630 <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d901      	bls.n	800bd0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e1fe      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bd0c:	4b4f      	ldr	r3, [pc, #316]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1ef      	bne.n	800bcfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0304 	and.w	r3, r3, #4
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 80a6 	beq.w	800be74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bd2c:	4b47      	ldr	r3, [pc, #284]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10d      	bne.n	800bd54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd38:	4b44      	ldr	r3, [pc, #272]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3c:	4a43      	ldr	r2, [pc, #268]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd42:	6593      	str	r3, [r2, #88]	; 0x58
 800bd44:	4b41      	ldr	r3, [pc, #260]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd50:	2301      	movs	r3, #1
 800bd52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bd54:	4b3e      	ldr	r3, [pc, #248]	; (800be50 <HAL_RCC_OscConfig+0x57c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d118      	bne.n	800bd92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd60:	4b3b      	ldr	r3, [pc, #236]	; (800be50 <HAL_RCC_OscConfig+0x57c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a3a      	ldr	r2, [pc, #232]	; (800be50 <HAL_RCC_OscConfig+0x57c>)
 800bd66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd6c:	f7fb fc60 	bl	8007630 <HAL_GetTick>
 800bd70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bd72:	e008      	b.n	800bd86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd74:	f7fb fc5c 	bl	8007630 <HAL_GetTick>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d901      	bls.n	800bd86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e1c1      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bd86:	4b32      	ldr	r3, [pc, #200]	; (800be50 <HAL_RCC_OscConfig+0x57c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f0      	beq.n	800bd74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d108      	bne.n	800bdac <HAL_RCC_OscConfig+0x4d8>
 800bd9a:	4b2c      	ldr	r3, [pc, #176]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda0:	4a2a      	ldr	r2, [pc, #168]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bdaa:	e024      	b.n	800bdf6 <HAL_RCC_OscConfig+0x522>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	2b05      	cmp	r3, #5
 800bdb2:	d110      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x502>
 800bdb4:	4b25      	ldr	r3, [pc, #148]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdba:	4a24      	ldr	r2, [pc, #144]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdbc:	f043 0304 	orr.w	r3, r3, #4
 800bdc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bdc4:	4b21      	ldr	r3, [pc, #132]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdca:	4a20      	ldr	r2, [pc, #128]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdcc:	f043 0301 	orr.w	r3, r3, #1
 800bdd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bdd4:	e00f      	b.n	800bdf6 <HAL_RCC_OscConfig+0x522>
 800bdd6:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bddc:	4a1b      	ldr	r2, [pc, #108]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdec:	4a17      	ldr	r2, [pc, #92]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800bdee:	f023 0304 	bic.w	r3, r3, #4
 800bdf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d016      	beq.n	800be2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdfe:	f7fb fc17 	bl	8007630 <HAL_GetTick>
 800be02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be04:	e00a      	b.n	800be1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be06:	f7fb fc13 	bl	8007630 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	f241 3288 	movw	r2, #5000	; 0x1388
 800be14:	4293      	cmp	r3, r2
 800be16:	d901      	bls.n	800be1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e176      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be1c:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <HAL_RCC_OscConfig+0x578>)
 800be1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0ed      	beq.n	800be06 <HAL_RCC_OscConfig+0x532>
 800be2a:	e01a      	b.n	800be62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be2c:	f7fb fc00 	bl	8007630 <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800be32:	e00f      	b.n	800be54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be34:	f7fb fbfc 	bl	8007630 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be42:	4293      	cmp	r3, r2
 800be44:	d906      	bls.n	800be54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e15f      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
 800be4a:	bf00      	nop
 800be4c:	40021000 	.word	0x40021000
 800be50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800be54:	4baa      	ldr	r3, [pc, #680]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800be56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e8      	bne.n	800be34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be62:	7ffb      	ldrb	r3, [r7, #31]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d105      	bne.n	800be74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be68:	4ba5      	ldr	r3, [pc, #660]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800be6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be6c:	4aa4      	ldr	r2, [pc, #656]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800be6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d03c      	beq.n	800befa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01c      	beq.n	800bec2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800be88:	4b9d      	ldr	r3, [pc, #628]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800be8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be8e:	4a9c      	ldr	r2, [pc, #624]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be98:	f7fb fbca 	bl	8007630 <HAL_GetTick>
 800be9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800be9e:	e008      	b.n	800beb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bea0:	f7fb fbc6 	bl	8007630 <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d901      	bls.n	800beb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e12b      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800beb2:	4b93      	ldr	r3, [pc, #588]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800beb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d0ef      	beq.n	800bea0 <HAL_RCC_OscConfig+0x5cc>
 800bec0:	e01b      	b.n	800befa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bec2:	4b8f      	ldr	r3, [pc, #572]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bec8:	4a8d      	ldr	r2, [pc, #564]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bed2:	f7fb fbad 	bl	8007630 <HAL_GetTick>
 800bed6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bed8:	e008      	b.n	800beec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800beda:	f7fb fba9 	bl	8007630 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d901      	bls.n	800beec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e10e      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800beec:	4b84      	ldr	r3, [pc, #528]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800beee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1ef      	bne.n	800beda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 8102 	beq.w	800c108 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	f040 80c5 	bne.w	800c098 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bf0e:	4b7c      	ldr	r3, [pc, #496]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f003 0203 	and.w	r2, r3, #3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d12c      	bne.n	800bf7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d123      	bne.n	800bf7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d11b      	bne.n	800bf7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d113      	bne.n	800bf7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	3b01      	subs	r3, #1
 800bf62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d109      	bne.n	800bf7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf72:	085b      	lsrs	r3, r3, #1
 800bf74:	3b01      	subs	r3, #1
 800bf76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d067      	beq.n	800c04c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	2b0c      	cmp	r3, #12
 800bf80:	d062      	beq.n	800c048 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bf82:	4b5f      	ldr	r3, [pc, #380]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e0bb      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bf92:	4b5b      	ldr	r3, [pc, #364]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a5a      	ldr	r2, [pc, #360]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bf98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bf9e:	f7fb fb47 	bl	8007630 <HAL_GetTick>
 800bfa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfa4:	e008      	b.n	800bfb8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfa6:	f7fb fb43 	bl	8007630 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d901      	bls.n	800bfb8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e0a8      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfb8:	4b51      	ldr	r3, [pc, #324]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1f0      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bfc4:	4b4e      	ldr	r3, [pc, #312]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	4b4e      	ldr	r3, [pc, #312]	; (800c104 <HAL_RCC_OscConfig+0x830>)
 800bfca:	4013      	ands	r3, r2
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfd4:	3a01      	subs	r2, #1
 800bfd6:	0112      	lsls	r2, r2, #4
 800bfd8:	4311      	orrs	r1, r2
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bfde:	0212      	lsls	r2, r2, #8
 800bfe0:	4311      	orrs	r1, r2
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bfe6:	0852      	lsrs	r2, r2, #1
 800bfe8:	3a01      	subs	r2, #1
 800bfea:	0552      	lsls	r2, r2, #21
 800bfec:	4311      	orrs	r1, r2
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bff2:	0852      	lsrs	r2, r2, #1
 800bff4:	3a01      	subs	r2, #1
 800bff6:	0652      	lsls	r2, r2, #25
 800bff8:	4311      	orrs	r1, r2
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bffe:	06d2      	lsls	r2, r2, #27
 800c000:	430a      	orrs	r2, r1
 800c002:	493f      	ldr	r1, [pc, #252]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c004:	4313      	orrs	r3, r2
 800c006:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c008:	4b3d      	ldr	r3, [pc, #244]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a3c      	ldr	r2, [pc, #240]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c00e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c012:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c014:	4b3a      	ldr	r3, [pc, #232]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	4a39      	ldr	r2, [pc, #228]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c01a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c01e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c020:	f7fb fb06 	bl	8007630 <HAL_GetTick>
 800c024:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c026:	e008      	b.n	800c03a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c028:	f7fb fb02 	bl	8007630 <HAL_GetTick>
 800c02c:	4602      	mov	r2, r0
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	2b02      	cmp	r3, #2
 800c034:	d901      	bls.n	800c03a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e067      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c03a:	4b31      	ldr	r3, [pc, #196]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0f0      	beq.n	800c028 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c046:	e05f      	b.n	800c108 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e05e      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c04c:	4b2c      	ldr	r3, [pc, #176]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d157      	bne.n	800c108 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c058:	4b29      	ldr	r3, [pc, #164]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a28      	ldr	r2, [pc, #160]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c05e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c062:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c064:	4b26      	ldr	r3, [pc, #152]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4a25      	ldr	r2, [pc, #148]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c06a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c06e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c070:	f7fb fade 	bl	8007630 <HAL_GetTick>
 800c074:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c076:	e008      	b.n	800c08a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c078:	f7fb fada 	bl	8007630 <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	2b02      	cmp	r3, #2
 800c084:	d901      	bls.n	800c08a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	e03f      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c08a:	4b1d      	ldr	r3, [pc, #116]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0f0      	beq.n	800c078 <HAL_RCC_OscConfig+0x7a4>
 800c096:	e037      	b.n	800c108 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b0c      	cmp	r3, #12
 800c09c:	d02d      	beq.n	800c0fa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c09e:	4b18      	ldr	r3, [pc, #96]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a17      	ldr	r2, [pc, #92]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0a8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c0aa:	4b15      	ldr	r3, [pc, #84]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d105      	bne.n	800c0c2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c0b6:	4b12      	ldr	r3, [pc, #72]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	4a11      	ldr	r2, [pc, #68]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0bc:	f023 0303 	bic.w	r3, r3, #3
 800c0c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c0c2:	4b0f      	ldr	r3, [pc, #60]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	4a0e      	ldr	r2, [pc, #56]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c0cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d2:	f7fb faad 	bl	8007630 <HAL_GetTick>
 800c0d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0d8:	e008      	b.n	800c0ec <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0da:	f7fb faa9 	bl	8007630 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d901      	bls.n	800c0ec <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e00e      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0ec:	4b04      	ldr	r3, [pc, #16]	; (800c100 <HAL_RCC_OscConfig+0x82c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1f0      	bne.n	800c0da <HAL_RCC_OscConfig+0x806>
 800c0f8:	e006      	b.n	800c108 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e005      	b.n	800c10a <HAL_RCC_OscConfig+0x836>
 800c0fe:	bf00      	nop
 800c100:	40021000 	.word	0x40021000
 800c104:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop

0800c114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e0c8      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c128:	4b66      	ldr	r3, [pc, #408]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0307 	and.w	r3, r3, #7
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d910      	bls.n	800c158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c136:	4b63      	ldr	r3, [pc, #396]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f023 0207 	bic.w	r2, r3, #7
 800c13e:	4961      	ldr	r1, [pc, #388]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	4313      	orrs	r3, r2
 800c144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c146:	4b5f      	ldr	r3, [pc, #380]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d001      	beq.n	800c158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e0b0      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d04c      	beq.n	800c1fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d107      	bne.n	800c17c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c16c:	4b56      	ldr	r3, [pc, #344]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d121      	bne.n	800c1bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e09e      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d107      	bne.n	800c194 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c184:	4b50      	ldr	r3, [pc, #320]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d115      	bne.n	800c1bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e092      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d107      	bne.n	800c1ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c19c:	4b4a      	ldr	r3, [pc, #296]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d109      	bne.n	800c1bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e086      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1ac:	4b46      	ldr	r3, [pc, #280]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e07e      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c1bc:	4b42      	ldr	r3, [pc, #264]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f023 0203 	bic.w	r2, r3, #3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	493f      	ldr	r1, [pc, #252]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ce:	f7fb fa2f 	bl	8007630 <HAL_GetTick>
 800c1d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1d4:	e00a      	b.n	800c1ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1d6:	f7fb fa2b 	bl	8007630 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e066      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1ec:	4b36      	ldr	r3, [pc, #216]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f003 020c 	and.w	r2, r3, #12
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d1eb      	bne.n	800c1d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d008      	beq.n	800c21c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	492c      	ldr	r1, [pc, #176]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c218:	4313      	orrs	r3, r2
 800c21a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c21c:	4b29      	ldr	r3, [pc, #164]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d210      	bcs.n	800c24c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c22a:	4b26      	ldr	r3, [pc, #152]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f023 0207 	bic.w	r2, r3, #7
 800c232:	4924      	ldr	r1, [pc, #144]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	4313      	orrs	r3, r2
 800c238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c23a:	4b22      	ldr	r3, [pc, #136]	; (800c2c4 <HAL_RCC_ClockConfig+0x1b0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d001      	beq.n	800c24c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	e036      	b.n	800c2ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d008      	beq.n	800c26a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c258:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	4918      	ldr	r1, [pc, #96]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c266:	4313      	orrs	r3, r2
 800c268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0308 	and.w	r3, r3, #8
 800c272:	2b00      	cmp	r3, #0
 800c274:	d009      	beq.n	800c28a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c276:	4b14      	ldr	r3, [pc, #80]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	4910      	ldr	r1, [pc, #64]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c286:	4313      	orrs	r3, r2
 800c288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c28a:	f000 f825 	bl	800c2d8 <HAL_RCC_GetSysClockFreq>
 800c28e:	4602      	mov	r2, r0
 800c290:	4b0d      	ldr	r3, [pc, #52]	; (800c2c8 <HAL_RCC_ClockConfig+0x1b4>)
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	091b      	lsrs	r3, r3, #4
 800c296:	f003 030f 	and.w	r3, r3, #15
 800c29a:	490c      	ldr	r1, [pc, #48]	; (800c2cc <HAL_RCC_ClockConfig+0x1b8>)
 800c29c:	5ccb      	ldrb	r3, [r1, r3]
 800c29e:	f003 031f 	and.w	r3, r3, #31
 800c2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a6:	4a0a      	ldr	r2, [pc, #40]	; (800c2d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <HAL_RCC_ClockConfig+0x1c0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f9 fb3e 	bl	8005930 <HAL_InitTick>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	72fb      	strb	r3, [r7, #11]

  return status;
 800c2b8:	7afb      	ldrb	r3, [r7, #11]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	40022000 	.word	0x40022000
 800c2c8:	40021000 	.word	0x40021000
 800c2cc:	080134c0 	.word	0x080134c0
 800c2d0:	20000008 	.word	0x20000008
 800c2d4:	20000010 	.word	0x20000010

0800c2d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b089      	sub	sp, #36	; 0x24
 800c2dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2e6:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f003 030c 	and.w	r3, r3, #12
 800c2ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2f0:	4b3b      	ldr	r3, [pc, #236]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <HAL_RCC_GetSysClockFreq+0x34>
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2b0c      	cmp	r3, #12
 800c304:	d121      	bne.n	800c34a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d11e      	bne.n	800c34a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c30c:	4b34      	ldr	r3, [pc, #208]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0308 	and.w	r3, r3, #8
 800c314:	2b00      	cmp	r3, #0
 800c316:	d107      	bne.n	800c328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c318:	4b31      	ldr	r3, [pc, #196]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c31a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c31e:	0a1b      	lsrs	r3, r3, #8
 800c320:	f003 030f 	and.w	r3, r3, #15
 800c324:	61fb      	str	r3, [r7, #28]
 800c326:	e005      	b.n	800c334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c328:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	091b      	lsrs	r3, r3, #4
 800c32e:	f003 030f 	and.w	r3, r3, #15
 800c332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c334:	4a2b      	ldr	r2, [pc, #172]	; (800c3e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c33c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10d      	bne.n	800c360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c348:	e00a      	b.n	800c360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	d102      	bne.n	800c356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c350:	4b25      	ldr	r3, [pc, #148]	; (800c3e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c352:	61bb      	str	r3, [r7, #24]
 800c354:	e004      	b.n	800c360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b08      	cmp	r3, #8
 800c35a:	d101      	bne.n	800c360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c35c:	4b23      	ldr	r3, [pc, #140]	; (800c3ec <HAL_RCC_GetSysClockFreq+0x114>)
 800c35e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2b0c      	cmp	r3, #12
 800c364:	d134      	bne.n	800c3d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c366:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d003      	beq.n	800c37e <HAL_RCC_GetSysClockFreq+0xa6>
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d003      	beq.n	800c384 <HAL_RCC_GetSysClockFreq+0xac>
 800c37c:	e005      	b.n	800c38a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c37e:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c380:	617b      	str	r3, [r7, #20]
      break;
 800c382:	e005      	b.n	800c390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c384:	4b19      	ldr	r3, [pc, #100]	; (800c3ec <HAL_RCC_GetSysClockFreq+0x114>)
 800c386:	617b      	str	r3, [r7, #20]
      break;
 800c388:	e002      	b.n	800c390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	617b      	str	r3, [r7, #20]
      break;
 800c38e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c390:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	091b      	lsrs	r3, r3, #4
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	3301      	adds	r3, #1
 800c39c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c39e:	4b10      	ldr	r3, [pc, #64]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	0a1b      	lsrs	r3, r3, #8
 800c3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	fb02 f203 	mul.w	r2, r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c3b6:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	0e5b      	lsrs	r3, r3, #25
 800c3bc:	f003 0303 	and.w	r3, r3, #3
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3724      	adds	r7, #36	; 0x24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	40021000 	.word	0x40021000
 800c3e4:	080134d8 	.word	0x080134d8
 800c3e8:	00f42400 	.word	0x00f42400
 800c3ec:	00989680 	.word	0x00989680

0800c3f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3f4:	4b03      	ldr	r3, [pc, #12]	; (800c404 <HAL_RCC_GetHCLKFreq+0x14>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	20000008 	.word	0x20000008

0800c408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c40c:	f7ff fff0 	bl	800c3f0 <HAL_RCC_GetHCLKFreq>
 800c410:	4602      	mov	r2, r0
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	0a1b      	lsrs	r3, r3, #8
 800c418:	f003 0307 	and.w	r3, r3, #7
 800c41c:	4904      	ldr	r1, [pc, #16]	; (800c430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c41e:	5ccb      	ldrb	r3, [r1, r3]
 800c420:	f003 031f 	and.w	r3, r3, #31
 800c424:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c428:	4618      	mov	r0, r3
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	40021000 	.word	0x40021000
 800c430:	080134d0 	.word	0x080134d0

0800c434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c438:	f7ff ffda 	bl	800c3f0 <HAL_RCC_GetHCLKFreq>
 800c43c:	4602      	mov	r2, r0
 800c43e:	4b06      	ldr	r3, [pc, #24]	; (800c458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	0adb      	lsrs	r3, r3, #11
 800c444:	f003 0307 	and.w	r3, r3, #7
 800c448:	4904      	ldr	r1, [pc, #16]	; (800c45c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c44a:	5ccb      	ldrb	r3, [r1, r3]
 800c44c:	f003 031f 	and.w	r3, r3, #31
 800c450:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c454:	4618      	mov	r0, r3
 800c456:	bd80      	pop	{r7, pc}
 800c458:	40021000 	.word	0x40021000
 800c45c:	080134d0 	.word	0x080134d0

0800c460 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	220f      	movs	r2, #15
 800c46e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c470:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <HAL_RCC_GetClockConfig+0x5c>)
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	f003 0203 	and.w	r2, r3, #3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c47c:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <HAL_RCC_GetClockConfig+0x5c>)
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c488:	4b0c      	ldr	r3, [pc, #48]	; (800c4bc <HAL_RCC_GetClockConfig+0x5c>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c494:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <HAL_RCC_GetClockConfig+0x5c>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	08db      	lsrs	r3, r3, #3
 800c49a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c4a2:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <HAL_RCC_GetClockConfig+0x60>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0207 	and.w	r2, r3, #7
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	601a      	str	r2, [r3, #0]
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	40021000 	.word	0x40021000
 800c4c0:	40022000 	.word	0x40022000

0800c4c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c4d0:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c4dc:	f7ff f996 	bl	800b80c <HAL_PWREx_GetVoltageRange>
 800c4e0:	6178      	str	r0, [r7, #20]
 800c4e2:	e014      	b.n	800c50e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c4e4:	4b25      	ldr	r3, [pc, #148]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e8:	4a24      	ldr	r2, [pc, #144]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ee:	6593      	str	r3, [r2, #88]	; 0x58
 800c4f0:	4b22      	ldr	r3, [pc, #136]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c4fc:	f7ff f986 	bl	800b80c <HAL_PWREx_GetVoltageRange>
 800c500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c502:	4b1e      	ldr	r3, [pc, #120]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c506:	4a1d      	ldr	r2, [pc, #116]	; (800c57c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c50c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c514:	d10b      	bne.n	800c52e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b80      	cmp	r3, #128	; 0x80
 800c51a:	d919      	bls.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2ba0      	cmp	r3, #160	; 0xa0
 800c520:	d902      	bls.n	800c528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c522:	2302      	movs	r3, #2
 800c524:	613b      	str	r3, [r7, #16]
 800c526:	e013      	b.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c528:	2301      	movs	r3, #1
 800c52a:	613b      	str	r3, [r7, #16]
 800c52c:	e010      	b.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b80      	cmp	r3, #128	; 0x80
 800c532:	d902      	bls.n	800c53a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c534:	2303      	movs	r3, #3
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	e00a      	b.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b80      	cmp	r3, #128	; 0x80
 800c53e:	d102      	bne.n	800c546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c540:	2302      	movs	r3, #2
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	e004      	b.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b70      	cmp	r3, #112	; 0x70
 800c54a:	d101      	bne.n	800c550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c54c:	2301      	movs	r3, #1
 800c54e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c550:	4b0b      	ldr	r3, [pc, #44]	; (800c580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f023 0207 	bic.w	r2, r3, #7
 800c558:	4909      	ldr	r1, [pc, #36]	; (800c580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d001      	beq.n	800c572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	40021000 	.word	0x40021000
 800c580:	40022000 	.word	0x40022000

0800c584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c58c:	2300      	movs	r3, #0
 800c58e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c590:	2300      	movs	r3, #0
 800c592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d031      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c5a8:	d01a      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c5aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c5ae:	d814      	bhi.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c5b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5b8:	d10f      	bne.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c5ba:	4bac      	ldr	r3, [pc, #688]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	4aab      	ldr	r2, [pc, #684]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c5c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c5c6:	e00c      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f9cc 	bl	800c96c <RCCEx_PLLSAI1_Config>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c5d8:	e003      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	74fb      	strb	r3, [r7, #19]
      break;
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c5e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5e2:	7cfb      	ldrb	r3, [r7, #19]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10b      	bne.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c5e8:	4ba0      	ldr	r3, [pc, #640]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f6:	499d      	ldr	r1, [pc, #628]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c5fe:	e001      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c600:	7cfb      	ldrb	r3, [r7, #19]
 800c602:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 8099 	beq.w	800c744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c612:	2300      	movs	r3, #0
 800c614:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c616:	4b95      	ldr	r3, [pc, #596]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c622:	2301      	movs	r3, #1
 800c624:	e000      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c626:	2300      	movs	r3, #0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00d      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c62c:	4b8f      	ldr	r3, [pc, #572]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c630:	4a8e      	ldr	r2, [pc, #568]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c636:	6593      	str	r3, [r2, #88]	; 0x58
 800c638:	4b8c      	ldr	r3, [pc, #560]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c63c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c640:	60bb      	str	r3, [r7, #8]
 800c642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c644:	2301      	movs	r3, #1
 800c646:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c648:	4b89      	ldr	r3, [pc, #548]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a88      	ldr	r2, [pc, #544]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c64e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c652:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c654:	f7fa ffec 	bl	8007630 <HAL_GetTick>
 800c658:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c65a:	e009      	b.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c65c:	f7fa ffe8 	bl	8007630 <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	2b02      	cmp	r3, #2
 800c668:	d902      	bls.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	74fb      	strb	r3, [r7, #19]
        break;
 800c66e:	e005      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c670:	4b7f      	ldr	r3, [pc, #508]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0ef      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c67c:	7cfb      	ldrb	r3, [r7, #19]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d155      	bne.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c682:	4b7a      	ldr	r3, [pc, #488]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c68c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01e      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d019      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c69e:	4b73      	ldr	r3, [pc, #460]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c6aa:	4b70      	ldr	r3, [pc, #448]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b0:	4a6e      	ldr	r2, [pc, #440]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c6ba:	4b6c      	ldr	r3, [pc, #432]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6c0:	4a6a      	ldr	r2, [pc, #424]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c6ca:	4a68      	ldr	r2, [pc, #416]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d016      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6dc:	f7fa ffa8 	bl	8007630 <HAL_GetTick>
 800c6e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6e2:	e00b      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6e4:	f7fa ffa4 	bl	8007630 <HAL_GetTick>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d902      	bls.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c6f6:	2303      	movs	r3, #3
 800c6f8:	74fb      	strb	r3, [r7, #19]
            break;
 800c6fa:	e006      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6fc:	4b5b      	ldr	r3, [pc, #364]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0ec      	beq.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c70a:	7cfb      	ldrb	r3, [r7, #19]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10b      	bne.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c710:	4b56      	ldr	r3, [pc, #344]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c71e:	4953      	ldr	r1, [pc, #332]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c720:	4313      	orrs	r3, r2
 800c722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c726:	e004      	b.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c728:	7cfb      	ldrb	r3, [r7, #19]
 800c72a:	74bb      	strb	r3, [r7, #18]
 800c72c:	e001      	b.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c72e:	7cfb      	ldrb	r3, [r7, #19]
 800c730:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c732:	7c7b      	ldrb	r3, [r7, #17]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d105      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c738:	4b4c      	ldr	r3, [pc, #304]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c73c:	4a4b      	ldr	r2, [pc, #300]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c73e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c742:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0301 	and.w	r3, r3, #1
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00a      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c750:	4b46      	ldr	r3, [pc, #280]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c756:	f023 0203 	bic.w	r2, r3, #3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	4943      	ldr	r1, [pc, #268]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c760:	4313      	orrs	r3, r2
 800c762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00a      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c772:	4b3e      	ldr	r3, [pc, #248]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c778:	f023 020c 	bic.w	r2, r3, #12
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	493a      	ldr	r1, [pc, #232]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00a      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c794:	4b35      	ldr	r3, [pc, #212]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c79a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	4932      	ldr	r1, [pc, #200]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7b6:	4b2d      	ldr	r3, [pc, #180]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	4929      	ldr	r1, [pc, #164]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7d8:	4b24      	ldr	r3, [pc, #144]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	4921      	ldr	r1, [pc, #132]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c7fa:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	4918      	ldr	r1, [pc, #96]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c81c:	4b13      	ldr	r3, [pc, #76]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c822:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82a:	4910      	ldr	r1, [pc, #64]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02c      	beq.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c83e:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c844:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84c:	4907      	ldr	r1, [pc, #28]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c85c:	d10a      	bne.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c85e:	4b03      	ldr	r3, [pc, #12]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	4a02      	ldr	r2, [pc, #8]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c868:	60d3      	str	r3, [r2, #12]
 800c86a:	e015      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800c86c:	40021000 	.word	0x40021000
 800c870:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c87c:	d10c      	bne.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3304      	adds	r3, #4
 800c882:	2101      	movs	r1, #1
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f871 	bl	800c96c <RCCEx_PLLSAI1_Config>
 800c88a:	4603      	mov	r3, r0
 800c88c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c88e:	7cfb      	ldrb	r3, [r7, #19]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800c894:	7cfb      	ldrb	r3, [r7, #19]
 800c896:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d028      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c8a4:	4b30      	ldr	r3, [pc, #192]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	492d      	ldr	r1, [pc, #180]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8c2:	d106      	bne.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c8c4:	4b28      	ldr	r3, [pc, #160]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	4a27      	ldr	r2, [pc, #156]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8ce:	60d3      	str	r3, [r2, #12]
 800c8d0:	e011      	b.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8da:	d10c      	bne.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 f842 	bl	800c96c <RCCEx_PLLSAI1_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c8ec:	7cfb      	ldrb	r3, [r7, #19]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d001      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800c8f2:	7cfb      	ldrb	r3, [r7, #19]
 800c8f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d01c      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c902:	4b19      	ldr	r3, [pc, #100]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c908:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c910:	4915      	ldr	r1, [pc, #84]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c912:	4313      	orrs	r3, r2
 800c914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c91c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c920:	d10c      	bne.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3304      	adds	r3, #4
 800c926:	2102      	movs	r1, #2
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f81f 	bl	800c96c <RCCEx_PLLSAI1_Config>
 800c92e:	4603      	mov	r3, r0
 800c930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c932:	7cfb      	ldrb	r3, [r7, #19]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c938:	7cfb      	ldrb	r3, [r7, #19]
 800c93a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00a      	beq.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c94e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c956:	4904      	ldr	r1, [pc, #16]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c95e:	7cbb      	ldrb	r3, [r7, #18]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	40021000 	.word	0x40021000

0800c96c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c97a:	4b74      	ldr	r3, [pc, #464]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f003 0303 	and.w	r3, r3, #3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d018      	beq.n	800c9b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c986:	4b71      	ldr	r3, [pc, #452]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f003 0203 	and.w	r2, r3, #3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	429a      	cmp	r2, r3
 800c994:	d10d      	bne.n	800c9b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
       ||
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d009      	beq.n	800c9b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c99e:	4b6b      	ldr	r3, [pc, #428]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	091b      	lsrs	r3, r3, #4
 800c9a4:	f003 0307 	and.w	r3, r3, #7
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
       ||
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d047      	beq.n	800ca42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	73fb      	strb	r3, [r7, #15]
 800c9b6:	e044      	b.n	800ca42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d018      	beq.n	800c9f2 <RCCEx_PLLSAI1_Config+0x86>
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d825      	bhi.n	800ca10 <RCCEx_PLLSAI1_Config+0xa4>
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d002      	beq.n	800c9ce <RCCEx_PLLSAI1_Config+0x62>
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d009      	beq.n	800c9e0 <RCCEx_PLLSAI1_Config+0x74>
 800c9cc:	e020      	b.n	800ca10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c9ce:	4b5f      	ldr	r3, [pc, #380]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d11d      	bne.n	800ca16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9de:	e01a      	b.n	800ca16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c9e0:	4b5a      	ldr	r3, [pc, #360]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d116      	bne.n	800ca1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9f0:	e013      	b.n	800ca1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c9f2:	4b56      	ldr	r3, [pc, #344]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10f      	bne.n	800ca1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c9fe:	4b53      	ldr	r3, [pc, #332]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d109      	bne.n	800ca1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca0e:	e006      	b.n	800ca1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
      break;
 800ca14:	e004      	b.n	800ca20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ca16:	bf00      	nop
 800ca18:	e002      	b.n	800ca20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ca1a:	bf00      	nop
 800ca1c:	e000      	b.n	800ca20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ca1e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10d      	bne.n	800ca42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ca26:	4b49      	ldr	r3, [pc, #292]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6819      	ldr	r1, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	430b      	orrs	r3, r1
 800ca3c:	4943      	ldr	r1, [pc, #268]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d17c      	bne.n	800cb42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ca48:	4b40      	ldr	r3, [pc, #256]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a3f      	ldr	r2, [pc, #252]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca54:	f7fa fdec 	bl	8007630 <HAL_GetTick>
 800ca58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ca5a:	e009      	b.n	800ca70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ca5c:	f7fa fde8 	bl	8007630 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d902      	bls.n	800ca70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	73fb      	strb	r3, [r7, #15]
        break;
 800ca6e:	e005      	b.n	800ca7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ca70:	4b36      	ldr	r3, [pc, #216]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1ef      	bne.n	800ca5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d15f      	bne.n	800cb42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d110      	bne.n	800caaa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ca88:	4b30      	ldr	r3, [pc, #192]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ca90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	6892      	ldr	r2, [r2, #8]
 800ca98:	0211      	lsls	r1, r2, #8
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	68d2      	ldr	r2, [r2, #12]
 800ca9e:	06d2      	lsls	r2, r2, #27
 800caa0:	430a      	orrs	r2, r1
 800caa2:	492a      	ldr	r1, [pc, #168]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800caa4:	4313      	orrs	r3, r2
 800caa6:	610b      	str	r3, [r1, #16]
 800caa8:	e027      	b.n	800cafa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d112      	bne.n	800cad6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cab0:	4b26      	ldr	r3, [pc, #152]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cab8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6892      	ldr	r2, [r2, #8]
 800cac0:	0211      	lsls	r1, r2, #8
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	6912      	ldr	r2, [r2, #16]
 800cac6:	0852      	lsrs	r2, r2, #1
 800cac8:	3a01      	subs	r2, #1
 800caca:	0552      	lsls	r2, r2, #21
 800cacc:	430a      	orrs	r2, r1
 800cace:	491f      	ldr	r1, [pc, #124]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	610b      	str	r3, [r1, #16]
 800cad4:	e011      	b.n	800cafa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cad6:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6892      	ldr	r2, [r2, #8]
 800cae6:	0211      	lsls	r1, r2, #8
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6952      	ldr	r2, [r2, #20]
 800caec:	0852      	lsrs	r2, r2, #1
 800caee:	3a01      	subs	r2, #1
 800caf0:	0652      	lsls	r2, r2, #25
 800caf2:	430a      	orrs	r2, r1
 800caf4:	4915      	ldr	r1, [pc, #84]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cafa:	4b14      	ldr	r3, [pc, #80]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a13      	ldr	r2, [pc, #76]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb06:	f7fa fd93 	bl	8007630 <HAL_GetTick>
 800cb0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cb0c:	e009      	b.n	800cb22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cb0e:	f7fa fd8f 	bl	8007630 <HAL_GetTick>
 800cb12:	4602      	mov	r2, r0
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d902      	bls.n	800cb22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	73fb      	strb	r3, [r7, #15]
          break;
 800cb20:	e005      	b.n	800cb2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cb22:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0ef      	beq.n	800cb0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d106      	bne.n	800cb42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb36:	691a      	ldr	r2, [r3, #16]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	4903      	ldr	r1, [pc, #12]	; (800cb4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	40021000 	.word	0x40021000

0800cb50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d06c      	beq.n	800cc3c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d106      	bne.n	800cb7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7f8 fe06 	bl	8005788 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	22ca      	movs	r2, #202	; 0xca
 800cb8a:	625a      	str	r2, [r3, #36]	; 0x24
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2253      	movs	r2, #83	; 0x53
 800cb92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f87c 	bl	800cc92 <RTC_EnterInitMode>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d14b      	bne.n	800cc3c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	6812      	ldr	r2, [r2, #0]
 800cbae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbb6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6899      	ldr	r1, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	431a      	orrs	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68d2      	ldr	r2, [r2, #12]
 800cbde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6919      	ldr	r1, [r3, #16]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	041a      	lsls	r2, r3, #16
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	430a      	orrs	r2, r1
 800cbf2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f87f 	bl	800ccf8 <RTC_ExitInitMode>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d11b      	bne.n	800cc3c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f022 0203 	bic.w	r2, r2, #3
 800cc12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69da      	ldr	r2, [r3, #28]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	22ff      	movs	r2, #255	; 0xff
 800cc32:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b084      	sub	sp, #16
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cc5c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800cc5e:	f7fa fce7 	bl	8007630 <HAL_GetTick>
 800cc62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc64:	e009      	b.n	800cc7a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc66:	f7fa fce3 	bl	8007630 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc74:	d901      	bls.n	800cc7a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e007      	b.n	800cc8a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f003 0320 	and.w	r3, r3, #32
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d0ee      	beq.n	800cc66 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b084      	sub	sp, #16
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d120      	bne.n	800ccee <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ccb6:	f7fa fcbb 	bl	8007630 <HAL_GetTick>
 800ccba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ccbc:	e00d      	b.n	800ccda <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ccbe:	f7fa fcb7 	bl	8007630 <HAL_GetTick>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cccc:	d905      	bls.n	800ccda <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <RTC_EnterInitMode+0x5c>
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d1e7      	bne.n	800ccbe <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cd04:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	4a19      	ldr	r2, [pc, #100]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd0e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cd10:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f003 0320 	and.w	r3, r3, #32
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10c      	bne.n	800cd36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff ff92 	bl	800cc46 <HAL_RTC_WaitForSynchro>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d01e      	beq.n	800cd66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	73fb      	strb	r3, [r7, #15]
 800cd34:	e017      	b.n	800cd66 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd36:	4b0e      	ldr	r3, [pc, #56]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd3c:	f023 0320 	bic.w	r3, r3, #32
 800cd40:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff ff7f 	bl	800cc46 <HAL_RTC_WaitForSynchro>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d005      	beq.n	800cd5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2203      	movs	r2, #3
 800cd52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd5a:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	4a04      	ldr	r2, [pc, #16]	; (800cd70 <RTC_ExitInitMode+0x78>)
 800cd60:	f043 0320 	orr.w	r3, r3, #32
 800cd64:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	40002800 	.word	0x40002800

0800cd74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e095      	b.n	800ceb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d108      	bne.n	800cda0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd96:	d009      	beq.n	800cdac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	61da      	str	r2, [r3, #28]
 800cd9e:	e005      	b.n	800cdac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7f8 fd4c 	bl	8005864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cde2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdec:	d902      	bls.n	800cdf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	e002      	b.n	800cdfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cdf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ce02:	d007      	beq.n	800ce14 <HAL_SPI_Init+0xa0>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce0c:	d002      	beq.n	800ce14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ce24:	431a      	orrs	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	695b      	ldr	r3, [r3, #20]
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce56:	ea42 0103 	orr.w	r1, r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	0c1b      	lsrs	r3, r3, #16
 800ce70:	f003 0204 	and.w	r2, r3, #4
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	431a      	orrs	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ce90:	ea42 0103 	orr.w	r1, r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e049      	b.n	800cf60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d106      	bne.n	800cee6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f841 	bl	800cf68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2202      	movs	r2, #2
 800ceea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f000 fc27 	bl	800d74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d001      	beq.n	800cf94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e03b      	b.n	800d00c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2202      	movs	r2, #2
 800cf98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f042 0201 	orr.w	r2, r2, #1
 800cfaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a19      	ldr	r2, [pc, #100]	; (800d018 <HAL_TIM_Base_Start_IT+0x9c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d009      	beq.n	800cfca <HAL_TIM_Base_Start_IT+0x4e>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfbe:	d004      	beq.n	800cfca <HAL_TIM_Base_Start_IT+0x4e>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a15      	ldr	r2, [pc, #84]	; (800d01c <HAL_TIM_Base_Start_IT+0xa0>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d115      	bne.n	800cff6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	689a      	ldr	r2, [r3, #8]
 800cfd0:	4b13      	ldr	r3, [pc, #76]	; (800d020 <HAL_TIM_Base_Start_IT+0xa4>)
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b06      	cmp	r3, #6
 800cfda:	d015      	beq.n	800d008 <HAL_TIM_Base_Start_IT+0x8c>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfe2:	d011      	beq.n	800d008 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f042 0201 	orr.w	r2, r2, #1
 800cff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cff4:	e008      	b.n	800d008 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f042 0201 	orr.w	r2, r2, #1
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e000      	b.n	800d00a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	40012c00 	.word	0x40012c00
 800d01c:	40014000 	.word	0x40014000
 800d020:	00010007 	.word	0x00010007

0800d024 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e049      	b.n	800d0ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7f8 fe9e 	bl	8005d8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2202      	movs	r2, #2
 800d054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3304      	adds	r3, #4
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f000 fb72 	bl	800d74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d104      	bne.n	800d0ee <HAL_TIM_IC_Start_IT+0x1a>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	e023      	b.n	800d136 <HAL_TIM_IC_Start_IT+0x62>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	d104      	bne.n	800d0fe <HAL_TIM_IC_Start_IT+0x2a>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	e01b      	b.n	800d136 <HAL_TIM_IC_Start_IT+0x62>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b08      	cmp	r3, #8
 800d102:	d104      	bne.n	800d10e <HAL_TIM_IC_Start_IT+0x3a>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	e013      	b.n	800d136 <HAL_TIM_IC_Start_IT+0x62>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b0c      	cmp	r3, #12
 800d112:	d104      	bne.n	800d11e <HAL_TIM_IC_Start_IT+0x4a>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	e00b      	b.n	800d136 <HAL_TIM_IC_Start_IT+0x62>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b10      	cmp	r3, #16
 800d122:	d104      	bne.n	800d12e <HAL_TIM_IC_Start_IT+0x5a>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	e003      	b.n	800d136 <HAL_TIM_IC_Start_IT+0x62>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d134:	b2db      	uxtb	r3, r3
 800d136:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d104      	bne.n	800d148 <HAL_TIM_IC_Start_IT+0x74>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d144:	b2db      	uxtb	r3, r3
 800d146:	e013      	b.n	800d170 <HAL_TIM_IC_Start_IT+0x9c>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d104      	bne.n	800d158 <HAL_TIM_IC_Start_IT+0x84>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d154:	b2db      	uxtb	r3, r3
 800d156:	e00b      	b.n	800d170 <HAL_TIM_IC_Start_IT+0x9c>
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	2b08      	cmp	r3, #8
 800d15c:	d104      	bne.n	800d168 <HAL_TIM_IC_Start_IT+0x94>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d164:	b2db      	uxtb	r3, r3
 800d166:	e003      	b.n	800d170 <HAL_TIM_IC_Start_IT+0x9c>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d172:	7bfb      	ldrb	r3, [r7, #15]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d102      	bne.n	800d17e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d178:	7bbb      	ldrb	r3, [r7, #14]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d001      	beq.n	800d182 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e0c4      	b.n	800d30c <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d104      	bne.n	800d192 <HAL_TIM_IC_Start_IT+0xbe>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d190:	e023      	b.n	800d1da <HAL_TIM_IC_Start_IT+0x106>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b04      	cmp	r3, #4
 800d196:	d104      	bne.n	800d1a2 <HAL_TIM_IC_Start_IT+0xce>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1a0:	e01b      	b.n	800d1da <HAL_TIM_IC_Start_IT+0x106>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d104      	bne.n	800d1b2 <HAL_TIM_IC_Start_IT+0xde>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1b0:	e013      	b.n	800d1da <HAL_TIM_IC_Start_IT+0x106>
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b0c      	cmp	r3, #12
 800d1b6:	d104      	bne.n	800d1c2 <HAL_TIM_IC_Start_IT+0xee>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1c0:	e00b      	b.n	800d1da <HAL_TIM_IC_Start_IT+0x106>
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b10      	cmp	r3, #16
 800d1c6:	d104      	bne.n	800d1d2 <HAL_TIM_IC_Start_IT+0xfe>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1d0:	e003      	b.n	800d1da <HAL_TIM_IC_Start_IT+0x106>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d104      	bne.n	800d1ea <HAL_TIM_IC_Start_IT+0x116>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1e8:	e013      	b.n	800d212 <HAL_TIM_IC_Start_IT+0x13e>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d104      	bne.n	800d1fa <HAL_TIM_IC_Start_IT+0x126>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1f8:	e00b      	b.n	800d212 <HAL_TIM_IC_Start_IT+0x13e>
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b08      	cmp	r3, #8
 800d1fe:	d104      	bne.n	800d20a <HAL_TIM_IC_Start_IT+0x136>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d208:	e003      	b.n	800d212 <HAL_TIM_IC_Start_IT+0x13e>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b0c      	cmp	r3, #12
 800d216:	d841      	bhi.n	800d29c <HAL_TIM_IC_Start_IT+0x1c8>
 800d218:	a201      	add	r2, pc, #4	; (adr r2, 800d220 <HAL_TIM_IC_Start_IT+0x14c>)
 800d21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21e:	bf00      	nop
 800d220:	0800d255 	.word	0x0800d255
 800d224:	0800d29d 	.word	0x0800d29d
 800d228:	0800d29d 	.word	0x0800d29d
 800d22c:	0800d29d 	.word	0x0800d29d
 800d230:	0800d267 	.word	0x0800d267
 800d234:	0800d29d 	.word	0x0800d29d
 800d238:	0800d29d 	.word	0x0800d29d
 800d23c:	0800d29d 	.word	0x0800d29d
 800d240:	0800d279 	.word	0x0800d279
 800d244:	0800d29d 	.word	0x0800d29d
 800d248:	0800d29d 	.word	0x0800d29d
 800d24c:	0800d29d 	.word	0x0800d29d
 800d250:	0800d28b 	.word	0x0800d28b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68da      	ldr	r2, [r3, #12]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f042 0202 	orr.w	r2, r2, #2
 800d262:	60da      	str	r2, [r3, #12]
      break;
 800d264:	e01b      	b.n	800d29e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0204 	orr.w	r2, r2, #4
 800d274:	60da      	str	r2, [r3, #12]
      break;
 800d276:	e012      	b.n	800d29e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f042 0208 	orr.w	r2, r2, #8
 800d286:	60da      	str	r2, [r3, #12]
      break;
 800d288:	e009      	b.n	800d29e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68da      	ldr	r2, [r3, #12]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f042 0210 	orr.w	r2, r2, #16
 800d298:	60da      	str	r2, [r3, #12]
      break;
 800d29a:	e000      	b.n	800d29e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800d29c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 fbc0 	bl	800da2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a18      	ldr	r2, [pc, #96]	; (800d314 <HAL_TIM_IC_Start_IT+0x240>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d009      	beq.n	800d2ca <HAL_TIM_IC_Start_IT+0x1f6>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2be:	d004      	beq.n	800d2ca <HAL_TIM_IC_Start_IT+0x1f6>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a14      	ldr	r2, [pc, #80]	; (800d318 <HAL_TIM_IC_Start_IT+0x244>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d115      	bne.n	800d2f6 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	4b12      	ldr	r3, [pc, #72]	; (800d31c <HAL_TIM_IC_Start_IT+0x248>)
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b06      	cmp	r3, #6
 800d2da:	d015      	beq.n	800d308 <HAL_TIM_IC_Start_IT+0x234>
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e2:	d011      	beq.n	800d308 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0201 	orr.w	r2, r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f4:	e008      	b.n	800d308 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f042 0201 	orr.w	r2, r2, #1
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	e000      	b.n	800d30a <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	40012c00 	.word	0x40012c00
 800d318:	40014000 	.word	0x40014000
 800d31c:	00010007 	.word	0x00010007

0800d320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	f003 0302 	and.w	r3, r3, #2
 800d332:	2b02      	cmp	r3, #2
 800d334:	d122      	bne.n	800d37c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	2b02      	cmp	r3, #2
 800d342:	d11b      	bne.n	800d37c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f06f 0202 	mvn.w	r2, #2
 800d34c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d003      	beq.n	800d36a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7f8 fdae 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 800d368:	e005      	b.n	800d376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f9d0 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f9d7 	bl	800d724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	f003 0304 	and.w	r3, r3, #4
 800d386:	2b04      	cmp	r3, #4
 800d388:	d122      	bne.n	800d3d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b04      	cmp	r3, #4
 800d396:	d11b      	bne.n	800d3d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f06f 0204 	mvn.w	r2, #4
 800d3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f8 fd84 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 800d3bc:	e005      	b.n	800d3ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f9a6 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f9ad 	bl	800d724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	f003 0308 	and.w	r3, r3, #8
 800d3da:	2b08      	cmp	r3, #8
 800d3dc:	d122      	bne.n	800d424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f003 0308 	and.w	r3, r3, #8
 800d3e8:	2b08      	cmp	r3, #8
 800d3ea:	d11b      	bne.n	800d424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f06f 0208 	mvn.w	r2, #8
 800d3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2204      	movs	r2, #4
 800d3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	f003 0303 	and.w	r3, r3, #3
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7f8 fd5a 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 800d410:	e005      	b.n	800d41e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f97c 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f983 	bl	800d724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	f003 0310 	and.w	r3, r3, #16
 800d42e:	2b10      	cmp	r3, #16
 800d430:	d122      	bne.n	800d478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	f003 0310 	and.w	r3, r3, #16
 800d43c:	2b10      	cmp	r3, #16
 800d43e:	d11b      	bne.n	800d478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f06f 0210 	mvn.w	r2, #16
 800d448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2208      	movs	r2, #8
 800d44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7f8 fd30 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 800d464:	e005      	b.n	800d472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f952 	bl	800d710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f959 	bl	800d724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	691b      	ldr	r3, [r3, #16]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b01      	cmp	r3, #1
 800d484:	d10e      	bne.n	800d4a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b01      	cmp	r3, #1
 800d492:	d107      	bne.n	800d4a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f06f 0201 	mvn.w	r2, #1
 800d49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7f8 f932 	bl	8005708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ae:	2b80      	cmp	r3, #128	; 0x80
 800d4b0:	d10e      	bne.n	800d4d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4bc:	2b80      	cmp	r3, #128	; 0x80
 800d4be:	d107      	bne.n	800d4d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fb44 	bl	800db58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4de:	d10e      	bne.n	800d4fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ea:	2b80      	cmp	r3, #128	; 0x80
 800d4ec:	d107      	bne.n	800d4fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fb37 	bl	800db6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d508:	2b40      	cmp	r3, #64	; 0x40
 800d50a:	d10e      	bne.n	800d52a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d516:	2b40      	cmp	r3, #64	; 0x40
 800d518:	d107      	bne.n	800d52a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f907 	bl	800d738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	f003 0320 	and.w	r3, r3, #32
 800d534:	2b20      	cmp	r3, #32
 800d536:	d10e      	bne.n	800d556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	2b20      	cmp	r3, #32
 800d544:	d107      	bne.n	800d556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f06f 0220 	mvn.w	r2, #32
 800d54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 faf7 	bl	800db44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d570:	2b01      	cmp	r3, #1
 800d572:	d101      	bne.n	800d578 <HAL_TIM_IC_ConfigChannel+0x1a>
 800d574:	2302      	movs	r3, #2
 800d576:	e082      	b.n	800d67e <HAL_TIM_IC_ConfigChannel+0x120>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d11b      	bne.n	800d5be <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6819      	ldr	r1, [r3, #0]
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f000 f93d 	bl	800d814 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f022 020c 	bic.w	r2, r2, #12
 800d5a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6999      	ldr	r1, [r3, #24]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	619a      	str	r2, [r3, #24]
 800d5bc:	e05a      	b.n	800d674 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	d11c      	bne.n	800d5fe <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	6819      	ldr	r1, [r3, #0]
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f000 f974 	bl	800d8c0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	699a      	ldr	r2, [r3, #24]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d5e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6999      	ldr	r1, [r3, #24]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	021a      	lsls	r2, r3, #8
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	430a      	orrs	r2, r1
 800d5fa:	619a      	str	r2, [r3, #24]
 800d5fc:	e03a      	b.n	800d674 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b08      	cmp	r3, #8
 800d602:	d11b      	bne.n	800d63c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6818      	ldr	r0, [r3, #0]
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	6819      	ldr	r1, [r3, #0]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	685a      	ldr	r2, [r3, #4]
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	f000 f991 	bl	800d93a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	69da      	ldr	r2, [r3, #28]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f022 020c 	bic.w	r2, r2, #12
 800d626:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	69d9      	ldr	r1, [r3, #28]
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	61da      	str	r2, [r3, #28]
 800d63a:	e01b      	b.n	800d674 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6818      	ldr	r0, [r3, #0]
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6819      	ldr	r1, [r3, #0]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	f000 f9b1 	bl	800d9b2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	69da      	ldr	r2, [r3, #28]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d65e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	69d9      	ldr	r1, [r3, #28]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	021a      	lsls	r2, r3, #8
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	430a      	orrs	r2, r1
 800d672:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b0c      	cmp	r3, #12
 800d69a:	d831      	bhi.n	800d700 <HAL_TIM_ReadCapturedValue+0x78>
 800d69c:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d6d9 	.word	0x0800d6d9
 800d6a8:	0800d701 	.word	0x0800d701
 800d6ac:	0800d701 	.word	0x0800d701
 800d6b0:	0800d701 	.word	0x0800d701
 800d6b4:	0800d6e3 	.word	0x0800d6e3
 800d6b8:	0800d701 	.word	0x0800d701
 800d6bc:	0800d701 	.word	0x0800d701
 800d6c0:	0800d701 	.word	0x0800d701
 800d6c4:	0800d6ed 	.word	0x0800d6ed
 800d6c8:	0800d701 	.word	0x0800d701
 800d6cc:	0800d701 	.word	0x0800d701
 800d6d0:	0800d701 	.word	0x0800d701
 800d6d4:	0800d6f7 	.word	0x0800d6f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6de:	60fb      	str	r3, [r7, #12]

      break;
 800d6e0:	e00f      	b.n	800d702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e8:	60fb      	str	r3, [r7, #12]

      break;
 800d6ea:	e00a      	b.n	800d702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f2:	60fb      	str	r3, [r7, #12]

      break;
 800d6f4:	e005      	b.n	800d702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fc:	60fb      	str	r3, [r7, #12]

      break;
 800d6fe:	e000      	b.n	800d702 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d700:	bf00      	nop
  }

  return tmpreg;
 800d702:	68fb      	ldr	r3, [r7, #12]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a2a      	ldr	r2, [pc, #168]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d003      	beq.n	800d76c <TIM_Base_SetConfig+0x20>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d76a:	d108      	bne.n	800d77e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a21      	ldr	r2, [pc, #132]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d00b      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78c:	d007      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a1e      	ldr	r2, [pc, #120]	; (800d80c <TIM_Base_SetConfig+0xc0>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d003      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a1d      	ldr	r2, [pc, #116]	; (800d810 <TIM_Base_SetConfig+0xc4>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d108      	bne.n	800d7b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a0c      	ldr	r2, [pc, #48]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d007      	beq.n	800d7ec <TIM_Base_SetConfig+0xa0>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a0b      	ldr	r2, [pc, #44]	; (800d80c <TIM_Base_SetConfig+0xc0>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d003      	beq.n	800d7ec <TIM_Base_SetConfig+0xa0>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a0a      	ldr	r2, [pc, #40]	; (800d810 <TIM_Base_SetConfig+0xc4>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d103      	bne.n	800d7f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	691a      	ldr	r2, [r3, #16]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	615a      	str	r2, [r3, #20]
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40012c00 	.word	0x40012c00
 800d80c:	40014000 	.word	0x40014000
 800d810:	40014400 	.word	0x40014400

0800d814 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d814:	b480      	push	{r7}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	f023 0201 	bic.w	r2, r3, #1
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6a1b      	ldr	r3, [r3, #32]
 800d838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	4a1e      	ldr	r2, [pc, #120]	; (800d8b8 <TIM_TI1_SetConfig+0xa4>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d007      	beq.n	800d852 <TIM_TI1_SetConfig+0x3e>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d848:	d003      	beq.n	800d852 <TIM_TI1_SetConfig+0x3e>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	4a1b      	ldr	r2, [pc, #108]	; (800d8bc <TIM_TI1_SetConfig+0xa8>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d101      	bne.n	800d856 <TIM_TI1_SetConfig+0x42>
 800d852:	2301      	movs	r3, #1
 800d854:	e000      	b.n	800d858 <TIM_TI1_SetConfig+0x44>
 800d856:	2300      	movs	r3, #0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d008      	beq.n	800d86e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	f023 0303 	bic.w	r3, r3, #3
 800d862:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4313      	orrs	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]
 800d86c:	e003      	b.n	800d876 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f043 0301 	orr.w	r3, r3, #1
 800d874:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d87c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	011b      	lsls	r3, r3, #4
 800d882:	b2db      	uxtb	r3, r3
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	4313      	orrs	r3, r2
 800d888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	f023 030a 	bic.w	r3, r3, #10
 800d890:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f003 030a 	and.w	r3, r3, #10
 800d898:	693a      	ldr	r2, [r7, #16]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	621a      	str	r2, [r3, #32]
}
 800d8aa:	bf00      	nop
 800d8ac:	371c      	adds	r7, #28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	40012c00 	.word	0x40012c00
 800d8bc:	40014000 	.word	0x40014000

0800d8c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b087      	sub	sp, #28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	f023 0210 	bic.w	r2, r3, #16
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	031b      	lsls	r3, r3, #12
 800d904:	b29b      	uxth	r3, r3
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	4313      	orrs	r3, r2
 800d90a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d912:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	4313      	orrs	r3, r2
 800d920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	621a      	str	r2, [r3, #32]
}
 800d92e:	bf00      	nop
 800d930:	371c      	adds	r7, #28
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d93a:	b480      	push	{r7}
 800d93c:	b087      	sub	sp, #28
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	60b9      	str	r1, [r7, #8]
 800d944:	607a      	str	r2, [r7, #4]
 800d946:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	69db      	ldr	r3, [r3, #28]
 800d958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d976:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	011b      	lsls	r3, r3, #4
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	4313      	orrs	r3, r2
 800d982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d98a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	4313      	orrs	r3, r2
 800d998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	621a      	str	r2, [r3, #32]
}
 800d9a6:	bf00      	nop
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	607a      	str	r2, [r7, #4]
 800d9be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	021b      	lsls	r3, r3, #8
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	031b      	lsls	r3, r3, #12
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800da04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	031b      	lsls	r3, r3, #12
 800da0a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4313      	orrs	r3, r2
 800da12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	621a      	str	r2, [r3, #32]
}
 800da20:	bf00      	nop
 800da22:	371c      	adds	r7, #28
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b087      	sub	sp, #28
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	f003 031f 	and.w	r3, r3, #31
 800da3e:	2201      	movs	r2, #1
 800da40:	fa02 f303 	lsl.w	r3, r2, r3
 800da44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6a1a      	ldr	r2, [r3, #32]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	43db      	mvns	r3, r3
 800da4e:	401a      	ands	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6a1a      	ldr	r2, [r3, #32]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	f003 031f 	and.w	r3, r3, #31
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	fa01 f303 	lsl.w	r3, r1, r3
 800da64:	431a      	orrs	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	621a      	str	r2, [r3, #32]
}
 800da6a:	bf00      	nop
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d101      	bne.n	800da90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e04f      	b.n	800db30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a21      	ldr	r2, [pc, #132]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d108      	bne.n	800dacc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a14      	ldr	r2, [pc, #80]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d009      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daf8:	d004      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a10      	ldr	r2, [pc, #64]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d10c      	bne.n	800db1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	4313      	orrs	r3, r2
 800db14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	40012c00 	.word	0x40012c00
 800db40:	40014000 	.word	0x40014000

0800db44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e040      	b.n	800dc14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7f8 fc16 	bl	80063d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2224      	movs	r2, #36	; 0x24
 800dbac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f022 0201 	bic.w	r2, r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fc38 	bl	800e434 <UART_SetConfig>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d101      	bne.n	800dbce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e022      	b.n	800dc14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d002      	beq.n	800dbdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fe38 	bl	800e84c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dbea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dbfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f042 0201 	orr.w	r2, r2, #1
 800dc0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 febf 	bl	800e990 <UART_CheckIdleState>
 800dc12:	4603      	mov	r3, r0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e02b      	b.n	800dc86 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2224      	movs	r2, #36	; 0x24
 800dc32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 0201 	bic.w	r2, r2, #1
 800dc42:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2200      	movs	r2, #0
 800dc52:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7f8 fc7d 	bl	800655c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dca2:	2b20      	cmp	r3, #32
 800dca4:	d145      	bne.n	800dd32 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d002      	beq.n	800dcb2 <HAL_UART_Transmit_IT+0x22>
 800dcac:	88fb      	ldrh	r3, [r7, #6]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e03e      	b.n	800dd34 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d101      	bne.n	800dcc4 <HAL_UART_Transmit_IT+0x34>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	e037      	b.n	800dd34 <HAL_UART_Transmit_IT+0xa4>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	88fa      	ldrh	r2, [r7, #6]
 800dcd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	88fa      	ldrh	r2, [r7, #6]
 800dcde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2221      	movs	r2, #33	; 0x21
 800dcf4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcfe:	d107      	bne.n	800dd10 <HAL_UART_Transmit_IT+0x80>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4a0d      	ldr	r2, [pc, #52]	; (800dd40 <HAL_UART_Transmit_IT+0xb0>)
 800dd0c:	669a      	str	r2, [r3, #104]	; 0x68
 800dd0e:	e002      	b.n	800dd16 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4a0c      	ldr	r2, [pc, #48]	; (800dd44 <HAL_UART_Transmit_IT+0xb4>)
 800dd14:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e000      	b.n	800dd34 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800dd32:	2302      	movs	r3, #2
  }
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	0800eda1 	.word	0x0800eda1
 800dd44:	0800ed2d 	.word	0x0800ed2d

0800dd48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	4613      	mov	r3, r2
 800dd54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd5a:	2b20      	cmp	r3, #32
 800dd5c:	d131      	bne.n	800ddc2 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <HAL_UART_Receive_IT+0x22>
 800dd64:	88fb      	ldrh	r3, [r7, #6]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e02a      	b.n	800ddc4 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d101      	bne.n	800dd7c <HAL_UART_Receive_IT+0x34>
 800dd78:	2302      	movs	r3, #2
 800dd7a:	e023      	b.n	800ddc4 <HAL_UART_Receive_IT+0x7c>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a0f      	ldr	r2, [pc, #60]	; (800ddcc <HAL_UART_Receive_IT+0x84>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d00e      	beq.n	800ddb2 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d007      	beq.n	800ddb2 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ddb0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 feaf 	bl	800eb1c <UART_Start_Receive_IT>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	e000      	b.n	800ddc4 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800ddc2:	2302      	movs	r3, #2
  }
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	40008000 	.word	0x40008000

0800ddd0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800dde6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf2:	2b80      	cmp	r3, #128	; 0x80
 800ddf4:	d12d      	bne.n	800de52 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	689a      	ldr	r2, [r3, #8]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de04:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d013      	beq.n	800de36 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de12:	4a19      	ldr	r2, [pc, #100]	; (800de78 <HAL_UART_AbortTransmit_IT+0xa8>)
 800de14:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fb fae4 	bl	80093e8 <HAL_DMA_Abort_IT>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d022      	beq.n	800de6c <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800de30:	4610      	mov	r0, r2
 800de32:	4798      	blx	r3
 800de34:	e01a      	b.n	800de6c <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2220      	movs	r2, #32
 800de48:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fa9a 	bl	800e384 <HAL_UART_AbortTransmitCpltCallback>
 800de50:	e00c      	b.n	800de6c <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2220      	movs	r2, #32
 800de64:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa8c 	bl	800e384 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	0800ecb7 	.word	0x0800ecb7

0800de7c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	689a      	ldr	r2, [r3, #8]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f022 0201 	bic.w	r2, r2, #1
 800dea2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d107      	bne.n	800debc <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0210 	bic.w	r2, r2, #16
 800deba:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec6:	2b40      	cmp	r3, #64	; 0x40
 800dec8:	d13e      	bne.n	800df48 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ded8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d013      	beq.n	800df0a <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dee6:	4a25      	ldr	r2, [pc, #148]	; (800df7c <HAL_UART_AbortReceive_IT+0x100>)
 800dee8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deee:	4618      	mov	r0, r3
 800def0:	f7fb fa7a 	bl	80093e8 <HAL_DMA_Abort_IT>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d03a      	beq.n	800df70 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800df04:	4610      	mov	r0, r2
 800df06:	4798      	blx	r3
 800df08:	e032      	b.n	800df70 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	220f      	movs	r2, #15
 800df1e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	8b1b      	ldrh	r3, [r3, #24]
 800df26:	b29a      	uxth	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f042 0208 	orr.w	r2, r2, #8
 800df30:	b292      	uxth	r2, r2
 800df32:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2220      	movs	r2, #32
 800df38:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fa29 	bl	800e398 <HAL_UART_AbortReceiveCpltCallback>
 800df46:	e013      	b.n	800df70 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	220f      	movs	r2, #15
 800df5c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2220      	movs	r2, #32
 800df62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 fa14 	bl	800e398 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	0800ece1 	.word	0x0800ece1

0800df80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	f640 030f 	movw	r3, #2063	; 0x80f
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d113      	bne.n	800dfd8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00e      	beq.n	800dfd8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	f003 0320 	and.w	r3, r3, #32
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d009      	beq.n	800dfd8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 81ce 	beq.w	800e36a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	4798      	blx	r3
      }
      return;
 800dfd6:	e1c8      	b.n	800e36a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 80e3 	beq.w	800e1a6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f003 0301 	and.w	r3, r3, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d105      	bne.n	800dff6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dfea:	69ba      	ldr	r2, [r7, #24]
 800dfec:	4ba6      	ldr	r3, [pc, #664]	; (800e288 <HAL_UART_IRQHandler+0x308>)
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 80d8 	beq.w	800e1a6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d010      	beq.n	800e022 <HAL_UART_IRQHandler+0xa2>
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00b      	beq.n	800e022 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2201      	movs	r2, #1
 800e010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e018:	f043 0201 	orr.w	r2, r3, #1
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f003 0302 	and.w	r3, r3, #2
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d010      	beq.n	800e04e <HAL_UART_IRQHandler+0xce>
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00b      	beq.n	800e04e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2202      	movs	r2, #2
 800e03c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e044:	f043 0204 	orr.w	r2, r3, #4
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	2b00      	cmp	r3, #0
 800e056:	d010      	beq.n	800e07a <HAL_UART_IRQHandler+0xfa>
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2204      	movs	r2, #4
 800e068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e070:	f043 0202 	orr.w	r2, r3, #2
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	f003 0308 	and.w	r3, r3, #8
 800e080:	2b00      	cmp	r3, #0
 800e082:	d015      	beq.n	800e0b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	f003 0320 	and.w	r3, r3, #32
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d104      	bne.n	800e098 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00b      	beq.n	800e0b0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2208      	movs	r2, #8
 800e09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0a6:	f043 0208 	orr.w	r2, r3, #8
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d011      	beq.n	800e0de <HAL_UART_IRQHandler+0x15e>
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00c      	beq.n	800e0de <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d4:	f043 0220 	orr.w	r2, r3, #32
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 8142 	beq.w	800e36e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	f003 0320 	and.w	r3, r3, #32
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00c      	beq.n	800e10e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	f003 0320 	and.w	r3, r3, #32
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d007      	beq.n	800e10e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e102:	2b00      	cmp	r3, #0
 800e104:	d003      	beq.n	800e10e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e114:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e120:	2b40      	cmp	r3, #64	; 0x40
 800e122:	d004      	beq.n	800e12e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d031      	beq.n	800e192 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fd7c 	bl	800ec2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e13e:	2b40      	cmp	r3, #64	; 0x40
 800e140:	d123      	bne.n	800e18a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	689a      	ldr	r2, [r3, #8]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e150:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e156:	2b00      	cmp	r3, #0
 800e158:	d013      	beq.n	800e182 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15e:	4a4b      	ldr	r2, [pc, #300]	; (800e28c <HAL_UART_IRQHandler+0x30c>)
 800e160:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e166:	4618      	mov	r0, r3
 800e168:	f7fb f93e 	bl	80093e8 <HAL_DMA_Abort_IT>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d017      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e17c:	4610      	mov	r0, r2
 800e17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e180:	e00f      	b.n	800e1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f8 f85e 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e188:	e00b      	b.n	800e1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7f8 f85a 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e190:	e007      	b.n	800e1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7f8 f856 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e1a0:	e0e5      	b.n	800e36e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a2:	bf00      	nop
    return;
 800e1a4:	e0e3      	b.n	800e36e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	f040 80a9 	bne.w	800e302 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	f003 0310 	and.w	r3, r3, #16
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f000 80a3 	beq.w	800e302 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	f003 0310 	and.w	r3, r3, #16
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f000 809d 	beq.w	800e302 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2210      	movs	r2, #16
 800e1ce:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1da:	2b40      	cmp	r3, #64	; 0x40
 800e1dc:	d158      	bne.n	800e290 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800e1e8:	893b      	ldrh	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 80c1 	beq.w	800e372 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e1f6:	893a      	ldrh	r2, [r7, #8]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	f080 80ba 	bcs.w	800e372 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	893a      	ldrh	r2, [r7, #8]
 800e202:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d12a      	bne.n	800e26c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e224:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	689a      	ldr	r2, [r3, #8]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689a      	ldr	r2, [r3, #8]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e244:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2220      	movs	r2, #32
 800e24a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f022 0210 	bic.w	r2, r2, #16
 800e260:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e266:	4618      	mov	r0, r3
 800e268:	f7fb f880 	bl	800936c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e278:	b29b      	uxth	r3, r3
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4619      	mov	r1, r3
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f893 	bl	800e3ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e286:	e074      	b.n	800e372 <HAL_UART_IRQHandler+0x3f2>
 800e288:	04000120 	.word	0x04000120
 800e28c:	0800ec8b 	.word	0x0800ec8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d063      	beq.n	800e376 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800e2ae:	897b      	ldrh	r3, [r7, #10]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d060      	beq.n	800e376 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e2c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	689a      	ldr	r2, [r3, #8]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f022 0201 	bic.w	r2, r2, #1
 800e2d2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f022 0210 	bic.w	r2, r2, #16
 800e2f4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e2f6:	897b      	ldrh	r3, [r7, #10]
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f856 	bl	800e3ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e300:	e039      	b.n	800e376 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00d      	beq.n	800e328 <HAL_UART_IRQHandler+0x3a8>
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e312:	2b00      	cmp	r3, #0
 800e314:	d008      	beq.n	800e328 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e31e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fe6c 	bl	800effe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e326:	e029      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00d      	beq.n	800e34e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d008      	beq.n	800e34e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01a      	beq.n	800e37a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	4798      	blx	r3
    }
    return;
 800e34c:	e015      	b.n	800e37a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d011      	beq.n	800e37c <HAL_UART_IRQHandler+0x3fc>
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00c      	beq.n	800e37c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fd5a 	bl	800ee1c <UART_EndTransmit_IT>
    return;
 800e368:	e008      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e36a:	bf00      	nop
 800e36c:	e006      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
    return;
 800e36e:	bf00      	nop
 800e370:	e004      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e372:	bf00      	nop
 800e374:	e002      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
      return;
 800e376:	bf00      	nop
 800e378:	e000      	b.n	800e37c <HAL_UART_IRQHandler+0x3fc>
    return;
 800e37a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e37c:	3720      	adds	r7, #32
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop

0800e384 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e3b8:	bf00      	nop
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a17      	ldr	r2, [pc, #92]	; (800e430 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d024      	beq.n	800e420 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3da:	2b20      	cmp	r3, #32
 800e3dc:	d11e      	bne.n	800e41c <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d101      	bne.n	800e3ec <HAL_UART_EnableReceiverTimeout+0x28>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e01a      	b.n	800e422 <HAL_UART_EnableReceiverTimeout+0x5e>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2224      	movs	r2, #36	; 0x24
 800e3f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	685a      	ldr	r2, [r3, #4]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e408:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2220      	movs	r2, #32
 800e40e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	e002      	b.n	800e422 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800e41c:	2302      	movs	r3, #2
 800e41e:	e000      	b.n	800e422 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800e420:	2301      	movs	r3, #1
  }
}
 800e422:	4618      	mov	r0, r3
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	40008000 	.word	0x40008000

0800e434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e434:	b5b0      	push	{r4, r5, r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	689a      	ldr	r2, [r3, #8]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	431a      	orrs	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	431a      	orrs	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	4313      	orrs	r3, r2
 800e456:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	4baf      	ldr	r3, [pc, #700]	; (800e71c <UART_SetConfig+0x2e8>)
 800e460:	4013      	ands	r3, r2
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	6812      	ldr	r2, [r2, #0]
 800e466:	69f9      	ldr	r1, [r7, #28]
 800e468:	430b      	orrs	r3, r1
 800e46a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	430a      	orrs	r2, r1
 800e480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4aa4      	ldr	r2, [pc, #656]	; (800e720 <UART_SetConfig+0x2ec>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d004      	beq.n	800e49c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a1b      	ldr	r3, [r3, #32]
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	4313      	orrs	r3, r2
 800e49a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	69fa      	ldr	r2, [r7, #28]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a9b      	ldr	r2, [pc, #620]	; (800e724 <UART_SetConfig+0x2f0>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d121      	bne.n	800e4fe <UART_SetConfig+0xca>
 800e4ba:	4b9b      	ldr	r3, [pc, #620]	; (800e728 <UART_SetConfig+0x2f4>)
 800e4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4c0:	f003 0303 	and.w	r3, r3, #3
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d817      	bhi.n	800e4f8 <UART_SetConfig+0xc4>
 800e4c8:	a201      	add	r2, pc, #4	; (adr r2, 800e4d0 <UART_SetConfig+0x9c>)
 800e4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ce:	bf00      	nop
 800e4d0:	0800e4e1 	.word	0x0800e4e1
 800e4d4:	0800e4ed 	.word	0x0800e4ed
 800e4d8:	0800e4e7 	.word	0x0800e4e7
 800e4dc:	0800e4f3 	.word	0x0800e4f3
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	76fb      	strb	r3, [r7, #27]
 800e4e4:	e070      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	76fb      	strb	r3, [r7, #27]
 800e4ea:	e06d      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e4ec:	2304      	movs	r3, #4
 800e4ee:	76fb      	strb	r3, [r7, #27]
 800e4f0:	e06a      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e4f2:	2308      	movs	r3, #8
 800e4f4:	76fb      	strb	r3, [r7, #27]
 800e4f6:	e067      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	76fb      	strb	r3, [r7, #27]
 800e4fc:	e064      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a8a      	ldr	r2, [pc, #552]	; (800e72c <UART_SetConfig+0x2f8>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d132      	bne.n	800e56e <UART_SetConfig+0x13a>
 800e508:	4b87      	ldr	r3, [pc, #540]	; (800e728 <UART_SetConfig+0x2f4>)
 800e50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50e:	f003 030c 	and.w	r3, r3, #12
 800e512:	2b0c      	cmp	r3, #12
 800e514:	d828      	bhi.n	800e568 <UART_SetConfig+0x134>
 800e516:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <UART_SetConfig+0xe8>)
 800e518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51c:	0800e551 	.word	0x0800e551
 800e520:	0800e569 	.word	0x0800e569
 800e524:	0800e569 	.word	0x0800e569
 800e528:	0800e569 	.word	0x0800e569
 800e52c:	0800e55d 	.word	0x0800e55d
 800e530:	0800e569 	.word	0x0800e569
 800e534:	0800e569 	.word	0x0800e569
 800e538:	0800e569 	.word	0x0800e569
 800e53c:	0800e557 	.word	0x0800e557
 800e540:	0800e569 	.word	0x0800e569
 800e544:	0800e569 	.word	0x0800e569
 800e548:	0800e569 	.word	0x0800e569
 800e54c:	0800e563 	.word	0x0800e563
 800e550:	2300      	movs	r3, #0
 800e552:	76fb      	strb	r3, [r7, #27]
 800e554:	e038      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e556:	2302      	movs	r3, #2
 800e558:	76fb      	strb	r3, [r7, #27]
 800e55a:	e035      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e55c:	2304      	movs	r3, #4
 800e55e:	76fb      	strb	r3, [r7, #27]
 800e560:	e032      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e562:	2308      	movs	r3, #8
 800e564:	76fb      	strb	r3, [r7, #27]
 800e566:	e02f      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e568:	2310      	movs	r3, #16
 800e56a:	76fb      	strb	r3, [r7, #27]
 800e56c:	e02c      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a6b      	ldr	r2, [pc, #428]	; (800e720 <UART_SetConfig+0x2ec>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d125      	bne.n	800e5c4 <UART_SetConfig+0x190>
 800e578:	4b6b      	ldr	r3, [pc, #428]	; (800e728 <UART_SetConfig+0x2f4>)
 800e57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e57e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e586:	d017      	beq.n	800e5b8 <UART_SetConfig+0x184>
 800e588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e58c:	d817      	bhi.n	800e5be <UART_SetConfig+0x18a>
 800e58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e592:	d00b      	beq.n	800e5ac <UART_SetConfig+0x178>
 800e594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e598:	d811      	bhi.n	800e5be <UART_SetConfig+0x18a>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <UART_SetConfig+0x172>
 800e59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5a2:	d006      	beq.n	800e5b2 <UART_SetConfig+0x17e>
 800e5a4:	e00b      	b.n	800e5be <UART_SetConfig+0x18a>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	76fb      	strb	r3, [r7, #27]
 800e5aa:	e00d      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	76fb      	strb	r3, [r7, #27]
 800e5b0:	e00a      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e5b2:	2304      	movs	r3, #4
 800e5b4:	76fb      	strb	r3, [r7, #27]
 800e5b6:	e007      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e5b8:	2308      	movs	r3, #8
 800e5ba:	76fb      	strb	r3, [r7, #27]
 800e5bc:	e004      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e5be:	2310      	movs	r3, #16
 800e5c0:	76fb      	strb	r3, [r7, #27]
 800e5c2:	e001      	b.n	800e5c8 <UART_SetConfig+0x194>
 800e5c4:	2310      	movs	r3, #16
 800e5c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a54      	ldr	r2, [pc, #336]	; (800e720 <UART_SetConfig+0x2ec>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d173      	bne.n	800e6ba <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e5d2:	7efb      	ldrb	r3, [r7, #27]
 800e5d4:	2b08      	cmp	r3, #8
 800e5d6:	d824      	bhi.n	800e622 <UART_SetConfig+0x1ee>
 800e5d8:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <UART_SetConfig+0x1ac>)
 800e5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5de:	bf00      	nop
 800e5e0:	0800e605 	.word	0x0800e605
 800e5e4:	0800e623 	.word	0x0800e623
 800e5e8:	0800e60d 	.word	0x0800e60d
 800e5ec:	0800e623 	.word	0x0800e623
 800e5f0:	0800e613 	.word	0x0800e613
 800e5f4:	0800e623 	.word	0x0800e623
 800e5f8:	0800e623 	.word	0x0800e623
 800e5fc:	0800e623 	.word	0x0800e623
 800e600:	0800e61b 	.word	0x0800e61b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e604:	f7fd ff00 	bl	800c408 <HAL_RCC_GetPCLK1Freq>
 800e608:	6178      	str	r0, [r7, #20]
        break;
 800e60a:	e00f      	b.n	800e62c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e60c:	4b48      	ldr	r3, [pc, #288]	; (800e730 <UART_SetConfig+0x2fc>)
 800e60e:	617b      	str	r3, [r7, #20]
        break;
 800e610:	e00c      	b.n	800e62c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e612:	f7fd fe61 	bl	800c2d8 <HAL_RCC_GetSysClockFreq>
 800e616:	6178      	str	r0, [r7, #20]
        break;
 800e618:	e008      	b.n	800e62c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e61e:	617b      	str	r3, [r7, #20]
        break;
 800e620:	e004      	b.n	800e62c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	76bb      	strb	r3, [r7, #26]
        break;
 800e62a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 80fe 	beq.w	800e830 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685a      	ldr	r2, [r3, #4]
 800e638:	4613      	mov	r3, r2
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	4413      	add	r3, r2
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	429a      	cmp	r2, r3
 800e642:	d305      	bcc.n	800e650 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d902      	bls.n	800e656 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	76bb      	strb	r3, [r7, #26]
 800e654:	e0ec      	b.n	800e830 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	4618      	mov	r0, r3
 800e65a:	f04f 0100 	mov.w	r1, #0
 800e65e:	f04f 0200 	mov.w	r2, #0
 800e662:	f04f 0300 	mov.w	r3, #0
 800e666:	020b      	lsls	r3, r1, #8
 800e668:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e66c:	0202      	lsls	r2, r0, #8
 800e66e:	6879      	ldr	r1, [r7, #4]
 800e670:	6849      	ldr	r1, [r1, #4]
 800e672:	0849      	lsrs	r1, r1, #1
 800e674:	4608      	mov	r0, r1
 800e676:	f04f 0100 	mov.w	r1, #0
 800e67a:	1814      	adds	r4, r2, r0
 800e67c:	eb43 0501 	adc.w	r5, r3, r1
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	461a      	mov	r2, r3
 800e686:	f04f 0300 	mov.w	r3, #0
 800e68a:	4620      	mov	r0, r4
 800e68c:	4629      	mov	r1, r5
 800e68e:	f7f2 fb0b 	bl	8000ca8 <__aeabi_uldivmod>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4613      	mov	r3, r2
 800e698:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6a0:	d308      	bcc.n	800e6b4 <UART_SetConfig+0x280>
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6a8:	d204      	bcs.n	800e6b4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	60da      	str	r2, [r3, #12]
 800e6b2:	e0bd      	b.n	800e830 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	76bb      	strb	r3, [r7, #26]
 800e6b8:	e0ba      	b.n	800e830 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	69db      	ldr	r3, [r3, #28]
 800e6be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6c2:	d168      	bne.n	800e796 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800e6c4:	7efb      	ldrb	r3, [r7, #27]
 800e6c6:	2b08      	cmp	r3, #8
 800e6c8:	d834      	bhi.n	800e734 <UART_SetConfig+0x300>
 800e6ca:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <UART_SetConfig+0x29c>)
 800e6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d0:	0800e6f5 	.word	0x0800e6f5
 800e6d4:	0800e6fd 	.word	0x0800e6fd
 800e6d8:	0800e705 	.word	0x0800e705
 800e6dc:	0800e735 	.word	0x0800e735
 800e6e0:	0800e70b 	.word	0x0800e70b
 800e6e4:	0800e735 	.word	0x0800e735
 800e6e8:	0800e735 	.word	0x0800e735
 800e6ec:	0800e735 	.word	0x0800e735
 800e6f0:	0800e713 	.word	0x0800e713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6f4:	f7fd fe88 	bl	800c408 <HAL_RCC_GetPCLK1Freq>
 800e6f8:	6178      	str	r0, [r7, #20]
        break;
 800e6fa:	e020      	b.n	800e73e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6fc:	f7fd fe9a 	bl	800c434 <HAL_RCC_GetPCLK2Freq>
 800e700:	6178      	str	r0, [r7, #20]
        break;
 800e702:	e01c      	b.n	800e73e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <UART_SetConfig+0x2fc>)
 800e706:	617b      	str	r3, [r7, #20]
        break;
 800e708:	e019      	b.n	800e73e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e70a:	f7fd fde5 	bl	800c2d8 <HAL_RCC_GetSysClockFreq>
 800e70e:	6178      	str	r0, [r7, #20]
        break;
 800e710:	e015      	b.n	800e73e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e716:	617b      	str	r3, [r7, #20]
        break;
 800e718:	e011      	b.n	800e73e <UART_SetConfig+0x30a>
 800e71a:	bf00      	nop
 800e71c:	efff69f3 	.word	0xefff69f3
 800e720:	40008000 	.word	0x40008000
 800e724:	40013800 	.word	0x40013800
 800e728:	40021000 	.word	0x40021000
 800e72c:	40004400 	.word	0x40004400
 800e730:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	76bb      	strb	r3, [r7, #26]
        break;
 800e73c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d075      	beq.n	800e830 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	005a      	lsls	r2, r3, #1
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	085b      	lsrs	r3, r3, #1
 800e74e:	441a      	add	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	fbb2 f3f3 	udiv	r3, r2, r3
 800e758:	b29b      	uxth	r3, r3
 800e75a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	2b0f      	cmp	r3, #15
 800e760:	d916      	bls.n	800e790 <UART_SetConfig+0x35c>
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e768:	d212      	bcs.n	800e790 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	f023 030f 	bic.w	r3, r3, #15
 800e772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	085b      	lsrs	r3, r3, #1
 800e778:	b29b      	uxth	r3, r3
 800e77a:	f003 0307 	and.w	r3, r3, #7
 800e77e:	b29a      	uxth	r2, r3
 800e780:	89fb      	ldrh	r3, [r7, #14]
 800e782:	4313      	orrs	r3, r2
 800e784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	89fa      	ldrh	r2, [r7, #14]
 800e78c:	60da      	str	r2, [r3, #12]
 800e78e:	e04f      	b.n	800e830 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e790:	2301      	movs	r3, #1
 800e792:	76bb      	strb	r3, [r7, #26]
 800e794:	e04c      	b.n	800e830 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e796:	7efb      	ldrb	r3, [r7, #27]
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d828      	bhi.n	800e7ee <UART_SetConfig+0x3ba>
 800e79c:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <UART_SetConfig+0x370>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e7c9 	.word	0x0800e7c9
 800e7a8:	0800e7d1 	.word	0x0800e7d1
 800e7ac:	0800e7d9 	.word	0x0800e7d9
 800e7b0:	0800e7ef 	.word	0x0800e7ef
 800e7b4:	0800e7df 	.word	0x0800e7df
 800e7b8:	0800e7ef 	.word	0x0800e7ef
 800e7bc:	0800e7ef 	.word	0x0800e7ef
 800e7c0:	0800e7ef 	.word	0x0800e7ef
 800e7c4:	0800e7e7 	.word	0x0800e7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7c8:	f7fd fe1e 	bl	800c408 <HAL_RCC_GetPCLK1Freq>
 800e7cc:	6178      	str	r0, [r7, #20]
        break;
 800e7ce:	e013      	b.n	800e7f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7d0:	f7fd fe30 	bl	800c434 <HAL_RCC_GetPCLK2Freq>
 800e7d4:	6178      	str	r0, [r7, #20]
        break;
 800e7d6:	e00f      	b.n	800e7f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7d8:	4b1b      	ldr	r3, [pc, #108]	; (800e848 <UART_SetConfig+0x414>)
 800e7da:	617b      	str	r3, [r7, #20]
        break;
 800e7dc:	e00c      	b.n	800e7f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7de:	f7fd fd7b 	bl	800c2d8 <HAL_RCC_GetSysClockFreq>
 800e7e2:	6178      	str	r0, [r7, #20]
        break;
 800e7e4:	e008      	b.n	800e7f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ea:	617b      	str	r3, [r7, #20]
        break;
 800e7ec:	e004      	b.n	800e7f8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	76bb      	strb	r3, [r7, #26]
        break;
 800e7f6:	bf00      	nop
    }

    if (pclk != 0U)
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d018      	beq.n	800e830 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	085a      	lsrs	r2, r3, #1
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	441a      	add	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e810:	b29b      	uxth	r3, r3
 800e812:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2b0f      	cmp	r3, #15
 800e818:	d908      	bls.n	800e82c <UART_SetConfig+0x3f8>
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e820:	d204      	bcs.n	800e82c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	60da      	str	r2, [r3, #12]
 800e82a:	e001      	b.n	800e830 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e83c:	7ebb      	ldrb	r3, [r7, #26]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3720      	adds	r7, #32
 800e842:	46bd      	mov	sp, r7
 800e844:	bdb0      	pop	{r4, r5, r7, pc}
 800e846:	bf00      	nop
 800e848:	00f42400 	.word	0x00f42400

0800e84c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00a      	beq.n	800e876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	430a      	orrs	r2, r1
 800e874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87a:	f003 0302 	and.w	r3, r3, #2
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00a      	beq.n	800e898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	430a      	orrs	r2, r1
 800e896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00a      	beq.n	800e8ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8be:	f003 0308 	and.w	r3, r3, #8
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00a      	beq.n	800e8dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	430a      	orrs	r2, r1
 800e8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e0:	f003 0310 	and.w	r3, r3, #16
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00a      	beq.n	800e8fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	430a      	orrs	r2, r1
 800e8fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e902:	f003 0320 	and.w	r3, r3, #32
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00a      	beq.n	800e920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	430a      	orrs	r2, r1
 800e91e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d01a      	beq.n	800e962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	430a      	orrs	r2, r1
 800e940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e94a:	d10a      	bne.n	800e962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	430a      	orrs	r2, r1
 800e960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00a      	beq.n	800e984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	430a      	orrs	r2, r1
 800e982:	605a      	str	r2, [r3, #4]
  }
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af02      	add	r7, sp, #8
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e9a0:	f7f8 fe46 	bl	8007630 <HAL_GetTick>
 800e9a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 0308 	and.w	r3, r3, #8
 800e9b0:	2b08      	cmp	r3, #8
 800e9b2:	d10e      	bne.n	800e9d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f82d 	bl	800ea22 <UART_WaitOnFlagUntilTimeout>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e023      	b.n	800ea1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f003 0304 	and.w	r3, r3, #4
 800e9dc:	2b04      	cmp	r3, #4
 800e9de:	d10e      	bne.n	800e9fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f817 	bl	800ea22 <UART_WaitOnFlagUntilTimeout>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	e00d      	b.n	800ea1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2220      	movs	r2, #32
 800ea02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2220      	movs	r2, #32
 800ea08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b084      	sub	sp, #16
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	60f8      	str	r0, [r7, #12]
 800ea2a:	60b9      	str	r1, [r7, #8]
 800ea2c:	603b      	str	r3, [r7, #0]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea32:	e05e      	b.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3a:	d05a      	beq.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea3c:	f7f8 fdf8 	bl	8007630 <HAL_GetTick>
 800ea40:	4602      	mov	r2, r0
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d302      	bcc.n	800ea52 <UART_WaitOnFlagUntilTimeout+0x30>
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d11b      	bne.n	800ea8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ea60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689a      	ldr	r2, [r3, #8]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f022 0201 	bic.w	r2, r2, #1
 800ea70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2220      	movs	r2, #32
 800ea76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ea86:	2303      	movs	r3, #3
 800ea88:	e043      	b.n	800eb12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d02c      	beq.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	69db      	ldr	r3, [r3, #28]
 800ea9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eaa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaa6:	d124      	bne.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eab0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eac0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689a      	ldr	r2, [r3, #8]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f022 0201 	bic.w	r2, r2, #1
 800ead0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2220      	movs	r2, #32
 800ead6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2220      	movs	r2, #32
 800eae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e00f      	b.n	800eb12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	69da      	ldr	r2, [r3, #28]
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	4013      	ands	r3, r2
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	bf0c      	ite	eq
 800eb02:	2301      	moveq	r3, #1
 800eb04:	2300      	movne	r3, #0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	461a      	mov	r2, r3
 800eb0a:	79fb      	ldrb	r3, [r7, #7]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d091      	beq.n	800ea34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb10:	2300      	movs	r3, #0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	4613      	mov	r3, r2
 800eb28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	88fa      	ldrh	r2, [r7, #6]
 800eb34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	88fa      	ldrh	r2, [r7, #6]
 800eb3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb4e:	d10e      	bne.n	800eb6e <UART_Start_Receive_IT+0x52>
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	691b      	ldr	r3, [r3, #16]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d105      	bne.n	800eb64 <UART_Start_Receive_IT+0x48>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800eb5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eb62:	e02d      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	22ff      	movs	r2, #255	; 0xff
 800eb68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eb6c:	e028      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10d      	bne.n	800eb92 <UART_Start_Receive_IT+0x76>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d104      	bne.n	800eb88 <UART_Start_Receive_IT+0x6c>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	22ff      	movs	r2, #255	; 0xff
 800eb82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eb86:	e01b      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	227f      	movs	r2, #127	; 0x7f
 800eb8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eb90:	e016      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb9a:	d10d      	bne.n	800ebb8 <UART_Start_Receive_IT+0x9c>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d104      	bne.n	800ebae <UART_Start_Receive_IT+0x92>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	227f      	movs	r2, #127	; 0x7f
 800eba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ebac:	e008      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	223f      	movs	r2, #63	; 0x3f
 800ebb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ebb6:	e003      	b.n	800ebc0 <UART_Start_Receive_IT+0xa4>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2222      	movs	r2, #34	; 0x22
 800ebcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689a      	ldr	r2, [r3, #8]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f042 0201 	orr.w	r2, r2, #1
 800ebdc:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebe6:	d107      	bne.n	800ebf8 <UART_Start_Receive_IT+0xdc>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d103      	bne.n	800ebf8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4a0c      	ldr	r2, [pc, #48]	; (800ec24 <UART_Start_Receive_IT+0x108>)
 800ebf4:	665a      	str	r2, [r3, #100]	; 0x64
 800ebf6:	e002      	b.n	800ebfe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	4a0b      	ldr	r2, [pc, #44]	; (800ec28 <UART_Start_Receive_IT+0x10c>)
 800ebfc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ec14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3714      	adds	r7, #20
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr
 800ec24:	0800ef27 	.word	0x0800ef27
 800ec28:	0800ee4f 	.word	0x0800ee4f

0800ec2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	689a      	ldr	r2, [r3, #8]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f022 0201 	bic.w	r2, r2, #1
 800ec52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d107      	bne.n	800ec6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f022 0210 	bic.w	r2, r2, #16
 800ec6a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ec7e:	bf00      	nop
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b084      	sub	sp, #16
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7f7 facb 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fb56 	bl	800e384 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecd8:	bf00      	nop
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecec:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	220f      	movs	r2, #15
 800ecfc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	8b1b      	ldrh	r3, [r3, #24]
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f042 0208 	orr.w	r2, r2, #8
 800ed0e:	b292      	uxth	r2, r2
 800ed10:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2220      	movs	r2, #32
 800ed16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f7ff fb3a 	bl	800e398 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed24:	bf00      	nop
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed38:	2b21      	cmp	r3, #33	; 0x21
 800ed3a:	d12b      	bne.n	800ed94 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d110      	bne.n	800ed6a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed66:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ed68:	e014      	b.n	800ed94 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed6e:	781a      	ldrb	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	b292      	uxth	r2, r2
 800ed76:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed7c:	1c5a      	adds	r2, r3, #1
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edac:	2b21      	cmp	r3, #33	; 0x21
 800edae:	d12f      	bne.n	800ee10 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d110      	bne.n	800edde <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800edca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edda:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800eddc:	e018      	b.n	800ee10 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ede2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	881a      	ldrh	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edf0:	b292      	uxth	r2, r2
 800edf2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edf8:	1c9a      	adds	r2, r3, #2
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ee10:	bf00      	nop
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee32:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2220      	movs	r2, #32
 800ee38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7f7 f9d3 	bl	80061ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee46:	bf00      	nop
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee62:	2b22      	cmp	r3, #34	; 0x22
 800ee64:	d151      	bne.n	800ef0a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee6c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ee6e:	89bb      	ldrh	r3, [r7, #12]
 800ee70:	b2d9      	uxtb	r1, r3
 800ee72:	89fb      	ldrh	r3, [r7, #14]
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7a:	400a      	ands	r2, r1
 800ee7c:	b2d2      	uxtb	r2, r2
 800ee7e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	3b01      	subs	r3, #1
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d13a      	bne.n	800ef1e <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eeb6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	689a      	ldr	r2, [r3, #8]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f022 0201 	bic.w	r2, r2, #1
 800eec6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2220      	movs	r2, #32
 800eecc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d10f      	bne.n	800eefc <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f022 0210 	bic.w	r2, r2, #16
 800eeea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fa59 	bl	800e3ac <HAL_UARTEx_RxEventCallback>
 800eefa:	e002      	b.n	800ef02 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7f7 f985 	bl	800620c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef08:	e009      	b.n	800ef1e <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	8b1b      	ldrh	r3, [r3, #24]
 800ef10:	b29a      	uxth	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f042 0208 	orr.w	r2, r2, #8
 800ef1a:	b292      	uxth	r2, r2
 800ef1c:	831a      	strh	r2, [r3, #24]
}
 800ef1e:	bf00      	nop
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b084      	sub	sp, #16
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef34:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef3a:	2b22      	cmp	r3, #34	; 0x22
 800ef3c:	d151      	bne.n	800efe2 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef44:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef4a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ef4c:	89ba      	ldrh	r2, [r7, #12]
 800ef4e:	89fb      	ldrh	r3, [r7, #14]
 800ef50:	4013      	ands	r3, r2
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5c:	1c9a      	adds	r2, r3, #2
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d13a      	bne.n	800eff6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ef8e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	689a      	ldr	r2, [r3, #8]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f022 0201 	bic.w	r2, r2, #1
 800ef9e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2220      	movs	r2, #32
 800efa4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d10f      	bne.n	800efd4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f022 0210 	bic.w	r2, r2, #16
 800efc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff f9ed 	bl	800e3ac <HAL_UARTEx_RxEventCallback>
 800efd2:	e002      	b.n	800efda <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7f7 f919 	bl	800620c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efe0:	e009      	b.n	800eff6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	8b1b      	ldrh	r3, [r3, #24]
 800efe8:	b29a      	uxth	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f042 0208 	orr.w	r2, r2, #8
 800eff2:	b292      	uxth	r2, r2
 800eff4:	831a      	strh	r2, [r3, #24]
}
 800eff6:	bf00      	nop
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800effe:	b480      	push	{r7}
 800f000:	b083      	sub	sp, #12
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f006:	bf00      	nop
 800f008:	370c      	adds	r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
	...

0800f014 <__errno>:
 800f014:	4b01      	ldr	r3, [pc, #4]	; (800f01c <__errno+0x8>)
 800f016:	6818      	ldr	r0, [r3, #0]
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	20000018 	.word	0x20000018

0800f020 <__libc_init_array>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	4d0d      	ldr	r5, [pc, #52]	; (800f058 <__libc_init_array+0x38>)
 800f024:	4c0d      	ldr	r4, [pc, #52]	; (800f05c <__libc_init_array+0x3c>)
 800f026:	1b64      	subs	r4, r4, r5
 800f028:	10a4      	asrs	r4, r4, #2
 800f02a:	2600      	movs	r6, #0
 800f02c:	42a6      	cmp	r6, r4
 800f02e:	d109      	bne.n	800f044 <__libc_init_array+0x24>
 800f030:	4d0b      	ldr	r5, [pc, #44]	; (800f060 <__libc_init_array+0x40>)
 800f032:	4c0c      	ldr	r4, [pc, #48]	; (800f064 <__libc_init_array+0x44>)
 800f034:	f003 ff62 	bl	8012efc <_init>
 800f038:	1b64      	subs	r4, r4, r5
 800f03a:	10a4      	asrs	r4, r4, #2
 800f03c:	2600      	movs	r6, #0
 800f03e:	42a6      	cmp	r6, r4
 800f040:	d105      	bne.n	800f04e <__libc_init_array+0x2e>
 800f042:	bd70      	pop	{r4, r5, r6, pc}
 800f044:	f855 3b04 	ldr.w	r3, [r5], #4
 800f048:	4798      	blx	r3
 800f04a:	3601      	adds	r6, #1
 800f04c:	e7ee      	b.n	800f02c <__libc_init_array+0xc>
 800f04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f052:	4798      	blx	r3
 800f054:	3601      	adds	r6, #1
 800f056:	e7f2      	b.n	800f03e <__libc_init_array+0x1e>
 800f058:	08013ad0 	.word	0x08013ad0
 800f05c:	08013ad0 	.word	0x08013ad0
 800f060:	08013ad0 	.word	0x08013ad0
 800f064:	08013ad4 	.word	0x08013ad4

0800f068 <memcpy>:
 800f068:	440a      	add	r2, r1
 800f06a:	4291      	cmp	r1, r2
 800f06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f070:	d100      	bne.n	800f074 <memcpy+0xc>
 800f072:	4770      	bx	lr
 800f074:	b510      	push	{r4, lr}
 800f076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f07e:	4291      	cmp	r1, r2
 800f080:	d1f9      	bne.n	800f076 <memcpy+0xe>
 800f082:	bd10      	pop	{r4, pc}

0800f084 <memset>:
 800f084:	4402      	add	r2, r0
 800f086:	4603      	mov	r3, r0
 800f088:	4293      	cmp	r3, r2
 800f08a:	d100      	bne.n	800f08e <memset+0xa>
 800f08c:	4770      	bx	lr
 800f08e:	f803 1b01 	strb.w	r1, [r3], #1
 800f092:	e7f9      	b.n	800f088 <memset+0x4>

0800f094 <__cvt>:
 800f094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	ec55 4b10 	vmov	r4, r5, d0
 800f09c:	2d00      	cmp	r5, #0
 800f09e:	460e      	mov	r6, r1
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	462b      	mov	r3, r5
 800f0a4:	bfbb      	ittet	lt
 800f0a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f0aa:	461d      	movlt	r5, r3
 800f0ac:	2300      	movge	r3, #0
 800f0ae:	232d      	movlt	r3, #45	; 0x2d
 800f0b0:	700b      	strb	r3, [r1, #0]
 800f0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f0b8:	4691      	mov	r9, r2
 800f0ba:	f023 0820 	bic.w	r8, r3, #32
 800f0be:	bfbc      	itt	lt
 800f0c0:	4622      	movlt	r2, r4
 800f0c2:	4614      	movlt	r4, r2
 800f0c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0c8:	d005      	beq.n	800f0d6 <__cvt+0x42>
 800f0ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f0ce:	d100      	bne.n	800f0d2 <__cvt+0x3e>
 800f0d0:	3601      	adds	r6, #1
 800f0d2:	2102      	movs	r1, #2
 800f0d4:	e000      	b.n	800f0d8 <__cvt+0x44>
 800f0d6:	2103      	movs	r1, #3
 800f0d8:	ab03      	add	r3, sp, #12
 800f0da:	9301      	str	r3, [sp, #4]
 800f0dc:	ab02      	add	r3, sp, #8
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	ec45 4b10 	vmov	d0, r4, r5
 800f0e4:	4653      	mov	r3, sl
 800f0e6:	4632      	mov	r2, r6
 800f0e8:	f000 fd12 	bl	800fb10 <_dtoa_r>
 800f0ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	d102      	bne.n	800f0fa <__cvt+0x66>
 800f0f4:	f019 0f01 	tst.w	r9, #1
 800f0f8:	d022      	beq.n	800f140 <__cvt+0xac>
 800f0fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0fe:	eb07 0906 	add.w	r9, r7, r6
 800f102:	d110      	bne.n	800f126 <__cvt+0x92>
 800f104:	783b      	ldrb	r3, [r7, #0]
 800f106:	2b30      	cmp	r3, #48	; 0x30
 800f108:	d10a      	bne.n	800f120 <__cvt+0x8c>
 800f10a:	2200      	movs	r2, #0
 800f10c:	2300      	movs	r3, #0
 800f10e:	4620      	mov	r0, r4
 800f110:	4629      	mov	r1, r5
 800f112:	f7f1 fce9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f116:	b918      	cbnz	r0, 800f120 <__cvt+0x8c>
 800f118:	f1c6 0601 	rsb	r6, r6, #1
 800f11c:	f8ca 6000 	str.w	r6, [sl]
 800f120:	f8da 3000 	ldr.w	r3, [sl]
 800f124:	4499      	add	r9, r3
 800f126:	2200      	movs	r2, #0
 800f128:	2300      	movs	r3, #0
 800f12a:	4620      	mov	r0, r4
 800f12c:	4629      	mov	r1, r5
 800f12e:	f7f1 fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800f132:	b108      	cbz	r0, 800f138 <__cvt+0xa4>
 800f134:	f8cd 900c 	str.w	r9, [sp, #12]
 800f138:	2230      	movs	r2, #48	; 0x30
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	454b      	cmp	r3, r9
 800f13e:	d307      	bcc.n	800f150 <__cvt+0xbc>
 800f140:	9b03      	ldr	r3, [sp, #12]
 800f142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f144:	1bdb      	subs	r3, r3, r7
 800f146:	4638      	mov	r0, r7
 800f148:	6013      	str	r3, [r2, #0]
 800f14a:	b004      	add	sp, #16
 800f14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f150:	1c59      	adds	r1, r3, #1
 800f152:	9103      	str	r1, [sp, #12]
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	e7f0      	b.n	800f13a <__cvt+0xa6>

0800f158 <__exponent>:
 800f158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f15a:	4603      	mov	r3, r0
 800f15c:	2900      	cmp	r1, #0
 800f15e:	bfb8      	it	lt
 800f160:	4249      	neglt	r1, r1
 800f162:	f803 2b02 	strb.w	r2, [r3], #2
 800f166:	bfb4      	ite	lt
 800f168:	222d      	movlt	r2, #45	; 0x2d
 800f16a:	222b      	movge	r2, #43	; 0x2b
 800f16c:	2909      	cmp	r1, #9
 800f16e:	7042      	strb	r2, [r0, #1]
 800f170:	dd2a      	ble.n	800f1c8 <__exponent+0x70>
 800f172:	f10d 0407 	add.w	r4, sp, #7
 800f176:	46a4      	mov	ip, r4
 800f178:	270a      	movs	r7, #10
 800f17a:	46a6      	mov	lr, r4
 800f17c:	460a      	mov	r2, r1
 800f17e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f182:	fb07 1516 	mls	r5, r7, r6, r1
 800f186:	3530      	adds	r5, #48	; 0x30
 800f188:	2a63      	cmp	r2, #99	; 0x63
 800f18a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f18e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f192:	4631      	mov	r1, r6
 800f194:	dcf1      	bgt.n	800f17a <__exponent+0x22>
 800f196:	3130      	adds	r1, #48	; 0x30
 800f198:	f1ae 0502 	sub.w	r5, lr, #2
 800f19c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f1a0:	1c44      	adds	r4, r0, #1
 800f1a2:	4629      	mov	r1, r5
 800f1a4:	4561      	cmp	r1, ip
 800f1a6:	d30a      	bcc.n	800f1be <__exponent+0x66>
 800f1a8:	f10d 0209 	add.w	r2, sp, #9
 800f1ac:	eba2 020e 	sub.w	r2, r2, lr
 800f1b0:	4565      	cmp	r5, ip
 800f1b2:	bf88      	it	hi
 800f1b4:	2200      	movhi	r2, #0
 800f1b6:	4413      	add	r3, r2
 800f1b8:	1a18      	subs	r0, r3, r0
 800f1ba:	b003      	add	sp, #12
 800f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f1c6:	e7ed      	b.n	800f1a4 <__exponent+0x4c>
 800f1c8:	2330      	movs	r3, #48	; 0x30
 800f1ca:	3130      	adds	r1, #48	; 0x30
 800f1cc:	7083      	strb	r3, [r0, #2]
 800f1ce:	70c1      	strb	r1, [r0, #3]
 800f1d0:	1d03      	adds	r3, r0, #4
 800f1d2:	e7f1      	b.n	800f1b8 <__exponent+0x60>

0800f1d4 <_printf_float>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	ed2d 8b02 	vpush	{d8}
 800f1dc:	b08d      	sub	sp, #52	; 0x34
 800f1de:	460c      	mov	r4, r1
 800f1e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f1e4:	4616      	mov	r6, r2
 800f1e6:	461f      	mov	r7, r3
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	f001 fa7d 	bl	80106e8 <_localeconv_r>
 800f1ee:	f8d0 a000 	ldr.w	sl, [r0]
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	f7f0 fff6 	bl	80001e4 <strlen>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	9305      	str	r3, [sp, #20]
 800f200:	f8d8 3000 	ldr.w	r3, [r8]
 800f204:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f208:	3307      	adds	r3, #7
 800f20a:	f023 0307 	bic.w	r3, r3, #7
 800f20e:	f103 0208 	add.w	r2, r3, #8
 800f212:	f8c8 2000 	str.w	r2, [r8]
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f21e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f226:	9307      	str	r3, [sp, #28]
 800f228:	f8cd 8018 	str.w	r8, [sp, #24]
 800f22c:	ee08 0a10 	vmov	s16, r0
 800f230:	4b9f      	ldr	r3, [pc, #636]	; (800f4b0 <_printf_float+0x2dc>)
 800f232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f236:	f04f 32ff 	mov.w	r2, #4294967295
 800f23a:	f7f1 fc87 	bl	8000b4c <__aeabi_dcmpun>
 800f23e:	bb88      	cbnz	r0, 800f2a4 <_printf_float+0xd0>
 800f240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f244:	4b9a      	ldr	r3, [pc, #616]	; (800f4b0 <_printf_float+0x2dc>)
 800f246:	f04f 32ff 	mov.w	r2, #4294967295
 800f24a:	f7f1 fc61 	bl	8000b10 <__aeabi_dcmple>
 800f24e:	bb48      	cbnz	r0, 800f2a4 <_printf_float+0xd0>
 800f250:	2200      	movs	r2, #0
 800f252:	2300      	movs	r3, #0
 800f254:	4640      	mov	r0, r8
 800f256:	4649      	mov	r1, r9
 800f258:	f7f1 fc50 	bl	8000afc <__aeabi_dcmplt>
 800f25c:	b110      	cbz	r0, 800f264 <_printf_float+0x90>
 800f25e:	232d      	movs	r3, #45	; 0x2d
 800f260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f264:	4b93      	ldr	r3, [pc, #588]	; (800f4b4 <_printf_float+0x2e0>)
 800f266:	4894      	ldr	r0, [pc, #592]	; (800f4b8 <_printf_float+0x2e4>)
 800f268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f26c:	bf94      	ite	ls
 800f26e:	4698      	movls	r8, r3
 800f270:	4680      	movhi	r8, r0
 800f272:	2303      	movs	r3, #3
 800f274:	6123      	str	r3, [r4, #16]
 800f276:	9b05      	ldr	r3, [sp, #20]
 800f278:	f023 0204 	bic.w	r2, r3, #4
 800f27c:	6022      	str	r2, [r4, #0]
 800f27e:	f04f 0900 	mov.w	r9, #0
 800f282:	9700      	str	r7, [sp, #0]
 800f284:	4633      	mov	r3, r6
 800f286:	aa0b      	add	r2, sp, #44	; 0x2c
 800f288:	4621      	mov	r1, r4
 800f28a:	4628      	mov	r0, r5
 800f28c:	f000 f9d8 	bl	800f640 <_printf_common>
 800f290:	3001      	adds	r0, #1
 800f292:	f040 8090 	bne.w	800f3b6 <_printf_float+0x1e2>
 800f296:	f04f 30ff 	mov.w	r0, #4294967295
 800f29a:	b00d      	add	sp, #52	; 0x34
 800f29c:	ecbd 8b02 	vpop	{d8}
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a4:	4642      	mov	r2, r8
 800f2a6:	464b      	mov	r3, r9
 800f2a8:	4640      	mov	r0, r8
 800f2aa:	4649      	mov	r1, r9
 800f2ac:	f7f1 fc4e 	bl	8000b4c <__aeabi_dcmpun>
 800f2b0:	b140      	cbz	r0, 800f2c4 <_printf_float+0xf0>
 800f2b2:	464b      	mov	r3, r9
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfbc      	itt	lt
 800f2b8:	232d      	movlt	r3, #45	; 0x2d
 800f2ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f2be:	487f      	ldr	r0, [pc, #508]	; (800f4bc <_printf_float+0x2e8>)
 800f2c0:	4b7f      	ldr	r3, [pc, #508]	; (800f4c0 <_printf_float+0x2ec>)
 800f2c2:	e7d1      	b.n	800f268 <_printf_float+0x94>
 800f2c4:	6863      	ldr	r3, [r4, #4]
 800f2c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f2ca:	9206      	str	r2, [sp, #24]
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	d13f      	bne.n	800f350 <_printf_float+0x17c>
 800f2d0:	2306      	movs	r3, #6
 800f2d2:	6063      	str	r3, [r4, #4]
 800f2d4:	9b05      	ldr	r3, [sp, #20]
 800f2d6:	6861      	ldr	r1, [r4, #4]
 800f2d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f2dc:	2300      	movs	r3, #0
 800f2de:	9303      	str	r3, [sp, #12]
 800f2e0:	ab0a      	add	r3, sp, #40	; 0x28
 800f2e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f2e6:	ab09      	add	r3, sp, #36	; 0x24
 800f2e8:	ec49 8b10 	vmov	d0, r8, r9
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	6022      	str	r2, [r4, #0]
 800f2f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f7ff fecd 	bl	800f094 <__cvt>
 800f2fa:	9b06      	ldr	r3, [sp, #24]
 800f2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2fe:	2b47      	cmp	r3, #71	; 0x47
 800f300:	4680      	mov	r8, r0
 800f302:	d108      	bne.n	800f316 <_printf_float+0x142>
 800f304:	1cc8      	adds	r0, r1, #3
 800f306:	db02      	blt.n	800f30e <_printf_float+0x13a>
 800f308:	6863      	ldr	r3, [r4, #4]
 800f30a:	4299      	cmp	r1, r3
 800f30c:	dd41      	ble.n	800f392 <_printf_float+0x1be>
 800f30e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f312:	fa5f fb8b 	uxtb.w	fp, fp
 800f316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f31a:	d820      	bhi.n	800f35e <_printf_float+0x18a>
 800f31c:	3901      	subs	r1, #1
 800f31e:	465a      	mov	r2, fp
 800f320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f324:	9109      	str	r1, [sp, #36]	; 0x24
 800f326:	f7ff ff17 	bl	800f158 <__exponent>
 800f32a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f32c:	1813      	adds	r3, r2, r0
 800f32e:	2a01      	cmp	r2, #1
 800f330:	4681      	mov	r9, r0
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	dc02      	bgt.n	800f33c <_printf_float+0x168>
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	07d2      	lsls	r2, r2, #31
 800f33a:	d501      	bpl.n	800f340 <_printf_float+0x16c>
 800f33c:	3301      	adds	r3, #1
 800f33e:	6123      	str	r3, [r4, #16]
 800f340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f344:	2b00      	cmp	r3, #0
 800f346:	d09c      	beq.n	800f282 <_printf_float+0xae>
 800f348:	232d      	movs	r3, #45	; 0x2d
 800f34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f34e:	e798      	b.n	800f282 <_printf_float+0xae>
 800f350:	9a06      	ldr	r2, [sp, #24]
 800f352:	2a47      	cmp	r2, #71	; 0x47
 800f354:	d1be      	bne.n	800f2d4 <_printf_float+0x100>
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1bc      	bne.n	800f2d4 <_printf_float+0x100>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e7b9      	b.n	800f2d2 <_printf_float+0xfe>
 800f35e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f362:	d118      	bne.n	800f396 <_printf_float+0x1c2>
 800f364:	2900      	cmp	r1, #0
 800f366:	6863      	ldr	r3, [r4, #4]
 800f368:	dd0b      	ble.n	800f382 <_printf_float+0x1ae>
 800f36a:	6121      	str	r1, [r4, #16]
 800f36c:	b913      	cbnz	r3, 800f374 <_printf_float+0x1a0>
 800f36e:	6822      	ldr	r2, [r4, #0]
 800f370:	07d0      	lsls	r0, r2, #31
 800f372:	d502      	bpl.n	800f37a <_printf_float+0x1a6>
 800f374:	3301      	adds	r3, #1
 800f376:	440b      	add	r3, r1
 800f378:	6123      	str	r3, [r4, #16]
 800f37a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f37c:	f04f 0900 	mov.w	r9, #0
 800f380:	e7de      	b.n	800f340 <_printf_float+0x16c>
 800f382:	b913      	cbnz	r3, 800f38a <_printf_float+0x1b6>
 800f384:	6822      	ldr	r2, [r4, #0]
 800f386:	07d2      	lsls	r2, r2, #31
 800f388:	d501      	bpl.n	800f38e <_printf_float+0x1ba>
 800f38a:	3302      	adds	r3, #2
 800f38c:	e7f4      	b.n	800f378 <_printf_float+0x1a4>
 800f38e:	2301      	movs	r3, #1
 800f390:	e7f2      	b.n	800f378 <_printf_float+0x1a4>
 800f392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f398:	4299      	cmp	r1, r3
 800f39a:	db05      	blt.n	800f3a8 <_printf_float+0x1d4>
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	6121      	str	r1, [r4, #16]
 800f3a0:	07d8      	lsls	r0, r3, #31
 800f3a2:	d5ea      	bpl.n	800f37a <_printf_float+0x1a6>
 800f3a4:	1c4b      	adds	r3, r1, #1
 800f3a6:	e7e7      	b.n	800f378 <_printf_float+0x1a4>
 800f3a8:	2900      	cmp	r1, #0
 800f3aa:	bfd4      	ite	le
 800f3ac:	f1c1 0202 	rsble	r2, r1, #2
 800f3b0:	2201      	movgt	r2, #1
 800f3b2:	4413      	add	r3, r2
 800f3b4:	e7e0      	b.n	800f378 <_printf_float+0x1a4>
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	055a      	lsls	r2, r3, #21
 800f3ba:	d407      	bmi.n	800f3cc <_printf_float+0x1f8>
 800f3bc:	6923      	ldr	r3, [r4, #16]
 800f3be:	4642      	mov	r2, r8
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	d12c      	bne.n	800f424 <_printf_float+0x250>
 800f3ca:	e764      	b.n	800f296 <_printf_float+0xc2>
 800f3cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f3d0:	f240 80e0 	bls.w	800f594 <_printf_float+0x3c0>
 800f3d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2300      	movs	r3, #0
 800f3dc:	f7f1 fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d034      	beq.n	800f44e <_printf_float+0x27a>
 800f3e4:	4a37      	ldr	r2, [pc, #220]	; (800f4c4 <_printf_float+0x2f0>)
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	47b8      	blx	r7
 800f3ee:	3001      	adds	r0, #1
 800f3f0:	f43f af51 	beq.w	800f296 <_printf_float+0xc2>
 800f3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	db02      	blt.n	800f402 <_printf_float+0x22e>
 800f3fc:	6823      	ldr	r3, [r4, #0]
 800f3fe:	07d8      	lsls	r0, r3, #31
 800f400:	d510      	bpl.n	800f424 <_printf_float+0x250>
 800f402:	ee18 3a10 	vmov	r3, s16
 800f406:	4652      	mov	r2, sl
 800f408:	4631      	mov	r1, r6
 800f40a:	4628      	mov	r0, r5
 800f40c:	47b8      	blx	r7
 800f40e:	3001      	adds	r0, #1
 800f410:	f43f af41 	beq.w	800f296 <_printf_float+0xc2>
 800f414:	f04f 0800 	mov.w	r8, #0
 800f418:	f104 091a 	add.w	r9, r4, #26
 800f41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f41e:	3b01      	subs	r3, #1
 800f420:	4543      	cmp	r3, r8
 800f422:	dc09      	bgt.n	800f438 <_printf_float+0x264>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	079b      	lsls	r3, r3, #30
 800f428:	f100 8105 	bmi.w	800f636 <_printf_float+0x462>
 800f42c:	68e0      	ldr	r0, [r4, #12]
 800f42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f430:	4298      	cmp	r0, r3
 800f432:	bfb8      	it	lt
 800f434:	4618      	movlt	r0, r3
 800f436:	e730      	b.n	800f29a <_printf_float+0xc6>
 800f438:	2301      	movs	r3, #1
 800f43a:	464a      	mov	r2, r9
 800f43c:	4631      	mov	r1, r6
 800f43e:	4628      	mov	r0, r5
 800f440:	47b8      	blx	r7
 800f442:	3001      	adds	r0, #1
 800f444:	f43f af27 	beq.w	800f296 <_printf_float+0xc2>
 800f448:	f108 0801 	add.w	r8, r8, #1
 800f44c:	e7e6      	b.n	800f41c <_printf_float+0x248>
 800f44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	dc39      	bgt.n	800f4c8 <_printf_float+0x2f4>
 800f454:	4a1b      	ldr	r2, [pc, #108]	; (800f4c4 <_printf_float+0x2f0>)
 800f456:	2301      	movs	r3, #1
 800f458:	4631      	mov	r1, r6
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	f43f af19 	beq.w	800f296 <_printf_float+0xc2>
 800f464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f468:	4313      	orrs	r3, r2
 800f46a:	d102      	bne.n	800f472 <_printf_float+0x29e>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	07d9      	lsls	r1, r3, #31
 800f470:	d5d8      	bpl.n	800f424 <_printf_float+0x250>
 800f472:	ee18 3a10 	vmov	r3, s16
 800f476:	4652      	mov	r2, sl
 800f478:	4631      	mov	r1, r6
 800f47a:	4628      	mov	r0, r5
 800f47c:	47b8      	blx	r7
 800f47e:	3001      	adds	r0, #1
 800f480:	f43f af09 	beq.w	800f296 <_printf_float+0xc2>
 800f484:	f04f 0900 	mov.w	r9, #0
 800f488:	f104 0a1a 	add.w	sl, r4, #26
 800f48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f48e:	425b      	negs	r3, r3
 800f490:	454b      	cmp	r3, r9
 800f492:	dc01      	bgt.n	800f498 <_printf_float+0x2c4>
 800f494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f496:	e792      	b.n	800f3be <_printf_float+0x1ea>
 800f498:	2301      	movs	r3, #1
 800f49a:	4652      	mov	r2, sl
 800f49c:	4631      	mov	r1, r6
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	f43f aef7 	beq.w	800f296 <_printf_float+0xc2>
 800f4a8:	f109 0901 	add.w	r9, r9, #1
 800f4ac:	e7ee      	b.n	800f48c <_printf_float+0x2b8>
 800f4ae:	bf00      	nop
 800f4b0:	7fefffff 	.word	0x7fefffff
 800f4b4:	0801350c 	.word	0x0801350c
 800f4b8:	08013510 	.word	0x08013510
 800f4bc:	08013518 	.word	0x08013518
 800f4c0:	08013514 	.word	0x08013514
 800f4c4:	0801351c 	.word	0x0801351c
 800f4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	bfa8      	it	ge
 800f4d0:	461a      	movge	r2, r3
 800f4d2:	2a00      	cmp	r2, #0
 800f4d4:	4691      	mov	r9, r2
 800f4d6:	dc37      	bgt.n	800f548 <_printf_float+0x374>
 800f4d8:	f04f 0b00 	mov.w	fp, #0
 800f4dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4e0:	f104 021a 	add.w	r2, r4, #26
 800f4e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f4e6:	9305      	str	r3, [sp, #20]
 800f4e8:	eba3 0309 	sub.w	r3, r3, r9
 800f4ec:	455b      	cmp	r3, fp
 800f4ee:	dc33      	bgt.n	800f558 <_printf_float+0x384>
 800f4f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	db3b      	blt.n	800f570 <_printf_float+0x39c>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	07da      	lsls	r2, r3, #31
 800f4fc:	d438      	bmi.n	800f570 <_printf_float+0x39c>
 800f4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f500:	9b05      	ldr	r3, [sp, #20]
 800f502:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	eba2 0901 	sub.w	r9, r2, r1
 800f50a:	4599      	cmp	r9, r3
 800f50c:	bfa8      	it	ge
 800f50e:	4699      	movge	r9, r3
 800f510:	f1b9 0f00 	cmp.w	r9, #0
 800f514:	dc35      	bgt.n	800f582 <_printf_float+0x3ae>
 800f516:	f04f 0800 	mov.w	r8, #0
 800f51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f51e:	f104 0a1a 	add.w	sl, r4, #26
 800f522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f526:	1a9b      	subs	r3, r3, r2
 800f528:	eba3 0309 	sub.w	r3, r3, r9
 800f52c:	4543      	cmp	r3, r8
 800f52e:	f77f af79 	ble.w	800f424 <_printf_float+0x250>
 800f532:	2301      	movs	r3, #1
 800f534:	4652      	mov	r2, sl
 800f536:	4631      	mov	r1, r6
 800f538:	4628      	mov	r0, r5
 800f53a:	47b8      	blx	r7
 800f53c:	3001      	adds	r0, #1
 800f53e:	f43f aeaa 	beq.w	800f296 <_printf_float+0xc2>
 800f542:	f108 0801 	add.w	r8, r8, #1
 800f546:	e7ec      	b.n	800f522 <_printf_float+0x34e>
 800f548:	4613      	mov	r3, r2
 800f54a:	4631      	mov	r1, r6
 800f54c:	4642      	mov	r2, r8
 800f54e:	4628      	mov	r0, r5
 800f550:	47b8      	blx	r7
 800f552:	3001      	adds	r0, #1
 800f554:	d1c0      	bne.n	800f4d8 <_printf_float+0x304>
 800f556:	e69e      	b.n	800f296 <_printf_float+0xc2>
 800f558:	2301      	movs	r3, #1
 800f55a:	4631      	mov	r1, r6
 800f55c:	4628      	mov	r0, r5
 800f55e:	9205      	str	r2, [sp, #20]
 800f560:	47b8      	blx	r7
 800f562:	3001      	adds	r0, #1
 800f564:	f43f ae97 	beq.w	800f296 <_printf_float+0xc2>
 800f568:	9a05      	ldr	r2, [sp, #20]
 800f56a:	f10b 0b01 	add.w	fp, fp, #1
 800f56e:	e7b9      	b.n	800f4e4 <_printf_float+0x310>
 800f570:	ee18 3a10 	vmov	r3, s16
 800f574:	4652      	mov	r2, sl
 800f576:	4631      	mov	r1, r6
 800f578:	4628      	mov	r0, r5
 800f57a:	47b8      	blx	r7
 800f57c:	3001      	adds	r0, #1
 800f57e:	d1be      	bne.n	800f4fe <_printf_float+0x32a>
 800f580:	e689      	b.n	800f296 <_printf_float+0xc2>
 800f582:	9a05      	ldr	r2, [sp, #20]
 800f584:	464b      	mov	r3, r9
 800f586:	4442      	add	r2, r8
 800f588:	4631      	mov	r1, r6
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b8      	blx	r7
 800f58e:	3001      	adds	r0, #1
 800f590:	d1c1      	bne.n	800f516 <_printf_float+0x342>
 800f592:	e680      	b.n	800f296 <_printf_float+0xc2>
 800f594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f596:	2a01      	cmp	r2, #1
 800f598:	dc01      	bgt.n	800f59e <_printf_float+0x3ca>
 800f59a:	07db      	lsls	r3, r3, #31
 800f59c:	d538      	bpl.n	800f610 <_printf_float+0x43c>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	4642      	mov	r2, r8
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b8      	blx	r7
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	f43f ae74 	beq.w	800f296 <_printf_float+0xc2>
 800f5ae:	ee18 3a10 	vmov	r3, s16
 800f5b2:	4652      	mov	r2, sl
 800f5b4:	4631      	mov	r1, r6
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	47b8      	blx	r7
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	f43f ae6b 	beq.w	800f296 <_printf_float+0xc2>
 800f5c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f7f1 fa8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5cc:	b9d8      	cbnz	r0, 800f606 <_printf_float+0x432>
 800f5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5d0:	f108 0201 	add.w	r2, r8, #1
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	4631      	mov	r1, r6
 800f5d8:	4628      	mov	r0, r5
 800f5da:	47b8      	blx	r7
 800f5dc:	3001      	adds	r0, #1
 800f5de:	d10e      	bne.n	800f5fe <_printf_float+0x42a>
 800f5e0:	e659      	b.n	800f296 <_printf_float+0xc2>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	4652      	mov	r2, sl
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	47b8      	blx	r7
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	f43f ae52 	beq.w	800f296 <_printf_float+0xc2>
 800f5f2:	f108 0801 	add.w	r8, r8, #1
 800f5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	4543      	cmp	r3, r8
 800f5fc:	dcf1      	bgt.n	800f5e2 <_printf_float+0x40e>
 800f5fe:	464b      	mov	r3, r9
 800f600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f604:	e6dc      	b.n	800f3c0 <_printf_float+0x1ec>
 800f606:	f04f 0800 	mov.w	r8, #0
 800f60a:	f104 0a1a 	add.w	sl, r4, #26
 800f60e:	e7f2      	b.n	800f5f6 <_printf_float+0x422>
 800f610:	2301      	movs	r3, #1
 800f612:	4642      	mov	r2, r8
 800f614:	e7df      	b.n	800f5d6 <_printf_float+0x402>
 800f616:	2301      	movs	r3, #1
 800f618:	464a      	mov	r2, r9
 800f61a:	4631      	mov	r1, r6
 800f61c:	4628      	mov	r0, r5
 800f61e:	47b8      	blx	r7
 800f620:	3001      	adds	r0, #1
 800f622:	f43f ae38 	beq.w	800f296 <_printf_float+0xc2>
 800f626:	f108 0801 	add.w	r8, r8, #1
 800f62a:	68e3      	ldr	r3, [r4, #12]
 800f62c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f62e:	1a5b      	subs	r3, r3, r1
 800f630:	4543      	cmp	r3, r8
 800f632:	dcf0      	bgt.n	800f616 <_printf_float+0x442>
 800f634:	e6fa      	b.n	800f42c <_printf_float+0x258>
 800f636:	f04f 0800 	mov.w	r8, #0
 800f63a:	f104 0919 	add.w	r9, r4, #25
 800f63e:	e7f4      	b.n	800f62a <_printf_float+0x456>

0800f640 <_printf_common>:
 800f640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f644:	4616      	mov	r6, r2
 800f646:	4699      	mov	r9, r3
 800f648:	688a      	ldr	r2, [r1, #8]
 800f64a:	690b      	ldr	r3, [r1, #16]
 800f64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f650:	4293      	cmp	r3, r2
 800f652:	bfb8      	it	lt
 800f654:	4613      	movlt	r3, r2
 800f656:	6033      	str	r3, [r6, #0]
 800f658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f65c:	4607      	mov	r7, r0
 800f65e:	460c      	mov	r4, r1
 800f660:	b10a      	cbz	r2, 800f666 <_printf_common+0x26>
 800f662:	3301      	adds	r3, #1
 800f664:	6033      	str	r3, [r6, #0]
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	0699      	lsls	r1, r3, #26
 800f66a:	bf42      	ittt	mi
 800f66c:	6833      	ldrmi	r3, [r6, #0]
 800f66e:	3302      	addmi	r3, #2
 800f670:	6033      	strmi	r3, [r6, #0]
 800f672:	6825      	ldr	r5, [r4, #0]
 800f674:	f015 0506 	ands.w	r5, r5, #6
 800f678:	d106      	bne.n	800f688 <_printf_common+0x48>
 800f67a:	f104 0a19 	add.w	sl, r4, #25
 800f67e:	68e3      	ldr	r3, [r4, #12]
 800f680:	6832      	ldr	r2, [r6, #0]
 800f682:	1a9b      	subs	r3, r3, r2
 800f684:	42ab      	cmp	r3, r5
 800f686:	dc26      	bgt.n	800f6d6 <_printf_common+0x96>
 800f688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f68c:	1e13      	subs	r3, r2, #0
 800f68e:	6822      	ldr	r2, [r4, #0]
 800f690:	bf18      	it	ne
 800f692:	2301      	movne	r3, #1
 800f694:	0692      	lsls	r2, r2, #26
 800f696:	d42b      	bmi.n	800f6f0 <_printf_common+0xb0>
 800f698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f69c:	4649      	mov	r1, r9
 800f69e:	4638      	mov	r0, r7
 800f6a0:	47c0      	blx	r8
 800f6a2:	3001      	adds	r0, #1
 800f6a4:	d01e      	beq.n	800f6e4 <_printf_common+0xa4>
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	68e5      	ldr	r5, [r4, #12]
 800f6aa:	6832      	ldr	r2, [r6, #0]
 800f6ac:	f003 0306 	and.w	r3, r3, #6
 800f6b0:	2b04      	cmp	r3, #4
 800f6b2:	bf08      	it	eq
 800f6b4:	1aad      	subeq	r5, r5, r2
 800f6b6:	68a3      	ldr	r3, [r4, #8]
 800f6b8:	6922      	ldr	r2, [r4, #16]
 800f6ba:	bf0c      	ite	eq
 800f6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6c0:	2500      	movne	r5, #0
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	bfc4      	itt	gt
 800f6c6:	1a9b      	subgt	r3, r3, r2
 800f6c8:	18ed      	addgt	r5, r5, r3
 800f6ca:	2600      	movs	r6, #0
 800f6cc:	341a      	adds	r4, #26
 800f6ce:	42b5      	cmp	r5, r6
 800f6d0:	d11a      	bne.n	800f708 <_printf_common+0xc8>
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	e008      	b.n	800f6e8 <_printf_common+0xa8>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	4652      	mov	r2, sl
 800f6da:	4649      	mov	r1, r9
 800f6dc:	4638      	mov	r0, r7
 800f6de:	47c0      	blx	r8
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	d103      	bne.n	800f6ec <_printf_common+0xac>
 800f6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ec:	3501      	adds	r5, #1
 800f6ee:	e7c6      	b.n	800f67e <_printf_common+0x3e>
 800f6f0:	18e1      	adds	r1, r4, r3
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	2030      	movs	r0, #48	; 0x30
 800f6f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6fa:	4422      	add	r2, r4
 800f6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f704:	3302      	adds	r3, #2
 800f706:	e7c7      	b.n	800f698 <_printf_common+0x58>
 800f708:	2301      	movs	r3, #1
 800f70a:	4622      	mov	r2, r4
 800f70c:	4649      	mov	r1, r9
 800f70e:	4638      	mov	r0, r7
 800f710:	47c0      	blx	r8
 800f712:	3001      	adds	r0, #1
 800f714:	d0e6      	beq.n	800f6e4 <_printf_common+0xa4>
 800f716:	3601      	adds	r6, #1
 800f718:	e7d9      	b.n	800f6ce <_printf_common+0x8e>
	...

0800f71c <_printf_i>:
 800f71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f720:	460c      	mov	r4, r1
 800f722:	4691      	mov	r9, r2
 800f724:	7e27      	ldrb	r7, [r4, #24]
 800f726:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f728:	2f78      	cmp	r7, #120	; 0x78
 800f72a:	4680      	mov	r8, r0
 800f72c:	469a      	mov	sl, r3
 800f72e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f732:	d807      	bhi.n	800f744 <_printf_i+0x28>
 800f734:	2f62      	cmp	r7, #98	; 0x62
 800f736:	d80a      	bhi.n	800f74e <_printf_i+0x32>
 800f738:	2f00      	cmp	r7, #0
 800f73a:	f000 80d8 	beq.w	800f8ee <_printf_i+0x1d2>
 800f73e:	2f58      	cmp	r7, #88	; 0x58
 800f740:	f000 80a3 	beq.w	800f88a <_printf_i+0x16e>
 800f744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f74c:	e03a      	b.n	800f7c4 <_printf_i+0xa8>
 800f74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f752:	2b15      	cmp	r3, #21
 800f754:	d8f6      	bhi.n	800f744 <_printf_i+0x28>
 800f756:	a001      	add	r0, pc, #4	; (adr r0, 800f75c <_printf_i+0x40>)
 800f758:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f75c:	0800f7b5 	.word	0x0800f7b5
 800f760:	0800f7c9 	.word	0x0800f7c9
 800f764:	0800f745 	.word	0x0800f745
 800f768:	0800f745 	.word	0x0800f745
 800f76c:	0800f745 	.word	0x0800f745
 800f770:	0800f745 	.word	0x0800f745
 800f774:	0800f7c9 	.word	0x0800f7c9
 800f778:	0800f745 	.word	0x0800f745
 800f77c:	0800f745 	.word	0x0800f745
 800f780:	0800f745 	.word	0x0800f745
 800f784:	0800f745 	.word	0x0800f745
 800f788:	0800f8d5 	.word	0x0800f8d5
 800f78c:	0800f7f9 	.word	0x0800f7f9
 800f790:	0800f8b7 	.word	0x0800f8b7
 800f794:	0800f745 	.word	0x0800f745
 800f798:	0800f745 	.word	0x0800f745
 800f79c:	0800f8f7 	.word	0x0800f8f7
 800f7a0:	0800f745 	.word	0x0800f745
 800f7a4:	0800f7f9 	.word	0x0800f7f9
 800f7a8:	0800f745 	.word	0x0800f745
 800f7ac:	0800f745 	.word	0x0800f745
 800f7b0:	0800f8bf 	.word	0x0800f8bf
 800f7b4:	680b      	ldr	r3, [r1, #0]
 800f7b6:	1d1a      	adds	r2, r3, #4
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	600a      	str	r2, [r1, #0]
 800f7bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e0a3      	b.n	800f910 <_printf_i+0x1f4>
 800f7c8:	6825      	ldr	r5, [r4, #0]
 800f7ca:	6808      	ldr	r0, [r1, #0]
 800f7cc:	062e      	lsls	r6, r5, #24
 800f7ce:	f100 0304 	add.w	r3, r0, #4
 800f7d2:	d50a      	bpl.n	800f7ea <_printf_i+0xce>
 800f7d4:	6805      	ldr	r5, [r0, #0]
 800f7d6:	600b      	str	r3, [r1, #0]
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	da03      	bge.n	800f7e4 <_printf_i+0xc8>
 800f7dc:	232d      	movs	r3, #45	; 0x2d
 800f7de:	426d      	negs	r5, r5
 800f7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7e4:	485e      	ldr	r0, [pc, #376]	; (800f960 <_printf_i+0x244>)
 800f7e6:	230a      	movs	r3, #10
 800f7e8:	e019      	b.n	800f81e <_printf_i+0x102>
 800f7ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f7ee:	6805      	ldr	r5, [r0, #0]
 800f7f0:	600b      	str	r3, [r1, #0]
 800f7f2:	bf18      	it	ne
 800f7f4:	b22d      	sxthne	r5, r5
 800f7f6:	e7ef      	b.n	800f7d8 <_printf_i+0xbc>
 800f7f8:	680b      	ldr	r3, [r1, #0]
 800f7fa:	6825      	ldr	r5, [r4, #0]
 800f7fc:	1d18      	adds	r0, r3, #4
 800f7fe:	6008      	str	r0, [r1, #0]
 800f800:	0628      	lsls	r0, r5, #24
 800f802:	d501      	bpl.n	800f808 <_printf_i+0xec>
 800f804:	681d      	ldr	r5, [r3, #0]
 800f806:	e002      	b.n	800f80e <_printf_i+0xf2>
 800f808:	0669      	lsls	r1, r5, #25
 800f80a:	d5fb      	bpl.n	800f804 <_printf_i+0xe8>
 800f80c:	881d      	ldrh	r5, [r3, #0]
 800f80e:	4854      	ldr	r0, [pc, #336]	; (800f960 <_printf_i+0x244>)
 800f810:	2f6f      	cmp	r7, #111	; 0x6f
 800f812:	bf0c      	ite	eq
 800f814:	2308      	moveq	r3, #8
 800f816:	230a      	movne	r3, #10
 800f818:	2100      	movs	r1, #0
 800f81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f81e:	6866      	ldr	r6, [r4, #4]
 800f820:	60a6      	str	r6, [r4, #8]
 800f822:	2e00      	cmp	r6, #0
 800f824:	bfa2      	ittt	ge
 800f826:	6821      	ldrge	r1, [r4, #0]
 800f828:	f021 0104 	bicge.w	r1, r1, #4
 800f82c:	6021      	strge	r1, [r4, #0]
 800f82e:	b90d      	cbnz	r5, 800f834 <_printf_i+0x118>
 800f830:	2e00      	cmp	r6, #0
 800f832:	d04d      	beq.n	800f8d0 <_printf_i+0x1b4>
 800f834:	4616      	mov	r6, r2
 800f836:	fbb5 f1f3 	udiv	r1, r5, r3
 800f83a:	fb03 5711 	mls	r7, r3, r1, r5
 800f83e:	5dc7      	ldrb	r7, [r0, r7]
 800f840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f844:	462f      	mov	r7, r5
 800f846:	42bb      	cmp	r3, r7
 800f848:	460d      	mov	r5, r1
 800f84a:	d9f4      	bls.n	800f836 <_printf_i+0x11a>
 800f84c:	2b08      	cmp	r3, #8
 800f84e:	d10b      	bne.n	800f868 <_printf_i+0x14c>
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	07df      	lsls	r7, r3, #31
 800f854:	d508      	bpl.n	800f868 <_printf_i+0x14c>
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	6861      	ldr	r1, [r4, #4]
 800f85a:	4299      	cmp	r1, r3
 800f85c:	bfde      	ittt	le
 800f85e:	2330      	movle	r3, #48	; 0x30
 800f860:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f864:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f868:	1b92      	subs	r2, r2, r6
 800f86a:	6122      	str	r2, [r4, #16]
 800f86c:	f8cd a000 	str.w	sl, [sp]
 800f870:	464b      	mov	r3, r9
 800f872:	aa03      	add	r2, sp, #12
 800f874:	4621      	mov	r1, r4
 800f876:	4640      	mov	r0, r8
 800f878:	f7ff fee2 	bl	800f640 <_printf_common>
 800f87c:	3001      	adds	r0, #1
 800f87e:	d14c      	bne.n	800f91a <_printf_i+0x1fe>
 800f880:	f04f 30ff 	mov.w	r0, #4294967295
 800f884:	b004      	add	sp, #16
 800f886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88a:	4835      	ldr	r0, [pc, #212]	; (800f960 <_printf_i+0x244>)
 800f88c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	680e      	ldr	r6, [r1, #0]
 800f894:	061f      	lsls	r7, r3, #24
 800f896:	f856 5b04 	ldr.w	r5, [r6], #4
 800f89a:	600e      	str	r6, [r1, #0]
 800f89c:	d514      	bpl.n	800f8c8 <_printf_i+0x1ac>
 800f89e:	07d9      	lsls	r1, r3, #31
 800f8a0:	bf44      	itt	mi
 800f8a2:	f043 0320 	orrmi.w	r3, r3, #32
 800f8a6:	6023      	strmi	r3, [r4, #0]
 800f8a8:	b91d      	cbnz	r5, 800f8b2 <_printf_i+0x196>
 800f8aa:	6823      	ldr	r3, [r4, #0]
 800f8ac:	f023 0320 	bic.w	r3, r3, #32
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	2310      	movs	r3, #16
 800f8b4:	e7b0      	b.n	800f818 <_printf_i+0xfc>
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	f043 0320 	orr.w	r3, r3, #32
 800f8bc:	6023      	str	r3, [r4, #0]
 800f8be:	2378      	movs	r3, #120	; 0x78
 800f8c0:	4828      	ldr	r0, [pc, #160]	; (800f964 <_printf_i+0x248>)
 800f8c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8c6:	e7e3      	b.n	800f890 <_printf_i+0x174>
 800f8c8:	065e      	lsls	r6, r3, #25
 800f8ca:	bf48      	it	mi
 800f8cc:	b2ad      	uxthmi	r5, r5
 800f8ce:	e7e6      	b.n	800f89e <_printf_i+0x182>
 800f8d0:	4616      	mov	r6, r2
 800f8d2:	e7bb      	b.n	800f84c <_printf_i+0x130>
 800f8d4:	680b      	ldr	r3, [r1, #0]
 800f8d6:	6826      	ldr	r6, [r4, #0]
 800f8d8:	6960      	ldr	r0, [r4, #20]
 800f8da:	1d1d      	adds	r5, r3, #4
 800f8dc:	600d      	str	r5, [r1, #0]
 800f8de:	0635      	lsls	r5, r6, #24
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	d501      	bpl.n	800f8e8 <_printf_i+0x1cc>
 800f8e4:	6018      	str	r0, [r3, #0]
 800f8e6:	e002      	b.n	800f8ee <_printf_i+0x1d2>
 800f8e8:	0671      	lsls	r1, r6, #25
 800f8ea:	d5fb      	bpl.n	800f8e4 <_printf_i+0x1c8>
 800f8ec:	8018      	strh	r0, [r3, #0]
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	6123      	str	r3, [r4, #16]
 800f8f2:	4616      	mov	r6, r2
 800f8f4:	e7ba      	b.n	800f86c <_printf_i+0x150>
 800f8f6:	680b      	ldr	r3, [r1, #0]
 800f8f8:	1d1a      	adds	r2, r3, #4
 800f8fa:	600a      	str	r2, [r1, #0]
 800f8fc:	681e      	ldr	r6, [r3, #0]
 800f8fe:	6862      	ldr	r2, [r4, #4]
 800f900:	2100      	movs	r1, #0
 800f902:	4630      	mov	r0, r6
 800f904:	f7f0 fc7c 	bl	8000200 <memchr>
 800f908:	b108      	cbz	r0, 800f90e <_printf_i+0x1f2>
 800f90a:	1b80      	subs	r0, r0, r6
 800f90c:	6060      	str	r0, [r4, #4]
 800f90e:	6863      	ldr	r3, [r4, #4]
 800f910:	6123      	str	r3, [r4, #16]
 800f912:	2300      	movs	r3, #0
 800f914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f918:	e7a8      	b.n	800f86c <_printf_i+0x150>
 800f91a:	6923      	ldr	r3, [r4, #16]
 800f91c:	4632      	mov	r2, r6
 800f91e:	4649      	mov	r1, r9
 800f920:	4640      	mov	r0, r8
 800f922:	47d0      	blx	sl
 800f924:	3001      	adds	r0, #1
 800f926:	d0ab      	beq.n	800f880 <_printf_i+0x164>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	079b      	lsls	r3, r3, #30
 800f92c:	d413      	bmi.n	800f956 <_printf_i+0x23a>
 800f92e:	68e0      	ldr	r0, [r4, #12]
 800f930:	9b03      	ldr	r3, [sp, #12]
 800f932:	4298      	cmp	r0, r3
 800f934:	bfb8      	it	lt
 800f936:	4618      	movlt	r0, r3
 800f938:	e7a4      	b.n	800f884 <_printf_i+0x168>
 800f93a:	2301      	movs	r3, #1
 800f93c:	4632      	mov	r2, r6
 800f93e:	4649      	mov	r1, r9
 800f940:	4640      	mov	r0, r8
 800f942:	47d0      	blx	sl
 800f944:	3001      	adds	r0, #1
 800f946:	d09b      	beq.n	800f880 <_printf_i+0x164>
 800f948:	3501      	adds	r5, #1
 800f94a:	68e3      	ldr	r3, [r4, #12]
 800f94c:	9903      	ldr	r1, [sp, #12]
 800f94e:	1a5b      	subs	r3, r3, r1
 800f950:	42ab      	cmp	r3, r5
 800f952:	dcf2      	bgt.n	800f93a <_printf_i+0x21e>
 800f954:	e7eb      	b.n	800f92e <_printf_i+0x212>
 800f956:	2500      	movs	r5, #0
 800f958:	f104 0619 	add.w	r6, r4, #25
 800f95c:	e7f5      	b.n	800f94a <_printf_i+0x22e>
 800f95e:	bf00      	nop
 800f960:	0801351e 	.word	0x0801351e
 800f964:	0801352f 	.word	0x0801352f

0800f968 <sniprintf>:
 800f968:	b40c      	push	{r2, r3}
 800f96a:	b530      	push	{r4, r5, lr}
 800f96c:	4b17      	ldr	r3, [pc, #92]	; (800f9cc <sniprintf+0x64>)
 800f96e:	1e0c      	subs	r4, r1, #0
 800f970:	681d      	ldr	r5, [r3, #0]
 800f972:	b09d      	sub	sp, #116	; 0x74
 800f974:	da08      	bge.n	800f988 <sniprintf+0x20>
 800f976:	238b      	movs	r3, #139	; 0x8b
 800f978:	602b      	str	r3, [r5, #0]
 800f97a:	f04f 30ff 	mov.w	r0, #4294967295
 800f97e:	b01d      	add	sp, #116	; 0x74
 800f980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f984:	b002      	add	sp, #8
 800f986:	4770      	bx	lr
 800f988:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f98c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f990:	bf14      	ite	ne
 800f992:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f996:	4623      	moveq	r3, r4
 800f998:	9304      	str	r3, [sp, #16]
 800f99a:	9307      	str	r3, [sp, #28]
 800f99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9a0:	9002      	str	r0, [sp, #8]
 800f9a2:	9006      	str	r0, [sp, #24]
 800f9a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f9aa:	ab21      	add	r3, sp, #132	; 0x84
 800f9ac:	a902      	add	r1, sp, #8
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	f001 fb39 	bl	8011028 <_svfiprintf_r>
 800f9b6:	1c43      	adds	r3, r0, #1
 800f9b8:	bfbc      	itt	lt
 800f9ba:	238b      	movlt	r3, #139	; 0x8b
 800f9bc:	602b      	strlt	r3, [r5, #0]
 800f9be:	2c00      	cmp	r4, #0
 800f9c0:	d0dd      	beq.n	800f97e <sniprintf+0x16>
 800f9c2:	9b02      	ldr	r3, [sp, #8]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
 800f9c8:	e7d9      	b.n	800f97e <sniprintf+0x16>
 800f9ca:	bf00      	nop
 800f9cc:	20000018 	.word	0x20000018

0800f9d0 <strncpy>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	3901      	subs	r1, #1
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	b132      	cbz	r2, 800f9e6 <strncpy+0x16>
 800f9d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f9dc:	f803 4b01 	strb.w	r4, [r3], #1
 800f9e0:	3a01      	subs	r2, #1
 800f9e2:	2c00      	cmp	r4, #0
 800f9e4:	d1f7      	bne.n	800f9d6 <strncpy+0x6>
 800f9e6:	441a      	add	r2, r3
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d100      	bne.n	800f9f0 <strncpy+0x20>
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	f803 1b01 	strb.w	r1, [r3], #1
 800f9f4:	e7f9      	b.n	800f9ea <strncpy+0x1a>

0800f9f6 <quorem>:
 800f9f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fa:	6903      	ldr	r3, [r0, #16]
 800f9fc:	690c      	ldr	r4, [r1, #16]
 800f9fe:	42a3      	cmp	r3, r4
 800fa00:	4607      	mov	r7, r0
 800fa02:	f2c0 8081 	blt.w	800fb08 <quorem+0x112>
 800fa06:	3c01      	subs	r4, #1
 800fa08:	f101 0814 	add.w	r8, r1, #20
 800fa0c:	f100 0514 	add.w	r5, r0, #20
 800fa10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	429a      	cmp	r2, r3
 800fa22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa2a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa2e:	d331      	bcc.n	800fa94 <quorem+0x9e>
 800fa30:	f04f 0e00 	mov.w	lr, #0
 800fa34:	4640      	mov	r0, r8
 800fa36:	46ac      	mov	ip, r5
 800fa38:	46f2      	mov	sl, lr
 800fa3a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa3e:	b293      	uxth	r3, r2
 800fa40:	fb06 e303 	mla	r3, r6, r3, lr
 800fa44:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	ebaa 0303 	sub.w	r3, sl, r3
 800fa4e:	0c12      	lsrs	r2, r2, #16
 800fa50:	f8dc a000 	ldr.w	sl, [ip]
 800fa54:	fb06 e202 	mla	r2, r6, r2, lr
 800fa58:	fa13 f38a 	uxtah	r3, r3, sl
 800fa5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa60:	fa1f fa82 	uxth.w	sl, r2
 800fa64:	f8dc 2000 	ldr.w	r2, [ip]
 800fa68:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fa6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa76:	4581      	cmp	r9, r0
 800fa78:	f84c 3b04 	str.w	r3, [ip], #4
 800fa7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa80:	d2db      	bcs.n	800fa3a <quorem+0x44>
 800fa82:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa86:	b92b      	cbnz	r3, 800fa94 <quorem+0x9e>
 800fa88:	9b01      	ldr	r3, [sp, #4]
 800fa8a:	3b04      	subs	r3, #4
 800fa8c:	429d      	cmp	r5, r3
 800fa8e:	461a      	mov	r2, r3
 800fa90:	d32e      	bcc.n	800faf0 <quorem+0xfa>
 800fa92:	613c      	str	r4, [r7, #16]
 800fa94:	4638      	mov	r0, r7
 800fa96:	f001 f8b1 	bl	8010bfc <__mcmp>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	db24      	blt.n	800fae8 <quorem+0xf2>
 800fa9e:	3601      	adds	r6, #1
 800faa0:	4628      	mov	r0, r5
 800faa2:	f04f 0c00 	mov.w	ip, #0
 800faa6:	f858 2b04 	ldr.w	r2, [r8], #4
 800faaa:	f8d0 e000 	ldr.w	lr, [r0]
 800faae:	b293      	uxth	r3, r2
 800fab0:	ebac 0303 	sub.w	r3, ip, r3
 800fab4:	0c12      	lsrs	r2, r2, #16
 800fab6:	fa13 f38e 	uxtah	r3, r3, lr
 800faba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fabe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fac8:	45c1      	cmp	r9, r8
 800faca:	f840 3b04 	str.w	r3, [r0], #4
 800face:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fad2:	d2e8      	bcs.n	800faa6 <quorem+0xb0>
 800fad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fadc:	b922      	cbnz	r2, 800fae8 <quorem+0xf2>
 800fade:	3b04      	subs	r3, #4
 800fae0:	429d      	cmp	r5, r3
 800fae2:	461a      	mov	r2, r3
 800fae4:	d30a      	bcc.n	800fafc <quorem+0x106>
 800fae6:	613c      	str	r4, [r7, #16]
 800fae8:	4630      	mov	r0, r6
 800faea:	b003      	add	sp, #12
 800faec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf0:	6812      	ldr	r2, [r2, #0]
 800faf2:	3b04      	subs	r3, #4
 800faf4:	2a00      	cmp	r2, #0
 800faf6:	d1cc      	bne.n	800fa92 <quorem+0x9c>
 800faf8:	3c01      	subs	r4, #1
 800fafa:	e7c7      	b.n	800fa8c <quorem+0x96>
 800fafc:	6812      	ldr	r2, [r2, #0]
 800fafe:	3b04      	subs	r3, #4
 800fb00:	2a00      	cmp	r2, #0
 800fb02:	d1f0      	bne.n	800fae6 <quorem+0xf0>
 800fb04:	3c01      	subs	r4, #1
 800fb06:	e7eb      	b.n	800fae0 <quorem+0xea>
 800fb08:	2000      	movs	r0, #0
 800fb0a:	e7ee      	b.n	800faea <quorem+0xf4>
 800fb0c:	0000      	movs	r0, r0
	...

0800fb10 <_dtoa_r>:
 800fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb14:	ed2d 8b02 	vpush	{d8}
 800fb18:	ec57 6b10 	vmov	r6, r7, d0
 800fb1c:	b095      	sub	sp, #84	; 0x54
 800fb1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb24:	9105      	str	r1, [sp, #20]
 800fb26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	9209      	str	r2, [sp, #36]	; 0x24
 800fb2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb30:	b975      	cbnz	r5, 800fb50 <_dtoa_r+0x40>
 800fb32:	2010      	movs	r0, #16
 800fb34:	f000 fddc 	bl	80106f0 <malloc>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	6260      	str	r0, [r4, #36]	; 0x24
 800fb3c:	b920      	cbnz	r0, 800fb48 <_dtoa_r+0x38>
 800fb3e:	4bb2      	ldr	r3, [pc, #712]	; (800fe08 <_dtoa_r+0x2f8>)
 800fb40:	21ea      	movs	r1, #234	; 0xea
 800fb42:	48b2      	ldr	r0, [pc, #712]	; (800fe0c <_dtoa_r+0x2fc>)
 800fb44:	f001 fb80 	bl	8011248 <__assert_func>
 800fb48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb4c:	6005      	str	r5, [r0, #0]
 800fb4e:	60c5      	str	r5, [r0, #12]
 800fb50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb52:	6819      	ldr	r1, [r3, #0]
 800fb54:	b151      	cbz	r1, 800fb6c <_dtoa_r+0x5c>
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	604a      	str	r2, [r1, #4]
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	4093      	lsls	r3, r2
 800fb5e:	608b      	str	r3, [r1, #8]
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 fe0d 	bl	8010780 <_Bfree>
 800fb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]
 800fb6c:	1e3b      	subs	r3, r7, #0
 800fb6e:	bfb9      	ittee	lt
 800fb70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb74:	9303      	strlt	r3, [sp, #12]
 800fb76:	2300      	movge	r3, #0
 800fb78:	f8c8 3000 	strge.w	r3, [r8]
 800fb7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fb80:	4ba3      	ldr	r3, [pc, #652]	; (800fe10 <_dtoa_r+0x300>)
 800fb82:	bfbc      	itt	lt
 800fb84:	2201      	movlt	r2, #1
 800fb86:	f8c8 2000 	strlt.w	r2, [r8]
 800fb8a:	ea33 0309 	bics.w	r3, r3, r9
 800fb8e:	d11b      	bne.n	800fbc8 <_dtoa_r+0xb8>
 800fb90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb92:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb96:	6013      	str	r3, [r2, #0]
 800fb98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb9c:	4333      	orrs	r3, r6
 800fb9e:	f000 857a 	beq.w	8010696 <_dtoa_r+0xb86>
 800fba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fba4:	b963      	cbnz	r3, 800fbc0 <_dtoa_r+0xb0>
 800fba6:	4b9b      	ldr	r3, [pc, #620]	; (800fe14 <_dtoa_r+0x304>)
 800fba8:	e024      	b.n	800fbf4 <_dtoa_r+0xe4>
 800fbaa:	4b9b      	ldr	r3, [pc, #620]	; (800fe18 <_dtoa_r+0x308>)
 800fbac:	9300      	str	r3, [sp, #0]
 800fbae:	3308      	adds	r3, #8
 800fbb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	9800      	ldr	r0, [sp, #0]
 800fbb6:	b015      	add	sp, #84	; 0x54
 800fbb8:	ecbd 8b02 	vpop	{d8}
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc0:	4b94      	ldr	r3, [pc, #592]	; (800fe14 <_dtoa_r+0x304>)
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	3303      	adds	r3, #3
 800fbc6:	e7f3      	b.n	800fbb0 <_dtoa_r+0xa0>
 800fbc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	ec51 0b17 	vmov	r0, r1, d7
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fbd8:	f7f0 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 800fbdc:	4680      	mov	r8, r0
 800fbde:	b158      	cbz	r0, 800fbf8 <_dtoa_r+0xe8>
 800fbe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 8551 	beq.w	8010690 <_dtoa_r+0xb80>
 800fbee:	488b      	ldr	r0, [pc, #556]	; (800fe1c <_dtoa_r+0x30c>)
 800fbf0:	6018      	str	r0, [r3, #0]
 800fbf2:	1e43      	subs	r3, r0, #1
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	e7dd      	b.n	800fbb4 <_dtoa_r+0xa4>
 800fbf8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fbfc:	aa12      	add	r2, sp, #72	; 0x48
 800fbfe:	a913      	add	r1, sp, #76	; 0x4c
 800fc00:	4620      	mov	r0, r4
 800fc02:	f001 f89f 	bl	8010d44 <__d2b>
 800fc06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc0a:	4683      	mov	fp, r0
 800fc0c:	2d00      	cmp	r5, #0
 800fc0e:	d07c      	beq.n	800fd0a <_dtoa_r+0x1fa>
 800fc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fc16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fc1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fc22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fc26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc2a:	4b7d      	ldr	r3, [pc, #500]	; (800fe20 <_dtoa_r+0x310>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	4630      	mov	r0, r6
 800fc30:	4639      	mov	r1, r7
 800fc32:	f7f0 fb39 	bl	80002a8 <__aeabi_dsub>
 800fc36:	a36e      	add	r3, pc, #440	; (adr r3, 800fdf0 <_dtoa_r+0x2e0>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f7f0 fcec 	bl	8000618 <__aeabi_dmul>
 800fc40:	a36d      	add	r3, pc, #436	; (adr r3, 800fdf8 <_dtoa_r+0x2e8>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	f7f0 fb31 	bl	80002ac <__adddf3>
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	460f      	mov	r7, r1
 800fc50:	f7f0 fc78 	bl	8000544 <__aeabi_i2d>
 800fc54:	a36a      	add	r3, pc, #424	; (adr r3, 800fe00 <_dtoa_r+0x2f0>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	f7f0 fcdd 	bl	8000618 <__aeabi_dmul>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4630      	mov	r0, r6
 800fc64:	4639      	mov	r1, r7
 800fc66:	f7f0 fb21 	bl	80002ac <__adddf3>
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	460f      	mov	r7, r1
 800fc6e:	f7f0 ff83 	bl	8000b78 <__aeabi_d2iz>
 800fc72:	2200      	movs	r2, #0
 800fc74:	4682      	mov	sl, r0
 800fc76:	2300      	movs	r3, #0
 800fc78:	4630      	mov	r0, r6
 800fc7a:	4639      	mov	r1, r7
 800fc7c:	f7f0 ff3e 	bl	8000afc <__aeabi_dcmplt>
 800fc80:	b148      	cbz	r0, 800fc96 <_dtoa_r+0x186>
 800fc82:	4650      	mov	r0, sl
 800fc84:	f7f0 fc5e 	bl	8000544 <__aeabi_i2d>
 800fc88:	4632      	mov	r2, r6
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	f7f0 ff2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc90:	b908      	cbnz	r0, 800fc96 <_dtoa_r+0x186>
 800fc92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc96:	f1ba 0f16 	cmp.w	sl, #22
 800fc9a:	d854      	bhi.n	800fd46 <_dtoa_r+0x236>
 800fc9c:	4b61      	ldr	r3, [pc, #388]	; (800fe24 <_dtoa_r+0x314>)
 800fc9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fcaa:	f7f0 ff27 	bl	8000afc <__aeabi_dcmplt>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d04b      	beq.n	800fd4a <_dtoa_r+0x23a>
 800fcb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	930e      	str	r3, [sp, #56]	; 0x38
 800fcba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcbc:	1b5d      	subs	r5, r3, r5
 800fcbe:	1e6b      	subs	r3, r5, #1
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	bf43      	ittte	mi
 800fcc4:	2300      	movmi	r3, #0
 800fcc6:	f1c5 0801 	rsbmi	r8, r5, #1
 800fcca:	9304      	strmi	r3, [sp, #16]
 800fccc:	f04f 0800 	movpl.w	r8, #0
 800fcd0:	f1ba 0f00 	cmp.w	sl, #0
 800fcd4:	db3b      	blt.n	800fd4e <_dtoa_r+0x23e>
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fcdc:	4453      	add	r3, sl
 800fcde:	9304      	str	r3, [sp, #16]
 800fce0:	2300      	movs	r3, #0
 800fce2:	9306      	str	r3, [sp, #24]
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	2b09      	cmp	r3, #9
 800fce8:	d869      	bhi.n	800fdbe <_dtoa_r+0x2ae>
 800fcea:	2b05      	cmp	r3, #5
 800fcec:	bfc4      	itt	gt
 800fcee:	3b04      	subgt	r3, #4
 800fcf0:	9305      	strgt	r3, [sp, #20]
 800fcf2:	9b05      	ldr	r3, [sp, #20]
 800fcf4:	f1a3 0302 	sub.w	r3, r3, #2
 800fcf8:	bfcc      	ite	gt
 800fcfa:	2500      	movgt	r5, #0
 800fcfc:	2501      	movle	r5, #1
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d869      	bhi.n	800fdd6 <_dtoa_r+0x2c6>
 800fd02:	e8df f003 	tbb	[pc, r3]
 800fd06:	4e2c      	.short	0x4e2c
 800fd08:	5a4c      	.short	0x5a4c
 800fd0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fd0e:	441d      	add	r5, r3
 800fd10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd14:	2b20      	cmp	r3, #32
 800fd16:	bfc1      	itttt	gt
 800fd18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fd20:	fa09 f303 	lslgt.w	r3, r9, r3
 800fd24:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fd28:	bfda      	itte	le
 800fd2a:	f1c3 0320 	rsble	r3, r3, #32
 800fd2e:	fa06 f003 	lslle.w	r0, r6, r3
 800fd32:	4318      	orrgt	r0, r3
 800fd34:	f7f0 fbf6 	bl	8000524 <__aeabi_ui2d>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fd40:	3d01      	subs	r5, #1
 800fd42:	9310      	str	r3, [sp, #64]	; 0x40
 800fd44:	e771      	b.n	800fc2a <_dtoa_r+0x11a>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e7b6      	b.n	800fcb8 <_dtoa_r+0x1a8>
 800fd4a:	900e      	str	r0, [sp, #56]	; 0x38
 800fd4c:	e7b5      	b.n	800fcba <_dtoa_r+0x1aa>
 800fd4e:	f1ca 0300 	rsb	r3, sl, #0
 800fd52:	9306      	str	r3, [sp, #24]
 800fd54:	2300      	movs	r3, #0
 800fd56:	eba8 080a 	sub.w	r8, r8, sl
 800fd5a:	930d      	str	r3, [sp, #52]	; 0x34
 800fd5c:	e7c2      	b.n	800fce4 <_dtoa_r+0x1d4>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9308      	str	r3, [sp, #32]
 800fd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dc39      	bgt.n	800fddc <_dtoa_r+0x2cc>
 800fd68:	f04f 0901 	mov.w	r9, #1
 800fd6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fd70:	464b      	mov	r3, r9
 800fd72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fd76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fd78:	2200      	movs	r2, #0
 800fd7a:	6042      	str	r2, [r0, #4]
 800fd7c:	2204      	movs	r2, #4
 800fd7e:	f102 0614 	add.w	r6, r2, #20
 800fd82:	429e      	cmp	r6, r3
 800fd84:	6841      	ldr	r1, [r0, #4]
 800fd86:	d92f      	bls.n	800fde8 <_dtoa_r+0x2d8>
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f000 fcb9 	bl	8010700 <_Balloc>
 800fd8e:	9000      	str	r0, [sp, #0]
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d14b      	bne.n	800fe2c <_dtoa_r+0x31c>
 800fd94:	4b24      	ldr	r3, [pc, #144]	; (800fe28 <_dtoa_r+0x318>)
 800fd96:	4602      	mov	r2, r0
 800fd98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd9c:	e6d1      	b.n	800fb42 <_dtoa_r+0x32>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e7de      	b.n	800fd60 <_dtoa_r+0x250>
 800fda2:	2300      	movs	r3, #0
 800fda4:	9308      	str	r3, [sp, #32]
 800fda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fda8:	eb0a 0903 	add.w	r9, sl, r3
 800fdac:	f109 0301 	add.w	r3, r9, #1
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	9301      	str	r3, [sp, #4]
 800fdb4:	bfb8      	it	lt
 800fdb6:	2301      	movlt	r3, #1
 800fdb8:	e7dd      	b.n	800fd76 <_dtoa_r+0x266>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e7f2      	b.n	800fda4 <_dtoa_r+0x294>
 800fdbe:	2501      	movs	r5, #1
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9305      	str	r3, [sp, #20]
 800fdc4:	9508      	str	r5, [sp, #32]
 800fdc6:	f04f 39ff 	mov.w	r9, #4294967295
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fdd0:	2312      	movs	r3, #18
 800fdd2:	9209      	str	r2, [sp, #36]	; 0x24
 800fdd4:	e7cf      	b.n	800fd76 <_dtoa_r+0x266>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	9308      	str	r3, [sp, #32]
 800fdda:	e7f4      	b.n	800fdc6 <_dtoa_r+0x2b6>
 800fddc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fde0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fde4:	464b      	mov	r3, r9
 800fde6:	e7c6      	b.n	800fd76 <_dtoa_r+0x266>
 800fde8:	3101      	adds	r1, #1
 800fdea:	6041      	str	r1, [r0, #4]
 800fdec:	0052      	lsls	r2, r2, #1
 800fdee:	e7c6      	b.n	800fd7e <_dtoa_r+0x26e>
 800fdf0:	636f4361 	.word	0x636f4361
 800fdf4:	3fd287a7 	.word	0x3fd287a7
 800fdf8:	8b60c8b3 	.word	0x8b60c8b3
 800fdfc:	3fc68a28 	.word	0x3fc68a28
 800fe00:	509f79fb 	.word	0x509f79fb
 800fe04:	3fd34413 	.word	0x3fd34413
 800fe08:	0801354d 	.word	0x0801354d
 800fe0c:	08013564 	.word	0x08013564
 800fe10:	7ff00000 	.word	0x7ff00000
 800fe14:	08013549 	.word	0x08013549
 800fe18:	08013540 	.word	0x08013540
 800fe1c:	0801351d 	.word	0x0801351d
 800fe20:	3ff80000 	.word	0x3ff80000
 800fe24:	08013660 	.word	0x08013660
 800fe28:	080135c3 	.word	0x080135c3
 800fe2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe2e:	9a00      	ldr	r2, [sp, #0]
 800fe30:	601a      	str	r2, [r3, #0]
 800fe32:	9b01      	ldr	r3, [sp, #4]
 800fe34:	2b0e      	cmp	r3, #14
 800fe36:	f200 80ad 	bhi.w	800ff94 <_dtoa_r+0x484>
 800fe3a:	2d00      	cmp	r5, #0
 800fe3c:	f000 80aa 	beq.w	800ff94 <_dtoa_r+0x484>
 800fe40:	f1ba 0f00 	cmp.w	sl, #0
 800fe44:	dd36      	ble.n	800feb4 <_dtoa_r+0x3a4>
 800fe46:	4ac3      	ldr	r2, [pc, #780]	; (8010154 <_dtoa_r+0x644>)
 800fe48:	f00a 030f 	and.w	r3, sl, #15
 800fe4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe50:	ed93 7b00 	vldr	d7, [r3]
 800fe54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fe58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800fe5c:	eeb0 8a47 	vmov.f32	s16, s14
 800fe60:	eef0 8a67 	vmov.f32	s17, s15
 800fe64:	d016      	beq.n	800fe94 <_dtoa_r+0x384>
 800fe66:	4bbc      	ldr	r3, [pc, #752]	; (8010158 <_dtoa_r+0x648>)
 800fe68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe70:	f7f0 fcfc 	bl	800086c <__aeabi_ddiv>
 800fe74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe78:	f007 070f 	and.w	r7, r7, #15
 800fe7c:	2503      	movs	r5, #3
 800fe7e:	4eb6      	ldr	r6, [pc, #728]	; (8010158 <_dtoa_r+0x648>)
 800fe80:	b957      	cbnz	r7, 800fe98 <_dtoa_r+0x388>
 800fe82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe86:	ec53 2b18 	vmov	r2, r3, d8
 800fe8a:	f7f0 fcef 	bl	800086c <__aeabi_ddiv>
 800fe8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe92:	e029      	b.n	800fee8 <_dtoa_r+0x3d8>
 800fe94:	2502      	movs	r5, #2
 800fe96:	e7f2      	b.n	800fe7e <_dtoa_r+0x36e>
 800fe98:	07f9      	lsls	r1, r7, #31
 800fe9a:	d508      	bpl.n	800feae <_dtoa_r+0x39e>
 800fe9c:	ec51 0b18 	vmov	r0, r1, d8
 800fea0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fea4:	f7f0 fbb8 	bl	8000618 <__aeabi_dmul>
 800fea8:	ec41 0b18 	vmov	d8, r0, r1
 800feac:	3501      	adds	r5, #1
 800feae:	107f      	asrs	r7, r7, #1
 800feb0:	3608      	adds	r6, #8
 800feb2:	e7e5      	b.n	800fe80 <_dtoa_r+0x370>
 800feb4:	f000 80a6 	beq.w	8010004 <_dtoa_r+0x4f4>
 800feb8:	f1ca 0600 	rsb	r6, sl, #0
 800febc:	4ba5      	ldr	r3, [pc, #660]	; (8010154 <_dtoa_r+0x644>)
 800febe:	4fa6      	ldr	r7, [pc, #664]	; (8010158 <_dtoa_r+0x648>)
 800fec0:	f006 020f 	and.w	r2, r6, #15
 800fec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fed0:	f7f0 fba2 	bl	8000618 <__aeabi_dmul>
 800fed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fed8:	1136      	asrs	r6, r6, #4
 800feda:	2300      	movs	r3, #0
 800fedc:	2502      	movs	r5, #2
 800fede:	2e00      	cmp	r6, #0
 800fee0:	f040 8085 	bne.w	800ffee <_dtoa_r+0x4de>
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1d2      	bne.n	800fe8e <_dtoa_r+0x37e>
 800fee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feea:	2b00      	cmp	r3, #0
 800feec:	f000 808c 	beq.w	8010008 <_dtoa_r+0x4f8>
 800fef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fef4:	4b99      	ldr	r3, [pc, #612]	; (801015c <_dtoa_r+0x64c>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	4630      	mov	r0, r6
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f0 fdfe 	bl	8000afc <__aeabi_dcmplt>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	f000 8081 	beq.w	8010008 <_dtoa_r+0x4f8>
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d07d      	beq.n	8010008 <_dtoa_r+0x4f8>
 800ff0c:	f1b9 0f00 	cmp.w	r9, #0
 800ff10:	dd3c      	ble.n	800ff8c <_dtoa_r+0x47c>
 800ff12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ff16:	9307      	str	r3, [sp, #28]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4b91      	ldr	r3, [pc, #580]	; (8010160 <_dtoa_r+0x650>)
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	4639      	mov	r1, r7
 800ff20:	f7f0 fb7a 	bl	8000618 <__aeabi_dmul>
 800ff24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff28:	3501      	adds	r5, #1
 800ff2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ff2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ff32:	4628      	mov	r0, r5
 800ff34:	f7f0 fb06 	bl	8000544 <__aeabi_i2d>
 800ff38:	4632      	mov	r2, r6
 800ff3a:	463b      	mov	r3, r7
 800ff3c:	f7f0 fb6c 	bl	8000618 <__aeabi_dmul>
 800ff40:	4b88      	ldr	r3, [pc, #544]	; (8010164 <_dtoa_r+0x654>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	f7f0 f9b2 	bl	80002ac <__adddf3>
 800ff48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ff4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff50:	9303      	str	r3, [sp, #12]
 800ff52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d15c      	bne.n	8010012 <_dtoa_r+0x502>
 800ff58:	4b83      	ldr	r3, [pc, #524]	; (8010168 <_dtoa_r+0x658>)
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	4630      	mov	r0, r6
 800ff5e:	4639      	mov	r1, r7
 800ff60:	f7f0 f9a2 	bl	80002a8 <__aeabi_dsub>
 800ff64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff68:	4606      	mov	r6, r0
 800ff6a:	460f      	mov	r7, r1
 800ff6c:	f7f0 fde4 	bl	8000b38 <__aeabi_dcmpgt>
 800ff70:	2800      	cmp	r0, #0
 800ff72:	f040 8296 	bne.w	80104a2 <_dtoa_r+0x992>
 800ff76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff80:	4639      	mov	r1, r7
 800ff82:	f7f0 fdbb 	bl	8000afc <__aeabi_dcmplt>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	f040 8288 	bne.w	801049c <_dtoa_r+0x98c>
 800ff8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ff90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f2c0 8158 	blt.w	801024c <_dtoa_r+0x73c>
 800ff9c:	f1ba 0f0e 	cmp.w	sl, #14
 800ffa0:	f300 8154 	bgt.w	801024c <_dtoa_r+0x73c>
 800ffa4:	4b6b      	ldr	r3, [pc, #428]	; (8010154 <_dtoa_r+0x644>)
 800ffa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ffaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f280 80e3 	bge.w	801017c <_dtoa_r+0x66c>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f300 80df 	bgt.w	801017c <_dtoa_r+0x66c>
 800ffbe:	f040 826d 	bne.w	801049c <_dtoa_r+0x98c>
 800ffc2:	4b69      	ldr	r3, [pc, #420]	; (8010168 <_dtoa_r+0x658>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	4640      	mov	r0, r8
 800ffc8:	4649      	mov	r1, r9
 800ffca:	f7f0 fb25 	bl	8000618 <__aeabi_dmul>
 800ffce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffd2:	f7f0 fda7 	bl	8000b24 <__aeabi_dcmpge>
 800ffd6:	9e01      	ldr	r6, [sp, #4]
 800ffd8:	4637      	mov	r7, r6
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	f040 8243 	bne.w	8010466 <_dtoa_r+0x956>
 800ffe0:	9d00      	ldr	r5, [sp, #0]
 800ffe2:	2331      	movs	r3, #49	; 0x31
 800ffe4:	f805 3b01 	strb.w	r3, [r5], #1
 800ffe8:	f10a 0a01 	add.w	sl, sl, #1
 800ffec:	e23f      	b.n	801046e <_dtoa_r+0x95e>
 800ffee:	07f2      	lsls	r2, r6, #31
 800fff0:	d505      	bpl.n	800fffe <_dtoa_r+0x4ee>
 800fff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fff6:	f7f0 fb0f 	bl	8000618 <__aeabi_dmul>
 800fffa:	3501      	adds	r5, #1
 800fffc:	2301      	movs	r3, #1
 800fffe:	1076      	asrs	r6, r6, #1
 8010000:	3708      	adds	r7, #8
 8010002:	e76c      	b.n	800fede <_dtoa_r+0x3ce>
 8010004:	2502      	movs	r5, #2
 8010006:	e76f      	b.n	800fee8 <_dtoa_r+0x3d8>
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	f8cd a01c 	str.w	sl, [sp, #28]
 801000e:	930c      	str	r3, [sp, #48]	; 0x30
 8010010:	e78d      	b.n	800ff2e <_dtoa_r+0x41e>
 8010012:	9900      	ldr	r1, [sp, #0]
 8010014:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010018:	4b4e      	ldr	r3, [pc, #312]	; (8010154 <_dtoa_r+0x644>)
 801001a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801001e:	4401      	add	r1, r0
 8010020:	9102      	str	r1, [sp, #8]
 8010022:	9908      	ldr	r1, [sp, #32]
 8010024:	eeb0 8a47 	vmov.f32	s16, s14
 8010028:	eef0 8a67 	vmov.f32	s17, s15
 801002c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010034:	2900      	cmp	r1, #0
 8010036:	d045      	beq.n	80100c4 <_dtoa_r+0x5b4>
 8010038:	494c      	ldr	r1, [pc, #304]	; (801016c <_dtoa_r+0x65c>)
 801003a:	2000      	movs	r0, #0
 801003c:	f7f0 fc16 	bl	800086c <__aeabi_ddiv>
 8010040:	ec53 2b18 	vmov	r2, r3, d8
 8010044:	f7f0 f930 	bl	80002a8 <__aeabi_dsub>
 8010048:	9d00      	ldr	r5, [sp, #0]
 801004a:	ec41 0b18 	vmov	d8, r0, r1
 801004e:	4639      	mov	r1, r7
 8010050:	4630      	mov	r0, r6
 8010052:	f7f0 fd91 	bl	8000b78 <__aeabi_d2iz>
 8010056:	900c      	str	r0, [sp, #48]	; 0x30
 8010058:	f7f0 fa74 	bl	8000544 <__aeabi_i2d>
 801005c:	4602      	mov	r2, r0
 801005e:	460b      	mov	r3, r1
 8010060:	4630      	mov	r0, r6
 8010062:	4639      	mov	r1, r7
 8010064:	f7f0 f920 	bl	80002a8 <__aeabi_dsub>
 8010068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801006a:	3330      	adds	r3, #48	; 0x30
 801006c:	f805 3b01 	strb.w	r3, [r5], #1
 8010070:	ec53 2b18 	vmov	r2, r3, d8
 8010074:	4606      	mov	r6, r0
 8010076:	460f      	mov	r7, r1
 8010078:	f7f0 fd40 	bl	8000afc <__aeabi_dcmplt>
 801007c:	2800      	cmp	r0, #0
 801007e:	d165      	bne.n	801014c <_dtoa_r+0x63c>
 8010080:	4632      	mov	r2, r6
 8010082:	463b      	mov	r3, r7
 8010084:	4935      	ldr	r1, [pc, #212]	; (801015c <_dtoa_r+0x64c>)
 8010086:	2000      	movs	r0, #0
 8010088:	f7f0 f90e 	bl	80002a8 <__aeabi_dsub>
 801008c:	ec53 2b18 	vmov	r2, r3, d8
 8010090:	f7f0 fd34 	bl	8000afc <__aeabi_dcmplt>
 8010094:	2800      	cmp	r0, #0
 8010096:	f040 80b9 	bne.w	801020c <_dtoa_r+0x6fc>
 801009a:	9b02      	ldr	r3, [sp, #8]
 801009c:	429d      	cmp	r5, r3
 801009e:	f43f af75 	beq.w	800ff8c <_dtoa_r+0x47c>
 80100a2:	4b2f      	ldr	r3, [pc, #188]	; (8010160 <_dtoa_r+0x650>)
 80100a4:	ec51 0b18 	vmov	r0, r1, d8
 80100a8:	2200      	movs	r2, #0
 80100aa:	f7f0 fab5 	bl	8000618 <__aeabi_dmul>
 80100ae:	4b2c      	ldr	r3, [pc, #176]	; (8010160 <_dtoa_r+0x650>)
 80100b0:	ec41 0b18 	vmov	d8, r0, r1
 80100b4:	2200      	movs	r2, #0
 80100b6:	4630      	mov	r0, r6
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 faad 	bl	8000618 <__aeabi_dmul>
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	e7c4      	b.n	801004e <_dtoa_r+0x53e>
 80100c4:	ec51 0b17 	vmov	r0, r1, d7
 80100c8:	f7f0 faa6 	bl	8000618 <__aeabi_dmul>
 80100cc:	9b02      	ldr	r3, [sp, #8]
 80100ce:	9d00      	ldr	r5, [sp, #0]
 80100d0:	930c      	str	r3, [sp, #48]	; 0x30
 80100d2:	ec41 0b18 	vmov	d8, r0, r1
 80100d6:	4639      	mov	r1, r7
 80100d8:	4630      	mov	r0, r6
 80100da:	f7f0 fd4d 	bl	8000b78 <__aeabi_d2iz>
 80100de:	9011      	str	r0, [sp, #68]	; 0x44
 80100e0:	f7f0 fa30 	bl	8000544 <__aeabi_i2d>
 80100e4:	4602      	mov	r2, r0
 80100e6:	460b      	mov	r3, r1
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	f7f0 f8dc 	bl	80002a8 <__aeabi_dsub>
 80100f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100f2:	3330      	adds	r3, #48	; 0x30
 80100f4:	f805 3b01 	strb.w	r3, [r5], #1
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	429d      	cmp	r5, r3
 80100fc:	4606      	mov	r6, r0
 80100fe:	460f      	mov	r7, r1
 8010100:	f04f 0200 	mov.w	r2, #0
 8010104:	d134      	bne.n	8010170 <_dtoa_r+0x660>
 8010106:	4b19      	ldr	r3, [pc, #100]	; (801016c <_dtoa_r+0x65c>)
 8010108:	ec51 0b18 	vmov	r0, r1, d8
 801010c:	f7f0 f8ce 	bl	80002ac <__adddf3>
 8010110:	4602      	mov	r2, r0
 8010112:	460b      	mov	r3, r1
 8010114:	4630      	mov	r0, r6
 8010116:	4639      	mov	r1, r7
 8010118:	f7f0 fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 801011c:	2800      	cmp	r0, #0
 801011e:	d175      	bne.n	801020c <_dtoa_r+0x6fc>
 8010120:	ec53 2b18 	vmov	r2, r3, d8
 8010124:	4911      	ldr	r1, [pc, #68]	; (801016c <_dtoa_r+0x65c>)
 8010126:	2000      	movs	r0, #0
 8010128:	f7f0 f8be 	bl	80002a8 <__aeabi_dsub>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	4630      	mov	r0, r6
 8010132:	4639      	mov	r1, r7
 8010134:	f7f0 fce2 	bl	8000afc <__aeabi_dcmplt>
 8010138:	2800      	cmp	r0, #0
 801013a:	f43f af27 	beq.w	800ff8c <_dtoa_r+0x47c>
 801013e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010140:	1e6b      	subs	r3, r5, #1
 8010142:	930c      	str	r3, [sp, #48]	; 0x30
 8010144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010148:	2b30      	cmp	r3, #48	; 0x30
 801014a:	d0f8      	beq.n	801013e <_dtoa_r+0x62e>
 801014c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010150:	e04a      	b.n	80101e8 <_dtoa_r+0x6d8>
 8010152:	bf00      	nop
 8010154:	08013660 	.word	0x08013660
 8010158:	08013638 	.word	0x08013638
 801015c:	3ff00000 	.word	0x3ff00000
 8010160:	40240000 	.word	0x40240000
 8010164:	401c0000 	.word	0x401c0000
 8010168:	40140000 	.word	0x40140000
 801016c:	3fe00000 	.word	0x3fe00000
 8010170:	4baf      	ldr	r3, [pc, #700]	; (8010430 <_dtoa_r+0x920>)
 8010172:	f7f0 fa51 	bl	8000618 <__aeabi_dmul>
 8010176:	4606      	mov	r6, r0
 8010178:	460f      	mov	r7, r1
 801017a:	e7ac      	b.n	80100d6 <_dtoa_r+0x5c6>
 801017c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010180:	9d00      	ldr	r5, [sp, #0]
 8010182:	4642      	mov	r2, r8
 8010184:	464b      	mov	r3, r9
 8010186:	4630      	mov	r0, r6
 8010188:	4639      	mov	r1, r7
 801018a:	f7f0 fb6f 	bl	800086c <__aeabi_ddiv>
 801018e:	f7f0 fcf3 	bl	8000b78 <__aeabi_d2iz>
 8010192:	9002      	str	r0, [sp, #8]
 8010194:	f7f0 f9d6 	bl	8000544 <__aeabi_i2d>
 8010198:	4642      	mov	r2, r8
 801019a:	464b      	mov	r3, r9
 801019c:	f7f0 fa3c 	bl	8000618 <__aeabi_dmul>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4630      	mov	r0, r6
 80101a6:	4639      	mov	r1, r7
 80101a8:	f7f0 f87e 	bl	80002a8 <__aeabi_dsub>
 80101ac:	9e02      	ldr	r6, [sp, #8]
 80101ae:	9f01      	ldr	r7, [sp, #4]
 80101b0:	3630      	adds	r6, #48	; 0x30
 80101b2:	f805 6b01 	strb.w	r6, [r5], #1
 80101b6:	9e00      	ldr	r6, [sp, #0]
 80101b8:	1bae      	subs	r6, r5, r6
 80101ba:	42b7      	cmp	r7, r6
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	d137      	bne.n	8010232 <_dtoa_r+0x722>
 80101c2:	f7f0 f873 	bl	80002ac <__adddf3>
 80101c6:	4642      	mov	r2, r8
 80101c8:	464b      	mov	r3, r9
 80101ca:	4606      	mov	r6, r0
 80101cc:	460f      	mov	r7, r1
 80101ce:	f7f0 fcb3 	bl	8000b38 <__aeabi_dcmpgt>
 80101d2:	b9c8      	cbnz	r0, 8010208 <_dtoa_r+0x6f8>
 80101d4:	4642      	mov	r2, r8
 80101d6:	464b      	mov	r3, r9
 80101d8:	4630      	mov	r0, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	f7f0 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 80101e0:	b110      	cbz	r0, 80101e8 <_dtoa_r+0x6d8>
 80101e2:	9b02      	ldr	r3, [sp, #8]
 80101e4:	07d9      	lsls	r1, r3, #31
 80101e6:	d40f      	bmi.n	8010208 <_dtoa_r+0x6f8>
 80101e8:	4620      	mov	r0, r4
 80101ea:	4659      	mov	r1, fp
 80101ec:	f000 fac8 	bl	8010780 <_Bfree>
 80101f0:	2300      	movs	r3, #0
 80101f2:	702b      	strb	r3, [r5, #0]
 80101f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101f6:	f10a 0001 	add.w	r0, sl, #1
 80101fa:	6018      	str	r0, [r3, #0]
 80101fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f43f acd8 	beq.w	800fbb4 <_dtoa_r+0xa4>
 8010204:	601d      	str	r5, [r3, #0]
 8010206:	e4d5      	b.n	800fbb4 <_dtoa_r+0xa4>
 8010208:	f8cd a01c 	str.w	sl, [sp, #28]
 801020c:	462b      	mov	r3, r5
 801020e:	461d      	mov	r5, r3
 8010210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010214:	2a39      	cmp	r2, #57	; 0x39
 8010216:	d108      	bne.n	801022a <_dtoa_r+0x71a>
 8010218:	9a00      	ldr	r2, [sp, #0]
 801021a:	429a      	cmp	r2, r3
 801021c:	d1f7      	bne.n	801020e <_dtoa_r+0x6fe>
 801021e:	9a07      	ldr	r2, [sp, #28]
 8010220:	9900      	ldr	r1, [sp, #0]
 8010222:	3201      	adds	r2, #1
 8010224:	9207      	str	r2, [sp, #28]
 8010226:	2230      	movs	r2, #48	; 0x30
 8010228:	700a      	strb	r2, [r1, #0]
 801022a:	781a      	ldrb	r2, [r3, #0]
 801022c:	3201      	adds	r2, #1
 801022e:	701a      	strb	r2, [r3, #0]
 8010230:	e78c      	b.n	801014c <_dtoa_r+0x63c>
 8010232:	4b7f      	ldr	r3, [pc, #508]	; (8010430 <_dtoa_r+0x920>)
 8010234:	2200      	movs	r2, #0
 8010236:	f7f0 f9ef 	bl	8000618 <__aeabi_dmul>
 801023a:	2200      	movs	r2, #0
 801023c:	2300      	movs	r3, #0
 801023e:	4606      	mov	r6, r0
 8010240:	460f      	mov	r7, r1
 8010242:	f7f0 fc51 	bl	8000ae8 <__aeabi_dcmpeq>
 8010246:	2800      	cmp	r0, #0
 8010248:	d09b      	beq.n	8010182 <_dtoa_r+0x672>
 801024a:	e7cd      	b.n	80101e8 <_dtoa_r+0x6d8>
 801024c:	9a08      	ldr	r2, [sp, #32]
 801024e:	2a00      	cmp	r2, #0
 8010250:	f000 80c4 	beq.w	80103dc <_dtoa_r+0x8cc>
 8010254:	9a05      	ldr	r2, [sp, #20]
 8010256:	2a01      	cmp	r2, #1
 8010258:	f300 80a8 	bgt.w	80103ac <_dtoa_r+0x89c>
 801025c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801025e:	2a00      	cmp	r2, #0
 8010260:	f000 80a0 	beq.w	80103a4 <_dtoa_r+0x894>
 8010264:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010268:	9e06      	ldr	r6, [sp, #24]
 801026a:	4645      	mov	r5, r8
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	2101      	movs	r1, #1
 8010270:	441a      	add	r2, r3
 8010272:	4620      	mov	r0, r4
 8010274:	4498      	add	r8, r3
 8010276:	9204      	str	r2, [sp, #16]
 8010278:	f000 fb3e 	bl	80108f8 <__i2b>
 801027c:	4607      	mov	r7, r0
 801027e:	2d00      	cmp	r5, #0
 8010280:	dd0b      	ble.n	801029a <_dtoa_r+0x78a>
 8010282:	9b04      	ldr	r3, [sp, #16]
 8010284:	2b00      	cmp	r3, #0
 8010286:	dd08      	ble.n	801029a <_dtoa_r+0x78a>
 8010288:	42ab      	cmp	r3, r5
 801028a:	9a04      	ldr	r2, [sp, #16]
 801028c:	bfa8      	it	ge
 801028e:	462b      	movge	r3, r5
 8010290:	eba8 0803 	sub.w	r8, r8, r3
 8010294:	1aed      	subs	r5, r5, r3
 8010296:	1ad3      	subs	r3, r2, r3
 8010298:	9304      	str	r3, [sp, #16]
 801029a:	9b06      	ldr	r3, [sp, #24]
 801029c:	b1fb      	cbz	r3, 80102de <_dtoa_r+0x7ce>
 801029e:	9b08      	ldr	r3, [sp, #32]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 809f 	beq.w	80103e4 <_dtoa_r+0x8d4>
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	dd11      	ble.n	80102ce <_dtoa_r+0x7be>
 80102aa:	4639      	mov	r1, r7
 80102ac:	4632      	mov	r2, r6
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 fbde 	bl	8010a70 <__pow5mult>
 80102b4:	465a      	mov	r2, fp
 80102b6:	4601      	mov	r1, r0
 80102b8:	4607      	mov	r7, r0
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 fb32 	bl	8010924 <__multiply>
 80102c0:	4659      	mov	r1, fp
 80102c2:	9007      	str	r0, [sp, #28]
 80102c4:	4620      	mov	r0, r4
 80102c6:	f000 fa5b 	bl	8010780 <_Bfree>
 80102ca:	9b07      	ldr	r3, [sp, #28]
 80102cc:	469b      	mov	fp, r3
 80102ce:	9b06      	ldr	r3, [sp, #24]
 80102d0:	1b9a      	subs	r2, r3, r6
 80102d2:	d004      	beq.n	80102de <_dtoa_r+0x7ce>
 80102d4:	4659      	mov	r1, fp
 80102d6:	4620      	mov	r0, r4
 80102d8:	f000 fbca 	bl	8010a70 <__pow5mult>
 80102dc:	4683      	mov	fp, r0
 80102de:	2101      	movs	r1, #1
 80102e0:	4620      	mov	r0, r4
 80102e2:	f000 fb09 	bl	80108f8 <__i2b>
 80102e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	4606      	mov	r6, r0
 80102ec:	dd7c      	ble.n	80103e8 <_dtoa_r+0x8d8>
 80102ee:	461a      	mov	r2, r3
 80102f0:	4601      	mov	r1, r0
 80102f2:	4620      	mov	r0, r4
 80102f4:	f000 fbbc 	bl	8010a70 <__pow5mult>
 80102f8:	9b05      	ldr	r3, [sp, #20]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	4606      	mov	r6, r0
 80102fe:	dd76      	ble.n	80103ee <_dtoa_r+0x8de>
 8010300:	2300      	movs	r3, #0
 8010302:	9306      	str	r3, [sp, #24]
 8010304:	6933      	ldr	r3, [r6, #16]
 8010306:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801030a:	6918      	ldr	r0, [r3, #16]
 801030c:	f000 faa4 	bl	8010858 <__hi0bits>
 8010310:	f1c0 0020 	rsb	r0, r0, #32
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	4418      	add	r0, r3
 8010318:	f010 001f 	ands.w	r0, r0, #31
 801031c:	f000 8086 	beq.w	801042c <_dtoa_r+0x91c>
 8010320:	f1c0 0320 	rsb	r3, r0, #32
 8010324:	2b04      	cmp	r3, #4
 8010326:	dd7f      	ble.n	8010428 <_dtoa_r+0x918>
 8010328:	f1c0 001c 	rsb	r0, r0, #28
 801032c:	9b04      	ldr	r3, [sp, #16]
 801032e:	4403      	add	r3, r0
 8010330:	4480      	add	r8, r0
 8010332:	4405      	add	r5, r0
 8010334:	9304      	str	r3, [sp, #16]
 8010336:	f1b8 0f00 	cmp.w	r8, #0
 801033a:	dd05      	ble.n	8010348 <_dtoa_r+0x838>
 801033c:	4659      	mov	r1, fp
 801033e:	4642      	mov	r2, r8
 8010340:	4620      	mov	r0, r4
 8010342:	f000 fbef 	bl	8010b24 <__lshift>
 8010346:	4683      	mov	fp, r0
 8010348:	9b04      	ldr	r3, [sp, #16]
 801034a:	2b00      	cmp	r3, #0
 801034c:	dd05      	ble.n	801035a <_dtoa_r+0x84a>
 801034e:	4631      	mov	r1, r6
 8010350:	461a      	mov	r2, r3
 8010352:	4620      	mov	r0, r4
 8010354:	f000 fbe6 	bl	8010b24 <__lshift>
 8010358:	4606      	mov	r6, r0
 801035a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801035c:	2b00      	cmp	r3, #0
 801035e:	d069      	beq.n	8010434 <_dtoa_r+0x924>
 8010360:	4631      	mov	r1, r6
 8010362:	4658      	mov	r0, fp
 8010364:	f000 fc4a 	bl	8010bfc <__mcmp>
 8010368:	2800      	cmp	r0, #0
 801036a:	da63      	bge.n	8010434 <_dtoa_r+0x924>
 801036c:	2300      	movs	r3, #0
 801036e:	4659      	mov	r1, fp
 8010370:	220a      	movs	r2, #10
 8010372:	4620      	mov	r0, r4
 8010374:	f000 fa26 	bl	80107c4 <__multadd>
 8010378:	9b08      	ldr	r3, [sp, #32]
 801037a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801037e:	4683      	mov	fp, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 818f 	beq.w	80106a4 <_dtoa_r+0xb94>
 8010386:	4639      	mov	r1, r7
 8010388:	2300      	movs	r3, #0
 801038a:	220a      	movs	r2, #10
 801038c:	4620      	mov	r0, r4
 801038e:	f000 fa19 	bl	80107c4 <__multadd>
 8010392:	f1b9 0f00 	cmp.w	r9, #0
 8010396:	4607      	mov	r7, r0
 8010398:	f300 808e 	bgt.w	80104b8 <_dtoa_r+0x9a8>
 801039c:	9b05      	ldr	r3, [sp, #20]
 801039e:	2b02      	cmp	r3, #2
 80103a0:	dc50      	bgt.n	8010444 <_dtoa_r+0x934>
 80103a2:	e089      	b.n	80104b8 <_dtoa_r+0x9a8>
 80103a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80103a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103aa:	e75d      	b.n	8010268 <_dtoa_r+0x758>
 80103ac:	9b01      	ldr	r3, [sp, #4]
 80103ae:	1e5e      	subs	r6, r3, #1
 80103b0:	9b06      	ldr	r3, [sp, #24]
 80103b2:	42b3      	cmp	r3, r6
 80103b4:	bfbf      	itttt	lt
 80103b6:	9b06      	ldrlt	r3, [sp, #24]
 80103b8:	9606      	strlt	r6, [sp, #24]
 80103ba:	1af2      	sublt	r2, r6, r3
 80103bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80103be:	bfb6      	itet	lt
 80103c0:	189b      	addlt	r3, r3, r2
 80103c2:	1b9e      	subge	r6, r3, r6
 80103c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80103c6:	9b01      	ldr	r3, [sp, #4]
 80103c8:	bfb8      	it	lt
 80103ca:	2600      	movlt	r6, #0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	bfb5      	itete	lt
 80103d0:	eba8 0503 	sublt.w	r5, r8, r3
 80103d4:	9b01      	ldrge	r3, [sp, #4]
 80103d6:	2300      	movlt	r3, #0
 80103d8:	4645      	movge	r5, r8
 80103da:	e747      	b.n	801026c <_dtoa_r+0x75c>
 80103dc:	9e06      	ldr	r6, [sp, #24]
 80103de:	9f08      	ldr	r7, [sp, #32]
 80103e0:	4645      	mov	r5, r8
 80103e2:	e74c      	b.n	801027e <_dtoa_r+0x76e>
 80103e4:	9a06      	ldr	r2, [sp, #24]
 80103e6:	e775      	b.n	80102d4 <_dtoa_r+0x7c4>
 80103e8:	9b05      	ldr	r3, [sp, #20]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	dc18      	bgt.n	8010420 <_dtoa_r+0x910>
 80103ee:	9b02      	ldr	r3, [sp, #8]
 80103f0:	b9b3      	cbnz	r3, 8010420 <_dtoa_r+0x910>
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103f8:	b9a3      	cbnz	r3, 8010424 <_dtoa_r+0x914>
 80103fa:	9b03      	ldr	r3, [sp, #12]
 80103fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010400:	0d1b      	lsrs	r3, r3, #20
 8010402:	051b      	lsls	r3, r3, #20
 8010404:	b12b      	cbz	r3, 8010412 <_dtoa_r+0x902>
 8010406:	9b04      	ldr	r3, [sp, #16]
 8010408:	3301      	adds	r3, #1
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	f108 0801 	add.w	r8, r8, #1
 8010410:	2301      	movs	r3, #1
 8010412:	9306      	str	r3, [sp, #24]
 8010414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010416:	2b00      	cmp	r3, #0
 8010418:	f47f af74 	bne.w	8010304 <_dtoa_r+0x7f4>
 801041c:	2001      	movs	r0, #1
 801041e:	e779      	b.n	8010314 <_dtoa_r+0x804>
 8010420:	2300      	movs	r3, #0
 8010422:	e7f6      	b.n	8010412 <_dtoa_r+0x902>
 8010424:	9b02      	ldr	r3, [sp, #8]
 8010426:	e7f4      	b.n	8010412 <_dtoa_r+0x902>
 8010428:	d085      	beq.n	8010336 <_dtoa_r+0x826>
 801042a:	4618      	mov	r0, r3
 801042c:	301c      	adds	r0, #28
 801042e:	e77d      	b.n	801032c <_dtoa_r+0x81c>
 8010430:	40240000 	.word	0x40240000
 8010434:	9b01      	ldr	r3, [sp, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	dc38      	bgt.n	80104ac <_dtoa_r+0x99c>
 801043a:	9b05      	ldr	r3, [sp, #20]
 801043c:	2b02      	cmp	r3, #2
 801043e:	dd35      	ble.n	80104ac <_dtoa_r+0x99c>
 8010440:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010444:	f1b9 0f00 	cmp.w	r9, #0
 8010448:	d10d      	bne.n	8010466 <_dtoa_r+0x956>
 801044a:	4631      	mov	r1, r6
 801044c:	464b      	mov	r3, r9
 801044e:	2205      	movs	r2, #5
 8010450:	4620      	mov	r0, r4
 8010452:	f000 f9b7 	bl	80107c4 <__multadd>
 8010456:	4601      	mov	r1, r0
 8010458:	4606      	mov	r6, r0
 801045a:	4658      	mov	r0, fp
 801045c:	f000 fbce 	bl	8010bfc <__mcmp>
 8010460:	2800      	cmp	r0, #0
 8010462:	f73f adbd 	bgt.w	800ffe0 <_dtoa_r+0x4d0>
 8010466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010468:	9d00      	ldr	r5, [sp, #0]
 801046a:	ea6f 0a03 	mvn.w	sl, r3
 801046e:	f04f 0800 	mov.w	r8, #0
 8010472:	4631      	mov	r1, r6
 8010474:	4620      	mov	r0, r4
 8010476:	f000 f983 	bl	8010780 <_Bfree>
 801047a:	2f00      	cmp	r7, #0
 801047c:	f43f aeb4 	beq.w	80101e8 <_dtoa_r+0x6d8>
 8010480:	f1b8 0f00 	cmp.w	r8, #0
 8010484:	d005      	beq.n	8010492 <_dtoa_r+0x982>
 8010486:	45b8      	cmp	r8, r7
 8010488:	d003      	beq.n	8010492 <_dtoa_r+0x982>
 801048a:	4641      	mov	r1, r8
 801048c:	4620      	mov	r0, r4
 801048e:	f000 f977 	bl	8010780 <_Bfree>
 8010492:	4639      	mov	r1, r7
 8010494:	4620      	mov	r0, r4
 8010496:	f000 f973 	bl	8010780 <_Bfree>
 801049a:	e6a5      	b.n	80101e8 <_dtoa_r+0x6d8>
 801049c:	2600      	movs	r6, #0
 801049e:	4637      	mov	r7, r6
 80104a0:	e7e1      	b.n	8010466 <_dtoa_r+0x956>
 80104a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80104a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80104a8:	4637      	mov	r7, r6
 80104aa:	e599      	b.n	800ffe0 <_dtoa_r+0x4d0>
 80104ac:	9b08      	ldr	r3, [sp, #32]
 80104ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 80fd 	beq.w	80106b2 <_dtoa_r+0xba2>
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	dd05      	ble.n	80104c8 <_dtoa_r+0x9b8>
 80104bc:	4639      	mov	r1, r7
 80104be:	462a      	mov	r2, r5
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fb2f 	bl	8010b24 <__lshift>
 80104c6:	4607      	mov	r7, r0
 80104c8:	9b06      	ldr	r3, [sp, #24]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d05c      	beq.n	8010588 <_dtoa_r+0xa78>
 80104ce:	6879      	ldr	r1, [r7, #4]
 80104d0:	4620      	mov	r0, r4
 80104d2:	f000 f915 	bl	8010700 <_Balloc>
 80104d6:	4605      	mov	r5, r0
 80104d8:	b928      	cbnz	r0, 80104e6 <_dtoa_r+0x9d6>
 80104da:	4b80      	ldr	r3, [pc, #512]	; (80106dc <_dtoa_r+0xbcc>)
 80104dc:	4602      	mov	r2, r0
 80104de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80104e2:	f7ff bb2e 	b.w	800fb42 <_dtoa_r+0x32>
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	3202      	adds	r2, #2
 80104ea:	0092      	lsls	r2, r2, #2
 80104ec:	f107 010c 	add.w	r1, r7, #12
 80104f0:	300c      	adds	r0, #12
 80104f2:	f7fe fdb9 	bl	800f068 <memcpy>
 80104f6:	2201      	movs	r2, #1
 80104f8:	4629      	mov	r1, r5
 80104fa:	4620      	mov	r0, r4
 80104fc:	f000 fb12 	bl	8010b24 <__lshift>
 8010500:	9b00      	ldr	r3, [sp, #0]
 8010502:	3301      	adds	r3, #1
 8010504:	9301      	str	r3, [sp, #4]
 8010506:	9b00      	ldr	r3, [sp, #0]
 8010508:	444b      	add	r3, r9
 801050a:	9307      	str	r3, [sp, #28]
 801050c:	9b02      	ldr	r3, [sp, #8]
 801050e:	f003 0301 	and.w	r3, r3, #1
 8010512:	46b8      	mov	r8, r7
 8010514:	9306      	str	r3, [sp, #24]
 8010516:	4607      	mov	r7, r0
 8010518:	9b01      	ldr	r3, [sp, #4]
 801051a:	4631      	mov	r1, r6
 801051c:	3b01      	subs	r3, #1
 801051e:	4658      	mov	r0, fp
 8010520:	9302      	str	r3, [sp, #8]
 8010522:	f7ff fa68 	bl	800f9f6 <quorem>
 8010526:	4603      	mov	r3, r0
 8010528:	3330      	adds	r3, #48	; 0x30
 801052a:	9004      	str	r0, [sp, #16]
 801052c:	4641      	mov	r1, r8
 801052e:	4658      	mov	r0, fp
 8010530:	9308      	str	r3, [sp, #32]
 8010532:	f000 fb63 	bl	8010bfc <__mcmp>
 8010536:	463a      	mov	r2, r7
 8010538:	4681      	mov	r9, r0
 801053a:	4631      	mov	r1, r6
 801053c:	4620      	mov	r0, r4
 801053e:	f000 fb79 	bl	8010c34 <__mdiff>
 8010542:	68c2      	ldr	r2, [r0, #12]
 8010544:	9b08      	ldr	r3, [sp, #32]
 8010546:	4605      	mov	r5, r0
 8010548:	bb02      	cbnz	r2, 801058c <_dtoa_r+0xa7c>
 801054a:	4601      	mov	r1, r0
 801054c:	4658      	mov	r0, fp
 801054e:	f000 fb55 	bl	8010bfc <__mcmp>
 8010552:	9b08      	ldr	r3, [sp, #32]
 8010554:	4602      	mov	r2, r0
 8010556:	4629      	mov	r1, r5
 8010558:	4620      	mov	r0, r4
 801055a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801055e:	f000 f90f 	bl	8010780 <_Bfree>
 8010562:	9b05      	ldr	r3, [sp, #20]
 8010564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010566:	9d01      	ldr	r5, [sp, #4]
 8010568:	ea43 0102 	orr.w	r1, r3, r2
 801056c:	9b06      	ldr	r3, [sp, #24]
 801056e:	430b      	orrs	r3, r1
 8010570:	9b08      	ldr	r3, [sp, #32]
 8010572:	d10d      	bne.n	8010590 <_dtoa_r+0xa80>
 8010574:	2b39      	cmp	r3, #57	; 0x39
 8010576:	d029      	beq.n	80105cc <_dtoa_r+0xabc>
 8010578:	f1b9 0f00 	cmp.w	r9, #0
 801057c:	dd01      	ble.n	8010582 <_dtoa_r+0xa72>
 801057e:	9b04      	ldr	r3, [sp, #16]
 8010580:	3331      	adds	r3, #49	; 0x31
 8010582:	9a02      	ldr	r2, [sp, #8]
 8010584:	7013      	strb	r3, [r2, #0]
 8010586:	e774      	b.n	8010472 <_dtoa_r+0x962>
 8010588:	4638      	mov	r0, r7
 801058a:	e7b9      	b.n	8010500 <_dtoa_r+0x9f0>
 801058c:	2201      	movs	r2, #1
 801058e:	e7e2      	b.n	8010556 <_dtoa_r+0xa46>
 8010590:	f1b9 0f00 	cmp.w	r9, #0
 8010594:	db06      	blt.n	80105a4 <_dtoa_r+0xa94>
 8010596:	9905      	ldr	r1, [sp, #20]
 8010598:	ea41 0909 	orr.w	r9, r1, r9
 801059c:	9906      	ldr	r1, [sp, #24]
 801059e:	ea59 0101 	orrs.w	r1, r9, r1
 80105a2:	d120      	bne.n	80105e6 <_dtoa_r+0xad6>
 80105a4:	2a00      	cmp	r2, #0
 80105a6:	ddec      	ble.n	8010582 <_dtoa_r+0xa72>
 80105a8:	4659      	mov	r1, fp
 80105aa:	2201      	movs	r2, #1
 80105ac:	4620      	mov	r0, r4
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	f000 fab8 	bl	8010b24 <__lshift>
 80105b4:	4631      	mov	r1, r6
 80105b6:	4683      	mov	fp, r0
 80105b8:	f000 fb20 	bl	8010bfc <__mcmp>
 80105bc:	2800      	cmp	r0, #0
 80105be:	9b01      	ldr	r3, [sp, #4]
 80105c0:	dc02      	bgt.n	80105c8 <_dtoa_r+0xab8>
 80105c2:	d1de      	bne.n	8010582 <_dtoa_r+0xa72>
 80105c4:	07da      	lsls	r2, r3, #31
 80105c6:	d5dc      	bpl.n	8010582 <_dtoa_r+0xa72>
 80105c8:	2b39      	cmp	r3, #57	; 0x39
 80105ca:	d1d8      	bne.n	801057e <_dtoa_r+0xa6e>
 80105cc:	9a02      	ldr	r2, [sp, #8]
 80105ce:	2339      	movs	r3, #57	; 0x39
 80105d0:	7013      	strb	r3, [r2, #0]
 80105d2:	462b      	mov	r3, r5
 80105d4:	461d      	mov	r5, r3
 80105d6:	3b01      	subs	r3, #1
 80105d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80105dc:	2a39      	cmp	r2, #57	; 0x39
 80105de:	d050      	beq.n	8010682 <_dtoa_r+0xb72>
 80105e0:	3201      	adds	r2, #1
 80105e2:	701a      	strb	r2, [r3, #0]
 80105e4:	e745      	b.n	8010472 <_dtoa_r+0x962>
 80105e6:	2a00      	cmp	r2, #0
 80105e8:	dd03      	ble.n	80105f2 <_dtoa_r+0xae2>
 80105ea:	2b39      	cmp	r3, #57	; 0x39
 80105ec:	d0ee      	beq.n	80105cc <_dtoa_r+0xabc>
 80105ee:	3301      	adds	r3, #1
 80105f0:	e7c7      	b.n	8010582 <_dtoa_r+0xa72>
 80105f2:	9a01      	ldr	r2, [sp, #4]
 80105f4:	9907      	ldr	r1, [sp, #28]
 80105f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105fa:	428a      	cmp	r2, r1
 80105fc:	d02a      	beq.n	8010654 <_dtoa_r+0xb44>
 80105fe:	4659      	mov	r1, fp
 8010600:	2300      	movs	r3, #0
 8010602:	220a      	movs	r2, #10
 8010604:	4620      	mov	r0, r4
 8010606:	f000 f8dd 	bl	80107c4 <__multadd>
 801060a:	45b8      	cmp	r8, r7
 801060c:	4683      	mov	fp, r0
 801060e:	f04f 0300 	mov.w	r3, #0
 8010612:	f04f 020a 	mov.w	r2, #10
 8010616:	4641      	mov	r1, r8
 8010618:	4620      	mov	r0, r4
 801061a:	d107      	bne.n	801062c <_dtoa_r+0xb1c>
 801061c:	f000 f8d2 	bl	80107c4 <__multadd>
 8010620:	4680      	mov	r8, r0
 8010622:	4607      	mov	r7, r0
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	3301      	adds	r3, #1
 8010628:	9301      	str	r3, [sp, #4]
 801062a:	e775      	b.n	8010518 <_dtoa_r+0xa08>
 801062c:	f000 f8ca 	bl	80107c4 <__multadd>
 8010630:	4639      	mov	r1, r7
 8010632:	4680      	mov	r8, r0
 8010634:	2300      	movs	r3, #0
 8010636:	220a      	movs	r2, #10
 8010638:	4620      	mov	r0, r4
 801063a:	f000 f8c3 	bl	80107c4 <__multadd>
 801063e:	4607      	mov	r7, r0
 8010640:	e7f0      	b.n	8010624 <_dtoa_r+0xb14>
 8010642:	f1b9 0f00 	cmp.w	r9, #0
 8010646:	9a00      	ldr	r2, [sp, #0]
 8010648:	bfcc      	ite	gt
 801064a:	464d      	movgt	r5, r9
 801064c:	2501      	movle	r5, #1
 801064e:	4415      	add	r5, r2
 8010650:	f04f 0800 	mov.w	r8, #0
 8010654:	4659      	mov	r1, fp
 8010656:	2201      	movs	r2, #1
 8010658:	4620      	mov	r0, r4
 801065a:	9301      	str	r3, [sp, #4]
 801065c:	f000 fa62 	bl	8010b24 <__lshift>
 8010660:	4631      	mov	r1, r6
 8010662:	4683      	mov	fp, r0
 8010664:	f000 faca 	bl	8010bfc <__mcmp>
 8010668:	2800      	cmp	r0, #0
 801066a:	dcb2      	bgt.n	80105d2 <_dtoa_r+0xac2>
 801066c:	d102      	bne.n	8010674 <_dtoa_r+0xb64>
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	07db      	lsls	r3, r3, #31
 8010672:	d4ae      	bmi.n	80105d2 <_dtoa_r+0xac2>
 8010674:	462b      	mov	r3, r5
 8010676:	461d      	mov	r5, r3
 8010678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801067c:	2a30      	cmp	r2, #48	; 0x30
 801067e:	d0fa      	beq.n	8010676 <_dtoa_r+0xb66>
 8010680:	e6f7      	b.n	8010472 <_dtoa_r+0x962>
 8010682:	9a00      	ldr	r2, [sp, #0]
 8010684:	429a      	cmp	r2, r3
 8010686:	d1a5      	bne.n	80105d4 <_dtoa_r+0xac4>
 8010688:	f10a 0a01 	add.w	sl, sl, #1
 801068c:	2331      	movs	r3, #49	; 0x31
 801068e:	e779      	b.n	8010584 <_dtoa_r+0xa74>
 8010690:	4b13      	ldr	r3, [pc, #76]	; (80106e0 <_dtoa_r+0xbd0>)
 8010692:	f7ff baaf 	b.w	800fbf4 <_dtoa_r+0xe4>
 8010696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010698:	2b00      	cmp	r3, #0
 801069a:	f47f aa86 	bne.w	800fbaa <_dtoa_r+0x9a>
 801069e:	4b11      	ldr	r3, [pc, #68]	; (80106e4 <_dtoa_r+0xbd4>)
 80106a0:	f7ff baa8 	b.w	800fbf4 <_dtoa_r+0xe4>
 80106a4:	f1b9 0f00 	cmp.w	r9, #0
 80106a8:	dc03      	bgt.n	80106b2 <_dtoa_r+0xba2>
 80106aa:	9b05      	ldr	r3, [sp, #20]
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	f73f aec9 	bgt.w	8010444 <_dtoa_r+0x934>
 80106b2:	9d00      	ldr	r5, [sp, #0]
 80106b4:	4631      	mov	r1, r6
 80106b6:	4658      	mov	r0, fp
 80106b8:	f7ff f99d 	bl	800f9f6 <quorem>
 80106bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80106c0:	f805 3b01 	strb.w	r3, [r5], #1
 80106c4:	9a00      	ldr	r2, [sp, #0]
 80106c6:	1aaa      	subs	r2, r5, r2
 80106c8:	4591      	cmp	r9, r2
 80106ca:	ddba      	ble.n	8010642 <_dtoa_r+0xb32>
 80106cc:	4659      	mov	r1, fp
 80106ce:	2300      	movs	r3, #0
 80106d0:	220a      	movs	r2, #10
 80106d2:	4620      	mov	r0, r4
 80106d4:	f000 f876 	bl	80107c4 <__multadd>
 80106d8:	4683      	mov	fp, r0
 80106da:	e7eb      	b.n	80106b4 <_dtoa_r+0xba4>
 80106dc:	080135c3 	.word	0x080135c3
 80106e0:	0801351c 	.word	0x0801351c
 80106e4:	08013540 	.word	0x08013540

080106e8 <_localeconv_r>:
 80106e8:	4800      	ldr	r0, [pc, #0]	; (80106ec <_localeconv_r+0x4>)
 80106ea:	4770      	bx	lr
 80106ec:	2000016c 	.word	0x2000016c

080106f0 <malloc>:
 80106f0:	4b02      	ldr	r3, [pc, #8]	; (80106fc <malloc+0xc>)
 80106f2:	4601      	mov	r1, r0
 80106f4:	6818      	ldr	r0, [r3, #0]
 80106f6:	f000 bbe1 	b.w	8010ebc <_malloc_r>
 80106fa:	bf00      	nop
 80106fc:	20000018 	.word	0x20000018

08010700 <_Balloc>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010704:	4604      	mov	r4, r0
 8010706:	460d      	mov	r5, r1
 8010708:	b976      	cbnz	r6, 8010728 <_Balloc+0x28>
 801070a:	2010      	movs	r0, #16
 801070c:	f7ff fff0 	bl	80106f0 <malloc>
 8010710:	4602      	mov	r2, r0
 8010712:	6260      	str	r0, [r4, #36]	; 0x24
 8010714:	b920      	cbnz	r0, 8010720 <_Balloc+0x20>
 8010716:	4b18      	ldr	r3, [pc, #96]	; (8010778 <_Balloc+0x78>)
 8010718:	4818      	ldr	r0, [pc, #96]	; (801077c <_Balloc+0x7c>)
 801071a:	2166      	movs	r1, #102	; 0x66
 801071c:	f000 fd94 	bl	8011248 <__assert_func>
 8010720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010724:	6006      	str	r6, [r0, #0]
 8010726:	60c6      	str	r6, [r0, #12]
 8010728:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801072a:	68f3      	ldr	r3, [r6, #12]
 801072c:	b183      	cbz	r3, 8010750 <_Balloc+0x50>
 801072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010736:	b9b8      	cbnz	r0, 8010768 <_Balloc+0x68>
 8010738:	2101      	movs	r1, #1
 801073a:	fa01 f605 	lsl.w	r6, r1, r5
 801073e:	1d72      	adds	r2, r6, #5
 8010740:	0092      	lsls	r2, r2, #2
 8010742:	4620      	mov	r0, r4
 8010744:	f000 fb5a 	bl	8010dfc <_calloc_r>
 8010748:	b160      	cbz	r0, 8010764 <_Balloc+0x64>
 801074a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801074e:	e00e      	b.n	801076e <_Balloc+0x6e>
 8010750:	2221      	movs	r2, #33	; 0x21
 8010752:	2104      	movs	r1, #4
 8010754:	4620      	mov	r0, r4
 8010756:	f000 fb51 	bl	8010dfc <_calloc_r>
 801075a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801075c:	60f0      	str	r0, [r6, #12]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1e4      	bne.n	801072e <_Balloc+0x2e>
 8010764:	2000      	movs	r0, #0
 8010766:	bd70      	pop	{r4, r5, r6, pc}
 8010768:	6802      	ldr	r2, [r0, #0]
 801076a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801076e:	2300      	movs	r3, #0
 8010770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010774:	e7f7      	b.n	8010766 <_Balloc+0x66>
 8010776:	bf00      	nop
 8010778:	0801354d 	.word	0x0801354d
 801077c:	080135d4 	.word	0x080135d4

08010780 <_Bfree>:
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010784:	4605      	mov	r5, r0
 8010786:	460c      	mov	r4, r1
 8010788:	b976      	cbnz	r6, 80107a8 <_Bfree+0x28>
 801078a:	2010      	movs	r0, #16
 801078c:	f7ff ffb0 	bl	80106f0 <malloc>
 8010790:	4602      	mov	r2, r0
 8010792:	6268      	str	r0, [r5, #36]	; 0x24
 8010794:	b920      	cbnz	r0, 80107a0 <_Bfree+0x20>
 8010796:	4b09      	ldr	r3, [pc, #36]	; (80107bc <_Bfree+0x3c>)
 8010798:	4809      	ldr	r0, [pc, #36]	; (80107c0 <_Bfree+0x40>)
 801079a:	218a      	movs	r1, #138	; 0x8a
 801079c:	f000 fd54 	bl	8011248 <__assert_func>
 80107a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107a4:	6006      	str	r6, [r0, #0]
 80107a6:	60c6      	str	r6, [r0, #12]
 80107a8:	b13c      	cbz	r4, 80107ba <_Bfree+0x3a>
 80107aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80107ac:	6862      	ldr	r2, [r4, #4]
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80107b4:	6021      	str	r1, [r4, #0]
 80107b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80107ba:	bd70      	pop	{r4, r5, r6, pc}
 80107bc:	0801354d 	.word	0x0801354d
 80107c0:	080135d4 	.word	0x080135d4

080107c4 <__multadd>:
 80107c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c8:	690e      	ldr	r6, [r1, #16]
 80107ca:	4607      	mov	r7, r0
 80107cc:	4698      	mov	r8, r3
 80107ce:	460c      	mov	r4, r1
 80107d0:	f101 0014 	add.w	r0, r1, #20
 80107d4:	2300      	movs	r3, #0
 80107d6:	6805      	ldr	r5, [r0, #0]
 80107d8:	b2a9      	uxth	r1, r5
 80107da:	fb02 8101 	mla	r1, r2, r1, r8
 80107de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80107e2:	0c2d      	lsrs	r5, r5, #16
 80107e4:	fb02 c505 	mla	r5, r2, r5, ip
 80107e8:	b289      	uxth	r1, r1
 80107ea:	3301      	adds	r3, #1
 80107ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80107f0:	429e      	cmp	r6, r3
 80107f2:	f840 1b04 	str.w	r1, [r0], #4
 80107f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80107fa:	dcec      	bgt.n	80107d6 <__multadd+0x12>
 80107fc:	f1b8 0f00 	cmp.w	r8, #0
 8010800:	d022      	beq.n	8010848 <__multadd+0x84>
 8010802:	68a3      	ldr	r3, [r4, #8]
 8010804:	42b3      	cmp	r3, r6
 8010806:	dc19      	bgt.n	801083c <__multadd+0x78>
 8010808:	6861      	ldr	r1, [r4, #4]
 801080a:	4638      	mov	r0, r7
 801080c:	3101      	adds	r1, #1
 801080e:	f7ff ff77 	bl	8010700 <_Balloc>
 8010812:	4605      	mov	r5, r0
 8010814:	b928      	cbnz	r0, 8010822 <__multadd+0x5e>
 8010816:	4602      	mov	r2, r0
 8010818:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <__multadd+0x8c>)
 801081a:	480e      	ldr	r0, [pc, #56]	; (8010854 <__multadd+0x90>)
 801081c:	21b5      	movs	r1, #181	; 0xb5
 801081e:	f000 fd13 	bl	8011248 <__assert_func>
 8010822:	6922      	ldr	r2, [r4, #16]
 8010824:	3202      	adds	r2, #2
 8010826:	f104 010c 	add.w	r1, r4, #12
 801082a:	0092      	lsls	r2, r2, #2
 801082c:	300c      	adds	r0, #12
 801082e:	f7fe fc1b 	bl	800f068 <memcpy>
 8010832:	4621      	mov	r1, r4
 8010834:	4638      	mov	r0, r7
 8010836:	f7ff ffa3 	bl	8010780 <_Bfree>
 801083a:	462c      	mov	r4, r5
 801083c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010840:	3601      	adds	r6, #1
 8010842:	f8c3 8014 	str.w	r8, [r3, #20]
 8010846:	6126      	str	r6, [r4, #16]
 8010848:	4620      	mov	r0, r4
 801084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084e:	bf00      	nop
 8010850:	080135c3 	.word	0x080135c3
 8010854:	080135d4 	.word	0x080135d4

08010858 <__hi0bits>:
 8010858:	0c03      	lsrs	r3, r0, #16
 801085a:	041b      	lsls	r3, r3, #16
 801085c:	b9d3      	cbnz	r3, 8010894 <__hi0bits+0x3c>
 801085e:	0400      	lsls	r0, r0, #16
 8010860:	2310      	movs	r3, #16
 8010862:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010866:	bf04      	itt	eq
 8010868:	0200      	lsleq	r0, r0, #8
 801086a:	3308      	addeq	r3, #8
 801086c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010870:	bf04      	itt	eq
 8010872:	0100      	lsleq	r0, r0, #4
 8010874:	3304      	addeq	r3, #4
 8010876:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801087a:	bf04      	itt	eq
 801087c:	0080      	lsleq	r0, r0, #2
 801087e:	3302      	addeq	r3, #2
 8010880:	2800      	cmp	r0, #0
 8010882:	db05      	blt.n	8010890 <__hi0bits+0x38>
 8010884:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010888:	f103 0301 	add.w	r3, r3, #1
 801088c:	bf08      	it	eq
 801088e:	2320      	moveq	r3, #32
 8010890:	4618      	mov	r0, r3
 8010892:	4770      	bx	lr
 8010894:	2300      	movs	r3, #0
 8010896:	e7e4      	b.n	8010862 <__hi0bits+0xa>

08010898 <__lo0bits>:
 8010898:	6803      	ldr	r3, [r0, #0]
 801089a:	f013 0207 	ands.w	r2, r3, #7
 801089e:	4601      	mov	r1, r0
 80108a0:	d00b      	beq.n	80108ba <__lo0bits+0x22>
 80108a2:	07da      	lsls	r2, r3, #31
 80108a4:	d424      	bmi.n	80108f0 <__lo0bits+0x58>
 80108a6:	0798      	lsls	r0, r3, #30
 80108a8:	bf49      	itett	mi
 80108aa:	085b      	lsrmi	r3, r3, #1
 80108ac:	089b      	lsrpl	r3, r3, #2
 80108ae:	2001      	movmi	r0, #1
 80108b0:	600b      	strmi	r3, [r1, #0]
 80108b2:	bf5c      	itt	pl
 80108b4:	600b      	strpl	r3, [r1, #0]
 80108b6:	2002      	movpl	r0, #2
 80108b8:	4770      	bx	lr
 80108ba:	b298      	uxth	r0, r3
 80108bc:	b9b0      	cbnz	r0, 80108ec <__lo0bits+0x54>
 80108be:	0c1b      	lsrs	r3, r3, #16
 80108c0:	2010      	movs	r0, #16
 80108c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80108c6:	bf04      	itt	eq
 80108c8:	0a1b      	lsreq	r3, r3, #8
 80108ca:	3008      	addeq	r0, #8
 80108cc:	071a      	lsls	r2, r3, #28
 80108ce:	bf04      	itt	eq
 80108d0:	091b      	lsreq	r3, r3, #4
 80108d2:	3004      	addeq	r0, #4
 80108d4:	079a      	lsls	r2, r3, #30
 80108d6:	bf04      	itt	eq
 80108d8:	089b      	lsreq	r3, r3, #2
 80108da:	3002      	addeq	r0, #2
 80108dc:	07da      	lsls	r2, r3, #31
 80108de:	d403      	bmi.n	80108e8 <__lo0bits+0x50>
 80108e0:	085b      	lsrs	r3, r3, #1
 80108e2:	f100 0001 	add.w	r0, r0, #1
 80108e6:	d005      	beq.n	80108f4 <__lo0bits+0x5c>
 80108e8:	600b      	str	r3, [r1, #0]
 80108ea:	4770      	bx	lr
 80108ec:	4610      	mov	r0, r2
 80108ee:	e7e8      	b.n	80108c2 <__lo0bits+0x2a>
 80108f0:	2000      	movs	r0, #0
 80108f2:	4770      	bx	lr
 80108f4:	2020      	movs	r0, #32
 80108f6:	4770      	bx	lr

080108f8 <__i2b>:
 80108f8:	b510      	push	{r4, lr}
 80108fa:	460c      	mov	r4, r1
 80108fc:	2101      	movs	r1, #1
 80108fe:	f7ff feff 	bl	8010700 <_Balloc>
 8010902:	4602      	mov	r2, r0
 8010904:	b928      	cbnz	r0, 8010912 <__i2b+0x1a>
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <__i2b+0x24>)
 8010908:	4805      	ldr	r0, [pc, #20]	; (8010920 <__i2b+0x28>)
 801090a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801090e:	f000 fc9b 	bl	8011248 <__assert_func>
 8010912:	2301      	movs	r3, #1
 8010914:	6144      	str	r4, [r0, #20]
 8010916:	6103      	str	r3, [r0, #16]
 8010918:	bd10      	pop	{r4, pc}
 801091a:	bf00      	nop
 801091c:	080135c3 	.word	0x080135c3
 8010920:	080135d4 	.word	0x080135d4

08010924 <__multiply>:
 8010924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010928:	4614      	mov	r4, r2
 801092a:	690a      	ldr	r2, [r1, #16]
 801092c:	6923      	ldr	r3, [r4, #16]
 801092e:	429a      	cmp	r2, r3
 8010930:	bfb8      	it	lt
 8010932:	460b      	movlt	r3, r1
 8010934:	460d      	mov	r5, r1
 8010936:	bfbc      	itt	lt
 8010938:	4625      	movlt	r5, r4
 801093a:	461c      	movlt	r4, r3
 801093c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010940:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010944:	68ab      	ldr	r3, [r5, #8]
 8010946:	6869      	ldr	r1, [r5, #4]
 8010948:	eb0a 0709 	add.w	r7, sl, r9
 801094c:	42bb      	cmp	r3, r7
 801094e:	b085      	sub	sp, #20
 8010950:	bfb8      	it	lt
 8010952:	3101      	addlt	r1, #1
 8010954:	f7ff fed4 	bl	8010700 <_Balloc>
 8010958:	b930      	cbnz	r0, 8010968 <__multiply+0x44>
 801095a:	4602      	mov	r2, r0
 801095c:	4b42      	ldr	r3, [pc, #264]	; (8010a68 <__multiply+0x144>)
 801095e:	4843      	ldr	r0, [pc, #268]	; (8010a6c <__multiply+0x148>)
 8010960:	f240 115d 	movw	r1, #349	; 0x15d
 8010964:	f000 fc70 	bl	8011248 <__assert_func>
 8010968:	f100 0614 	add.w	r6, r0, #20
 801096c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010970:	4633      	mov	r3, r6
 8010972:	2200      	movs	r2, #0
 8010974:	4543      	cmp	r3, r8
 8010976:	d31e      	bcc.n	80109b6 <__multiply+0x92>
 8010978:	f105 0c14 	add.w	ip, r5, #20
 801097c:	f104 0314 	add.w	r3, r4, #20
 8010980:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010984:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010988:	9202      	str	r2, [sp, #8]
 801098a:	ebac 0205 	sub.w	r2, ip, r5
 801098e:	3a15      	subs	r2, #21
 8010990:	f022 0203 	bic.w	r2, r2, #3
 8010994:	3204      	adds	r2, #4
 8010996:	f105 0115 	add.w	r1, r5, #21
 801099a:	458c      	cmp	ip, r1
 801099c:	bf38      	it	cc
 801099e:	2204      	movcc	r2, #4
 80109a0:	9201      	str	r2, [sp, #4]
 80109a2:	9a02      	ldr	r2, [sp, #8]
 80109a4:	9303      	str	r3, [sp, #12]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d808      	bhi.n	80109bc <__multiply+0x98>
 80109aa:	2f00      	cmp	r7, #0
 80109ac:	dc55      	bgt.n	8010a5a <__multiply+0x136>
 80109ae:	6107      	str	r7, [r0, #16]
 80109b0:	b005      	add	sp, #20
 80109b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b6:	f843 2b04 	str.w	r2, [r3], #4
 80109ba:	e7db      	b.n	8010974 <__multiply+0x50>
 80109bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80109c0:	f1ba 0f00 	cmp.w	sl, #0
 80109c4:	d020      	beq.n	8010a08 <__multiply+0xe4>
 80109c6:	f105 0e14 	add.w	lr, r5, #20
 80109ca:	46b1      	mov	r9, r6
 80109cc:	2200      	movs	r2, #0
 80109ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80109d2:	f8d9 b000 	ldr.w	fp, [r9]
 80109d6:	b2a1      	uxth	r1, r4
 80109d8:	fa1f fb8b 	uxth.w	fp, fp
 80109dc:	fb0a b101 	mla	r1, sl, r1, fp
 80109e0:	4411      	add	r1, r2
 80109e2:	f8d9 2000 	ldr.w	r2, [r9]
 80109e6:	0c24      	lsrs	r4, r4, #16
 80109e8:	0c12      	lsrs	r2, r2, #16
 80109ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80109ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80109f2:	b289      	uxth	r1, r1
 80109f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80109f8:	45f4      	cmp	ip, lr
 80109fa:	f849 1b04 	str.w	r1, [r9], #4
 80109fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010a02:	d8e4      	bhi.n	80109ce <__multiply+0xaa>
 8010a04:	9901      	ldr	r1, [sp, #4]
 8010a06:	5072      	str	r2, [r6, r1]
 8010a08:	9a03      	ldr	r2, [sp, #12]
 8010a0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010a0e:	3304      	adds	r3, #4
 8010a10:	f1b9 0f00 	cmp.w	r9, #0
 8010a14:	d01f      	beq.n	8010a56 <__multiply+0x132>
 8010a16:	6834      	ldr	r4, [r6, #0]
 8010a18:	f105 0114 	add.w	r1, r5, #20
 8010a1c:	46b6      	mov	lr, r6
 8010a1e:	f04f 0a00 	mov.w	sl, #0
 8010a22:	880a      	ldrh	r2, [r1, #0]
 8010a24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010a28:	fb09 b202 	mla	r2, r9, r2, fp
 8010a2c:	4492      	add	sl, r2
 8010a2e:	b2a4      	uxth	r4, r4
 8010a30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010a34:	f84e 4b04 	str.w	r4, [lr], #4
 8010a38:	f851 4b04 	ldr.w	r4, [r1], #4
 8010a3c:	f8be 2000 	ldrh.w	r2, [lr]
 8010a40:	0c24      	lsrs	r4, r4, #16
 8010a42:	fb09 2404 	mla	r4, r9, r4, r2
 8010a46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010a4a:	458c      	cmp	ip, r1
 8010a4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010a50:	d8e7      	bhi.n	8010a22 <__multiply+0xfe>
 8010a52:	9a01      	ldr	r2, [sp, #4]
 8010a54:	50b4      	str	r4, [r6, r2]
 8010a56:	3604      	adds	r6, #4
 8010a58:	e7a3      	b.n	80109a2 <__multiply+0x7e>
 8010a5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1a5      	bne.n	80109ae <__multiply+0x8a>
 8010a62:	3f01      	subs	r7, #1
 8010a64:	e7a1      	b.n	80109aa <__multiply+0x86>
 8010a66:	bf00      	nop
 8010a68:	080135c3 	.word	0x080135c3
 8010a6c:	080135d4 	.word	0x080135d4

08010a70 <__pow5mult>:
 8010a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a74:	4615      	mov	r5, r2
 8010a76:	f012 0203 	ands.w	r2, r2, #3
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	460f      	mov	r7, r1
 8010a7e:	d007      	beq.n	8010a90 <__pow5mult+0x20>
 8010a80:	4c25      	ldr	r4, [pc, #148]	; (8010b18 <__pow5mult+0xa8>)
 8010a82:	3a01      	subs	r2, #1
 8010a84:	2300      	movs	r3, #0
 8010a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a8a:	f7ff fe9b 	bl	80107c4 <__multadd>
 8010a8e:	4607      	mov	r7, r0
 8010a90:	10ad      	asrs	r5, r5, #2
 8010a92:	d03d      	beq.n	8010b10 <__pow5mult+0xa0>
 8010a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a96:	b97c      	cbnz	r4, 8010ab8 <__pow5mult+0x48>
 8010a98:	2010      	movs	r0, #16
 8010a9a:	f7ff fe29 	bl	80106f0 <malloc>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	6270      	str	r0, [r6, #36]	; 0x24
 8010aa2:	b928      	cbnz	r0, 8010ab0 <__pow5mult+0x40>
 8010aa4:	4b1d      	ldr	r3, [pc, #116]	; (8010b1c <__pow5mult+0xac>)
 8010aa6:	481e      	ldr	r0, [pc, #120]	; (8010b20 <__pow5mult+0xb0>)
 8010aa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010aac:	f000 fbcc 	bl	8011248 <__assert_func>
 8010ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ab4:	6004      	str	r4, [r0, #0]
 8010ab6:	60c4      	str	r4, [r0, #12]
 8010ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ac0:	b94c      	cbnz	r4, 8010ad6 <__pow5mult+0x66>
 8010ac2:	f240 2171 	movw	r1, #625	; 0x271
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f7ff ff16 	bl	80108f8 <__i2b>
 8010acc:	2300      	movs	r3, #0
 8010ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	6003      	str	r3, [r0, #0]
 8010ad6:	f04f 0900 	mov.w	r9, #0
 8010ada:	07eb      	lsls	r3, r5, #31
 8010adc:	d50a      	bpl.n	8010af4 <__pow5mult+0x84>
 8010ade:	4639      	mov	r1, r7
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	f7ff ff1e 	bl	8010924 <__multiply>
 8010ae8:	4639      	mov	r1, r7
 8010aea:	4680      	mov	r8, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7ff fe47 	bl	8010780 <_Bfree>
 8010af2:	4647      	mov	r7, r8
 8010af4:	106d      	asrs	r5, r5, #1
 8010af6:	d00b      	beq.n	8010b10 <__pow5mult+0xa0>
 8010af8:	6820      	ldr	r0, [r4, #0]
 8010afa:	b938      	cbnz	r0, 8010b0c <__pow5mult+0x9c>
 8010afc:	4622      	mov	r2, r4
 8010afe:	4621      	mov	r1, r4
 8010b00:	4630      	mov	r0, r6
 8010b02:	f7ff ff0f 	bl	8010924 <__multiply>
 8010b06:	6020      	str	r0, [r4, #0]
 8010b08:	f8c0 9000 	str.w	r9, [r0]
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	e7e4      	b.n	8010ada <__pow5mult+0x6a>
 8010b10:	4638      	mov	r0, r7
 8010b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b16:	bf00      	nop
 8010b18:	08013728 	.word	0x08013728
 8010b1c:	0801354d 	.word	0x0801354d
 8010b20:	080135d4 	.word	0x080135d4

08010b24 <__lshift>:
 8010b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b28:	460c      	mov	r4, r1
 8010b2a:	6849      	ldr	r1, [r1, #4]
 8010b2c:	6923      	ldr	r3, [r4, #16]
 8010b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b32:	68a3      	ldr	r3, [r4, #8]
 8010b34:	4607      	mov	r7, r0
 8010b36:	4691      	mov	r9, r2
 8010b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b3c:	f108 0601 	add.w	r6, r8, #1
 8010b40:	42b3      	cmp	r3, r6
 8010b42:	db0b      	blt.n	8010b5c <__lshift+0x38>
 8010b44:	4638      	mov	r0, r7
 8010b46:	f7ff fddb 	bl	8010700 <_Balloc>
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	b948      	cbnz	r0, 8010b62 <__lshift+0x3e>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	4b28      	ldr	r3, [pc, #160]	; (8010bf4 <__lshift+0xd0>)
 8010b52:	4829      	ldr	r0, [pc, #164]	; (8010bf8 <__lshift+0xd4>)
 8010b54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b58:	f000 fb76 	bl	8011248 <__assert_func>
 8010b5c:	3101      	adds	r1, #1
 8010b5e:	005b      	lsls	r3, r3, #1
 8010b60:	e7ee      	b.n	8010b40 <__lshift+0x1c>
 8010b62:	2300      	movs	r3, #0
 8010b64:	f100 0114 	add.w	r1, r0, #20
 8010b68:	f100 0210 	add.w	r2, r0, #16
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	4553      	cmp	r3, sl
 8010b70:	db33      	blt.n	8010bda <__lshift+0xb6>
 8010b72:	6920      	ldr	r0, [r4, #16]
 8010b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b78:	f104 0314 	add.w	r3, r4, #20
 8010b7c:	f019 091f 	ands.w	r9, r9, #31
 8010b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b88:	d02b      	beq.n	8010be2 <__lshift+0xbe>
 8010b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8010b8e:	468a      	mov	sl, r1
 8010b90:	2200      	movs	r2, #0
 8010b92:	6818      	ldr	r0, [r3, #0]
 8010b94:	fa00 f009 	lsl.w	r0, r0, r9
 8010b98:	4302      	orrs	r2, r0
 8010b9a:	f84a 2b04 	str.w	r2, [sl], #4
 8010b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ba2:	459c      	cmp	ip, r3
 8010ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ba8:	d8f3      	bhi.n	8010b92 <__lshift+0x6e>
 8010baa:	ebac 0304 	sub.w	r3, ip, r4
 8010bae:	3b15      	subs	r3, #21
 8010bb0:	f023 0303 	bic.w	r3, r3, #3
 8010bb4:	3304      	adds	r3, #4
 8010bb6:	f104 0015 	add.w	r0, r4, #21
 8010bba:	4584      	cmp	ip, r0
 8010bbc:	bf38      	it	cc
 8010bbe:	2304      	movcc	r3, #4
 8010bc0:	50ca      	str	r2, [r1, r3]
 8010bc2:	b10a      	cbz	r2, 8010bc8 <__lshift+0xa4>
 8010bc4:	f108 0602 	add.w	r6, r8, #2
 8010bc8:	3e01      	subs	r6, #1
 8010bca:	4638      	mov	r0, r7
 8010bcc:	612e      	str	r6, [r5, #16]
 8010bce:	4621      	mov	r1, r4
 8010bd0:	f7ff fdd6 	bl	8010780 <_Bfree>
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bde:	3301      	adds	r3, #1
 8010be0:	e7c5      	b.n	8010b6e <__lshift+0x4a>
 8010be2:	3904      	subs	r1, #4
 8010be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010be8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bec:	459c      	cmp	ip, r3
 8010bee:	d8f9      	bhi.n	8010be4 <__lshift+0xc0>
 8010bf0:	e7ea      	b.n	8010bc8 <__lshift+0xa4>
 8010bf2:	bf00      	nop
 8010bf4:	080135c3 	.word	0x080135c3
 8010bf8:	080135d4 	.word	0x080135d4

08010bfc <__mcmp>:
 8010bfc:	b530      	push	{r4, r5, lr}
 8010bfe:	6902      	ldr	r2, [r0, #16]
 8010c00:	690c      	ldr	r4, [r1, #16]
 8010c02:	1b12      	subs	r2, r2, r4
 8010c04:	d10e      	bne.n	8010c24 <__mcmp+0x28>
 8010c06:	f100 0314 	add.w	r3, r0, #20
 8010c0a:	3114      	adds	r1, #20
 8010c0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010c10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010c18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c1c:	42a5      	cmp	r5, r4
 8010c1e:	d003      	beq.n	8010c28 <__mcmp+0x2c>
 8010c20:	d305      	bcc.n	8010c2e <__mcmp+0x32>
 8010c22:	2201      	movs	r2, #1
 8010c24:	4610      	mov	r0, r2
 8010c26:	bd30      	pop	{r4, r5, pc}
 8010c28:	4283      	cmp	r3, r0
 8010c2a:	d3f3      	bcc.n	8010c14 <__mcmp+0x18>
 8010c2c:	e7fa      	b.n	8010c24 <__mcmp+0x28>
 8010c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c32:	e7f7      	b.n	8010c24 <__mcmp+0x28>

08010c34 <__mdiff>:
 8010c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c38:	460c      	mov	r4, r1
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	4620      	mov	r0, r4
 8010c40:	4617      	mov	r7, r2
 8010c42:	f7ff ffdb 	bl	8010bfc <__mcmp>
 8010c46:	1e05      	subs	r5, r0, #0
 8010c48:	d110      	bne.n	8010c6c <__mdiff+0x38>
 8010c4a:	4629      	mov	r1, r5
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	f7ff fd57 	bl	8010700 <_Balloc>
 8010c52:	b930      	cbnz	r0, 8010c62 <__mdiff+0x2e>
 8010c54:	4b39      	ldr	r3, [pc, #228]	; (8010d3c <__mdiff+0x108>)
 8010c56:	4602      	mov	r2, r0
 8010c58:	f240 2132 	movw	r1, #562	; 0x232
 8010c5c:	4838      	ldr	r0, [pc, #224]	; (8010d40 <__mdiff+0x10c>)
 8010c5e:	f000 faf3 	bl	8011248 <__assert_func>
 8010c62:	2301      	movs	r3, #1
 8010c64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6c:	bfa4      	itt	ge
 8010c6e:	463b      	movge	r3, r7
 8010c70:	4627      	movge	r7, r4
 8010c72:	4630      	mov	r0, r6
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	bfa6      	itte	ge
 8010c78:	461c      	movge	r4, r3
 8010c7a:	2500      	movge	r5, #0
 8010c7c:	2501      	movlt	r5, #1
 8010c7e:	f7ff fd3f 	bl	8010700 <_Balloc>
 8010c82:	b920      	cbnz	r0, 8010c8e <__mdiff+0x5a>
 8010c84:	4b2d      	ldr	r3, [pc, #180]	; (8010d3c <__mdiff+0x108>)
 8010c86:	4602      	mov	r2, r0
 8010c88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c8c:	e7e6      	b.n	8010c5c <__mdiff+0x28>
 8010c8e:	693e      	ldr	r6, [r7, #16]
 8010c90:	60c5      	str	r5, [r0, #12]
 8010c92:	6925      	ldr	r5, [r4, #16]
 8010c94:	f107 0114 	add.w	r1, r7, #20
 8010c98:	f104 0914 	add.w	r9, r4, #20
 8010c9c:	f100 0e14 	add.w	lr, r0, #20
 8010ca0:	f107 0210 	add.w	r2, r7, #16
 8010ca4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010ca8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010cac:	46f2      	mov	sl, lr
 8010cae:	2700      	movs	r7, #0
 8010cb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010cb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010cb8:	fa1f f883 	uxth.w	r8, r3
 8010cbc:	fa17 f78b 	uxtah	r7, r7, fp
 8010cc0:	0c1b      	lsrs	r3, r3, #16
 8010cc2:	eba7 0808 	sub.w	r8, r7, r8
 8010cc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010cca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010cce:	fa1f f888 	uxth.w	r8, r8
 8010cd2:	141f      	asrs	r7, r3, #16
 8010cd4:	454d      	cmp	r5, r9
 8010cd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010cda:	f84a 3b04 	str.w	r3, [sl], #4
 8010cde:	d8e7      	bhi.n	8010cb0 <__mdiff+0x7c>
 8010ce0:	1b2b      	subs	r3, r5, r4
 8010ce2:	3b15      	subs	r3, #21
 8010ce4:	f023 0303 	bic.w	r3, r3, #3
 8010ce8:	3304      	adds	r3, #4
 8010cea:	3415      	adds	r4, #21
 8010cec:	42a5      	cmp	r5, r4
 8010cee:	bf38      	it	cc
 8010cf0:	2304      	movcc	r3, #4
 8010cf2:	4419      	add	r1, r3
 8010cf4:	4473      	add	r3, lr
 8010cf6:	469e      	mov	lr, r3
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	4565      	cmp	r5, ip
 8010cfc:	d30e      	bcc.n	8010d1c <__mdiff+0xe8>
 8010cfe:	f10c 0203 	add.w	r2, ip, #3
 8010d02:	1a52      	subs	r2, r2, r1
 8010d04:	f022 0203 	bic.w	r2, r2, #3
 8010d08:	3903      	subs	r1, #3
 8010d0a:	458c      	cmp	ip, r1
 8010d0c:	bf38      	it	cc
 8010d0e:	2200      	movcc	r2, #0
 8010d10:	441a      	add	r2, r3
 8010d12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010d16:	b17b      	cbz	r3, 8010d38 <__mdiff+0x104>
 8010d18:	6106      	str	r6, [r0, #16]
 8010d1a:	e7a5      	b.n	8010c68 <__mdiff+0x34>
 8010d1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010d20:	fa17 f488 	uxtah	r4, r7, r8
 8010d24:	1422      	asrs	r2, r4, #16
 8010d26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010d2a:	b2a4      	uxth	r4, r4
 8010d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010d30:	f84e 4b04 	str.w	r4, [lr], #4
 8010d34:	1417      	asrs	r7, r2, #16
 8010d36:	e7e0      	b.n	8010cfa <__mdiff+0xc6>
 8010d38:	3e01      	subs	r6, #1
 8010d3a:	e7ea      	b.n	8010d12 <__mdiff+0xde>
 8010d3c:	080135c3 	.word	0x080135c3
 8010d40:	080135d4 	.word	0x080135d4

08010d44 <__d2b>:
 8010d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d48:	4689      	mov	r9, r1
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	ec57 6b10 	vmov	r6, r7, d0
 8010d50:	4690      	mov	r8, r2
 8010d52:	f7ff fcd5 	bl	8010700 <_Balloc>
 8010d56:	4604      	mov	r4, r0
 8010d58:	b930      	cbnz	r0, 8010d68 <__d2b+0x24>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	4b25      	ldr	r3, [pc, #148]	; (8010df4 <__d2b+0xb0>)
 8010d5e:	4826      	ldr	r0, [pc, #152]	; (8010df8 <__d2b+0xb4>)
 8010d60:	f240 310a 	movw	r1, #778	; 0x30a
 8010d64:	f000 fa70 	bl	8011248 <__assert_func>
 8010d68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010d6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d70:	bb35      	cbnz	r5, 8010dc0 <__d2b+0x7c>
 8010d72:	2e00      	cmp	r6, #0
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	d028      	beq.n	8010dca <__d2b+0x86>
 8010d78:	4668      	mov	r0, sp
 8010d7a:	9600      	str	r6, [sp, #0]
 8010d7c:	f7ff fd8c 	bl	8010898 <__lo0bits>
 8010d80:	9900      	ldr	r1, [sp, #0]
 8010d82:	b300      	cbz	r0, 8010dc6 <__d2b+0x82>
 8010d84:	9a01      	ldr	r2, [sp, #4]
 8010d86:	f1c0 0320 	rsb	r3, r0, #32
 8010d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d8e:	430b      	orrs	r3, r1
 8010d90:	40c2      	lsrs	r2, r0
 8010d92:	6163      	str	r3, [r4, #20]
 8010d94:	9201      	str	r2, [sp, #4]
 8010d96:	9b01      	ldr	r3, [sp, #4]
 8010d98:	61a3      	str	r3, [r4, #24]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	bf14      	ite	ne
 8010d9e:	2202      	movne	r2, #2
 8010da0:	2201      	moveq	r2, #1
 8010da2:	6122      	str	r2, [r4, #16]
 8010da4:	b1d5      	cbz	r5, 8010ddc <__d2b+0x98>
 8010da6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010daa:	4405      	add	r5, r0
 8010dac:	f8c9 5000 	str.w	r5, [r9]
 8010db0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010db4:	f8c8 0000 	str.w	r0, [r8]
 8010db8:	4620      	mov	r0, r4
 8010dba:	b003      	add	sp, #12
 8010dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010dc4:	e7d5      	b.n	8010d72 <__d2b+0x2e>
 8010dc6:	6161      	str	r1, [r4, #20]
 8010dc8:	e7e5      	b.n	8010d96 <__d2b+0x52>
 8010dca:	a801      	add	r0, sp, #4
 8010dcc:	f7ff fd64 	bl	8010898 <__lo0bits>
 8010dd0:	9b01      	ldr	r3, [sp, #4]
 8010dd2:	6163      	str	r3, [r4, #20]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	6122      	str	r2, [r4, #16]
 8010dd8:	3020      	adds	r0, #32
 8010dda:	e7e3      	b.n	8010da4 <__d2b+0x60>
 8010ddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010de0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010de4:	f8c9 0000 	str.w	r0, [r9]
 8010de8:	6918      	ldr	r0, [r3, #16]
 8010dea:	f7ff fd35 	bl	8010858 <__hi0bits>
 8010dee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010df2:	e7df      	b.n	8010db4 <__d2b+0x70>
 8010df4:	080135c3 	.word	0x080135c3
 8010df8:	080135d4 	.word	0x080135d4

08010dfc <_calloc_r>:
 8010dfc:	b513      	push	{r0, r1, r4, lr}
 8010dfe:	434a      	muls	r2, r1
 8010e00:	4611      	mov	r1, r2
 8010e02:	9201      	str	r2, [sp, #4]
 8010e04:	f000 f85a 	bl	8010ebc <_malloc_r>
 8010e08:	4604      	mov	r4, r0
 8010e0a:	b118      	cbz	r0, 8010e14 <_calloc_r+0x18>
 8010e0c:	9a01      	ldr	r2, [sp, #4]
 8010e0e:	2100      	movs	r1, #0
 8010e10:	f7fe f938 	bl	800f084 <memset>
 8010e14:	4620      	mov	r0, r4
 8010e16:	b002      	add	sp, #8
 8010e18:	bd10      	pop	{r4, pc}
	...

08010e1c <_free_r>:
 8010e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e1e:	2900      	cmp	r1, #0
 8010e20:	d048      	beq.n	8010eb4 <_free_r+0x98>
 8010e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e26:	9001      	str	r0, [sp, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8010e2e:	bfb8      	it	lt
 8010e30:	18e4      	addlt	r4, r4, r3
 8010e32:	f000 fa65 	bl	8011300 <__malloc_lock>
 8010e36:	4a20      	ldr	r2, [pc, #128]	; (8010eb8 <_free_r+0x9c>)
 8010e38:	9801      	ldr	r0, [sp, #4]
 8010e3a:	6813      	ldr	r3, [r2, #0]
 8010e3c:	4615      	mov	r5, r2
 8010e3e:	b933      	cbnz	r3, 8010e4e <_free_r+0x32>
 8010e40:	6063      	str	r3, [r4, #4]
 8010e42:	6014      	str	r4, [r2, #0]
 8010e44:	b003      	add	sp, #12
 8010e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e4a:	f000 ba5f 	b.w	801130c <__malloc_unlock>
 8010e4e:	42a3      	cmp	r3, r4
 8010e50:	d90b      	bls.n	8010e6a <_free_r+0x4e>
 8010e52:	6821      	ldr	r1, [r4, #0]
 8010e54:	1862      	adds	r2, r4, r1
 8010e56:	4293      	cmp	r3, r2
 8010e58:	bf04      	itt	eq
 8010e5a:	681a      	ldreq	r2, [r3, #0]
 8010e5c:	685b      	ldreq	r3, [r3, #4]
 8010e5e:	6063      	str	r3, [r4, #4]
 8010e60:	bf04      	itt	eq
 8010e62:	1852      	addeq	r2, r2, r1
 8010e64:	6022      	streq	r2, [r4, #0]
 8010e66:	602c      	str	r4, [r5, #0]
 8010e68:	e7ec      	b.n	8010e44 <_free_r+0x28>
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	b10b      	cbz	r3, 8010e74 <_free_r+0x58>
 8010e70:	42a3      	cmp	r3, r4
 8010e72:	d9fa      	bls.n	8010e6a <_free_r+0x4e>
 8010e74:	6811      	ldr	r1, [r2, #0]
 8010e76:	1855      	adds	r5, r2, r1
 8010e78:	42a5      	cmp	r5, r4
 8010e7a:	d10b      	bne.n	8010e94 <_free_r+0x78>
 8010e7c:	6824      	ldr	r4, [r4, #0]
 8010e7e:	4421      	add	r1, r4
 8010e80:	1854      	adds	r4, r2, r1
 8010e82:	42a3      	cmp	r3, r4
 8010e84:	6011      	str	r1, [r2, #0]
 8010e86:	d1dd      	bne.n	8010e44 <_free_r+0x28>
 8010e88:	681c      	ldr	r4, [r3, #0]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	6053      	str	r3, [r2, #4]
 8010e8e:	4421      	add	r1, r4
 8010e90:	6011      	str	r1, [r2, #0]
 8010e92:	e7d7      	b.n	8010e44 <_free_r+0x28>
 8010e94:	d902      	bls.n	8010e9c <_free_r+0x80>
 8010e96:	230c      	movs	r3, #12
 8010e98:	6003      	str	r3, [r0, #0]
 8010e9a:	e7d3      	b.n	8010e44 <_free_r+0x28>
 8010e9c:	6825      	ldr	r5, [r4, #0]
 8010e9e:	1961      	adds	r1, r4, r5
 8010ea0:	428b      	cmp	r3, r1
 8010ea2:	bf04      	itt	eq
 8010ea4:	6819      	ldreq	r1, [r3, #0]
 8010ea6:	685b      	ldreq	r3, [r3, #4]
 8010ea8:	6063      	str	r3, [r4, #4]
 8010eaa:	bf04      	itt	eq
 8010eac:	1949      	addeq	r1, r1, r5
 8010eae:	6021      	streq	r1, [r4, #0]
 8010eb0:	6054      	str	r4, [r2, #4]
 8010eb2:	e7c7      	b.n	8010e44 <_free_r+0x28>
 8010eb4:	b003      	add	sp, #12
 8010eb6:	bd30      	pop	{r4, r5, pc}
 8010eb8:	20006428 	.word	0x20006428

08010ebc <_malloc_r>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	1ccd      	adds	r5, r1, #3
 8010ec0:	f025 0503 	bic.w	r5, r5, #3
 8010ec4:	3508      	adds	r5, #8
 8010ec6:	2d0c      	cmp	r5, #12
 8010ec8:	bf38      	it	cc
 8010eca:	250c      	movcc	r5, #12
 8010ecc:	2d00      	cmp	r5, #0
 8010ece:	4606      	mov	r6, r0
 8010ed0:	db01      	blt.n	8010ed6 <_malloc_r+0x1a>
 8010ed2:	42a9      	cmp	r1, r5
 8010ed4:	d903      	bls.n	8010ede <_malloc_r+0x22>
 8010ed6:	230c      	movs	r3, #12
 8010ed8:	6033      	str	r3, [r6, #0]
 8010eda:	2000      	movs	r0, #0
 8010edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ede:	f000 fa0f 	bl	8011300 <__malloc_lock>
 8010ee2:	4921      	ldr	r1, [pc, #132]	; (8010f68 <_malloc_r+0xac>)
 8010ee4:	680a      	ldr	r2, [r1, #0]
 8010ee6:	4614      	mov	r4, r2
 8010ee8:	b99c      	cbnz	r4, 8010f12 <_malloc_r+0x56>
 8010eea:	4f20      	ldr	r7, [pc, #128]	; (8010f6c <_malloc_r+0xb0>)
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	b923      	cbnz	r3, 8010efa <_malloc_r+0x3e>
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f000 f998 	bl	8011228 <_sbrk_r>
 8010ef8:	6038      	str	r0, [r7, #0]
 8010efa:	4629      	mov	r1, r5
 8010efc:	4630      	mov	r0, r6
 8010efe:	f000 f993 	bl	8011228 <_sbrk_r>
 8010f02:	1c43      	adds	r3, r0, #1
 8010f04:	d123      	bne.n	8010f4e <_malloc_r+0x92>
 8010f06:	230c      	movs	r3, #12
 8010f08:	6033      	str	r3, [r6, #0]
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f000 f9fe 	bl	801130c <__malloc_unlock>
 8010f10:	e7e3      	b.n	8010eda <_malloc_r+0x1e>
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	1b5b      	subs	r3, r3, r5
 8010f16:	d417      	bmi.n	8010f48 <_malloc_r+0x8c>
 8010f18:	2b0b      	cmp	r3, #11
 8010f1a:	d903      	bls.n	8010f24 <_malloc_r+0x68>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	441c      	add	r4, r3
 8010f20:	6025      	str	r5, [r4, #0]
 8010f22:	e004      	b.n	8010f2e <_malloc_r+0x72>
 8010f24:	6863      	ldr	r3, [r4, #4]
 8010f26:	42a2      	cmp	r2, r4
 8010f28:	bf0c      	ite	eq
 8010f2a:	600b      	streq	r3, [r1, #0]
 8010f2c:	6053      	strne	r3, [r2, #4]
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f000 f9ec 	bl	801130c <__malloc_unlock>
 8010f34:	f104 000b 	add.w	r0, r4, #11
 8010f38:	1d23      	adds	r3, r4, #4
 8010f3a:	f020 0007 	bic.w	r0, r0, #7
 8010f3e:	1ac2      	subs	r2, r0, r3
 8010f40:	d0cc      	beq.n	8010edc <_malloc_r+0x20>
 8010f42:	1a1b      	subs	r3, r3, r0
 8010f44:	50a3      	str	r3, [r4, r2]
 8010f46:	e7c9      	b.n	8010edc <_malloc_r+0x20>
 8010f48:	4622      	mov	r2, r4
 8010f4a:	6864      	ldr	r4, [r4, #4]
 8010f4c:	e7cc      	b.n	8010ee8 <_malloc_r+0x2c>
 8010f4e:	1cc4      	adds	r4, r0, #3
 8010f50:	f024 0403 	bic.w	r4, r4, #3
 8010f54:	42a0      	cmp	r0, r4
 8010f56:	d0e3      	beq.n	8010f20 <_malloc_r+0x64>
 8010f58:	1a21      	subs	r1, r4, r0
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	f000 f964 	bl	8011228 <_sbrk_r>
 8010f60:	3001      	adds	r0, #1
 8010f62:	d1dd      	bne.n	8010f20 <_malloc_r+0x64>
 8010f64:	e7cf      	b.n	8010f06 <_malloc_r+0x4a>
 8010f66:	bf00      	nop
 8010f68:	20006428 	.word	0x20006428
 8010f6c:	2000642c 	.word	0x2000642c

08010f70 <__ssputs_r>:
 8010f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f74:	688e      	ldr	r6, [r1, #8]
 8010f76:	429e      	cmp	r6, r3
 8010f78:	4682      	mov	sl, r0
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	4690      	mov	r8, r2
 8010f7e:	461f      	mov	r7, r3
 8010f80:	d838      	bhi.n	8010ff4 <__ssputs_r+0x84>
 8010f82:	898a      	ldrh	r2, [r1, #12]
 8010f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f88:	d032      	beq.n	8010ff0 <__ssputs_r+0x80>
 8010f8a:	6825      	ldr	r5, [r4, #0]
 8010f8c:	6909      	ldr	r1, [r1, #16]
 8010f8e:	eba5 0901 	sub.w	r9, r5, r1
 8010f92:	6965      	ldr	r5, [r4, #20]
 8010f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	444b      	add	r3, r9
 8010fa0:	106d      	asrs	r5, r5, #1
 8010fa2:	429d      	cmp	r5, r3
 8010fa4:	bf38      	it	cc
 8010fa6:	461d      	movcc	r5, r3
 8010fa8:	0553      	lsls	r3, r2, #21
 8010faa:	d531      	bpl.n	8011010 <__ssputs_r+0xa0>
 8010fac:	4629      	mov	r1, r5
 8010fae:	f7ff ff85 	bl	8010ebc <_malloc_r>
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	b950      	cbnz	r0, 8010fcc <__ssputs_r+0x5c>
 8010fb6:	230c      	movs	r3, #12
 8010fb8:	f8ca 3000 	str.w	r3, [sl]
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fcc:	6921      	ldr	r1, [r4, #16]
 8010fce:	464a      	mov	r2, r9
 8010fd0:	f7fe f84a 	bl	800f068 <memcpy>
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fde:	81a3      	strh	r3, [r4, #12]
 8010fe0:	6126      	str	r6, [r4, #16]
 8010fe2:	6165      	str	r5, [r4, #20]
 8010fe4:	444e      	add	r6, r9
 8010fe6:	eba5 0509 	sub.w	r5, r5, r9
 8010fea:	6026      	str	r6, [r4, #0]
 8010fec:	60a5      	str	r5, [r4, #8]
 8010fee:	463e      	mov	r6, r7
 8010ff0:	42be      	cmp	r6, r7
 8010ff2:	d900      	bls.n	8010ff6 <__ssputs_r+0x86>
 8010ff4:	463e      	mov	r6, r7
 8010ff6:	4632      	mov	r2, r6
 8010ff8:	6820      	ldr	r0, [r4, #0]
 8010ffa:	4641      	mov	r1, r8
 8010ffc:	f000 f966 	bl	80112cc <memmove>
 8011000:	68a3      	ldr	r3, [r4, #8]
 8011002:	6822      	ldr	r2, [r4, #0]
 8011004:	1b9b      	subs	r3, r3, r6
 8011006:	4432      	add	r2, r6
 8011008:	60a3      	str	r3, [r4, #8]
 801100a:	6022      	str	r2, [r4, #0]
 801100c:	2000      	movs	r0, #0
 801100e:	e7db      	b.n	8010fc8 <__ssputs_r+0x58>
 8011010:	462a      	mov	r2, r5
 8011012:	f000 f981 	bl	8011318 <_realloc_r>
 8011016:	4606      	mov	r6, r0
 8011018:	2800      	cmp	r0, #0
 801101a:	d1e1      	bne.n	8010fe0 <__ssputs_r+0x70>
 801101c:	6921      	ldr	r1, [r4, #16]
 801101e:	4650      	mov	r0, sl
 8011020:	f7ff fefc 	bl	8010e1c <_free_r>
 8011024:	e7c7      	b.n	8010fb6 <__ssputs_r+0x46>
	...

08011028 <_svfiprintf_r>:
 8011028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	4698      	mov	r8, r3
 801102e:	898b      	ldrh	r3, [r1, #12]
 8011030:	061b      	lsls	r3, r3, #24
 8011032:	b09d      	sub	sp, #116	; 0x74
 8011034:	4607      	mov	r7, r0
 8011036:	460d      	mov	r5, r1
 8011038:	4614      	mov	r4, r2
 801103a:	d50e      	bpl.n	801105a <_svfiprintf_r+0x32>
 801103c:	690b      	ldr	r3, [r1, #16]
 801103e:	b963      	cbnz	r3, 801105a <_svfiprintf_r+0x32>
 8011040:	2140      	movs	r1, #64	; 0x40
 8011042:	f7ff ff3b 	bl	8010ebc <_malloc_r>
 8011046:	6028      	str	r0, [r5, #0]
 8011048:	6128      	str	r0, [r5, #16]
 801104a:	b920      	cbnz	r0, 8011056 <_svfiprintf_r+0x2e>
 801104c:	230c      	movs	r3, #12
 801104e:	603b      	str	r3, [r7, #0]
 8011050:	f04f 30ff 	mov.w	r0, #4294967295
 8011054:	e0d1      	b.n	80111fa <_svfiprintf_r+0x1d2>
 8011056:	2340      	movs	r3, #64	; 0x40
 8011058:	616b      	str	r3, [r5, #20]
 801105a:	2300      	movs	r3, #0
 801105c:	9309      	str	r3, [sp, #36]	; 0x24
 801105e:	2320      	movs	r3, #32
 8011060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011064:	f8cd 800c 	str.w	r8, [sp, #12]
 8011068:	2330      	movs	r3, #48	; 0x30
 801106a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011214 <_svfiprintf_r+0x1ec>
 801106e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011072:	f04f 0901 	mov.w	r9, #1
 8011076:	4623      	mov	r3, r4
 8011078:	469a      	mov	sl, r3
 801107a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801107e:	b10a      	cbz	r2, 8011084 <_svfiprintf_r+0x5c>
 8011080:	2a25      	cmp	r2, #37	; 0x25
 8011082:	d1f9      	bne.n	8011078 <_svfiprintf_r+0x50>
 8011084:	ebba 0b04 	subs.w	fp, sl, r4
 8011088:	d00b      	beq.n	80110a2 <_svfiprintf_r+0x7a>
 801108a:	465b      	mov	r3, fp
 801108c:	4622      	mov	r2, r4
 801108e:	4629      	mov	r1, r5
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff ff6d 	bl	8010f70 <__ssputs_r>
 8011096:	3001      	adds	r0, #1
 8011098:	f000 80aa 	beq.w	80111f0 <_svfiprintf_r+0x1c8>
 801109c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801109e:	445a      	add	r2, fp
 80110a0:	9209      	str	r2, [sp, #36]	; 0x24
 80110a2:	f89a 3000 	ldrb.w	r3, [sl]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f000 80a2 	beq.w	80111f0 <_svfiprintf_r+0x1c8>
 80110ac:	2300      	movs	r3, #0
 80110ae:	f04f 32ff 	mov.w	r2, #4294967295
 80110b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110b6:	f10a 0a01 	add.w	sl, sl, #1
 80110ba:	9304      	str	r3, [sp, #16]
 80110bc:	9307      	str	r3, [sp, #28]
 80110be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110c2:	931a      	str	r3, [sp, #104]	; 0x68
 80110c4:	4654      	mov	r4, sl
 80110c6:	2205      	movs	r2, #5
 80110c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110cc:	4851      	ldr	r0, [pc, #324]	; (8011214 <_svfiprintf_r+0x1ec>)
 80110ce:	f7ef f897 	bl	8000200 <memchr>
 80110d2:	9a04      	ldr	r2, [sp, #16]
 80110d4:	b9d8      	cbnz	r0, 801110e <_svfiprintf_r+0xe6>
 80110d6:	06d0      	lsls	r0, r2, #27
 80110d8:	bf44      	itt	mi
 80110da:	2320      	movmi	r3, #32
 80110dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e0:	0711      	lsls	r1, r2, #28
 80110e2:	bf44      	itt	mi
 80110e4:	232b      	movmi	r3, #43	; 0x2b
 80110e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ea:	f89a 3000 	ldrb.w	r3, [sl]
 80110ee:	2b2a      	cmp	r3, #42	; 0x2a
 80110f0:	d015      	beq.n	801111e <_svfiprintf_r+0xf6>
 80110f2:	9a07      	ldr	r2, [sp, #28]
 80110f4:	4654      	mov	r4, sl
 80110f6:	2000      	movs	r0, #0
 80110f8:	f04f 0c0a 	mov.w	ip, #10
 80110fc:	4621      	mov	r1, r4
 80110fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011102:	3b30      	subs	r3, #48	; 0x30
 8011104:	2b09      	cmp	r3, #9
 8011106:	d94e      	bls.n	80111a6 <_svfiprintf_r+0x17e>
 8011108:	b1b0      	cbz	r0, 8011138 <_svfiprintf_r+0x110>
 801110a:	9207      	str	r2, [sp, #28]
 801110c:	e014      	b.n	8011138 <_svfiprintf_r+0x110>
 801110e:	eba0 0308 	sub.w	r3, r0, r8
 8011112:	fa09 f303 	lsl.w	r3, r9, r3
 8011116:	4313      	orrs	r3, r2
 8011118:	9304      	str	r3, [sp, #16]
 801111a:	46a2      	mov	sl, r4
 801111c:	e7d2      	b.n	80110c4 <_svfiprintf_r+0x9c>
 801111e:	9b03      	ldr	r3, [sp, #12]
 8011120:	1d19      	adds	r1, r3, #4
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	9103      	str	r1, [sp, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	bfbb      	ittet	lt
 801112a:	425b      	neglt	r3, r3
 801112c:	f042 0202 	orrlt.w	r2, r2, #2
 8011130:	9307      	strge	r3, [sp, #28]
 8011132:	9307      	strlt	r3, [sp, #28]
 8011134:	bfb8      	it	lt
 8011136:	9204      	strlt	r2, [sp, #16]
 8011138:	7823      	ldrb	r3, [r4, #0]
 801113a:	2b2e      	cmp	r3, #46	; 0x2e
 801113c:	d10c      	bne.n	8011158 <_svfiprintf_r+0x130>
 801113e:	7863      	ldrb	r3, [r4, #1]
 8011140:	2b2a      	cmp	r3, #42	; 0x2a
 8011142:	d135      	bne.n	80111b0 <_svfiprintf_r+0x188>
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	1d1a      	adds	r2, r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	9203      	str	r2, [sp, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	bfb8      	it	lt
 8011150:	f04f 33ff 	movlt.w	r3, #4294967295
 8011154:	3402      	adds	r4, #2
 8011156:	9305      	str	r3, [sp, #20]
 8011158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011224 <_svfiprintf_r+0x1fc>
 801115c:	7821      	ldrb	r1, [r4, #0]
 801115e:	2203      	movs	r2, #3
 8011160:	4650      	mov	r0, sl
 8011162:	f7ef f84d 	bl	8000200 <memchr>
 8011166:	b140      	cbz	r0, 801117a <_svfiprintf_r+0x152>
 8011168:	2340      	movs	r3, #64	; 0x40
 801116a:	eba0 000a 	sub.w	r0, r0, sl
 801116e:	fa03 f000 	lsl.w	r0, r3, r0
 8011172:	9b04      	ldr	r3, [sp, #16]
 8011174:	4303      	orrs	r3, r0
 8011176:	3401      	adds	r4, #1
 8011178:	9304      	str	r3, [sp, #16]
 801117a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117e:	4826      	ldr	r0, [pc, #152]	; (8011218 <_svfiprintf_r+0x1f0>)
 8011180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011184:	2206      	movs	r2, #6
 8011186:	f7ef f83b 	bl	8000200 <memchr>
 801118a:	2800      	cmp	r0, #0
 801118c:	d038      	beq.n	8011200 <_svfiprintf_r+0x1d8>
 801118e:	4b23      	ldr	r3, [pc, #140]	; (801121c <_svfiprintf_r+0x1f4>)
 8011190:	bb1b      	cbnz	r3, 80111da <_svfiprintf_r+0x1b2>
 8011192:	9b03      	ldr	r3, [sp, #12]
 8011194:	3307      	adds	r3, #7
 8011196:	f023 0307 	bic.w	r3, r3, #7
 801119a:	3308      	adds	r3, #8
 801119c:	9303      	str	r3, [sp, #12]
 801119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a0:	4433      	add	r3, r6
 80111a2:	9309      	str	r3, [sp, #36]	; 0x24
 80111a4:	e767      	b.n	8011076 <_svfiprintf_r+0x4e>
 80111a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80111aa:	460c      	mov	r4, r1
 80111ac:	2001      	movs	r0, #1
 80111ae:	e7a5      	b.n	80110fc <_svfiprintf_r+0xd4>
 80111b0:	2300      	movs	r3, #0
 80111b2:	3401      	adds	r4, #1
 80111b4:	9305      	str	r3, [sp, #20]
 80111b6:	4619      	mov	r1, r3
 80111b8:	f04f 0c0a 	mov.w	ip, #10
 80111bc:	4620      	mov	r0, r4
 80111be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111c2:	3a30      	subs	r2, #48	; 0x30
 80111c4:	2a09      	cmp	r2, #9
 80111c6:	d903      	bls.n	80111d0 <_svfiprintf_r+0x1a8>
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d0c5      	beq.n	8011158 <_svfiprintf_r+0x130>
 80111cc:	9105      	str	r1, [sp, #20]
 80111ce:	e7c3      	b.n	8011158 <_svfiprintf_r+0x130>
 80111d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111d4:	4604      	mov	r4, r0
 80111d6:	2301      	movs	r3, #1
 80111d8:	e7f0      	b.n	80111bc <_svfiprintf_r+0x194>
 80111da:	ab03      	add	r3, sp, #12
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	462a      	mov	r2, r5
 80111e0:	4b0f      	ldr	r3, [pc, #60]	; (8011220 <_svfiprintf_r+0x1f8>)
 80111e2:	a904      	add	r1, sp, #16
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7fd fff5 	bl	800f1d4 <_printf_float>
 80111ea:	1c42      	adds	r2, r0, #1
 80111ec:	4606      	mov	r6, r0
 80111ee:	d1d6      	bne.n	801119e <_svfiprintf_r+0x176>
 80111f0:	89ab      	ldrh	r3, [r5, #12]
 80111f2:	065b      	lsls	r3, r3, #25
 80111f4:	f53f af2c 	bmi.w	8011050 <_svfiprintf_r+0x28>
 80111f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111fa:	b01d      	add	sp, #116	; 0x74
 80111fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011200:	ab03      	add	r3, sp, #12
 8011202:	9300      	str	r3, [sp, #0]
 8011204:	462a      	mov	r2, r5
 8011206:	4b06      	ldr	r3, [pc, #24]	; (8011220 <_svfiprintf_r+0x1f8>)
 8011208:	a904      	add	r1, sp, #16
 801120a:	4638      	mov	r0, r7
 801120c:	f7fe fa86 	bl	800f71c <_printf_i>
 8011210:	e7eb      	b.n	80111ea <_svfiprintf_r+0x1c2>
 8011212:	bf00      	nop
 8011214:	08013734 	.word	0x08013734
 8011218:	0801373e 	.word	0x0801373e
 801121c:	0800f1d5 	.word	0x0800f1d5
 8011220:	08010f71 	.word	0x08010f71
 8011224:	0801373a 	.word	0x0801373a

08011228 <_sbrk_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d06      	ldr	r5, [pc, #24]	; (8011244 <_sbrk_r+0x1c>)
 801122c:	2300      	movs	r3, #0
 801122e:	4604      	mov	r4, r0
 8011230:	4608      	mov	r0, r1
 8011232:	602b      	str	r3, [r5, #0]
 8011234:	f7f4 fcde 	bl	8005bf4 <_sbrk>
 8011238:	1c43      	adds	r3, r0, #1
 801123a:	d102      	bne.n	8011242 <_sbrk_r+0x1a>
 801123c:	682b      	ldr	r3, [r5, #0]
 801123e:	b103      	cbz	r3, 8011242 <_sbrk_r+0x1a>
 8011240:	6023      	str	r3, [r4, #0]
 8011242:	bd38      	pop	{r3, r4, r5, pc}
 8011244:	200067ac 	.word	0x200067ac

08011248 <__assert_func>:
 8011248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801124a:	4614      	mov	r4, r2
 801124c:	461a      	mov	r2, r3
 801124e:	4b09      	ldr	r3, [pc, #36]	; (8011274 <__assert_func+0x2c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4605      	mov	r5, r0
 8011254:	68d8      	ldr	r0, [r3, #12]
 8011256:	b14c      	cbz	r4, 801126c <__assert_func+0x24>
 8011258:	4b07      	ldr	r3, [pc, #28]	; (8011278 <__assert_func+0x30>)
 801125a:	9100      	str	r1, [sp, #0]
 801125c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011260:	4906      	ldr	r1, [pc, #24]	; (801127c <__assert_func+0x34>)
 8011262:	462b      	mov	r3, r5
 8011264:	f000 f80e 	bl	8011284 <fiprintf>
 8011268:	f000 faa4 	bl	80117b4 <abort>
 801126c:	4b04      	ldr	r3, [pc, #16]	; (8011280 <__assert_func+0x38>)
 801126e:	461c      	mov	r4, r3
 8011270:	e7f3      	b.n	801125a <__assert_func+0x12>
 8011272:	bf00      	nop
 8011274:	20000018 	.word	0x20000018
 8011278:	08013745 	.word	0x08013745
 801127c:	08013752 	.word	0x08013752
 8011280:	08013780 	.word	0x08013780

08011284 <fiprintf>:
 8011284:	b40e      	push	{r1, r2, r3}
 8011286:	b503      	push	{r0, r1, lr}
 8011288:	4601      	mov	r1, r0
 801128a:	ab03      	add	r3, sp, #12
 801128c:	4805      	ldr	r0, [pc, #20]	; (80112a4 <fiprintf+0x20>)
 801128e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011292:	6800      	ldr	r0, [r0, #0]
 8011294:	9301      	str	r3, [sp, #4]
 8011296:	f000 f88f 	bl	80113b8 <_vfiprintf_r>
 801129a:	b002      	add	sp, #8
 801129c:	f85d eb04 	ldr.w	lr, [sp], #4
 80112a0:	b003      	add	sp, #12
 80112a2:	4770      	bx	lr
 80112a4:	20000018 	.word	0x20000018

080112a8 <__ascii_mbtowc>:
 80112a8:	b082      	sub	sp, #8
 80112aa:	b901      	cbnz	r1, 80112ae <__ascii_mbtowc+0x6>
 80112ac:	a901      	add	r1, sp, #4
 80112ae:	b142      	cbz	r2, 80112c2 <__ascii_mbtowc+0x1a>
 80112b0:	b14b      	cbz	r3, 80112c6 <__ascii_mbtowc+0x1e>
 80112b2:	7813      	ldrb	r3, [r2, #0]
 80112b4:	600b      	str	r3, [r1, #0]
 80112b6:	7812      	ldrb	r2, [r2, #0]
 80112b8:	1e10      	subs	r0, r2, #0
 80112ba:	bf18      	it	ne
 80112bc:	2001      	movne	r0, #1
 80112be:	b002      	add	sp, #8
 80112c0:	4770      	bx	lr
 80112c2:	4610      	mov	r0, r2
 80112c4:	e7fb      	b.n	80112be <__ascii_mbtowc+0x16>
 80112c6:	f06f 0001 	mvn.w	r0, #1
 80112ca:	e7f8      	b.n	80112be <__ascii_mbtowc+0x16>

080112cc <memmove>:
 80112cc:	4288      	cmp	r0, r1
 80112ce:	b510      	push	{r4, lr}
 80112d0:	eb01 0402 	add.w	r4, r1, r2
 80112d4:	d902      	bls.n	80112dc <memmove+0x10>
 80112d6:	4284      	cmp	r4, r0
 80112d8:	4623      	mov	r3, r4
 80112da:	d807      	bhi.n	80112ec <memmove+0x20>
 80112dc:	1e43      	subs	r3, r0, #1
 80112de:	42a1      	cmp	r1, r4
 80112e0:	d008      	beq.n	80112f4 <memmove+0x28>
 80112e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112ea:	e7f8      	b.n	80112de <memmove+0x12>
 80112ec:	4402      	add	r2, r0
 80112ee:	4601      	mov	r1, r0
 80112f0:	428a      	cmp	r2, r1
 80112f2:	d100      	bne.n	80112f6 <memmove+0x2a>
 80112f4:	bd10      	pop	{r4, pc}
 80112f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112fe:	e7f7      	b.n	80112f0 <memmove+0x24>

08011300 <__malloc_lock>:
 8011300:	4801      	ldr	r0, [pc, #4]	; (8011308 <__malloc_lock+0x8>)
 8011302:	f000 bc17 	b.w	8011b34 <__retarget_lock_acquire_recursive>
 8011306:	bf00      	nop
 8011308:	200067b4 	.word	0x200067b4

0801130c <__malloc_unlock>:
 801130c:	4801      	ldr	r0, [pc, #4]	; (8011314 <__malloc_unlock+0x8>)
 801130e:	f000 bc12 	b.w	8011b36 <__retarget_lock_release_recursive>
 8011312:	bf00      	nop
 8011314:	200067b4 	.word	0x200067b4

08011318 <_realloc_r>:
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	4607      	mov	r7, r0
 801131c:	4614      	mov	r4, r2
 801131e:	460e      	mov	r6, r1
 8011320:	b921      	cbnz	r1, 801132c <_realloc_r+0x14>
 8011322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011326:	4611      	mov	r1, r2
 8011328:	f7ff bdc8 	b.w	8010ebc <_malloc_r>
 801132c:	b922      	cbnz	r2, 8011338 <_realloc_r+0x20>
 801132e:	f7ff fd75 	bl	8010e1c <_free_r>
 8011332:	4625      	mov	r5, r4
 8011334:	4628      	mov	r0, r5
 8011336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011338:	f000 fc62 	bl	8011c00 <_malloc_usable_size_r>
 801133c:	42a0      	cmp	r0, r4
 801133e:	d20f      	bcs.n	8011360 <_realloc_r+0x48>
 8011340:	4621      	mov	r1, r4
 8011342:	4638      	mov	r0, r7
 8011344:	f7ff fdba 	bl	8010ebc <_malloc_r>
 8011348:	4605      	mov	r5, r0
 801134a:	2800      	cmp	r0, #0
 801134c:	d0f2      	beq.n	8011334 <_realloc_r+0x1c>
 801134e:	4631      	mov	r1, r6
 8011350:	4622      	mov	r2, r4
 8011352:	f7fd fe89 	bl	800f068 <memcpy>
 8011356:	4631      	mov	r1, r6
 8011358:	4638      	mov	r0, r7
 801135a:	f7ff fd5f 	bl	8010e1c <_free_r>
 801135e:	e7e9      	b.n	8011334 <_realloc_r+0x1c>
 8011360:	4635      	mov	r5, r6
 8011362:	e7e7      	b.n	8011334 <_realloc_r+0x1c>

08011364 <__sfputc_r>:
 8011364:	6893      	ldr	r3, [r2, #8]
 8011366:	3b01      	subs	r3, #1
 8011368:	2b00      	cmp	r3, #0
 801136a:	b410      	push	{r4}
 801136c:	6093      	str	r3, [r2, #8]
 801136e:	da08      	bge.n	8011382 <__sfputc_r+0x1e>
 8011370:	6994      	ldr	r4, [r2, #24]
 8011372:	42a3      	cmp	r3, r4
 8011374:	db01      	blt.n	801137a <__sfputc_r+0x16>
 8011376:	290a      	cmp	r1, #10
 8011378:	d103      	bne.n	8011382 <__sfputc_r+0x1e>
 801137a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801137e:	f000 b94b 	b.w	8011618 <__swbuf_r>
 8011382:	6813      	ldr	r3, [r2, #0]
 8011384:	1c58      	adds	r0, r3, #1
 8011386:	6010      	str	r0, [r2, #0]
 8011388:	7019      	strb	r1, [r3, #0]
 801138a:	4608      	mov	r0, r1
 801138c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011390:	4770      	bx	lr

08011392 <__sfputs_r>:
 8011392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011394:	4606      	mov	r6, r0
 8011396:	460f      	mov	r7, r1
 8011398:	4614      	mov	r4, r2
 801139a:	18d5      	adds	r5, r2, r3
 801139c:	42ac      	cmp	r4, r5
 801139e:	d101      	bne.n	80113a4 <__sfputs_r+0x12>
 80113a0:	2000      	movs	r0, #0
 80113a2:	e007      	b.n	80113b4 <__sfputs_r+0x22>
 80113a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113a8:	463a      	mov	r2, r7
 80113aa:	4630      	mov	r0, r6
 80113ac:	f7ff ffda 	bl	8011364 <__sfputc_r>
 80113b0:	1c43      	adds	r3, r0, #1
 80113b2:	d1f3      	bne.n	801139c <__sfputs_r+0xa>
 80113b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080113b8 <_vfiprintf_r>:
 80113b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113bc:	460d      	mov	r5, r1
 80113be:	b09d      	sub	sp, #116	; 0x74
 80113c0:	4614      	mov	r4, r2
 80113c2:	4698      	mov	r8, r3
 80113c4:	4606      	mov	r6, r0
 80113c6:	b118      	cbz	r0, 80113d0 <_vfiprintf_r+0x18>
 80113c8:	6983      	ldr	r3, [r0, #24]
 80113ca:	b90b      	cbnz	r3, 80113d0 <_vfiprintf_r+0x18>
 80113cc:	f000 fb14 	bl	80119f8 <__sinit>
 80113d0:	4b89      	ldr	r3, [pc, #548]	; (80115f8 <_vfiprintf_r+0x240>)
 80113d2:	429d      	cmp	r5, r3
 80113d4:	d11b      	bne.n	801140e <_vfiprintf_r+0x56>
 80113d6:	6875      	ldr	r5, [r6, #4]
 80113d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113da:	07d9      	lsls	r1, r3, #31
 80113dc:	d405      	bmi.n	80113ea <_vfiprintf_r+0x32>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	059a      	lsls	r2, r3, #22
 80113e2:	d402      	bmi.n	80113ea <_vfiprintf_r+0x32>
 80113e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113e6:	f000 fba5 	bl	8011b34 <__retarget_lock_acquire_recursive>
 80113ea:	89ab      	ldrh	r3, [r5, #12]
 80113ec:	071b      	lsls	r3, r3, #28
 80113ee:	d501      	bpl.n	80113f4 <_vfiprintf_r+0x3c>
 80113f0:	692b      	ldr	r3, [r5, #16]
 80113f2:	b9eb      	cbnz	r3, 8011430 <_vfiprintf_r+0x78>
 80113f4:	4629      	mov	r1, r5
 80113f6:	4630      	mov	r0, r6
 80113f8:	f000 f96e 	bl	80116d8 <__swsetup_r>
 80113fc:	b1c0      	cbz	r0, 8011430 <_vfiprintf_r+0x78>
 80113fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011400:	07dc      	lsls	r4, r3, #31
 8011402:	d50e      	bpl.n	8011422 <_vfiprintf_r+0x6a>
 8011404:	f04f 30ff 	mov.w	r0, #4294967295
 8011408:	b01d      	add	sp, #116	; 0x74
 801140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140e:	4b7b      	ldr	r3, [pc, #492]	; (80115fc <_vfiprintf_r+0x244>)
 8011410:	429d      	cmp	r5, r3
 8011412:	d101      	bne.n	8011418 <_vfiprintf_r+0x60>
 8011414:	68b5      	ldr	r5, [r6, #8]
 8011416:	e7df      	b.n	80113d8 <_vfiprintf_r+0x20>
 8011418:	4b79      	ldr	r3, [pc, #484]	; (8011600 <_vfiprintf_r+0x248>)
 801141a:	429d      	cmp	r5, r3
 801141c:	bf08      	it	eq
 801141e:	68f5      	ldreq	r5, [r6, #12]
 8011420:	e7da      	b.n	80113d8 <_vfiprintf_r+0x20>
 8011422:	89ab      	ldrh	r3, [r5, #12]
 8011424:	0598      	lsls	r0, r3, #22
 8011426:	d4ed      	bmi.n	8011404 <_vfiprintf_r+0x4c>
 8011428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801142a:	f000 fb84 	bl	8011b36 <__retarget_lock_release_recursive>
 801142e:	e7e9      	b.n	8011404 <_vfiprintf_r+0x4c>
 8011430:	2300      	movs	r3, #0
 8011432:	9309      	str	r3, [sp, #36]	; 0x24
 8011434:	2320      	movs	r3, #32
 8011436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801143a:	f8cd 800c 	str.w	r8, [sp, #12]
 801143e:	2330      	movs	r3, #48	; 0x30
 8011440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011604 <_vfiprintf_r+0x24c>
 8011444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011448:	f04f 0901 	mov.w	r9, #1
 801144c:	4623      	mov	r3, r4
 801144e:	469a      	mov	sl, r3
 8011450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011454:	b10a      	cbz	r2, 801145a <_vfiprintf_r+0xa2>
 8011456:	2a25      	cmp	r2, #37	; 0x25
 8011458:	d1f9      	bne.n	801144e <_vfiprintf_r+0x96>
 801145a:	ebba 0b04 	subs.w	fp, sl, r4
 801145e:	d00b      	beq.n	8011478 <_vfiprintf_r+0xc0>
 8011460:	465b      	mov	r3, fp
 8011462:	4622      	mov	r2, r4
 8011464:	4629      	mov	r1, r5
 8011466:	4630      	mov	r0, r6
 8011468:	f7ff ff93 	bl	8011392 <__sfputs_r>
 801146c:	3001      	adds	r0, #1
 801146e:	f000 80aa 	beq.w	80115c6 <_vfiprintf_r+0x20e>
 8011472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011474:	445a      	add	r2, fp
 8011476:	9209      	str	r2, [sp, #36]	; 0x24
 8011478:	f89a 3000 	ldrb.w	r3, [sl]
 801147c:	2b00      	cmp	r3, #0
 801147e:	f000 80a2 	beq.w	80115c6 <_vfiprintf_r+0x20e>
 8011482:	2300      	movs	r3, #0
 8011484:	f04f 32ff 	mov.w	r2, #4294967295
 8011488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801148c:	f10a 0a01 	add.w	sl, sl, #1
 8011490:	9304      	str	r3, [sp, #16]
 8011492:	9307      	str	r3, [sp, #28]
 8011494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011498:	931a      	str	r3, [sp, #104]	; 0x68
 801149a:	4654      	mov	r4, sl
 801149c:	2205      	movs	r2, #5
 801149e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114a2:	4858      	ldr	r0, [pc, #352]	; (8011604 <_vfiprintf_r+0x24c>)
 80114a4:	f7ee feac 	bl	8000200 <memchr>
 80114a8:	9a04      	ldr	r2, [sp, #16]
 80114aa:	b9d8      	cbnz	r0, 80114e4 <_vfiprintf_r+0x12c>
 80114ac:	06d1      	lsls	r1, r2, #27
 80114ae:	bf44      	itt	mi
 80114b0:	2320      	movmi	r3, #32
 80114b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114b6:	0713      	lsls	r3, r2, #28
 80114b8:	bf44      	itt	mi
 80114ba:	232b      	movmi	r3, #43	; 0x2b
 80114bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114c0:	f89a 3000 	ldrb.w	r3, [sl]
 80114c4:	2b2a      	cmp	r3, #42	; 0x2a
 80114c6:	d015      	beq.n	80114f4 <_vfiprintf_r+0x13c>
 80114c8:	9a07      	ldr	r2, [sp, #28]
 80114ca:	4654      	mov	r4, sl
 80114cc:	2000      	movs	r0, #0
 80114ce:	f04f 0c0a 	mov.w	ip, #10
 80114d2:	4621      	mov	r1, r4
 80114d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114d8:	3b30      	subs	r3, #48	; 0x30
 80114da:	2b09      	cmp	r3, #9
 80114dc:	d94e      	bls.n	801157c <_vfiprintf_r+0x1c4>
 80114de:	b1b0      	cbz	r0, 801150e <_vfiprintf_r+0x156>
 80114e0:	9207      	str	r2, [sp, #28]
 80114e2:	e014      	b.n	801150e <_vfiprintf_r+0x156>
 80114e4:	eba0 0308 	sub.w	r3, r0, r8
 80114e8:	fa09 f303 	lsl.w	r3, r9, r3
 80114ec:	4313      	orrs	r3, r2
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	46a2      	mov	sl, r4
 80114f2:	e7d2      	b.n	801149a <_vfiprintf_r+0xe2>
 80114f4:	9b03      	ldr	r3, [sp, #12]
 80114f6:	1d19      	adds	r1, r3, #4
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	9103      	str	r1, [sp, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	bfbb      	ittet	lt
 8011500:	425b      	neglt	r3, r3
 8011502:	f042 0202 	orrlt.w	r2, r2, #2
 8011506:	9307      	strge	r3, [sp, #28]
 8011508:	9307      	strlt	r3, [sp, #28]
 801150a:	bfb8      	it	lt
 801150c:	9204      	strlt	r2, [sp, #16]
 801150e:	7823      	ldrb	r3, [r4, #0]
 8011510:	2b2e      	cmp	r3, #46	; 0x2e
 8011512:	d10c      	bne.n	801152e <_vfiprintf_r+0x176>
 8011514:	7863      	ldrb	r3, [r4, #1]
 8011516:	2b2a      	cmp	r3, #42	; 0x2a
 8011518:	d135      	bne.n	8011586 <_vfiprintf_r+0x1ce>
 801151a:	9b03      	ldr	r3, [sp, #12]
 801151c:	1d1a      	adds	r2, r3, #4
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	9203      	str	r2, [sp, #12]
 8011522:	2b00      	cmp	r3, #0
 8011524:	bfb8      	it	lt
 8011526:	f04f 33ff 	movlt.w	r3, #4294967295
 801152a:	3402      	adds	r4, #2
 801152c:	9305      	str	r3, [sp, #20]
 801152e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011614 <_vfiprintf_r+0x25c>
 8011532:	7821      	ldrb	r1, [r4, #0]
 8011534:	2203      	movs	r2, #3
 8011536:	4650      	mov	r0, sl
 8011538:	f7ee fe62 	bl	8000200 <memchr>
 801153c:	b140      	cbz	r0, 8011550 <_vfiprintf_r+0x198>
 801153e:	2340      	movs	r3, #64	; 0x40
 8011540:	eba0 000a 	sub.w	r0, r0, sl
 8011544:	fa03 f000 	lsl.w	r0, r3, r0
 8011548:	9b04      	ldr	r3, [sp, #16]
 801154a:	4303      	orrs	r3, r0
 801154c:	3401      	adds	r4, #1
 801154e:	9304      	str	r3, [sp, #16]
 8011550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011554:	482c      	ldr	r0, [pc, #176]	; (8011608 <_vfiprintf_r+0x250>)
 8011556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801155a:	2206      	movs	r2, #6
 801155c:	f7ee fe50 	bl	8000200 <memchr>
 8011560:	2800      	cmp	r0, #0
 8011562:	d03f      	beq.n	80115e4 <_vfiprintf_r+0x22c>
 8011564:	4b29      	ldr	r3, [pc, #164]	; (801160c <_vfiprintf_r+0x254>)
 8011566:	bb1b      	cbnz	r3, 80115b0 <_vfiprintf_r+0x1f8>
 8011568:	9b03      	ldr	r3, [sp, #12]
 801156a:	3307      	adds	r3, #7
 801156c:	f023 0307 	bic.w	r3, r3, #7
 8011570:	3308      	adds	r3, #8
 8011572:	9303      	str	r3, [sp, #12]
 8011574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011576:	443b      	add	r3, r7
 8011578:	9309      	str	r3, [sp, #36]	; 0x24
 801157a:	e767      	b.n	801144c <_vfiprintf_r+0x94>
 801157c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011580:	460c      	mov	r4, r1
 8011582:	2001      	movs	r0, #1
 8011584:	e7a5      	b.n	80114d2 <_vfiprintf_r+0x11a>
 8011586:	2300      	movs	r3, #0
 8011588:	3401      	adds	r4, #1
 801158a:	9305      	str	r3, [sp, #20]
 801158c:	4619      	mov	r1, r3
 801158e:	f04f 0c0a 	mov.w	ip, #10
 8011592:	4620      	mov	r0, r4
 8011594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011598:	3a30      	subs	r2, #48	; 0x30
 801159a:	2a09      	cmp	r2, #9
 801159c:	d903      	bls.n	80115a6 <_vfiprintf_r+0x1ee>
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d0c5      	beq.n	801152e <_vfiprintf_r+0x176>
 80115a2:	9105      	str	r1, [sp, #20]
 80115a4:	e7c3      	b.n	801152e <_vfiprintf_r+0x176>
 80115a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80115aa:	4604      	mov	r4, r0
 80115ac:	2301      	movs	r3, #1
 80115ae:	e7f0      	b.n	8011592 <_vfiprintf_r+0x1da>
 80115b0:	ab03      	add	r3, sp, #12
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	462a      	mov	r2, r5
 80115b6:	4b16      	ldr	r3, [pc, #88]	; (8011610 <_vfiprintf_r+0x258>)
 80115b8:	a904      	add	r1, sp, #16
 80115ba:	4630      	mov	r0, r6
 80115bc:	f7fd fe0a 	bl	800f1d4 <_printf_float>
 80115c0:	4607      	mov	r7, r0
 80115c2:	1c78      	adds	r0, r7, #1
 80115c4:	d1d6      	bne.n	8011574 <_vfiprintf_r+0x1bc>
 80115c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115c8:	07d9      	lsls	r1, r3, #31
 80115ca:	d405      	bmi.n	80115d8 <_vfiprintf_r+0x220>
 80115cc:	89ab      	ldrh	r3, [r5, #12]
 80115ce:	059a      	lsls	r2, r3, #22
 80115d0:	d402      	bmi.n	80115d8 <_vfiprintf_r+0x220>
 80115d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115d4:	f000 faaf 	bl	8011b36 <__retarget_lock_release_recursive>
 80115d8:	89ab      	ldrh	r3, [r5, #12]
 80115da:	065b      	lsls	r3, r3, #25
 80115dc:	f53f af12 	bmi.w	8011404 <_vfiprintf_r+0x4c>
 80115e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115e2:	e711      	b.n	8011408 <_vfiprintf_r+0x50>
 80115e4:	ab03      	add	r3, sp, #12
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	462a      	mov	r2, r5
 80115ea:	4b09      	ldr	r3, [pc, #36]	; (8011610 <_vfiprintf_r+0x258>)
 80115ec:	a904      	add	r1, sp, #16
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7fe f894 	bl	800f71c <_printf_i>
 80115f4:	e7e4      	b.n	80115c0 <_vfiprintf_r+0x208>
 80115f6:	bf00      	nop
 80115f8:	080138ac 	.word	0x080138ac
 80115fc:	080138cc 	.word	0x080138cc
 8011600:	0801388c 	.word	0x0801388c
 8011604:	08013734 	.word	0x08013734
 8011608:	0801373e 	.word	0x0801373e
 801160c:	0800f1d5 	.word	0x0800f1d5
 8011610:	08011393 	.word	0x08011393
 8011614:	0801373a 	.word	0x0801373a

08011618 <__swbuf_r>:
 8011618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161a:	460e      	mov	r6, r1
 801161c:	4614      	mov	r4, r2
 801161e:	4605      	mov	r5, r0
 8011620:	b118      	cbz	r0, 801162a <__swbuf_r+0x12>
 8011622:	6983      	ldr	r3, [r0, #24]
 8011624:	b90b      	cbnz	r3, 801162a <__swbuf_r+0x12>
 8011626:	f000 f9e7 	bl	80119f8 <__sinit>
 801162a:	4b21      	ldr	r3, [pc, #132]	; (80116b0 <__swbuf_r+0x98>)
 801162c:	429c      	cmp	r4, r3
 801162e:	d12b      	bne.n	8011688 <__swbuf_r+0x70>
 8011630:	686c      	ldr	r4, [r5, #4]
 8011632:	69a3      	ldr	r3, [r4, #24]
 8011634:	60a3      	str	r3, [r4, #8]
 8011636:	89a3      	ldrh	r3, [r4, #12]
 8011638:	071a      	lsls	r2, r3, #28
 801163a:	d52f      	bpl.n	801169c <__swbuf_r+0x84>
 801163c:	6923      	ldr	r3, [r4, #16]
 801163e:	b36b      	cbz	r3, 801169c <__swbuf_r+0x84>
 8011640:	6923      	ldr	r3, [r4, #16]
 8011642:	6820      	ldr	r0, [r4, #0]
 8011644:	1ac0      	subs	r0, r0, r3
 8011646:	6963      	ldr	r3, [r4, #20]
 8011648:	b2f6      	uxtb	r6, r6
 801164a:	4283      	cmp	r3, r0
 801164c:	4637      	mov	r7, r6
 801164e:	dc04      	bgt.n	801165a <__swbuf_r+0x42>
 8011650:	4621      	mov	r1, r4
 8011652:	4628      	mov	r0, r5
 8011654:	f000 f93c 	bl	80118d0 <_fflush_r>
 8011658:	bb30      	cbnz	r0, 80116a8 <__swbuf_r+0x90>
 801165a:	68a3      	ldr	r3, [r4, #8]
 801165c:	3b01      	subs	r3, #1
 801165e:	60a3      	str	r3, [r4, #8]
 8011660:	6823      	ldr	r3, [r4, #0]
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	6022      	str	r2, [r4, #0]
 8011666:	701e      	strb	r6, [r3, #0]
 8011668:	6963      	ldr	r3, [r4, #20]
 801166a:	3001      	adds	r0, #1
 801166c:	4283      	cmp	r3, r0
 801166e:	d004      	beq.n	801167a <__swbuf_r+0x62>
 8011670:	89a3      	ldrh	r3, [r4, #12]
 8011672:	07db      	lsls	r3, r3, #31
 8011674:	d506      	bpl.n	8011684 <__swbuf_r+0x6c>
 8011676:	2e0a      	cmp	r6, #10
 8011678:	d104      	bne.n	8011684 <__swbuf_r+0x6c>
 801167a:	4621      	mov	r1, r4
 801167c:	4628      	mov	r0, r5
 801167e:	f000 f927 	bl	80118d0 <_fflush_r>
 8011682:	b988      	cbnz	r0, 80116a8 <__swbuf_r+0x90>
 8011684:	4638      	mov	r0, r7
 8011686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011688:	4b0a      	ldr	r3, [pc, #40]	; (80116b4 <__swbuf_r+0x9c>)
 801168a:	429c      	cmp	r4, r3
 801168c:	d101      	bne.n	8011692 <__swbuf_r+0x7a>
 801168e:	68ac      	ldr	r4, [r5, #8]
 8011690:	e7cf      	b.n	8011632 <__swbuf_r+0x1a>
 8011692:	4b09      	ldr	r3, [pc, #36]	; (80116b8 <__swbuf_r+0xa0>)
 8011694:	429c      	cmp	r4, r3
 8011696:	bf08      	it	eq
 8011698:	68ec      	ldreq	r4, [r5, #12]
 801169a:	e7ca      	b.n	8011632 <__swbuf_r+0x1a>
 801169c:	4621      	mov	r1, r4
 801169e:	4628      	mov	r0, r5
 80116a0:	f000 f81a 	bl	80116d8 <__swsetup_r>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d0cb      	beq.n	8011640 <__swbuf_r+0x28>
 80116a8:	f04f 37ff 	mov.w	r7, #4294967295
 80116ac:	e7ea      	b.n	8011684 <__swbuf_r+0x6c>
 80116ae:	bf00      	nop
 80116b0:	080138ac 	.word	0x080138ac
 80116b4:	080138cc 	.word	0x080138cc
 80116b8:	0801388c 	.word	0x0801388c

080116bc <__ascii_wctomb>:
 80116bc:	b149      	cbz	r1, 80116d2 <__ascii_wctomb+0x16>
 80116be:	2aff      	cmp	r2, #255	; 0xff
 80116c0:	bf85      	ittet	hi
 80116c2:	238a      	movhi	r3, #138	; 0x8a
 80116c4:	6003      	strhi	r3, [r0, #0]
 80116c6:	700a      	strbls	r2, [r1, #0]
 80116c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80116cc:	bf98      	it	ls
 80116ce:	2001      	movls	r0, #1
 80116d0:	4770      	bx	lr
 80116d2:	4608      	mov	r0, r1
 80116d4:	4770      	bx	lr
	...

080116d8 <__swsetup_r>:
 80116d8:	4b32      	ldr	r3, [pc, #200]	; (80117a4 <__swsetup_r+0xcc>)
 80116da:	b570      	push	{r4, r5, r6, lr}
 80116dc:	681d      	ldr	r5, [r3, #0]
 80116de:	4606      	mov	r6, r0
 80116e0:	460c      	mov	r4, r1
 80116e2:	b125      	cbz	r5, 80116ee <__swsetup_r+0x16>
 80116e4:	69ab      	ldr	r3, [r5, #24]
 80116e6:	b913      	cbnz	r3, 80116ee <__swsetup_r+0x16>
 80116e8:	4628      	mov	r0, r5
 80116ea:	f000 f985 	bl	80119f8 <__sinit>
 80116ee:	4b2e      	ldr	r3, [pc, #184]	; (80117a8 <__swsetup_r+0xd0>)
 80116f0:	429c      	cmp	r4, r3
 80116f2:	d10f      	bne.n	8011714 <__swsetup_r+0x3c>
 80116f4:	686c      	ldr	r4, [r5, #4]
 80116f6:	89a3      	ldrh	r3, [r4, #12]
 80116f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116fc:	0719      	lsls	r1, r3, #28
 80116fe:	d42c      	bmi.n	801175a <__swsetup_r+0x82>
 8011700:	06dd      	lsls	r5, r3, #27
 8011702:	d411      	bmi.n	8011728 <__swsetup_r+0x50>
 8011704:	2309      	movs	r3, #9
 8011706:	6033      	str	r3, [r6, #0]
 8011708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801170c:	81a3      	strh	r3, [r4, #12]
 801170e:	f04f 30ff 	mov.w	r0, #4294967295
 8011712:	e03e      	b.n	8011792 <__swsetup_r+0xba>
 8011714:	4b25      	ldr	r3, [pc, #148]	; (80117ac <__swsetup_r+0xd4>)
 8011716:	429c      	cmp	r4, r3
 8011718:	d101      	bne.n	801171e <__swsetup_r+0x46>
 801171a:	68ac      	ldr	r4, [r5, #8]
 801171c:	e7eb      	b.n	80116f6 <__swsetup_r+0x1e>
 801171e:	4b24      	ldr	r3, [pc, #144]	; (80117b0 <__swsetup_r+0xd8>)
 8011720:	429c      	cmp	r4, r3
 8011722:	bf08      	it	eq
 8011724:	68ec      	ldreq	r4, [r5, #12]
 8011726:	e7e6      	b.n	80116f6 <__swsetup_r+0x1e>
 8011728:	0758      	lsls	r0, r3, #29
 801172a:	d512      	bpl.n	8011752 <__swsetup_r+0x7a>
 801172c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801172e:	b141      	cbz	r1, 8011742 <__swsetup_r+0x6a>
 8011730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011734:	4299      	cmp	r1, r3
 8011736:	d002      	beq.n	801173e <__swsetup_r+0x66>
 8011738:	4630      	mov	r0, r6
 801173a:	f7ff fb6f 	bl	8010e1c <_free_r>
 801173e:	2300      	movs	r3, #0
 8011740:	6363      	str	r3, [r4, #52]	; 0x34
 8011742:	89a3      	ldrh	r3, [r4, #12]
 8011744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011748:	81a3      	strh	r3, [r4, #12]
 801174a:	2300      	movs	r3, #0
 801174c:	6063      	str	r3, [r4, #4]
 801174e:	6923      	ldr	r3, [r4, #16]
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	89a3      	ldrh	r3, [r4, #12]
 8011754:	f043 0308 	orr.w	r3, r3, #8
 8011758:	81a3      	strh	r3, [r4, #12]
 801175a:	6923      	ldr	r3, [r4, #16]
 801175c:	b94b      	cbnz	r3, 8011772 <__swsetup_r+0x9a>
 801175e:	89a3      	ldrh	r3, [r4, #12]
 8011760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011768:	d003      	beq.n	8011772 <__swsetup_r+0x9a>
 801176a:	4621      	mov	r1, r4
 801176c:	4630      	mov	r0, r6
 801176e:	f000 fa07 	bl	8011b80 <__smakebuf_r>
 8011772:	89a0      	ldrh	r0, [r4, #12]
 8011774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011778:	f010 0301 	ands.w	r3, r0, #1
 801177c:	d00a      	beq.n	8011794 <__swsetup_r+0xbc>
 801177e:	2300      	movs	r3, #0
 8011780:	60a3      	str	r3, [r4, #8]
 8011782:	6963      	ldr	r3, [r4, #20]
 8011784:	425b      	negs	r3, r3
 8011786:	61a3      	str	r3, [r4, #24]
 8011788:	6923      	ldr	r3, [r4, #16]
 801178a:	b943      	cbnz	r3, 801179e <__swsetup_r+0xc6>
 801178c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011790:	d1ba      	bne.n	8011708 <__swsetup_r+0x30>
 8011792:	bd70      	pop	{r4, r5, r6, pc}
 8011794:	0781      	lsls	r1, r0, #30
 8011796:	bf58      	it	pl
 8011798:	6963      	ldrpl	r3, [r4, #20]
 801179a:	60a3      	str	r3, [r4, #8]
 801179c:	e7f4      	b.n	8011788 <__swsetup_r+0xb0>
 801179e:	2000      	movs	r0, #0
 80117a0:	e7f7      	b.n	8011792 <__swsetup_r+0xba>
 80117a2:	bf00      	nop
 80117a4:	20000018 	.word	0x20000018
 80117a8:	080138ac 	.word	0x080138ac
 80117ac:	080138cc 	.word	0x080138cc
 80117b0:	0801388c 	.word	0x0801388c

080117b4 <abort>:
 80117b4:	b508      	push	{r3, lr}
 80117b6:	2006      	movs	r0, #6
 80117b8:	f000 fa52 	bl	8011c60 <raise>
 80117bc:	2001      	movs	r0, #1
 80117be:	f7f4 f9a1 	bl	8005b04 <_exit>
	...

080117c4 <__sflush_r>:
 80117c4:	898a      	ldrh	r2, [r1, #12]
 80117c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ca:	4605      	mov	r5, r0
 80117cc:	0710      	lsls	r0, r2, #28
 80117ce:	460c      	mov	r4, r1
 80117d0:	d458      	bmi.n	8011884 <__sflush_r+0xc0>
 80117d2:	684b      	ldr	r3, [r1, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dc05      	bgt.n	80117e4 <__sflush_r+0x20>
 80117d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117da:	2b00      	cmp	r3, #0
 80117dc:	dc02      	bgt.n	80117e4 <__sflush_r+0x20>
 80117de:	2000      	movs	r0, #0
 80117e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117e6:	2e00      	cmp	r6, #0
 80117e8:	d0f9      	beq.n	80117de <__sflush_r+0x1a>
 80117ea:	2300      	movs	r3, #0
 80117ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117f0:	682f      	ldr	r7, [r5, #0]
 80117f2:	602b      	str	r3, [r5, #0]
 80117f4:	d032      	beq.n	801185c <__sflush_r+0x98>
 80117f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117f8:	89a3      	ldrh	r3, [r4, #12]
 80117fa:	075a      	lsls	r2, r3, #29
 80117fc:	d505      	bpl.n	801180a <__sflush_r+0x46>
 80117fe:	6863      	ldr	r3, [r4, #4]
 8011800:	1ac0      	subs	r0, r0, r3
 8011802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011804:	b10b      	cbz	r3, 801180a <__sflush_r+0x46>
 8011806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011808:	1ac0      	subs	r0, r0, r3
 801180a:	2300      	movs	r3, #0
 801180c:	4602      	mov	r2, r0
 801180e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011810:	6a21      	ldr	r1, [r4, #32]
 8011812:	4628      	mov	r0, r5
 8011814:	47b0      	blx	r6
 8011816:	1c43      	adds	r3, r0, #1
 8011818:	89a3      	ldrh	r3, [r4, #12]
 801181a:	d106      	bne.n	801182a <__sflush_r+0x66>
 801181c:	6829      	ldr	r1, [r5, #0]
 801181e:	291d      	cmp	r1, #29
 8011820:	d82c      	bhi.n	801187c <__sflush_r+0xb8>
 8011822:	4a2a      	ldr	r2, [pc, #168]	; (80118cc <__sflush_r+0x108>)
 8011824:	40ca      	lsrs	r2, r1
 8011826:	07d6      	lsls	r6, r2, #31
 8011828:	d528      	bpl.n	801187c <__sflush_r+0xb8>
 801182a:	2200      	movs	r2, #0
 801182c:	6062      	str	r2, [r4, #4]
 801182e:	04d9      	lsls	r1, r3, #19
 8011830:	6922      	ldr	r2, [r4, #16]
 8011832:	6022      	str	r2, [r4, #0]
 8011834:	d504      	bpl.n	8011840 <__sflush_r+0x7c>
 8011836:	1c42      	adds	r2, r0, #1
 8011838:	d101      	bne.n	801183e <__sflush_r+0x7a>
 801183a:	682b      	ldr	r3, [r5, #0]
 801183c:	b903      	cbnz	r3, 8011840 <__sflush_r+0x7c>
 801183e:	6560      	str	r0, [r4, #84]	; 0x54
 8011840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011842:	602f      	str	r7, [r5, #0]
 8011844:	2900      	cmp	r1, #0
 8011846:	d0ca      	beq.n	80117de <__sflush_r+0x1a>
 8011848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801184c:	4299      	cmp	r1, r3
 801184e:	d002      	beq.n	8011856 <__sflush_r+0x92>
 8011850:	4628      	mov	r0, r5
 8011852:	f7ff fae3 	bl	8010e1c <_free_r>
 8011856:	2000      	movs	r0, #0
 8011858:	6360      	str	r0, [r4, #52]	; 0x34
 801185a:	e7c1      	b.n	80117e0 <__sflush_r+0x1c>
 801185c:	6a21      	ldr	r1, [r4, #32]
 801185e:	2301      	movs	r3, #1
 8011860:	4628      	mov	r0, r5
 8011862:	47b0      	blx	r6
 8011864:	1c41      	adds	r1, r0, #1
 8011866:	d1c7      	bne.n	80117f8 <__sflush_r+0x34>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d0c4      	beq.n	80117f8 <__sflush_r+0x34>
 801186e:	2b1d      	cmp	r3, #29
 8011870:	d001      	beq.n	8011876 <__sflush_r+0xb2>
 8011872:	2b16      	cmp	r3, #22
 8011874:	d101      	bne.n	801187a <__sflush_r+0xb6>
 8011876:	602f      	str	r7, [r5, #0]
 8011878:	e7b1      	b.n	80117de <__sflush_r+0x1a>
 801187a:	89a3      	ldrh	r3, [r4, #12]
 801187c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011880:	81a3      	strh	r3, [r4, #12]
 8011882:	e7ad      	b.n	80117e0 <__sflush_r+0x1c>
 8011884:	690f      	ldr	r7, [r1, #16]
 8011886:	2f00      	cmp	r7, #0
 8011888:	d0a9      	beq.n	80117de <__sflush_r+0x1a>
 801188a:	0793      	lsls	r3, r2, #30
 801188c:	680e      	ldr	r6, [r1, #0]
 801188e:	bf08      	it	eq
 8011890:	694b      	ldreq	r3, [r1, #20]
 8011892:	600f      	str	r7, [r1, #0]
 8011894:	bf18      	it	ne
 8011896:	2300      	movne	r3, #0
 8011898:	eba6 0807 	sub.w	r8, r6, r7
 801189c:	608b      	str	r3, [r1, #8]
 801189e:	f1b8 0f00 	cmp.w	r8, #0
 80118a2:	dd9c      	ble.n	80117de <__sflush_r+0x1a>
 80118a4:	6a21      	ldr	r1, [r4, #32]
 80118a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118a8:	4643      	mov	r3, r8
 80118aa:	463a      	mov	r2, r7
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b0      	blx	r6
 80118b0:	2800      	cmp	r0, #0
 80118b2:	dc06      	bgt.n	80118c2 <__sflush_r+0xfe>
 80118b4:	89a3      	ldrh	r3, [r4, #12]
 80118b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ba:	81a3      	strh	r3, [r4, #12]
 80118bc:	f04f 30ff 	mov.w	r0, #4294967295
 80118c0:	e78e      	b.n	80117e0 <__sflush_r+0x1c>
 80118c2:	4407      	add	r7, r0
 80118c4:	eba8 0800 	sub.w	r8, r8, r0
 80118c8:	e7e9      	b.n	801189e <__sflush_r+0xda>
 80118ca:	bf00      	nop
 80118cc:	20400001 	.word	0x20400001

080118d0 <_fflush_r>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	690b      	ldr	r3, [r1, #16]
 80118d4:	4605      	mov	r5, r0
 80118d6:	460c      	mov	r4, r1
 80118d8:	b913      	cbnz	r3, 80118e0 <_fflush_r+0x10>
 80118da:	2500      	movs	r5, #0
 80118dc:	4628      	mov	r0, r5
 80118de:	bd38      	pop	{r3, r4, r5, pc}
 80118e0:	b118      	cbz	r0, 80118ea <_fflush_r+0x1a>
 80118e2:	6983      	ldr	r3, [r0, #24]
 80118e4:	b90b      	cbnz	r3, 80118ea <_fflush_r+0x1a>
 80118e6:	f000 f887 	bl	80119f8 <__sinit>
 80118ea:	4b14      	ldr	r3, [pc, #80]	; (801193c <_fflush_r+0x6c>)
 80118ec:	429c      	cmp	r4, r3
 80118ee:	d11b      	bne.n	8011928 <_fflush_r+0x58>
 80118f0:	686c      	ldr	r4, [r5, #4]
 80118f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d0ef      	beq.n	80118da <_fflush_r+0xa>
 80118fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118fc:	07d0      	lsls	r0, r2, #31
 80118fe:	d404      	bmi.n	801190a <_fflush_r+0x3a>
 8011900:	0599      	lsls	r1, r3, #22
 8011902:	d402      	bmi.n	801190a <_fflush_r+0x3a>
 8011904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011906:	f000 f915 	bl	8011b34 <__retarget_lock_acquire_recursive>
 801190a:	4628      	mov	r0, r5
 801190c:	4621      	mov	r1, r4
 801190e:	f7ff ff59 	bl	80117c4 <__sflush_r>
 8011912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011914:	07da      	lsls	r2, r3, #31
 8011916:	4605      	mov	r5, r0
 8011918:	d4e0      	bmi.n	80118dc <_fflush_r+0xc>
 801191a:	89a3      	ldrh	r3, [r4, #12]
 801191c:	059b      	lsls	r3, r3, #22
 801191e:	d4dd      	bmi.n	80118dc <_fflush_r+0xc>
 8011920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011922:	f000 f908 	bl	8011b36 <__retarget_lock_release_recursive>
 8011926:	e7d9      	b.n	80118dc <_fflush_r+0xc>
 8011928:	4b05      	ldr	r3, [pc, #20]	; (8011940 <_fflush_r+0x70>)
 801192a:	429c      	cmp	r4, r3
 801192c:	d101      	bne.n	8011932 <_fflush_r+0x62>
 801192e:	68ac      	ldr	r4, [r5, #8]
 8011930:	e7df      	b.n	80118f2 <_fflush_r+0x22>
 8011932:	4b04      	ldr	r3, [pc, #16]	; (8011944 <_fflush_r+0x74>)
 8011934:	429c      	cmp	r4, r3
 8011936:	bf08      	it	eq
 8011938:	68ec      	ldreq	r4, [r5, #12]
 801193a:	e7da      	b.n	80118f2 <_fflush_r+0x22>
 801193c:	080138ac 	.word	0x080138ac
 8011940:	080138cc 	.word	0x080138cc
 8011944:	0801388c 	.word	0x0801388c

08011948 <std>:
 8011948:	2300      	movs	r3, #0
 801194a:	b510      	push	{r4, lr}
 801194c:	4604      	mov	r4, r0
 801194e:	e9c0 3300 	strd	r3, r3, [r0]
 8011952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011956:	6083      	str	r3, [r0, #8]
 8011958:	8181      	strh	r1, [r0, #12]
 801195a:	6643      	str	r3, [r0, #100]	; 0x64
 801195c:	81c2      	strh	r2, [r0, #14]
 801195e:	6183      	str	r3, [r0, #24]
 8011960:	4619      	mov	r1, r3
 8011962:	2208      	movs	r2, #8
 8011964:	305c      	adds	r0, #92	; 0x5c
 8011966:	f7fd fb8d 	bl	800f084 <memset>
 801196a:	4b05      	ldr	r3, [pc, #20]	; (8011980 <std+0x38>)
 801196c:	6263      	str	r3, [r4, #36]	; 0x24
 801196e:	4b05      	ldr	r3, [pc, #20]	; (8011984 <std+0x3c>)
 8011970:	62a3      	str	r3, [r4, #40]	; 0x28
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <std+0x40>)
 8011974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011976:	4b05      	ldr	r3, [pc, #20]	; (801198c <std+0x44>)
 8011978:	6224      	str	r4, [r4, #32]
 801197a:	6323      	str	r3, [r4, #48]	; 0x30
 801197c:	bd10      	pop	{r4, pc}
 801197e:	bf00      	nop
 8011980:	08011c99 	.word	0x08011c99
 8011984:	08011cbb 	.word	0x08011cbb
 8011988:	08011cf3 	.word	0x08011cf3
 801198c:	08011d17 	.word	0x08011d17

08011990 <_cleanup_r>:
 8011990:	4901      	ldr	r1, [pc, #4]	; (8011998 <_cleanup_r+0x8>)
 8011992:	f000 b8af 	b.w	8011af4 <_fwalk_reent>
 8011996:	bf00      	nop
 8011998:	080118d1 	.word	0x080118d1

0801199c <__sfmoreglue>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	1e4a      	subs	r2, r1, #1
 80119a0:	2568      	movs	r5, #104	; 0x68
 80119a2:	4355      	muls	r5, r2
 80119a4:	460e      	mov	r6, r1
 80119a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119aa:	f7ff fa87 	bl	8010ebc <_malloc_r>
 80119ae:	4604      	mov	r4, r0
 80119b0:	b140      	cbz	r0, 80119c4 <__sfmoreglue+0x28>
 80119b2:	2100      	movs	r1, #0
 80119b4:	e9c0 1600 	strd	r1, r6, [r0]
 80119b8:	300c      	adds	r0, #12
 80119ba:	60a0      	str	r0, [r4, #8]
 80119bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119c0:	f7fd fb60 	bl	800f084 <memset>
 80119c4:	4620      	mov	r0, r4
 80119c6:	bd70      	pop	{r4, r5, r6, pc}

080119c8 <__sfp_lock_acquire>:
 80119c8:	4801      	ldr	r0, [pc, #4]	; (80119d0 <__sfp_lock_acquire+0x8>)
 80119ca:	f000 b8b3 	b.w	8011b34 <__retarget_lock_acquire_recursive>
 80119ce:	bf00      	nop
 80119d0:	200067b8 	.word	0x200067b8

080119d4 <__sfp_lock_release>:
 80119d4:	4801      	ldr	r0, [pc, #4]	; (80119dc <__sfp_lock_release+0x8>)
 80119d6:	f000 b8ae 	b.w	8011b36 <__retarget_lock_release_recursive>
 80119da:	bf00      	nop
 80119dc:	200067b8 	.word	0x200067b8

080119e0 <__sinit_lock_acquire>:
 80119e0:	4801      	ldr	r0, [pc, #4]	; (80119e8 <__sinit_lock_acquire+0x8>)
 80119e2:	f000 b8a7 	b.w	8011b34 <__retarget_lock_acquire_recursive>
 80119e6:	bf00      	nop
 80119e8:	200067b3 	.word	0x200067b3

080119ec <__sinit_lock_release>:
 80119ec:	4801      	ldr	r0, [pc, #4]	; (80119f4 <__sinit_lock_release+0x8>)
 80119ee:	f000 b8a2 	b.w	8011b36 <__retarget_lock_release_recursive>
 80119f2:	bf00      	nop
 80119f4:	200067b3 	.word	0x200067b3

080119f8 <__sinit>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	4604      	mov	r4, r0
 80119fc:	f7ff fff0 	bl	80119e0 <__sinit_lock_acquire>
 8011a00:	69a3      	ldr	r3, [r4, #24]
 8011a02:	b11b      	cbz	r3, 8011a0c <__sinit+0x14>
 8011a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a08:	f7ff bff0 	b.w	80119ec <__sinit_lock_release>
 8011a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a10:	6523      	str	r3, [r4, #80]	; 0x50
 8011a12:	4b13      	ldr	r3, [pc, #76]	; (8011a60 <__sinit+0x68>)
 8011a14:	4a13      	ldr	r2, [pc, #76]	; (8011a64 <__sinit+0x6c>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a1a:	42a3      	cmp	r3, r4
 8011a1c:	bf04      	itt	eq
 8011a1e:	2301      	moveq	r3, #1
 8011a20:	61a3      	streq	r3, [r4, #24]
 8011a22:	4620      	mov	r0, r4
 8011a24:	f000 f820 	bl	8011a68 <__sfp>
 8011a28:	6060      	str	r0, [r4, #4]
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f000 f81c 	bl	8011a68 <__sfp>
 8011a30:	60a0      	str	r0, [r4, #8]
 8011a32:	4620      	mov	r0, r4
 8011a34:	f000 f818 	bl	8011a68 <__sfp>
 8011a38:	2200      	movs	r2, #0
 8011a3a:	60e0      	str	r0, [r4, #12]
 8011a3c:	2104      	movs	r1, #4
 8011a3e:	6860      	ldr	r0, [r4, #4]
 8011a40:	f7ff ff82 	bl	8011948 <std>
 8011a44:	68a0      	ldr	r0, [r4, #8]
 8011a46:	2201      	movs	r2, #1
 8011a48:	2109      	movs	r1, #9
 8011a4a:	f7ff ff7d 	bl	8011948 <std>
 8011a4e:	68e0      	ldr	r0, [r4, #12]
 8011a50:	2202      	movs	r2, #2
 8011a52:	2112      	movs	r1, #18
 8011a54:	f7ff ff78 	bl	8011948 <std>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	61a3      	str	r3, [r4, #24]
 8011a5c:	e7d2      	b.n	8011a04 <__sinit+0xc>
 8011a5e:	bf00      	nop
 8011a60:	08013508 	.word	0x08013508
 8011a64:	08011991 	.word	0x08011991

08011a68 <__sfp>:
 8011a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a6a:	4607      	mov	r7, r0
 8011a6c:	f7ff ffac 	bl	80119c8 <__sfp_lock_acquire>
 8011a70:	4b1e      	ldr	r3, [pc, #120]	; (8011aec <__sfp+0x84>)
 8011a72:	681e      	ldr	r6, [r3, #0]
 8011a74:	69b3      	ldr	r3, [r6, #24]
 8011a76:	b913      	cbnz	r3, 8011a7e <__sfp+0x16>
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff ffbd 	bl	80119f8 <__sinit>
 8011a7e:	3648      	adds	r6, #72	; 0x48
 8011a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	d503      	bpl.n	8011a90 <__sfp+0x28>
 8011a88:	6833      	ldr	r3, [r6, #0]
 8011a8a:	b30b      	cbz	r3, 8011ad0 <__sfp+0x68>
 8011a8c:	6836      	ldr	r6, [r6, #0]
 8011a8e:	e7f7      	b.n	8011a80 <__sfp+0x18>
 8011a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a94:	b9d5      	cbnz	r5, 8011acc <__sfp+0x64>
 8011a96:	4b16      	ldr	r3, [pc, #88]	; (8011af0 <__sfp+0x88>)
 8011a98:	60e3      	str	r3, [r4, #12]
 8011a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8011aa0:	f000 f847 	bl	8011b32 <__retarget_lock_init_recursive>
 8011aa4:	f7ff ff96 	bl	80119d4 <__sfp_lock_release>
 8011aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ab0:	6025      	str	r5, [r4, #0]
 8011ab2:	61a5      	str	r5, [r4, #24]
 8011ab4:	2208      	movs	r2, #8
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011abc:	f7fd fae2 	bl	800f084 <memset>
 8011ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ac8:	4620      	mov	r0, r4
 8011aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011acc:	3468      	adds	r4, #104	; 0x68
 8011ace:	e7d9      	b.n	8011a84 <__sfp+0x1c>
 8011ad0:	2104      	movs	r1, #4
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	f7ff ff62 	bl	801199c <__sfmoreglue>
 8011ad8:	4604      	mov	r4, r0
 8011ada:	6030      	str	r0, [r6, #0]
 8011adc:	2800      	cmp	r0, #0
 8011ade:	d1d5      	bne.n	8011a8c <__sfp+0x24>
 8011ae0:	f7ff ff78 	bl	80119d4 <__sfp_lock_release>
 8011ae4:	230c      	movs	r3, #12
 8011ae6:	603b      	str	r3, [r7, #0]
 8011ae8:	e7ee      	b.n	8011ac8 <__sfp+0x60>
 8011aea:	bf00      	nop
 8011aec:	08013508 	.word	0x08013508
 8011af0:	ffff0001 	.word	0xffff0001

08011af4 <_fwalk_reent>:
 8011af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011af8:	4606      	mov	r6, r0
 8011afa:	4688      	mov	r8, r1
 8011afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b00:	2700      	movs	r7, #0
 8011b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b06:	f1b9 0901 	subs.w	r9, r9, #1
 8011b0a:	d505      	bpl.n	8011b18 <_fwalk_reent+0x24>
 8011b0c:	6824      	ldr	r4, [r4, #0]
 8011b0e:	2c00      	cmp	r4, #0
 8011b10:	d1f7      	bne.n	8011b02 <_fwalk_reent+0xe>
 8011b12:	4638      	mov	r0, r7
 8011b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b18:	89ab      	ldrh	r3, [r5, #12]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d907      	bls.n	8011b2e <_fwalk_reent+0x3a>
 8011b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b22:	3301      	adds	r3, #1
 8011b24:	d003      	beq.n	8011b2e <_fwalk_reent+0x3a>
 8011b26:	4629      	mov	r1, r5
 8011b28:	4630      	mov	r0, r6
 8011b2a:	47c0      	blx	r8
 8011b2c:	4307      	orrs	r7, r0
 8011b2e:	3568      	adds	r5, #104	; 0x68
 8011b30:	e7e9      	b.n	8011b06 <_fwalk_reent+0x12>

08011b32 <__retarget_lock_init_recursive>:
 8011b32:	4770      	bx	lr

08011b34 <__retarget_lock_acquire_recursive>:
 8011b34:	4770      	bx	lr

08011b36 <__retarget_lock_release_recursive>:
 8011b36:	4770      	bx	lr

08011b38 <__swhatbuf_r>:
 8011b38:	b570      	push	{r4, r5, r6, lr}
 8011b3a:	460e      	mov	r6, r1
 8011b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b40:	2900      	cmp	r1, #0
 8011b42:	b096      	sub	sp, #88	; 0x58
 8011b44:	4614      	mov	r4, r2
 8011b46:	461d      	mov	r5, r3
 8011b48:	da07      	bge.n	8011b5a <__swhatbuf_r+0x22>
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	602b      	str	r3, [r5, #0]
 8011b4e:	89b3      	ldrh	r3, [r6, #12]
 8011b50:	061a      	lsls	r2, r3, #24
 8011b52:	d410      	bmi.n	8011b76 <__swhatbuf_r+0x3e>
 8011b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b58:	e00e      	b.n	8011b78 <__swhatbuf_r+0x40>
 8011b5a:	466a      	mov	r2, sp
 8011b5c:	f000 f902 	bl	8011d64 <_fstat_r>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	dbf2      	blt.n	8011b4a <__swhatbuf_r+0x12>
 8011b64:	9a01      	ldr	r2, [sp, #4]
 8011b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b6e:	425a      	negs	r2, r3
 8011b70:	415a      	adcs	r2, r3
 8011b72:	602a      	str	r2, [r5, #0]
 8011b74:	e7ee      	b.n	8011b54 <__swhatbuf_r+0x1c>
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	2000      	movs	r0, #0
 8011b7a:	6023      	str	r3, [r4, #0]
 8011b7c:	b016      	add	sp, #88	; 0x58
 8011b7e:	bd70      	pop	{r4, r5, r6, pc}

08011b80 <__smakebuf_r>:
 8011b80:	898b      	ldrh	r3, [r1, #12]
 8011b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b84:	079d      	lsls	r5, r3, #30
 8011b86:	4606      	mov	r6, r0
 8011b88:	460c      	mov	r4, r1
 8011b8a:	d507      	bpl.n	8011b9c <__smakebuf_r+0x1c>
 8011b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	6123      	str	r3, [r4, #16]
 8011b94:	2301      	movs	r3, #1
 8011b96:	6163      	str	r3, [r4, #20]
 8011b98:	b002      	add	sp, #8
 8011b9a:	bd70      	pop	{r4, r5, r6, pc}
 8011b9c:	ab01      	add	r3, sp, #4
 8011b9e:	466a      	mov	r2, sp
 8011ba0:	f7ff ffca 	bl	8011b38 <__swhatbuf_r>
 8011ba4:	9900      	ldr	r1, [sp, #0]
 8011ba6:	4605      	mov	r5, r0
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f7ff f987 	bl	8010ebc <_malloc_r>
 8011bae:	b948      	cbnz	r0, 8011bc4 <__smakebuf_r+0x44>
 8011bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bb4:	059a      	lsls	r2, r3, #22
 8011bb6:	d4ef      	bmi.n	8011b98 <__smakebuf_r+0x18>
 8011bb8:	f023 0303 	bic.w	r3, r3, #3
 8011bbc:	f043 0302 	orr.w	r3, r3, #2
 8011bc0:	81a3      	strh	r3, [r4, #12]
 8011bc2:	e7e3      	b.n	8011b8c <__smakebuf_r+0xc>
 8011bc4:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <__smakebuf_r+0x7c>)
 8011bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	6020      	str	r0, [r4, #0]
 8011bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bd0:	81a3      	strh	r3, [r4, #12]
 8011bd2:	9b00      	ldr	r3, [sp, #0]
 8011bd4:	6163      	str	r3, [r4, #20]
 8011bd6:	9b01      	ldr	r3, [sp, #4]
 8011bd8:	6120      	str	r0, [r4, #16]
 8011bda:	b15b      	cbz	r3, 8011bf4 <__smakebuf_r+0x74>
 8011bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011be0:	4630      	mov	r0, r6
 8011be2:	f000 f8d1 	bl	8011d88 <_isatty_r>
 8011be6:	b128      	cbz	r0, 8011bf4 <__smakebuf_r+0x74>
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	f023 0303 	bic.w	r3, r3, #3
 8011bee:	f043 0301 	orr.w	r3, r3, #1
 8011bf2:	81a3      	strh	r3, [r4, #12]
 8011bf4:	89a0      	ldrh	r0, [r4, #12]
 8011bf6:	4305      	orrs	r5, r0
 8011bf8:	81a5      	strh	r5, [r4, #12]
 8011bfa:	e7cd      	b.n	8011b98 <__smakebuf_r+0x18>
 8011bfc:	08011991 	.word	0x08011991

08011c00 <_malloc_usable_size_r>:
 8011c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c04:	1f18      	subs	r0, r3, #4
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	bfbc      	itt	lt
 8011c0a:	580b      	ldrlt	r3, [r1, r0]
 8011c0c:	18c0      	addlt	r0, r0, r3
 8011c0e:	4770      	bx	lr

08011c10 <_raise_r>:
 8011c10:	291f      	cmp	r1, #31
 8011c12:	b538      	push	{r3, r4, r5, lr}
 8011c14:	4604      	mov	r4, r0
 8011c16:	460d      	mov	r5, r1
 8011c18:	d904      	bls.n	8011c24 <_raise_r+0x14>
 8011c1a:	2316      	movs	r3, #22
 8011c1c:	6003      	str	r3, [r0, #0]
 8011c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011c26:	b112      	cbz	r2, 8011c2e <_raise_r+0x1e>
 8011c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c2c:	b94b      	cbnz	r3, 8011c42 <_raise_r+0x32>
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f000 f830 	bl	8011c94 <_getpid_r>
 8011c34:	462a      	mov	r2, r5
 8011c36:	4601      	mov	r1, r0
 8011c38:	4620      	mov	r0, r4
 8011c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c3e:	f000 b817 	b.w	8011c70 <_kill_r>
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d00a      	beq.n	8011c5c <_raise_r+0x4c>
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	d103      	bne.n	8011c52 <_raise_r+0x42>
 8011c4a:	2316      	movs	r3, #22
 8011c4c:	6003      	str	r3, [r0, #0]
 8011c4e:	2001      	movs	r0, #1
 8011c50:	e7e7      	b.n	8011c22 <_raise_r+0x12>
 8011c52:	2400      	movs	r4, #0
 8011c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c58:	4628      	mov	r0, r5
 8011c5a:	4798      	blx	r3
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	e7e0      	b.n	8011c22 <_raise_r+0x12>

08011c60 <raise>:
 8011c60:	4b02      	ldr	r3, [pc, #8]	; (8011c6c <raise+0xc>)
 8011c62:	4601      	mov	r1, r0
 8011c64:	6818      	ldr	r0, [r3, #0]
 8011c66:	f7ff bfd3 	b.w	8011c10 <_raise_r>
 8011c6a:	bf00      	nop
 8011c6c:	20000018 	.word	0x20000018

08011c70 <_kill_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d07      	ldr	r5, [pc, #28]	; (8011c90 <_kill_r+0x20>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	602b      	str	r3, [r5, #0]
 8011c7e:	f7f3 ff31 	bl	8005ae4 <_kill>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	d102      	bne.n	8011c8c <_kill_r+0x1c>
 8011c86:	682b      	ldr	r3, [r5, #0]
 8011c88:	b103      	cbz	r3, 8011c8c <_kill_r+0x1c>
 8011c8a:	6023      	str	r3, [r4, #0]
 8011c8c:	bd38      	pop	{r3, r4, r5, pc}
 8011c8e:	bf00      	nop
 8011c90:	200067ac 	.word	0x200067ac

08011c94 <_getpid_r>:
 8011c94:	f7f3 bf1e 	b.w	8005ad4 <_getpid>

08011c98 <__sread>:
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	460c      	mov	r4, r1
 8011c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ca0:	f000 f894 	bl	8011dcc <_read_r>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	bfab      	itete	ge
 8011ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011caa:	89a3      	ldrhlt	r3, [r4, #12]
 8011cac:	181b      	addge	r3, r3, r0
 8011cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cb2:	bfac      	ite	ge
 8011cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cb6:	81a3      	strhlt	r3, [r4, #12]
 8011cb8:	bd10      	pop	{r4, pc}

08011cba <__swrite>:
 8011cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbe:	461f      	mov	r7, r3
 8011cc0:	898b      	ldrh	r3, [r1, #12]
 8011cc2:	05db      	lsls	r3, r3, #23
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	4616      	mov	r6, r2
 8011cca:	d505      	bpl.n	8011cd8 <__swrite+0x1e>
 8011ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd0:	2302      	movs	r3, #2
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f000 f868 	bl	8011da8 <_lseek_r>
 8011cd8:	89a3      	ldrh	r3, [r4, #12]
 8011cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ce2:	81a3      	strh	r3, [r4, #12]
 8011ce4:	4632      	mov	r2, r6
 8011ce6:	463b      	mov	r3, r7
 8011ce8:	4628      	mov	r0, r5
 8011cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cee:	f000 b817 	b.w	8011d20 <_write_r>

08011cf2 <__sseek>:
 8011cf2:	b510      	push	{r4, lr}
 8011cf4:	460c      	mov	r4, r1
 8011cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cfa:	f000 f855 	bl	8011da8 <_lseek_r>
 8011cfe:	1c43      	adds	r3, r0, #1
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	bf15      	itete	ne
 8011d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d0e:	81a3      	strheq	r3, [r4, #12]
 8011d10:	bf18      	it	ne
 8011d12:	81a3      	strhne	r3, [r4, #12]
 8011d14:	bd10      	pop	{r4, pc}

08011d16 <__sclose>:
 8011d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1a:	f000 b813 	b.w	8011d44 <_close_r>
	...

08011d20 <_write_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d07      	ldr	r5, [pc, #28]	; (8011d40 <_write_r+0x20>)
 8011d24:	4604      	mov	r4, r0
 8011d26:	4608      	mov	r0, r1
 8011d28:	4611      	mov	r1, r2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	602a      	str	r2, [r5, #0]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	f7f3 ff0f 	bl	8005b52 <_write>
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d102      	bne.n	8011d3e <_write_r+0x1e>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	b103      	cbz	r3, 8011d3e <_write_r+0x1e>
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	200067ac 	.word	0x200067ac

08011d44 <_close_r>:
 8011d44:	b538      	push	{r3, r4, r5, lr}
 8011d46:	4d06      	ldr	r5, [pc, #24]	; (8011d60 <_close_r+0x1c>)
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	4608      	mov	r0, r1
 8011d4e:	602b      	str	r3, [r5, #0]
 8011d50:	f7f3 ff1b 	bl	8005b8a <_close>
 8011d54:	1c43      	adds	r3, r0, #1
 8011d56:	d102      	bne.n	8011d5e <_close_r+0x1a>
 8011d58:	682b      	ldr	r3, [r5, #0]
 8011d5a:	b103      	cbz	r3, 8011d5e <_close_r+0x1a>
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	200067ac 	.word	0x200067ac

08011d64 <_fstat_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d07      	ldr	r5, [pc, #28]	; (8011d84 <_fstat_r+0x20>)
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	4611      	mov	r1, r2
 8011d70:	602b      	str	r3, [r5, #0]
 8011d72:	f7f3 ff16 	bl	8005ba2 <_fstat>
 8011d76:	1c43      	adds	r3, r0, #1
 8011d78:	d102      	bne.n	8011d80 <_fstat_r+0x1c>
 8011d7a:	682b      	ldr	r3, [r5, #0]
 8011d7c:	b103      	cbz	r3, 8011d80 <_fstat_r+0x1c>
 8011d7e:	6023      	str	r3, [r4, #0]
 8011d80:	bd38      	pop	{r3, r4, r5, pc}
 8011d82:	bf00      	nop
 8011d84:	200067ac 	.word	0x200067ac

08011d88 <_isatty_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d06      	ldr	r5, [pc, #24]	; (8011da4 <_isatty_r+0x1c>)
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	4604      	mov	r4, r0
 8011d90:	4608      	mov	r0, r1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	f7f3 ff15 	bl	8005bc2 <_isatty>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d102      	bne.n	8011da2 <_isatty_r+0x1a>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b103      	cbz	r3, 8011da2 <_isatty_r+0x1a>
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	200067ac 	.word	0x200067ac

08011da8 <_lseek_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d07      	ldr	r5, [pc, #28]	; (8011dc8 <_lseek_r+0x20>)
 8011dac:	4604      	mov	r4, r0
 8011dae:	4608      	mov	r0, r1
 8011db0:	4611      	mov	r1, r2
 8011db2:	2200      	movs	r2, #0
 8011db4:	602a      	str	r2, [r5, #0]
 8011db6:	461a      	mov	r2, r3
 8011db8:	f7f3 ff0e 	bl	8005bd8 <_lseek>
 8011dbc:	1c43      	adds	r3, r0, #1
 8011dbe:	d102      	bne.n	8011dc6 <_lseek_r+0x1e>
 8011dc0:	682b      	ldr	r3, [r5, #0]
 8011dc2:	b103      	cbz	r3, 8011dc6 <_lseek_r+0x1e>
 8011dc4:	6023      	str	r3, [r4, #0]
 8011dc6:	bd38      	pop	{r3, r4, r5, pc}
 8011dc8:	200067ac 	.word	0x200067ac

08011dcc <_read_r>:
 8011dcc:	b538      	push	{r3, r4, r5, lr}
 8011dce:	4d07      	ldr	r5, [pc, #28]	; (8011dec <_read_r+0x20>)
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	4608      	mov	r0, r1
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	602a      	str	r2, [r5, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f7f3 fe9c 	bl	8005b18 <_read>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d102      	bne.n	8011dea <_read_r+0x1e>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	b103      	cbz	r3, 8011dea <_read_r+0x1e>
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	bd38      	pop	{r3, r4, r5, pc}
 8011dec:	200067ac 	.word	0x200067ac

08011df0 <cos>:
 8011df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011df2:	ec53 2b10 	vmov	r2, r3, d0
 8011df6:	4824      	ldr	r0, [pc, #144]	; (8011e88 <cos+0x98>)
 8011df8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011dfc:	4281      	cmp	r1, r0
 8011dfe:	dc06      	bgt.n	8011e0e <cos+0x1e>
 8011e00:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8011e80 <cos+0x90>
 8011e04:	f000 faa4 	bl	8012350 <__kernel_cos>
 8011e08:	ec51 0b10 	vmov	r0, r1, d0
 8011e0c:	e007      	b.n	8011e1e <cos+0x2e>
 8011e0e:	481f      	ldr	r0, [pc, #124]	; (8011e8c <cos+0x9c>)
 8011e10:	4281      	cmp	r1, r0
 8011e12:	dd09      	ble.n	8011e28 <cos+0x38>
 8011e14:	ee10 0a10 	vmov	r0, s0
 8011e18:	4619      	mov	r1, r3
 8011e1a:	f7ee fa45 	bl	80002a8 <__aeabi_dsub>
 8011e1e:	ec41 0b10 	vmov	d0, r0, r1
 8011e22:	b005      	add	sp, #20
 8011e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e28:	4668      	mov	r0, sp
 8011e2a:	f000 f885 	bl	8011f38 <__ieee754_rem_pio2>
 8011e2e:	f000 0003 	and.w	r0, r0, #3
 8011e32:	2801      	cmp	r0, #1
 8011e34:	d007      	beq.n	8011e46 <cos+0x56>
 8011e36:	2802      	cmp	r0, #2
 8011e38:	d012      	beq.n	8011e60 <cos+0x70>
 8011e3a:	b9c0      	cbnz	r0, 8011e6e <cos+0x7e>
 8011e3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e40:	ed9d 0b00 	vldr	d0, [sp]
 8011e44:	e7de      	b.n	8011e04 <cos+0x14>
 8011e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e4a:	ed9d 0b00 	vldr	d0, [sp]
 8011e4e:	f000 fe87 	bl	8012b60 <__kernel_sin>
 8011e52:	ec53 2b10 	vmov	r2, r3, d0
 8011e56:	ee10 0a10 	vmov	r0, s0
 8011e5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011e5e:	e7de      	b.n	8011e1e <cos+0x2e>
 8011e60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e64:	ed9d 0b00 	vldr	d0, [sp]
 8011e68:	f000 fa72 	bl	8012350 <__kernel_cos>
 8011e6c:	e7f1      	b.n	8011e52 <cos+0x62>
 8011e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e72:	ed9d 0b00 	vldr	d0, [sp]
 8011e76:	2001      	movs	r0, #1
 8011e78:	f000 fe72 	bl	8012b60 <__kernel_sin>
 8011e7c:	e7c4      	b.n	8011e08 <cos+0x18>
 8011e7e:	bf00      	nop
	...
 8011e88:	3fe921fb 	.word	0x3fe921fb
 8011e8c:	7fefffff 	.word	0x7fefffff

08011e90 <sin>:
 8011e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e92:	ec53 2b10 	vmov	r2, r3, d0
 8011e96:	4826      	ldr	r0, [pc, #152]	; (8011f30 <sin+0xa0>)
 8011e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011e9c:	4281      	cmp	r1, r0
 8011e9e:	dc07      	bgt.n	8011eb0 <sin+0x20>
 8011ea0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011f28 <sin+0x98>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	f000 fe5b 	bl	8012b60 <__kernel_sin>
 8011eaa:	ec51 0b10 	vmov	r0, r1, d0
 8011eae:	e007      	b.n	8011ec0 <sin+0x30>
 8011eb0:	4820      	ldr	r0, [pc, #128]	; (8011f34 <sin+0xa4>)
 8011eb2:	4281      	cmp	r1, r0
 8011eb4:	dd09      	ble.n	8011eca <sin+0x3a>
 8011eb6:	ee10 0a10 	vmov	r0, s0
 8011eba:	4619      	mov	r1, r3
 8011ebc:	f7ee f9f4 	bl	80002a8 <__aeabi_dsub>
 8011ec0:	ec41 0b10 	vmov	d0, r0, r1
 8011ec4:	b005      	add	sp, #20
 8011ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011eca:	4668      	mov	r0, sp
 8011ecc:	f000 f834 	bl	8011f38 <__ieee754_rem_pio2>
 8011ed0:	f000 0003 	and.w	r0, r0, #3
 8011ed4:	2801      	cmp	r0, #1
 8011ed6:	d008      	beq.n	8011eea <sin+0x5a>
 8011ed8:	2802      	cmp	r0, #2
 8011eda:	d00d      	beq.n	8011ef8 <sin+0x68>
 8011edc:	b9d0      	cbnz	r0, 8011f14 <sin+0x84>
 8011ede:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ee2:	ed9d 0b00 	vldr	d0, [sp]
 8011ee6:	2001      	movs	r0, #1
 8011ee8:	e7dd      	b.n	8011ea6 <sin+0x16>
 8011eea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011eee:	ed9d 0b00 	vldr	d0, [sp]
 8011ef2:	f000 fa2d 	bl	8012350 <__kernel_cos>
 8011ef6:	e7d8      	b.n	8011eaa <sin+0x1a>
 8011ef8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011efc:	ed9d 0b00 	vldr	d0, [sp]
 8011f00:	2001      	movs	r0, #1
 8011f02:	f000 fe2d 	bl	8012b60 <__kernel_sin>
 8011f06:	ec53 2b10 	vmov	r2, r3, d0
 8011f0a:	ee10 0a10 	vmov	r0, s0
 8011f0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011f12:	e7d5      	b.n	8011ec0 <sin+0x30>
 8011f14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f18:	ed9d 0b00 	vldr	d0, [sp]
 8011f1c:	f000 fa18 	bl	8012350 <__kernel_cos>
 8011f20:	e7f1      	b.n	8011f06 <sin+0x76>
 8011f22:	bf00      	nop
 8011f24:	f3af 8000 	nop.w
	...
 8011f30:	3fe921fb 	.word	0x3fe921fb
 8011f34:	7fefffff 	.word	0x7fefffff

08011f38 <__ieee754_rem_pio2>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	ed2d 8b02 	vpush	{d8}
 8011f40:	ec55 4b10 	vmov	r4, r5, d0
 8011f44:	4bca      	ldr	r3, [pc, #808]	; (8012270 <__ieee754_rem_pio2+0x338>)
 8011f46:	b08b      	sub	sp, #44	; 0x2c
 8011f48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011f4c:	4598      	cmp	r8, r3
 8011f4e:	4682      	mov	sl, r0
 8011f50:	9502      	str	r5, [sp, #8]
 8011f52:	dc08      	bgt.n	8011f66 <__ieee754_rem_pio2+0x2e>
 8011f54:	2200      	movs	r2, #0
 8011f56:	2300      	movs	r3, #0
 8011f58:	ed80 0b00 	vstr	d0, [r0]
 8011f5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011f60:	f04f 0b00 	mov.w	fp, #0
 8011f64:	e028      	b.n	8011fb8 <__ieee754_rem_pio2+0x80>
 8011f66:	4bc3      	ldr	r3, [pc, #780]	; (8012274 <__ieee754_rem_pio2+0x33c>)
 8011f68:	4598      	cmp	r8, r3
 8011f6a:	dc78      	bgt.n	801205e <__ieee754_rem_pio2+0x126>
 8011f6c:	9b02      	ldr	r3, [sp, #8]
 8011f6e:	4ec2      	ldr	r6, [pc, #776]	; (8012278 <__ieee754_rem_pio2+0x340>)
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	ee10 0a10 	vmov	r0, s0
 8011f76:	a3b0      	add	r3, pc, #704	; (adr r3, 8012238 <__ieee754_rem_pio2+0x300>)
 8011f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	dd39      	ble.n	8011ff4 <__ieee754_rem_pio2+0xbc>
 8011f80:	f7ee f992 	bl	80002a8 <__aeabi_dsub>
 8011f84:	45b0      	cmp	r8, r6
 8011f86:	4604      	mov	r4, r0
 8011f88:	460d      	mov	r5, r1
 8011f8a:	d01b      	beq.n	8011fc4 <__ieee754_rem_pio2+0x8c>
 8011f8c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012240 <__ieee754_rem_pio2+0x308>)
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	f7ee f989 	bl	80002a8 <__aeabi_dsub>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	e9ca 2300 	strd	r2, r3, [sl]
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	f7ee f981 	bl	80002a8 <__aeabi_dsub>
 8011fa6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012240 <__ieee754_rem_pio2+0x308>)
 8011fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fac:	f7ee f97c 	bl	80002a8 <__aeabi_dsub>
 8011fb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011fb4:	f04f 0b01 	mov.w	fp, #1
 8011fb8:	4658      	mov	r0, fp
 8011fba:	b00b      	add	sp, #44	; 0x2c
 8011fbc:	ecbd 8b02 	vpop	{d8}
 8011fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012248 <__ieee754_rem_pio2+0x310>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee f96d 	bl	80002a8 <__aeabi_dsub>
 8011fce:	a3a0      	add	r3, pc, #640	; (adr r3, 8012250 <__ieee754_rem_pio2+0x318>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	f7ee f966 	bl	80002a8 <__aeabi_dsub>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	460b      	mov	r3, r1
 8011fe0:	e9ca 2300 	strd	r2, r3, [sl]
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	f7ee f95e 	bl	80002a8 <__aeabi_dsub>
 8011fec:	a398      	add	r3, pc, #608	; (adr r3, 8012250 <__ieee754_rem_pio2+0x318>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	e7db      	b.n	8011fac <__ieee754_rem_pio2+0x74>
 8011ff4:	f7ee f95a 	bl	80002ac <__adddf3>
 8011ff8:	45b0      	cmp	r8, r6
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	460d      	mov	r5, r1
 8011ffe:	d016      	beq.n	801202e <__ieee754_rem_pio2+0xf6>
 8012000:	a38f      	add	r3, pc, #572	; (adr r3, 8012240 <__ieee754_rem_pio2+0x308>)
 8012002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012006:	f7ee f951 	bl	80002ac <__adddf3>
 801200a:	4602      	mov	r2, r0
 801200c:	460b      	mov	r3, r1
 801200e:	e9ca 2300 	strd	r2, r3, [sl]
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee f947 	bl	80002a8 <__aeabi_dsub>
 801201a:	a389      	add	r3, pc, #548	; (adr r3, 8012240 <__ieee754_rem_pio2+0x308>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	f7ee f944 	bl	80002ac <__adddf3>
 8012024:	f04f 3bff 	mov.w	fp, #4294967295
 8012028:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801202c:	e7c4      	b.n	8011fb8 <__ieee754_rem_pio2+0x80>
 801202e:	a386      	add	r3, pc, #536	; (adr r3, 8012248 <__ieee754_rem_pio2+0x310>)
 8012030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012034:	f7ee f93a 	bl	80002ac <__adddf3>
 8012038:	a385      	add	r3, pc, #532	; (adr r3, 8012250 <__ieee754_rem_pio2+0x318>)
 801203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203e:	4604      	mov	r4, r0
 8012040:	460d      	mov	r5, r1
 8012042:	f7ee f933 	bl	80002ac <__adddf3>
 8012046:	4602      	mov	r2, r0
 8012048:	460b      	mov	r3, r1
 801204a:	e9ca 2300 	strd	r2, r3, [sl]
 801204e:	4620      	mov	r0, r4
 8012050:	4629      	mov	r1, r5
 8012052:	f7ee f929 	bl	80002a8 <__aeabi_dsub>
 8012056:	a37e      	add	r3, pc, #504	; (adr r3, 8012250 <__ieee754_rem_pio2+0x318>)
 8012058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205c:	e7e0      	b.n	8012020 <__ieee754_rem_pio2+0xe8>
 801205e:	4b87      	ldr	r3, [pc, #540]	; (801227c <__ieee754_rem_pio2+0x344>)
 8012060:	4598      	cmp	r8, r3
 8012062:	f300 80d9 	bgt.w	8012218 <__ieee754_rem_pio2+0x2e0>
 8012066:	f000 fe39 	bl	8012cdc <fabs>
 801206a:	ec55 4b10 	vmov	r4, r5, d0
 801206e:	ee10 0a10 	vmov	r0, s0
 8012072:	a379      	add	r3, pc, #484	; (adr r3, 8012258 <__ieee754_rem_pio2+0x320>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	4629      	mov	r1, r5
 801207a:	f7ee facd 	bl	8000618 <__aeabi_dmul>
 801207e:	4b80      	ldr	r3, [pc, #512]	; (8012280 <__ieee754_rem_pio2+0x348>)
 8012080:	2200      	movs	r2, #0
 8012082:	f7ee f913 	bl	80002ac <__adddf3>
 8012086:	f7ee fd77 	bl	8000b78 <__aeabi_d2iz>
 801208a:	4683      	mov	fp, r0
 801208c:	f7ee fa5a 	bl	8000544 <__aeabi_i2d>
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	ec43 2b18 	vmov	d8, r2, r3
 8012098:	a367      	add	r3, pc, #412	; (adr r3, 8012238 <__ieee754_rem_pio2+0x300>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee fabb 	bl	8000618 <__aeabi_dmul>
 80120a2:	4602      	mov	r2, r0
 80120a4:	460b      	mov	r3, r1
 80120a6:	4620      	mov	r0, r4
 80120a8:	4629      	mov	r1, r5
 80120aa:	f7ee f8fd 	bl	80002a8 <__aeabi_dsub>
 80120ae:	a364      	add	r3, pc, #400	; (adr r3, 8012240 <__ieee754_rem_pio2+0x308>)
 80120b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b4:	4606      	mov	r6, r0
 80120b6:	460f      	mov	r7, r1
 80120b8:	ec51 0b18 	vmov	r0, r1, d8
 80120bc:	f7ee faac 	bl	8000618 <__aeabi_dmul>
 80120c0:	f1bb 0f1f 	cmp.w	fp, #31
 80120c4:	4604      	mov	r4, r0
 80120c6:	460d      	mov	r5, r1
 80120c8:	dc0d      	bgt.n	80120e6 <__ieee754_rem_pio2+0x1ae>
 80120ca:	4b6e      	ldr	r3, [pc, #440]	; (8012284 <__ieee754_rem_pio2+0x34c>)
 80120cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80120d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d4:	4543      	cmp	r3, r8
 80120d6:	d006      	beq.n	80120e6 <__ieee754_rem_pio2+0x1ae>
 80120d8:	4622      	mov	r2, r4
 80120da:	462b      	mov	r3, r5
 80120dc:	4630      	mov	r0, r6
 80120de:	4639      	mov	r1, r7
 80120e0:	f7ee f8e2 	bl	80002a8 <__aeabi_dsub>
 80120e4:	e00f      	b.n	8012106 <__ieee754_rem_pio2+0x1ce>
 80120e6:	462b      	mov	r3, r5
 80120e8:	4622      	mov	r2, r4
 80120ea:	4630      	mov	r0, r6
 80120ec:	4639      	mov	r1, r7
 80120ee:	f7ee f8db 	bl	80002a8 <__aeabi_dsub>
 80120f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80120f6:	9303      	str	r3, [sp, #12]
 80120f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012100:	f1b8 0f10 	cmp.w	r8, #16
 8012104:	dc02      	bgt.n	801210c <__ieee754_rem_pio2+0x1d4>
 8012106:	e9ca 0100 	strd	r0, r1, [sl]
 801210a:	e039      	b.n	8012180 <__ieee754_rem_pio2+0x248>
 801210c:	a34e      	add	r3, pc, #312	; (adr r3, 8012248 <__ieee754_rem_pio2+0x310>)
 801210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012112:	ec51 0b18 	vmov	r0, r1, d8
 8012116:	f7ee fa7f 	bl	8000618 <__aeabi_dmul>
 801211a:	4604      	mov	r4, r0
 801211c:	460d      	mov	r5, r1
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	4630      	mov	r0, r6
 8012124:	4639      	mov	r1, r7
 8012126:	f7ee f8bf 	bl	80002a8 <__aeabi_dsub>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4680      	mov	r8, r0
 8012130:	4689      	mov	r9, r1
 8012132:	4630      	mov	r0, r6
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee f8b7 	bl	80002a8 <__aeabi_dsub>
 801213a:	4622      	mov	r2, r4
 801213c:	462b      	mov	r3, r5
 801213e:	f7ee f8b3 	bl	80002a8 <__aeabi_dsub>
 8012142:	a343      	add	r3, pc, #268	; (adr r3, 8012250 <__ieee754_rem_pio2+0x318>)
 8012144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012148:	4604      	mov	r4, r0
 801214a:	460d      	mov	r5, r1
 801214c:	ec51 0b18 	vmov	r0, r1, d8
 8012150:	f7ee fa62 	bl	8000618 <__aeabi_dmul>
 8012154:	4622      	mov	r2, r4
 8012156:	462b      	mov	r3, r5
 8012158:	f7ee f8a6 	bl	80002a8 <__aeabi_dsub>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4604      	mov	r4, r0
 8012162:	460d      	mov	r5, r1
 8012164:	4640      	mov	r0, r8
 8012166:	4649      	mov	r1, r9
 8012168:	f7ee f89e 	bl	80002a8 <__aeabi_dsub>
 801216c:	9a03      	ldr	r2, [sp, #12]
 801216e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	2b31      	cmp	r3, #49	; 0x31
 8012176:	dc24      	bgt.n	80121c2 <__ieee754_rem_pio2+0x28a>
 8012178:	e9ca 0100 	strd	r0, r1, [sl]
 801217c:	4646      	mov	r6, r8
 801217e:	464f      	mov	r7, r9
 8012180:	e9da 8900 	ldrd	r8, r9, [sl]
 8012184:	4630      	mov	r0, r6
 8012186:	4642      	mov	r2, r8
 8012188:	464b      	mov	r3, r9
 801218a:	4639      	mov	r1, r7
 801218c:	f7ee f88c 	bl	80002a8 <__aeabi_dsub>
 8012190:	462b      	mov	r3, r5
 8012192:	4622      	mov	r2, r4
 8012194:	f7ee f888 	bl	80002a8 <__aeabi_dsub>
 8012198:	9b02      	ldr	r3, [sp, #8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80121a0:	f6bf af0a 	bge.w	8011fb8 <__ieee754_rem_pio2+0x80>
 80121a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80121a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80121ac:	f8ca 8000 	str.w	r8, [sl]
 80121b0:	f8ca 0008 	str.w	r0, [sl, #8]
 80121b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80121bc:	f1cb 0b00 	rsb	fp, fp, #0
 80121c0:	e6fa      	b.n	8011fb8 <__ieee754_rem_pio2+0x80>
 80121c2:	a327      	add	r3, pc, #156	; (adr r3, 8012260 <__ieee754_rem_pio2+0x328>)
 80121c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c8:	ec51 0b18 	vmov	r0, r1, d8
 80121cc:	f7ee fa24 	bl	8000618 <__aeabi_dmul>
 80121d0:	4604      	mov	r4, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	4640      	mov	r0, r8
 80121da:	4649      	mov	r1, r9
 80121dc:	f7ee f864 	bl	80002a8 <__aeabi_dsub>
 80121e0:	4602      	mov	r2, r0
 80121e2:	460b      	mov	r3, r1
 80121e4:	4606      	mov	r6, r0
 80121e6:	460f      	mov	r7, r1
 80121e8:	4640      	mov	r0, r8
 80121ea:	4649      	mov	r1, r9
 80121ec:	f7ee f85c 	bl	80002a8 <__aeabi_dsub>
 80121f0:	4622      	mov	r2, r4
 80121f2:	462b      	mov	r3, r5
 80121f4:	f7ee f858 	bl	80002a8 <__aeabi_dsub>
 80121f8:	a31b      	add	r3, pc, #108	; (adr r3, 8012268 <__ieee754_rem_pio2+0x330>)
 80121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	ec51 0b18 	vmov	r0, r1, d8
 8012206:	f7ee fa07 	bl	8000618 <__aeabi_dmul>
 801220a:	4622      	mov	r2, r4
 801220c:	462b      	mov	r3, r5
 801220e:	f7ee f84b 	bl	80002a8 <__aeabi_dsub>
 8012212:	4604      	mov	r4, r0
 8012214:	460d      	mov	r5, r1
 8012216:	e75f      	b.n	80120d8 <__ieee754_rem_pio2+0x1a0>
 8012218:	4b1b      	ldr	r3, [pc, #108]	; (8012288 <__ieee754_rem_pio2+0x350>)
 801221a:	4598      	cmp	r8, r3
 801221c:	dd36      	ble.n	801228c <__ieee754_rem_pio2+0x354>
 801221e:	ee10 2a10 	vmov	r2, s0
 8012222:	462b      	mov	r3, r5
 8012224:	4620      	mov	r0, r4
 8012226:	4629      	mov	r1, r5
 8012228:	f7ee f83e 	bl	80002a8 <__aeabi_dsub>
 801222c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012230:	e9ca 0100 	strd	r0, r1, [sl]
 8012234:	e694      	b.n	8011f60 <__ieee754_rem_pio2+0x28>
 8012236:	bf00      	nop
 8012238:	54400000 	.word	0x54400000
 801223c:	3ff921fb 	.word	0x3ff921fb
 8012240:	1a626331 	.word	0x1a626331
 8012244:	3dd0b461 	.word	0x3dd0b461
 8012248:	1a600000 	.word	0x1a600000
 801224c:	3dd0b461 	.word	0x3dd0b461
 8012250:	2e037073 	.word	0x2e037073
 8012254:	3ba3198a 	.word	0x3ba3198a
 8012258:	6dc9c883 	.word	0x6dc9c883
 801225c:	3fe45f30 	.word	0x3fe45f30
 8012260:	2e000000 	.word	0x2e000000
 8012264:	3ba3198a 	.word	0x3ba3198a
 8012268:	252049c1 	.word	0x252049c1
 801226c:	397b839a 	.word	0x397b839a
 8012270:	3fe921fb 	.word	0x3fe921fb
 8012274:	4002d97b 	.word	0x4002d97b
 8012278:	3ff921fb 	.word	0x3ff921fb
 801227c:	413921fb 	.word	0x413921fb
 8012280:	3fe00000 	.word	0x3fe00000
 8012284:	080138ec 	.word	0x080138ec
 8012288:	7fefffff 	.word	0x7fefffff
 801228c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012290:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012294:	ee10 0a10 	vmov	r0, s0
 8012298:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801229c:	ee10 6a10 	vmov	r6, s0
 80122a0:	460f      	mov	r7, r1
 80122a2:	f7ee fc69 	bl	8000b78 <__aeabi_d2iz>
 80122a6:	f7ee f94d 	bl	8000544 <__aeabi_i2d>
 80122aa:	4602      	mov	r2, r0
 80122ac:	460b      	mov	r3, r1
 80122ae:	4630      	mov	r0, r6
 80122b0:	4639      	mov	r1, r7
 80122b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80122b6:	f7ed fff7 	bl	80002a8 <__aeabi_dsub>
 80122ba:	4b22      	ldr	r3, [pc, #136]	; (8012344 <__ieee754_rem_pio2+0x40c>)
 80122bc:	2200      	movs	r2, #0
 80122be:	f7ee f9ab 	bl	8000618 <__aeabi_dmul>
 80122c2:	460f      	mov	r7, r1
 80122c4:	4606      	mov	r6, r0
 80122c6:	f7ee fc57 	bl	8000b78 <__aeabi_d2iz>
 80122ca:	f7ee f93b 	bl	8000544 <__aeabi_i2d>
 80122ce:	4602      	mov	r2, r0
 80122d0:	460b      	mov	r3, r1
 80122d2:	4630      	mov	r0, r6
 80122d4:	4639      	mov	r1, r7
 80122d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122da:	f7ed ffe5 	bl	80002a8 <__aeabi_dsub>
 80122de:	4b19      	ldr	r3, [pc, #100]	; (8012344 <__ieee754_rem_pio2+0x40c>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	f7ee f999 	bl	8000618 <__aeabi_dmul>
 80122e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80122ea:	ad04      	add	r5, sp, #16
 80122ec:	f04f 0803 	mov.w	r8, #3
 80122f0:	46a9      	mov	r9, r5
 80122f2:	2600      	movs	r6, #0
 80122f4:	2700      	movs	r7, #0
 80122f6:	4632      	mov	r2, r6
 80122f8:	463b      	mov	r3, r7
 80122fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80122fe:	46c3      	mov	fp, r8
 8012300:	3d08      	subs	r5, #8
 8012302:	f108 38ff 	add.w	r8, r8, #4294967295
 8012306:	f7ee fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 801230a:	2800      	cmp	r0, #0
 801230c:	d1f3      	bne.n	80122f6 <__ieee754_rem_pio2+0x3be>
 801230e:	4b0e      	ldr	r3, [pc, #56]	; (8012348 <__ieee754_rem_pio2+0x410>)
 8012310:	9301      	str	r3, [sp, #4]
 8012312:	2302      	movs	r3, #2
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	4622      	mov	r2, r4
 8012318:	465b      	mov	r3, fp
 801231a:	4651      	mov	r1, sl
 801231c:	4648      	mov	r0, r9
 801231e:	f000 f8df 	bl	80124e0 <__kernel_rem_pio2>
 8012322:	9b02      	ldr	r3, [sp, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	4683      	mov	fp, r0
 8012328:	f6bf ae46 	bge.w	8011fb8 <__ieee754_rem_pio2+0x80>
 801232c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012334:	f8ca 3004 	str.w	r3, [sl, #4]
 8012338:	f8da 300c 	ldr.w	r3, [sl, #12]
 801233c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012340:	e73a      	b.n	80121b8 <__ieee754_rem_pio2+0x280>
 8012342:	bf00      	nop
 8012344:	41700000 	.word	0x41700000
 8012348:	0801396c 	.word	0x0801396c
 801234c:	00000000 	.word	0x00000000

08012350 <__kernel_cos>:
 8012350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	ec57 6b10 	vmov	r6, r7, d0
 8012358:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801235c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012360:	ed8d 1b00 	vstr	d1, [sp]
 8012364:	da07      	bge.n	8012376 <__kernel_cos+0x26>
 8012366:	ee10 0a10 	vmov	r0, s0
 801236a:	4639      	mov	r1, r7
 801236c:	f7ee fc04 	bl	8000b78 <__aeabi_d2iz>
 8012370:	2800      	cmp	r0, #0
 8012372:	f000 8088 	beq.w	8012486 <__kernel_cos+0x136>
 8012376:	4632      	mov	r2, r6
 8012378:	463b      	mov	r3, r7
 801237a:	4630      	mov	r0, r6
 801237c:	4639      	mov	r1, r7
 801237e:	f7ee f94b 	bl	8000618 <__aeabi_dmul>
 8012382:	4b51      	ldr	r3, [pc, #324]	; (80124c8 <__kernel_cos+0x178>)
 8012384:	2200      	movs	r2, #0
 8012386:	4604      	mov	r4, r0
 8012388:	460d      	mov	r5, r1
 801238a:	f7ee f945 	bl	8000618 <__aeabi_dmul>
 801238e:	a340      	add	r3, pc, #256	; (adr r3, 8012490 <__kernel_cos+0x140>)
 8012390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012394:	4682      	mov	sl, r0
 8012396:	468b      	mov	fp, r1
 8012398:	4620      	mov	r0, r4
 801239a:	4629      	mov	r1, r5
 801239c:	f7ee f93c 	bl	8000618 <__aeabi_dmul>
 80123a0:	a33d      	add	r3, pc, #244	; (adr r3, 8012498 <__kernel_cos+0x148>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff81 	bl	80002ac <__adddf3>
 80123aa:	4622      	mov	r2, r4
 80123ac:	462b      	mov	r3, r5
 80123ae:	f7ee f933 	bl	8000618 <__aeabi_dmul>
 80123b2:	a33b      	add	r3, pc, #236	; (adr r3, 80124a0 <__kernel_cos+0x150>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	f7ed ff76 	bl	80002a8 <__aeabi_dsub>
 80123bc:	4622      	mov	r2, r4
 80123be:	462b      	mov	r3, r5
 80123c0:	f7ee f92a 	bl	8000618 <__aeabi_dmul>
 80123c4:	a338      	add	r3, pc, #224	; (adr r3, 80124a8 <__kernel_cos+0x158>)
 80123c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ca:	f7ed ff6f 	bl	80002ac <__adddf3>
 80123ce:	4622      	mov	r2, r4
 80123d0:	462b      	mov	r3, r5
 80123d2:	f7ee f921 	bl	8000618 <__aeabi_dmul>
 80123d6:	a336      	add	r3, pc, #216	; (adr r3, 80124b0 <__kernel_cos+0x160>)
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	f7ed ff64 	bl	80002a8 <__aeabi_dsub>
 80123e0:	4622      	mov	r2, r4
 80123e2:	462b      	mov	r3, r5
 80123e4:	f7ee f918 	bl	8000618 <__aeabi_dmul>
 80123e8:	a333      	add	r3, pc, #204	; (adr r3, 80124b8 <__kernel_cos+0x168>)
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	f7ed ff5d 	bl	80002ac <__adddf3>
 80123f2:	4622      	mov	r2, r4
 80123f4:	462b      	mov	r3, r5
 80123f6:	f7ee f90f 	bl	8000618 <__aeabi_dmul>
 80123fa:	4622      	mov	r2, r4
 80123fc:	462b      	mov	r3, r5
 80123fe:	f7ee f90b 	bl	8000618 <__aeabi_dmul>
 8012402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012406:	4604      	mov	r4, r0
 8012408:	460d      	mov	r5, r1
 801240a:	4630      	mov	r0, r6
 801240c:	4639      	mov	r1, r7
 801240e:	f7ee f903 	bl	8000618 <__aeabi_dmul>
 8012412:	460b      	mov	r3, r1
 8012414:	4602      	mov	r2, r0
 8012416:	4629      	mov	r1, r5
 8012418:	4620      	mov	r0, r4
 801241a:	f7ed ff45 	bl	80002a8 <__aeabi_dsub>
 801241e:	4b2b      	ldr	r3, [pc, #172]	; (80124cc <__kernel_cos+0x17c>)
 8012420:	4598      	cmp	r8, r3
 8012422:	4606      	mov	r6, r0
 8012424:	460f      	mov	r7, r1
 8012426:	dc10      	bgt.n	801244a <__kernel_cos+0xfa>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4650      	mov	r0, sl
 801242e:	4659      	mov	r1, fp
 8012430:	f7ed ff3a 	bl	80002a8 <__aeabi_dsub>
 8012434:	460b      	mov	r3, r1
 8012436:	4926      	ldr	r1, [pc, #152]	; (80124d0 <__kernel_cos+0x180>)
 8012438:	4602      	mov	r2, r0
 801243a:	2000      	movs	r0, #0
 801243c:	f7ed ff34 	bl	80002a8 <__aeabi_dsub>
 8012440:	ec41 0b10 	vmov	d0, r0, r1
 8012444:	b003      	add	sp, #12
 8012446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244a:	4b22      	ldr	r3, [pc, #136]	; (80124d4 <__kernel_cos+0x184>)
 801244c:	4920      	ldr	r1, [pc, #128]	; (80124d0 <__kernel_cos+0x180>)
 801244e:	4598      	cmp	r8, r3
 8012450:	bfcc      	ite	gt
 8012452:	4d21      	ldrgt	r5, [pc, #132]	; (80124d8 <__kernel_cos+0x188>)
 8012454:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012458:	2400      	movs	r4, #0
 801245a:	4622      	mov	r2, r4
 801245c:	462b      	mov	r3, r5
 801245e:	2000      	movs	r0, #0
 8012460:	f7ed ff22 	bl	80002a8 <__aeabi_dsub>
 8012464:	4622      	mov	r2, r4
 8012466:	4680      	mov	r8, r0
 8012468:	4689      	mov	r9, r1
 801246a:	462b      	mov	r3, r5
 801246c:	4650      	mov	r0, sl
 801246e:	4659      	mov	r1, fp
 8012470:	f7ed ff1a 	bl	80002a8 <__aeabi_dsub>
 8012474:	4632      	mov	r2, r6
 8012476:	463b      	mov	r3, r7
 8012478:	f7ed ff16 	bl	80002a8 <__aeabi_dsub>
 801247c:	4602      	mov	r2, r0
 801247e:	460b      	mov	r3, r1
 8012480:	4640      	mov	r0, r8
 8012482:	4649      	mov	r1, r9
 8012484:	e7da      	b.n	801243c <__kernel_cos+0xec>
 8012486:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80124c0 <__kernel_cos+0x170>
 801248a:	e7db      	b.n	8012444 <__kernel_cos+0xf4>
 801248c:	f3af 8000 	nop.w
 8012490:	be8838d4 	.word	0xbe8838d4
 8012494:	bda8fae9 	.word	0xbda8fae9
 8012498:	bdb4b1c4 	.word	0xbdb4b1c4
 801249c:	3e21ee9e 	.word	0x3e21ee9e
 80124a0:	809c52ad 	.word	0x809c52ad
 80124a4:	3e927e4f 	.word	0x3e927e4f
 80124a8:	19cb1590 	.word	0x19cb1590
 80124ac:	3efa01a0 	.word	0x3efa01a0
 80124b0:	16c15177 	.word	0x16c15177
 80124b4:	3f56c16c 	.word	0x3f56c16c
 80124b8:	5555554c 	.word	0x5555554c
 80124bc:	3fa55555 	.word	0x3fa55555
 80124c0:	00000000 	.word	0x00000000
 80124c4:	3ff00000 	.word	0x3ff00000
 80124c8:	3fe00000 	.word	0x3fe00000
 80124cc:	3fd33332 	.word	0x3fd33332
 80124d0:	3ff00000 	.word	0x3ff00000
 80124d4:	3fe90000 	.word	0x3fe90000
 80124d8:	3fd20000 	.word	0x3fd20000
 80124dc:	00000000 	.word	0x00000000

080124e0 <__kernel_rem_pio2>:
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	ed2d 8b02 	vpush	{d8}
 80124e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80124ec:	f112 0f14 	cmn.w	r2, #20
 80124f0:	9308      	str	r3, [sp, #32]
 80124f2:	9101      	str	r1, [sp, #4]
 80124f4:	4bc6      	ldr	r3, [pc, #792]	; (8012810 <__kernel_rem_pio2+0x330>)
 80124f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80124f8:	9009      	str	r0, [sp, #36]	; 0x24
 80124fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124fe:	9304      	str	r3, [sp, #16]
 8012500:	9b08      	ldr	r3, [sp, #32]
 8012502:	f103 33ff 	add.w	r3, r3, #4294967295
 8012506:	bfa8      	it	ge
 8012508:	1ed4      	subge	r4, r2, #3
 801250a:	9306      	str	r3, [sp, #24]
 801250c:	bfb2      	itee	lt
 801250e:	2400      	movlt	r4, #0
 8012510:	2318      	movge	r3, #24
 8012512:	fb94 f4f3 	sdivge	r4, r4, r3
 8012516:	f06f 0317 	mvn.w	r3, #23
 801251a:	fb04 3303 	mla	r3, r4, r3, r3
 801251e:	eb03 0a02 	add.w	sl, r3, r2
 8012522:	9b04      	ldr	r3, [sp, #16]
 8012524:	9a06      	ldr	r2, [sp, #24]
 8012526:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012800 <__kernel_rem_pio2+0x320>
 801252a:	eb03 0802 	add.w	r8, r3, r2
 801252e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012530:	1aa7      	subs	r7, r4, r2
 8012532:	ae20      	add	r6, sp, #128	; 0x80
 8012534:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012538:	2500      	movs	r5, #0
 801253a:	4545      	cmp	r5, r8
 801253c:	dd18      	ble.n	8012570 <__kernel_rem_pio2+0x90>
 801253e:	9b08      	ldr	r3, [sp, #32]
 8012540:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012544:	aa20      	add	r2, sp, #128	; 0x80
 8012546:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012800 <__kernel_rem_pio2+0x320>
 801254a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801254e:	f1c3 0301 	rsb	r3, r3, #1
 8012552:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012556:	9307      	str	r3, [sp, #28]
 8012558:	9b07      	ldr	r3, [sp, #28]
 801255a:	9a04      	ldr	r2, [sp, #16]
 801255c:	4443      	add	r3, r8
 801255e:	429a      	cmp	r2, r3
 8012560:	db2f      	blt.n	80125c2 <__kernel_rem_pio2+0xe2>
 8012562:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012566:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801256a:	462f      	mov	r7, r5
 801256c:	2600      	movs	r6, #0
 801256e:	e01b      	b.n	80125a8 <__kernel_rem_pio2+0xc8>
 8012570:	42ef      	cmn	r7, r5
 8012572:	d407      	bmi.n	8012584 <__kernel_rem_pio2+0xa4>
 8012574:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012578:	f7ed ffe4 	bl	8000544 <__aeabi_i2d>
 801257c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012580:	3501      	adds	r5, #1
 8012582:	e7da      	b.n	801253a <__kernel_rem_pio2+0x5a>
 8012584:	ec51 0b18 	vmov	r0, r1, d8
 8012588:	e7f8      	b.n	801257c <__kernel_rem_pio2+0x9c>
 801258a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801258e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012592:	f7ee f841 	bl	8000618 <__aeabi_dmul>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801259e:	f7ed fe85 	bl	80002ac <__adddf3>
 80125a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125a6:	3601      	adds	r6, #1
 80125a8:	9b06      	ldr	r3, [sp, #24]
 80125aa:	429e      	cmp	r6, r3
 80125ac:	f1a7 0708 	sub.w	r7, r7, #8
 80125b0:	ddeb      	ble.n	801258a <__kernel_rem_pio2+0xaa>
 80125b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125b6:	3508      	adds	r5, #8
 80125b8:	ecab 7b02 	vstmia	fp!, {d7}
 80125bc:	f108 0801 	add.w	r8, r8, #1
 80125c0:	e7ca      	b.n	8012558 <__kernel_rem_pio2+0x78>
 80125c2:	9b04      	ldr	r3, [sp, #16]
 80125c4:	aa0c      	add	r2, sp, #48	; 0x30
 80125c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80125cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80125ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125d2:	9c04      	ldr	r4, [sp, #16]
 80125d4:	930a      	str	r3, [sp, #40]	; 0x28
 80125d6:	ab98      	add	r3, sp, #608	; 0x260
 80125d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80125e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80125e4:	f8cd b008 	str.w	fp, [sp, #8]
 80125e8:	4625      	mov	r5, r4
 80125ea:	2d00      	cmp	r5, #0
 80125ec:	dc78      	bgt.n	80126e0 <__kernel_rem_pio2+0x200>
 80125ee:	ec47 6b10 	vmov	d0, r6, r7
 80125f2:	4650      	mov	r0, sl
 80125f4:	f000 fbfc 	bl	8012df0 <scalbn>
 80125f8:	ec57 6b10 	vmov	r6, r7, d0
 80125fc:	2200      	movs	r2, #0
 80125fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012602:	ee10 0a10 	vmov	r0, s0
 8012606:	4639      	mov	r1, r7
 8012608:	f7ee f806 	bl	8000618 <__aeabi_dmul>
 801260c:	ec41 0b10 	vmov	d0, r0, r1
 8012610:	f000 fb6e 	bl	8012cf0 <floor>
 8012614:	4b7f      	ldr	r3, [pc, #508]	; (8012814 <__kernel_rem_pio2+0x334>)
 8012616:	ec51 0b10 	vmov	r0, r1, d0
 801261a:	2200      	movs	r2, #0
 801261c:	f7ed fffc 	bl	8000618 <__aeabi_dmul>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	4630      	mov	r0, r6
 8012626:	4639      	mov	r1, r7
 8012628:	f7ed fe3e 	bl	80002a8 <__aeabi_dsub>
 801262c:	460f      	mov	r7, r1
 801262e:	4606      	mov	r6, r0
 8012630:	f7ee faa2 	bl	8000b78 <__aeabi_d2iz>
 8012634:	9007      	str	r0, [sp, #28]
 8012636:	f7ed ff85 	bl	8000544 <__aeabi_i2d>
 801263a:	4602      	mov	r2, r0
 801263c:	460b      	mov	r3, r1
 801263e:	4630      	mov	r0, r6
 8012640:	4639      	mov	r1, r7
 8012642:	f7ed fe31 	bl	80002a8 <__aeabi_dsub>
 8012646:	f1ba 0f00 	cmp.w	sl, #0
 801264a:	4606      	mov	r6, r0
 801264c:	460f      	mov	r7, r1
 801264e:	dd70      	ble.n	8012732 <__kernel_rem_pio2+0x252>
 8012650:	1e62      	subs	r2, r4, #1
 8012652:	ab0c      	add	r3, sp, #48	; 0x30
 8012654:	9d07      	ldr	r5, [sp, #28]
 8012656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801265a:	f1ca 0118 	rsb	r1, sl, #24
 801265e:	fa40 f301 	asr.w	r3, r0, r1
 8012662:	441d      	add	r5, r3
 8012664:	408b      	lsls	r3, r1
 8012666:	1ac0      	subs	r0, r0, r3
 8012668:	ab0c      	add	r3, sp, #48	; 0x30
 801266a:	9507      	str	r5, [sp, #28]
 801266c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012670:	f1ca 0317 	rsb	r3, sl, #23
 8012674:	fa40 f303 	asr.w	r3, r0, r3
 8012678:	9302      	str	r3, [sp, #8]
 801267a:	9b02      	ldr	r3, [sp, #8]
 801267c:	2b00      	cmp	r3, #0
 801267e:	dd66      	ble.n	801274e <__kernel_rem_pio2+0x26e>
 8012680:	9b07      	ldr	r3, [sp, #28]
 8012682:	2200      	movs	r2, #0
 8012684:	3301      	adds	r3, #1
 8012686:	9307      	str	r3, [sp, #28]
 8012688:	4615      	mov	r5, r2
 801268a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801268e:	4294      	cmp	r4, r2
 8012690:	f300 8099 	bgt.w	80127c6 <__kernel_rem_pio2+0x2e6>
 8012694:	f1ba 0f00 	cmp.w	sl, #0
 8012698:	dd07      	ble.n	80126aa <__kernel_rem_pio2+0x1ca>
 801269a:	f1ba 0f01 	cmp.w	sl, #1
 801269e:	f000 80a5 	beq.w	80127ec <__kernel_rem_pio2+0x30c>
 80126a2:	f1ba 0f02 	cmp.w	sl, #2
 80126a6:	f000 80c1 	beq.w	801282c <__kernel_rem_pio2+0x34c>
 80126aa:	9b02      	ldr	r3, [sp, #8]
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d14e      	bne.n	801274e <__kernel_rem_pio2+0x26e>
 80126b0:	4632      	mov	r2, r6
 80126b2:	463b      	mov	r3, r7
 80126b4:	4958      	ldr	r1, [pc, #352]	; (8012818 <__kernel_rem_pio2+0x338>)
 80126b6:	2000      	movs	r0, #0
 80126b8:	f7ed fdf6 	bl	80002a8 <__aeabi_dsub>
 80126bc:	4606      	mov	r6, r0
 80126be:	460f      	mov	r7, r1
 80126c0:	2d00      	cmp	r5, #0
 80126c2:	d044      	beq.n	801274e <__kernel_rem_pio2+0x26e>
 80126c4:	4650      	mov	r0, sl
 80126c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012808 <__kernel_rem_pio2+0x328>
 80126ca:	f000 fb91 	bl	8012df0 <scalbn>
 80126ce:	4630      	mov	r0, r6
 80126d0:	4639      	mov	r1, r7
 80126d2:	ec53 2b10 	vmov	r2, r3, d0
 80126d6:	f7ed fde7 	bl	80002a8 <__aeabi_dsub>
 80126da:	4606      	mov	r6, r0
 80126dc:	460f      	mov	r7, r1
 80126de:	e036      	b.n	801274e <__kernel_rem_pio2+0x26e>
 80126e0:	4b4e      	ldr	r3, [pc, #312]	; (801281c <__kernel_rem_pio2+0x33c>)
 80126e2:	2200      	movs	r2, #0
 80126e4:	4630      	mov	r0, r6
 80126e6:	4639      	mov	r1, r7
 80126e8:	f7ed ff96 	bl	8000618 <__aeabi_dmul>
 80126ec:	f7ee fa44 	bl	8000b78 <__aeabi_d2iz>
 80126f0:	f7ed ff28 	bl	8000544 <__aeabi_i2d>
 80126f4:	4b4a      	ldr	r3, [pc, #296]	; (8012820 <__kernel_rem_pio2+0x340>)
 80126f6:	2200      	movs	r2, #0
 80126f8:	4680      	mov	r8, r0
 80126fa:	4689      	mov	r9, r1
 80126fc:	f7ed ff8c 	bl	8000618 <__aeabi_dmul>
 8012700:	4602      	mov	r2, r0
 8012702:	460b      	mov	r3, r1
 8012704:	4630      	mov	r0, r6
 8012706:	4639      	mov	r1, r7
 8012708:	f7ed fdce 	bl	80002a8 <__aeabi_dsub>
 801270c:	f7ee fa34 	bl	8000b78 <__aeabi_d2iz>
 8012710:	9b02      	ldr	r3, [sp, #8]
 8012712:	f843 0b04 	str.w	r0, [r3], #4
 8012716:	3d01      	subs	r5, #1
 8012718:	9302      	str	r3, [sp, #8]
 801271a:	ab70      	add	r3, sp, #448	; 0x1c0
 801271c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012724:	4640      	mov	r0, r8
 8012726:	4649      	mov	r1, r9
 8012728:	f7ed fdc0 	bl	80002ac <__adddf3>
 801272c:	4606      	mov	r6, r0
 801272e:	460f      	mov	r7, r1
 8012730:	e75b      	b.n	80125ea <__kernel_rem_pio2+0x10a>
 8012732:	d105      	bne.n	8012740 <__kernel_rem_pio2+0x260>
 8012734:	1e63      	subs	r3, r4, #1
 8012736:	aa0c      	add	r2, sp, #48	; 0x30
 8012738:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801273c:	15c3      	asrs	r3, r0, #23
 801273e:	e79b      	b.n	8012678 <__kernel_rem_pio2+0x198>
 8012740:	4b38      	ldr	r3, [pc, #224]	; (8012824 <__kernel_rem_pio2+0x344>)
 8012742:	2200      	movs	r2, #0
 8012744:	f7ee f9ee 	bl	8000b24 <__aeabi_dcmpge>
 8012748:	2800      	cmp	r0, #0
 801274a:	d139      	bne.n	80127c0 <__kernel_rem_pio2+0x2e0>
 801274c:	9002      	str	r0, [sp, #8]
 801274e:	2200      	movs	r2, #0
 8012750:	2300      	movs	r3, #0
 8012752:	4630      	mov	r0, r6
 8012754:	4639      	mov	r1, r7
 8012756:	f7ee f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 801275a:	2800      	cmp	r0, #0
 801275c:	f000 80b4 	beq.w	80128c8 <__kernel_rem_pio2+0x3e8>
 8012760:	f104 3bff 	add.w	fp, r4, #4294967295
 8012764:	465b      	mov	r3, fp
 8012766:	2200      	movs	r2, #0
 8012768:	9904      	ldr	r1, [sp, #16]
 801276a:	428b      	cmp	r3, r1
 801276c:	da65      	bge.n	801283a <__kernel_rem_pio2+0x35a>
 801276e:	2a00      	cmp	r2, #0
 8012770:	d07b      	beq.n	801286a <__kernel_rem_pio2+0x38a>
 8012772:	ab0c      	add	r3, sp, #48	; 0x30
 8012774:	f1aa 0a18 	sub.w	sl, sl, #24
 8012778:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801277c:	2b00      	cmp	r3, #0
 801277e:	f000 80a0 	beq.w	80128c2 <__kernel_rem_pio2+0x3e2>
 8012782:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012808 <__kernel_rem_pio2+0x328>
 8012786:	4650      	mov	r0, sl
 8012788:	f000 fb32 	bl	8012df0 <scalbn>
 801278c:	4f23      	ldr	r7, [pc, #140]	; (801281c <__kernel_rem_pio2+0x33c>)
 801278e:	ec55 4b10 	vmov	r4, r5, d0
 8012792:	46d8      	mov	r8, fp
 8012794:	2600      	movs	r6, #0
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	f280 80cf 	bge.w	801293c <__kernel_rem_pio2+0x45c>
 801279e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012800 <__kernel_rem_pio2+0x320>
 80127a2:	465f      	mov	r7, fp
 80127a4:	f04f 0800 	mov.w	r8, #0
 80127a8:	2f00      	cmp	r7, #0
 80127aa:	f2c0 80fd 	blt.w	80129a8 <__kernel_rem_pio2+0x4c8>
 80127ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80127b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012828 <__kernel_rem_pio2+0x348>
 80127b4:	ec55 4b18 	vmov	r4, r5, d8
 80127b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80127bc:	2600      	movs	r6, #0
 80127be:	e0e5      	b.n	801298c <__kernel_rem_pio2+0x4ac>
 80127c0:	2302      	movs	r3, #2
 80127c2:	9302      	str	r3, [sp, #8]
 80127c4:	e75c      	b.n	8012680 <__kernel_rem_pio2+0x1a0>
 80127c6:	f8db 3000 	ldr.w	r3, [fp]
 80127ca:	b955      	cbnz	r5, 80127e2 <__kernel_rem_pio2+0x302>
 80127cc:	b123      	cbz	r3, 80127d8 <__kernel_rem_pio2+0x2f8>
 80127ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80127d2:	f8cb 3000 	str.w	r3, [fp]
 80127d6:	2301      	movs	r3, #1
 80127d8:	3201      	adds	r2, #1
 80127da:	f10b 0b04 	add.w	fp, fp, #4
 80127de:	461d      	mov	r5, r3
 80127e0:	e755      	b.n	801268e <__kernel_rem_pio2+0x1ae>
 80127e2:	1acb      	subs	r3, r1, r3
 80127e4:	f8cb 3000 	str.w	r3, [fp]
 80127e8:	462b      	mov	r3, r5
 80127ea:	e7f5      	b.n	80127d8 <__kernel_rem_pio2+0x2f8>
 80127ec:	1e62      	subs	r2, r4, #1
 80127ee:	ab0c      	add	r3, sp, #48	; 0x30
 80127f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80127f8:	a90c      	add	r1, sp, #48	; 0x30
 80127fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80127fe:	e754      	b.n	80126aa <__kernel_rem_pio2+0x1ca>
	...
 801280c:	3ff00000 	.word	0x3ff00000
 8012810:	08013ab8 	.word	0x08013ab8
 8012814:	40200000 	.word	0x40200000
 8012818:	3ff00000 	.word	0x3ff00000
 801281c:	3e700000 	.word	0x3e700000
 8012820:	41700000 	.word	0x41700000
 8012824:	3fe00000 	.word	0x3fe00000
 8012828:	08013a78 	.word	0x08013a78
 801282c:	1e62      	subs	r2, r4, #1
 801282e:	ab0c      	add	r3, sp, #48	; 0x30
 8012830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012834:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012838:	e7de      	b.n	80127f8 <__kernel_rem_pio2+0x318>
 801283a:	a90c      	add	r1, sp, #48	; 0x30
 801283c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012840:	3b01      	subs	r3, #1
 8012842:	430a      	orrs	r2, r1
 8012844:	e790      	b.n	8012768 <__kernel_rem_pio2+0x288>
 8012846:	3301      	adds	r3, #1
 8012848:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801284c:	2900      	cmp	r1, #0
 801284e:	d0fa      	beq.n	8012846 <__kernel_rem_pio2+0x366>
 8012850:	9a08      	ldr	r2, [sp, #32]
 8012852:	18e3      	adds	r3, r4, r3
 8012854:	18a6      	adds	r6, r4, r2
 8012856:	aa20      	add	r2, sp, #128	; 0x80
 8012858:	1c65      	adds	r5, r4, #1
 801285a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801285e:	9302      	str	r3, [sp, #8]
 8012860:	9b02      	ldr	r3, [sp, #8]
 8012862:	42ab      	cmp	r3, r5
 8012864:	da04      	bge.n	8012870 <__kernel_rem_pio2+0x390>
 8012866:	461c      	mov	r4, r3
 8012868:	e6b5      	b.n	80125d6 <__kernel_rem_pio2+0xf6>
 801286a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801286c:	2301      	movs	r3, #1
 801286e:	e7eb      	b.n	8012848 <__kernel_rem_pio2+0x368>
 8012870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012876:	f7ed fe65 	bl	8000544 <__aeabi_i2d>
 801287a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801287e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012880:	46b3      	mov	fp, r6
 8012882:	461c      	mov	r4, r3
 8012884:	2700      	movs	r7, #0
 8012886:	f04f 0800 	mov.w	r8, #0
 801288a:	f04f 0900 	mov.w	r9, #0
 801288e:	9b06      	ldr	r3, [sp, #24]
 8012890:	429f      	cmp	r7, r3
 8012892:	dd06      	ble.n	80128a2 <__kernel_rem_pio2+0x3c2>
 8012894:	ab70      	add	r3, sp, #448	; 0x1c0
 8012896:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801289a:	e9c3 8900 	strd	r8, r9, [r3]
 801289e:	3501      	adds	r5, #1
 80128a0:	e7de      	b.n	8012860 <__kernel_rem_pio2+0x380>
 80128a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80128a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80128aa:	f7ed feb5 	bl	8000618 <__aeabi_dmul>
 80128ae:	4602      	mov	r2, r0
 80128b0:	460b      	mov	r3, r1
 80128b2:	4640      	mov	r0, r8
 80128b4:	4649      	mov	r1, r9
 80128b6:	f7ed fcf9 	bl	80002ac <__adddf3>
 80128ba:	3701      	adds	r7, #1
 80128bc:	4680      	mov	r8, r0
 80128be:	4689      	mov	r9, r1
 80128c0:	e7e5      	b.n	801288e <__kernel_rem_pio2+0x3ae>
 80128c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128c6:	e754      	b.n	8012772 <__kernel_rem_pio2+0x292>
 80128c8:	ec47 6b10 	vmov	d0, r6, r7
 80128cc:	f1ca 0000 	rsb	r0, sl, #0
 80128d0:	f000 fa8e 	bl	8012df0 <scalbn>
 80128d4:	ec57 6b10 	vmov	r6, r7, d0
 80128d8:	4b9f      	ldr	r3, [pc, #636]	; (8012b58 <__kernel_rem_pio2+0x678>)
 80128da:	ee10 0a10 	vmov	r0, s0
 80128de:	2200      	movs	r2, #0
 80128e0:	4639      	mov	r1, r7
 80128e2:	f7ee f91f 	bl	8000b24 <__aeabi_dcmpge>
 80128e6:	b300      	cbz	r0, 801292a <__kernel_rem_pio2+0x44a>
 80128e8:	4b9c      	ldr	r3, [pc, #624]	; (8012b5c <__kernel_rem_pio2+0x67c>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ed fe92 	bl	8000618 <__aeabi_dmul>
 80128f4:	f7ee f940 	bl	8000b78 <__aeabi_d2iz>
 80128f8:	4605      	mov	r5, r0
 80128fa:	f7ed fe23 	bl	8000544 <__aeabi_i2d>
 80128fe:	4b96      	ldr	r3, [pc, #600]	; (8012b58 <__kernel_rem_pio2+0x678>)
 8012900:	2200      	movs	r2, #0
 8012902:	f7ed fe89 	bl	8000618 <__aeabi_dmul>
 8012906:	460b      	mov	r3, r1
 8012908:	4602      	mov	r2, r0
 801290a:	4639      	mov	r1, r7
 801290c:	4630      	mov	r0, r6
 801290e:	f7ed fccb 	bl	80002a8 <__aeabi_dsub>
 8012912:	f7ee f931 	bl	8000b78 <__aeabi_d2iz>
 8012916:	f104 0b01 	add.w	fp, r4, #1
 801291a:	ab0c      	add	r3, sp, #48	; 0x30
 801291c:	f10a 0a18 	add.w	sl, sl, #24
 8012920:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012924:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8012928:	e72b      	b.n	8012782 <__kernel_rem_pio2+0x2a2>
 801292a:	4630      	mov	r0, r6
 801292c:	4639      	mov	r1, r7
 801292e:	f7ee f923 	bl	8000b78 <__aeabi_d2iz>
 8012932:	ab0c      	add	r3, sp, #48	; 0x30
 8012934:	46a3      	mov	fp, r4
 8012936:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801293a:	e722      	b.n	8012782 <__kernel_rem_pio2+0x2a2>
 801293c:	ab70      	add	r3, sp, #448	; 0x1c0
 801293e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8012942:	ab0c      	add	r3, sp, #48	; 0x30
 8012944:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012948:	f7ed fdfc 	bl	8000544 <__aeabi_i2d>
 801294c:	4622      	mov	r2, r4
 801294e:	462b      	mov	r3, r5
 8012950:	f7ed fe62 	bl	8000618 <__aeabi_dmul>
 8012954:	4632      	mov	r2, r6
 8012956:	e9c9 0100 	strd	r0, r1, [r9]
 801295a:	463b      	mov	r3, r7
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	f7ed fe5a 	bl	8000618 <__aeabi_dmul>
 8012964:	f108 38ff 	add.w	r8, r8, #4294967295
 8012968:	4604      	mov	r4, r0
 801296a:	460d      	mov	r5, r1
 801296c:	e713      	b.n	8012796 <__kernel_rem_pio2+0x2b6>
 801296e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012972:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012976:	f7ed fe4f 	bl	8000618 <__aeabi_dmul>
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ed fc93 	bl	80002ac <__adddf3>
 8012986:	3601      	adds	r6, #1
 8012988:	4604      	mov	r4, r0
 801298a:	460d      	mov	r5, r1
 801298c:	9b04      	ldr	r3, [sp, #16]
 801298e:	429e      	cmp	r6, r3
 8012990:	dc01      	bgt.n	8012996 <__kernel_rem_pio2+0x4b6>
 8012992:	45b0      	cmp	r8, r6
 8012994:	daeb      	bge.n	801296e <__kernel_rem_pio2+0x48e>
 8012996:	ab48      	add	r3, sp, #288	; 0x120
 8012998:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801299c:	e9c3 4500 	strd	r4, r5, [r3]
 80129a0:	3f01      	subs	r7, #1
 80129a2:	f108 0801 	add.w	r8, r8, #1
 80129a6:	e6ff      	b.n	80127a8 <__kernel_rem_pio2+0x2c8>
 80129a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80129aa:	2b02      	cmp	r3, #2
 80129ac:	dc0b      	bgt.n	80129c6 <__kernel_rem_pio2+0x4e6>
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dc6e      	bgt.n	8012a90 <__kernel_rem_pio2+0x5b0>
 80129b2:	d045      	beq.n	8012a40 <__kernel_rem_pio2+0x560>
 80129b4:	9b07      	ldr	r3, [sp, #28]
 80129b6:	f003 0007 	and.w	r0, r3, #7
 80129ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80129be:	ecbd 8b02 	vpop	{d8}
 80129c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80129c8:	2b03      	cmp	r3, #3
 80129ca:	d1f3      	bne.n	80129b4 <__kernel_rem_pio2+0x4d4>
 80129cc:	ab48      	add	r3, sp, #288	; 0x120
 80129ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80129d2:	46d0      	mov	r8, sl
 80129d4:	46d9      	mov	r9, fp
 80129d6:	f1b9 0f00 	cmp.w	r9, #0
 80129da:	f1a8 0808 	sub.w	r8, r8, #8
 80129de:	dc64      	bgt.n	8012aaa <__kernel_rem_pio2+0x5ca>
 80129e0:	465c      	mov	r4, fp
 80129e2:	2c01      	cmp	r4, #1
 80129e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80129e8:	dc7e      	bgt.n	8012ae8 <__kernel_rem_pio2+0x608>
 80129ea:	2000      	movs	r0, #0
 80129ec:	2100      	movs	r1, #0
 80129ee:	f1bb 0f01 	cmp.w	fp, #1
 80129f2:	f300 8097 	bgt.w	8012b24 <__kernel_rem_pio2+0x644>
 80129f6:	9b02      	ldr	r3, [sp, #8]
 80129f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80129fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f040 8099 	bne.w	8012b38 <__kernel_rem_pio2+0x658>
 8012a06:	9b01      	ldr	r3, [sp, #4]
 8012a08:	e9c3 5600 	strd	r5, r6, [r3]
 8012a0c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012a10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012a14:	e7ce      	b.n	80129b4 <__kernel_rem_pio2+0x4d4>
 8012a16:	ab48      	add	r3, sp, #288	; 0x120
 8012a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	f7ed fc44 	bl	80002ac <__adddf3>
 8012a24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012a28:	f1bb 0f00 	cmp.w	fp, #0
 8012a2c:	daf3      	bge.n	8012a16 <__kernel_rem_pio2+0x536>
 8012a2e:	9b02      	ldr	r3, [sp, #8]
 8012a30:	b113      	cbz	r3, 8012a38 <__kernel_rem_pio2+0x558>
 8012a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a36:	4619      	mov	r1, r3
 8012a38:	9b01      	ldr	r3, [sp, #4]
 8012a3a:	e9c3 0100 	strd	r0, r1, [r3]
 8012a3e:	e7b9      	b.n	80129b4 <__kernel_rem_pio2+0x4d4>
 8012a40:	2000      	movs	r0, #0
 8012a42:	2100      	movs	r1, #0
 8012a44:	e7f0      	b.n	8012a28 <__kernel_rem_pio2+0x548>
 8012a46:	ab48      	add	r3, sp, #288	; 0x120
 8012a48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a50:	f7ed fc2c 	bl	80002ac <__adddf3>
 8012a54:	3c01      	subs	r4, #1
 8012a56:	2c00      	cmp	r4, #0
 8012a58:	daf5      	bge.n	8012a46 <__kernel_rem_pio2+0x566>
 8012a5a:	9b02      	ldr	r3, [sp, #8]
 8012a5c:	b1e3      	cbz	r3, 8012a98 <__kernel_rem_pio2+0x5b8>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a64:	9c01      	ldr	r4, [sp, #4]
 8012a66:	e9c4 2300 	strd	r2, r3, [r4]
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012a72:	f7ed fc19 	bl	80002a8 <__aeabi_dsub>
 8012a76:	ad4a      	add	r5, sp, #296	; 0x128
 8012a78:	2401      	movs	r4, #1
 8012a7a:	45a3      	cmp	fp, r4
 8012a7c:	da0f      	bge.n	8012a9e <__kernel_rem_pio2+0x5be>
 8012a7e:	9b02      	ldr	r3, [sp, #8]
 8012a80:	b113      	cbz	r3, 8012a88 <__kernel_rem_pio2+0x5a8>
 8012a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a86:	4619      	mov	r1, r3
 8012a88:	9b01      	ldr	r3, [sp, #4]
 8012a8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012a8e:	e791      	b.n	80129b4 <__kernel_rem_pio2+0x4d4>
 8012a90:	465c      	mov	r4, fp
 8012a92:	2000      	movs	r0, #0
 8012a94:	2100      	movs	r1, #0
 8012a96:	e7de      	b.n	8012a56 <__kernel_rem_pio2+0x576>
 8012a98:	4602      	mov	r2, r0
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	e7e2      	b.n	8012a64 <__kernel_rem_pio2+0x584>
 8012a9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012aa2:	f7ed fc03 	bl	80002ac <__adddf3>
 8012aa6:	3401      	adds	r4, #1
 8012aa8:	e7e7      	b.n	8012a7a <__kernel_rem_pio2+0x59a>
 8012aaa:	e9d8 4500 	ldrd	r4, r5, [r8]
 8012aae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7ed fbf7 	bl	80002ac <__adddf3>
 8012abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f7ed fbed 	bl	80002a8 <__aeabi_dsub>
 8012ace:	4632      	mov	r2, r6
 8012ad0:	463b      	mov	r3, r7
 8012ad2:	f7ed fbeb 	bl	80002ac <__adddf3>
 8012ad6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012ada:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8012ade:	ed88 7b00 	vstr	d7, [r8]
 8012ae2:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ae6:	e776      	b.n	80129d6 <__kernel_rem_pio2+0x4f6>
 8012ae8:	e9da 8900 	ldrd	r8, r9, [sl]
 8012aec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012af0:	4640      	mov	r0, r8
 8012af2:	4632      	mov	r2, r6
 8012af4:	463b      	mov	r3, r7
 8012af6:	4649      	mov	r1, r9
 8012af8:	f7ed fbd8 	bl	80002ac <__adddf3>
 8012afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	4640      	mov	r0, r8
 8012b06:	4649      	mov	r1, r9
 8012b08:	f7ed fbce 	bl	80002a8 <__aeabi_dsub>
 8012b0c:	4632      	mov	r2, r6
 8012b0e:	463b      	mov	r3, r7
 8012b10:	f7ed fbcc 	bl	80002ac <__adddf3>
 8012b14:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012b18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b1c:	ed8a 7b00 	vstr	d7, [sl]
 8012b20:	3c01      	subs	r4, #1
 8012b22:	e75e      	b.n	80129e2 <__kernel_rem_pio2+0x502>
 8012b24:	ab48      	add	r3, sp, #288	; 0x120
 8012b26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2e:	f7ed fbbd 	bl	80002ac <__adddf3>
 8012b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b36:	e75a      	b.n	80129ee <__kernel_rem_pio2+0x50e>
 8012b38:	9b01      	ldr	r3, [sp, #4]
 8012b3a:	9a01      	ldr	r2, [sp, #4]
 8012b3c:	601d      	str	r5, [r3, #0]
 8012b3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012b42:	605c      	str	r4, [r3, #4]
 8012b44:	609f      	str	r7, [r3, #8]
 8012b46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012b4a:	60d3      	str	r3, [r2, #12]
 8012b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b50:	6110      	str	r0, [r2, #16]
 8012b52:	6153      	str	r3, [r2, #20]
 8012b54:	e72e      	b.n	80129b4 <__kernel_rem_pio2+0x4d4>
 8012b56:	bf00      	nop
 8012b58:	41700000 	.word	0x41700000
 8012b5c:	3e700000 	.word	0x3e700000

08012b60 <__kernel_sin>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	ed2d 8b04 	vpush	{d8-d9}
 8012b68:	eeb0 8a41 	vmov.f32	s16, s2
 8012b6c:	eef0 8a61 	vmov.f32	s17, s3
 8012b70:	ec55 4b10 	vmov	r4, r5, d0
 8012b74:	b083      	sub	sp, #12
 8012b76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012b7e:	9001      	str	r0, [sp, #4]
 8012b80:	da06      	bge.n	8012b90 <__kernel_sin+0x30>
 8012b82:	ee10 0a10 	vmov	r0, s0
 8012b86:	4629      	mov	r1, r5
 8012b88:	f7ed fff6 	bl	8000b78 <__aeabi_d2iz>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d051      	beq.n	8012c34 <__kernel_sin+0xd4>
 8012b90:	4622      	mov	r2, r4
 8012b92:	462b      	mov	r3, r5
 8012b94:	4620      	mov	r0, r4
 8012b96:	4629      	mov	r1, r5
 8012b98:	f7ed fd3e 	bl	8000618 <__aeabi_dmul>
 8012b9c:	4682      	mov	sl, r0
 8012b9e:	468b      	mov	fp, r1
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	4629      	mov	r1, r5
 8012ba8:	f7ed fd36 	bl	8000618 <__aeabi_dmul>
 8012bac:	a341      	add	r3, pc, #260	; (adr r3, 8012cb4 <__kernel_sin+0x154>)
 8012bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb2:	4680      	mov	r8, r0
 8012bb4:	4689      	mov	r9, r1
 8012bb6:	4650      	mov	r0, sl
 8012bb8:	4659      	mov	r1, fp
 8012bba:	f7ed fd2d 	bl	8000618 <__aeabi_dmul>
 8012bbe:	a33f      	add	r3, pc, #252	; (adr r3, 8012cbc <__kernel_sin+0x15c>)
 8012bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc4:	f7ed fb70 	bl	80002a8 <__aeabi_dsub>
 8012bc8:	4652      	mov	r2, sl
 8012bca:	465b      	mov	r3, fp
 8012bcc:	f7ed fd24 	bl	8000618 <__aeabi_dmul>
 8012bd0:	a33c      	add	r3, pc, #240	; (adr r3, 8012cc4 <__kernel_sin+0x164>)
 8012bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd6:	f7ed fb69 	bl	80002ac <__adddf3>
 8012bda:	4652      	mov	r2, sl
 8012bdc:	465b      	mov	r3, fp
 8012bde:	f7ed fd1b 	bl	8000618 <__aeabi_dmul>
 8012be2:	a33a      	add	r3, pc, #232	; (adr r3, 8012ccc <__kernel_sin+0x16c>)
 8012be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be8:	f7ed fb5e 	bl	80002a8 <__aeabi_dsub>
 8012bec:	4652      	mov	r2, sl
 8012bee:	465b      	mov	r3, fp
 8012bf0:	f7ed fd12 	bl	8000618 <__aeabi_dmul>
 8012bf4:	a337      	add	r3, pc, #220	; (adr r3, 8012cd4 <__kernel_sin+0x174>)
 8012bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfa:	f7ed fb57 	bl	80002ac <__adddf3>
 8012bfe:	9b01      	ldr	r3, [sp, #4]
 8012c00:	4606      	mov	r6, r0
 8012c02:	460f      	mov	r7, r1
 8012c04:	b9eb      	cbnz	r3, 8012c42 <__kernel_sin+0xe2>
 8012c06:	4602      	mov	r2, r0
 8012c08:	460b      	mov	r3, r1
 8012c0a:	4650      	mov	r0, sl
 8012c0c:	4659      	mov	r1, fp
 8012c0e:	f7ed fd03 	bl	8000618 <__aeabi_dmul>
 8012c12:	a325      	add	r3, pc, #148	; (adr r3, 8012ca8 <__kernel_sin+0x148>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	f7ed fb46 	bl	80002a8 <__aeabi_dsub>
 8012c1c:	4642      	mov	r2, r8
 8012c1e:	464b      	mov	r3, r9
 8012c20:	f7ed fcfa 	bl	8000618 <__aeabi_dmul>
 8012c24:	4602      	mov	r2, r0
 8012c26:	460b      	mov	r3, r1
 8012c28:	4620      	mov	r0, r4
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	f7ed fb3e 	bl	80002ac <__adddf3>
 8012c30:	4604      	mov	r4, r0
 8012c32:	460d      	mov	r5, r1
 8012c34:	ec45 4b10 	vmov	d0, r4, r5
 8012c38:	b003      	add	sp, #12
 8012c3a:	ecbd 8b04 	vpop	{d8-d9}
 8012c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c42:	4b1b      	ldr	r3, [pc, #108]	; (8012cb0 <__kernel_sin+0x150>)
 8012c44:	ec51 0b18 	vmov	r0, r1, d8
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f7ed fce5 	bl	8000618 <__aeabi_dmul>
 8012c4e:	4632      	mov	r2, r6
 8012c50:	ec41 0b19 	vmov	d9, r0, r1
 8012c54:	463b      	mov	r3, r7
 8012c56:	4640      	mov	r0, r8
 8012c58:	4649      	mov	r1, r9
 8012c5a:	f7ed fcdd 	bl	8000618 <__aeabi_dmul>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	460b      	mov	r3, r1
 8012c62:	ec51 0b19 	vmov	r0, r1, d9
 8012c66:	f7ed fb1f 	bl	80002a8 <__aeabi_dsub>
 8012c6a:	4652      	mov	r2, sl
 8012c6c:	465b      	mov	r3, fp
 8012c6e:	f7ed fcd3 	bl	8000618 <__aeabi_dmul>
 8012c72:	ec53 2b18 	vmov	r2, r3, d8
 8012c76:	f7ed fb17 	bl	80002a8 <__aeabi_dsub>
 8012c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8012ca8 <__kernel_sin+0x148>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	4606      	mov	r6, r0
 8012c82:	460f      	mov	r7, r1
 8012c84:	4640      	mov	r0, r8
 8012c86:	4649      	mov	r1, r9
 8012c88:	f7ed fcc6 	bl	8000618 <__aeabi_dmul>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ed fb0a 	bl	80002ac <__adddf3>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	460b      	mov	r3, r1
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	f7ed fb02 	bl	80002a8 <__aeabi_dsub>
 8012ca4:	e7c4      	b.n	8012c30 <__kernel_sin+0xd0>
 8012ca6:	bf00      	nop
 8012ca8:	55555549 	.word	0x55555549
 8012cac:	3fc55555 	.word	0x3fc55555
 8012cb0:	3fe00000 	.word	0x3fe00000
 8012cb4:	5acfd57c 	.word	0x5acfd57c
 8012cb8:	3de5d93a 	.word	0x3de5d93a
 8012cbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8012cc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8012cc4:	57b1fe7d 	.word	0x57b1fe7d
 8012cc8:	3ec71de3 	.word	0x3ec71de3
 8012ccc:	19c161d5 	.word	0x19c161d5
 8012cd0:	3f2a01a0 	.word	0x3f2a01a0
 8012cd4:	1110f8a6 	.word	0x1110f8a6
 8012cd8:	3f811111 	.word	0x3f811111

08012cdc <fabs>:
 8012cdc:	ec51 0b10 	vmov	r0, r1, d0
 8012ce0:	ee10 2a10 	vmov	r2, s0
 8012ce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ce8:	ec43 2b10 	vmov	d0, r2, r3
 8012cec:	4770      	bx	lr
	...

08012cf0 <floor>:
 8012cf0:	ec51 0b10 	vmov	r0, r1, d0
 8012cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012cfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012d00:	2e13      	cmp	r6, #19
 8012d02:	ee10 5a10 	vmov	r5, s0
 8012d06:	ee10 8a10 	vmov	r8, s0
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	dc32      	bgt.n	8012d74 <floor+0x84>
 8012d0e:	2e00      	cmp	r6, #0
 8012d10:	da14      	bge.n	8012d3c <floor+0x4c>
 8012d12:	a333      	add	r3, pc, #204	; (adr r3, 8012de0 <floor+0xf0>)
 8012d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d18:	f7ed fac8 	bl	80002ac <__adddf3>
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f7ed ff0a 	bl	8000b38 <__aeabi_dcmpgt>
 8012d24:	b138      	cbz	r0, 8012d36 <floor+0x46>
 8012d26:	2c00      	cmp	r4, #0
 8012d28:	da57      	bge.n	8012dda <floor+0xea>
 8012d2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012d2e:	431d      	orrs	r5, r3
 8012d30:	d001      	beq.n	8012d36 <floor+0x46>
 8012d32:	4c2d      	ldr	r4, [pc, #180]	; (8012de8 <floor+0xf8>)
 8012d34:	2500      	movs	r5, #0
 8012d36:	4621      	mov	r1, r4
 8012d38:	4628      	mov	r0, r5
 8012d3a:	e025      	b.n	8012d88 <floor+0x98>
 8012d3c:	4f2b      	ldr	r7, [pc, #172]	; (8012dec <floor+0xfc>)
 8012d3e:	4137      	asrs	r7, r6
 8012d40:	ea01 0307 	and.w	r3, r1, r7
 8012d44:	4303      	orrs	r3, r0
 8012d46:	d01f      	beq.n	8012d88 <floor+0x98>
 8012d48:	a325      	add	r3, pc, #148	; (adr r3, 8012de0 <floor+0xf0>)
 8012d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4e:	f7ed faad 	bl	80002ac <__adddf3>
 8012d52:	2200      	movs	r2, #0
 8012d54:	2300      	movs	r3, #0
 8012d56:	f7ed feef 	bl	8000b38 <__aeabi_dcmpgt>
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d0eb      	beq.n	8012d36 <floor+0x46>
 8012d5e:	2c00      	cmp	r4, #0
 8012d60:	bfbe      	ittt	lt
 8012d62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012d66:	fa43 f606 	asrlt.w	r6, r3, r6
 8012d6a:	19a4      	addlt	r4, r4, r6
 8012d6c:	ea24 0407 	bic.w	r4, r4, r7
 8012d70:	2500      	movs	r5, #0
 8012d72:	e7e0      	b.n	8012d36 <floor+0x46>
 8012d74:	2e33      	cmp	r6, #51	; 0x33
 8012d76:	dd0b      	ble.n	8012d90 <floor+0xa0>
 8012d78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012d7c:	d104      	bne.n	8012d88 <floor+0x98>
 8012d7e:	ee10 2a10 	vmov	r2, s0
 8012d82:	460b      	mov	r3, r1
 8012d84:	f7ed fa92 	bl	80002ac <__adddf3>
 8012d88:	ec41 0b10 	vmov	d0, r0, r1
 8012d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012d94:	f04f 33ff 	mov.w	r3, #4294967295
 8012d98:	fa23 f707 	lsr.w	r7, r3, r7
 8012d9c:	4207      	tst	r7, r0
 8012d9e:	d0f3      	beq.n	8012d88 <floor+0x98>
 8012da0:	a30f      	add	r3, pc, #60	; (adr r3, 8012de0 <floor+0xf0>)
 8012da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da6:	f7ed fa81 	bl	80002ac <__adddf3>
 8012daa:	2200      	movs	r2, #0
 8012dac:	2300      	movs	r3, #0
 8012dae:	f7ed fec3 	bl	8000b38 <__aeabi_dcmpgt>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d0bf      	beq.n	8012d36 <floor+0x46>
 8012db6:	2c00      	cmp	r4, #0
 8012db8:	da02      	bge.n	8012dc0 <floor+0xd0>
 8012dba:	2e14      	cmp	r6, #20
 8012dbc:	d103      	bne.n	8012dc6 <floor+0xd6>
 8012dbe:	3401      	adds	r4, #1
 8012dc0:	ea25 0507 	bic.w	r5, r5, r7
 8012dc4:	e7b7      	b.n	8012d36 <floor+0x46>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012dcc:	fa03 f606 	lsl.w	r6, r3, r6
 8012dd0:	4435      	add	r5, r6
 8012dd2:	4545      	cmp	r5, r8
 8012dd4:	bf38      	it	cc
 8012dd6:	18e4      	addcc	r4, r4, r3
 8012dd8:	e7f2      	b.n	8012dc0 <floor+0xd0>
 8012dda:	2500      	movs	r5, #0
 8012ddc:	462c      	mov	r4, r5
 8012dde:	e7aa      	b.n	8012d36 <floor+0x46>
 8012de0:	8800759c 	.word	0x8800759c
 8012de4:	7e37e43c 	.word	0x7e37e43c
 8012de8:	bff00000 	.word	0xbff00000
 8012dec:	000fffff 	.word	0x000fffff

08012df0 <scalbn>:
 8012df0:	b570      	push	{r4, r5, r6, lr}
 8012df2:	ec55 4b10 	vmov	r4, r5, d0
 8012df6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	462b      	mov	r3, r5
 8012dfe:	b99a      	cbnz	r2, 8012e28 <scalbn+0x38>
 8012e00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e04:	4323      	orrs	r3, r4
 8012e06:	d036      	beq.n	8012e76 <scalbn+0x86>
 8012e08:	4b39      	ldr	r3, [pc, #228]	; (8012ef0 <scalbn+0x100>)
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	ee10 0a10 	vmov	r0, s0
 8012e10:	2200      	movs	r2, #0
 8012e12:	f7ed fc01 	bl	8000618 <__aeabi_dmul>
 8012e16:	4b37      	ldr	r3, [pc, #220]	; (8012ef4 <scalbn+0x104>)
 8012e18:	429e      	cmp	r6, r3
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	460d      	mov	r5, r1
 8012e1e:	da10      	bge.n	8012e42 <scalbn+0x52>
 8012e20:	a32b      	add	r3, pc, #172	; (adr r3, 8012ed0 <scalbn+0xe0>)
 8012e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e26:	e03a      	b.n	8012e9e <scalbn+0xae>
 8012e28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012e2c:	428a      	cmp	r2, r1
 8012e2e:	d10c      	bne.n	8012e4a <scalbn+0x5a>
 8012e30:	ee10 2a10 	vmov	r2, s0
 8012e34:	4620      	mov	r0, r4
 8012e36:	4629      	mov	r1, r5
 8012e38:	f7ed fa38 	bl	80002ac <__adddf3>
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	460d      	mov	r5, r1
 8012e40:	e019      	b.n	8012e76 <scalbn+0x86>
 8012e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012e46:	460b      	mov	r3, r1
 8012e48:	3a36      	subs	r2, #54	; 0x36
 8012e4a:	4432      	add	r2, r6
 8012e4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012e50:	428a      	cmp	r2, r1
 8012e52:	dd08      	ble.n	8012e66 <scalbn+0x76>
 8012e54:	2d00      	cmp	r5, #0
 8012e56:	a120      	add	r1, pc, #128	; (adr r1, 8012ed8 <scalbn+0xe8>)
 8012e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e5c:	da1c      	bge.n	8012e98 <scalbn+0xa8>
 8012e5e:	a120      	add	r1, pc, #128	; (adr r1, 8012ee0 <scalbn+0xf0>)
 8012e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e64:	e018      	b.n	8012e98 <scalbn+0xa8>
 8012e66:	2a00      	cmp	r2, #0
 8012e68:	dd08      	ble.n	8012e7c <scalbn+0x8c>
 8012e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012e72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012e76:	ec45 4b10 	vmov	d0, r4, r5
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012e80:	da19      	bge.n	8012eb6 <scalbn+0xc6>
 8012e82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e86:	429e      	cmp	r6, r3
 8012e88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012e8c:	dd0a      	ble.n	8012ea4 <scalbn+0xb4>
 8012e8e:	a112      	add	r1, pc, #72	; (adr r1, 8012ed8 <scalbn+0xe8>)
 8012e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d1e2      	bne.n	8012e5e <scalbn+0x6e>
 8012e98:	a30f      	add	r3, pc, #60	; (adr r3, 8012ed8 <scalbn+0xe8>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	f7ed fbbb 	bl	8000618 <__aeabi_dmul>
 8012ea2:	e7cb      	b.n	8012e3c <scalbn+0x4c>
 8012ea4:	a10a      	add	r1, pc, #40	; (adr r1, 8012ed0 <scalbn+0xe0>)
 8012ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d0b8      	beq.n	8012e20 <scalbn+0x30>
 8012eae:	a10e      	add	r1, pc, #56	; (adr r1, 8012ee8 <scalbn+0xf8>)
 8012eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eb4:	e7b4      	b.n	8012e20 <scalbn+0x30>
 8012eb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012eba:	3236      	adds	r2, #54	; 0x36
 8012ebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	4b0c      	ldr	r3, [pc, #48]	; (8012ef8 <scalbn+0x108>)
 8012ec8:	2200      	movs	r2, #0
 8012eca:	e7e8      	b.n	8012e9e <scalbn+0xae>
 8012ecc:	f3af 8000 	nop.w
 8012ed0:	c2f8f359 	.word	0xc2f8f359
 8012ed4:	01a56e1f 	.word	0x01a56e1f
 8012ed8:	8800759c 	.word	0x8800759c
 8012edc:	7e37e43c 	.word	0x7e37e43c
 8012ee0:	8800759c 	.word	0x8800759c
 8012ee4:	fe37e43c 	.word	0xfe37e43c
 8012ee8:	c2f8f359 	.word	0xc2f8f359
 8012eec:	81a56e1f 	.word	0x81a56e1f
 8012ef0:	43500000 	.word	0x43500000
 8012ef4:	ffff3cb0 	.word	0xffff3cb0
 8012ef8:	3c900000 	.word	0x3c900000

08012efc <_init>:
 8012efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012efe:	bf00      	nop
 8012f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f02:	bc08      	pop	{r3}
 8012f04:	469e      	mov	lr, r3
 8012f06:	4770      	bx	lr

08012f08 <_fini>:
 8012f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0a:	bf00      	nop
 8012f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f0e:	bc08      	pop	{r3}
 8012f10:	469e      	mov	lr, r3
 8012f12:	4770      	bx	lr
