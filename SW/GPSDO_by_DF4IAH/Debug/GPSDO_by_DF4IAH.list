
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  08014248  08014248  00024248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014df0  08014df0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08014df0  08014df0  00024df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014df8  08014df8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014df8  08014df8  00024df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014dfc  08014dfc  00024dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08014e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005584  200001e8  08014fe8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000576c  08014fe8  0003576c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024200  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004684  00000000  00000000  00054418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  00058aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c70  00000000  00000000  0005a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266c5  00000000  00000000  0005c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a8e  00000000  00000000  00082b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b8d  00000000  00000000  000a7593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000918c  00000000  00000000  00190170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001992fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001993c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801422c 	.word	0x0801422c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801422c 	.word	0x0801422c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc0:	f043 0204 	orr.w	r2, r3, #4
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b58      	ldr	r3, [pc, #352]	; (8001174 <MX_ADC1_Init+0x178>)
 8001014:	4a58      	ldr	r2, [pc, #352]	; (8001178 <MX_ADC1_Init+0x17c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001018:	4b56      	ldr	r3, [pc, #344]	; (8001174 <MX_ADC1_Init+0x178>)
 800101a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b54      	ldr	r3, [pc, #336]	; (8001174 <MX_ADC1_Init+0x178>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001026:	4b53      	ldr	r3, [pc, #332]	; (8001174 <MX_ADC1_Init+0x178>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800102c:	4b51      	ldr	r3, [pc, #324]	; (8001174 <MX_ADC1_Init+0x178>)
 800102e:	2201      	movs	r2, #1
 8001030:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <MX_ADC1_Init+0x178>)
 8001034:	2208      	movs	r2, #8
 8001036:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001038:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <MX_ADC1_Init+0x178>)
 800103a:	2200      	movs	r2, #0
 800103c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <MX_ADC1_Init+0x178>)
 8001040:	2200      	movs	r2, #0
 8001042:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <MX_ADC1_Init+0x178>)
 8001046:	2205      	movs	r2, #5
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104a:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <MX_ADC1_Init+0x178>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001052:	4b48      	ldr	r3, [pc, #288]	; (8001174 <MX_ADC1_Init+0x178>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001058:	4b46      	ldr	r3, [pc, #280]	; (8001174 <MX_ADC1_Init+0x178>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105e:	4b45      	ldr	r3, [pc, #276]	; (8001174 <MX_ADC1_Init+0x178>)
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001066:	4b43      	ldr	r3, [pc, #268]	; (8001174 <MX_ADC1_Init+0x178>)
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800106c:	4b41      	ldr	r3, [pc, #260]	; (8001174 <MX_ADC1_Init+0x178>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <MX_ADC1_Init+0x178>)
 8001076:	221c      	movs	r2, #28
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <MX_ADC1_Init+0x178>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <MX_ADC1_Init+0x178>)
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <MX_ADC1_Init+0x178>)
 8001088:	2201      	movs	r2, #1
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	4839      	ldr	r0, [pc, #228]	; (8001174 <MX_ADC1_Init+0x178>)
 800108e:	f006 fd97 	bl	8007bc0 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001098:	f004 fbd2 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <MX_ADC1_Init+0x180>)
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2306      	movs	r3, #6
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80010a4:	2306      	movs	r3, #6
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a8:	237f      	movs	r3, #127	; 0x7f
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ac:	2304      	movs	r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	482e      	ldr	r0, [pc, #184]	; (8001174 <MX_ADC1_Init+0x178>)
 80010ba:	f007 f8f3 	bl	80082a4 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80010c4:	f004 fbbc 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_ADC1_Init+0x184>)
 80010ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010cc:	230c      	movs	r3, #12
 80010ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010d0:	2305      	movs	r3, #5
 80010d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4826      	ldr	r0, [pc, #152]	; (8001174 <MX_ADC1_Init+0x178>)
 80010da:	f007 f8e3 	bl	80082a4 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80010e4:	f004 fbac 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_ADC1_Init+0x188>)
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ec:	2312      	movs	r3, #18
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	481f      	ldr	r0, [pc, #124]	; (8001174 <MX_ADC1_Init+0x178>)
 80010f6:	f007 f8d5 	bl	80082a4 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001100:	f004 fb9e 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_ADC1_Init+0x180>)
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001108:	2318      	movs	r3, #24
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800110c:	2306      	movs	r3, #6
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_ADC1_Init+0x178>)
 8001116:	f007 f8c5 	bl	80082a4 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001120:	f004 fb8e 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_ADC1_Init+0x18c>)
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800112e:	2305      	movs	r3, #5
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_ADC1_Init+0x178>)
 8001138:	f007 f8b4 	bl	80082a4 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001142:	f004 fb7d 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <MX_ADC1_Init+0x190>)
 800114a:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_ADC1_Init+0x190>)
 8001150:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <MX_ADC1_Init+0x190>)
 8001156:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <MX_ADC1_Init+0x190>)
 800115c:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <MX_ADC1_Init+0x190>)
 8001162:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <MX_ADC1_Init+0x190>)
 8001168:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000240 	.word	0x20000240
 8001178:	50040000 	.word	0x50040000
 800117c:	80000001 	.word	0x80000001
 8001180:	2a000400 	.word	0x2a000400
 8001184:	25b00200 	.word	0x25b00200
 8001188:	43210000 	.word	0x43210000
 800118c:	20000204 	.word	0x20000204

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0a0      	sub	sp, #128	; 0x80
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	2254      	movs	r2, #84	; 0x54
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00f f847 	bl	8010244 <memset>
  if(adcHandle->Instance==ADC1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a44      	ldr	r2, [pc, #272]	; (80012cc <HAL_ADC_MspInit+0x13c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	f040 8081 	bne.w	80012c4 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011c8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00b fab4 	bl	800c740 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011de:	f004 fb2f 	bl	8005840 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 80011e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_ADC_MspInit+0x140>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800122a:	2330      	movs	r3, #48	; 0x30
 800122c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800122e:	230b      	movs	r3, #11
 8001230:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f008 faa8 	bl	8009794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8001244:	2302      	movs	r3, #2
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001248:	230b      	movs	r3, #11
 800124a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001254:	4619      	mov	r1, r3
 8001256:	481f      	ldr	r0, [pc, #124]	; (80012d4 <HAL_ADC_MspInit+0x144>)
 8001258:	f008 fa9c 	bl	8009794 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_ADC_MspInit+0x14c>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 800127c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001280:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 8001284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001288:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 8001292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 800129a:	f007 fff7 	bl	800928c <HAL_DMA_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 80012a4:	f004 facc 	bl	8005840 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 80012ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_ADC_MspInit+0x148>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2012      	movs	r0, #18
 80012ba:	f007 ffaf 	bl	800921c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012be:	2012      	movs	r0, #18
 80012c0:	f007 ffc8 	bl	8009254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012c4:	bf00      	nop
 80012c6:	3780      	adds	r7, #128	; 0x80
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	50040000 	.word	0x50040000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	200002a4 	.word	0x200002a4
 80012dc:	40020008 	.word	0x40020008

080012e0 <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe6f 	bl	8000fd4 <LL_ADC_REG_IsConversionOngoing>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d16c      	bne.n	80013d6 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <DF4IAH_ADC_Start_DMA+0x2a>
 8001306:	2302      	movs	r3, #2
 8001308:	e068      	b.n	80013dc <DF4IAH_ADC_Start_DMA+0xfc>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f007 fc6e 	bl	8008bf4 <ADC_Enable>
 8001318:	4603      	mov	r3, r0
 800131a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d154      	bne.n	80013cc <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	f023 0206 	bic.w	r2, r3, #6
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	659a      	str	r2, [r3, #88]	; 0x58
 800134e:	e002      	b.n	8001356 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <DF4IAH_ADC_Start_DMA+0x104>)
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <DF4IAH_ADC_Start_DMA+0x108>)
 8001364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a20      	ldr	r2, [pc, #128]	; (80013ec <DF4IAH_ADC_Start_DMA+0x10c>)
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	221c      	movs	r2, #28
 8001374:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0210 	orr.w	r2, r2, #16
 800138c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 ff72 	bl	800928c <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3340      	adds	r3, #64	; 0x40
 80013b2:	4619      	mov	r1, r3
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f008 f820 	bl	80093fc <HAL_DMA_Start_IT>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fdf1 	bl	8000fac <LL_ADC_REG_StartConversion>
 80013ca:	e006      	b.n	80013da <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013d4:	e001      	b.n	80013da <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d6:	2302      	movs	r3, #2
 80013d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	08008dbf 	.word	0x08008dbf
 80013e8:	08008e97 	.word	0x08008e97
 80013ec:	08008eb3 	.word	0x08008eb3

080013f0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f007 fb33 	bl	8008a64 <HAL_ADC_GetState>
 80013fe:	4603      	mov	r3, r0
 8001400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01c      	beq.n	8001442 <HAL_ADC_ConvCpltCallback+0x52>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d013      	beq.n	8001442 <HAL_ADC_ConvCpltCallback+0x52>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2208      	movs	r2, #8
 8001420:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			{
				/* Get the converted value of regular channel */
				gAdcVrefint_val = adc_dma_buf[0];
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_ADC_ConvCpltCallback+0x60>)
 8001428:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh10_val = adc_dma_buf[1];
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_ADC_ConvCpltCallback+0x5c>)
 800142c:	885a      	ldrh	r2, [r3, #2]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_ADC_ConvCpltCallback+0x64>)
 8001430:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh9_val = adc_dma_buf[2];
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001434:	889a      	ldrh	r2, [r3, #4]
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_ADC_ConvCpltCallback+0x68>)
 8001438:	801a      	strh	r2, [r3, #0]

				/* Get the converted value of regular channel */
				gAdcCh16_val = adc_dma_buf[4];
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_ADC_ConvCpltCallback+0x5c>)
 800143c:	891a      	ldrh	r2, [r3, #8]
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001440:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000234 	.word	0x20000234
 8001450:	20000222 	.word	0x20000222
 8001454:	2000021e 	.word	0x2000021e
 8001458:	2000021c 	.word	0x2000021c
 800145c:	20000220 	.word	0x20000220

08001460 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_ADC_ErrorCallback+0x20>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_ADC_ErrorCallback+0x20>)
 8001470:	6013      	str	r3, [r2, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200002ec 	.word	0x200002ec

08001484 <adc_init>:


void adc_init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8001488:	217f      	movs	r1, #127	; 0x7f
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <adc_init+0x1c>)
 800148c:	f007 fd58 	bl	8008f40 <HAL_ADCEx_Calibration_Start>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <adc_init+0x16>
	{
		Error_Handler();
 8001496:	f004 f9d3 	bl	8005840 <Error_Handler>
	}
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000240 	.word	0x20000240

080014a4 <adc_start>:

void adc_start(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <adc_start+0x30>)
 80014aa:	f007 fadb 	bl	8008a64 <HAL_ADC_GetState>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00a      	beq.n	80014ce <adc_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 80014b8:	2305      	movs	r3, #5
 80014ba:	461a      	mov	r2, r3
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <adc_start+0x34>)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <adc_start+0x30>)
 80014c0:	f7ff ff0e 	bl	80012e0 <DF4IAH_ADC_Start_DMA>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <adc_start+0x2a>
			Error_Handler();
 80014ca:	f004 f9b9 	bl	8005840 <Error_Handler>
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000240 	.word	0x20000240
 80014d8:	20000234 	.word	0x20000234

080014dc <adc_stop>:

void adc_stop(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <adc_stop+0x38>)
 80014e2:	f007 fabf 	bl	8008a64 <HAL_ADC_GetState>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <adc_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <adc_stop+0x38>)
 80014f2:	f006 fcad 	bl	8007e50 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 80014f6:	e00a      	b.n	800150e <adc_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <adc_stop+0x38>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b08      	cmp	r3, #8
 8001504:	d103      	bne.n	800150e <adc_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <adc_stop+0x38>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2208      	movs	r2, #8
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000240 	.word	0x20000240

08001518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_DMA_Init+0x48>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <MX_DMA_Init+0x48>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_DMA_Init+0x48>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	200b      	movs	r0, #11
 800153c:	f007 fe6e 	bl	800921c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001540:	200b      	movs	r0, #11
 8001542:	f007 fe87 	bl	8009254 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2011      	movs	r0, #17
 800154c:	f007 fe66 	bl	800921c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001550:	2011      	movs	r0, #17
 8001552:	f007 fe7f 	bl	8009254 <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <MX_GPIO_Init+0x148>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <MX_GPIO_Init+0x148>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <MX_GPIO_Init+0x148>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <MX_GPIO_Init+0x148>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a45      	ldr	r2, [pc, #276]	; (80016ac <MX_GPIO_Init+0x148>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <MX_GPIO_Init+0x148>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <MX_GPIO_Init+0x148>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <MX_GPIO_Init+0x148>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <MX_GPIO_Init+0x148>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <MX_GPIO_Init+0x148>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a39      	ldr	r2, [pc, #228]	; (80016ac <MX_GPIO_Init+0x148>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <MX_GPIO_Init+0x148>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f008 fb22 	bl	8009c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	4830      	ldr	r0, [pc, #192]	; (80016b0 <MX_GPIO_Init+0x14c>)
 80015ee:	f008 fb1d 	bl	8009c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2120      	movs	r1, #32
 80015f6:	482e      	ldr	r0, [pc, #184]	; (80016b0 <MX_GPIO_Init+0x14c>)
 80015f8:	f008 fb18 	bl	8009c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4827      	ldr	r0, [pc, #156]	; (80016b0 <MX_GPIO_Init+0x14c>)
 8001612:	f008 f8bf 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8001616:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f008 f8b1 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f008 f8a1 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8001652:	2310      	movs	r3, #16
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <MX_GPIO_Init+0x14c>)
 800166a:	f008 f893 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800166e:	2320      	movs	r3, #32
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001672:	2311      	movs	r3, #17
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800167a:	2301      	movs	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_GPIO_Init+0x14c>)
 8001686:	f008 f885 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800168a:	2308      	movs	r3, #8
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0x150>)
 800169e:	f008 f879 	bl	8009794 <HAL_GPIO_Init>

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48001c00 	.word	0x48001c00

080016b8 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2120      	movs	r1, #32
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <onewireMasterWr_bit+0x70>)
 80016c8:	f008 fab0 	bl	8009c2c <HAL_GPIO_WritePin>
	uDelay(2U);
 80016cc:	2002      	movs	r0, #2
 80016ce:	f002 fac9 	bl	8003c64 <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80016d2:	201c      	movs	r0, #28
 80016d4:	f007 fdcc 	bl	8009270 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* TimeSlot starts here */
	if (bit) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d010      	beq.n	8001700 <onewireMasterWr_bit+0x48>
		/* Writing a One */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <onewireMasterWr_bit+0x70>)
 80016e4:	f008 faa2 	bl	8009c2c <HAL_GPIO_WritePin>
		uDelay(2U);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f002 fabb 	bl	8003c64 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <onewireMasterWr_bit+0x70>)
 80016f4:	f008 fa9a 	bl	8009c2c <HAL_GPIO_WritePin>
		uDelay(88U);
 80016f8:	2058      	movs	r0, #88	; 0x58
 80016fa:	f002 fab3 	bl	8003c64 <uDelay>
 80016fe:	e007      	b.n	8001710 <onewireMasterWr_bit+0x58>
	}
	else {
		/* Writing a Zero */
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2120      	movs	r1, #32
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <onewireMasterWr_bit+0x70>)
 8001706:	f008 fa91 	bl	8009c2c <HAL_GPIO_WritePin>
		uDelay(90U);
 800170a:	205a      	movs	r0, #90	; 0x5a
 800170c:	f002 faaa 	bl	8003c64 <uDelay>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	2120      	movs	r1, #32
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <onewireMasterWr_bit+0x70>)
 8001716:	f008 fa89 	bl	8009c2c <HAL_GPIO_WritePin>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171a:	201c      	movs	r0, #28
 800171c:	f007 fd9a 	bl	8009254 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	48000400 	.word	0x48000400

0800172c <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e00d      	b.n	8001758 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	fa42 f303 	asr.w	r3, r2, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffb3 	bl	80016b8 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9ee      	bls.n	800173c <onewireMasterWr_byte+0x10>
	}
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d124      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d11f      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3302      	adds	r3, #2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11a      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3303      	adds	r3, #3
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d115      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d110      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3305      	adds	r3, #5
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10b      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3306      	adds	r3, #6
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3307      	adds	r3, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d010      	beq.n	80017ea <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80017c8:	2308      	movs	r3, #8
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e009      	b.n	80017e2 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffa8 	bl	800172c <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	3b01      	subs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f2      	bne.n	80017ce <onewireMasterWr_romCode+0x66>
 80017e8:	e000      	b.n	80017ec <onewireMasterWr_romCode+0x84>
		return;
 80017ea:	bf00      	nop
	}
}
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2120      	movs	r1, #32
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <onewireMasterRd_bit+0x74>)
 8001800:	f008 fa14 	bl	8009c2c <HAL_GPIO_WritePin>
	uDelay(2U);
 8001804:	2002      	movs	r0, #2
 8001806:	f002 fa2d 	bl	8003c64 <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800180a:	201c      	movs	r0, #28
 800180c:	f007 fd30 	bl	8009270 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2120      	movs	r1, #32
 8001814:	4814      	ldr	r0, [pc, #80]	; (8001868 <onewireMasterRd_bit+0x74>)
 8001816:	f008 fa09 	bl	8009c2c <HAL_GPIO_WritePin>
	uDelay(2U);
 800181a:	2002      	movs	r0, #2
 800181c:	f002 fa22 	bl	8003c64 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2120      	movs	r1, #32
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <onewireMasterRd_bit+0x74>)
 8001826:	f008 fa01 	bl	8009c2c <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13U);
 800182a:	200d      	movs	r0, #13
 800182c:	f002 fa1a 	bl	8003c64 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8001830:	2120      	movs	r1, #32
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <onewireMasterRd_bit+0x74>)
 8001834:	f008 f9e2 	bl	8009bfc <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]

	uDelay(75U);
 800183c:	204b      	movs	r0, #75	; 0x4b
 800183e:	f002 fa11 	bl	8003c64 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2120      	movs	r1, #32
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <onewireMasterRd_bit+0x74>)
 8001848:	f008 f9f0 	bl	8009c2c <HAL_GPIO_WritePin>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f007 fd01 	bl	8009254 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif

	return (pinstate == GPIO_PIN_SET);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b01      	cmp	r3, #1
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	48000400 	.word	0x48000400

0800186c <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]

	/* Parameter check */
	if (bitCnt > 32) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b20      	cmp	r3, #32
 800187e:	d902      	bls.n	8001886 <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	e016      	b.n	80018b4 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8001886:	2300      	movs	r3, #0
 8001888:	72fb      	strb	r3, [r7, #11]
 800188a:	e00e      	b.n	80018aa <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 800188c:	f7ff ffb2 	bl	80017f4 <onewireMasterRd_bit>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	2201      	movs	r2, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	3301      	adds	r3, #1
 80018a8:	72fb      	strb	r3, [r7, #11]
 80018aa:	7afa      	ldrb	r2, [r7, #11]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3ec      	bcc.n	800188c <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive to get enough energy in the devices */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2120      	movs	r1, #32
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <onewireMasterCheck_presence+0x64>)
 80018c8:	f008 f9b0 	bl	8009c2c <HAL_GPIO_WritePin>
	uDelay(2000U);
 80018cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018d0:	f002 f9c8 	bl	8003c64 <uDelay>

	/* Disable TIM2 interrupt */
#if 1
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f007 fccb 	bl	8009270 <HAL_NVIC_DisableIRQ>
#else
	giTIM2_INT_DISABLE = 1U;
#endif

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2120      	movs	r1, #32
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <onewireMasterCheck_presence+0x64>)
 80018e0:	f008 f9a4 	bl	8009c2c <HAL_GPIO_WritePin>
	uDelay(550U);
 80018e4:	f240 2026 	movw	r0, #550	; 0x226
 80018e8:	f002 f9bc 	bl	8003c64 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2120      	movs	r1, #32
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <onewireMasterCheck_presence+0x64>)
 80018f2:	f008 f99b 	bl	8009c2c <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(120U);
 80018f6:	2078      	movs	r0, #120	; 0x78
 80018f8:	f002 f9b4 	bl	8003c64 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 80018fc:	2120      	movs	r1, #32
 80018fe:	4808      	ldr	r0, [pc, #32]	; (8001920 <onewireMasterCheck_presence+0x64>)
 8001900:	f008 f97c 	bl	8009bfc <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]

	uDelay(550U - 120U);
 8001908:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800190c:	f002 f9aa 	bl	8003c64 <uDelay>

	/* Enable TIM2 interrupt */
#if 1
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001910:	201c      	movs	r0, #28
 8001912:	f007 fc9f 	bl	8009254 <HAL_NVIC_EnableIRQ>
#else
	giTIM2_INT_DISABLE = 0U;
#endif

	return presence;
 8001916:	79fb      	ldrb	r3, [r7, #7]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	48000400 	.word	0x48000400

08001924 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	603a      	str	r2, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	460b      	mov	r3, r1
 8001932:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt			= 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow			= 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	77bb      	strb	r3, [r7, #30]
	uint8_t direction			= 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	777b      	strb	r3, [r7, #29]
	int8_t bitIdxLastZero		= -1;
 8001940:	23ff      	movs	r3, #255	; 0xff
 8001942:	773b      	strb	r3, [r7, #28]
	int8_t discrepancyLast		= -1;
 8001944:	23ff      	movs	r3, #255	; 0xff
 8001946:	74fb      	strb	r3, [r7, #19]
	uint8_t lastDeviceFlag		= 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	76fb      	strb	r3, [r7, #27]
	uint8_t masterMind[64 / 8]	= { 0 };		// Keeps track of common path entries
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

	/* For any device, restart the whole path to find each of them on the bus */
	while (devicesCnt < devicesMax) {
 8001954:	e0cd      	b.n	8001af2 <onewireMasterTree_search+0x1ce>
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8001956:	f7ff ffb1 	bl	80018bc <onewireMasterCheck_presence>
 800195a:	4603      	mov	r3, r0
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <onewireMasterTree_search+0x40>
			/* No devices */
			return 0;
 8001960:	2300      	movs	r3, #0
 8001962:	e0d0      	b.n	8001b06 <onewireMasterTree_search+0x1e2>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8001964:	7efb      	ldrb	r3, [r7, #27]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 80c9 	bne.w	8001afe <onewireMasterTree_search+0x1da>
			break;
		}

		if (searchAlarms) {
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <onewireMasterTree_search+0x56>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 8001972:	20ec      	movs	r0, #236	; 0xec
 8001974:	f7ff feda 	bl	800172c <onewireMasterWr_byte>
 8001978:	e002      	b.n	8001980 <onewireMasterTree_search+0x5c>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 800197a:	20f0      	movs	r0, #240	; 0xf0
 800197c:	f7ff fed6 	bl	800172c <onewireMasterWr_byte>
		}

		/* Step over each bit of the IDs */
		bitIdxNow 		= 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001984:	e08f      	b.n	8001aa6 <onewireMasterTree_search+0x182>
			/* Get last */
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8001986:	7fbb      	ldrb	r3, [r7, #30]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	3320      	adds	r3, #32
 800198e:	443b      	add	r3, r7
 8001990:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001994:	461a      	mov	r2, r3
 8001996:	7fbb      	ldrb	r3, [r7, #30]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	fa42 f303 	asr.w	r3, r2, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	74bb      	strb	r3, [r7, #18]

			uint8_t b_pos = onewireMasterRd_bit();
 80019a8:	f7ff ff24 	bl	80017f4 <onewireMasterRd_bit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	747b      	strb	r3, [r7, #17]
			uint8_t b_neg = onewireMasterRd_bit();
 80019b0:	f7ff ff20 	bl	80017f4 <onewireMasterRd_bit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	743b      	strb	r3, [r7, #16]

			if (!b_pos && b_neg) {
 80019b8:	7c7b      	ldrb	r3, [r7, #17]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d105      	bne.n	80019ca <onewireMasterTree_search+0xa6>
 80019be:	7c3b      	ldrb	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <onewireMasterTree_search+0xa6>
				/* Only (common or single) '0' */
				direction = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	777b      	strb	r3, [r7, #29]
 80019c8:	e030      	b.n	8001a2c <onewireMasterTree_search+0x108>
			}
			else if (b_pos && !b_neg) {
 80019ca:	7c7b      	ldrb	r3, [r7, #17]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <onewireMasterTree_search+0xb8>
 80019d0:	7c3b      	ldrb	r3, [r7, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <onewireMasterTree_search+0xb8>
				/* Only (common or single) '1' */
				direction = 1U;
 80019d6:	2301      	movs	r3, #1
 80019d8:	777b      	strb	r3, [r7, #29]
 80019da:	e027      	b.n	8001a2c <onewireMasterTree_search+0x108>
			}
			else if (!b_pos && !b_neg) {
 80019dc:	7c7b      	ldrb	r3, [r7, #17]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11c      	bne.n	8001a1c <onewireMasterTree_search+0xf8>
 80019e2:	7c3b      	ldrb	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d119      	bne.n	8001a1c <onewireMasterTree_search+0xf8>
				/* Discrepancy at this point of the path */

				if ((int8_t)bitIdxNow < bitIdxLastZero) {
 80019e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019ec:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dd02      	ble.n	80019fa <onewireMasterTree_search+0xd6>
					/* Follow last trace */
					direction = bitNow;
 80019f4:	7cbb      	ldrb	r3, [r7, #18]
 80019f6:	777b      	strb	r3, [r7, #29]
 80019f8:	e00a      	b.n	8001a10 <onewireMasterTree_search+0xec>
				}
				else if ((int8_t)bitIdxNow == bitIdxLastZero) {
 80019fa:	7f3b      	ldrb	r3, [r7, #28]
 80019fc:	7fba      	ldrb	r2, [r7, #30]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d104      	bne.n	8001a0c <onewireMasterTree_search+0xe8>
					/* Select now the '1' branch */
					direction = 1U;
 8001a02:	2301      	movs	r3, #1
 8001a04:	777b      	strb	r3, [r7, #29]
					bitIdxLastZero = -1;  // DF4IAH
 8001a06:	23ff      	movs	r3, #255	; 0xff
 8001a08:	773b      	strb	r3, [r7, #28]
 8001a0a:	e001      	b.n	8001a10 <onewireMasterTree_search+0xec>
				}
				else {
					/* Select the '0' branch */
					direction = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	777b      	strb	r3, [r7, #29]
				}

				if (!direction) {
 8001a10:	7f7b      	ldrb	r3, [r7, #29]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <onewireMasterTree_search+0x108>
					bitIdxLastZero = bitIdxNow;
 8001a16:	7fbb      	ldrb	r3, [r7, #30]
 8001a18:	773b      	strb	r3, [r7, #28]
				if (!direction) {
 8001a1a:	e007      	b.n	8001a2c <onewireMasterTree_search+0x108>
				}
			}
			else if (b_pos && b_neg) {
 8001a1c:	7c7b      	ldrb	r3, [r7, #17]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <onewireMasterTree_search+0x108>
 8001a22:	7c3b      	ldrb	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <onewireMasterTree_search+0x108>
				/* No devices anymore */
				return 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e06c      	b.n	8001b06 <onewireMasterTree_search+0x1e2>
			}

			/* Write direction to the path */
			if (direction > 0U) {
 8001a2c:	7f7b      	ldrb	r3, [r7, #29]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d018      	beq.n	8001a64 <onewireMasterTree_search+0x140>
				masterMind[bitIdxNow >> 3] |=  (1U << (bitIdxNow & 0x07U));
 8001a32:	7fbb      	ldrb	r3, [r7, #30]
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3320      	adds	r3, #32
 8001a3a:	443b      	add	r3, r7
 8001a3c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a40:	7fbb      	ldrb	r3, [r7, #30]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	7fb9      	ldrb	r1, [r7, #30]
 8001a50:	08c9      	lsrs	r1, r1, #3
 8001a52:	b2c9      	uxtb	r1, r1
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	f101 0320 	add.w	r3, r1, #32
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001a62:	e019      	b.n	8001a98 <onewireMasterTree_search+0x174>
			} else {
				masterMind[bitIdxNow >> 3] &= ~(1U << (bitIdxNow & 0x07U));
 8001a64:	7fbb      	ldrb	r3, [r7, #30]
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3320      	adds	r3, #32
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001a72:	7fbb      	ldrb	r3, [r7, #30]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	7fb9      	ldrb	r1, [r7, #30]
 8001a86:	08c9      	lsrs	r1, r1, #3
 8001a88:	b2c9      	uxtb	r1, r1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	f101 0320 	add.w	r3, r1, #32
 8001a92:	443b      	add	r3, r7
 8001a94:	f803 2c18 	strb.w	r2, [r3, #-24]
			}

			/* Write direction to the bus */
			onewireMasterWr_bit(direction);
 8001a98:	7f7b      	ldrb	r3, [r7, #29]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe0c 	bl	80016b8 <onewireMasterWr_bit>

			++bitIdxNow;
 8001aa0:	7fbb      	ldrb	r3, [r7, #30]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8001aa6:	7fbb      	ldrb	r3, [r7, #30]
 8001aa8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aaa:	f67f af6c 	bls.w	8001986 <onewireMasterTree_search+0x62>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001aae:	7f3b      	ldrb	r3, [r7, #28]
 8001ab0:	74fb      	strb	r3, [r7, #19]
		if (discrepancyLast == -1) {
 8001ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aba:	d101      	bne.n	8001ac0 <onewireMasterTree_search+0x19c>
			lastDeviceFlag = 1U;
 8001abc:	2301      	movs	r3, #1
 8001abe:	76fb      	strb	r3, [r7, #27]
		}

		/* Copy over one valid device */
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00f      	b.n	8001ae6 <onewireMasterTree_search+0x1c2>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	441a      	add	r2, r3
 8001ace:	f107 0108 	add.w	r1, r7, #8
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4413      	add	r3, r2
 8001adc:	460a      	mov	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < (64 / 8); ++idx) {
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	ddec      	ble.n	8001ac6 <onewireMasterTree_search+0x1a2>
		}
		++devicesCnt;
 8001aec:	7ffb      	ldrb	r3, [r7, #31]
 8001aee:	3301      	adds	r3, #1
 8001af0:	77fb      	strb	r3, [r7, #31]
	while (devicesCnt < devicesMax) {
 8001af2:	7ffa      	ldrb	r2, [r7, #31]
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	f4ff af2d 	bcc.w	8001956 <onewireMasterTree_search+0x32>
 8001afc:	e000      	b.n	8001b00 <onewireMasterTree_search+0x1dc>
			break;
 8001afe:	bf00      	nop
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001b00:	f7ff fedc 	bl	80018bc <onewireMasterCheck_presence>

	return devicesCnt;
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d124      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d11f      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3302      	adds	r3, #2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11a      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3303      	adds	r3, #3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d110      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3305      	adds	r3, #5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	3306      	adds	r3, #6
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	3307      	adds	r3, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8001b74:	231f      	movs	r3, #31
 8001b76:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b0b      	cmp	r3, #11
 8001b7c:	d00a      	beq.n	8001b94 <onewireDS18B20_setAdcWidth+0x86>
 8001b7e:	2b0b      	cmp	r3, #11
 8001b80:	dc0d      	bgt.n	8001b9e <onewireDS18B20_setAdcWidth+0x90>
 8001b82:	2b09      	cmp	r3, #9
 8001b84:	d010      	beq.n	8001ba8 <onewireDS18B20_setAdcWidth+0x9a>
 8001b86:	2b0a      	cmp	r3, #10
 8001b88:	d109      	bne.n	8001b9e <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	73fb      	strb	r3, [r7, #15]
		break;
 8001b92:	e00a      	b.n	8001baa <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b9c:	e005      	b.n	8001baa <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ba4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ba6:	e000      	b.n	8001baa <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8001ba8:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001baa:	f7ff fe87 	bl	80018bc <onewireMasterCheck_presence>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11b      	bne.n	8001bec <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001bba:	20cc      	movs	r0, #204	; 0xcc
 8001bbc:	f7ff fdb6 	bl	800172c <onewireMasterWr_byte>
 8001bc0:	e005      	b.n	8001bce <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001bc2:	2055      	movs	r0, #85	; 0x55
 8001bc4:	f7ff fdb2 	bl	800172c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f7ff fdcd 	bl	8001768 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001bce:	204e      	movs	r0, #78	; 0x4e
 8001bd0:	f7ff fdac 	bl	800172c <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fda8 	bl	800172c <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fda4 	bl	800172c <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fda0 	bl	800172c <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001bec:	f7ff fe66 	bl	80018bc <onewireMasterCheck_presence>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d124      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11f      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3302      	adds	r3, #2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11a      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3303      	adds	r3, #3
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d110      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3305      	adds	r3, #5
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10b      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3307      	adds	r3, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001c52:	f7ff fe33 	bl	80018bc <onewireMasterCheck_presence>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11d      	bne.n	8001c98 <onewireDS18B20_tempReq+0xa0>
		if (!romCode) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001c62:	20cc      	movs	r0, #204	; 0xcc
 8001c64:	f7ff fd62 	bl	800172c <onewireMasterWr_byte>
 8001c68:	e005      	b.n	8001c76 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001c6a:	2055      	movs	r0, #85	; 0x55
 8001c6c:	f7ff fd5e 	bl	800172c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fd79 	bl	8001768 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);  // xxx Debugging is needed here
 8001c76:	2044      	movs	r0, #68	; 0x44
 8001c78:	f7ff fd58 	bl	800172c <onewireMasterWr_byte>
#endif

		/* Convertion starts within 10 us after issuing Convert-T cmd above */

		/* End time */
		uint32_t waitTime_ms = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001c80:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001c84:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		if (waitTime_ms) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <onewireDS18B20_tempReq+0xa0>
			return HAL_GetTick() + waitTime_ms;
 8001c8c:	f005 fd54 	bl	8007738 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	e000      	b.n	8001c9a <onewireDS18B20_tempReq+0xa2>
		}
	}

	/* No device present */
	return 0UL;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d124      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d11f      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11a      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3303      	adds	r3, #3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d110      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3305      	adds	r3, #5
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3306      	adds	r3, #6
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC of sensor is ready */
	uint32_t t_now = HAL_GetTick();
 8001cfe:	f005 fd1b 	bl	8007738 <HAL_GetTick>
 8001d02:	60f8      	str	r0, [r7, #12]
	if (t_now < waitUntil) {
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d205      	bcs.n	8001d18 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fd1c 	bl	8007750 <HAL_Delay>
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
#endif

	/* 1w: Reset */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001d18:	f7ff fdd0 	bl	80018bc <onewireMasterCheck_presence>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <onewireDS18B20_tempRead+0xae>
		if (!romCode) {
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <onewireDS18B20_tempRead+0x8e>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001d28:	20cc      	movs	r0, #204	; 0xcc
 8001d2a:	f7ff fcff 	bl	800172c <onewireMasterWr_byte>
 8001d2e:	e005      	b.n	8001d3c <onewireDS18B20_tempRead+0x9a>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001d30:	2055      	movs	r0, #85	; 0x55
 8001d32:	f7ff fcfb 	bl	800172c <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f7ff fd16 	bl	8001768 <onewireMasterWr_romCode>
		}

		/* Read scratchpad */
		onewireMasterWr_byte(0xbeU);
 8001d3c:	20be      	movs	r0, #190	; 0xbe
 8001d3e:	f7ff fcf5 	bl	800172c <onewireMasterWr_byte>
		uint32_t scratchpad = onewireMasterRd_field(16);
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff fd92 	bl	800186c <onewireMasterRd_field>
 8001d48:	60b8      	str	r0, [r7, #8]
		return (int16_t)scratchpad;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	e000      	b.n	8001d52 <onewireDS18B20_tempRead+0xb0>
	}
	return 0UL;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <MX_I2C1_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00403E5A;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <MX_I2C1_Init+0x7c>)
 8001d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d96:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001d98:	f007 ff7a 	bl	8009c90 <HAL_I2C_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001da2:	f003 fd4d 	bl	8005840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001daa:	f009 fd54 	bl	800b856 <HAL_I2CEx_ConfigAnalogFilter>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001db4:	f003 fd44 	bl	8005840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db8:	2100      	movs	r1, #0
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_I2C1_Init+0x74>)
 8001dbc:	f009 fd96 	bl	800b8ec <HAL_I2CEx_ConfigDigitalFilter>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f003 fd3b 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000320 	.word	0x20000320
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	00403e5a 	.word	0x00403e5a

08001ddc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09e      	sub	sp, #120	; 0x78
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	2254      	movs	r2, #84	; 0x54
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00e fa21 	bl	8010244 <memset>
  if(i2cHandle->Instance==I2C1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_I2C_MspInit+0xc8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d146      	bne.n	8001e9a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00a fc90 	bl	800c740 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e26:	f003 fd0b 	bl	8005840 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e46:	2312      	movs	r3, #18
 8001e48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e52:	2304      	movs	r3, #4
 8001e54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <HAL_I2C_MspInit+0xd0>)
 8001e5e:	f007 fc99 	bl	8009794 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_I2C_MspInit+0xcc>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	201f      	movs	r0, #31
 8001e80:	f007 f9cc 	bl	800921c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e84:	201f      	movs	r0, #31
 8001e86:	f007 f9e5 	bl	8009254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2020      	movs	r0, #32
 8001e90:	f007 f9c4 	bl	800921c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e94:	2020      	movs	r0, #32
 8001e96:	f007 f9dd 	bl	8009254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3778      	adds	r7, #120	; 0x78
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73bb      	strb	r3, [r7, #14]
 8001ec6:	e03e      	b.n	8001f46 <i2cBusGetDeviceList+0x96>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001ec8:	7bbb      	ldrb	r3, [r7, #14]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	b299      	uxth	r1, r3
 8001ed0:	2364      	movs	r3, #100	; 0x64
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4820      	ldr	r0, [pc, #128]	; (8001f58 <i2cBusGetDeviceList+0xa8>)
 8001ed6:	f007 ffdb 	bl	8009e90 <HAL_I2C_IsDeviceReady>
 8001eda:	4603      	mov	r3, r0
 8001edc:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 8001ede:	7b7b      	ldrb	r3, [r7, #13]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d12c      	bne.n	8001f3e <i2cBusGetDeviceList+0x8e>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	2b60      	cmp	r3, #96	; 0x60
 8001eee:	d01f      	beq.n	8001f30 <i2cBusGetDeviceList+0x80>
 8001ef0:	2b60      	cmp	r3, #96	; 0x60
 8001ef2:	dc25      	bgt.n	8001f40 <i2cBusGetDeviceList+0x90>
 8001ef4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ef6:	d014      	beq.n	8001f22 <i2cBusGetDeviceList+0x72>
 8001ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8001efa:	dc21      	bgt.n	8001f40 <i2cBusGetDeviceList+0x90>
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d002      	beq.n	8001f06 <i2cBusGetDeviceList+0x56>
 8001f00:	2b22      	cmp	r3, #34	; 0x22
 8001f02:	d007      	beq.n	8001f14 <i2cBusGetDeviceList+0x64>
 8001f04:	e01c      	b.n	8001f40 <i2cBusGetDeviceList+0x90>
			case I2C_CHIP_ADDR_LCD_0:
				/* LCD 16x2 via Port-Expander MCP23017  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_0;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
				break;
 8001f12:	e015      	b.n	8001f40 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_1:
				/* LCD Gfx 240x128 via Smart-LCD  */
				*i2cDevicesBF |= I2C_DEVICE_LCD_1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]
				break;
 8001f20:	e00e      	b.n	8001f40 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_LCD_DIGPOT_1:
				/* LCD Gfx 240x128 via Smart-LCD (Digital POT if installed) */
				*i2cDevicesBF |= I2C_DEVICE_LCD_DIGPOT_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
				break;
 8001f2e:	e007      	b.n	8001f40 <i2cBusGetDeviceList+0x90>

			case I2C_CHIP_ADDR_DAC_MCP4725_0:
				/* DAC 0 */
				*i2cDevicesBF |= I2C_DEVICE_DAC_MCP4725_0;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	601a      	str	r2, [r3, #0]
				break;
 8001f3c:	e000      	b.n	8001f40 <i2cBusGetDeviceList+0x90>
			}
		}
 8001f3e:	bf00      	nop
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	3301      	adds	r3, #1
 8001f44:	73bb      	strb	r3, [r7, #14]
 8001f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dabc      	bge.n	8001ec8 <i2cBusGetDeviceList+0x18>
	}

	return i2cBusDeviceCnt;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000320 	.word	0x20000320

08001f5c <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	460b      	mov	r3, r1
 8001f68:	71bb      	strb	r3, [r7, #6]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001f6e:	2300      	movs	r3, #0
 8001f70:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f80:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f94:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001f96:	88bb      	ldrh	r3, [r7, #4]
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	b299      	uxth	r1, r3
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	480f      	ldr	r0, [pc, #60]	; (8001ffc <i2cDeviceDacMcp4725_set+0xa0>)
 8001fc0:	f007 fef6 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001fc8:	7b7b      	ldrb	r3, [r7, #13]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <i2cDeviceDacMcp4725_set+0x76>
		return 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <i2cDeviceDacMcp4725_set+0x96>
	}

	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001fd2:	bf00      	nop
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <i2cDeviceDacMcp4725_set+0xa0>)
 8001fd6:	f008 fa4e 	bl	800a476 <HAL_I2C_GetState>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d1f9      	bne.n	8001fd4 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <i2cDeviceDacMcp4725_set+0xa0>)
 8001fe2:	f008 fa56 	bl	800a492 <HAL_I2C_GetError>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d101      	bne.n	8001ff0 <i2cDeviceDacMcp4725_set+0x94>
		return 2U;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e000      	b.n	8001ff2 <i2cDeviceDacMcp4725_set+0x96>
	}
	return 0U;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000320 	.word	0x20000320

08002000 <i2cMCP23017_Lcd16x2_Write>:


static uint8_t i2cMCP23017_Lcd16x2_Write(uint8_t cmd, uint8_t rs)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	460a      	mov	r2, r1
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	4613      	mov	r3, r2
 800200e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	if (rs) {
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02c      	beq.n	8002070 <i2cMCP23017_Lcd16x2_Write+0x70>
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002016:	2312      	movs	r3, #18
 8002018:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001100;	// 0b0000 . LED . RS . R/!W . E
 800201e:	230c      	movs	r3, #12
 8002020:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002022:	f107 020c 	add.w	r2, r7, #12
 8002026:	2303      	movs	r3, #3
 8002028:	2140      	movs	r1, #64	; 0x40
 800202a:	4831      	ldr	r0, [pc, #196]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800202c:	f007 fec0 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <i2cMCP23017_Lcd16x2_Write+0x3e>
			return 1U;
 800203a:	2301      	movs	r3, #1
 800203c:	e053      	b.n	80020e6 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800203e:	bf00      	nop
 8002040:	482b      	ldr	r0, [pc, #172]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002042:	f008 fa18 	bl	800a476 <HAL_I2C_GetState>
 8002046:	4603      	mov	r3, r0
 8002048:	2b20      	cmp	r3, #32
 800204a:	d1f9      	bne.n	8002040 <i2cMCP23017_Lcd16x2_Write+0x40>
		}

		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 800204c:	2313      	movs	r3, #19
 800204e:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = 0b00001101;	// 0b0000 . LED . RS . R/!W . E
 8002050:	230d      	movs	r3, #13
 8002052:	737b      	strb	r3, [r7, #13]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002054:	f107 020c 	add.w	r2, r7, #12
 8002058:	2302      	movs	r3, #2
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4824      	ldr	r0, [pc, #144]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800205e:	f007 fea7 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 800206c:	2301      	movs	r3, #1
 800206e:	e03a      	b.n	80020e6 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	else {
		i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 8002070:	2312      	movs	r3, #18
 8002072:	733b      	strb	r3, [r7, #12]
		i2cTxBuf[1] = cmd;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	737b      	strb	r3, [r7, #13]
		i2cTxBuf[2] = 0b00001001;	// 0b0000 . LED . RS . R/!W . E
 8002078:	2309      	movs	r3, #9
 800207a:	73bb      	strb	r3, [r7, #14]
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800207c:	f107 020c 	add.w	r2, r7, #12
 8002080:	2303      	movs	r3, #3
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	481a      	ldr	r0, [pc, #104]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 8002086:	f007 fe93 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <i2cMCP23017_Lcd16x2_Write+0x98>
			return 1U;
 8002094:	2301      	movs	r3, #1
 8002096:	e026      	b.n	80020e6 <i2cMCP23017_Lcd16x2_Write+0xe6>
		}
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002098:	bf00      	nop
 800209a:	4815      	ldr	r0, [pc, #84]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 800209c:	f008 f9eb 	bl	800a476 <HAL_I2C_GetState>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d1f9      	bne.n	800209a <i2cMCP23017_Lcd16x2_Write+0x9a>
	}
	HAL_Delay(1UL);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f005 fb52 	bl	8007750 <HAL_Delay>

	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_B);
 80020ac:	2313      	movs	r3, #19
 80020ae:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 80020b0:	2308      	movs	r3, #8
 80020b2:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 80020b4:	f107 020c 	add.w	r2, r7, #12
 80020b8:	2302      	movs	r3, #2
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	480c      	ldr	r0, [pc, #48]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020be:	f007 fe77 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <i2cMCP23017_Lcd16x2_Write+0xd0>
		return 1U;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e00a      	b.n	80020e6 <i2cMCP23017_Lcd16x2_Write+0xe6>
	}
	/* Wait until transfer has completed */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80020d0:	bf00      	nop
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <i2cMCP23017_Lcd16x2_Write+0xf0>)
 80020d4:	f008 f9cf 	bl	800a476 <HAL_I2C_GetState>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d1f9      	bne.n	80020d2 <i2cMCP23017_Lcd16x2_Write+0xd2>
	}
	HAL_Delay(1UL);
 80020de:	2001      	movs	r0, #1
 80020e0:	f005 fb36 	bl	8007750 <HAL_Delay>
	return 0U;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000320 	.word	0x20000320

080020f4 <i2cMCP23017_Lcd16x2_ClrScr>:

uint8_t i2cMCP23017_Lcd16x2_ClrScr(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	/* ClrScr */
	return i2cMCP23017_Lcd16x2_Write(0x01U, 0U);
 80020f8:	2100      	movs	r1, #0
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff ff80 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}

08002106 <i2cMCP23017_Lcd16x2_SetAddr>:

uint8_t i2cMCP23017_Lcd16x2_SetAddr(uint8_t row, uint8_t col)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	460a      	mov	r2, r1
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	4613      	mov	r3, r2
 8002114:	71bb      	strb	r3, [r7, #6]
	row &= 0x01U;
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	71fb      	strb	r3, [r7, #7]
	col &= 0x0fU;
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = 0x80 | (row << 6) | col;
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	b2da      	uxtb	r2, r3
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	4313      	orrs	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002136:	73fb      	strb	r3, [r7, #15]

	/* Set DDRAM address */
	return i2cMCP23017_Lcd16x2_Write(cmd, 0U);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5f 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 8002142:	4603      	mov	r3, r0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <i2cMCP23017_Lcd16x2_WriteStr>:

uint8_t i2cMCP23017_Lcd16x2_WriteStr(uint8_t* str, uint8_t len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
	for (; len; --len) {
 8002158:	e00f      	b.n	800217a <i2cMCP23017_Lcd16x2_WriteStr+0x2e>
		/* Character */
		if (i2cMCP23017_Lcd16x2_Write(*(str++), 1U)) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff4b 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <i2cMCP23017_Lcd16x2_WriteStr+0x28>
			return 1U;
 8002170:	2301      	movs	r3, #1
 8002172:	e006      	b.n	8002182 <i2cMCP23017_Lcd16x2_WriteStr+0x36>
	for (; len; --len) {
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	3b01      	subs	r3, #1
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ec      	bne.n	800215a <i2cMCP23017_Lcd16x2_WriteStr+0xe>
		}
	}
	return 0U;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <i2cMCP23017_Lcd16x2_Init>:

static uint8_t i2cMCP23017_Lcd16x2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	uint8_t i2cTxBuf[3];
	HAL_StatusTypeDef stat;

	/* IO-Dir of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 8002192:	2300      	movs	r3, #0
 8002194:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Input until R/!W signal is stable
 8002196:	23ff      	movs	r3, #255	; 0xff
 8002198:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Output for all used pins
 800219a:	23f0      	movs	r3, #240	; 0xf0
 800219c:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 800219e:	463a      	mov	r2, r7
 80021a0:	2303      	movs	r3, #3
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	4854      	ldr	r0, [pc, #336]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021a6:	f007 fe03 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021ae:	79bb      	ldrb	r3, [r7, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <i2cMCP23017_Lcd16x2_Init+0x2c>
		return 1U;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e09a      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021b8:	bf00      	nop
 80021ba:	484f      	ldr	r0, [pc, #316]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021bc:	f008 f95b 	bl	800a476 <HAL_I2C_GetState>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d1f9      	bne.n	80021ba <i2cMCP23017_Lcd16x2_Init+0x2e>
    }

	/* Pull-up of port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPPU_A);
 80021c6:	230c      	movs	r3, #12
 80021c8:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0xffU;	// Pull up all data pins
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0xf0U;	// Pull up all unused pins
 80021ce:	23f0      	movs	r3, #240	; 0xf0
 80021d0:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 80021d2:	463a      	mov	r2, r7
 80021d4:	2303      	movs	r3, #3
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	4847      	ldr	r0, [pc, #284]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021da:	f007 fde9 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80021de:	4603      	mov	r3, r0
 80021e0:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <i2cMCP23017_Lcd16x2_Init+0x60>
		return 1U;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e080      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80021ec:	bf00      	nop
 80021ee:	4842      	ldr	r0, [pc, #264]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 80021f0:	f008 f941 	bl	800a476 <HAL_I2C_GetState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d1f9      	bne.n	80021ee <i2cMCP23017_Lcd16x2_Init+0x62>
    }

	/* GPIO bits of port A/B - turn backlight on */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_GPIO_A);
 80021fa:	2312      	movs	r3, #18
 80021fc:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;		//
 80021fe:	2300      	movs	r3, #0
 8002200:	707b      	strb	r3, [r7, #1]
	i2cTxBuf[2] = 0b00001000;	// 0b0000 . LED . RS . R/!W . E
 8002202:	2308      	movs	r3, #8
 8002204:	70bb      	strb	r3, [r7, #2]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 3);
 8002206:	463a      	mov	r2, r7
 8002208:	2303      	movs	r3, #3
 800220a:	2140      	movs	r1, #64	; 0x40
 800220c:	483a      	ldr	r0, [pc, #232]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800220e:	f007 fdcf 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002212:	4603      	mov	r3, r0
 8002214:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002216:	79bb      	ldrb	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <i2cMCP23017_Lcd16x2_Init+0x94>
		return 1U;
 800221c:	2301      	movs	r3, #1
 800221e:	e066      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002220:	bf00      	nop
 8002222:	4835      	ldr	r0, [pc, #212]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002224:	f008 f927 	bl	800a476 <HAL_I2C_GetState>
 8002228:	4603      	mov	r3, r0
 800222a:	2b20      	cmp	r3, #32
 800222c:	d1f9      	bne.n	8002222 <i2cMCP23017_Lcd16x2_Init+0x96>
    }

	/* IOCON for port A/B */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IOCON_A);
 800222e:	230a      	movs	r3, #10
 8002230:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002236:	463a      	mov	r2, r7
 8002238:	2302      	movs	r3, #2
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	482e      	ldr	r0, [pc, #184]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800223e:	f007 fdb7 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002242:	4603      	mov	r3, r0
 8002244:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <i2cMCP23017_Lcd16x2_Init+0xc4>
		return 1U;
 800224c:	2301      	movs	r3, #1
 800224e:	e04e      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002250:	bf00      	nop
 8002252:	4829      	ldr	r0, [pc, #164]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002254:	f008 f90f 	bl	800a476 <HAL_I2C_GetState>
 8002258:	4603      	mov	r3, r0
 800225a:	2b20      	cmp	r3, #32
 800225c:	d1f9      	bne.n	8002252 <i2cMCP23017_Lcd16x2_Init+0xc6>
    }

	/* Turn Port A to output direction */
	i2cTxBuf[0] = (uint8_t) (I2C_MCP23017_ADDR_IODIR_A);
 800225e:	2300      	movs	r3, #0
 8002260:	703b      	strb	r3, [r7, #0]
	i2cTxBuf[1] = 0x00U;	// Output mode
 8002262:	2300      	movs	r3, #0
 8002264:	707b      	strb	r3, [r7, #1]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_0 << 1), i2cTxBuf, 2);
 8002266:	463a      	mov	r2, r7
 8002268:	2302      	movs	r3, #2
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4822      	ldr	r0, [pc, #136]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 800226e:	f007 fd9f 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002272:	4603      	mov	r3, r0
 8002274:	71bb      	strb	r3, [r7, #6]
	if (stat != HAL_OK) {
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <i2cMCP23017_Lcd16x2_Init+0xf4>
		return 1U;
 800227c:	2301      	movs	r3, #1
 800227e:	e036      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002280:	bf00      	nop
 8002282:	481d      	ldr	r0, [pc, #116]	; (80022f8 <i2cMCP23017_Lcd16x2_Init+0x16c>)
 8002284:	f008 f8f7 	bl	800a476 <HAL_I2C_GetState>
 8002288:	4603      	mov	r3, r0
 800228a:	2b20      	cmp	r3, #32
 800228c:	d1f9      	bne.n	8002282 <i2cMCP23017_Lcd16x2_Init+0xf6>


	/* RESET sequence starts */

	/* Function set Interface has to be sent 4 times */
	for (uint8_t cnt = 4; cnt; --cnt) {
 800228e:	2304      	movs	r3, #4
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	e00b      	b.n	80022ac <i2cMCP23017_Lcd16x2_Init+0x120>
		/* Function Set */
		if (i2cMCP23017_Lcd16x2_Write(0x38U, 0U)) {
 8002294:	2100      	movs	r1, #0
 8002296:	2038      	movs	r0, #56	; 0x38
 8002298:	f7ff feb2 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <i2cMCP23017_Lcd16x2_Init+0x11a>
			return 1U;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e023      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	for (uint8_t cnt = 4; cnt; --cnt) {
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <i2cMCP23017_Lcd16x2_Init+0x108>
		}
	}

	/* Display OFF */
	if (i2cMCP23017_Lcd16x2_Write(0x08U, 0U)) {
 80022b2:	2100      	movs	r1, #0
 80022b4:	2008      	movs	r0, #8
 80022b6:	f7ff fea3 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <i2cMCP23017_Lcd16x2_Init+0x138>
		return 1U;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e014      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	i2cMCP23017_Lcd16x2_ClrScr();
 80022c4:	f7ff ff16 	bl	80020f4 <i2cMCP23017_Lcd16x2_ClrScr>

	/* Entry Mode Set */
	if (i2cMCP23017_Lcd16x2_Write(0x06U, 0U)) {
 80022c8:	2100      	movs	r1, #0
 80022ca:	2006      	movs	r0, #6
 80022cc:	f7ff fe98 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <i2cMCP23017_Lcd16x2_Init+0x14e>
		return 1U;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e009      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}

	/* Display ON */
	if (i2cMCP23017_Lcd16x2_Write(0x0cU, 0U)) {
 80022da:	2100      	movs	r1, #0
 80022dc:	200c      	movs	r0, #12
 80022de:	f7ff fe8f 	bl	8002000 <i2cMCP23017_Lcd16x2_Write>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <i2cMCP23017_Lcd16x2_Init+0x160>
		return 1U;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <i2cMCP23017_Lcd16x2_Init+0x162>
	}
	return 0U;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000320 	.word	0x20000320

080022fc <i2cMCP23017_Lcd16x2_Welcome>:

void i2cMCP23017_Lcd16x2_Welcome(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	i2cMCP23017_Lcd16x2_Init();
 8002300:	f7ff ff44 	bl	800218c <i2cMCP23017_Lcd16x2_Init>

	/* Goto first line */
	i2cMCP23017_Lcd16x2_SetAddr(0U,  1U);
 8002304:	2101      	movs	r1, #1
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff fefd 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L0_P1_str, sizeof(I2c_Lcd_Welcome_L0_P1_str) - 1);
 800230c:	210d      	movs	r1, #13
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <i2cMCP23017_Lcd16x2_Welcome+0x3c>)
 8002310:	f7ff ff1c 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Goto second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U,  1U);
 8002314:	2101      	movs	r1, #1
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fef5 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P1_str, sizeof(I2c_Lcd_Welcome_L1_P1_str) - 1);
 800231c:	2106      	movs	r1, #6
 800231e:	4807      	ldr	r0, [pc, #28]	; (800233c <i2cMCP23017_Lcd16x2_Welcome+0x40>)
 8002320:	f7ff ff14 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>

	i2cMCP23017_Lcd16x2_SetAddr(1U, 10U);
 8002324:	210a      	movs	r1, #10
 8002326:	2001      	movs	r0, #1
 8002328:	f7ff feed 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr((uint8_t*)I2c_Lcd_Welcome_L1_P2_str, sizeof(I2c_Lcd_Welcome_L1_P2_str) - 1);
 800232c:	2105      	movs	r1, #5
 800232e:	4804      	ldr	r0, [pc, #16]	; (8002340 <i2cMCP23017_Lcd16x2_Welcome+0x44>)
 8002330:	f7ff ff0c 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08014744 	.word	0x08014744
 800233c:	08014754 	.word	0x08014754
 8002340:	0801475c 	.word	0x0801475c

08002344 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>:

void i2cMCP23017_Lcd16x2_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b08e      	sub	sp, #56	; 0x38
 8002348:	af02      	add	r7, sp, #8
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	80fb      	strh	r3, [r7, #6]
	uint8_t line0_str[] = "== Heating up ==";
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x94>)
 8002352:	f107 041c 	add.w	r4, r7, #28
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	7023      	strb	r3, [r4, #0]
	uint8_t line1_str[] = "                ";
 8002360:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x98>)
 8002362:	f107 0408 	add.w	r4, r7, #8
 8002366:	461d      	mov	r5, r3
 8002368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800236a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	7023      	strb	r3, [r4, #0]

	if (temp && tAcc) {
 8002370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x62>
		if (tAcc > 999UL) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002384:	d302      	bcc.n	800238c <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x48>
			tAcc = 999UL;
 8002386:	f240 33e7 	movw	r3, #999	; 0x3e7
 800238a:	603b      	str	r3, [r7, #0]
		}
		snprintf((char*)line1_str, sizeof(line1_str), "%02d%cC / Acc %3ldns", temp, 0xdfU, tAcc);
 800238c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002390:	f107 0008 	add.w	r0, r7, #8
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	23df      	movs	r3, #223	; 0xdf
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp+0x9c>)
 80023a0:	2111      	movs	r1, #17
 80023a2:	f00e fbc1 	bl	8010b28 <sniprintf>
	}

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 80023a6:	2100      	movs	r1, #0
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7ff feac 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	2110      	movs	r1, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fec9 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 80023ba:	2100      	movs	r1, #0
 80023bc:	2001      	movs	r0, #1
 80023be:	f7ff fea2 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	2110      	movs	r1, #16
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff febf 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>
}
 80023ce:	bf00      	nop
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bdb0      	pop	{r4, r5, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	08014260 	.word	0x08014260
 80023dc:	08014274 	.word	0x08014274
 80023e0:	08014248 	.word	0x08014248

080023e4 <i2cMCP23017_Lcd16x2_Locked>:

void i2cMCP23017_Lcd16x2_Locked(int16_t temp, uint32_t tAcc, int32_t sumDev)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b090      	sub	sp, #64	; 0x40
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	4603      	mov	r3, r0
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	81fb      	strh	r3, [r7, #14]
	uint8_t line0_str[17];
	uint8_t line1_str[17];

	if (tAcc > 999UL) {
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f8:	d302      	bcc.n	8002400 <i2cMCP23017_Lcd16x2_Locked+0x1c>
		tAcc = 999UL;
 80023fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80023fe:	60bb      	str	r3, [r7, #8]
	}

	snprintf((char*)line0_str, sizeof(line0_str), "== Lockd %02d%cC ==", temp, 0xdfU);
 8002400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002404:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002408:	22df      	movs	r2, #223	; 0xdf
 800240a:	9200      	str	r2, [sp, #0]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <i2cMCP23017_Lcd16x2_Locked+0x74>)
 800240e:	2111      	movs	r1, #17
 8002410:	f00e fb8a 	bl	8010b28 <sniprintf>
	snprintf((char*)line1_str, sizeof(line1_str), "%+05ldps/s, %3ldns", sumDev, tAcc);
 8002414:	f107 0010 	add.w	r0, r7, #16
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0f      	ldr	r2, [pc, #60]	; (800245c <i2cMCP23017_Lcd16x2_Locked+0x78>)
 8002420:	2111      	movs	r1, #17
 8002422:	f00e fb81 	bl	8010b28 <sniprintf>

	/* First line */
	i2cMCP23017_Lcd16x2_SetAddr(0U, 0U);
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff fe6c 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line0_str, sizeof(line0_str) - 1);
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	2110      	movs	r1, #16
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe89 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>

	/* Second line */
	i2cMCP23017_Lcd16x2_SetAddr(1U, 0U);
 800243a:	2100      	movs	r1, #0
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff fe62 	bl	8002106 <i2cMCP23017_Lcd16x2_SetAddr>
	i2cMCP23017_Lcd16x2_WriteStr(line1_str, sizeof(line1_str) - 1);
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	2110      	movs	r1, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fe7f 	bl	800214c <i2cMCP23017_Lcd16x2_WriteStr>
}
 800244e:	bf00      	nop
 8002450:	3738      	adds	r7, #56	; 0x38
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08014288 	.word	0x08014288
 800245c:	0801429c 	.word	0x0801429c

08002460 <i2cSmartLCD_Gfx240x128_Read>:


static uint8_t i2cSmartLCD_Gfx240x128_Read(uint8_t cmd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];
	uint8_t i2cRxBuf[1]	= { 0 };
 800246a:	2300      	movs	r3, #0
 800246c:	723b      	strb	r3, [r7, #8]

	i2cTxBuf[0] = cmd;
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	733b      	strb	r3, [r7, #12]

	stat = HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf), I2C_FIRST_FRAME);
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2301      	movs	r3, #1
 800247c:	2144      	movs	r1, #68	; 0x44
 800247e:	481f      	ldr	r0, [pc, #124]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002480:	f007 fe0e 	bl	800a0a0 <HAL_I2C_Master_Seq_Transmit_IT>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <i2cSmartLCD_Gfx240x128_Read+0x32>
		return 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	e02f      	b.n	80024f2 <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002492:	bf00      	nop
 8002494:	4819      	ldr	r0, [pc, #100]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 8002496:	f007 ffee 	bl	800a476 <HAL_I2C_GetState>
 800249a:	4603      	mov	r3, r0
 800249c:	2b20      	cmp	r3, #32
 800249e:	d1f9      	bne.n	8002494 <i2cSmartLCD_Gfx240x128_Read+0x34>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80024a0:	4816      	ldr	r0, [pc, #88]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024a2:	f007 fff6 	bl	800a492 <HAL_I2C_GetError>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d101      	bne.n	80024b0 <i2cSmartLCD_Gfx240x128_Read+0x50>
		/* No ACK */
		return 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e020      	b.n	80024f2 <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	stat = HAL_I2C_Master_Seq_Receive_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cRxBuf, sizeof(i2cRxBuf), I2C_LAST_FRAME);
 80024b0:	f107 0208 	add.w	r2, r7, #8
 80024b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2301      	movs	r3, #1
 80024bc:	2144      	movs	r1, #68	; 0x44
 80024be:	480f      	ldr	r0, [pc, #60]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024c0:	f007 fe72 	bl	800a1a8 <HAL_I2C_Master_Seq_Receive_IT>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <i2cSmartLCD_Gfx240x128_Read+0x72>
		return 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e00f      	b.n	80024f2 <i2cSmartLCD_Gfx240x128_Read+0x92>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80024d2:	bf00      	nop
 80024d4:	4809      	ldr	r0, [pc, #36]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024d6:	f007 ffce 	bl	800a476 <HAL_I2C_GetState>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d1f9      	bne.n	80024d4 <i2cSmartLCD_Gfx240x128_Read+0x74>
    }
	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <i2cSmartLCD_Gfx240x128_Read+0x9c>)
 80024e2:	f007 ffd6 	bl	800a492 <HAL_I2C_GetError>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d101      	bne.n	80024f0 <i2cSmartLCD_Gfx240x128_Read+0x90>
		/* No ACK */
		return 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <i2cSmartLCD_Gfx240x128_Read+0x92>
	}

	/* Returned byte */
	return i2cRxBuf[0];
 80024f0:	7a3b      	ldrb	r3, [r7, #8]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000320 	.word	0x20000320

08002500 <i2cSmartLCD_Gfx240x128_Busy_wait>:

static uint8_t i2cSmartLCD_Gfx240x128_Busy_wait(uint32_t timeout_ms)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	const uint32_t 	timeout_ts = timeout_ms + HAL_GetTick();
 8002508:	f005 f916 	bl	8007738 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
	uint32_t 		now_ts;
	uint8_t 		lcd1State;

	do {
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 8002514:	2003      	movs	r0, #3
 8002516:	f7ff ffa3 	bl	8002460 <i2cSmartLCD_Gfx240x128_Read>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]

		if (!(lcd1State & 0x01)) {
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <i2cSmartLCD_Gfx240x128_Busy_wait+0x2c>
			/* Not busy - ready for new command */
			return 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	e00c      	b.n	8002546 <i2cSmartLCD_Gfx240x128_Busy_wait+0x46>
		}

		/* Check for current timestamp */
		now_ts = HAL_GetTick();
 800252c:	f005 f904 	bl	8007738 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

		if (timeout_ts <= now_ts) {
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	429a      	cmp	r2, r3
 8002538:	d903      	bls.n	8002542 <i2cSmartLCD_Gfx240x128_Busy_wait+0x42>
			break;
		}

		/* Delay for next test */
		HAL_Delay(1UL);
 800253a:	2001      	movs	r0, #1
 800253c:	f005 f908 	bl	8007750 <HAL_Delay>
		lcd1State = i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_STATE);
 8002540:	e7e8      	b.n	8002514 <i2cSmartLCD_Gfx240x128_Busy_wait+0x14>
			break;
 8002542:	bf00      	nop
	} while (1);
	return 1U;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <i2cSmartLCD_Gfx240x128_Write_parcnt0>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt0(uint8_t cmd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[1];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800255a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800255e:	f7ff ffcf 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	733b      	strb	r3, [r7, #12]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 8002566:	f107 020c 	add.w	r2, r7, #12
 800256a:	2301      	movs	r3, #1
 800256c:	2144      	movs	r1, #68	; 0x44
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002570:	f007 fc1e 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x32>
		return 1U;
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8002582:	bf00      	nop
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002586:	f007 ff76 	bl	800a476 <HAL_I2C_GetState>
 800258a:	4603      	mov	r3, r0
 800258c:	2b20      	cmp	r3, #32
 800258e:	d1f9      	bne.n	8002584 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x34>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002590:	4806      	ldr	r0, [pc, #24]	; (80025ac <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x5c>)
 8002592:	f007 ff7e 	bl	800a492 <HAL_I2C_GetError>
 8002596:	4603      	mov	r3, r0
 8002598:	2b10      	cmp	r3, #16
 800259a:	d101      	bne.n	80025a0 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x50>
		return 1U;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <i2cSmartLCD_Gfx240x128_Write_parcnt0+0x52>
	}
	return 0U;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000320 	.word	0x20000320

080025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt1(uint8_t cmd, uint8_t par1)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[2];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80025c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c4:	f7ff ff9c 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	737b      	strb	r3, [r7, #13]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80025d0:	f107 020c 	add.w	r2, r7, #12
 80025d4:	2302      	movs	r3, #2
 80025d6:	2144      	movs	r1, #68	; 0x44
 80025d8:	480e      	ldr	r0, [pc, #56]	; (8002614 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025da:	f007 fbe9 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3c>
		return 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e00f      	b.n	800260c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80025ec:	bf00      	nop
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025f0:	f007 ff41 	bl	800a476 <HAL_I2C_GetState>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d1f9      	bne.n	80025ee <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x3e>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x64>)
 80025fc:	f007 ff49 	bl	800a492 <HAL_I2C_GetError>
 8002600:	4603      	mov	r3, r0
 8002602:	2b10      	cmp	r3, #16
 8002604:	d101      	bne.n	800260a <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5a>
		return 1U;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <i2cSmartLCD_Gfx240x128_Write_parcnt1+0x5c>
	}
	return 0U;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000320 	.word	0x20000320

08002618 <i2cSmartLCD_Gfx240x128_Write_parcnt2>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt2(uint8_t cmd, uint8_t par1, uint8_t par2)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	460b      	mov	r3, r1
 8002624:	71bb      	strb	r3, [r7, #6]
 8002626:	4613      	mov	r3, r2
 8002628:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[3];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800262a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800262e:	f7ff ff67 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	733b      	strb	r3, [r7, #12]
	i2cTxBuf[1] = par1;
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	737b      	strb	r3, [r7, #13]
	i2cTxBuf[2] = par2;
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	73bb      	strb	r3, [r7, #14]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	2303      	movs	r3, #3
 8002644:	2144      	movs	r1, #68	; 0x44
 8002646:	480f      	ldr	r0, [pc, #60]	; (8002684 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 8002648:	f007 fbb2 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x42>
		return 1U;
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800265a:	bf00      	nop
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 800265e:	f007 ff0a 	bl	800a476 <HAL_I2C_GetState>
 8002662:	4603      	mov	r3, r0
 8002664:	2b20      	cmp	r3, #32
 8002666:	d1f9      	bne.n	800265c <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x44>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 8002668:	4806      	ldr	r0, [pc, #24]	; (8002684 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x6c>)
 800266a:	f007 ff12 	bl	800a492 <HAL_I2C_GetError>
 800266e:	4603      	mov	r3, r0
 8002670:	2b10      	cmp	r3, #16
 8002672:	d101      	bne.n	8002678 <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x60>
		return 1U;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <i2cSmartLCD_Gfx240x128_Write_parcnt2+0x62>
	}
	return 0U;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000320 	.word	0x20000320

08002688 <i2cSmartLCD_Gfx240x128_Write_parcnt3>:

static uint8_t i2cSmartLCD_Gfx240x128_Write_parcnt3(uint8_t cmd, uint8_t par1, uint8_t par2, uint8_t par3)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	4603      	mov	r3, r0
 800269c:	71bb      	strb	r3, [r7, #6]
 800269e:	460b      	mov	r3, r1
 80026a0:	717b      	strb	r3, [r7, #5]
 80026a2:	4613      	mov	r3, r2
 80026a4:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef stat;
	uint8_t i2cTxBuf[4];

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80026a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026aa:	f7ff ff29 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	i2cTxBuf[0] = cmd;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = par1;
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	727b      	strb	r3, [r7, #9]
	i2cTxBuf[2] = par2;
 80026b6:	797b      	ldrb	r3, [r7, #5]
 80026b8:	72bb      	strb	r3, [r7, #10]
	i2cTxBuf[3] = par3;
 80026ba:	793b      	ldrb	r3, [r7, #4]
 80026bc:	72fb      	strb	r3, [r7, #11]
	stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, sizeof(i2cTxBuf));
 80026be:	f107 0208 	add.w	r2, r7, #8
 80026c2:	2304      	movs	r3, #4
 80026c4:	2144      	movs	r1, #68	; 0x44
 80026c6:	480f      	ldr	r0, [pc, #60]	; (8002704 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026c8:	f007 fb72 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x52>
		return 1U;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80026da:	bf00      	nop
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026de:	f007 feca 	bl	800a476 <HAL_I2C_GetState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d1f9      	bne.n	80026dc <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x54>
    }
	/* Check for ACK */
	if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x7c>)
 80026ea:	f007 fed2 	bl	800a492 <HAL_I2C_GetError>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d101      	bne.n	80026f8 <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x70>
		return 1U;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <i2cSmartLCD_Gfx240x128_Write_parcnt3+0x72>
	}
	return 0U;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	20000320 	.word	0x20000320

08002708 <i2cSmartLCD_Gfx240x128_GetVer>:

uint8_t i2cSmartLCD_Gfx240x128_GetVer(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800270c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002710:	f7ff fef6 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	return i2cSmartLCD_Gfx240x128_Read(LCD1_SMART_LCD_CMD_GET_VER);
 8002714:	2001      	movs	r0, #1
 8002716:	f7ff fea3 	bl	8002460 <i2cSmartLCD_Gfx240x128_Read>
 800271a:	4603      	mov	r3, r0
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}

08002720 <i2cSmartLCD_Gfx240x128_WriteText>:

uint8_t i2cSmartLCD_Gfx240x128_WriteText(uint8_t pos_x, uint8_t pos_y, uint8_t len, const uint8_t* str)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b0c5      	sub	sp, #276	; 0x114
 8002724:	af00      	add	r7, sp, #0
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	4611      	mov	r1, r2
 800272c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002730:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800273a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800273e:	4622      	mov	r2, r4
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002746:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800274a:	4602      	mov	r2, r0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002752:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 8002756:	460a      	mov	r2, r1
 8002758:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef stat;
	uint8_t remaining;
	uint8_t i2cTxBuf[256] = { 0 };
 800275a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800275e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	3304      	adds	r3, #4
 8002768:	22fc      	movs	r2, #252	; 0xfc
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f00d fd69 	bl	8010244 <memset>

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 8002772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002776:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2bef      	cmp	r3, #239	; 0xef
 800277e:	d903      	bls.n	8002788 <i2cSmartLCD_Gfx240x128_WriteText+0x68>
			Error_Handler();
 8002780:	f003 f85e 	bl	8005840 <Error_Handler>
			return 2U;
 8002784:	2302      	movs	r3, #2
 8002786:	e0cc      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 8002788:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800278c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002790:	f993 3000 	ldrsb.w	r3, [r3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da03      	bge.n	80027a0 <i2cSmartLCD_Gfx240x128_WriteText+0x80>
			Error_Handler();
 8002798:	f003 f852 	bl	8005840 <Error_Handler>
			return 3U;
 800279c:	2303      	movs	r3, #3
 800279e:	e0c0      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}

		/* Overflow */
		if (((LCD1_SMART_LCD_SIZE_X - 1U) - (len * LCD1_SYSFONT_WIDTH)) < pos_x) {
 80027a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027a4:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	f1c3 02ef 	rsb	r2, r3, #239	; 0xef
 80027b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f080 80a5 	bcs.w	8002910 <i2cSmartLCD_Gfx240x128_WriteText+0x1f0>
			Error_Handler();
 80027c6:	f003 f83b 	bl	8005840 <Error_Handler>
			return 4U;
 80027ca:	2304      	movs	r3, #4
 80027cc:	e0a9      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}
	}

	while (len) {
		/* Partitioning */
		if (len > LCD1_SMART_LCD_STR_MAXLEN_BUG) {
 80027ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027d2:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b07      	cmp	r3, #7
 80027da:	d903      	bls.n	80027e4 <i2cSmartLCD_Gfx240x128_WriteText+0xc4>
			remaining = LCD1_SMART_LCD_STR_MAXLEN_BUG;
 80027dc:	2307      	movs	r3, #7
 80027de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027e2:	e006      	b.n	80027f2 <i2cSmartLCD_Gfx240x128_WriteText+0xd2>
		} else {
			remaining = len;
 80027e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e8:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		}
		len -= remaining;
 80027f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027f6:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 80027fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027fe:	f2a2 120b 	subw	r2, r2, #267	; 0x10b
 8002802:	7811      	ldrb	r1, [r2, #0]
 8002804:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002808:	1a8a      	subs	r2, r1, r2
 800280a:	701a      	strb	r2, [r3, #0]

		/* Set cursor */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_x, pos_y)) {
 800280c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002810:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800281a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	2020      	movs	r0, #32
 8002824:	f7ff fef8 	bl	8002618 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <i2cSmartLCD_Gfx240x128_WriteText+0x112>
			return 1U;
 800282e:	2301      	movs	r3, #1
 8002830:	e077      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}

		/* Copy send buffer */
		i2cTxBuf[0] = LCD1_SMART_LCD_CMD_WRITE;
 8002832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800283a:	2230      	movs	r2, #48	; 0x30
 800283c:	701a      	strb	r2, [r3, #0]
		i2cTxBuf[1] = remaining;
 800283e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002846:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800284a:	705a      	strb	r2, [r3, #1]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 800284c:	2300      	movs	r3, #0
 800284e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002852:	e018      	b.n	8002886 <i2cSmartLCD_Gfx240x128_WriteText+0x166>
			i2cTxBuf[2 + idx] = *(str++);
 8002854:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002858:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002862:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	6011      	str	r1, [r2, #0]
 800286a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800286e:	3202      	adds	r2, #2
 8002870:	7819      	ldrb	r1, [r3, #0]
 8002872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800287a:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0U; idx < remaining; ++idx) {
 800287c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002880:	3301      	adds	r3, #1
 8002882:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8002886:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800288a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800288e:	429a      	cmp	r2, r3
 8002890:	d3e0      	bcc.n	8002854 <i2cSmartLCD_Gfx240x128_WriteText+0x134>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002896:	f7ff fe33 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 800289a:	2002      	movs	r0, #2
 800289c:	f004 ff58 	bl	8007750 <HAL_Delay>

		/* Write Text since pen position */
		stat = HAL_I2C_Master_Transmit_IT(&hi2c1, (I2C_CHIP_ADDR_LCD_1 << 1), i2cTxBuf, (remaining + 2));
 80028a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3302      	adds	r3, #2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f107 020c 	add.w	r2, r7, #12
 80028ae:	2144      	movs	r1, #68	; 0x44
 80028b0:	481e      	ldr	r0, [pc, #120]	; (800292c <i2cSmartLCD_Gfx240x128_WriteText+0x20c>)
 80028b2:	f007 fa7d 	bl	8009db0 <HAL_I2C_Master_Transmit_IT>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		if (stat != HAL_OK) {
 80028bc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <i2cSmartLCD_Gfx240x128_WriteText+0x1a8>
			return 1U;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e02c      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}
		/* Wait until transfer has completed */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80028c8:	bf00      	nop
 80028ca:	4818      	ldr	r0, [pc, #96]	; (800292c <i2cSmartLCD_Gfx240x128_WriteText+0x20c>)
 80028cc:	f007 fdd3 	bl	800a476 <HAL_I2C_GetState>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d1f9      	bne.n	80028ca <i2cSmartLCD_Gfx240x128_WriteText+0x1aa>
		}
		/* Check for ACK */
		if (HAL_I2C_GetError(&hi2c1) == I2C_FLAG_AF) {
 80028d6:	4815      	ldr	r0, [pc, #84]	; (800292c <i2cSmartLCD_Gfx240x128_WriteText+0x20c>)
 80028d8:	f007 fddb 	bl	800a492 <HAL_I2C_GetError>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d101      	bne.n	80028e6 <i2cSmartLCD_Gfx240x128_WriteText+0x1c6>
			return 1U;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01d      	b.n	8002922 <i2cSmartLCD_Gfx240x128_WriteText+0x202>
		}

		/* Busy flag does not work reliable when printing glyphs, add extra delay */
		HAL_Delay(2UL);
 80028e6:	2002      	movs	r0, #2
 80028e8:	f004 ff32 	bl	8007750 <HAL_Delay>

		pos_x += remaining * LCD1_SYSFONT_WIDTH;  // Smart-LCD: sysfont->width
 80028ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028f0:	461a      	mov	r2, r3
 80028f2:	0052      	lsls	r2, r2, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	b2d9      	uxtb	r1, r3
 80028fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028fe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002902:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002906:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	440a      	add	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
	while (len) {
 8002910:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002914:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f af57 	bne.w	80027ce <i2cSmartLCD_Gfx240x128_WriteText+0xae>
	}
	return 0U;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	20000320 	.word	0x20000320

08002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_SetStartPos(uint8_t fromPos_x, uint8_t fromPos_y)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	/* Smart-LCD: TWI_SMART_LCD_CMD_SET_POS_X_Y */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= fromPos_x) {
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2bef      	cmp	r3, #239	; 0xef
 8002944:	d903      	bls.n	800294e <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x1e>
			Error_Handler();
 8002946:	f002 ff7b 	bl	8005840 <Error_Handler>
			return 2U;
 800294a:	2302      	movs	r3, #2
 800294c:	e017      	b.n	800297e <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= fromPos_y) {
 800294e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da03      	bge.n	800295e <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x2e>
			Error_Handler();
 8002956:	f002 ff73 	bl	8005840 <Error_Handler>
			return 3U;
 800295a:	2303      	movs	r3, #3
 800295c:	e00f      	b.n	800297e <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 800295e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002962:	f7ff fdcd 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, fromPos_x, fromPos_y)) {
 8002966:	79ba      	ldrb	r2, [r7, #6]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4619      	mov	r1, r3
 800296c:	2020      	movs	r0, #32
 800296e:	f7ff fe53 	bl	8002618 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4c>
		return 1U;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <i2cSmartLCD_Gfx240x128_Draw_SetStartPos+0x4e>
	}
	return 0U;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Line_to(uint8_t toPos_x, uint8_t toPos_y, uint8_t fillType)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	460b      	mov	r3, r1
 8002992:	71bb      	strb	r3, [r7, #6]
 8002994:	4613      	mov	r3, r2
 8002996:	717b      	strb	r3, [r7, #5]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_LINE */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= toPos_x) {
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2bef      	cmp	r3, #239	; 0xef
 800299c:	d903      	bls.n	80029a6 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x20>
			Error_Handler();
 800299e:	f002 ff4f 	bl	8005840 <Error_Handler>
			return 2U;
 80029a2:	2302      	movs	r3, #2
 80029a4:	e017      	b.n	80029d6 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= toPos_y) {
 80029a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da03      	bge.n	80029b6 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x30>
			Error_Handler();
 80029ae:	f002 ff47 	bl	8005840 <Error_Handler>
			return 3U;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 80029b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ba:	f7ff fda1 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_LINE, toPos_x, toPos_y, fillType)) {
 80029be:	797b      	ldrb	r3, [r7, #5]
 80029c0:	79ba      	ldrb	r2, [r7, #6]
 80029c2:	79f9      	ldrb	r1, [r7, #7]
 80029c4:	2032      	movs	r0, #50	; 0x32
 80029c6:	f7ff fe5f 	bl	8002688 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x4e>
		return 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <i2cSmartLCD_Gfx240x128_Draw_Line_to+0x50>
	}
	return 0U;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <i2cSmartLCD_Gfx240x128_Draw_Point>:

#if defined(PLL_BY_SOFTWARE)
static uint8_t i2cSmartLCD_Gfx240x128_Draw_Point(uint8_t pos_x, uint8_t pos_y, uint8_t fillType)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	460b      	mov	r3, r1
 80029ea:	71bb      	strb	r3, [r7, #6]
 80029ec:	4613      	mov	r3, r2
 80029ee:	717b      	strb	r3, [r7, #5]
	uint8_t ret;

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_x) {
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2bef      	cmp	r3, #239	; 0xef
 80029f4:	d903      	bls.n	80029fe <i2cSmartLCD_Gfx240x128_Draw_Point+0x20>
			Error_Handler();
 80029f6:	f002 ff23 	bl	8005840 <Error_Handler>
			return 2U;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e01b      	b.n	8002a36 <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_y) {
 80029fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da03      	bge.n	8002a0e <i2cSmartLCD_Gfx240x128_Draw_Point+0x30>
			Error_Handler();
 8002a06:	f002 ff1b 	bl	8005840 <Error_Handler>
			return 3U;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e013      	b.n	8002a36 <i2cSmartLCD_Gfx240x128_Draw_Point+0x58>
		}
	}

	/* There is no explicit draw pixel in Smart-LCD */
	ret  = i2cSmartLCD_Gfx240x128_Draw_SetStartPos(pos_x, pos_y);
 8002a0e:	79ba      	ldrb	r2, [r7, #6]
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff8b 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]
	ret |= i2cSmartLCD_Gfx240x128_Draw_Line_to(pos_x, pos_y, fillType);
 8002a1e:	797a      	ldrb	r2, [r7, #5]
 8002a20:	79b9      	ldrb	r1, [r7, #6]
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffae 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	73fb      	strb	r3, [r7, #15]
	return ret;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <i2cSmartLCD_Gfx240x128_Draw_Rect>:
#endif

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t lineType)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4604      	mov	r4, r0
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	4603      	mov	r3, r0
 8002a52:	71bb      	strb	r3, [r7, #6]
 8002a54:	460b      	mov	r3, r1
 8002a56:	717b      	strb	r3, [r7, #5]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2bef      	cmp	r3, #239	; 0xef
 8002a60:	d903      	bls.n	8002a6a <i2cSmartLCD_Gfx240x128_Draw_Rect+0x2c>
			Error_Handler();
 8002a62:	f002 feed 	bl	8005840 <Error_Handler>
			return 2U;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e03a      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 8002a6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da03      	bge.n	8002a7a <i2cSmartLCD_Gfx240x128_Draw_Rect+0x3c>
			Error_Handler();
 8002a72:	f002 fee5 	bl	8005840 <Error_Handler>
			return 3U;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e032      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	797b      	ldrb	r3, [r7, #5]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b01      	subs	r3, #1
 8002a82:	2bef      	cmp	r3, #239	; 0xef
 8002a84:	d903      	bls.n	8002a8e <i2cSmartLCD_Gfx240x128_Draw_Rect+0x50>
			Error_Handler();
 8002a86:	f002 fedb 	bl	8005840 <Error_Handler>
			return 4U;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e028      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 8002a8e:	79ba      	ldrb	r2, [r7, #6]
 8002a90:	793b      	ldrb	r3, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3b01      	subs	r3, #1
 8002a96:	2b7f      	cmp	r3, #127	; 0x7f
 8002a98:	d903      	bls.n	8002aa2 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x64>
			Error_Handler();
 8002a9a:	f002 fed1 	bl	8005840 <Error_Handler>
			return 5U;
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e01e      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aa6:	f7ff fd2b 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002aaa:	79ba      	ldrb	r2, [r7, #6]
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	2020      	movs	r0, #32
 8002ab2:	f7ff fdb1 	bl	8002618 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0x82>
		return 1U;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00f      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac4:	f7ff fd1c 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_RECT, width, height, lineType)) {
 8002ac8:	7e3b      	ldrb	r3, [r7, #24]
 8002aca:	793a      	ldrb	r2, [r7, #4]
 8002acc:	7979      	ldrb	r1, [r7, #5]
 8002ace:	2034      	movs	r0, #52	; 0x34
 8002ad0:	f7ff fdda 	bl	8002688 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa0>
		return 1U;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <i2cSmartLCD_Gfx240x128_Draw_Rect+0xa2>
	}
	return 0U;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>:

static uint8_t i2cSmartLCD_Gfx240x128_Draw_Rect_filled(uint8_t pos_LT_x, uint8_t pos_LT_y, uint8_t width, uint8_t height, uint8_t fillType)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4604      	mov	r4, r0
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	4603      	mov	r3, r0
 8002afc:	71bb      	strb	r3, [r7, #6]
 8002afe:	460b      	mov	r3, r1
 8002b00:	717b      	strb	r3, [r7, #5]
 8002b02:	4613      	mov	r3, r2
 8002b04:	713b      	strb	r3, [r7, #4]
	/* Smart-LCD: TWI_SMART_LCD_CMD_DRAW_FILLED_RECT */

	/* Frame checks */
	{
		/* Underflow */
		if (LCD1_SMART_LCD_SIZE_X <= pos_LT_x) {
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2bef      	cmp	r3, #239	; 0xef
 8002b0a:	d903      	bls.n	8002b14 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x2c>
			Error_Handler();
 8002b0c:	f002 fe98 	bl	8005840 <Error_Handler>
			return 2U;
 8002b10:	2302      	movs	r3, #2
 8002b12:	e03a      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Underflow/Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= pos_LT_y) {
 8002b14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da03      	bge.n	8002b24 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x3c>
			Error_Handler();
 8002b1c:	f002 fe90 	bl	8005840 <Error_Handler>
			return 3U;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e032      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_X <= (pos_LT_x + (width - 1U))) {
 8002b24:	79fa      	ldrb	r2, [r7, #7]
 8002b26:	797b      	ldrb	r3, [r7, #5]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	2bef      	cmp	r3, #239	; 0xef
 8002b2e:	d903      	bls.n	8002b38 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x50>
			Error_Handler();
 8002b30:	f002 fe86 	bl	8005840 <Error_Handler>
			return 4U;
 8002b34:	2304      	movs	r3, #4
 8002b36:	e028      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}

		/* Overflow */
		if (LCD1_SMART_LCD_SIZE_Y <= (pos_LT_y + (height - 1U))) {
 8002b38:	79ba      	ldrb	r2, [r7, #6]
 8002b3a:	793b      	ldrb	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	2b7f      	cmp	r3, #127	; 0x7f
 8002b42:	d903      	bls.n	8002b4c <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x64>
			Error_Handler();
 8002b44:	f002 fe7c 	bl	8005840 <Error_Handler>
			return 5U;
 8002b48:	2305      	movs	r3, #5
 8002b4a:	e01e      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
		}
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b50:	f7ff fcd6 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	/* Set cursor */
	if (i2cSmartLCD_Gfx240x128_Write_parcnt2(LCD1_SMART_LCD_CMD_SET_POS_X_Y, pos_LT_x, pos_LT_y)) {
 8002b54:	79ba      	ldrb	r2, [r7, #6]
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2020      	movs	r0, #32
 8002b5c:	f7ff fd5c 	bl	8002618 <i2cSmartLCD_Gfx240x128_Write_parcnt2>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0x82>
		return 1U;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}

	/* Delay until display not busy */
	i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b6e:	f7ff fcc7 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

	if (i2cSmartLCD_Gfx240x128_Write_parcnt3(LCD1_SMART_LCD_CMD_DRAW_FILLED_RECT, width, height, fillType)) {
 8002b72:	7e3b      	ldrb	r3, [r7, #24]
 8002b74:	793a      	ldrb	r2, [r7, #4]
 8002b76:	7979      	ldrb	r1, [r7, #5]
 8002b78:	2036      	movs	r0, #54	; 0x36
 8002b7a:	f7ff fd85 	bl	8002688 <i2cSmartLCD_Gfx240x128_Write_parcnt3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa0>
		return 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <i2cSmartLCD_Gfx240x128_Draw_Rect_filled+0xa2>
	}
	return 0U;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}

08002b92 <i2cSmartLCD_Gfx240x128_Init>:

static uint8_t i2cSmartLCD_Gfx240x128_Init(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
	/* GetVer */
	uint8_t ver = i2cSmartLCD_Gfx240x128_GetVer();
 8002b98:	f7ff fdb6 	bl	8002708 <i2cSmartLCD_Gfx240x128_GetVer>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]

	if (ver >= 0x11) {
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d925      	bls.n	8002bf2 <i2cSmartLCD_Gfx240x128_Init+0x60>
		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002ba6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002baa:	f7ff fca9 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* SetMode */
		i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_MODE, LCD1_SMART_LCD_MODE_SMARTLCD);
 8002bae:	2110      	movs	r1, #16
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f7ff fcfd 	bl	80025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1>

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bba:	f7ff fca1 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* ClrScr */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt0(LCD1_SMART_LCD_CMD_CLS)) {
 8002bbe:	2011      	movs	r0, #17
 8002bc0:	f7ff fcc6 	bl	8002550 <i2cSmartLCD_Gfx240x128_Write_parcnt0>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <i2cSmartLCD_Gfx240x128_Init+0x3c>
			return 2U;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e012      	b.n	8002bf4 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		/* Delay until display not busy */
		i2cSmartLCD_Gfx240x128_Busy_wait(1000UL);
 8002bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd2:	f7ff fc95 	bl	8002500 <i2cSmartLCD_Gfx240x128_Busy_wait>

		/* Default: Pen ON */
		if (i2cSmartLCD_Gfx240x128_Write_parcnt1(LCD1_SMART_LCD_CMD_SET_PIXEL_TYPE, LCD1_PIXEL_SET)) {
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2014      	movs	r0, #20
 8002bda:	f7ff fce9 	bl	80025b0 <i2cSmartLCD_Gfx240x128_Write_parcnt1>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <i2cSmartLCD_Gfx240x128_Init+0x56>
			return 1U;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e005      	b.n	8002bf4 <i2cSmartLCD_Gfx240x128_Init+0x62>
		}

		HAL_Delay(10UL);
 8002be8:	200a      	movs	r0, #10
 8002bea:	f004 fdb1 	bl	8007750 <HAL_Delay>
		return 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <i2cSmartLCD_Gfx240x128_Init+0x62>
	}
	return 1U;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <i2cSmartLCD_Gfx240x128_Template>:

uint8_t i2cSmartLCD_Gfx240x128_Template(uint32_t bf)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	/* Display init */
	if (bf & 0x80000000UL) {
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da06      	bge.n	8002c18 <i2cSmartLCD_Gfx240x128_Template+0x1c>
		if (i2cSmartLCD_Gfx240x128_Init()) {
 8002c0a:	f7ff ffc2 	bl	8002b92 <i2cSmartLCD_Gfx240x128_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <i2cSmartLCD_Gfx240x128_Template+0x1c>
			return 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0f8      	b.n	8002e0a <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}

	/* Header Line */
	if (bf & 0x00000001UL) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <i2cSmartLCD_Gfx240x128_Template+0x38>
		i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002c22:	2108      	movs	r1, #8
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff fe83 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
				0U,
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U));

		i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2108      	movs	r1, #8
 8002c2e:	20ef      	movs	r0, #239	; 0xef
 8002c30:	f7ff fea9 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				(0U + (LCD1_SYSFONT_HEIGHT * 1U) + 1U),
				LCD1_PIXEL_SET);
	}

	/* Header Text */
	if (bf & 0x00000002UL) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d011      	beq.n	8002c62 <i2cSmartLCD_Gfx240x128_Template+0x66>
		i2cSmartLCD_Gfx240x128_WriteText(
 8002c3e:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <i2cSmartLCD_Gfx240x128_Template+0x218>)
 8002c40:	220d      	movs	r2, #13
 8002c42:	2100      	movs	r1, #0
 8002c44:	201e      	movs	r0, #30
 8002c46:	f7ff fd6b 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  *  5U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L0_P1_str), I2c_Lcd_Welcome_L0_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <i2cSmartLCD_Gfx240x128_Template+0x21c>)
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2072      	movs	r0, #114	; 0x72
 8002c52:	f7ff fd65 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				0 + (LCD1_SYSFONT_WIDTH  * 19U),
				0 + (LCD1_SYSFONT_HEIGHT *  0U),
				strlen((char*)I2c_Lcd_Welcome_L1_P1_str), I2c_Lcd_Welcome_L1_P1_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002c56:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <i2cSmartLCD_Gfx240x128_Template+0x220>)
 8002c58:	2205      	movs	r2, #5
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	20a2      	movs	r0, #162	; 0xa2
 8002c5e:	f7ff fd5f 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				strlen((char*)I2c_Lcd_Welcome_L1_P2_str), I2c_Lcd_Welcome_L1_P2_str);
	}


	/* LCKD print */
	if (bf & 0x00000010UL) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d019      	beq.n	8002ca0 <i2cSmartLCD_Gfx240x128_Template+0xa4>
		uint8_t line_str[] = "LCKD";
 8002c6c:	4a6c      	ldr	r2, [pc, #432]	; (8002e20 <i2cSmartLCD_Gfx240x128_Template+0x224>)
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c76:	6018      	str	r0, [r3, #0]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	7019      	strb	r1, [r3, #0]
		if (i2cSmartLCD_Gfx240x128_WriteText(
				0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  0U),
				0U + ((LCD1_SYSFONT_HEIGHT + 0U) *  0U),
				strlen((char*)line_str), line_str)) {
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd faaf 	bl	80001e4 <strlen>
 8002c86:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7ff fd45 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <i2cSmartLCD_Gfx240x128_Template+0xa4>
			return 1U;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b4      	b.n	8002e0a <i2cSmartLCD_Gfx240x128_Template+0x20e>
		}
	}


	/* Timing scale below the header line */
	if (bf & 0x00000100UL) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80ae 	beq.w	8002e08 <i2cSmartLCD_Gfx240x128_Template+0x20c>
		uint8_t pos_x 		= DacGfxPos_x_min;
 8002cac:	2309      	movs	r3, #9
 8002cae:	75fb      	strb	r3, [r7, #23]
		uint8_t mrk10Min	= 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75bb      	strb	r3, [r7, #22]
		uint8_t mrk5Dac		= 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	757b      	strb	r3, [r7, #21]

		/* Draw plot line x-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cb8:	2309      	movs	r3, #9
 8002cba:	222b      	movs	r2, #43	; 0x2b
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fe36 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002cc4:	23e6      	movs	r3, #230	; 0xe6
 8002cc6:	212b      	movs	r1, #43	; 0x2b
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fe5b 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_bot,
					LCD1_PIXEL_SET);
		}

		/* Draw x-axis scale lines */
		while (pos_x <= DacGfxPos_x_max) {
 8002cd0:	e02f      	b.n	8002d32 <i2cSmartLCD_Gfx240x128_Template+0x136>
			uint8_t drawHrExtra = (!(mrk10Min % 6)) ?  2U : 0U;
 8002cd2:	7dba      	ldrb	r2, [r7, #22]
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <i2cSmartLCD_Gfx240x128_Template+0x228>)
 8002cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cda:	0899      	lsrs	r1, r3, #2
 8002cdc:	460b      	mov	r3, r1
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <i2cSmartLCD_Gfx240x128_Template+0xf4>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e000      	b.n	8002cf2 <i2cSmartLCD_Gfx240x128_Template+0xf6>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	74fb      	strb	r3, [r7, #19]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					pos_x,
					(DacGfxPos_y_bot + (1U + drawHrExtra)));
 8002cf4:	222b      	movs	r2, #43	; 0x2b
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fe13 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002d0a:	232b      	movs	r3, #43	; 0x2b
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2d9      	uxtb	r1, r3
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fe36 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					pos_x,
					(DacGfxPos_y_bot + 1U),
					LCD1_PIXEL_SET);

			/* New scale mark at every 10 minutes */
			++mrk10Min;
 8002d1a:	7dbb      	ldrb	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	75bb      	strb	r3, [r7, #22]
			pos_x = DacGfxPos_x_min + (10U * mrk10Min);
 8002d20:	7dbb      	ldrb	r3, [r7, #22]
 8002d22:	461a      	mov	r2, r3
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2209      	movs	r2, #9
 8002d2e:	4413      	add	r3, r2
 8002d30:	75fb      	strb	r3, [r7, #23]
		while (pos_x <= DacGfxPos_x_max) {
 8002d32:	22e6      	movs	r2, #230	; 0xe6
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d9cb      	bls.n	8002cd2 <i2cSmartLCD_Gfx240x128_Template+0xd6>
		}

		/* Draw plot line y-axis */
		{
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	222b      	movs	r2, #43	; 0x2b
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fdf5 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
					DacGfxPos_x_min,
					DacGfxPos_y_bot);

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002d46:	2309      	movs	r3, #9
 8002d48:	210d      	movs	r1, #13
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe1a 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					DacGfxPos_y_top,
					LCD1_PIXEL_SET);
		}

		/* Draw y-axis scale lines */
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002d52:	e02a      	b.n	8002daa <i2cSmartLCD_Gfx240x128_Template+0x1ae>
			uint8_t drawExtra = (mrk5Dac == 3U) ?  2U : 0U;
 8002d54:	7d7b      	ldrb	r3, [r7, #21]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d101      	bne.n	8002d5e <i2cSmartLCD_Gfx240x128_Template+0x162>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e000      	b.n	8002d60 <i2cSmartLCD_Gfx240x128_Template+0x164>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	753b      	strb	r3, [r7, #20]

			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
					(DacGfxPos_x_min - (1 + drawExtra)),
 8002d62:	2209      	movs	r2, #9
 8002d64:	7d3b      	ldrb	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	212b      	movs	r1, #43	; 0x2b
					(DacGfxPos_y_bot - (mrk5Dac * 5U)));
 8002d70:	7d7b      	ldrb	r3, [r7, #21]
 8002d72:	4618      	mov	r0, r3
 8002d74:	0080      	lsls	r0, r0, #2
 8002d76:	4403      	add	r3, r0
 8002d78:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8002d7a:	1acb      	subs	r3, r1, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f7ff fdd5 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>

			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002d86:	2309      	movs	r3, #9
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	222b      	movs	r2, #43	; 0x2b
					(DacGfxPos_x_min - 1U),
					(DacGfxPos_y_bot - (mrk5Dac * 5U)),
 8002d8e:	7d7b      	ldrb	r3, [r7, #21]
 8002d90:	4619      	mov	r1, r3
 8002d92:	0089      	lsls	r1, r1, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	b2db      	uxtb	r3, r3
			i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7ff fdf1 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
					LCD1_PIXEL_SET);

			++mrk5Dac;
 8002da4:	7d7b      	ldrb	r3, [r7, #21]
 8002da6:	3301      	adds	r3, #1
 8002da8:	757b      	strb	r3, [r7, #21]
		while ((DacGfxPos_y_bot - (mrk5Dac * 5U)) >= DacGfxPos_y_top) {
 8002daa:	232b      	movs	r3, #43	; 0x2b
 8002dac:	4619      	mov	r1, r3
 8002dae:	7d7a      	ldrb	r2, [r7, #21]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	220d      	movs	r2, #13
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d2ca      	bcs.n	8002d54 <i2cSmartLCD_Gfx240x128_Template+0x158>
		}

		/* Write 'DAC' at y-axis */
		{
			uint8_t buf[] = "DAC";
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <i2cSmartLCD_Gfx240x128_Template+0x22c>)
 8002dc0:	60bb      	str	r3, [r7, #8]

			i2cSmartLCD_Gfx240x128_WriteText(
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	3b09      	subs	r3, #9
 8002dc6:	b2d8      	uxtb	r0, r3
 8002dc8:	232b      	movs	r3, #43	; 0x2b
 8002dca:	3b1c      	subs	r3, #28
 8002dcc:	b2d9      	uxtb	r1, r3
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f7ff fca4 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (3U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[0]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002dd8:	2309      	movs	r3, #9
 8002dda:	3b09      	subs	r3, #9
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	232b      	movs	r3, #43	; 0x2b
 8002de0:	3b13      	subs	r3, #19
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	3301      	adds	r3, #1
 8002dea:	2201      	movs	r2, #1
 8002dec:	f7ff fc98 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (2U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[1]));

			i2cSmartLCD_Gfx240x128_WriteText(
 8002df0:	2309      	movs	r3, #9
 8002df2:	3b09      	subs	r3, #9
 8002df4:	b2d8      	uxtb	r0, r3
 8002df6:	232b      	movs	r3, #43	; 0x2b
 8002df8:	3b0a      	subs	r3, #10
 8002dfa:	b2d9      	uxtb	r1, r3
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	3302      	adds	r3, #2
 8002e02:	2201      	movs	r2, #1
 8002e04:	f7ff fc8c 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
					(DacGfxPos_x_min - (LCD1_SYSFONT_WIDTH + 3U)),
					(DacGfxPos_y_bot - (1U * (LCD1_SYSFONT_HEIGHT + 2U) + 1U)),
					1U, &(buf[2]));
		}
	}
	return 0U;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08014744 	.word	0x08014744
 8002e18:	08014754 	.word	0x08014754
 8002e1c:	0801475c 	.word	0x0801475c
 8002e20:	080142b0 	.word	0x080142b0
 8002e24:	aaaaaaab 	.word	0xaaaaaaab
 8002e28:	00434144 	.word	0x00434144

08002e2c <i2cSmartLCD_Gfx240x128_Welcome>:

uint8_t i2cSmartLCD_Gfx240x128_Welcome(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	if (i2cSmartLCD_Gfx240x128_Template(0x80000003UL)) {
 8002e30:	4814      	ldr	r0, [pc, #80]	; (8002e84 <i2cSmartLCD_Gfx240x128_Welcome+0x58>)
 8002e32:	f7ff fee3 	bl	8002bfc <i2cSmartLCD_Gfx240x128_Template>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <i2cSmartLCD_Gfx240x128_Welcome+0x14>
		return 1U;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01e      	b.n	8002e7e <i2cSmartLCD_Gfx240x128_Welcome+0x52>
	}

	/* Write welcome */
	{
		i2cSmartLCD_Gfx240x128_WriteText(
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <i2cSmartLCD_Gfx240x128_Welcome+0x5c>)
 8002e42:	2209      	movs	r2, #9
 8002e44:	2114      	movs	r1, #20
 8002e46:	2006      	movs	r0, #6
 8002e48:	f7ff fc6a 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  2U)),
				strlen((char*)I2c_Lcd_Welcome_L2_str), I2c_Lcd_Welcome_L2_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <i2cSmartLCD_Gfx240x128_Welcome+0x60>)
 8002e4e:	2210      	movs	r2, #16
 8002e50:	211e      	movs	r1, #30
 8002e52:	2006      	movs	r0, #6
 8002e54:	f7ff fc64 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)),
				strlen((char*)I2c_Lcd_Welcome_L3_str), I2c_Lcd_Welcome_L3_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <i2cSmartLCD_Gfx240x128_Welcome+0x64>)
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	2128      	movs	r1, #40	; 0x28
 8002e5e:	2006      	movs	r0, #6
 8002e60:	f7ff fc5e 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  4U)),
				strlen((char*)I2c_Lcd_Welcome_L4_str), I2c_Lcd_Welcome_L4_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <i2cSmartLCD_Gfx240x128_Welcome+0x68>)
 8002e66:	2218      	movs	r2, #24
 8002e68:	2132      	movs	r1, #50	; 0x32
 8002e6a:	2006      	movs	r0, #6
 8002e6c:	f7ff fc58 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  5U)),
				strlen((char*)I2c_Lcd_Welcome_L5_str), I2c_Lcd_Welcome_L5_str);

		i2cSmartLCD_Gfx240x128_WriteText(
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <i2cSmartLCD_Gfx240x128_Welcome+0x6c>)
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	213c      	movs	r1, #60	; 0x3c
 8002e76:	2006      	movs	r0, #6
 8002e78:	f7ff fc52 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) *  1U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  6U)),
				strlen((char*)I2c_Lcd_Welcome_L6_str), I2c_Lcd_Welcome_L6_str);
	}
	return 0U;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	80000003 	.word	0x80000003
 8002e88:	08014764 	.word	0x08014764
 8002e8c:	08014770 	.word	0x08014770
 8002e90:	08014784 	.word	0x08014784
 8002e94:	080147ac 	.word	0x080147ac
 8002e98:	080147c8 	.word	0x080147c8

08002e9c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>:

uint8_t i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(int16_t temp, uint32_t tAcc)
{
 8002e9c:	b5b0      	push	{r4, r5, r7, lr}
 8002e9e:	b092      	sub	sp, #72	; 0x48
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	80fb      	strh	r3, [r7, #6]
	/* Draw message box */
	{
		if (i2cSmartLCD_Gfx240x128_Draw_Rect(
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2328      	movs	r3, #40	; 0x28
 8002eae:	226e      	movs	r2, #110	; 0x6e
 8002eb0:	214c      	movs	r1, #76	; 0x4c
 8002eb2:	203e      	movs	r0, #62	; 0x3e
 8002eb4:	f7ff fdc3 	bl	8002a3e <i2cSmartLCD_Gfx240x128_Draw_Rect>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x26>
				(      ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)  - 4U),
				(      ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)  - 4U),
				( 8U + ((LCD1_SYSFONT_WIDTH  + 0U) * 17U)      ),
				(10U + ((LCD1_SYSFONT_HEIGHT + 3U) *  3U)      ),
				LCD1_PIXEL_SET)) {
			return 1U;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e05e      	b.n	8002f80 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}
		HAL_Delay(1UL);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f004 fc44 	bl	8007750 <HAL_Delay>
	}

	/* Write Heating up Header */
	{
		uint8_t line0_str[] = "== Heating up ==";
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xec>)
 8002eca:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002ece:	461d      	mov	r5, r3
 8002ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	7023      	strb	r3, [r4, #0]

		if (i2cSmartLCD_Gfx240x128_WriteText(
				(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
				(0U + ((LCD1_SYSFONT_HEIGHT + 3U) *  8U)),
				strlen((char*)line0_str), line0_str)) {
 8002ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd f981 	bl	80001e4 <strlen>
 8002ee2:	4603      	mov	r3, r0
		if (i2cSmartLCD_Gfx240x128_WriteText(
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eea:	2150      	movs	r1, #80	; 0x50
 8002eec:	2042      	movs	r0, #66	; 0x42
 8002eee:	f7ff fc17 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0x60>
			return 1U;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e041      	b.n	8002f80 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
		}

		if (temp) {
 8002efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
			/* Update OCXO temperature */
			uint8_t line1_str[32];

			snprintf((char*)line1_str, sizeof(line1_str) - 1, "OCXO temp:  %2d%cC", temp, 0x7eU);
 8002f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f08:	f107 000c 	add.w	r0, r7, #12
 8002f0c:	227e      	movs	r2, #126	; 0x7e
 8002f0e:	9200      	str	r2, [sp, #0]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf0>)
 8002f12:	211f      	movs	r1, #31
 8002f14:	f00d fe08 	bl	8010b28 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) *  9U)),
					strlen((char*)line1_str), line1_str)) {
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd f961 	bl	80001e4 <strlen>
 8002f22:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	f107 030c 	add.w	r3, r7, #12
 8002f2a:	215c      	movs	r1, #92	; 0x5c
 8002f2c:	2042      	movs	r0, #66	; 0x42
 8002f2e:	f7ff fbf7 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xa0>
				return 1U;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e021      	b.n	8002f80 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}

		if (tAcc) {
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01d      	beq.n	8002f7e <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
			/* Update ublox NEO tAcc */
			uint8_t line2_str[32];

			snprintf((char*)line2_str, sizeof(line2_str) - 1, "NEO  tAcc: %3ld ns", (tAcc > 999U ?  999U : tAcc));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf28      	it	cs
 8002f4c:	4613      	movcs	r3, r2
 8002f4e:	f107 000c 	add.w	r0, r7, #12
 8002f52:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xf4>)
 8002f54:	211f      	movs	r1, #31
 8002f56:	f00d fde7 	bl	8010b28 <sniprintf>

			if (i2cSmartLCD_Gfx240x128_WriteText(
					(0U + ((LCD1_SYSFONT_WIDTH  + 0U) * 11U)),
					(2U + ((LCD1_SYSFONT_HEIGHT + 3U) * 10U)),
					strlen((char*)line2_str), line2_str)) {
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd f940 	bl	80001e4 <strlen>
 8002f64:	4603      	mov	r3, r0
			if (i2cSmartLCD_Gfx240x128_WriteText(
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	2166      	movs	r1, #102	; 0x66
 8002f6e:	2042      	movs	r0, #66	; 0x42
 8002f70:	f7ff fbd6 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe2>
				return 1U;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp+0xe4>
			}
		}
	}
	return 0U;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3740      	adds	r7, #64	; 0x40
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bdb0      	pop	{r4, r5, r7, pc}
 8002f88:	08014260 	.word	0x08014260
 8002f8c:	080142b8 	.word	0x080142b8
 8002f90:	080142cc 	.word	0x080142cc

08002f94 <i2cSmartLCD_Gfx240x128_locator_print>:


static uint8_t i2cSmartLCD_Gfx240x128_locator_print(const uint8_t* locatorStr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	uint8_t line_str[16];

	snprintf((char*)line_str, sizeof(line_str) - 1, "%6s", locatorStr);
 8002f9c:	f107 0008 	add.w	r0, r7, #8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <i2cSmartLCD_Gfx240x128_locator_print+0x44>)
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	f00d fdbf 	bl	8010b28 <sniprintf>

	if (i2cSmartLCD_Gfx240x128_WriteText(
			(((LCD1_SYSFONT_WIDTH  + 0U) * 34U) - 1U),
			(((LCD1_SYSFONT_HEIGHT + 0U) *  0U) - 0U),
			strlen((char*)line_str), line_str)) {
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd f918 	bl	80001e4 <strlen>
 8002fb4:	4603      	mov	r3, r0
	if (i2cSmartLCD_Gfx240x128_WriteText(
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	20cb      	movs	r0, #203	; 0xcb
 8002fc0:	f7ff fbae 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <i2cSmartLCD_Gfx240x128_locator_print+0x3a>
		return 1U;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <i2cSmartLCD_Gfx240x128_locator_print+0x3c>
	}
	return 0U;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	080142e0 	.word	0x080142e0
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <i2cSmartLCD_Gfx240x128_Locked>:

void i2cSmartLCD_Gfx240x128_Locked(uint32_t maxUntil, int16_t temp, uint32_t tAcc, int32_t sumDev, float devPsS, uint16_t dacVal, float dacFraction, uint16_t gDOP, uint8_t svPosElevCnt, uint8_t svElevSort[UBLOX_MAX_CH], UbloxNavSvinfo_t* svInfo, const uint8_t* locatorStr)
{
 8002fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe4:	b09e      	sub	sp, #120	; 0x78
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	61f8      	str	r0, [r7, #28]
 8002fea:	617a      	str	r2, [r7, #20]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ff2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	837b      	strh	r3, [r7, #26]
	static uint16_t s_svPosElevAzim_last[SvPosElevCnt_max]	= 	{ 0 };
	uint32_t now;

	/* Each time drop a channel two force a redraw */
	static uint8_t	s_svPosElevRefresh_last					= 	0U;
	s_svId_last[s_svPosElevRefresh_last++] = 0xffU;
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	b2d1      	uxtb	r1, r2
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8003004:	7011      	strb	r1, [r2, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <i2cSmartLCD_Gfx240x128_Locked+0xb0>)
 800300a:	21ff      	movs	r1, #255	; 0xff
 800300c:	5499      	strb	r1, [r3, r2]
	s_svPosElevRefresh_last %= SvPosElevCnt_max;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <i2cSmartLCD_Gfx240x128_Locked+0xb4>)
 8003014:	fba3 1302 	umull	r1, r3, r3, r2
 8003018:	08d9      	lsrs	r1, r3, #3
 800301a:	460b      	mov	r3, r1
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a5b      	subs	r3, r3, r1
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <i2cSmartLCD_Gfx240x128_Locked+0xac>)
 8003026:	701a      	strb	r2, [r3, #0]


	/* Limit to display max 16 channels to fit onto the display */
	if (svPosElevCnt > SvPosElevCnt_max) {
 8003028:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d902      	bls.n	8003036 <i2cSmartLCD_Gfx240x128_Locked+0x56>
		svPosElevCnt = SvPosElevCnt_max;
 8003030:	230f      	movs	r3, #15
 8003032:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	}

	/* Timeout check */
	now = HAL_GetTick();
 8003036:	f004 fb7f 	bl	8007738 <HAL_GetTick>
 800303a:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 800303c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	429a      	cmp	r2, r3
 8003042:	f080 85e6 	bcs.w	8003c12 <i2cSmartLCD_Gfx240x128_Locked+0xc32>
		return;
	}

	/* Wipe out section not in use*/
	if (s_svPosElevCnt_last > svPosElevCnt) {
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 800304e:	429a      	cmp	r2, r3
 8003050:	d248      	bcs.n	80030e4 <i2cSmartLCD_Gfx240x128_Locked+0x104>
		/* Wipe out cleared field entries */
		i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003052:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003056:	461a      	mov	r2, r3
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	4413      	add	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	b2d8      	uxtb	r0, r3
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <i2cSmartLCD_Gfx240x128_Locked+0xb8>)
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2341      	movs	r3, #65	; 0x41
 800307c:	213e      	movs	r1, #62	; 0x3e
 800307e:	f7ff fd33 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
				svPosElevCnt * 10,								(LCD1_SMART_LCD_SIZE_Y - 1) - (((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				((s_svPosElevCnt_last - svPosElevCnt) * 10),	(((LCD1_SYSFONT_HEIGHT + 1) * 3U) + (1 + SvCno_max)),
				LCD1_PIXEL_CLR);

		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 8003082:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003086:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800308a:	e021      	b.n	80030d0 <i2cSmartLCD_Gfx240x128_Locked+0xf0>
 800308c:	20000374 	.word	0x20000374
 8003090:	20000378 	.word	0x20000378
 8003094:	88888889 	.word	0x88888889
 8003098:	20000387 	.word	0x20000387
			s_svId_last[thisIdx]			= 	0U;
 800309c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030a0:	4ac6      	ldr	r2, [pc, #792]	; (80033bc <i2cSmartLCD_Gfx240x128_Locked+0x3dc>)
 80030a2:	2100      	movs	r1, #0
 80030a4:	54d1      	strb	r1, [r2, r3]
			s_svPosElevCno_last[thisIdx]	=	0U;
 80030a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030aa:	4ac5      	ldr	r2, [pc, #788]	; (80033c0 <i2cSmartLCD_Gfx240x128_Locked+0x3e0>)
 80030ac:	2100      	movs	r1, #0
 80030ae:	54d1      	strb	r1, [r2, r3]
			s_svPosElevElev_last[thisIdx]	= 	0U;
 80030b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030b4:	4ac3      	ldr	r2, [pc, #780]	; (80033c4 <i2cSmartLCD_Gfx240x128_Locked+0x3e4>)
 80030b6:	2100      	movs	r1, #0
 80030b8:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[thisIdx]	= 	0U;
 80030ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030be:	4ac2      	ldr	r2, [pc, #776]	; (80033c8 <i2cSmartLCD_Gfx240x128_Locked+0x3e8>)
 80030c0:	2100      	movs	r1, #0
 80030c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t thisIdx = svPosElevCnt; thisIdx < s_svPosElevCnt_last; ++thisIdx) {
 80030c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030ca:	3301      	adds	r3, #1
 80030cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80030d0:	4bbe      	ldr	r3, [pc, #760]	; (80033cc <i2cSmartLCD_Gfx240x128_Locked+0x3ec>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3df      	bcc.n	800309c <i2cSmartLCD_Gfx240x128_Locked+0xbc>
		}

		/* Store for next time */
		s_svPosElevCnt_last = svPosElevCnt;
 80030dc:	4abb      	ldr	r2, [pc, #748]	; (80033cc <i2cSmartLCD_Gfx240x128_Locked+0x3ec>)
 80030de:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80030e2:	7013      	strb	r3, [r2, #0]
	}

	/* Timeout check */
	now = HAL_GetTick();
 80030e4:	f004 fb28 	bl	8007738 <HAL_GetTick>
 80030e8:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 80030ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	f080 8591 	bcs.w	8003c16 <i2cSmartLCD_Gfx240x128_Locked+0xc36>
		return;
	}

	/* Print Locator */
	if (strcmp((char*)s_locatorStrLast, (char*)locatorStr)) {
 80030f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80030f8:	48b5      	ldr	r0, [pc, #724]	; (80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 80030fa:	f7fd f869 	bl	80001d0 <strcmp>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <i2cSmartLCD_Gfx240x128_Locked+0x138>
		i2cSmartLCD_Gfx240x128_locator_print(locatorStr);
 8003104:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003108:	f7ff ff44 	bl	8002f94 <i2cSmartLCD_Gfx240x128_locator_print>

		/* Write back changed string */
		strncpy((char*)s_locatorStrLast, (char*)locatorStr, sizeof(s_locatorStrLast) - 1);
 800310c:	220f      	movs	r2, #15
 800310e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003112:	48af      	ldr	r0, [pc, #700]	; (80033d0 <i2cSmartLCD_Gfx240x128_Locked+0x3f0>)
 8003114:	f00d fd3c 	bl	8010b90 <strncpy>
	}

	/* Timeout check */
	now = HAL_GetTick();
 8003118:	f004 fb0e 	bl	8007738 <HAL_GetTick>
 800311c:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 800311e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	429a      	cmp	r2, r3
 8003124:	f080 8579 	bcs.w	8003c1a <i2cSmartLCD_Gfx240x128_Locked+0xc3a>
		return;
	}

#if defined(PLL_BY_SOFTWARE)
	/* Plot DAC graph element */
	if (now >= s_dacPlotNxtTim)
 8003128:	4baa      	ldr	r3, [pc, #680]	; (80033d4 <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800312e:	429a      	cmp	r2, r3
 8003130:	f0c0 8095 	bcc.w	800325e <i2cSmartLCD_Gfx240x128_Locked+0x27e>
	{
		/* Calculate for next minute */
		s_dacPlotNxtTim = (now + 60000UL) - ((now + 60000UL) % 60000UL);
 8003134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003136:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800313a:	3360      	adds	r3, #96	; 0x60
 800313c:	4aa6      	ldr	r2, [pc, #664]	; (80033d8 <i2cSmartLCD_Gfx240x128_Locked+0x3f8>)
 800313e:	fba2 1203 	umull	r1, r2, r2, r3
 8003142:	0b92      	lsrs	r2, r2, #14
 8003144:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003148:	fb01 f202 	mul.w	r2, r1, r2
 800314c:	1a9a      	subs	r2, r3, r2
 800314e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	4a9e      	ldr	r2, [pc, #632]	; (80033d4 <i2cSmartLCD_Gfx240x128_Locked+0x3f4>)
 800315a:	6013      	str	r3, [r2, #0]

		/* Calculate x position*/
		s_dacPlotPosOfs++;
 800315c:	4b9f      	ldr	r3, [pc, #636]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b9d      	ldr	r3, [pc, #628]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 8003166:	701a      	strb	r2, [r3, #0]
		if (s_dacPlotPosOfs > (DacGfxPos_x_max - DacGfxPos_x_min)) {
 8003168:	4b9c      	ldr	r3, [pc, #624]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	23e6      	movs	r3, #230	; 0xe6
 8003170:	4619      	mov	r1, r3
 8003172:	2309      	movs	r3, #9
 8003174:	1acb      	subs	r3, r1, r3
 8003176:	429a      	cmp	r2, r3
 8003178:	dd02      	ble.n	8003180 <i2cSmartLCD_Gfx240x128_Locked+0x1a0>
			s_dacPlotPosOfs = 1U;
 800317a:	4b98      	ldr	r3, [pc, #608]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
		}

		/* Erase x-slot + 2 more columns right of it*/
		{
			i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003180:	2209      	movs	r2, #9
 8003182:	4b96      	ldr	r3, [pc, #600]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4413      	add	r3, r2
 8003188:	b2d8      	uxtb	r0, r3
 800318a:	210d      	movs	r1, #13
 800318c:	222b      	movs	r2, #43	; 0x2b
 800318e:	230d      	movs	r3, #13
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2200      	movs	r2, #0
 8003196:	9200      	str	r2, [sp, #0]
 8003198:	2205      	movs	r2, #5
 800319a:	f7ff fca5 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
					LCD1_PIXEL_CLR);
		}

		/* Plot DAC value */
		{
			float 	ampt_y		= (DacGfxPos_y_bot - DacGfxPos_y_top) / 2.0f;
 800319e:	232b      	movs	r3, #43	; 0x2b
 80031a0:	461a      	mov	r2, r3
 80031a2:	230d      	movs	r3, #13
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80031b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			uint8_t midPos_y 	= DacGfxPos_y_bot - ampt_y;
 80031ba:	232b      	movs	r3, #43	; 0x2b
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80031d4:	793b      	ldrb	r3, [r7, #4]
 80031d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			int16_t dacValPlot	= (int16_t)dacVal - (int16_t)I2C_DAC_MCP4725_0_VAL;
 80031da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031de:	f2a3 63cd 	subw	r3, r3, #1741	; 0x6cd
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			/* Clipping */
			if (dacValPlot >  (int16_t)ampt_y) {
 80031e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80031ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f0:	ee17 3a90 	vmov	r3, s15
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	dd07      	ble.n	800320e <i2cSmartLCD_Gfx240x128_Locked+0x22e>
				dacValPlot =  (int16_t)ampt_y;
 80031fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003206:	ee17 3a90 	vmov	r3, s15
 800320a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			if (dacValPlot < -(int16_t)ampt_y) {
 800320e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8003212:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321a:	ee17 3a90 	vmov	r3, s15
 800321e:	b21b      	sxth	r3, r3
 8003220:	425b      	negs	r3, r3
 8003222:	429a      	cmp	r2, r3
 8003224:	da0b      	bge.n	800323e <i2cSmartLCD_Gfx240x128_Locked+0x25e>
				dacValPlot = -(int16_t)ampt_y;
 8003226:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800322a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322e:	ee17 3a90 	vmov	r3, s15
 8003232:	b21b      	sxth	r3, r3
 8003234:	b29b      	uxth	r3, r3
 8003236:	425b      	negs	r3, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}

			i2cSmartLCD_Gfx240x128_Draw_Point(
 800323e:	2209      	movs	r2, #9
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <i2cSmartLCD_Gfx240x128_Locked+0x3fc>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4413      	add	r3, r2
 8003246:	b2d8      	uxtb	r0, r3
 8003248:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2201      	movs	r2, #1
 8003258:	4619      	mov	r1, r3
 800325a:	f7ff fbc0 	bl	80029de <i2cSmartLCD_Gfx240x128_Draw_Point>
		}
	}
#endif

	/* Timeout check */
	now = HAL_GetTick();
 800325e:	f004 fa6b 	bl	8007738 <HAL_GetTick>
 8003262:	6678      	str	r0, [r7, #100]	; 0x64
	if (now >= maxUntil) {
 8003264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	429a      	cmp	r2, r3
 800326a:	f080 84d8 	bcs.w	8003c1e <i2cSmartLCD_Gfx240x128_Locked+0xc3e>
		static uint8_t  s_dacValLast 		= 0U;
		static float	s_dacFractionLast	= 1.0f;
#endif
		static float	s_gDOPLast			= 0.0f;

		if (temp) {
 800326e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
			/* Update OCXO temperature */
			if (s_tempLast != temp) {
 8003276:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 8003278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003280:	429a      	cmp	r2, r3
 8003282:	d01d      	beq.n	80032c0 <i2cSmartLCD_Gfx240x128_Locked+0x2e0>
				uint8_t line1_str[32];
				snprintf((char*)line1_str, sizeof(line1_str) - 1, "Temp:   %2d%cC", temp, 0x7e);
 8003284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003288:	f107 0020 	add.w	r0, r7, #32
 800328c:	227e      	movs	r2, #126	; 0x7e
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <i2cSmartLCD_Gfx240x128_Locked+0x404>)
 8003292:	211f      	movs	r1, #31
 8003294:	f00d fc48 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  7) - 0U),
						strlen((char*)line1_str), line1_str)) {
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	4618      	mov	r0, r3
 800329e:	f7fc ffa1 	bl	80001e4 <strlen>
 80032a2:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	f107 0320 	add.w	r3, r7, #32
 80032aa:	2146      	movs	r1, #70	; 0x46
 80032ac:	20a1      	movs	r0, #161	; 0xa1
 80032ae:	f7ff fa37 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f040 84b4 	bne.w	8003c22 <i2cSmartLCD_Gfx240x128_Locked+0xc42>
					return;
				}
				s_tempLast = temp;
 80032ba:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <i2cSmartLCD_Gfx240x128_Locked+0x400>)
 80032bc:	8b7b      	ldrh	r3, [r7, #26]
 80032be:	8013      	strh	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 80032c0:	f004 fa3a 	bl	8007738 <HAL_GetTick>
 80032c4:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80032c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	f080 84ab 	bcs.w	8003c26 <i2cSmartLCD_Gfx240x128_Locked+0xc46>
			return;
		}

		if (gDOP) {
 80032d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d042      	beq.n	800335e <i2cSmartLCD_Gfx240x128_Locked+0x37e>
			/* Update ublox NEO gDOP */
			if (s_gDOPLast != gDOP) {
 80032d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <i2cSmartLCD_Gfx240x128_Locked+0x408>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d034      	beq.n	800335e <i2cSmartLCD_Gfx240x128_Locked+0x37e>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "gDOP:  %2d.%02d", (gDOP / 100), (gDOP % 100));
 80032f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80032f8:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	b29b      	uxth	r3, r3
 8003302:	461c      	mov	r4, r3
 8003304:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003308:	4a38      	ldr	r2, [pc, #224]	; (80033ec <i2cSmartLCD_Gfx240x128_Locked+0x40c>)
 800330a:	fba2 1203 	umull	r1, r2, r2, r3
 800330e:	0952      	lsrs	r2, r2, #5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	fb01 f202 	mul.w	r2, r1, r2
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	f107 0020 	add.w	r0, r7, #32
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4623      	mov	r3, r4
 8003322:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <i2cSmartLCD_Gfx240x128_Locked+0x410>)
 8003324:	211f      	movs	r1, #31
 8003326:	f00d fbff 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  8) - 0U),
						strlen((char*)line2_str), line2_str)) {
 800332a:	f107 0320 	add.w	r3, r7, #32
 800332e:	4618      	mov	r0, r3
 8003330:	f7fc ff58 	bl	80001e4 <strlen>
 8003334:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8003336:	b2da      	uxtb	r2, r3
 8003338:	f107 0320 	add.w	r3, r7, #32
 800333c:	2150      	movs	r1, #80	; 0x50
 800333e:	20a1      	movs	r0, #161	; 0xa1
 8003340:	f7ff f9ee 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 846f 	bne.w	8003c2a <i2cSmartLCD_Gfx240x128_Locked+0xc4a>
					return;
				}
				s_gDOPLast = gDOP;
 800334c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <i2cSmartLCD_Gfx240x128_Locked+0x408>)
 800335a:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 800335e:	f004 f9eb 	bl	8007738 <HAL_GetTick>
 8003362:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	429a      	cmp	r2, r3
 800336a:	f080 8460 	bcs.w	8003c2e <i2cSmartLCD_Gfx240x128_Locked+0xc4e>
			return;
		}

		if (tAcc) {
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d046      	beq.n	8003402 <i2cSmartLCD_Gfx240x128_Locked+0x422>
			/* Update ublox NEO tAcc */
			if (s_tAccLast != tAcc) {
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <i2cSmartLCD_Gfx240x128_Locked+0x414>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	429a      	cmp	r2, r3
 800337c:	d041      	beq.n	8003402 <i2cSmartLCD_Gfx240x128_Locked+0x422>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "tAcc:  %3ld ns", (tAcc > 999 ?  999 : tAcc));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003384:	4293      	cmp	r3, r2
 8003386:	bf28      	it	cs
 8003388:	4613      	movcs	r3, r2
 800338a:	f107 0020 	add.w	r0, r7, #32
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <i2cSmartLCD_Gfx240x128_Locked+0x418>)
 8003390:	211f      	movs	r1, #31
 8003392:	f00d fbc9 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) *  9) - 0U),
						strlen((char*)line2_str), line2_str)) {
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4618      	mov	r0, r3
 800339c:	f7fc ff22 	bl	80001e4 <strlen>
 80033a0:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	f107 0320 	add.w	r3, r7, #32
 80033a8:	215a      	movs	r1, #90	; 0x5a
 80033aa:	20a1      	movs	r0, #161	; 0xa1
 80033ac:	f7ff f9b8 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 843d 	bne.w	8003c32 <i2cSmartLCD_Gfx240x128_Locked+0xc52>
 80033b8:	e020      	b.n	80033fc <i2cSmartLCD_Gfx240x128_Locked+0x41c>
 80033ba:	bf00      	nop
 80033bc:	20000378 	.word	0x20000378
 80033c0:	20000388 	.word	0x20000388
 80033c4:	20000398 	.word	0x20000398
 80033c8:	200003a8 	.word	0x200003a8
 80033cc:	20000387 	.word	0x20000387
 80033d0:	200003c8 	.word	0x200003c8
 80033d4:	200003d8 	.word	0x200003d8
 80033d8:	45e7b273 	.word	0x45e7b273
 80033dc:	200003dc 	.word	0x200003dc
 80033e0:	200003de 	.word	0x200003de
 80033e4:	080142e4 	.word	0x080142e4
 80033e8:	200003e0 	.word	0x200003e0
 80033ec:	51eb851f 	.word	0x51eb851f
 80033f0:	080142f4 	.word	0x080142f4
 80033f4:	200003e4 	.word	0x200003e4
 80033f8:	08014304 	.word	0x08014304
					return;
				}
				s_tAccLast = tAcc;
 80033fc:	4a82      	ldr	r2, [pc, #520]	; (8003608 <i2cSmartLCD_Gfx240x128_Locked+0x628>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	6013      	str	r3, [r2, #0]
			}
		}

		/* Timeout check */
		now = HAL_GetTick();
 8003402:	f004 f999 	bl	8007738 <HAL_GetTick>
 8003406:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 8003408:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	429a      	cmp	r2, r3
 800340e:	f080 8412 	bcs.w	8003c36 <i2cSmartLCD_Gfx240x128_Locked+0xc56>
			return;
		}

		if (devPsS) {
 8003412:	edd7 7a03 	vldr	s15, [r7, #12]
 8003416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	d040      	beq.n	80034a2 <i2cSmartLCD_Gfx240x128_Locked+0x4c2>
			/* Update Software-PLL Long Term Deviation (LTD) value */
			if (s_devPsSLast != devPsS) {
 8003420:	4b7a      	ldr	r3, [pc, #488]	; (800360c <i2cSmartLCD_Gfx240x128_Locked+0x62c>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ed97 7a03 	vldr	s14, [r7, #12]
 800342a:	eeb4 7a67 	vcmp.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	d036      	beq.n	80034a2 <i2cSmartLCD_Gfx240x128_Locked+0x4c2>
				uint8_t line2_str[32];

				/* Clamping */
				{
					if (devPsS >  99.9999f) {
 8003434:	edd7 7a03 	vldr	s15, [r7, #12]
 8003438:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003610 <i2cSmartLCD_Gfx240x128_Locked+0x630>
 800343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd01      	ble.n	800344a <i2cSmartLCD_Gfx240x128_Locked+0x46a>
						devPsS =  99.9999f;
 8003446:	4b73      	ldr	r3, [pc, #460]	; (8003614 <i2cSmartLCD_Gfx240x128_Locked+0x634>)
 8003448:	60fb      	str	r3, [r7, #12]
					}
					if (devPsS < -99.9999f) {
 800344a:	edd7 7a03 	vldr	s15, [r7, #12]
 800344e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003618 <i2cSmartLCD_Gfx240x128_Locked+0x638>
 8003452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d501      	bpl.n	8003460 <i2cSmartLCD_Gfx240x128_Locked+0x480>
						devPsS = -99.9999f;
 800345c:	4b6f      	ldr	r3, [pc, #444]	; (800361c <i2cSmartLCD_Gfx240x128_Locked+0x63c>)
 800345e:	60fb      	str	r3, [r7, #12]
					}
				}

				snprintf((char*)line2_str, sizeof(line2_str) - 1, "LTD: %+08.4f", devPsS);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7fd f881 	bl	8000568 <__aeabi_f2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	f107 0020 	add.w	r0, r7, #32
 800346e:	e9cd 2300 	strd	r2, r3, [sp]
 8003472:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <i2cSmartLCD_Gfx240x128_Locked+0x640>)
 8003474:	211f      	movs	r1, #31
 8003476:	f00d fb57 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 10) - 0U),
						strlen((char*)line2_str), line2_str)) {
 800347a:	f107 0320 	add.w	r3, r7, #32
 800347e:	4618      	mov	r0, r3
 8003480:	f7fc feb0 	bl	80001e4 <strlen>
 8003484:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 8003486:	b2da      	uxtb	r2, r3
 8003488:	f107 0320 	add.w	r3, r7, #32
 800348c:	2164      	movs	r1, #100	; 0x64
 800348e:	20a1      	movs	r0, #161	; 0xa1
 8003490:	f7ff f946 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 83cf 	bne.w	8003c3a <i2cSmartLCD_Gfx240x128_Locked+0xc5a>
					return;
				}
				s_devPsSLast = devPsS;
 800349c:	4a5b      	ldr	r2, [pc, #364]	; (800360c <i2cSmartLCD_Gfx240x128_Locked+0x62c>)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
			}
		}

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 80034a2:	f004 f949 	bl	8007738 <HAL_GetTick>
 80034a6:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80034a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f080 83c6 	bcs.w	8003c3e <i2cSmartLCD_Gfx240x128_Locked+0xc5e>
			return;
		}

		if (dacVal) {
 80034b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <i2cSmartLCD_Gfx240x128_Locked+0x524>
			/* Update DAC value with fraction component */
			if (s_dacValLast != dacVal) {
 80034ba:	4b5a      	ldr	r3, [pc, #360]	; (8003624 <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d01d      	beq.n	8003504 <i2cSmartLCD_Gfx240x128_Locked+0x524>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "DAC:    %04d", dacVal);
 80034c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034cc:	f107 0020 	add.w	r0, r7, #32
 80034d0:	4a55      	ldr	r2, [pc, #340]	; (8003628 <i2cSmartLCD_Gfx240x128_Locked+0x648>)
 80034d2:	211f      	movs	r1, #31
 80034d4:	f00d fb28 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 11) - 0U),
						strlen((char*)line2_str), line2_str)) {
 80034d8:	f107 0320 	add.w	r3, r7, #32
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc fe81 	bl	80001e4 <strlen>
 80034e2:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	f107 0320 	add.w	r3, r7, #32
 80034ea:	216e      	movs	r1, #110	; 0x6e
 80034ec:	20a1      	movs	r0, #161	; 0xa1
 80034ee:	f7ff f917 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 83a4 	bne.w	8003c42 <i2cSmartLCD_Gfx240x128_Locked+0xc62>
					return;
				}
				s_dacValLast = dacVal;
 80034fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b48      	ldr	r3, [pc, #288]	; (8003624 <i2cSmartLCD_Gfx240x128_Locked+0x644>)
 8003502:	701a      	strb	r2, [r3, #0]
		}
#endif

#if defined(PLL_BY_SOFTWARE)
		/* Timeout check */
		now = HAL_GetTick();
 8003504:	f004 f918 	bl	8007738 <HAL_GetTick>
 8003508:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 800350a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	429a      	cmp	r2, r3
 8003510:	f080 8399 	bcs.w	8003c46 <i2cSmartLCD_Gfx240x128_Locked+0xc66>
			return;
		}

		if (dacFraction) {
 8003514:	edd7 7a02 	vldr	s15, [r7, #8]
 8003518:	eef5 7a40 	vcmp.f32	s15, #0.0
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	d02a      	beq.n	8003578 <i2cSmartLCD_Gfx240x128_Locked+0x598>
			/* Update DAC value with fraction component */
			if (s_dacFractionLast != dacFraction) {
 8003522:	4b42      	ldr	r3, [pc, #264]	; (800362c <i2cSmartLCD_Gfx240x128_Locked+0x64c>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ed97 7a02 	vldr	s14, [r7, #8]
 800352c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	d020      	beq.n	8003578 <i2cSmartLCD_Gfx240x128_Locked+0x598>
				uint8_t line2_str[32];
				snprintf((char*)line2_str, sizeof(line2_str) - 1, "Frac: %+7.4f", dacFraction);
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f7fd f816 	bl	8000568 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	f107 0020 	add.w	r0, r7, #32
 8003544:	e9cd 2300 	strd	r2, r3, [sp]
 8003548:	4a39      	ldr	r2, [pc, #228]	; (8003630 <i2cSmartLCD_Gfx240x128_Locked+0x650>)
 800354a:	211f      	movs	r1, #31
 800354c:	f00d faec 	bl	8010b28 <sniprintf>

				if (i2cSmartLCD_Gfx240x128_WriteText(
						(((LCD1_SYSFONT_WIDTH  + 0) * 27) - 1U),
						(((LCD1_SYSFONT_HEIGHT + 3) * 12) - 0U),
						strlen((char*)line2_str), line2_str)) {
 8003550:	f107 0320 	add.w	r3, r7, #32
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc fe45 	bl	80001e4 <strlen>
 800355a:	4603      	mov	r3, r0
				if (i2cSmartLCD_Gfx240x128_WriteText(
 800355c:	b2da      	uxtb	r2, r3
 800355e:	f107 0320 	add.w	r3, r7, #32
 8003562:	2178      	movs	r1, #120	; 0x78
 8003564:	20a1      	movs	r0, #161	; 0xa1
 8003566:	f7ff f8db 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 836c 	bne.w	8003c4a <i2cSmartLCD_Gfx240x128_Locked+0xc6a>
					return;
				}
				s_dacFractionLast = dacFraction;
 8003572:	4a2e      	ldr	r2, [pc, #184]	; (800362c <i2cSmartLCD_Gfx240x128_Locked+0x64c>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6013      	str	r3, [r2, #0]
#endif
	}


	/* Show SV information */
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003578:	2300      	movs	r3, #0
 800357a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800357e:	e340      	b.n	8003c02 <i2cSmartLCD_Gfx240x128_Locked+0xc22>
		uint8_t svCh	= svElevSort[svChIdx];
 8003580:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003584:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003588:	4413      	add	r3, r2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t svId 	= svInfo->svid[svCh];
 8003590:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003594:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003598:	4413      	add	r3, r2
 800359a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int8_t  svElev	= svInfo->elev[svCh];
 80035a2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80035a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035aa:	4413      	add	r3, r2
 80035ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035b0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		int16_t svAzim	= svInfo->azim[svCh];
 80035b4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80035b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035bc:	324c      	adds	r2, #76	; 0x4c
 80035be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		int8_t  svCno	= svInfo->cno[svCh];
 80035c6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80035ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035ce:	4413      	add	r3, r2
 80035d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80035d4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

		/* Timeout check */
		now = HAL_GetTick();
 80035d8:	f004 f8ae 	bl	8007738 <HAL_GetTick>
 80035dc:	6678      	str	r0, [r7, #100]	; 0x64
		if (now >= maxUntil) {
 80035de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	f080 8333 	bcs.w	8003c4e <i2cSmartLCD_Gfx240x128_Locked+0xc6e>
			return;
		}

		/* Limit signal strength to fit onto the display */
		if (svCno > SvCno_max) {
 80035e8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80035ec:	2b28      	cmp	r3, #40	; 0x28
 80035ee:	d902      	bls.n	80035f6 <i2cSmartLCD_Gfx240x128_Locked+0x616>
			svCno = SvCno_max;
 80035f0:	2328      	movs	r3, #40	; 0x28
 80035f2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		}

		/* Limit the elevation data */
		if (svElev > 90) {
 80035f6:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 80035fa:	2b5a      	cmp	r3, #90	; 0x5a
 80035fc:	dd1a      	ble.n	8003634 <i2cSmartLCD_Gfx240x128_Locked+0x654>
			svElev = 90;
 80035fe:	235a      	movs	r3, #90	; 0x5a
 8003600:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8003604:	e01d      	b.n	8003642 <i2cSmartLCD_Gfx240x128_Locked+0x662>
 8003606:	bf00      	nop
 8003608:	200003e4 	.word	0x200003e4
 800360c:	20000000 	.word	0x20000000
 8003610:	42c7fff3 	.word	0x42c7fff3
 8003614:	42c7fff3 	.word	0x42c7fff3
 8003618:	c2c7fff3 	.word	0xc2c7fff3
 800361c:	c2c7fff3 	.word	0xc2c7fff3
 8003620:	08014314 	.word	0x08014314
 8003624:	200003e8 	.word	0x200003e8
 8003628:	08014324 	.word	0x08014324
 800362c:	20000004 	.word	0x20000004
 8003630:	08014334 	.word	0x08014334
		}
		else if (svElev <  0) {
 8003634:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
 8003638:	2b00      	cmp	r3, #0
 800363a:	da02      	bge.n	8003642 <i2cSmartLCD_Gfx240x128_Locked+0x662>
			svElev =  0;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		}

		/* Fix for pixel length */
		svElev = (int8_t) ((((LCD1_SYSFONT_HEIGHT + 1L) * 3L) * svElev) / SvElev_max);	// [0 .. 24] <-- [0 .. 90]
 8003642:	f997 206a 	ldrsb.w	r2, [r7, #106]	; 0x6a
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	4adb      	ldr	r2, [pc, #876]	; (80039c0 <i2cSmartLCD_Gfx240x128_Locked+0x9e0>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a


		/* SV ID slice into each digit */
		uint8_t svIdPos0	= 0x30U + ( svId         / 100U);
 800365c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003660:	4ad8      	ldr	r2, [pc, #864]	; (80039c4 <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3330      	adds	r3, #48	; 0x30
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uint8_t svIdPos1	= 0x30U + ((svId % 100U) /  10U);
 8003672:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003676:	4ad3      	ldr	r2, [pc, #844]	; (80039c4 <i2cSmartLCD_Gfx240x128_Locked+0x9e4>)
 8003678:	fba2 1203 	umull	r1, r2, r2, r3
 800367c:	0952      	lsrs	r2, r2, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f202 	mul.w	r2, r1, r2
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4acf      	ldr	r2, [pc, #828]	; (80039c8 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3330      	adds	r3, #48	; 0x30
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t svIdPos2	= 0x30U + ((svId %  10U)       );
 800369a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800369e:	4bca      	ldr	r3, [pc, #808]	; (80039c8 <i2cSmartLCD_Gfx240x128_Locked+0x9e8>)
 80036a0:	fba3 1302 	umull	r1, r3, r3, r2
 80036a4:	08d9      	lsrs	r1, r3, #3
 80036a6:	460b      	mov	r3, r1
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3330      	adds	r3, #48	; 0x30
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		/* Modify Display for SVs */
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 80036ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036be:	4ac3      	ldr	r2, [pc, #780]	; (80039cc <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d11c      	bne.n	8003704 <i2cSmartLCD_Gfx240x128_Locked+0x724>
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 80036ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036ce:	4ac0      	ldr	r2, [pc, #768]	; (80039d0 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f997 306a 	ldrsb.w	r3, [r7, #106]	; 0x6a
		if (	(s_svId_last[svChIdx] 			!= svId) 	||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d113      	bne.n	8003704 <i2cSmartLCD_Gfx240x128_Locked+0x724>
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 80036dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036e0:	4abc      	ldr	r2, [pc, #752]	; (80039d4 <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 80036e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
				(s_svPosElevElev_last[svChIdx] 	!= svElev)	||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d109      	bne.n	8003704 <i2cSmartLCD_Gfx240x128_Locked+0x724>
				(s_svPosElevCno_last[svChIdx] 	!= svCno)) {
 80036f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80036f4:	4ab8      	ldr	r2, [pc, #736]	; (80039d8 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f997 3069 	ldrsb.w	r3, [r7, #105]	; 0x69
				(s_svPosElevAzim_last[svChIdx] 	!= svAzim)	||
 80036fe:	429a      	cmp	r2, r3
 8003700:	f000 827a 	beq.w	8003bf8 <i2cSmartLCD_Gfx240x128_Locked+0xc18>
			/* Write back changed values */
			s_svId_last[svChIdx] 			= svId;
 8003704:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003708:	49b0      	ldr	r1, [pc, #704]	; (80039cc <i2cSmartLCD_Gfx240x128_Locked+0x9ec>)
 800370a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800370e:	54ca      	strb	r2, [r1, r3]
			s_svPosElevElev_last[svChIdx] 	= svElev;
 8003710:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003714:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 8003718:	4aad      	ldr	r2, [pc, #692]	; (80039d0 <i2cSmartLCD_Gfx240x128_Locked+0x9f0>)
 800371a:	54d1      	strb	r1, [r2, r3]
			s_svPosElevAzim_last[svChIdx]	= svAzim;
 800371c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003720:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8003724:	4aab      	ldr	r2, [pc, #684]	; (80039d4 <i2cSmartLCD_Gfx240x128_Locked+0x9f4>)
 8003726:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			s_svPosElevCno_last[svChIdx] 	= svCno;
 800372a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800372e:	f897 1069 	ldrb.w	r1, [r7, #105]	; 0x69
 8003732:	4aa9      	ldr	r2, [pc, #676]	; (80039d8 <i2cSmartLCD_Gfx240x128_Locked+0x9f8>)
 8003734:	54d1      	strb	r1, [r2, r3]

			/* Write SV ID from bottom to top */
			{
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 1U), 1U, &svIdPos2);
 8003736:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800373a:	461a      	mov	r2, r3
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	4413      	add	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3302      	adds	r3, #2
 8003746:	b2d8      	uxtb	r0, r3
 8003748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800374c:	2201      	movs	r2, #1
 800374e:	2178      	movs	r1, #120	; 0x78
 8003750:	f7fe ffe6 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 2U), 1U, &svIdPos1);
 8003754:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003758:	461a      	mov	r2, r3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4413      	add	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3302      	adds	r3, #2
 8003764:	b2d8      	uxtb	r0, r3
 8003766:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800376a:	2201      	movs	r2, #1
 800376c:	2170      	movs	r1, #112	; 0x70
 800376e:	f7fe ffd7 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
				i2cSmartLCD_Gfx240x128_WriteText((2 + svChIdx * 10), LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U), 1U, &svIdPos0);
 8003772:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003776:	461a      	mov	r2, r3
 8003778:	0092      	lsls	r2, r2, #2
 800377a:	4413      	add	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3302      	adds	r3, #2
 8003782:	b2d8      	uxtb	r0, r3
 8003784:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8003788:	2201      	movs	r2, #1
 800378a:	2168      	movs	r1, #104	; 0x68
 800378c:	f7fe ffc8 	bl	8002720 <i2cSmartLCD_Gfx240x128_WriteText>
			}

			/* Draw bar of elevation - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003790:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003794:	461a      	mov	r2, r3
 8003796:	0092      	lsls	r2, r2, #2
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	b2d8      	uxtb	r0, r3
 800379e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80037a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80037a6:	b2d9      	uxtb	r1, r3
 80037a8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2201      	movs	r2, #1
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f7ff f997 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(0 + svChIdx * 10), 	((LCD1_SMART_LCD_SIZE_Y - 1) 		- svElev),  											// [127 .. 103]
						1, 						(1 + svElev),																				// [1 .. 25]
						LCD1_PIXEL_SET);

				/* Draw bar of elevation - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80037ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80037be:	461a      	mov	r2, r3
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	b2d8      	uxtb	r0, r3
 80037c8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80037cc:	f1c3 0319 	rsb	r3, r3, #25
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	9200      	str	r2, [sp, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	2166      	movs	r1, #102	; 0x66
 80037da:	f7ff f985 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* Draw bar of signal strength 'CNO' - solid bottom */
			{
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 80037de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80037e2:	461a      	mov	r2, r3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2d8      	uxtb	r0, r3
 80037f0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80037f4:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 80037f8:	b2d9      	uxtb	r1, r3
 80037fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80037fe:	3301      	adds	r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2201      	movs	r2, #1
 8003804:	9200      	str	r2, [sp, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	f7ff f96e 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						(1 + svChIdx * 10), 	LCD1_SMART_LCD_SIZE_Y - ((LCD1_SYSFONT_HEIGHT + 1) * 3U) - (1 + svCno)		- 2,
						8, 						(1 + svCno),
						LCD1_PIXEL_SET);

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 800380c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003810:	461a      	mov	r2, r3
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	4413      	add	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	b2d8      	uxtb	r0, r3
 800381e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003822:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	9200      	str	r2, [sp, #0]
 800382c:	2208      	movs	r2, #8
 800382e:	213c      	movs	r1, #60	; 0x3c
 8003830:	f7ff f95a 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						LCD1_PIXEL_CLR);
			}

			/* SV azimuth */
			{
				const float 	ArrowSize = 4.49f;
 8003834:	4b69      	ldr	r3, [pc, #420]	; (80039dc <i2cSmartLCD_Gfx240x128_Locked+0x9fc>)
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
				const float 	pntOrig_x = 4.5f + (svChIdx * 10U);
 8003838:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384c:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8003850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003854:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				const float 	pntOrig_y = 56.0f;
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <i2cSmartLCD_Gfx240x128_Locked+0xa00>)
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c

				uint8_t pntWipeTL_x	= (uint8_t) (pntOrig_x - 4.5f);
 800385c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003860:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8003864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003870:	793b      	ldrb	r3, [r7, #4]
 8003872:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				uint8_t pntWipeTL_y	= (uint8_t) (pntOrig_y - 4.5f);
 8003876:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800387a:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800387e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003886:	edc7 7a01 	vstr	s15, [r7, #4]
 800388a:	793b      	ldrb	r3, [r7, #4]
 800388c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				uint8_t lenWipe_xy	= 10U;
 8003890:	230a      	movs	r3, #10
 8003892:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

				uint8_t pntFront_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI *  svAzim			/ 180.0f));
 8003896:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003898:	f7fc fe66 	bl	8000568 <__aeabi_f2d>
 800389c:	4604      	mov	r4, r0
 800389e:	460d      	mov	r5, r1
 80038a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038a2:	f7fc fe61 	bl	8000568 <__aeabi_f2d>
 80038a6:	4680      	mov	r8, r0
 80038a8:	4689      	mov	r9, r1
 80038aa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe48 	bl	8000544 <__aeabi_i2d>
 80038b4:	a340      	add	r3, pc, #256	; (adr r3, 80039b8 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f7fc fead 	bl	8000618 <__aeabi_dmul>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 80038cc:	f7fc ffce 	bl	800086c <__aeabi_ddiv>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	ec43 2b17 	vmov	d7, r2, r3
 80038d8:	eeb0 0a47 	vmov.f32	s0, s14
 80038dc:	eef0 0a67 	vmov.f32	s1, s15
 80038e0:	f00f fc0a 	bl	80130f8 <sin>
 80038e4:	ec53 2b10 	vmov	r2, r3, d0
 80038e8:	4640      	mov	r0, r8
 80038ea:	4649      	mov	r1, r9
 80038ec:	f7fc fe94 	bl	8000618 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fc fcd8 	bl	80002ac <__adddf3>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f7fd f960 	bl	8000bc8 <__aeabi_d2uiz>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				uint8_t pntFront_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI *  svAzim			/ 180.0f));
 800390e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003910:	f7fc fe2a 	bl	8000568 <__aeabi_f2d>
 8003914:	4604      	mov	r4, r0
 8003916:	460d      	mov	r5, r1
 8003918:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800391a:	f7fc fe25 	bl	8000568 <__aeabi_f2d>
 800391e:	4680      	mov	r8, r0
 8003920:	4689      	mov	r9, r1
 8003922:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fe0c 	bl	8000544 <__aeabi_i2d>
 800392c:	a322      	add	r3, pc, #136	; (adr r3, 80039b8 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f7fc fe71 	bl	8000618 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <i2cSmartLCD_Gfx240x128_Locked+0xa04>)
 8003944:	f7fc ff92 	bl	800086c <__aeabi_ddiv>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	ec43 2b17 	vmov	d7, r2, r3
 8003950:	eeb0 0a47 	vmov.f32	s0, s14
 8003954:	eef0 0a67 	vmov.f32	s1, s15
 8003958:	f00f fb7a 	bl	8013050 <cos>
 800395c:	ec53 2b10 	vmov	r2, r3, d0
 8003960:	4640      	mov	r0, r8
 8003962:	4649      	mov	r1, r9
 8003964:	f7fc fe58 	bl	8000618 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fc9c 	bl	80002ac <__adddf3>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	f7fd f924 	bl	8000bc8 <__aeabi_d2uiz>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				uint8_t pntLeft_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim - 155)	/ 180.0f));
 8003986:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003988:	f7fc fdee 	bl	8000568 <__aeabi_f2d>
 800398c:	4604      	mov	r4, r0
 800398e:	460d      	mov	r5, r1
 8003990:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003992:	f7fc fde9 	bl	8000568 <__aeabi_f2d>
 8003996:	4680      	mov	r8, r0
 8003998:	4689      	mov	r9, r1
 800399a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800399e:	3b9b      	subs	r3, #155	; 0x9b
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fdcf 	bl	8000544 <__aeabi_i2d>
 80039a6:	a304      	add	r3, pc, #16	; (adr r3, 80039b8 <i2cSmartLCD_Gfx240x128_Locked+0x9d8>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fe34 	bl	8000618 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	e017      	b.n	80039e8 <i2cSmartLCD_Gfx240x128_Locked+0xa08>
 80039b8:	54442d18 	.word	0x54442d18
 80039bc:	400921fb 	.word	0x400921fb
 80039c0:	b60b60b7 	.word	0xb60b60b7
 80039c4:	51eb851f 	.word	0x51eb851f
 80039c8:	cccccccd 	.word	0xcccccccd
 80039cc:	20000378 	.word	0x20000378
 80039d0:	20000398 	.word	0x20000398
 80039d4:	200003a8 	.word	0x200003a8
 80039d8:	20000388 	.word	0x20000388
 80039dc:	408fae14 	.word	0x408fae14
 80039e0:	42600000 	.word	0x42600000
 80039e4:	40668000 	.word	0x40668000
 80039e8:	4619      	mov	r1, r3
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 80039f0:	f7fc ff3c 	bl	800086c <__aeabi_ddiv>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	ec43 2b17 	vmov	d7, r2, r3
 80039fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003a00:	eef0 0a67 	vmov.f32	s1, s15
 8003a04:	f00f fb78 	bl	80130f8 <sin>
 8003a08:	ec53 2b10 	vmov	r2, r3, d0
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fc fe02 	bl	8000618 <__aeabi_dmul>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fc46 	bl	80002ac <__adddf3>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f8ce 	bl	8000bc8 <__aeabi_d2uiz>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint8_t pntLeft_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim - 155)	/ 180.0f));
 8003a32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a34:	f7fc fd98 	bl	8000568 <__aeabi_f2d>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003a3e:	f7fc fd93 	bl	8000568 <__aeabi_f2d>
 8003a42:	4680      	mov	r8, r0
 8003a44:	4689      	mov	r9, r1
 8003a46:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003a4a:	3b9b      	subs	r3, #155	; 0x9b
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd79 	bl	8000544 <__aeabi_i2d>
 8003a52:	a381      	add	r3, pc, #516	; (adr r3, 8003c58 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fdde 	bl	8000618 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b7d      	ldr	r3, [pc, #500]	; (8003c60 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003a6a:	f7fc feff 	bl	800086c <__aeabi_ddiv>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	ec43 2b17 	vmov	d7, r2, r3
 8003a76:	eeb0 0a47 	vmov.f32	s0, s14
 8003a7a:	eef0 0a67 	vmov.f32	s1, s15
 8003a7e:	f00f fae7 	bl	8013050 <cos>
 8003a82:	ec53 2b10 	vmov	r2, r3, d0
 8003a86:	4640      	mov	r0, r8
 8003a88:	4649      	mov	r1, r9
 8003a8a:	f7fc fdc5 	bl	8000618 <__aeabi_dmul>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4620      	mov	r0, r4
 8003a94:	4629      	mov	r1, r5
 8003a96:	f7fc fc09 	bl	80002ac <__adddf3>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f7fd f891 	bl	8000bc8 <__aeabi_d2uiz>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				uint8_t pntRight_x	= (uint8_t) (pntOrig_x + ArrowSize * sin(M_PI * (svAzim + 155)	/ 180.0f));
 8003aac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003aae:	f7fc fd5b 	bl	8000568 <__aeabi_f2d>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ab8:	f7fc fd56 	bl	8000568 <__aeabi_f2d>
 8003abc:	4680      	mov	r8, r0
 8003abe:	4689      	mov	r9, r1
 8003ac0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003ac4:	339b      	adds	r3, #155	; 0x9b
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fd3c 	bl	8000544 <__aeabi_i2d>
 8003acc:	a362      	add	r3, pc, #392	; (adr r3, 8003c58 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f7fc fda1 	bl	8000618 <__aeabi_dmul>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003ae4:	f7fc fec2 	bl	800086c <__aeabi_ddiv>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	ec43 2b17 	vmov	d7, r2, r3
 8003af0:	eeb0 0a47 	vmov.f32	s0, s14
 8003af4:	eef0 0a67 	vmov.f32	s1, s15
 8003af8:	f00f fafe 	bl	80130f8 <sin>
 8003afc:	ec53 2b10 	vmov	r2, r3, d0
 8003b00:	4640      	mov	r0, r8
 8003b02:	4649      	mov	r1, r9
 8003b04:	f7fc fd88 	bl	8000618 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc fbcc 	bl	80002ac <__adddf3>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fd f854 	bl	8000bc8 <__aeabi_d2uiz>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				uint8_t pntRight_y	= (uint8_t) (pntOrig_y + ArrowSize * cos(M_PI * (svAzim + 155)	/ 180.0f));
 8003b26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b28:	f7fc fd1e 	bl	8000568 <__aeabi_f2d>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	460d      	mov	r5, r1
 8003b30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003b32:	f7fc fd19 	bl	8000568 <__aeabi_f2d>
 8003b36:	4680      	mov	r8, r0
 8003b38:	4689      	mov	r9, r1
 8003b3a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003b3e:	339b      	adds	r3, #155	; 0x9b
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fcff 	bl	8000544 <__aeabi_i2d>
 8003b46:	a344      	add	r3, pc, #272	; (adr r3, 8003c58 <i2cSmartLCD_Gfx240x128_Locked+0xc78>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f7fc fd64 	bl	8000618 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <i2cSmartLCD_Gfx240x128_Locked+0xc80>)
 8003b5e:	f7fc fe85 	bl	800086c <__aeabi_ddiv>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	ec43 2b17 	vmov	d7, r2, r3
 8003b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b6e:	eef0 0a67 	vmov.f32	s1, s15
 8003b72:	f00f fa6d 	bl	8013050 <cos>
 8003b76:	ec53 2b10 	vmov	r2, r3, d0
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fd4b 	bl	8000618 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc fb8f 	bl	80002ac <__adddf3>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fd f817 	bl	8000bc8 <__aeabi_d2uiz>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				/* Draw bar of signal strength 'CNO' - cleared top */
				i2cSmartLCD_Gfx240x128_Draw_Rect_filled(
 8003ba0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003ba4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003ba8:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8003bac:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8003bb0:	2400      	movs	r4, #0
 8003bb2:	9400      	str	r4, [sp, #0]
 8003bb4:	f7fe ff98 	bl	8002ae8 <i2cSmartLCD_Gfx240x128_Draw_Rect_filled>
						pntWipeTL_x, 	pntWipeTL_y,
						lenWipe_xy, 	lenWipe_xy,
						LCD1_PIXEL_CLR);

				i2cSmartLCD_Gfx240x128_Draw_SetStartPos(
 8003bb8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003bbc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe feb4 	bl	8002930 <i2cSmartLCD_Gfx240x128_Draw_SetStartPos>
						pntFront_x, 	pntFront_y);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003bc8:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003bcc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fed7 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
				i2cSmartLCD_Gfx240x128_Draw_Line_to(
						pntOrig_x, 		pntOrig_y,
						LCD1_PIXEL_SET);
#endif

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003bd8:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8003bdc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003be0:	2201      	movs	r2, #1
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fecf 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
						pntRight_x, 	pntRight_y,
						LCD1_PIXEL_SET);

				i2cSmartLCD_Gfx240x128_Draw_Line_to(
 8003be8:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003bec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fec7 	bl	8002986 <i2cSmartLCD_Gfx240x128_Draw_Line_to>
	for (uint8_t svChIdx = 0; svChIdx < svPosElevCnt; ++svChIdx) {
 8003bf8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003c02:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8003c06:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f4ff acb8 	bcc.w	8003580 <i2cSmartLCD_Gfx240x128_Locked+0x5a0>
 8003c10:	e01e      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
		return;
 8003c12:	bf00      	nop
 8003c14:	e01c      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
		return;
 8003c16:	bf00      	nop
 8003c18:	e01a      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
		return;
 8003c1a:	bf00      	nop
 8003c1c:	e018      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
		return;
 8003c1e:	bf00      	nop
 8003c20:	e016      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c22:	bf00      	nop
 8003c24:	e014      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c26:	bf00      	nop
 8003c28:	e012      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c2a:	bf00      	nop
 8003c2c:	e010      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c2e:	bf00      	nop
 8003c30:	e00e      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c32:	bf00      	nop
 8003c34:	e00c      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c36:	bf00      	nop
 8003c38:	e00a      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c3a:	bf00      	nop
 8003c3c:	e008      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c3e:	bf00      	nop
 8003c40:	e006      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
					return;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <i2cSmartLCD_Gfx240x128_Locked+0xc70>
			return;
 8003c4e:	bf00      	nop
	}

#   undef SvCno_max
#   undef SvPosElevCnt_max
#	undef SvElev_max
}
 8003c50:	3770      	adds	r7, #112	; 0x70
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	400921fb 	.word	0x400921fb
 8003c60:	40668000 	.word	0x40668000

08003c64 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	4613      	mov	r3, r2
 8003c72:	015b      	lsls	r3, r3, #5
 8003c74:	4413      	add	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <uDelay+0x3c>)
 8003c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8003c84:	e002      	b.n	8003c8c <uDelay+0x28>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <uDelay+0x22>
	}
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	cccccccd 	.word	0xcccccccd

08003ca4 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8003cb0:	e004      	b.n	8003cbc <memclear+0x18>
		*(ary++) = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	807a      	strh	r2, [r7, #2]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f5      	bne.n	8003cb2 <memclear+0xe>
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <calcDcfPhasemod>:

};  Anzahl Einsen: 256 Anzahl Nullen: 256.
*/

void calcDcfPhasemod(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
	/* The result of this function is OK verified against the table above */
	uint16_t shift = 1U;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	80fb      	strh	r3, [r7, #6]
#if 0
	/* Prepare */
	memclear(gDcfPhaseMod, 512);
#endif

	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	80bb      	strh	r3, [r7, #4]
 8003ce2:	e02a      	b.n	8003d3a <calcDcfPhasemod+0x66>
		uint8_t b5		= (0 != (shift & 0b000010000U));
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	70fb      	strb	r3, [r7, #3]
		uint8_t b9		= (0 != (shift & 0b100000000U));
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	70bb      	strb	r3, [r7, #2]
		uint8_t xor59	= (b5 != b9);
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	78bb      	ldrb	r3, [r7, #2]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	707b      	strb	r3, [r7, #1]
		shift <<= 1;
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	80fb      	strh	r3, [r7, #6]
		if (xor59) {
 8003d1e:	787b      	ldrb	r3, [r7, #1]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <calcDcfPhasemod+0x58>
			shift |= 0x01U;
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	80fb      	strh	r3, [r7, #6]
		}

		gDcfPhaseMod[idx] 		 =  xor59;
 8003d2c:	88bb      	ldrh	r3, [r7, #4]
 8003d2e:	4908      	ldr	r1, [pc, #32]	; (8003d50 <calcDcfPhasemod+0x7c>)
 8003d30:	787a      	ldrb	r2, [r7, #1]
 8003d32:	54ca      	strb	r2, [r1, r3]
	for (uint16_t idx = 0; idx < 512U; ++idx) {
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	80bb      	strh	r3, [r7, #4]
 8003d3a:	88bb      	ldrh	r3, [r7, #4]
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d40:	d3d0      	bcc.n	8003ce4 <calcDcfPhasemod+0x10>
	}
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	2000041c 	.word	0x2000041c

08003d54 <calcDcfPrnCorrelation>:

uint8_t calcDcfPrnCorrelation(uint8_t sub16Frm, volatile int8_t in_Phase_ary[], uint16_t* shiftPos, uint16_t* corSum)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b091      	sub	sp, #68	; 0x44
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]
	int32_t  maxSum = 0L,	minSum = 0L;
 8003d64:	2300      	movs	r3, #0
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	2300      	movs	r3, #0
 8003d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t maxPos = 0U, 	minPos = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d70:	2300      	movs	r3, #0
 8003d72:	86bb      	strh	r3, [r7, #52]	; 0x34
	int32_t  deciderBoundaryLo = 0L;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
	int32_t  deciderBoundaryHi = 0L;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
	 * +18 deg	= -28 ticks
	 */

	/* Decider adjustments */
	{
		int32_t	 deciderMax	= 0L;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
		int32_t	 deciderMin	= 0L;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Starting second */
		for (uint16_t idx = 0U; idx < 31U; ++idx) {
 8003d84:	2300      	movs	r3, #0
 8003d86:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d88:	e077      	b.n	8003e7a <calcDcfPrnCorrelation+0x126>
			if (		(deciderMax < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMin + 80L) > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d8c:	4aa4      	ldr	r2, [pc, #656]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003d8e:	fba2 1203 	umull	r1, r2, r2, r3
 8003d92:	0a92      	lsrs	r2, r2, #10
 8003d94:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003d98:	fb01 f202 	mul.w	r2, r1, r2
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	4293      	cmp	r3, r2
 8003db0:	da26      	bge.n	8003e00 <calcDcfPrnCorrelation+0xac>
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8003db8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dba:	4999      	ldr	r1, [pc, #612]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003dbc:	fba1 0103 	umull	r0, r1, r1, r3
 8003dc0:	0a89      	lsrs	r1, r1, #10
 8003dc2:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003dc6:	fb00 f101 	mul.w	r1, r0, r1
 8003dca:	1a5b      	subs	r3, r3, r1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	440b      	add	r3, r1
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	db11      	blt.n	8003e00 <calcDcfPrnCorrelation+0xac>
				 	 	 deciderMax = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003ddc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dde:	4a90      	ldr	r2, [pc, #576]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003de0:	fba2 1203 	umull	r1, r2, r2, r3
 8003de4:	0a92      	lsrs	r2, r2, #10
 8003de6:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003dea:	fb01 f202 	mul.w	r2, r1, r2
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfe:	e039      	b.n	8003e74 <calcDcfPrnCorrelation+0x120>
			}
			else if (	(deciderMin > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMax - 80L) < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003e00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003e04:	fba2 1203 	umull	r1, r2, r2, r3
 8003e08:	0a92      	lsrs	r2, r2, #10
 8003e0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e0e:	fb01 f202 	mul.w	r2, r1, r2
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	4293      	cmp	r3, r2
 8003e26:	dd25      	ble.n	8003e74 <calcDcfPrnCorrelation+0x120>
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8003e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e30:	497b      	ldr	r1, [pc, #492]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003e32:	fba1 0103 	umull	r0, r1, r1, r3
 8003e36:	0a89      	lsrs	r1, r1, #10
 8003e38:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003e3c:	fb00 f101 	mul.w	r1, r0, r1
 8003e40:	1a5b      	subs	r3, r3, r1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	440b      	add	r3, r1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	dc10      	bgt.n	8003e74 <calcDcfPrnCorrelation+0x120>
						 deciderMin = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e54:	4a72      	ldr	r2, [pc, #456]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003e56:	fba2 1203 	umull	r1, r2, r2, r3
 8003e5a:	0a92      	lsrs	r2, r2, #10
 8003e5c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e60:	fb01 f202 	mul.w	r2, r1, r2
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = 0U; idx < 31U; ++idx) {
 8003e74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e76:	3301      	adds	r3, #1
 8003e78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e7c:	2b1e      	cmp	r3, #30
 8003e7e:	d984      	bls.n	8003d8a <calcDcfPrnCorrelation+0x36>
			}
		}

		/* Middle of a second */
		for (uint16_t idx = PRN_CORRELATION_SINGLE_BUF_SIZE; idx < (PRN_CORRELATION_SINGLE_BUF_SIZE + 31U); ++idx) {
 8003e80:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8003e84:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e86:	e077      	b.n	8003f78 <calcDcfPrnCorrelation+0x224>
			if (		(deciderMax < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMin + 80L) > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e8a:	4a65      	ldr	r2, [pc, #404]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003e8c:	fba2 1203 	umull	r1, r2, r2, r3
 8003e90:	0a92      	lsrs	r2, r2, #10
 8003e92:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003e96:	fb01 f202 	mul.w	r2, r1, r2
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	4293      	cmp	r3, r2
 8003eae:	da26      	bge.n	8003efe <calcDcfPrnCorrelation+0x1aa>
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8003eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eb8:	4959      	ldr	r1, [pc, #356]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003eba:	fba1 0103 	umull	r0, r1, r1, r3
 8003ebe:	0a89      	lsrs	r1, r1, #10
 8003ec0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003ec4:	fb00 f101 	mul.w	r1, r0, r1
 8003ec8:	1a5b      	subs	r3, r3, r1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	440b      	add	r3, r1
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	db11      	blt.n	8003efe <calcDcfPrnCorrelation+0x1aa>
						 deciderMax = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003eda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003ede:	fba2 1203 	umull	r1, r2, r2, r3
 8003ee2:	0a92      	lsrs	r2, r2, #10
 8003ee4:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003ee8:	fb01 f202 	mul.w	r2, r1, r2
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
 8003efc:	e039      	b.n	8003f72 <calcDcfPrnCorrelation+0x21e>
			}
			else if (	(deciderMin > in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])	&& ((deciderMax - 80L) < in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE])) {
 8003efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f00:	4a47      	ldr	r2, [pc, #284]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003f02:	fba2 1203 	umull	r1, r2, r2, r3
 8003f06:	0a92      	lsrs	r2, r2, #10
 8003f08:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003f0c:	fb01 f202 	mul.w	r2, r1, r2
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4413      	add	r3, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	4293      	cmp	r3, r2
 8003f24:	dd25      	ble.n	8003f72 <calcDcfPrnCorrelation+0x21e>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8003f2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f2e:	493c      	ldr	r1, [pc, #240]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003f30:	fba1 0103 	umull	r0, r1, r1, r3
 8003f34:	0a89      	lsrs	r1, r1, #10
 8003f36:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8003f3a:	fb00 f101 	mul.w	r1, r0, r1
 8003f3e:	1a5b      	subs	r3, r3, r1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	440b      	add	r3, r1
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	dc10      	bgt.n	8003f72 <calcDcfPrnCorrelation+0x21e>
						 deciderMin = in_Phase_ary[idx % PRN_CORRELATION_SINGLE_BUF_SIZE];
 8003f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f52:	4a33      	ldr	r2, [pc, #204]	; (8004020 <calcDcfPrnCorrelation+0x2cc>)
 8003f54:	fba2 1203 	umull	r1, r2, r2, r3
 8003f58:	0a92      	lsrs	r2, r2, #10
 8003f5a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003f5e:	fb01 f202 	mul.w	r2, r1, r2
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint16_t idx = PRN_CORRELATION_SINGLE_BUF_SIZE; idx < (PRN_CORRELATION_SINGLE_BUF_SIZE + 31U); ++idx) {
 8003f72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f74:	3301      	adds	r3, #1
 8003f76:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f7e:	d983      	bls.n	8003e88 <calcDcfPrnCorrelation+0x134>
			}
		}

		/* Calculate the boundaries */
		deciderBoundaryLo =  -((deciderMax - deciderMin) / 3);
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	4a27      	ldr	r2, [pc, #156]	; (8004024 <calcDcfPrnCorrelation+0x2d0>)
 8003f88:	fb82 1203 	smull	r1, r2, r2, r3
 8003f8c:	17db      	asrs	r3, r3, #31
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	61fb      	str	r3, [r7, #28]
		deciderBoundaryHi =  +((deciderMax - deciderMin) / 3);
 8003f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <calcDcfPrnCorrelation+0x2d0>)
 8003f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8003f9e:	17db      	asrs	r3, r3, #31
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	61bb      	str	r3, [r7, #24]
	}

	/* Decider on each timing position */
	for (uint16_t shft = (sub16Frm * 128U); shft < ((sub16Frm + 2U) * 128U); shft++) {
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	01db      	lsls	r3, r3, #7
 8003faa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fac:	e081      	b.n	80040b2 <calcDcfPrnCorrelation+0x35e>
		int16_t sum = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	84bb      	strh	r3, [r7, #36]	; 0x24

		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fb6:	e060      	b.n	800407a <calcDcfPrnCorrelation+0x326>
			uint16_t thisPos = ((idx * PRN_CORRELATION_OVERSAMPLE) + shft) % PRN_CORRELATION_SINGLE_BUF_SIZE;
 8003fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fba:	005a      	lsls	r2, r3, #1
 8003fbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fbe:	4413      	add	r3, r2
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <calcDcfPrnCorrelation+0x2d4>)
 8003fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8003fc6:	1251      	asrs	r1, r2, #9
 8003fc8:	17da      	asrs	r2, r3, #31
 8003fca:	1a8a      	subs	r2, r1, r2
 8003fcc:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8003fd0:	fb01 f202 	mul.w	r2, r1, r2
 8003fd4:	1a9a      	subs	r2, r3, r2
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	82fb      	strh	r3, [r7, #22]

			if (
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
			if (
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	da04      	bge.n	8003ff6 <calcDcfPrnCorrelation+0x2a2>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8003fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fee:	4a0f      	ldr	r2, [pc, #60]	; (800402c <calcDcfPrnCorrelation+0x2d8>)
 8003ff0:	5cd3      	ldrb	r3, [r2, r3]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d00d      	beq.n	8004012 <calcDcfPrnCorrelation+0x2be>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8003ff6:	8afb      	ldrh	r3, [r7, #22]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b25b      	sxtb	r3, r3
 8004000:	461a      	mov	r2, r3
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 1U)) ||
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4293      	cmp	r3, r2
 8004006:	dd13      	ble.n	8004030 <calcDcfPrnCorrelation+0x2dc>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 0U))
 8004008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <calcDcfPrnCorrelation+0x2d8>)
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <calcDcfPrnCorrelation+0x2dc>
				) {  	/* non-inverse correlation */
				sum++;
 8004012:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004016:	b29b      	uxth	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800401e:	e029      	b.n	8004074 <calcDcfPrnCorrelation+0x320>
 8004020:	d1b71759 	.word	0xd1b71759
 8004024:	55555556 	.word	0x55555556
 8004028:	68db8bad 	.word	0x68db8bad
 800402c:	2000041c 	.word	0x2000041c
			}
			else if (	/* inverse correlation */
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4413      	add	r3, r2
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b25b      	sxtb	r3, r3
 800403a:	461a      	mov	r2, r3
			else if (	/* inverse correlation */
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4293      	cmp	r3, r2
 8004040:	dd04      	ble.n	800404c <calcDcfPrnCorrelation+0x2f8>
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8004042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004044:	4a33      	ldr	r2, [pc, #204]	; (8004114 <calcDcfPrnCorrelation+0x3c0>)
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d00d      	beq.n	8004068 <calcDcfPrnCorrelation+0x314>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 800404c:	8afb      	ldrh	r3, [r7, #22]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b25b      	sxtb	r3, r3
 8004056:	461a      	mov	r2, r3
					((in_Phase_ary[thisPos] < deciderBoundaryLo) && (gDcfPhaseMod[idx] == 1U)) ||
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4293      	cmp	r3, r2
 800405c:	da0a      	bge.n	8004074 <calcDcfPrnCorrelation+0x320>
					((in_Phase_ary[thisPos] > deciderBoundaryHi) && (gDcfPhaseMod[idx] == 0U))
 800405e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <calcDcfPrnCorrelation+0x3c0>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <calcDcfPrnCorrelation+0x320>
				) {
				sum--;
 8004068:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (uint16_t idx = 0U; idx < PRN_CORRELATION_SAMPLES_792MS774; ++idx) {
 8004074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004076:	3301      	adds	r3, #1
 8004078:	847b      	strh	r3, [r7, #34]	; 0x22
 800407a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d39a      	bcc.n	8003fb8 <calcDcfPrnCorrelation+0x264>
			}
		}  // for (idx)

		if (maxSum < sum) {
 8004082:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004088:	429a      	cmp	r2, r3
 800408a:	da05      	bge.n	8004098 <calcDcfPrnCorrelation+0x344>
			maxSum = sum;
 800408c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
			maxPos = shft;
 8004092:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004094:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004096:	e009      	b.n	80040ac <calcDcfPrnCorrelation+0x358>
		}
		else if (minSum > sum) {
 8004098:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	429a      	cmp	r2, r3
 80040a0:	dd04      	ble.n	80040ac <calcDcfPrnCorrelation+0x358>
			minSum = sum;
 80040a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
			minPos = shft;
 80040a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040aa:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (uint16_t shft = (sub16Frm * 128U); shft < ((sub16Frm + 2U) * 128U); shft++) {
 80040ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040ae:	3301      	adds	r3, #1
 80040b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	3302      	adds	r3, #2
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	429a      	cmp	r2, r3
 80040bc:	f4ff af77 	bcc.w	8003fae <calcDcfPrnCorrelation+0x25a>
		}
	}  // for (shft)

	/* Decider */
	if (maxSum > -minSum) {
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	425b      	negs	r3, r3
 80040c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	dd0e      	ble.n	80040e8 <calcDcfPrnCorrelation+0x394>
		/* Bitstream is non-inverse PRN */
		if (shiftPos) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <calcDcfPrnCorrelation+0x382>
			*shiftPos 	=  maxPos;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040d4:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <calcDcfPrnCorrelation+0x390>
			*corSum		= +maxSum;
 80040dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040de:	b29a      	uxth	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '0' */
		return 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e00f      	b.n	8004108 <calcDcfPrnCorrelation+0x3b4>
	}
	else {
		/* Bitstream is inverse PRN */
		if (shiftPos) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <calcDcfPrnCorrelation+0x3a0>
			*shiftPos	=  minPos;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040f2:	801a      	strh	r2, [r3, #0]
		}

		if (corSum) {
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <calcDcfPrnCorrelation+0x3b2>
			*corSum		= -minSum;
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	425b      	negs	r3, r3
 8004100:	b29a      	uxth	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	801a      	strh	r2, [r3, #0]
		}

		/* The second has a coded '1' */
		return 1U;
 8004106:	2301      	movs	r3, #1
	}
}
 8004108:	4618      	mov	r0, r3
 800410a:	3744      	adds	r7, #68	; 0x44
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	2000041c 	.word	0x2000041c

08004118 <calcDcfTelegram>:

uint8_t calcDcfTelegram(uint8_t* tc_ary, dcfTimeTelegr_t* dcfNxtMinuteTime)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	if (tc_ary && dcfNxtMinuteTime) {
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 81b8 	beq.w	800449a <calcDcfTelegram+0x382>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 81b4 	beq.w	800449a <calcDcfTelegram+0x382>
		dcfNxtMinuteTime->rufBit	=  tc_ary[15];																	// b1:  Calling staff in Braunschweig, b0: else.
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	330f      	adds	r3, #15
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2d9      	uxtb	r1, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	7813      	ldrb	r3, [r2, #0]
 8004142:	f361 0300 	bfi	r3, r1, #0, #1
 8004146:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a1		=  tc_ary[16];																	// b1:  time change (MEZ <--> MESZ) to come in the next hour, b0: else.
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3310      	adds	r3, #16
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	7813      	ldrb	r3, [r2, #0]
 8004158:	f361 0341 	bfi	r3, r1, #1, #1
 800415c:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->z			= (tc_ary[17] << 1) | tc_ary[18];												// b01: MEZ, b10: MESZ.
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3311      	adds	r3, #17
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b25a      	sxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3312      	adds	r3, #18
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b25b      	sxtb	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b25b      	sxtb	r3, r3
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	b2d9      	uxtb	r1, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	7813      	ldrb	r3, [r2, #0]
 800417e:	f361 0383 	bfi	r3, r1, #2, #2
 8004182:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->a2		=  tc_ary[19];																	// b1:  additional second to be added within the next hour, b0: else.
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3313      	adds	r3, #19
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	b2d9      	uxtb	r1, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	7813      	ldrb	r3, [r2, #0]
 8004194:	f361 1304 	bfi	r3, r1, #4, #1
 8004198:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->s			=  tc_ary[20];																	// b1:  Startbit
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3314      	adds	r3, #20
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	b2d9      	uxtb	r1, r3
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	7813      	ldrb	r3, [r2, #0]
 80041aa:	f361 1345 	bfi	r3, r1, #5, #1
 80041ae:	7013      	strb	r3, [r2, #0]
		dcfNxtMinuteTime->_02		= 0U;																			// filling the byte.
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	7813      	ldrb	r3, [r2, #0]
 80041b4:	f36f 1387 	bfc	r3, #6, #2
 80041b8:	7013      	strb	r3, [r2, #0]

		dcfNxtMinuteTime->mn_xM		= (tc_ary[24] << 3) | (tc_ary[23] << 2) | (tc_ary[22] << 1) | (tc_ary[21]);		// BCD code for the minute, right digit.
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3318      	adds	r3, #24
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	b25a      	sxtb	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3317      	adds	r3, #23
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b25a      	sxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3316      	adds	r3, #22
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	4313      	orrs	r3, r2
 80041de:	b25a      	sxtb	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3315      	adds	r3, #21
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b25b      	sxtb	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	b2d9      	uxtb	r1, r3
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	7853      	ldrb	r3, [r2, #1]
 80041f6:	f361 0303 	bfi	r3, r1, #0, #4
 80041fa:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_Mx		=                     (tc_ary[27] << 2) | (tc_ary[26] << 1) | (tc_ary[25]);		// BCD code for the minute, left  digit.
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	331b      	adds	r3, #27
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	b25a      	sxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	331a      	adds	r3, #26
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	b25b      	sxtb	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	b25a      	sxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3319      	adds	r3, #25
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b25b      	sxtb	r3, r3
 800421c:	4313      	orrs	r3, r2
 800421e:	b25b      	sxtb	r3, r3
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	b2d9      	uxtb	r1, r3
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	7853      	ldrb	r3, [r2, #1]
 800422a:	f361 1306 	bfi	r3, r1, #4, #3
 800422e:	7053      	strb	r3, [r2, #1]
		dcfNxtMinuteTime->mn_P1		=  tc_ary[28];																	// Even parity for the minute.
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	331c      	adds	r3, #28
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	b2d9      	uxtb	r1, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	7853      	ldrb	r3, [r2, #1]
 8004240:	f361 13c7 	bfi	r3, r1, #7, #1
 8004244:	7053      	strb	r3, [r2, #1]

		dcfNxtMinuteTime->hr_xH		= (tc_ary[32] << 3) | (tc_ary[31] << 2) | (tc_ary[30] << 1) | (tc_ary[29]);		// BCD code for the hour, right digit.
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3320      	adds	r3, #32
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	b25a      	sxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	331f      	adds	r3, #31
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	b25b      	sxtb	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b25a      	sxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	331e      	adds	r3, #30
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b25b      	sxtb	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b25a      	sxtb	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	331d      	adds	r3, #29
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b25b      	sxtb	r3, r3
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	b2d9      	uxtb	r1, r3
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	7893      	ldrb	r3, [r2, #2]
 8004282:	f361 0303 	bfi	r3, r1, #0, #4
 8004286:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_Hx		=                                         (tc_ary[34] << 1) | (tc_ary[33]);		// BCD code for the hour, left  digit.
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3322      	adds	r3, #34	; 0x22
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	b25a      	sxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3321      	adds	r3, #33	; 0x21
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b25b      	sxtb	r3, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	b25b      	sxtb	r3, r3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	b2d9      	uxtb	r1, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	7893      	ldrb	r3, [r2, #2]
 80042a8:	f361 1305 	bfi	r3, r1, #4, #2
 80042ac:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->hr_P2		=  tc_ary[35];																	// Even parity for the hour.
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3323      	adds	r3, #35	; 0x23
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	b2d9      	uxtb	r1, r3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	7893      	ldrb	r3, [r2, #2]
 80042be:	f361 1386 	bfi	r3, r1, #6, #1
 80042c2:	7093      	strb	r3, [r2, #2]
		dcfNxtMinuteTime->_11		= 0U;																			// filling the byte.
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	7893      	ldrb	r3, [r2, #2]
 80042c8:	f36f 13c7 	bfc	r3, #7, #1
 80042cc:	7093      	strb	r3, [r2, #2]

		dcfNxtMinuteTime->dy_xD		= (tc_ary[39] << 3) | (tc_ary[38] << 2) | (tc_ary[37] << 1) | (tc_ary[36]);		// BCD code for the day of the month, right digit.
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3327      	adds	r3, #39	; 0x27
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3326      	adds	r3, #38	; 0x26
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b25a      	sxtb	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3325      	adds	r3, #37	; 0x25
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b25a      	sxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3324      	adds	r3, #36	; 0x24
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	b2d9      	uxtb	r1, r3
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	78d3      	ldrb	r3, [r2, #3]
 800430a:	f361 0303 	bfi	r3, r1, #0, #4
 800430e:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->dy_Dx		=                                         (tc_ary[41] << 1) | (tc_ary[40]);		// BCD code for the day of the month, left  digit.
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3329      	adds	r3, #41	; 0x29
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	b25a      	sxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3328      	adds	r3, #40	; 0x28
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b25b      	sxtb	r3, r3
 8004322:	4313      	orrs	r3, r2
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	b2d9      	uxtb	r1, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	78d3      	ldrb	r3, [r2, #3]
 8004330:	f361 1305 	bfi	r3, r1, #4, #2
 8004334:	70d3      	strb	r3, [r2, #3]
		dcfNxtMinuteTime->_22		= 0U;																			// filling the byte.
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	78d3      	ldrb	r3, [r2, #3]
 800433a:	f36f 1387 	bfc	r3, #6, #2
 800433e:	70d3      	strb	r3, [r2, #3]

		dcfNxtMinuteTime->wd_xD		=                     (tc_ary[44] << 2) | (tc_ary[43] << 1) | (tc_ary[42]);		// BCD code for the day of the week, 1=monday .. 7=sunday (ISO 8601).
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	332c      	adds	r3, #44	; 0x2c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	b25a      	sxtb	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	332b      	adds	r3, #43	; 0x2b
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	b25b      	sxtb	r3, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	b25a      	sxtb	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	332a      	adds	r3, #42	; 0x2a
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b25b      	sxtb	r3, r3
 8004360:	4313      	orrs	r3, r2
 8004362:	b25b      	sxtb	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b2d9      	uxtb	r1, r3
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	7913      	ldrb	r3, [r2, #4]
 800436e:	f361 0302 	bfi	r3, r1, #0, #3
 8004372:	7113      	strb	r3, [r2, #4]
		dcfNxtMinuteTime->_35		= 0U;																			// filling the byte.
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	7913      	ldrb	r3, [r2, #4]
 8004378:	f36f 03c7 	bfc	r3, #3, #5
 800437c:	7113      	strb	r3, [r2, #4]

		dcfNxtMinuteTime->mo_xM		= (tc_ary[48] << 3) | (tc_ary[47] << 2) | (tc_ary[46] << 1) | (tc_ary[45]);		// BCD code for the month, right digit.
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3330      	adds	r3, #48	; 0x30
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	b25a      	sxtb	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	332f      	adds	r3, #47	; 0x2f
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	b25b      	sxtb	r3, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	b25a      	sxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	332e      	adds	r3, #46	; 0x2e
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	4313      	orrs	r3, r2
 80043a2:	b25a      	sxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	332d      	adds	r3, #45	; 0x2d
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b25b      	sxtb	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b25b      	sxtb	r3, r3
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	b2d9      	uxtb	r1, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	7953      	ldrb	r3, [r2, #5]
 80043ba:	f361 0303 	bfi	r3, r1, #0, #4
 80043be:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->mo_Mx		= (tc_ary[49]);																	// BCD code for the month, left  digit.
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3331      	adds	r3, #49	; 0x31
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	b2d9      	uxtb	r1, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	7953      	ldrb	r3, [r2, #5]
 80043d0:	f361 1304 	bfi	r3, r1, #4, #1
 80043d4:	7153      	strb	r3, [r2, #5]
		dcfNxtMinuteTime->_43		= 0U;																			// filling the byte.
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	7953      	ldrb	r3, [r2, #5]
 80043da:	f36f 1347 	bfc	r3, #5, #3
 80043de:	7153      	strb	r3, [r2, #5]

		dcfNxtMinuteTime->yr_xY		= (tc_ary[53] << 3) | (tc_ary[52] << 2) | (tc_ary[51] << 1) | (tc_ary[50]);		// BCD code for the last two digits of the year, right digit.
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3335      	adds	r3, #53	; 0x35
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	b25a      	sxtb	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3334      	adds	r3, #52	; 0x34
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b25a      	sxtb	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3333      	adds	r3, #51	; 0x33
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	b25b      	sxtb	r3, r3
 8004402:	4313      	orrs	r3, r2
 8004404:	b25a      	sxtb	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3332      	adds	r3, #50	; 0x32
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b25b      	sxtb	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	b25b      	sxtb	r3, r3
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	b2d9      	uxtb	r1, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	7993      	ldrb	r3, [r2, #6]
 800441c:	f361 0303 	bfi	r3, r1, #0, #4
 8004420:	7193      	strb	r3, [r2, #6]
		dcfNxtMinuteTime->yr_Yx		= (tc_ary[57] << 3) | (tc_ary[56] << 2) | (tc_ary[55] << 1) | (tc_ary[54]);		// BCD code for the last two digits of the year, left  digit.
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3339      	adds	r3, #57	; 0x39
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	b25a      	sxtb	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3338      	adds	r3, #56	; 0x38
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	b25b      	sxtb	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b25a      	sxtb	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3337      	adds	r3, #55	; 0x37
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	b25b      	sxtb	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b25a      	sxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3336      	adds	r3, #54	; 0x36
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b25b      	sxtb	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b25b      	sxtb	r3, r3
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	b2d9      	uxtb	r1, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	7993      	ldrb	r3, [r2, #6]
 800445e:	f361 1307 	bfi	r3, r1, #4, #4
 8004462:	7193      	strb	r3, [r2, #6]

		dcfNxtMinuteTime->hr_P3		= (tc_ary[58]);																	// Even parity for the date block.
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	333a      	adds	r3, #58	; 0x3a
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	b2d9      	uxtb	r1, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	79d3      	ldrb	r3, [r2, #7]
 8004474:	f361 0300 	bfi	r3, r1, #0, #1
 8004478:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->prn_59	= (tc_ary[59]);																	// b0:  Minute ends.
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	333b      	adds	r3, #59	; 0x3b
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	b2d9      	uxtb	r1, r3
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	79d3      	ldrb	r3, [r2, #7]
 800448a:	f361 0341 	bfi	r3, r1, #1, #1
 800448e:	71d3      	strb	r3, [r2, #7]
		dcfNxtMinuteTime->_57		= 0U;																			// filling the byte.
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	7a13      	ldrb	r3, [r2, #8]
 8004494:	f36f 0306 	bfc	r3, #0, #7
 8004498:	7213      	strb	r3, [r2, #8]
	}

	/* Parity checks */
	{
		if (!dcfNxtMinuteTime->s) {
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <calcDcfTelegram+0x394>
			return 11U;
 80044a8:	230b      	movs	r3, #11
 80044aa:	e0be      	b.n	800462a <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3318      	adds	r3, #24
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3317      	adds	r3, #23
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4053      	eors	r3, r2
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3316      	adds	r3, #22
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	4053      	eors	r3, r2
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3315      	adds	r3, #21
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4053      	eors	r3, r2
 80044ce:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	331b      	adds	r3, #27
 80044d4:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 80044d6:	4053      	eors	r3, r2
 80044d8:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	331a      	adds	r3, #26
 80044de:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 80044e0:	4053      	eors	r3, r2
 80044e2:	b2da      	uxtb	r2, r3
							 tc_ary[27] ^ tc_ary[26] ^ tc_ary[25]  ^
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3319      	adds	r3, #25
 80044e8:	781b      	ldrb	r3, [r3, #0]
				tc_ary[24] ^ tc_ary[23] ^ tc_ary[22] ^ tc_ary[21]  ^
 80044ea:	4053      	eors	r3, r2
 80044ec:	b2da      	uxtb	r2, r3
				tc_ary[28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	331c      	adds	r3, #28
 80044f2:	781b      	ldrb	r3, [r3, #0]
		if (
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <calcDcfTelegram+0x3e4>
		) {
			/* Bad parity P1 */
			return 1U;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e096      	b.n	800462a <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	331f      	adds	r3, #31
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	4053      	eors	r3, r2
 800450a:	b2da      	uxtb	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	331e      	adds	r3, #30
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	4053      	eors	r3, r2
 8004514:	b2da      	uxtb	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	331d      	adds	r3, #29
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	4053      	eors	r3, r2
 800451e:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3322      	adds	r3, #34	; 0x22
 8004524:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 8004526:	4053      	eors	r3, r2
 8004528:	b2da      	uxtb	r2, r3
										  tc_ary[34] ^ tc_ary[33]  ^
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3321      	adds	r3, #33	; 0x21
 800452e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[32] ^ tc_ary[31] ^ tc_ary[30] ^ tc_ary[29]  ^
 8004530:	4053      	eors	r3, r2
 8004532:	b2da      	uxtb	r2, r3
				tc_ary[35]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3323      	adds	r3, #35	; 0x23
 8004538:	781b      	ldrb	r3, [r3, #0]
		if (
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <calcDcfTelegram+0x42a>
		) {
			/* Bad parity P2 */
			return 2U;
 800453e:	2302      	movs	r3, #2
 8004540:	e073      	b.n	800462a <calcDcfTelegram+0x512>
		}

		if (
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3327      	adds	r3, #39	; 0x27
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3326      	adds	r3, #38	; 0x26
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	4053      	eors	r3, r2
 8004550:	b2da      	uxtb	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3325      	adds	r3, #37	; 0x25
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4053      	eors	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3324      	adds	r3, #36	; 0x24
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	4053      	eors	r3, r2
 8004564:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3329      	adds	r3, #41	; 0x29
 800456a:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800456c:	4053      	eors	r3, r2
 800456e:	b2da      	uxtb	r2, r3
							              tc_ary[41] ^ tc_ary[40]  ^
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3328      	adds	r3, #40	; 0x28
 8004574:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004576:	4053      	eors	r3, r2
 8004578:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	332c      	adds	r3, #44	; 0x2c
 800457e:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004580:	4053      	eors	r3, r2
 8004582:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	332b      	adds	r3, #43	; 0x2b
 8004588:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800458a:	4053      	eors	r3, r2
 800458c:	b2da      	uxtb	r2, r3
							 tc_ary[44] ^ tc_ary[43] ^ tc_ary[42]  ^
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	332a      	adds	r3, #42	; 0x2a
 8004592:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004594:	4053      	eors	r3, r2
 8004596:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3330      	adds	r3, #48	; 0x30
 800459c:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800459e:	4053      	eors	r3, r2
 80045a0:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	332f      	adds	r3, #47	; 0x2f
 80045a6:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045a8:	4053      	eors	r3, r2
 80045aa:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	332e      	adds	r3, #46	; 0x2e
 80045b0:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045b2:	4053      	eors	r3, r2
 80045b4:	b2da      	uxtb	r2, r3
				tc_ary[48] ^ tc_ary[47] ^ tc_ary[46] ^ tc_ary[45]  ^
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	332d      	adds	r3, #45	; 0x2d
 80045ba:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045bc:	4053      	eors	r3, r2
 80045be:	b2da      	uxtb	r2, r3
	                                                   tc_ary[49]  ^
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3331      	adds	r3, #49	; 0x31
 80045c4:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045c6:	4053      	eors	r3, r2
 80045c8:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3335      	adds	r3, #53	; 0x35
 80045ce:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045d0:	4053      	eors	r3, r2
 80045d2:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3334      	adds	r3, #52	; 0x34
 80045d8:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045da:	4053      	eors	r3, r2
 80045dc:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3333      	adds	r3, #51	; 0x33
 80045e2:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045e4:	4053      	eors	r3, r2
 80045e6:	b2da      	uxtb	r2, r3
				tc_ary[53] ^ tc_ary[52] ^ tc_ary[51] ^ tc_ary[50]  ^
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3332      	adds	r3, #50	; 0x32
 80045ec:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045ee:	4053      	eors	r3, r2
 80045f0:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3339      	adds	r3, #57	; 0x39
 80045f6:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 80045f8:	4053      	eors	r3, r2
 80045fa:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004602:	4053      	eors	r3, r2
 8004604:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3337      	adds	r3, #55	; 0x37
 800460a:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 800460c:	4053      	eors	r3, r2
 800460e:	b2da      	uxtb	r2, r3
				tc_ary[57] ^ tc_ary[56] ^ tc_ary[55] ^ tc_ary[54]  ^
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3336      	adds	r3, #54	; 0x36
 8004614:	781b      	ldrb	r3, [r3, #0]
				tc_ary[39] ^ tc_ary[38] ^ tc_ary[37] ^ tc_ary[36]  ^
 8004616:	4053      	eors	r3, r2
 8004618:	b2da      	uxtb	r2, r3
				tc_ary[58]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	333a      	adds	r3, #58	; 0x3a
 800461e:	781b      	ldrb	r3, [r3, #0]
		if (
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <calcDcfTelegram+0x510>
		) {
			/* Bad parity P3 */
			return 3U;
 8004624:	2303      	movs	r3, #3
 8004626:	e000      	b.n	800462a <calcDcfTelegram+0x512>
		}
	}

	/* All well */
	return 0U;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <main_get_MaidenheadLocator_from_LatLon>:


uint8_t main_get_MaidenheadLocator_from_LatLon(uint8_t maxLen, uint8_t* tgtStr, float lat, float lon)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	ed87 0a01 	vstr	s0, [r7, #4]
 8004646:	edc7 0a00 	vstr	s1, [r7]
 800464a:	73fb      	strb	r3, [r7, #15]
	if (
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b06      	cmp	r3, #6
 8004650:	f240 80d3 	bls.w	80047fa <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(maxLen >= 7)   &&
 8004654:	edd7 7a01 	vldr	s15, [r7, #4]
 8004658:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004808 <main_get_MaidenheadLocator_from_LatLon+0x1d0>
 800465c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	f340 80c9 	ble.w	80047fa <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			( -90.0f < lat) && (lat <  +90.0f) &&
 8004668:	edd7 7a01 	vldr	s15, [r7, #4]
 800466c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800480c <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 8004670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	f140 80bf 	bpl.w	80047fa <main_get_MaidenheadLocator_from_LatLon+0x1c2>
 800467c:	edd7 7a00 	vldr	s15, [r7]
 8004680:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004810 <main_get_MaidenheadLocator_from_LatLon+0x1d8>
 8004684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468c:	f340 80b5 	ble.w	80047fa <main_get_MaidenheadLocator_from_LatLon+0x1c2>
			(-180.0f < lon) && (lon < +180.0f))
 8004690:	edd7 7a00 	vldr	s15, [r7]
 8004694:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004814 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 8004698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a0:	f140 80ab 	bpl.w	80047fa <main_get_MaidenheadLocator_from_LatLon+0x1c2>
	{
		/* Grid movement */
		lon += 180.0f;
 80046a4:	edd7 7a00 	vldr	s15, [r7]
 80046a8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004814 <main_get_MaidenheadLocator_from_LatLon+0x1dc>
 80046ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046b0:	edc7 7a00 	vstr	s15, [r7]
		lat +=  90.0f;
 80046b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800480c <main_get_MaidenheadLocator_from_LatLon+0x1d4>
 80046bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046c0:	edc7 7a01 	vstr	s15, [r7, #4]

		lon *= 25U;
 80046c4:	edd7 7a00 	vldr	s15, [r7]
 80046c8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80046cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d0:	edc7 7a00 	vstr	s15, [r7]
		lon	-= 0.5f;
 80046d4:	edd7 7a00 	vldr	s15, [r7]
 80046d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046e0:	edc7 7a00 	vstr	s15, [r7]
		lon /= 2U;
 80046e4:	ed97 7a00 	vldr	s14, [r7]
 80046e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f0:	edc7 7a00 	vstr	s15, [r7]
		uint32_t lon_i = (uint32_t) lon;
 80046f4:	edd7 7a00 	vldr	s15, [r7]
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	61fb      	str	r3, [r7, #28]

		lat *= 25U;
 8004702:	edd7 7a01 	vldr	s15, [r7, #4]
 8004706:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800470a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800470e:	edc7 7a01 	vstr	s15, [r7, #4]
		lat	-= 0.5f;
 8004712:	edd7 7a01 	vldr	s15, [r7, #4]
 8004716:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800471a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800471e:	edc7 7a01 	vstr	s15, [r7, #4]
		uint32_t lat_i = (uint32_t) lat;
 8004722:	edd7 7a01 	vldr	s15, [r7, #4]
 8004726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472a:	ee17 3a90 	vmov	r3, s15
 800472e:	61bb      	str	r3, [r7, #24]

		uint8_t	lon_p0	= (uint8_t) (lon_i / 250UL);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4a39      	ldr	r2, [pc, #228]	; (8004818 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	75fb      	strb	r3, [r7, #23]
		uint8_t	lat_p0	= (uint8_t) (lat_i / 250UL);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4a36      	ldr	r2, [pc, #216]	; (8004818 <main_get_MaidenheadLocator_from_LatLon+0x1e0>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	75bb      	strb	r3, [r7, #22]

		lon_i -= lon_p0 * 250UL;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	22fa      	movs	r2, #250	; 0xfa
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p0 * 250UL;
 8004756:	7dbb      	ldrb	r3, [r7, #22]
 8004758:	22fa      	movs	r2, #250	; 0xfa
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p1 = (uint8_t) (lon_i / 25UL);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4a2d      	ldr	r2, [pc, #180]	; (800481c <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	757b      	strb	r3, [r7, #21]
		uint8_t lat_p1 = (uint8_t) (lat_i / 25UL);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4a2a      	ldr	r2, [pc, #168]	; (800481c <main_get_MaidenheadLocator_from_LatLon+0x1e4>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	753b      	strb	r3, [r7, #20]

		lon_i -= lon_p1 * 25UL;
 800477c:	7d7a      	ldrb	r2, [r7, #21]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009a      	lsls	r2, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	61fb      	str	r3, [r7, #28]
		lat_i -= lat_p1 * 25UL;
 800478e:	7d3a      	ldrb	r2, [r7, #20]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009a      	lsls	r2, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	61bb      	str	r3, [r7, #24]

		uint8_t lon_p2 = lon_i;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	74fb      	strb	r3, [r7, #19]
		uint8_t lat_p2 = lat_i;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	74bb      	strb	r3, [r7, #18]

		/* Output string */
		*(tgtStr + 0)	= 'A' + lon_p0;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	3341      	adds	r3, #65	; 0x41
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 1)	= 'A' + lat_p0;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3301      	adds	r3, #1
 80047b6:	7dba      	ldrb	r2, [r7, #22]
 80047b8:	3241      	adds	r2, #65	; 0x41
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 2)	= '0' + lon_p1;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3302      	adds	r3, #2
 80047c2:	7d7a      	ldrb	r2, [r7, #21]
 80047c4:	3230      	adds	r2, #48	; 0x30
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 3)	= '0' + lat_p1;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3303      	adds	r3, #3
 80047ce:	7d3a      	ldrb	r2, [r7, #20]
 80047d0:	3230      	adds	r2, #48	; 0x30
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 4)	= 'a' + lon_p2;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3304      	adds	r3, #4
 80047da:	7cfa      	ldrb	r2, [r7, #19]
 80047dc:	3261      	adds	r2, #97	; 0x61
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 5)	= 'a' + lat_p2;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3305      	adds	r3, #5
 80047e6:	7cba      	ldrb	r2, [r7, #18]
 80047e8:	3261      	adds	r2, #97	; 0x61
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
		*(tgtStr + 6)	= 0;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3306      	adds	r3, #6
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]

		return 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e000      	b.n	80047fc <main_get_MaidenheadLocator_from_LatLon+0x1c4>
	}

	/* Error */
	return 1;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3724      	adds	r7, #36	; 0x24
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	c2b40000 	.word	0xc2b40000
 800480c:	42b40000 	.word	0x42b40000
 8004810:	c3340000 	.word	0xc3340000
 8004814:	43340000 	.word	0x43340000
 8004818:	10624dd3 	.word	0x10624dd3
 800481c:	51eb851f 	.word	0x51eb851f

08004820 <mainLoop_PLL_calc>:


void mainLoop_PLL_calc(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
#if defined(PLL_BY_SOFTWARE)
  /* Software PLL logics */
  {
	  /* Default value for everything is okay */
	  gpioLockedLED = GPIO_PIN_SET;
 8004824:	4b81      	ldr	r3, [pc, #516]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]

	  /* DAC output mode */
	  gI2cDacMode = 0b00;
 800482a:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <mainLoop_PLL_calc+0x210>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]

	  /* Do not tune when primary temp sensor is out of temp range of OCXO */
	  if (owDevicesCount) {
 8004830:	4b80      	ldr	r3, [pc, #512]	; (8004a34 <mainLoop_PLL_calc+0x214>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d012      	beq.n	800485e <mainLoop_PLL_calc+0x3e>
		  if (owDs18b20_Temp_f[0] < ONEWIRE_DS18B20_ALARM_LO) {
 8004838:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <mainLoop_PLL_calc+0x218>)
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004a3c <mainLoop_PLL_calc+0x21c>
 8004842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	d508      	bpl.n	800485e <mainLoop_PLL_calc+0x3e>
			  /* Keep sum-up registers cleared */
			  giTim15Ch2_TicksDiff 	= 0L;
 800484c:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
			  giTim15Ch2_TicksEvt	= 0UL;
 8004852:	4b7c      	ldr	r3, [pc, #496]	; (8004a44 <mainLoop_PLL_calc+0x224>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

			  /* Not locked in */
			  gpioLockedLED = GPIO_PIN_RESET;
 8004858:	4b74      	ldr	r3, [pc, #464]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  /* Check if ubox NEO is locked in */
	  if (gUbloxTimeAcc >= 500UL) {  // when worse than that stop time tracking
 800485e:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <mainLoop_PLL_calc+0x228>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004866:	d308      	bcc.n	800487a <mainLoop_PLL_calc+0x5a>
		  /* Keep sum-up registers cleared */
		  giTim15Ch2_TicksDiff 	= 0L;
 8004868:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
		  giTim15Ch2_TicksEvt	= 0UL;
 800486e:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <mainLoop_PLL_calc+0x224>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

		  /* Not locked in */
		  gpioLockedLED = GPIO_PIN_RESET;
 8004874:	4b6d      	ldr	r3, [pc, #436]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	  }

	  if (giTim15Ch2_TicksEvt > 15) {
 800487a:	4b72      	ldr	r3, [pc, #456]	; (8004a44 <mainLoop_PLL_calc+0x224>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	f240 80c8 	bls.w	8004a14 <mainLoop_PLL_calc+0x1f4>
		  /* Fractions accounting */
		  if (0 < giTim15Ch2_TicksDiff) {
 8004884:	4b6e      	ldr	r3, [pc, #440]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dd2d      	ble.n	80048e8 <mainLoop_PLL_calc+0xc8>
			  if (giTim15Ch2_ppm > 0.0f) {
 800488c:	4b6f      	ldr	r3, [pc, #444]	; (8004a4c <mainLoop_PLL_calc+0x22c>)
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	dd12      	ble.n	80048c2 <mainLoop_PLL_calc+0xa2>
				  gI2cDacFraction -= giTim15Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8004a50 <mainLoop_PLL_calc+0x230>
 80048ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048b0:	4b68      	ldr	r3, [pc, #416]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80048b2:	ed93 7a00 	vldr	s14, [r3]
 80048b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ba:	4b66      	ldr	r3, [pc, #408]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80048bc:	edc3 7a00 	vstr	s15, [r3]
 80048c0:	e043      	b.n	800494a <mainLoop_PLL_calc+0x12a>
			  } else {
				  gI2cDacFraction += giTim15Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 80048c2:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ce:	eddf 6a62 	vldr	s13, [pc, #392]	; 8004a58 <mainLoop_PLL_calc+0x238>
 80048d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80048d6:	4b5f      	ldr	r3, [pc, #380]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e0:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80048e2:	edc3 7a00 	vstr	s15, [r3]
 80048e6:	e030      	b.n	800494a <mainLoop_PLL_calc+0x12a>
			  }
		  }
		  else if (giTim15Ch2_TicksDiff < 0) {
 80048e8:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da2c      	bge.n	800494a <mainLoop_PLL_calc+0x12a>
			  if (giTim15Ch2_ppm < 0.0f) {
 80048f0:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <mainLoop_PLL_calc+0x22c>)
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	d512      	bpl.n	8004926 <mainLoop_PLL_calc+0x106>
				  gI2cDacFraction -= giTim15Ch2_TicksDiff / SW_PLL_TUNE_FAST;
 8004900:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800490c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004a50 <mainLoop_PLL_calc+0x230>
 8004910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004914:	4b4f      	ldr	r3, [pc, #316]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004916:	ed93 7a00 	vldr	s14, [r3]
 800491a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800491e:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004920:	edc3 7a00 	vstr	s15, [r3]
 8004924:	e011      	b.n	800494a <mainLoop_PLL_calc+0x12a>
			  } else {
				  gI2cDacFraction += giTim15Ch2_TicksDiff / SW_PLL_TUNE_SLOW;
 8004926:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004932:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004a58 <mainLoop_PLL_calc+0x238>
 8004936:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800493a:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 800493c:	edd3 7a00 	vldr	s15, [r3]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004946:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

		  /* Fractions to DAC value */
		  if (gI2cDacFraction > +0.501f) {
 800494a:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004a5c <mainLoop_PLL_calc+0x23c>
 8004954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	dd28      	ble.n	80049b0 <mainLoop_PLL_calc+0x190>
			  if (gI2cDacVal < 2046) {
 800495e:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8004966:	4293      	cmp	r3, r2
 8004968:	d805      	bhi.n	8004976 <mainLoop_PLL_calc+0x156>
				  ++gI2cDacVal;
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 8004974:	801a      	strh	r2, [r3, #0]
			  }

			  gI2cDacFraction -= 1.0f;
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004986:	edc3 7a00 	vstr	s15, [r3]

			  if (gI2cDacFraction > +0.501f) {
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 800498c:	edd3 7a00 	vldr	s15, [r3]
 8004990:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004a5c <mainLoop_PLL_calc+0x23c>
 8004994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	dc00      	bgt.n	80049a0 <mainLoop_PLL_calc+0x180>
		  giTim15Ch2_TicksDiff	= 0UL;
	  }
  }

#endif
}
 800499e:	e03f      	b.n	8004a20 <mainLoop_PLL_calc+0x200>
				  gI2cDacFraction = +0.5f;
 80049a0:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80049a2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80049a6:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 80049a8:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	e037      	b.n	8004a20 <mainLoop_PLL_calc+0x200>
		  else if (gI2cDacFraction < -0.501f) {
 80049b0:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80049b2:	edd3 7a00 	vldr	s15, [r3]
 80049b6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004a64 <mainLoop_PLL_calc+0x244>
 80049ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d400      	bmi.n	80049c6 <mainLoop_PLL_calc+0x1a6>
}
 80049c4:	e02c      	b.n	8004a20 <mainLoop_PLL_calc+0x200>
			  if (gI2cDacVal > 0) {
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <mainLoop_PLL_calc+0x1ba>
				  --gI2cDacVal;
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <mainLoop_PLL_calc+0x240>)
 80049d8:	801a      	strh	r2, [r3, #0]
			  gI2cDacFraction += 1.0f;
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80049dc:	edd3 7a00 	vldr	s15, [r3]
 80049e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049e8:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80049ea:	edc3 7a00 	vstr	s15, [r3]
			  if (gI2cDacFraction < -0.501f) {
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 80049f0:	edd3 7a00 	vldr	s15, [r3]
 80049f4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004a64 <mainLoop_PLL_calc+0x244>
 80049f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	d400      	bmi.n	8004a04 <mainLoop_PLL_calc+0x1e4>
}
 8004a02:	e00d      	b.n	8004a20 <mainLoop_PLL_calc+0x200>
				  gI2cDacFraction = -0.5f;
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <mainLoop_PLL_calc+0x234>)
 8004a06:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8004a0a:	601a      	str	r2, [r3, #0]
				  gpioLockedLED = GPIO_PIN_RESET;
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
}
 8004a12:	e005      	b.n	8004a20 <mainLoop_PLL_calc+0x200>
		  giTim15Ch2_TicksDiff	= 0UL;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <mainLoop_PLL_calc+0x220>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
		  gpioLockedLED = GPIO_PIN_RESET;
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <mainLoop_PLL_calc+0x20c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	200002f0 	.word	0x200002f0
 8004a30:	20000315 	.word	0x20000315
 8004a34:	20000304 	.word	0x20000304
 8004a38:	2000030c 	.word	0x2000030c
 8004a3c:	42200000 	.word	0x42200000
 8004a40:	200007b0 	.word	0x200007b0
 8004a44:	200007ac 	.word	0x200007ac
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	200007b8 	.word	0x200007b8
 8004a50:	47435000 	.word	0x47435000
 8004a54:	2000031c 	.word	0x2000031c
 8004a58:	48435000 	.word	0x48435000
 8004a5c:	3f004189 	.word	0x3f004189
 8004a60:	20000318 	.word	0x20000318
 8004a64:	bf004189 	.word	0xbf004189

08004a68 <mainLoop_PLL_print>:

void mainLoop_PLL_print(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
	  }

# endif

#endif
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <mainLoop_ublox_requests>:

void mainLoop_ublox_requests(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	}
#endif

	/* Request only when needed */
	{
		if (!gUbloxNavPosllh.iTOW) {
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <mainLoop_ublox_requests+0x40>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <mainLoop_ublox_requests+0x12>
			ublox_NavPosllh_req(&gUbloxNavPosllh);
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <mainLoop_ublox_requests+0x40>)
 8004a86:	f002 f90b 	bl	8006ca0 <ublox_NavPosllh_req>
		}

		if (!gUbloxNavClock.iTOW) {
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <mainLoop_ublox_requests+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <mainLoop_ublox_requests+0x20>
			ublox_NavClock_req(&gUbloxNavClock);
 8004a92:	480a      	ldr	r0, [pc, #40]	; (8004abc <mainLoop_ublox_requests+0x44>)
 8004a94:	f002 f940 	bl	8006d18 <ublox_NavClock_req>
		}

		if (!gUbloxNavDop.iTOW) {
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <mainLoop_ublox_requests+0x48>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <mainLoop_ublox_requests+0x2e>
			ublox_NavDop_req(&gUbloxNavDop);
 8004aa0:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <mainLoop_ublox_requests+0x48>)
 8004aa2:	f002 f975 	bl	8006d90 <ublox_NavDop_req>
		}

		if (!gUbloxNavSvinfo.iTOW) {
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <mainLoop_ublox_requests+0x4c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <mainLoop_ublox_requests+0x3c>
			ublox_NavSvinfo_req(&gUbloxNavSvinfo);
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <mainLoop_ublox_requests+0x4c>)
 8004ab0:	f002 f9aa 	bl	8006e08 <ublox_NavSvinfo_req>
		}
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200034d0 	.word	0x200034d0
 8004abc:	200034ec 	.word	0x200034ec
 8004ac0:	20003500 	.word	0x20003500
 8004ac4:	20003514 	.word	0x20003514

08004ac8 <mainLoop_ublox_waitForResponses>:

void mainLoop_ublox_waitForResponses(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
	/* Blocks until new second starts */
	gUbloxRespBf = ublox_All_resp();
 8004acc:	f002 f9d8 	bl	8006e80 <ublox_All_resp>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <mainLoop_ublox_waitForResponses+0x1c>)
 8004ad4:	6013      	str	r3, [r2, #0]

	/* ublox data is assigned to customers */
	gUbloxTimeAcc = gUbloxNavClock.tAcc;
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <mainLoop_ublox_waitForResponses+0x20>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4a04      	ldr	r2, [pc, #16]	; (8004aec <mainLoop_ublox_waitForResponses+0x24>)
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200034cc 	.word	0x200034cc
 8004ae8:	200034ec 	.word	0x200034ec
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <mainLoop_ublox_svinfo_sort>:

uint8_t mainLoop_ublox_svinfo_sort(uint8_t elevSortTgtCh[UBLOX_MAX_CH])
{
 8004af0:	b480      	push	{r7}
 8004af2:	b08d      	sub	sp, #52	; 0x34
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	uint8_t elevSortSrcCh[UBLOX_MAX_CH];
	uint8_t srcSize = UBLOX_MAX_CH;
 8004af8:	2318      	movs	r3, #24
 8004afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t posElevCnt = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Prepare src ballot box for all channels */
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004b0a:	e012      	b.n	8004b32 <mainLoop_ublox_svinfo_sort+0x42>
		elevSortSrcCh[srcIdx] = srcIdx;
 8004b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b10:	3330      	adds	r3, #48	; 0x30
 8004b12:	443b      	add	r3, r7
 8004b14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004b18:	f803 2c24 	strb.w	r2, [r3, #-36]
		elevSortTgtCh[srcIdx] = 0xffU;  // Signal for 'entry not valid'
 8004b1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]
	for (uint8_t srcIdx = 0U; srcIdx < UBLOX_MAX_CH; ++srcIdx) {
 8004b28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004b32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b36:	2b17      	cmp	r3, #23
 8004b38:	d9e8      	bls.n	8004b0c <mainLoop_ublox_svinfo_sort+0x1c>
	}

	/* Find each target element */
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004b40:	e094      	b.n	8004c6c <mainLoop_ublox_svinfo_sort+0x17c>
		uint8_t elevMaxCh 	= 0xffU;
 8004b42:	23ff      	movs	r3, #255	; 0xff
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		int8_t  elevMaxVal 	= -127;
 8004b48:	2381      	movs	r3, #129	; 0x81
 8004b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t srcIdxHit	= 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004b5a:	e043      	b.n	8004be4 <mainLoop_ublox_svinfo_sort+0xf4>
			uint8_t elevCh	= elevSortSrcCh[srcIdx];
 8004b5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b60:	3330      	adds	r3, #48	; 0x30
 8004b62:	443b      	add	r3, r7
 8004b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int8_t  elevVal	= gUbloxNavSvinfo.elev[elevCh];
 8004b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b70:	4a45      	ldr	r2, [pc, #276]	; (8004c88 <mainLoop_ublox_svinfo_sort+0x198>)
 8004b72:	4413      	add	r3, r2
 8004b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t elevOk	= (gUbloxNavSvinfo.quality[elevCh] & 0x0dU) && !(gUbloxNavSvinfo.quality[elevCh] & 0x10U);
 8004b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b80:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <mainLoop_ublox_svinfo_sort+0x198>)
 8004b82:	4413      	add	r3, r2
 8004b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b88:	f003 030d 	and.w	r3, r3, #13
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <mainLoop_ublox_svinfo_sort+0xb8>
 8004b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b94:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <mainLoop_ublox_svinfo_sort+0x198>)
 8004b96:	4413      	add	r3, r2
 8004b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <mainLoop_ublox_svinfo_sort+0xb8>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <mainLoop_ublox_svinfo_sort+0xba>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if ((elevVal > elevMaxVal) && elevOk) {
 8004bae:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 8004bb2:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	dd0f      	ble.n	8004bda <mainLoop_ublox_svinfo_sort+0xea>
 8004bba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <mainLoop_ublox_svinfo_sort+0xea>
				srcIdxHit	= srcIdx;
 8004bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				elevMaxCh 	= elevCh;
 8004bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				elevMaxVal 	= elevVal;
 8004bd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t srcIdx = 0U; srcIdx < srcSize; ++srcIdx) {
 8004bda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bde:	3301      	adds	r3, #1
 8004be0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004be4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3b5      	bcc.n	8004b5c <mainLoop_ublox_svinfo_sort+0x6c>
			}
		}

		/* Count SVs with positive elevation */
		if (elevMaxVal > 0) {
 8004bf0:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	dd04      	ble.n	8004c02 <mainLoop_ublox_svinfo_sort+0x112>
			++posElevCnt;
 8004bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		/* Fill target */
		elevSortTgtCh[tgtIdx] = elevMaxCh;
 8004c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c0e:	701a      	strb	r2, [r3, #0]

		/* Shrink source ballot box by one entry */
		--srcSize;
 8004c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004c1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c22:	e011      	b.n	8004c48 <mainLoop_ublox_svinfo_sort+0x158>
			elevSortSrcCh[srcIdx] = elevSortSrcCh[srcIdx + 1];
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2e:	3230      	adds	r2, #48	; 0x30
 8004c30:	443a      	add	r2, r7
 8004c32:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8004c36:	3330      	adds	r3, #48	; 0x30
 8004c38:	443b      	add	r3, r7
 8004c3a:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (uint8_t srcIdx = srcIdxHit; srcIdx < srcSize; ++srcIdx) {
 8004c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c42:	3301      	adds	r3, #1
 8004c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3e7      	bcc.n	8004c24 <mainLoop_ublox_svinfo_sort+0x134>
		}
		elevSortSrcCh[srcSize] = 0xffU;
 8004c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c58:	3330      	adds	r3, #48	; 0x30
 8004c5a:	443b      	add	r3, r7
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t tgtIdx = 0U; tgtIdx < UBLOX_MAX_CH; ++tgtIdx) {
 8004c62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c66:	3301      	adds	r3, #1
 8004c68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c70:	2b17      	cmp	r3, #23
 8004c72:	f67f af66 	bls.w	8004b42 <mainLoop_ublox_svinfo_sort+0x52>
	}

	return posElevCnt;
 8004c76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3734      	adds	r7, #52	; 0x34
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20003514 	.word	0x20003514

08004c8c <mainLoop_ublox_print>:

void mainLoop_ublox_print(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
# if 0
		ublox_NavSvinfo_print(&gUbloxNavSvinfo);
# endif
	}
#endif
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <mainLoop_ow_temp_waitForResponse>:

void mainLoop_ow_temp_waitForResponse(uint32_t tempWaitUntil, uint8_t owDeviceIdx)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
	/* Onewire handling */
	owDs18b20_Temp[owDeviceIdx]		= onewireDS18B20_tempRead(tempWaitUntil, owDevices[owDeviceIdx]);
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <mainLoop_ow_temp_waitForResponse+0x54>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	78fc      	ldrb	r4, [r7, #3]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc fff4 	bl	8001ca2 <onewireDS18B20_tempRead>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <mainLoop_ow_temp_waitForResponse+0x58>)
 8004cc0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	owDs18b20_Temp_f[owDeviceIdx]	= owDs18b20_Temp[owDeviceIdx] / 16.0f;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <mainLoop_ow_temp_waitForResponse+0x58>)
 8004cc8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cde:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <mainLoop_ow_temp_waitForResponse+0x5c>)
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	edc3 7a00 	vstr	s15, [r3]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	200002f4 	.word	0x200002f4
 8004cf4:	20000308 	.word	0x20000308
 8004cf8:	2000030c 	.word	0x2000030c

08004cfc <mainLoop_ow_temp_print>:

void mainLoop_ow_temp_print(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0

		int len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature sensor %d: %+02d,%02u degC\r\n", idx, t_int, (t_fv1000 + 5) / 10);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <mainLoop_ow_tempAlarm_req>:

void mainLoop_ow_tempAlarm_req(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
	uint8_t owAlarmDevices[2][8] = { 0 };
 8004d12:	463b      	mov	r3, r7
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]

	owAlarmCount = onewireMasterTree_search(1U, owDevicesCount, owAlarmDevices);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <mainLoop_ow_tempAlarm_req+0x30>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	463a      	mov	r2, r7
 8004d24:	4619      	mov	r1, r3
 8004d26:	2001      	movs	r0, #1
 8004d28:	f7fc fdfc 	bl	8001924 <onewireMasterTree_search>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <mainLoop_ow_tempAlarm_req+0x34>)
 8004d32:	701a      	strb	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000304 	.word	0x20000304
 8004d40:	200003e9 	.word	0x200003e9

08004d44 <mainLoop_ow_tempAlarm_print>:

void mainLoop_ow_tempAlarm_print(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0

		len = snprintf(((char*) msg), sizeof(msg), "\r\n*** Temperature ALARM: %d sensor(s) out of limits.\r\n", owAlarmCount);
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <mainLoop_adc_volts_resp>:


void mainLoop_adc_volts_resp(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
	gAdc_VDDA 		= (3.0f * VREFINT_CAL) / gAdcVrefint_val;  // p. 448f
 8004d58:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <mainLoop_adc_volts_resp+0xa0>)
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004d62:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <mainLoop_adc_volts_resp+0xa4>)
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d76:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <mainLoop_adc_volts_resp+0xa8>)
 8004d78:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh9_volts	= ( gAdcCh9_val * gAdc_VDDA / 65536.0f);
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <mainLoop_adc_volts_resp+0xac>)
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <mainLoop_adc_volts_resp+0xa8>)
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d92:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004e04 <mainLoop_adc_volts_resp+0xb0>
 8004d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <mainLoop_adc_volts_resp+0xb4>)
 8004d9c:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh10_volts	= (gAdcCh10_val * gAdc_VDDA / 65536.0f);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <mainLoop_adc_volts_resp+0xb8>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <mainLoop_adc_volts_resp+0xa8>)
 8004dae:	edd3 7a00 	vldr	s15, [r3]
 8004db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004db6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004e04 <mainLoop_adc_volts_resp+0xb0>
 8004dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dbe:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <mainLoop_adc_volts_resp+0xbc>)
 8004dc0:	edc3 7a00 	vstr	s15, [r3]
	gAdcCh16_volts	= (gAdcCh16_val * gAdc_VDDA / 65536.0f);
 8004dc4:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <mainLoop_adc_volts_resp+0xc0>)
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <mainLoop_adc_volts_resp+0xa8>)
 8004dd2:	edd3 7a00 	vldr	s15, [r3]
 8004dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dda:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004e04 <mainLoop_adc_volts_resp+0xb0>
 8004dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <mainLoop_adc_volts_resp+0xc4>)
 8004de4:	edc3 7a00 	vstr	s15, [r3]
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	08014740 	.word	0x08014740
 8004df8:	20000222 	.word	0x20000222
 8004dfc:	20000224 	.word	0x20000224
 8004e00:	2000021c 	.word	0x2000021c
 8004e04:	47800000 	.word	0x47800000
 8004e08:	20000228 	.word	0x20000228
 8004e0c:	2000021e 	.word	0x2000021e
 8004e10:	2000022c 	.word	0x2000022c
 8004e14:	20000220 	.word	0x20000220
 8004e18:	20000230 	.word	0x20000230

08004e1c <mainLoop_adc_volts_print>:

void mainLoop_adc_volts_print(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
		  gAdcCh16_val,
		  gAdcCh16_val,
		  gAdcCh16_volts);
	HAL_UART_Transmit(&huart2, msg, len, 25);
#endif
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <mainLoop_tim_deviation_resp>:


void mainLoop_tim_deviation_resp(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
	if (giTim15Ch2_TicksEvt) {
 8004e30:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <mainLoop_tim_deviation_resp+0xe4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05e      	beq.n	8004ef6 <mainLoop_tim_deviation_resp+0xca>
		/* Export accumulated deviation */
		if (giTim15Ch2_TicksDiff >= 0L) {
 8004e38:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <mainLoop_tim_deviation_resp+0xe8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db20      	blt.n	8004e82 <mainLoop_tim_deviation_resp+0x56>
			giTim2Ch2_TicksSumDev = (int32_t) (+0.5f + giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt));
 8004e40:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <mainLoop_tim_deviation_resp+0xe8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004f18 <mainLoop_tim_deviation_resp+0xec>
 8004e50:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e54:	4b2e      	ldr	r3, [pc, #184]	; (8004f10 <mainLoop_tim_deviation_resp+0xe4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e60:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004e64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e78:	ee17 2a90 	vmov	r2, s15
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <mainLoop_tim_deviation_resp+0xf0>)
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e01f      	b.n	8004ec2 <mainLoop_tim_deviation_resp+0x96>
		}
		else {
			giTim2Ch2_TicksSumDev = (int32_t) (-0.5f + giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt));
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <mainLoop_tim_deviation_resp+0xe8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f18 <mainLoop_tim_deviation_resp+0xec>
 8004e92:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <mainLoop_tim_deviation_resp+0xe4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eba:	ee17 2a90 	vmov	r2, s15
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <mainLoop_tim_deviation_resp+0xf0>)
 8004ec0:	601a      	str	r2, [r3, #0]
		}

		gMdevPsS = giTim15Ch2_TicksDiff * 100.0f / (6.0f * giTim15Ch2_TicksEvt);
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <mainLoop_tim_deviation_resp+0xe8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ece:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004f18 <mainLoop_tim_deviation_resp+0xec>
 8004ed2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <mainLoop_tim_deviation_resp+0xe4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <mainLoop_tim_deviation_resp+0xf4>)
 8004ef0:	edc3 7a00 	vstr	s15, [r3]
	}
	else {
		giTim2Ch2_TicksSumDev 	= 0L;
		gMdevPsS 		= 0.0f;
	}
}
 8004ef4:	e006      	b.n	8004f04 <mainLoop_tim_deviation_resp+0xd8>
		giTim2Ch2_TicksSumDev 	= 0L;
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <mainLoop_tim_deviation_resp+0xf0>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
		gMdevPsS 		= 0.0f;
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <mainLoop_tim_deviation_resp+0xf4>)
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	200007ac 	.word	0x200007ac
 8004f14:	200007b0 	.word	0x200007b0
 8004f18:	42c80000 	.word	0x42c80000
 8004f1c:	200007b4 	.word	0x200007b4
 8004f20:	20000410 	.word	0x20000410

08004f24 <mainLoop_tim_deviation_print>:

void mainLoop_tim_deviation_print(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
			  gMdevPsS);
		msg[4] = chr;
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
#endif
}
 8004f28:	bf00      	nop
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <mainLoop_dbg_tim2_ts_print>:

void mainLoop_dbg_tim2_ts_print(void)
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0
		len = snprintf(((char*) msg), sizeof(msg), "***\r\n\r\n");
		HAL_UART_Transmit(&huart2, msg, len, 25);
	}
# endif
#endif
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b091      	sub	sp, #68	; 0x44
 8004f44:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* Early setting, if possible */
  MX_GPIO_Init();
 8004f46:	f7fc fb0d 	bl	8001564 <MX_GPIO_Init>

  for (uint32_t cnt = 0x000c0000UL; cnt; --cnt) {
 8004f4a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f50:	e002      	b.n	8004f58 <main+0x18>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	3b01      	subs	r3, #1
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f9      	bne.n	8004f52 <main+0x12>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f5e:	f002 fbb7 	bl	80076d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f62:	f000 fbf9 	bl	8005758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f66:	f7fc fafd 	bl	8001564 <MX_GPIO_Init>
  MX_RTC_Init();
 8004f6a:	f000 fc6f 	bl	800584c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004f6e:	f001 fa55 	bl	800641c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004f72:	f001 fa83 	bl	800647c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004f76:	f7fc f841 	bl	8000ffc <MX_ADC1_Init>
  MX_I2C1_Init();
 8004f7a:	f7fc feef 	bl	8001d5c <MX_I2C1_Init>
  MX_SPI1_Init();
 8004f7e:	f000 fcbd 	bl	80058fc <MX_SPI1_Init>
  MX_DMA_Init();
 8004f82:	f7fc fac9 	bl	8001518 <MX_DMA_Init>
  MX_TIM2_Init();
 8004f86:	f000 fe59 	bl	8005c3c <MX_TIM2_Init>
  MX_TIM15_Init();
 8004f8a:	f000 fec9 	bl	8005d20 <MX_TIM15_Init>
  }
#endif


  /* I2C: Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);  (void) i2cBusCnt;
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc ff8a 	bl	8001eb0 <i2cBusGetDeviceList>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	76fb      	strb	r3, [r7, #27]

  /* I2C: DAC */
  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d015      	beq.n	8004fd6 <main+0x96>
	  /* Switch DAC to high impedance (500kR) mode */
	  gI2cDacModeLast	= 0b11;
 8004faa:	4b95      	ldr	r3, [pc, #596]	; (8005200 <main+0x2c0>)
 8004fac:	2203      	movs	r2, #3
 8004fae:	701a      	strb	r2, [r3, #0]
	  gI2cDacMode		= 0b11;
 8004fb0:	4b94      	ldr	r3, [pc, #592]	; (8005204 <main+0x2c4>)
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	701a      	strb	r2, [r3, #0]
	  gI2cDacValLast		= I2C_DAC_MCP4725_0_VAL;
 8004fb6:	4b94      	ldr	r3, [pc, #592]	; (8005208 <main+0x2c8>)
 8004fb8:	f240 62cd 	movw	r2, #1741	; 0x6cd
 8004fbc:	801a      	strh	r2, [r3, #0]
	  gI2cDacVal 		= I2C_DAC_MCP4725_0_VAL;
 8004fbe:	4b93      	ldr	r3, [pc, #588]	; (800520c <main+0x2cc>)
 8004fc0:	f240 62cd 	movw	r2, #1741	; 0x6cd
 8004fc4:	801a      	strh	r2, [r3, #0]

	  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 8004fc6:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <main+0x2c4>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4a90      	ldr	r2, [pc, #576]	; (800520c <main+0x2cc>)
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fc ffc3 	bl	8001f5c <i2cDeviceDacMcp4725_set>
  }

  /* I2C: LCD 16x2 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <main+0xa4>
	  /* Init and welcome string */
	  i2cMCP23017_Lcd16x2_Welcome();
 8004fe0:	f7fd f98c 	bl	80022fc <i2cMCP23017_Lcd16x2_Welcome>
  }

  /* I2C: LCD Gfx 240x128 */
  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <main+0xb2>
	  i2cSmartLCD_Gfx240x128_Welcome();
 8004fee:	f7fd ff1d 	bl	8002e2c <i2cSmartLCD_Gfx240x128_Welcome>
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
  }
#endif

  /* Default setting for hold relay */
  gpioHoRelayOut = GPIO_PIN_RESET;
 8004ff2:	4b87      	ldr	r3, [pc, #540]	; (8005210 <main+0x2d0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8004ff8:	4b85      	ldr	r3, [pc, #532]	; (8005210 <main+0x2d0>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2110      	movs	r1, #16
 8005000:	4884      	ldr	r0, [pc, #528]	; (8005214 <main+0x2d4>)
 8005002:	f004 fe13 	bl	8009c2c <HAL_GPIO_WritePin>

  /* GPIO: Turn off Locked LED */
  gpioLockedLED = GPIO_PIN_RESET;
 8005006:	4b84      	ldr	r3, [pc, #528]	; (8005218 <main+0x2d8>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
 800500c:	4b82      	ldr	r3, [pc, #520]	; (8005218 <main+0x2d8>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501a:	f004 fe07 	bl	8009c2c <HAL_GPIO_WritePin>


  /* NEO: Turn NMEA messages off */
  ubloxMsgsTurnOff();
 800501e:	f001 fe19 	bl	8006c54 <ubloxMsgsTurnOff>

  /* NEO: Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8005022:	f001 fbc9 	bl	80067b8 <ubloxUartSpeedFast>

  /* NEO: Change 1PPS pulse frequency we need */
  uint8_t ubloxRetries = 3U;
 8005026:	2303      	movs	r3, #3
 8005028:	76bb      	strb	r3, [r7, #26]
  do {

#if defined(PLL_BY_SOFTWARE)
	  if (ubloxSetFrequency(1U)) {
 800502a:	2001      	movs	r0, #1
 800502c:	f001 fcca 	bl	80069c4 <ubloxSetFrequency>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d011      	beq.n	800505a <main+0x11a>
		  {
			  uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode. - trying again ...\r\n";
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		  }
#endif
		  if (!(--ubloxRetries)) {
 8005036:	7ebb      	ldrb	r3, [r7, #26]
 8005038:	3b01      	subs	r3, #1
 800503a:	76bb      	strb	r3, [r7, #26]
 800503c:	7ebb      	ldrb	r3, [r7, #26]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <main+0x110>
			  /* RESET */
			  volatile uint32_t* AIRCR = (uint32_t*) 0xe000ed0cUL;
 8005042:	4b76      	ldr	r3, [pc, #472]	; (800521c <main+0x2dc>)
 8005044:	617b      	str	r3, [r7, #20]
			  uint32_t aircr_val = 0x05fa0304UL;
 8005046:	4b76      	ldr	r3, [pc, #472]	; (8005220 <main+0x2e0>)
 8005048:	613b      	str	r3, [r7, #16]
			  *AIRCR = aircr_val;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	601a      	str	r2, [r3, #0]
		  }

		  HAL_Delay(1300UL);
 8005050:	f240 5014 	movw	r0, #1300	; 0x514
 8005054:	f002 fb7c 	bl	8007750 <HAL_Delay>
#if defined(PLL_BY_SOFTWARE)
		  /* Switching to Hold mode */
		  gpioHoRelayOut = GPIO_PIN_SET;
#endif
	  }
	  break;
 8005058:	e002      	b.n	8005060 <main+0x120>
		  gpioHoRelayOut = GPIO_PIN_SET;
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <main+0x2d0>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
	  break;
 8005060:	bf00      	nop
  } while (1);

  /* Update hold relay */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8005062:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <main+0x2d0>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	2110      	movs	r1, #16
 800506a:	486a      	ldr	r0, [pc, #424]	; (8005214 <main+0x2d4>)
 800506c:	f004 fdde 	bl	8009c2c <HAL_GPIO_WritePin>


  /* ADC: Prepare */
  adc_init();
 8005070:	f7fc fa08 	bl	8001484 <adc_init>


  /* TIMER: Prepare the Time Capture for TIM2 CH2 (GPS PPS), TIM15 CH1 fractional reload and Time Capture of TIM15 CH2 (DCF77 Phase) */
  tim_start();
 8005074:	f001 f910 	bl	8006298 <tim_start>

  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <main+0x14a>
	  /* Inform about firing up the OCXO and GPS */
	  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(0U, 0U);
 8005082:	2100      	movs	r1, #0
 8005084:	2000      	movs	r0, #0
 8005086:	f7fd f95d 	bl	8002344 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
  }

  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <main+0x15c>
	  /* Inform about firing up the OCXO and GPS */
	  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(0U, 0U);
 8005094:	2100      	movs	r1, #0
 8005096:	2000      	movs	r0, #0
 8005098:	f7fd ff00 	bl	8002e9c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
  }


  /* GPIO / ONEWIRE: Init the DS18B20 temperature sensor(s)  */
  {
	  memclear((uint8_t*) owDevices, sizeof(owDevices));
 800509c:	2110      	movs	r1, #16
 800509e:	4861      	ldr	r0, [pc, #388]	; (8005224 <main+0x2e4>)
 80050a0:	f7fe fe00 	bl	8003ca4 <memclear>
	  owDevicesCount = onewireMasterTree_search(0U, ONEWIRE_DEVICES_MAX, owDevices);
 80050a4:	4a5f      	ldr	r2, [pc, #380]	; (8005224 <main+0x2e4>)
 80050a6:	2102      	movs	r1, #2
 80050a8:	2000      	movs	r0, #0
 80050aa:	f7fc fc3b 	bl	8001924 <onewireMasterTree_search>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b5d      	ldr	r3, [pc, #372]	; (8005228 <main+0x2e8>)
 80050b4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, msg, len, 25);
	  }
#endif

	  /* Set configuration and temp alarm limits */
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050bc:	e00e      	b.n	80050dc <main+0x19c>
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, owDevices[idx]);
 80050be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4a57      	ldr	r2, [pc, #348]	; (8005224 <main+0x2e4>)
 80050c6:	4413      	add	r3, r2
 80050c8:	2228      	movs	r2, #40	; 0x28
 80050ca:	2132      	movs	r1, #50	; 0x32
 80050cc:	200c      	movs	r0, #12
 80050ce:	f7fc fd1e 	bl	8001b0e <onewireDS18B20_setAdcWidth>
	  for (uint8_t idx = 0; idx < owDevicesCount; ++idx) {
 80050d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050d6:	3301      	adds	r3, #1
 80050d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050dc:	4b52      	ldr	r3, [pc, #328]	; (8005228 <main+0x2e8>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d3ea      	bcc.n	80050be <main+0x17e>
#endif
	  }
  }

  /* Generate DCF77 pseudo phase noise modulation */
  calcDcfPhasemod();
 80050e8:	f7fe fdf4 	bl	8003cd4 <calcDcfPhasemod>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t loopEntry = 1U;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t tim2Set 	= 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  // xxx start of WHILE LOOP
  while (1)
  {
	  /* RESPONSE SECTION */
	  if (!loopEntry) {
 80050f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8131 	bne.w	8005364 <main+0x424>
		  /* Wait for ublox NEO responses - duration: blocking until new second starts */
		  mainLoop_ublox_waitForResponses();
 8005102:	f7ff fce1 	bl	8004ac8 <mainLoop_ublox_waitForResponses>
		  gMLoop_Tim2_00_ubloxResp = tim_get_timeStamp(&htim2);
 8005106:	4849      	ldr	r0, [pc, #292]	; (800522c <main+0x2ec>)
 8005108:	f001 f8e6 	bl	80062d8 <tim_get_timeStamp>
 800510c:	4603      	mov	r3, r0
 800510e:	4a48      	ldr	r2, [pc, #288]	; (8005230 <main+0x2f0>)
 8005110:	6013      	str	r3, [r2, #0]

		  /* Hard sync TIM2 to GPS response */
		  if (tim2Set) {
 8005112:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <main+0x1ec>
			  tim2Set = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			  htim2.Instance->CNT = 0UL;
 8005120:	4b42      	ldr	r3, [pc, #264]	; (800522c <main+0x2ec>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
			  tim_TIM2_IC2_DMA_restart();
 8005128:	f001 f898 	bl	800625c <tim_TIM2_IC2_DMA_restart>
		  /* Decode PRN modulation */
		  {
			  static uint8_t lastPage	= 0U;

			  /* Wait for page change */
			  if (lastPage != giTim2Ch2_TS_PhaseDiff_ary_page)  {
 800512c:	4b41      	ldr	r3, [pc, #260]	; (8005234 <main+0x2f4>)
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	4b41      	ldr	r3, [pc, #260]	; (8005238 <main+0x2f8>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	429a      	cmp	r2, r3
 8005138:	d05e      	beq.n	80051f8 <main+0x2b8>
				  lastPage = giTim2Ch2_TS_PhaseDiff_ary_page;
 800513a:	4b3f      	ldr	r3, [pc, #252]	; (8005238 <main+0x2f8>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	4b3c      	ldr	r3, [pc, #240]	; (8005234 <main+0x2f4>)
 8005142:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin);
 8005144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800514c:	f004 fd86 	bl	8009c5c <HAL_GPIO_TogglePin>

				  /* PRN decoder */
				  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = calcDcfPrnCorrelation(gMLoop_DCF_sub16Frm, giTim2Ch2_TS_PhaseDiff_ary, &gMLoop_DCF_shiftPos, &gMLoop_DCF_corSum);
 8005150:	4b3a      	ldr	r3, [pc, #232]	; (800523c <main+0x2fc>)
 8005152:	7818      	ldrb	r0, [r3, #0]
 8005154:	4b3a      	ldr	r3, [pc, #232]	; (8005240 <main+0x300>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461c      	mov	r4, r3
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <main+0x304>)
 800515c:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <main+0x308>)
 800515e:	493b      	ldr	r1, [pc, #236]	; (800524c <main+0x30c>)
 8005160:	f7fe fdf8 	bl	8003d54 <calcDcfPrnCorrelation>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	4b39      	ldr	r3, [pc, #228]	; (8005250 <main+0x310>)
 800516a:	551a      	strb	r2, [r3, r4]

				  if (gMLoop_DCF_corSum < 5000U) {  // TODO: find working value
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <main+0x304>)
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	f241 3287 	movw	r2, #4999	; 0x1387
 8005174:	4293      	cmp	r3, r2
 8005176:	d813      	bhi.n	80051a0 <main+0x260>
					  /* Clear non-valid data */
					  gDcfTimeCode_ary[gDcfTimeCode_ary_idx] = 0U;
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <main+0x300>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <main+0x310>)
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]

					  /* Try next two subframes */
					  gMLoop_DCF_sub16Frm += 2U;
 8005184:	4b2d      	ldr	r3, [pc, #180]	; (800523c <main+0x2fc>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	3302      	adds	r3, #2
 800518a:	b2da      	uxtb	r2, r3
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <main+0x2fc>)
 800518e:	701a      	strb	r2, [r3, #0]
					  gMLoop_DCF_sub16Frm &= 0x0fU;
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <main+0x2fc>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4b28      	ldr	r3, [pc, #160]	; (800523c <main+0x2fc>)
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e00b      	b.n	80051b8 <main+0x278>
				  }  // if (gMLoop_DCF_corSum < ...)
				  else {
					  /* Subframe position fine tuning: start one subframe before the target point */
					  gMLoop_DCF_sub16Frm = ((gMLoop_DCF_shiftPos / 128U) + 0x0eU) & 0x0fU;
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <main+0x308>)
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	330e      	adds	r3, #14
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <main+0x2fc>)
 80051b6:	701a      	strb	r2, [r3, #0]
				  }  // if (corSum < ...)  else

				  /* Sync to first 10 x '1' bits for seconds [0 .. 9] */
				  if (((gDcfTimeCode_ary[gDcfTimeCode_ary_idx]) != 1) && (gDcfTimeCode_ary_idx < 10)) {
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <main+0x300>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <main+0x310>)
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d007      	beq.n	80051d6 <main+0x296>
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <main+0x300>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d803      	bhi.n	80051d6 <main+0x296>
					  /* Resync to next starting minute */
					  gDcfTimeCode_ary_idx = 0U;
 80051ce:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <main+0x300>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e010      	b.n	80051f8 <main+0x2b8>
				  }  // if (Sync to first 10 x '1' bits)
				  else {
					  /* Go ahead */
					  gDcfTimeCode_ary_idx++;
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <main+0x300>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <main+0x300>)
 80051e0:	701a      	strb	r2, [r3, #0]

					  /* No more than 61 seconds in one minute (incl. extra second of a minute) */
					  if (gDcfTimeCode_ary_idx > 59U) {  // ignore any leap seconds
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <main+0x300>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b3b      	cmp	r3, #59	; 0x3b
 80051e8:	d906      	bls.n	80051f8 <main+0x2b8>
						  gDcfTimeCode_ary_idx = 0U;
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <main+0x300>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]

						  /* End of a minute, calculate next minute data */
						  /*uint8_t status =*/
						  calcDcfTelegram(gDcfTimeCode_ary, &gDcfNxtMinuteTime);
 80051f0:	4918      	ldr	r1, [pc, #96]	; (8005254 <main+0x314>)
 80051f2:	4817      	ldr	r0, [pc, #92]	; (8005250 <main+0x310>)
 80051f4:	f7fe ff90 	bl	8004118 <calcDcfTelegram>
		  }
#endif


		  /* Wait for temperature data - duration: abt. 12.5 ms / blocking about until 750 ms after start */
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3020 	strb.w	r3, [r7, #32]
 80051fe:	e048      	b.n	8005292 <main+0x352>
 8005200:	20000314 	.word	0x20000314
 8005204:	20000315 	.word	0x20000315
 8005208:	20000316 	.word	0x20000316
 800520c:	20000318 	.word	0x20000318
 8005210:	200002f2 	.word	0x200002f2
 8005214:	48000400 	.word	0x48000400
 8005218:	200002f0 	.word	0x200002f0
 800521c:	e000ed0c 	.word	0xe000ed0c
 8005220:	05fa0304 	.word	0x05fa0304
 8005224:	200002f4 	.word	0x200002f4
 8005228:	20000304 	.word	0x20000304
 800522c:	200033e8 	.word	0x200033e8
 8005230:	20000664 	.word	0x20000664
 8005234:	200006a4 	.word	0x200006a4
 8005238:	20002ef4 	.word	0x20002ef4
 800523c:	2000065d 	.word	0x2000065d
 8005240:	2000061c 	.word	0x2000061c
 8005244:	20000660 	.word	0x20000660
 8005248:	2000065e 	.word	0x2000065e
 800524c:	20002ef8 	.word	0x20002ef8
 8005250:	20000620 	.word	0x20000620
 8005254:	200033dc 	.word	0x200033dc
			  if (gMtempWaitUntil[owDeviceIdx]) {
 8005258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800525c:	4aaa      	ldr	r2, [pc, #680]	; (8005508 <main+0x5c8>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <main+0x348>
				  mainLoop_ow_temp_waitForResponse(gMtempWaitUntil[owDeviceIdx], owDeviceIdx);
 8005266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800526a:	4aa7      	ldr	r2, [pc, #668]	; (8005508 <main+0x5c8>)
 800526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005270:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fd10 	bl	8004c9c <mainLoop_ow_temp_waitForResponse>
				  gMtempWaitUntil[owDeviceIdx] = 0UL;
 800527c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005280:	4aa1      	ldr	r2, [pc, #644]	; (8005508 <main+0x5c8>)
 8005282:	2100      	movs	r1, #0
 8005284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t owDeviceIdx = 0; owDeviceIdx < owDevicesCount; ++owDeviceIdx) {
 8005288:	f897 3020 	ldrb.w	r3, [r7, #32]
 800528c:	3301      	adds	r3, #1
 800528e:	f887 3020 	strb.w	r3, [r7, #32]
 8005292:	4b9e      	ldr	r3, [pc, #632]	; (800550c <main+0x5cc>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f897 2020 	ldrb.w	r2, [r7, #32]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3dc      	bcc.n	8005258 <main+0x318>
			  }
		  }
		  gMLoop_Tim2_01_tempResp = tim_get_timeStamp(&htim2);
 800529e:	489c      	ldr	r0, [pc, #624]	; (8005510 <main+0x5d0>)
 80052a0:	f001 f81a 	bl	80062d8 <tim_get_timeStamp>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4a9b      	ldr	r2, [pc, #620]	; (8005514 <main+0x5d4>)
 80052a8:	6013      	str	r3, [r2, #0]


		  /* Stop ADC in case something still runs */
		  adc_stop();
 80052aa:	f7fc f917 	bl	80014dc <adc_stop>

		  /* Get ADC voltages - duration: abt. 4 us */
		  mainLoop_adc_volts_resp();
 80052ae:	f7ff fd51 	bl	8004d54 <mainLoop_adc_volts_resp>
		  gMLoop_Tim2_02_adcResp = tim_get_timeStamp(&htim2);
 80052b2:	4897      	ldr	r0, [pc, #604]	; (8005510 <main+0x5d0>)
 80052b4:	f001 f810 	bl	80062d8 <tim_get_timeStamp>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4a97      	ldr	r2, [pc, #604]	; (8005518 <main+0x5d8>)
 80052bc:	6013      	str	r3, [r2, #0]


		  /* Calculate Maidenhead Locator if not done, yet */
		  if ((gLocator[0] == 0) && gUbloxNavPosllh.iTOW) {
 80052be:	4b97      	ldr	r3, [pc, #604]	; (800551c <main+0x5dc>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12d      	bne.n	8005322 <main+0x3e2>
 80052c6:	4b96      	ldr	r3, [pc, #600]	; (8005520 <main+0x5e0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d029      	beq.n	8005322 <main+0x3e2>
			  main_get_MaidenheadLocator_from_LatLon(sizeof(gLocator), gLocator, gUbloxNavPosllh.lat * 1e-7, gUbloxNavPosllh.lon * 1e-7);
 80052ce:	4b94      	ldr	r3, [pc, #592]	; (8005520 <main+0x5e0>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f936 	bl	8000544 <__aeabi_i2d>
 80052d8:	a389      	add	r3, pc, #548	; (adr r3, 8005500 <main+0x5c0>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb f99b 	bl	8000618 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	f7fb fc8d 	bl	8000c08 <__aeabi_d2f>
 80052ee:	4604      	mov	r4, r0
 80052f0:	4b8b      	ldr	r3, [pc, #556]	; (8005520 <main+0x5e0>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f925 	bl	8000544 <__aeabi_i2d>
 80052fa:	a381      	add	r3, pc, #516	; (adr r3, 8005500 <main+0x5c0>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fb f98a 	bl	8000618 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	f7fb fc7c 	bl	8000c08 <__aeabi_d2f>
 8005310:	4603      	mov	r3, r0
 8005312:	ee00 3a90 	vmov	s1, r3
 8005316:	ee00 4a10 	vmov	s0, r4
 800531a:	4980      	ldr	r1, [pc, #512]	; (800551c <main+0x5dc>)
 800531c:	2007      	movs	r0, #7
 800531e:	f7ff f98b 	bl	8004638 <main_get_MaidenheadLocator_from_LatLon>
		  }

		  /* Calculate timing deviation - duration: abt. 4 us */
		  mainLoop_tim_deviation_resp();
 8005322:	f7ff fd83 	bl	8004e2c <mainLoop_tim_deviation_resp>
		  gMLoop_Tim2_03_deviationCalc = tim_get_timeStamp(&htim2);
 8005326:	487a      	ldr	r0, [pc, #488]	; (8005510 <main+0x5d0>)
 8005328:	f000 ffd6 	bl	80062d8 <tim_get_timeStamp>
 800532c:	4603      	mov	r3, r0
 800532e:	4a7d      	ldr	r2, [pc, #500]	; (8005524 <main+0x5e4>)
 8005330:	6013      	str	r3, [r2, #0]

		  /* The PLL control - duration: abt. 4 us */
		  gpioLockedLED_d1 = gpioLockedLED;
 8005332:	4b7d      	ldr	r3, [pc, #500]	; (8005528 <main+0x5e8>)
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	4b7d      	ldr	r3, [pc, #500]	; (800552c <main+0x5ec>)
 8005338:	701a      	strb	r2, [r3, #0]
		  mainLoop_PLL_calc();
 800533a:	f7ff fa71 	bl	8004820 <mainLoop_PLL_calc>
		  gMLoop_Tim2_04_pllCalc = tim_get_timeStamp(&htim2);
 800533e:	4874      	ldr	r0, [pc, #464]	; (8005510 <main+0x5d0>)
 8005340:	f000 ffca 	bl	80062d8 <tim_get_timeStamp>
 8005344:	4603      	mov	r3, r0
 8005346:	4a7a      	ldr	r2, [pc, #488]	; (8005530 <main+0x5f0>)
 8005348:	6013      	str	r3, [r2, #0]


		  /* NEO NAV-SVINFO sorting for desc. Elevations - duration: abt. 300 us */
		  gMelevSortTgtPosElevCnt = mainLoop_ublox_svinfo_sort(gMelevSortTgtCh);
 800534a:	487a      	ldr	r0, [pc, #488]	; (8005534 <main+0x5f4>)
 800534c:	f7ff fbd0 	bl	8004af0 <mainLoop_ublox_svinfo_sort>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	4b78      	ldr	r3, [pc, #480]	; (8005538 <main+0x5f8>)
 8005356:	701a      	strb	r2, [r3, #0]
		  gMLoop_Tim2_05_svSort = tim_get_timeStamp(&htim2);
 8005358:	486d      	ldr	r0, [pc, #436]	; (8005510 <main+0x5d0>)
 800535a:	f000 ffbd 	bl	80062d8 <tim_get_timeStamp>
 800535e:	4603      	mov	r3, r0
 8005360:	4a76      	ldr	r2, [pc, #472]	; (800553c <main+0x5fc>)
 8005362:	6013      	str	r3, [r2, #0]


	  /* REQUEST SECTION */
	  {
		  /* Request these frames */
		  gUbloxNavClock.iTOW	= 0UL;
 8005364:	4b76      	ldr	r3, [pc, #472]	; (8005540 <main+0x600>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
		  gUbloxNavDop.iTOW		= 0UL;
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <main+0x604>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
		  gUbloxNavSvinfo.iTOW	= 0UL;
 8005370:	4b75      	ldr	r3, [pc, #468]	; (8005548 <main+0x608>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

		  /* Send ublox NEO requests - duration: abt. 15 ms */
		  mainLoop_ublox_requests();
 8005376:	f7ff fb7f 	bl	8004a78 <mainLoop_ublox_requests>
		  gMLoop_Tim2_10_ubloxReq = tim_get_timeStamp(&htim2);
 800537a:	4865      	ldr	r0, [pc, #404]	; (8005510 <main+0x5d0>)
 800537c:	f000 ffac 	bl	80062d8 <tim_get_timeStamp>
 8005380:	4603      	mov	r3, r0
 8005382:	4a72      	ldr	r2, [pc, #456]	; (800554c <main+0x60c>)
 8005384:	6013      	str	r3, [r2, #0]

		  /* Request all sensors being in alarm state */
		  mainLoop_ow_tempAlarm_req();
 8005386:	f7ff fcc1 	bl	8004d0c <mainLoop_ow_tempAlarm_req>

		  /* TIM2 set request */
		  if ((gpioLockedLED == GPIO_PIN_SET) && (gpioLockedLED_d1 == GPIO_PIN_RESET)) {
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <main+0x5e8>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d106      	bne.n	80053a0 <main+0x460>
 8005392:	4b66      	ldr	r3, [pc, #408]	; (800552c <main+0x5ec>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <main+0x460>
			  tim2Set = 1U;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		  }

		  /* Start Onewire temp sensor - one per second - duration: abt. 11 ms */
		  if (owDevicesCount) {
 80053a0:	4b5a      	ldr	r3, [pc, #360]	; (800550c <main+0x5cc>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <main+0x4aa>
			  /* Switch to the next sensor */
			  ++gMowSensorIdx;
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <main+0x610>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	4b67      	ldr	r3, [pc, #412]	; (8005550 <main+0x610>)
 80053b2:	701a      	strb	r2, [r3, #0]
			  gMowSensorIdx %= owDevicesCount;
 80053b4:	4b66      	ldr	r3, [pc, #408]	; (8005550 <main+0x610>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4a54      	ldr	r2, [pc, #336]	; (800550c <main+0x5cc>)
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80053c0:	fb01 f202 	mul.w	r2, r1, r2
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <main+0x610>)
 80053ca:	701a      	strb	r2, [r3, #0]

			  /* Request next temperature value of next sensor */
			  gMtempWaitUntil[gMowSensorIdx] = onewireDS18B20_tempReq(owDevices[gMowSensorIdx]);
 80053cc:	4b60      	ldr	r3, [pc, #384]	; (8005550 <main+0x610>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4a60      	ldr	r2, [pc, #384]	; (8005554 <main+0x614>)
 80053d4:	4413      	add	r3, r2
 80053d6:	4a5e      	ldr	r2, [pc, #376]	; (8005550 <main+0x610>)
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	4614      	mov	r4, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fc fc0b 	bl	8001bf8 <onewireDS18B20_tempReq>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a48      	ldr	r2, [pc, #288]	; (8005508 <main+0x5c8>)
 80053e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  }
		  gMLoop_Tim2_11_tempReq = tim_get_timeStamp(&htim2);
 80053ea:	4849      	ldr	r0, [pc, #292]	; (8005510 <main+0x5d0>)
 80053ec:	f000 ff74 	bl	80062d8 <tim_get_timeStamp>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4a59      	ldr	r2, [pc, #356]	; (8005558 <main+0x618>)
 80053f4:	6013      	str	r3, [r2, #0]

		  /* Start ADC channel scan */
		  adc_start();
 80053f6:	f7fc f855 	bl	80014a4 <adc_start>

		  /* Last of cycle: print time stamp values of the WHILE LOOP */
		  mainLoop_dbg_tim2_ts_print();
 80053fa:	f7ff fd9a 	bl	8004f32 <mainLoop_dbg_tim2_ts_print>
	  }  // /* REQUEST SECTION */


	  /* OUTPUT SECTION */
	  if (!loopEntry) {
 80053fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 817b 	bne.w	80056fe <main+0x7be>
		  /* Update relay and DAC setting - duration: abt. 2 us */
		  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, gpioHoRelayOut);
 8005408:	4b54      	ldr	r3, [pc, #336]	; (800555c <main+0x61c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	2110      	movs	r1, #16
 8005410:	4853      	ldr	r0, [pc, #332]	; (8005560 <main+0x620>)
 8005412:	f004 fc0b 	bl	8009c2c <HAL_GPIO_WritePin>
		  if (gpioHoRelayOut == GPIO_PIN_SET) {
 8005416:	4b51      	ldr	r3, [pc, #324]	; (800555c <main+0x61c>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d120      	bne.n	8005460 <main+0x520>
			  /* Check for DAC */
			  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <main+0x520>
				  if ((gI2cDacModeLast != gI2cDacMode) || (gI2cDacValLast != gI2cDacVal)) {
 8005428:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <main+0x624>)
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	4b4e      	ldr	r3, [pc, #312]	; (8005568 <main+0x628>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d105      	bne.n	8005440 <main+0x500>
 8005434:	4b4d      	ldr	r3, [pc, #308]	; (800556c <main+0x62c>)
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	4b4d      	ldr	r3, [pc, #308]	; (8005570 <main+0x630>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d00f      	beq.n	8005460 <main+0x520>
					  i2cDeviceDacMcp4725_set(0, gI2cDacMode, gI2cDacVal);
 8005440:	4b49      	ldr	r3, [pc, #292]	; (8005568 <main+0x628>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <main+0x630>)
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	2000      	movs	r0, #0
 800544c:	f7fc fd86 	bl	8001f5c <i2cDeviceDacMcp4725_set>

					  /* Store current settings */
					  gI2cDacModeLast 	= gI2cDacMode;
 8005450:	4b45      	ldr	r3, [pc, #276]	; (8005568 <main+0x628>)
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	4b43      	ldr	r3, [pc, #268]	; (8005564 <main+0x624>)
 8005456:	701a      	strb	r2, [r3, #0]
					  gI2cDacValLast 	= gI2cDacVal;
 8005458:	4b45      	ldr	r3, [pc, #276]	; (8005570 <main+0x630>)
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	4b43      	ldr	r3, [pc, #268]	; (800556c <main+0x62c>)
 800545e:	801a      	strh	r2, [r3, #0]
				  }
			  }
		  }
		  gMLoop_Tim2_20_hoRelayDacOut = tim_get_timeStamp(&htim2);
 8005460:	482b      	ldr	r0, [pc, #172]	; (8005510 <main+0x5d0>)
 8005462:	f000 ff39 	bl	80062d8 <tim_get_timeStamp>
 8005466:	4603      	mov	r3, r0
 8005468:	4a42      	ldr	r2, [pc, #264]	; (8005574 <main+0x634>)
 800546a:	6013      	str	r3, [r2, #0]
		  /* Update Locked-LED */
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, gpioLockedLED);
#endif

		  /* Show all NEO data - duration: abt. 37 ms (without NAV-SVINFO) */
		  mainLoop_ublox_print();
 800546c:	f7ff fc0e 	bl	8004c8c <mainLoop_ublox_print>
		  gMLoop_Tim2_21_ubloxPrint = tim_get_timeStamp(&htim2);
 8005470:	4827      	ldr	r0, [pc, #156]	; (8005510 <main+0x5d0>)
 8005472:	f000 ff31 	bl	80062d8 <tim_get_timeStamp>
 8005476:	4603      	mov	r3, r0
 8005478:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <main+0x638>)
 800547a:	6013      	str	r3, [r2, #0]

		  /* Show deviation values - duration: abt. 15 ms */
		  mainLoop_tim_deviation_print();
 800547c:	f7ff fd52 	bl	8004f24 <mainLoop_tim_deviation_print>
		  gMLoop_Tim2_22_deviationPrint = tim_get_timeStamp(&htim2);
 8005480:	4823      	ldr	r0, [pc, #140]	; (8005510 <main+0x5d0>)
 8005482:	f000 ff29 	bl	80062d8 <tim_get_timeStamp>
 8005486:	4603      	mov	r3, r0
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <main+0x63c>)
 800548a:	6013      	str	r3, [r2, #0]

		  /* Show PLL settings - duration: abt. 5.5 ms */
		  mainLoop_PLL_print();
 800548c:	f7ff faec 	bl	8004a68 <mainLoop_PLL_print>
		  gMLoop_Tim2_23_pllPrint = tim_get_timeStamp(&htim2);
 8005490:	481f      	ldr	r0, [pc, #124]	; (8005510 <main+0x5d0>)
 8005492:	f000 ff21 	bl	80062d8 <tim_get_timeStamp>
 8005496:	4603      	mov	r3, r0
 8005498:	4a39      	ldr	r2, [pc, #228]	; (8005580 <main+0x640>)
 800549a:	6013      	str	r3, [r2, #0]

		  /* Show ADC voltages - duration: abt. 24 ms */
		  mainLoop_adc_volts_print();
 800549c:	f7ff fcbe 	bl	8004e1c <mainLoop_adc_volts_print>
		  gMLoop_Tim2_24_adcPrint = tim_get_timeStamp(&htim2);
 80054a0:	481b      	ldr	r0, [pc, #108]	; (8005510 <main+0x5d0>)
 80054a2:	f000 ff19 	bl	80062d8 <tim_get_timeStamp>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a36      	ldr	r2, [pc, #216]	; (8005584 <main+0x644>)
 80054aa:	6013      	str	r3, [r2, #0]


		  /* Temp values and alarms - duration: abt. 8 ms */
		  mainLoop_ow_temp_print();
 80054ac:	f7ff fc26 	bl	8004cfc <mainLoop_ow_temp_print>
		  mainLoop_ow_tempAlarm_print();
 80054b0:	f7ff fc48 	bl	8004d44 <mainLoop_ow_tempAlarm_print>
		  gMLoop_Tim2_25_tempPrint = tim_get_timeStamp(&htim2);
 80054b4:	4816      	ldr	r0, [pc, #88]	; (8005510 <main+0x5d0>)
 80054b6:	f000 ff0f 	bl	80062d8 <tim_get_timeStamp>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4a32      	ldr	r2, [pc, #200]	; (8005588 <main+0x648>)
 80054be:	6013      	str	r3, [r2, #0]

		  float temp = (owDs18b20_Temp[gMowSensorIdx] >> 4) + 0.5f;
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <main+0x610>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	4b31      	ldr	r3, [pc, #196]	; (800558c <main+0x64c>)
 80054c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80054cc:	111b      	asrs	r3, r3, #4
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e0:	edc7 7a07 	vstr	s15, [r7, #28]
		  if (temp > 99.0f) {
 80054e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80054e8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005590 <main+0x650>
 80054ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	dd50      	ble.n	8005598 <main+0x658>
			  temp = 99.0f;
 80054f6:	4b27      	ldr	r3, [pc, #156]	; (8005594 <main+0x654>)
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e057      	b.n	80055ac <main+0x66c>
 80054fc:	f3af 8000 	nop.w
 8005500:	9abcaf48 	.word	0x9abcaf48
 8005504:	3e7ad7f2 	.word	0x3e7ad7f2
 8005508:	20000404 	.word	0x20000404
 800550c:	20000304 	.word	0x20000304
 8005510:	200033e8 	.word	0x200033e8
 8005514:	20000668 	.word	0x20000668
 8005518:	2000066c 	.word	0x2000066c
 800551c:	20000414 	.word	0x20000414
 8005520:	200034d0 	.word	0x200034d0
 8005524:	20000670 	.word	0x20000670
 8005528:	200002f0 	.word	0x200002f0
 800552c:	200002f1 	.word	0x200002f1
 8005530:	20000674 	.word	0x20000674
 8005534:	200003ec 	.word	0x200003ec
 8005538:	200003ea 	.word	0x200003ea
 800553c:	20000678 	.word	0x20000678
 8005540:	200034ec 	.word	0x200034ec
 8005544:	20003500 	.word	0x20003500
 8005548:	20003514 	.word	0x20003514
 800554c:	2000067c 	.word	0x2000067c
 8005550:	2000040c 	.word	0x2000040c
 8005554:	200002f4 	.word	0x200002f4
 8005558:	20000680 	.word	0x20000680
 800555c:	200002f2 	.word	0x200002f2
 8005560:	48000400 	.word	0x48000400
 8005564:	20000314 	.word	0x20000314
 8005568:	20000315 	.word	0x20000315
 800556c:	20000316 	.word	0x20000316
 8005570:	20000318 	.word	0x20000318
 8005574:	20000684 	.word	0x20000684
 8005578:	20000688 	.word	0x20000688
 800557c:	2000068c 	.word	0x2000068c
 8005580:	20000690 	.word	0x20000690
 8005584:	20000694 	.word	0x20000694
 8005588:	20000698 	.word	0x20000698
 800558c:	20000308 	.word	0x20000308
 8005590:	42c60000 	.word	0x42c60000
 8005594:	42c60000 	.word	0x42c60000
		  }
		  else if (temp < 0.0f) {
 8005598:	edd7 7a07 	vldr	s15, [r7, #28]
 800559c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	d502      	bpl.n	80055ac <main+0x66c>
			  temp = 0.0f;
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
		  }


		  /* Drop NEO data when falling back to out-of-lock state */
		  if (!gpioLockedLED) {
 80055ac:	4b56      	ldr	r3, [pc, #344]	; (8005708 <main+0x7c8>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <main+0x680>
			  gUbloxNavPosllh.iTOW 	= 0UL;
 80055b4:	4b55      	ldr	r3, [pc, #340]	; (800570c <main+0x7cc>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
			  gLocator[0] 			= 0x00U;
 80055ba:	4b55      	ldr	r3, [pc, #340]	; (8005710 <main+0x7d0>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
		  }

		  /* Update LCD16x2 - duration: abt. 1 us (not connected) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_0) {
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01f      	beq.n	800560a <main+0x6ca>
			  if (!gpioLockedLED) {
 80055ca:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <main+0x7c8>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <main+0x6ae>
				  i2cMCP23017_Lcd16x2_OCXO_HeatingUp(((int16_t) temp), gUbloxTimeAcc);
 80055d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80055d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055da:	ee17 3a90 	vmov	r3, s15
 80055de:	b21b      	sxth	r3, r3
 80055e0:	4a4c      	ldr	r2, [pc, #304]	; (8005714 <main+0x7d4>)
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fc feac 	bl	8002344 <i2cMCP23017_Lcd16x2_OCXO_HeatingUp>
 80055ec:	e00d      	b.n	800560a <main+0x6ca>
			  }
			  else {
				  i2cMCP23017_Lcd16x2_Locked(((int16_t) temp), gUbloxTimeAcc, giTim2Ch2_TicksSumDev);
 80055ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80055f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f6:	ee17 3a90 	vmov	r3, s15
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	4a45      	ldr	r2, [pc, #276]	; (8005714 <main+0x7d4>)
 80055fe:	6811      	ldr	r1, [r2, #0]
 8005600:	4a45      	ldr	r2, [pc, #276]	; (8005718 <main+0x7d8>)
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fc feed 	bl	80023e4 <i2cMCP23017_Lcd16x2_Locked>
			  }
		  }
		  gMLoop_Tim2_26_lcd16x2Print = tim_get_timeStamp(&htim2);
 800560a:	4844      	ldr	r0, [pc, #272]	; (800571c <main+0x7dc>)
 800560c:	f000 fe64 	bl	80062d8 <tim_get_timeStamp>
 8005610:	4603      	mov	r3, r0
 8005612:	4a43      	ldr	r2, [pc, #268]	; (8005720 <main+0x7e0>)
 8005614:	6013      	str	r3, [r2, #0]

		  /* Update LCD240x128 - duration: abt. 2 us (no data presented) */
		  if (i2cDevicesBF & I2C_DEVICE_LCD_1) {
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d068      	beq.n	80056f2 <main+0x7b2>
			  static uint8_t lcd1StateLast = 0U;

			  if (!gpioLockedLED) {
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <main+0x7c8>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <main+0x716>
				  if (lcd1StateLast) {
 8005628:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <main+0x7e4>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <main+0x6f4>
					  /* Welcome template */
					  i2cSmartLCD_Gfx240x128_Welcome();
 8005630:	f7fd fbfc 	bl	8002e2c <i2cSmartLCD_Gfx240x128_Welcome>
				  }

				  i2cSmartLCD_Gfx240x128_OCXO_HeatingUp(
 8005634:	edd7 7a07 	vldr	s15, [r7, #28]
 8005638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563c:	ee17 3a90 	vmov	r3, s15
 8005640:	b21b      	sxth	r3, r3
 8005642:	4a34      	ldr	r2, [pc, #208]	; (8005714 <main+0x7d4>)
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7fd fc27 	bl	8002e9c <i2cSmartLCD_Gfx240x128_OCXO_HeatingUp>
						  ((int16_t) temp),
						  gUbloxTimeAcc);
				  lcd1StateLast = 0U;
 800564e:	4b35      	ldr	r3, [pc, #212]	; (8005724 <main+0x7e4>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e04d      	b.n	80056f2 <main+0x7b2>
			  }
			  else {
				  const uint32_t tps = 60000000UL;
 8005656:	4b34      	ldr	r3, [pc, #208]	; (8005728 <main+0x7e8>)
 8005658:	60fb      	str	r3, [r7, #12]

				  if (!lcd1StateLast) {
 800565a:	4b32      	ldr	r3, [pc, #200]	; (8005724 <main+0x7e4>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <main+0x728>
					  /* Locked template */
#if defined(PLL_BY_SOFTWARE)
					  /* With DAC graph template */
					  i2cSmartLCD_Gfx240x128_Template(0x80000113UL);
 8005662:	4832      	ldr	r0, [pc, #200]	; (800572c <main+0x7ec>)
 8005664:	f7fd faca 	bl	8002bfc <i2cSmartLCD_Gfx240x128_Template>
					  i2cSmartLCD_Gfx240x128_Template(0x80000013UL);
#endif
				  }

				  i2cSmartLCD_Gfx240x128_Locked(
						  (HAL_GetTick() + (700UL - ((tps + gMLoop_Tim2_26_lcd16x2Print - gMLoop_Tim2_00_ubloxResp) % tps) / 60000)),
 8005668:	f002 f866 	bl	8007738 <HAL_GetTick>
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <main+0x7e0>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	441a      	add	r2, r3
 8005674:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <main+0x7f0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	fb01 f202 	mul.w	r2, r1, r2
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <main+0x7f4>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	0b9b      	lsrs	r3, r3, #14
 8005690:	1ac3      	subs	r3, r0, r3
				  i2cSmartLCD_Gfx240x128_Locked(
 8005692:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8005696:	edd7 7a07 	vldr	s15, [r7, #28]
 800569a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800569e:	ee17 3a90 	vmov	r3, s15
 80056a2:	b21c      	sxth	r4, r3
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <main+0x7d4>)
 80056a6:	681d      	ldr	r5, [r3, #0]
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <main+0x7d8>)
 80056aa:	681e      	ldr	r6, [r3, #0]
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <main+0x7f8>)
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <main+0x7fc>)
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <main+0x800>)
 80056ba:	ed92 7a00 	vldr	s14, [r2]
 80056be:	4a21      	ldr	r2, [pc, #132]	; (8005744 <main+0x804>)
 80056c0:	8892      	ldrh	r2, [r2, #4]
 80056c2:	4921      	ldr	r1, [pc, #132]	; (8005748 <main+0x808>)
 80056c4:	7809      	ldrb	r1, [r1, #0]
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <main+0x7d0>)
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	4b20      	ldr	r3, [pc, #128]	; (800574c <main+0x80c>)
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <main+0x810>)
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	9102      	str	r1, [sp, #8]
 80056d4:	9201      	str	r2, [sp, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	eef0 0a47 	vmov.f32	s1, s14
 80056de:	eeb0 0a67 	vmov.f32	s0, s15
 80056e2:	4633      	mov	r3, r6
 80056e4:	462a      	mov	r2, r5
 80056e6:	4621      	mov	r1, r4
 80056e8:	f7fd fc7a 	bl	8002fe0 <i2cSmartLCD_Gfx240x128_Locked>
						  gUbloxNavDop.gDOP,
						  gMelevSortTgtPosElevCnt,
						  gMelevSortTgtCh,
						  &gUbloxNavSvinfo,
						  gLocator);
				  lcd1StateLast = 1U;
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <main+0x7e4>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  gMLoop_Tim2_27_lcd240x128Print = tim_get_timeStamp(&htim2);
 80056f2:	480a      	ldr	r0, [pc, #40]	; (800571c <main+0x7dc>)
 80056f4:	f000 fdf0 	bl	80062d8 <tim_get_timeStamp>
 80056f8:	4603      	mov	r3, r0
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <main+0x814>)
 80056fc:	6013      	str	r3, [r2, #0]
# if 0
		  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
# endif
#endif
	  }  // /* OUTPUT SECTION */
	  loopEntry = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  if (!loopEntry) {
 8005704:	e4f8      	b.n	80050f8 <main+0x1b8>
 8005706:	bf00      	nop
 8005708:	200002f0 	.word	0x200002f0
 800570c:	200034d0 	.word	0x200034d0
 8005710:	20000414 	.word	0x20000414
 8005714:	2000000c 	.word	0x2000000c
 8005718:	200007b4 	.word	0x200007b4
 800571c:	200033e8 	.word	0x200033e8
 8005720:	2000069c 	.word	0x2000069c
 8005724:	200006a5 	.word	0x200006a5
 8005728:	03938700 	.word	0x03938700
 800572c:	80000113 	.word	0x80000113
 8005730:	20000664 	.word	0x20000664
 8005734:	45e7b273 	.word	0x45e7b273
 8005738:	20000410 	.word	0x20000410
 800573c:	20000318 	.word	0x20000318
 8005740:	2000031c 	.word	0x2000031c
 8005744:	20003500 	.word	0x20003500
 8005748:	200003ea 	.word	0x200003ea
 800574c:	20003514 	.word	0x20003514
 8005750:	200003ec 	.word	0x200003ec
 8005754:	200006a0 	.word	0x200006a0

08005758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b096      	sub	sp, #88	; 0x58
 800575c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	2244      	movs	r2, #68	; 0x44
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f00a fd6c 	bl	8010244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800576c:	463b      	mov	r3, r7
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800577a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800577e:	f006 f91f 	bl	800b9c0 <HAL_PWREx_ControlVoltageScaling>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005788:	f000 f85a 	bl	8005840 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800578c:	f006 f8fa 	bl	800b984 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <SystemClock_Config+0xc0>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	4a20      	ldr	r2, [pc, #128]	; (8005818 <SystemClock_Config+0xc0>)
 8005798:	f023 0318 	bic.w	r3, r3, #24
 800579c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80057a0:	2307      	movs	r3, #7
 80057a2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80057a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80057a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057b4:	2310      	movs	r3, #16
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057b8:	2302      	movs	r3, #2
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057bc:	2303      	movs	r3, #3
 80057be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80057c0:	2301      	movs	r3, #1
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80057c4:	230c      	movs	r3, #12
 80057c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80057c8:	2307      	movs	r3, #7
 80057ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80057cc:	2302      	movs	r3, #2
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80057d0:	2302      	movs	r3, #2
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4618      	mov	r0, r3
 80057da:	f006 f947 	bl	800ba6c <HAL_RCC_OscConfig>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80057e4:	f000 f82c 	bl	8005840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057e8:	230f      	movs	r3, #15
 80057ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057ec:	2303      	movs	r3, #3
 80057ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80057fc:	463b      	mov	r3, r7
 80057fe:	2103      	movs	r1, #3
 8005800:	4618      	mov	r0, r3
 8005802:	f006 fd47 	bl	800c294 <HAL_RCC_ClockConfig>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800580c:	f000 f818 	bl	8005840 <Error_Handler>
  }
}
 8005810:	bf00      	nop
 8005812:	3758      	adds	r7, #88	; 0x58
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000

0800581c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800582e:	f001 ff6f 	bl	8007710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00

08005840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005844:	b672      	cpsid	i
}
 8005846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005848:	e7fe      	b.n	8005848 <Error_Handler+0x8>
	...

0800584c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <MX_RTC_Init+0x48>)
 8005852:	4a11      	ldr	r2, [pc, #68]	; (8005898 <MX_RTC_Init+0x4c>)
 8005854:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <MX_RTC_Init+0x48>)
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <MX_RTC_Init+0x48>)
 800585e:	227f      	movs	r2, #127	; 0x7f
 8005860:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <MX_RTC_Init+0x48>)
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <MX_RTC_Init+0x48>)
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <MX_RTC_Init+0x48>)
 8005870:	2200      	movs	r2, #0
 8005872:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005874:	4b07      	ldr	r3, [pc, #28]	; (8005894 <MX_RTC_Init+0x48>)
 8005876:	2200      	movs	r2, #0
 8005878:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <MX_RTC_Init+0x48>)
 800587c:	2200      	movs	r2, #0
 800587e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005880:	4804      	ldr	r0, [pc, #16]	; (8005894 <MX_RTC_Init+0x48>)
 8005882:	f007 fa45 	bl	800cd10 <HAL_RTC_Init>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800588c:	f7ff ffd8 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200006a8 	.word	0x200006a8
 8005898:	40002800 	.word	0x40002800

0800589c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b098      	sub	sp, #96	; 0x60
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	2254      	movs	r2, #84	; 0x54
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f00a fcc9 	bl	8010244 <memset>
  if(rtcHandle->Instance==RTC)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a0f      	ldr	r2, [pc, #60]	; (80058f4 <HAL_RTC_MspInit+0x58>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d117      	bne.n	80058ec <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80058bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80058c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	4618      	mov	r0, r3
 80058ce:	f006 ff37 	bl	800c740 <HAL_RCCEx_PeriphCLKConfig>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80058d8:	f7ff ffb2 	bl	8005840 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RTC_MspInit+0x5c>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <HAL_RTC_MspInit+0x5c>)
 80058e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80058ec:	bf00      	nop
 80058ee:	3760      	adds	r7, #96	; 0x60
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40002800 	.word	0x40002800
 80058f8:	40021000 	.word	0x40021000

080058fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <MX_SPI1_Init+0x74>)
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <MX_SPI1_Init+0x78>)
 8005904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005906:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <MX_SPI1_Init+0x74>)
 8005908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800590c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800590e:	4b18      	ldr	r3, [pc, #96]	; (8005970 <MX_SPI1_Init+0x74>)
 8005910:	2200      	movs	r2, #0
 8005912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <MX_SPI1_Init+0x74>)
 8005916:	f44f 7240 	mov.w	r2, #768	; 0x300
 800591a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <MX_SPI1_Init+0x74>)
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <MX_SPI1_Init+0x74>)
 8005924:	2200      	movs	r2, #0
 8005926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005928:	4b11      	ldr	r3, [pc, #68]	; (8005970 <MX_SPI1_Init+0x74>)
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <MX_SPI1_Init+0x74>)
 8005932:	2200      	movs	r2, #0
 8005934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <MX_SPI1_Init+0x74>)
 8005938:	2200      	movs	r2, #0
 800593a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <MX_SPI1_Init+0x74>)
 800593e:	2200      	movs	r2, #0
 8005940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <MX_SPI1_Init+0x74>)
 8005944:	2200      	movs	r2, #0
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <MX_SPI1_Init+0x74>)
 800594a:	2207      	movs	r2, #7
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800594e:	4b08      	ldr	r3, [pc, #32]	; (8005970 <MX_SPI1_Init+0x74>)
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <MX_SPI1_Init+0x74>)
 8005956:	2208      	movs	r2, #8
 8005958:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800595a:	4805      	ldr	r0, [pc, #20]	; (8005970 <MX_SPI1_Init+0x74>)
 800595c:	f007 faea 	bl	800cf34 <HAL_SPI_Init>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005966:	f7ff ff6b 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200006cc 	.word	0x200006cc
 8005974:	40013000 	.word	0x40013000

08005978 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <HAL_SPI_MspInit+0x7c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d128      	bne.n	80059ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 80059a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059a4:	6613      	str	r3, [r2, #96]	; 0x60
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	4a10      	ldr	r2, [pc, #64]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <HAL_SPI_MspInit+0x80>)
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 80059ca:	23c2      	movs	r3, #194	; 0xc2
 80059cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ce:	2302      	movs	r3, #2
 80059d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d6:	2303      	movs	r3, #3
 80059d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059da:	2305      	movs	r3, #5
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059de:	f107 0314 	add.w	r3, r7, #20
 80059e2:	4619      	mov	r1, r3
 80059e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059e8:	f003 fed4 	bl	8009794 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80059ec:	bf00      	nop
 80059ee:	3728      	adds	r7, #40	; 0x28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40013000 	.word	0x40013000
 80059f8:	40021000 	.word	0x40021000

080059fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a02:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_MspInit+0x44>)
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	4a0e      	ldr	r2, [pc, #56]	; (8005a40 <HAL_MspInit+0x44>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_MspInit+0x44>)
 8005a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	607b      	str	r3, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_MspInit+0x44>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <HAL_MspInit+0x44>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6593      	str	r3, [r2, #88]	; 0x58
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_MspInit+0x44>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005a52:	4b2e      	ldr	r3, [pc, #184]	; (8005b0c <HAL_InitTick+0xc8>)
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	4a2d      	ldr	r2, [pc, #180]	; (8005b0c <HAL_InitTick+0xc8>)
 8005a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a5e:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_InitTick+0xc8>)
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a6a:	f107 020c 	add.w	r2, r7, #12
 8005a6e:	f107 0310 	add.w	r3, r7, #16
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f006 fdd1 	bl	800c61c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a7a:	f006 fdb9 	bl	800c5f0 <HAL_RCC_GetPCLK2Freq>
 8005a7e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <HAL_InitTick+0xcc>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	0c9b      	lsrs	r3, r3, #18
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005a8e:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <HAL_InitTick+0xd0>)
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_InitTick+0xd4>)
 8005a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <HAL_InitTick+0xd0>)
 8005a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_InitTick+0xd0>)
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <HAL_InitTick+0xd0>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <HAL_InitTick+0xd0>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_InitTick+0xd0>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005ab4:	4817      	ldr	r0, [pc, #92]	; (8005b14 <HAL_InitTick+0xd0>)
 8005ab6:	f007 fae0 	bl	800d07a <HAL_TIM_Base_Init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11b      	bne.n	8005b00 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005ac8:	4812      	ldr	r0, [pc, #72]	; (8005b14 <HAL_InitTick+0xd0>)
 8005aca:	f007 fb2d 	bl	800d128 <HAL_TIM_Base_Start_IT>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d111      	bne.n	8005b00 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005adc:	2019      	movs	r0, #25
 8005ade:	f003 fbb9 	bl	8009254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b0f      	cmp	r3, #15
 8005ae6:	d808      	bhi.n	8005afa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	2019      	movs	r0, #25
 8005aee:	f003 fb95 	bl	800921c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <HAL_InitTick+0xd8>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e002      	b.n	8005b00 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3730      	adds	r7, #48	; 0x30
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	431bde83 	.word	0x431bde83
 8005b14:	20000730 	.word	0x20000730
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	20000010 	.word	0x20000010

08005b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b24:	e7fe      	b.n	8005b24 <NMI_Handler+0x4>

08005b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b2a:	e7fe      	b.n	8005b2a <HardFault_Handler+0x4>

08005b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b30:	e7fe      	b.n	8005b30 <MemManage_Handler+0x4>

08005b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b36:	e7fe      	b.n	8005b36 <BusFault_Handler+0x4>

08005b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b3c:	e7fe      	b.n	8005b3c <UsageFault_Handler+0x4>

08005b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b42:	bf00      	nop
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b7c:	4802      	ldr	r0, [pc, #8]	; (8005b88 <DMA1_Channel1_IRQHandler+0x10>)
 8005b7e:	f003 fd1c 	bl	80095ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200002a4 	.word	0x200002a4

08005b8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8005b90:	4802      	ldr	r0, [pc, #8]	; (8005b9c <DMA1_Channel7_IRQHandler+0x10>)
 8005b92:	f003 fd12 	bl	80095ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20003480 	.word	0x20003480

08005ba0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ba4:	4802      	ldr	r0, [pc, #8]	; (8005bb0 <ADC1_IRQHandler+0x10>)
 8005ba6:	f002 f9b4 	bl	8007f12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000240 	.word	0x20000240

08005bb4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005bb8:	4802      	ldr	r0, [pc, #8]	; (8005bc4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005bba:	f007 ff1b 	bl	800d9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20003434 	.word	0x20003434

08005bc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005bcc:	4802      	ldr	r0, [pc, #8]	; (8005bd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005bce:	f007 ff11 	bl	800d9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000730 	.word	0x20000730

08005bdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005be0:	4802      	ldr	r0, [pc, #8]	; (8005bec <I2C1_EV_IRQHandler+0x10>)
 8005be2:	f004 fb65 	bl	800a2b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000320 	.word	0x20000320

08005bf0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <I2C1_ER_IRQHandler+0x10>)
 8005bf6:	f004 fb75 	bl	800a2e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000320 	.word	0x20000320

08005c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <USART1_IRQHandler+0x10>)
 8005c0a:	f009 f805 	bl	800ec18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000564c 	.word	0x2000564c

08005c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <SystemInit+0x20>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <SystemInit+0x20>)
 8005c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08c      	sub	sp, #48	; 0x30
 8005c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c42:	f107 0320 	add.w	r3, r7, #32
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c50:	f107 0314 	add.w	r3, r7, #20
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c70:	4b29      	ldr	r3, [pc, #164]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c76:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999999;
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <MX_TIM2_Init+0xe0>)
 8005c80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c82:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c88:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c8e:	4822      	ldr	r0, [pc, #136]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005c90:	f007 f9f3 	bl	800d07a <HAL_TIM_Base_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8005c9a:	f7ff fdd1 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005ca4:	f107 0320 	add.w	r3, r7, #32
 8005ca8:	4619      	mov	r1, r3
 8005caa:	481b      	ldr	r0, [pc, #108]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005cac:	f008 f85d 	bl	800dd6a <HAL_TIM_ConfigClockSource>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005cb6:	f7ff fdc3 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005cba:	4817      	ldr	r0, [pc, #92]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005cbc:	f007 fa88 	bl	800d1d0 <HAL_TIM_IC_Init>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005cc6:	f7ff fdbb 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cd2:	f107 0314 	add.w	r3, r7, #20
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	480f      	ldr	r0, [pc, #60]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005cda:	f008 fc8d 	bl	800e5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8005ce4:	f7ff fdac 	bl	8005840 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005cec:	2301      	movs	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV2;
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 3;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4806      	ldr	r0, [pc, #24]	; (8005d18 <MX_TIM2_Init+0xdc>)
 8005d00:	f007 ff97 	bl	800dc32 <HAL_TIM_IC_ConfigChannel>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005d0a:	f7ff fd99 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d0e:	bf00      	nop
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200033e8 	.word	0x200033e8
 8005d1c:	d693a3ff 	.word	0xd693a3ff

08005d20 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	; 0x30
 8005d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d26:	f107 0320 	add.w	r3, r7, #32
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	609a      	str	r2, [r3, #8]
 8005d4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005d4c:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d4e:	4a2d      	ldr	r2, [pc, #180]	; (8005e04 <MX_TIM15_Init+0xe4>)
 8005d50:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8005d52:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d58:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 59999;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d60:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d64:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d72:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005d78:	4821      	ldr	r0, [pc, #132]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d7a:	f007 f97e 	bl	800d07a <HAL_TIM_Base_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8005d84:	f7ff fd5c 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005d8e:	f107 0320 	add.w	r3, r7, #32
 8005d92:	4619      	mov	r1, r3
 8005d94:	481a      	ldr	r0, [pc, #104]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005d96:	f007 ffe8 	bl	800dd6a <HAL_TIM_ConfigClockSource>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8005da0:	f7ff fd4e 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8005da4:	4816      	ldr	r0, [pc, #88]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005da6:	f007 fa13 	bl	800d1d0 <HAL_TIM_IC_Init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005db0:	f7ff fd46 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	480f      	ldr	r0, [pc, #60]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005dc4:	f008 fc18 	bl	800e5f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8005dce:	f7ff fd37 	bl	8005840 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 3;
 8005dde:	2303      	movs	r3, #3
 8005de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	2204      	movs	r2, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4805      	ldr	r0, [pc, #20]	; (8005e00 <MX_TIM15_Init+0xe0>)
 8005dea:	f007 ff22 	bl	800dc32 <HAL_TIM_IC_ConfigChannel>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8005df4:	f7ff fd24 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005df8:	bf00      	nop
 8005dfa:	3730      	adds	r7, #48	; 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20003434 	.word	0x20003434
 8005e04:	40014000 	.word	0x40014000

08005e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 031c 	add.w	r3, r7, #28
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e28:	d15a      	bne.n	8005ee0 <HAL_TIM_Base_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e2a:	4b4a      	ldr	r3, [pc, #296]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	4a49      	ldr	r2, [pc, #292]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6593      	str	r3, [r2, #88]	; 0x58
 8005e36:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e42:	4b44      	ldr	r3, [pc, #272]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e46:	4a43      	ldr	r2, [pc, #268]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = D13_DCF77_PHASE_TIM2_CH2_Pin;
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e62:	2302      	movs	r3, #2
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e66:	2300      	movs	r3, #0
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(D13_DCF77_PHASE_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8005e6e:	f107 031c 	add.w	r3, r7, #28
 8005e72:	4619      	mov	r1, r3
 8005e74:	4838      	ldr	r0, [pc, #224]	; (8005f58 <HAL_TIM_Base_MspInit+0x150>)
 8005e76:	f003 fc8d 	bl	8009794 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005e7a:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e7c:	4a38      	ldr	r2, [pc, #224]	; (8005f60 <HAL_TIM_Base_MspInit+0x158>)
 8005e7e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8005e80:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e82:	2204      	movs	r2, #4
 8005e84:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e86:	4b35      	ldr	r3, [pc, #212]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005e92:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e94:	2280      	movs	r2, #128	; 0x80
 8005e96:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e98:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ea0:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005eaa:	2220      	movs	r2, #32
 8005eac:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005eb6:	4829      	ldr	r0, [pc, #164]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005eb8:	f003 f9e8 	bl	800928c <HAL_DMA_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8005ec2:	f7ff fcbd 	bl	8005840 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005eca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ecc:	4a23      	ldr	r2, [pc, #140]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <HAL_TIM_Base_MspInit+0x154>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005ede:	e035      	b.n	8005f4c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_TIM_Base_MspInit+0x15c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d130      	bne.n	8005f4c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8005ef6:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <HAL_TIM_Base_MspInit+0x14c>)
 8005f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = A2_GPS_PPS_TIM15_CH2_Pin;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005f22:	2302      	movs	r3, #2
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f26:	2300      	movs	r3, #0
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8005f2a:	230e      	movs	r3, #14
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A2_GPS_PPS_TIM15_CH2_GPIO_Port, &GPIO_InitStruct);
 8005f2e:	f107 031c 	add.w	r3, r7, #28
 8005f32:	4619      	mov	r1, r3
 8005f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f38:	f003 fc2c 	bl	8009794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2100      	movs	r1, #0
 8005f40:	2018      	movs	r0, #24
 8005f42:	f003 f96b 	bl	800921c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005f46:	2018      	movs	r0, #24
 8005f48:	f003 f984 	bl	8009254 <HAL_NVIC_EnableIRQ>
}
 8005f4c:	bf00      	nop
 8005f4e:	3730      	adds	r7, #48	; 0x30
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	48000400 	.word	0x48000400
 8005f5c:	20003480 	.word	0x20003480
 8005f60:	40020080 	.word	0x40020080
 8005f64:	40014000 	.word	0x40014000

08005f68 <dcf_extract_seconds>:
  }
}

/* USER CODE BEGIN 1 */

static void dcf_extract_seconds(void) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
	const uint32_t phaseTicksPerSec = 60000000UL;
 8005f6e:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <dcf_extract_seconds+0x58>)
 8005f70:	603b      	str	r3, [r7, #0]

	/* Timestamp @ 60 MHz */
	for (uint8_t mvIdx = 9U; mvIdx; mvIdx--) {
 8005f72:	2309      	movs	r3, #9
 8005f74:	71fb      	strb	r3, [r7, #7]
 8005f76:	e00b      	b.n	8005f90 <dcf_extract_seconds+0x28>
		giTim2Ch2_TS_ary[mvIdx] = giTim2Ch2_TS_ary[mvIdx - 1U];
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <dcf_extract_seconds+0x5c>)
 8005f80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f84:	490f      	ldr	r1, [pc, #60]	; (8005fc4 <dcf_extract_seconds+0x5c>)
 8005f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t mvIdx = 9U; mvIdx; mvIdx--) {
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	71fb      	strb	r3, [r7, #7]
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <dcf_extract_seconds+0x10>
	}

	giTim2Ch2_TS_ary[0U] = giTim2Ch2_TS_Phase_ary[PRN_CORRELATION_SINGLE_BUF_SIZE] % phaseTicksPerSec;
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <dcf_extract_seconds+0x60>)
 8005f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	fb01 f202 	mul.w	r2, r1, r2
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <dcf_extract_seconds+0x5c>)
 8005fb0:	6013      	str	r3, [r2, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	03938700 	.word	0x03938700
 8005fc4:	200007bc 	.word	0x200007bc
 8005fc8:	200007e4 	.word	0x200007e4

08005fcc <HAL_TIM_IC_CaptureHalfCpltCallback>:

/* Every second half of the buffer gets ready */
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
	/* TIM2: DCF77 timer */
	if (htim == &htim2) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a26      	ldr	r2, [pc, #152]	; (8006074 <HAL_TIM_IC_CaptureHalfCpltCallback+0xa8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d145      	bne.n	800606a <HAL_TIM_IC_CaptureHalfCpltCallback+0x9e>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7f1b      	ldrb	r3, [r3, #28]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d141      	bne.n	800606a <HAL_TIM_IC_CaptureHalfCpltCallback+0x9e>
			/* First half is complete */
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idx = 0; cnt; idx++, cnt--) {
 8005fe6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8005fea:	81fb      	strh	r3, [r7, #14]
 8005fec:	2300      	movs	r3, #0
 8005fee:	81bb      	strh	r3, [r7, #12]
 8005ff0:	e02f      	b.n	8006052 <HAL_TIM_IC_CaptureHalfCpltCallback+0x86>
				giTim2Ch2_TS_PhaseDiff_ary[idx] = (int8_t) (giTim2Ch2_TS_Phase_ary[idx] - giTim2Ch2_TS_Phase_ary[0] - ((idx * 2ULL * 31ULL * 60000000ULL) / 77500ULL));
 8005ff2:	89bb      	ldrh	r3, [r7, #12]
 8005ff4:	4a20      	ldr	r2, [pc, #128]	; (8006078 <HAL_TIM_IC_CaptureHalfCpltCallback+0xac>)
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <HAL_TIM_IC_CaptureHalfCpltCallback+0xac>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	b2de      	uxtb	r6, r3
 8006006:	89bb      	ldrh	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	4698      	mov	r8, r3
 800600c:	4691      	mov	r9, r2
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <HAL_TIM_IC_CaptureHalfCpltCallback+0xb0>)
 8006010:	fb03 f209 	mul.w	r2, r3, r9
 8006014:	2300      	movs	r3, #0
 8006016:	fb03 f308 	mul.w	r3, r3, r8
 800601a:	4413      	add	r3, r2
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_TIM_IC_CaptureHalfCpltCallback+0xb0>)
 800601e:	fba8 4502 	umull	r4, r5, r8, r2
 8006022:	442b      	add	r3, r5
 8006024:	461d      	mov	r5, r3
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <HAL_TIM_IC_CaptureHalfCpltCallback+0xb4>)
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	4620      	mov	r0, r4
 800602e:	4629      	mov	r1, r5
 8006030:	f7fa fe3a 	bl	8000ca8 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	b2d3      	uxtb	r3, r2
 800603a:	1af3      	subs	r3, r6, r3
 800603c:	b2da      	uxtb	r2, r3
 800603e:	89bb      	ldrh	r3, [r7, #12]
 8006040:	b251      	sxtb	r1, r2
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <HAL_TIM_IC_CaptureHalfCpltCallback+0xb8>)
 8006044:	54d1      	strb	r1, [r2, r3]
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idx = 0; cnt; idx++, cnt--) {
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	81bb      	strh	r3, [r7, #12]
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	3b01      	subs	r3, #1
 8006050:	81fb      	strh	r3, [r7, #14]
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1cc      	bne.n	8005ff2 <HAL_TIM_IC_CaptureHalfCpltCallback+0x26>
			}

			/* Timestamp @ 60 MHz */
			dcf_extract_seconds();
 8006058:	f7ff ff86 	bl	8005f68 <dcf_extract_seconds>

			/* Page has changed */
			giTim2Ch2_TS_PhaseDiff_ary_page++;
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <HAL_TIM_IC_CaptureHalfCpltCallback+0xbc>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	3301      	adds	r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_TIM_IC_CaptureHalfCpltCallback+0xbc>)
 8006068:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_SET);
		}  // if (CHANNEL_2)
	}  // if (&htim2)
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006074:	200033e8 	.word	0x200033e8
 8006078:	200007e4 	.word	0x200007e4
 800607c:	ddbab200 	.word	0xddbab200
 8006080:	00012ebc 	.word	0x00012ebc
 8006084:	20002ef8 	.word	0x20002ef8
 8006088:	20002ef4 	.word	0x20002ef4

0800608c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800608c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
	/* TIM15: GPS timer */
	if (htim == &htim15) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a60      	ldr	r2, [pc, #384]	; (800621c <HAL_TIM_IC_CaptureCallback+0x190>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d165      	bne.n	800616a <HAL_TIM_IC_CaptureCallback+0xde>
		if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7f1b      	ldrb	r3, [r3, #28]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d161      	bne.n	800616a <HAL_TIM_IC_CaptureCallback+0xde>
			/* GPS 1PPS pulse captured */
			giTim15Ch2_TS = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80060a6:	2104      	movs	r1, #4
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f007 ff27 	bl	800defc <HAL_TIM_ReadCapturedValue>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4a5b      	ldr	r2, [pc, #364]	; (8006220 <HAL_TIM_IC_CaptureCallback+0x194>)
 80060b2:	6013      	str	r3, [r2, #0]
			if (giTim15Ch2_TS < 60000UL) {
#else
			/* 1 PPS mode */
			{
#endif
				int32_t diff = giTim15Ch2_TS - giTim15Ch2_TS_ary[giTim15Ch2_TS_ary_idx];
 80060b4:	4b5a      	ldr	r3, [pc, #360]	; (8006220 <HAL_TIM_IC_CaptureCallback+0x194>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b5a      	ldr	r3, [pc, #360]	; (8006224 <HAL_TIM_IC_CaptureCallback+0x198>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	4b59      	ldr	r3, [pc, #356]	; (8006228 <HAL_TIM_IC_CaptureCallback+0x19c>)
 80060c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	60fb      	str	r3, [r7, #12]

#if !defined(PLL_BY_SOFTWARE)
				if ((-100000 < diff) && (diff < +100000)) {
#else
				/* Clamp below +/-5 ppm */
				if ((-3000 < diff) && (diff < +3000)) {
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a57      	ldr	r2, [pc, #348]	; (800622c <HAL_TIM_IC_CaptureCallback+0x1a0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	db1b      	blt.n	800610a <HAL_TIM_IC_CaptureCallback+0x7e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80060d8:	4293      	cmp	r3, r2
 80060da:	dc16      	bgt.n	800610a <HAL_TIM_IC_CaptureCallback+0x7e>
#endif
					/* Store accumulated difference */
					++giTim15Ch2_TicksEvt;
 80060dc:	4b54      	ldr	r3, [pc, #336]	; (8006230 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	4a53      	ldr	r2, [pc, #332]	; (8006230 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 80060e4:	6013      	str	r3, [r2, #0]
					giTim15Ch2_TicksDiff += diff;
 80060e6:	4b53      	ldr	r3, [pc, #332]	; (8006234 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	4a51      	ldr	r2, [pc, #324]	; (8006234 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80060f0:	6013      	str	r3, [r2, #0]

					/* Calculate PPMs */
					giTim15Ch2_ppm = diff / 600.0f;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006238 <HAL_TIM_IC_CaptureCallback+0x1ac>
 8006100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006104:	4b4d      	ldr	r3, [pc, #308]	; (800623c <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8006106:	edc3 7a00 	vstr	s15, [r3]
				}

				if (giTim15Ch2_TicksEvt > 1UL) {
 800610a:	4b49      	ldr	r3, [pc, #292]	; (8006230 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d91c      	bls.n	800614c <HAL_TIM_IC_CaptureCallback+0xc0>
					/* Write back TimeStamp to 10 sec circle-buffer */
					giTim15Ch2_TS_ary[giTim15Ch2_TS_ary_idx++] = giTim15Ch2_TS;
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <HAL_TIM_IC_CaptureCallback+0x198>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	b2d1      	uxtb	r1, r2
 800611c:	4a41      	ldr	r2, [pc, #260]	; (8006224 <HAL_TIM_IC_CaptureCallback+0x198>)
 800611e:	7011      	strb	r1, [r2, #0]
 8006120:	4619      	mov	r1, r3
 8006122:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <HAL_TIM_IC_CaptureCallback+0x194>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a40      	ldr	r2, [pc, #256]	; (8006228 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8006128:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					giTim15Ch2_TS_ary_idx %= 10;
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_TIM_IC_CaptureCallback+0x198>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	4b43      	ldr	r3, [pc, #268]	; (8006240 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	08d9      	lsrs	r1, r3, #3
 800613a:	460b      	mov	r3, r1
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b37      	ldr	r3, [pc, #220]	; (8006224 <HAL_TIM_IC_CaptureCallback+0x198>)
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e00e      	b.n	800616a <HAL_TIM_IC_CaptureCallback+0xde>
				}
				else {
					/* Fast fill of the timestamp buffer */
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
 8006150:	e008      	b.n	8006164 <HAL_TIM_IC_CaptureCallback+0xd8>
						giTim15Ch2_TS_ary[idx] = giTim15Ch2_TS;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	4a32      	ldr	r2, [pc, #200]	; (8006220 <HAL_TIM_IC_CaptureCallback+0x194>)
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	4933      	ldr	r1, [pc, #204]	; (8006228 <HAL_TIM_IC_CaptureCallback+0x19c>)
 800615a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for (uint8_t idx = 0U; idx < 10U; ++idx) {
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	3301      	adds	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	2b09      	cmp	r3, #9
 8006168:	d9f3      	bls.n	8006152 <HAL_TIM_IC_CaptureCallback+0xc6>
			}
		}  // if (CHANNEL_2)
	}  // if (htim == &htim15)

	/* TIM2: DCF77 timer */
	if (htim == &htim2) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a35      	ldr	r2, [pc, #212]	; (8006244 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d14e      	bne.n	8006210 <HAL_TIM_IC_CaptureCallback+0x184>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7f1b      	ldrb	r3, [r3, #28]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d14a      	bne.n	8006210 <HAL_TIM_IC_CaptureCallback+0x184>
			/* Second half is complete */
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idxA = 0, idxB = PRN_CORRELATION_SINGLE_BUF_SIZE; cnt; idxA++, idxB++, cnt--) {
 800617a:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800617e:	82bb      	strh	r3, [r7, #20]
 8006180:	2300      	movs	r3, #0
 8006182:	827b      	strh	r3, [r7, #18]
 8006184:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006188:	823b      	strh	r3, [r7, #16]
 800618a:	e035      	b.n	80061f8 <HAL_TIM_IC_CaptureCallback+0x16c>
				giTim2Ch2_TS_PhaseDiff_ary[idxA] = (int8_t) (giTim2Ch2_TS_Phase_ary[idxB] - giTim2Ch2_TS_Phase_ary[PRN_CORRELATION_SINGLE_BUF_SIZE]  - ((idxA * 2ULL * 31ULL * 60000000ULL) / 77500ULL));
 800618c:	8a3b      	ldrh	r3, [r7, #16]
 800618e:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8006190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8006198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	b2de      	uxtb	r6, r3
 80061a6:	8a7b      	ldrh	r3, [r7, #18]
 80061a8:	2200      	movs	r2, #0
 80061aa:	4698      	mov	r8, r3
 80061ac:	4691      	mov	r9, r2
 80061ae:	4b27      	ldr	r3, [pc, #156]	; (800624c <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80061b0:	fb03 f209 	mul.w	r2, r3, r9
 80061b4:	2300      	movs	r3, #0
 80061b6:	fb03 f308 	mul.w	r3, r3, r8
 80061ba:	4413      	add	r3, r2
 80061bc:	4a23      	ldr	r2, [pc, #140]	; (800624c <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80061be:	fba8 4502 	umull	r4, r5, r8, r2
 80061c2:	442b      	add	r3, r5
 80061c4:	461d      	mov	r5, r3
 80061c6:	4a22      	ldr	r2, [pc, #136]	; (8006250 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	4620      	mov	r0, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	f7fa fd6a 	bl	8000ca8 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	b2d3      	uxtb	r3, r2
 80061da:	1af3      	subs	r3, r6, r3
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	8a7b      	ldrh	r3, [r7, #18]
 80061e0:	b251      	sxtb	r1, r2
 80061e2:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80061e4:	54d1      	strb	r1, [r2, r3]
			for (uint16_t cnt = PRN_CORRELATION_SINGLE_BUF_SIZE, idxA = 0, idxB = PRN_CORRELATION_SINGLE_BUF_SIZE; cnt; idxA++, idxB++, cnt--) {
 80061e6:	8a7b      	ldrh	r3, [r7, #18]
 80061e8:	3301      	adds	r3, #1
 80061ea:	827b      	strh	r3, [r7, #18]
 80061ec:	8a3b      	ldrh	r3, [r7, #16]
 80061ee:	3301      	adds	r3, #1
 80061f0:	823b      	strh	r3, [r7, #16]
 80061f2:	8abb      	ldrh	r3, [r7, #20]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	82bb      	strh	r3, [r7, #20]
 80061f8:	8abb      	ldrh	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1c6      	bne.n	800618c <HAL_TIM_IC_CaptureCallback+0x100>
			}

			/* Timestamp @ 60 MHz */
			dcf_extract_seconds();
 80061fe:	f7ff feb3 	bl	8005f68 <dcf_extract_seconds>

			/* Page has changed */
			giTim2Ch2_TS_PhaseDiff_ary_page++;
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	3301      	adds	r3, #1
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800620e:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
		}  // if (CHANNEL_2)
	}  // if (htim == &htim2)
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800621a:	bf00      	nop
 800621c:	20003434 	.word	0x20003434
 8006220:	2000077c 	.word	0x2000077c
 8006224:	20000780 	.word	0x20000780
 8006228:	20000784 	.word	0x20000784
 800622c:	fffff449 	.word	0xfffff449
 8006230:	200007ac 	.word	0x200007ac
 8006234:	200007b0 	.word	0x200007b0
 8006238:	44160000 	.word	0x44160000
 800623c:	200007b8 	.word	0x200007b8
 8006240:	cccccccd 	.word	0xcccccccd
 8006244:	200033e8 	.word	0x200033e8
 8006248:	200007e4 	.word	0x200007e4
 800624c:	ddbab200 	.word	0xddbab200
 8006250:	00012ebc 	.word	0x00012ebc
 8006254:	20002ef8 	.word	0x20002ef8
 8006258:	20002ef4 	.word	0x20002ef4

0800625c <tim_TIM2_IC2_DMA_restart>:


void tim_TIM2_IC2_DMA_restart(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
	if (HAL_TIM_IC_Stop_DMA( &htim2, TIM_CHANNEL_2) != HAL_OK) {
 8006260:	2104      	movs	r1, #4
 8006262:	480b      	ldr	r0, [pc, #44]	; (8006290 <tim_TIM2_IC2_DMA_restart+0x34>)
 8006264:	f007 faf4 	bl	800d850 <HAL_TIM_IC_Stop_DMA>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <tim_TIM2_IC2_DMA_restart+0x16>
		/* Starting Error */
		Error_Handler();
 800626e:	f7ff fae7 	bl	8005840 <Error_Handler>
	}

	if (HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)giTim2Ch2_TS_Phase_ary, PRN_CORRELATION_DOUBLE_BUF_SIZE) != HAL_OK) {
 8006272:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006276:	4a07      	ldr	r2, [pc, #28]	; (8006294 <tim_TIM2_IC2_DMA_restart+0x38>)
 8006278:	2104      	movs	r1, #4
 800627a:	4805      	ldr	r0, [pc, #20]	; (8006290 <tim_TIM2_IC2_DMA_restart+0x34>)
 800627c:	f007 f938 	bl	800d4f0 <HAL_TIM_IC_Start_DMA>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <tim_TIM2_IC2_DMA_restart+0x2e>
		/* Starting Error */
		Error_Handler();
 8006286:	f7ff fadb 	bl	8005840 <Error_Handler>
	}
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200033e8 	.word	0x200033e8
 8006294:	200007e4 	.word	0x200007e4

08006298 <tim_start>:

void tim_start(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
	/* TIM15 IC CH2 NEO-x */
	{
		if (HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2) != HAL_OK) {
 800629c:	2104      	movs	r1, #4
 800629e:	480b      	ldr	r0, [pc, #44]	; (80062cc <tim_start+0x34>)
 80062a0:	f006 fff8 	bl	800d294 <HAL_TIM_IC_Start_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <tim_start+0x16>
			/* Starting Error */
			Error_Handler();
 80062aa:	f7ff fac9 	bl	8005840 <Error_Handler>
		}
	}

	/* TIM2 IC CH2 DCF77 PHASE */
	{
		if (HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)giTim2Ch2_TS_Phase_ary, PRN_CORRELATION_DOUBLE_BUF_SIZE) != HAL_OK) {
 80062ae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <tim_start+0x38>)
 80062b4:	2104      	movs	r1, #4
 80062b6:	4807      	ldr	r0, [pc, #28]	; (80062d4 <tim_start+0x3c>)
 80062b8:	f007 f91a 	bl	800d4f0 <HAL_TIM_IC_Start_DMA>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <tim_start+0x2e>
			/* Starting Error */
			Error_Handler();
 80062c2:	f7ff fabd 	bl	8005840 <Error_Handler>
		}
	}
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20003434 	.word	0x20003434
 80062d0:	200007e4 	.word	0x200007e4
 80062d4:	200033e8 	.word	0x200033e8

080062d8 <tim_get_timeStamp>:

uint32_t tim_get_timeStamp(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	return htim->Instance->CNT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_UART_TxCpltCallback+0x1c>)
 80062fe:	2201      	movs	r2, #1
 8006300:	701a      	strb	r2, [r3, #0]
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	200034c8 	.word	0x200034c8

08006314 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxCnt 	= UartHandle->RxXferSize - UartHandle->RxXferCount;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006328:	b29b      	uxth	r3, r3
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	b29a      	uxth	r2, r3
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_UART_RxCpltCallback+0x30>)
 8006330:	801a      	strh	r2, [r3, #0]
  gUart1RxReady = SET;
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_UART_RxCpltCallback+0x34>)
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	200034ca 	.word	0x200034ca
 8006348:	200034c9 	.word	0x200034c9

0800634c <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635a:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a2b      	ldr	r2, [pc, #172]	; (800640c <HAL_UART_ErrorCallback+0xc0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d148      	bne.n	80063f6 <HAL_UART_ErrorCallback+0xaa>
		if (err & HAL_UART_ERROR_RTO) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <HAL_UART_ErrorCallback+0x40>
			/* Stop transfer */
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800637a:	b29b      	uxth	r3, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	b29a      	uxth	r2, r3
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <HAL_UART_ErrorCallback+0xc4>)
 8006382:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 8006384:	4b23      	ldr	r3, [pc, #140]	; (8006414 <HAL_UART_ErrorCallback+0xc8>)
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 800638a:	e03a      	b.n	8006402 <HAL_UART_ErrorCallback+0xb6>
				err & HAL_UART_ERROR_PE ||
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0301 	and.w	r3, r3, #1
		else if (
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_NE ||
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_UART_ErrorCallback+0x5e>
				err & HAL_UART_ERROR_FE) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00e      	beq.n	80063c8 <HAL_UART_ErrorCallback+0x7c>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <HAL_UART_ErrorCallback+0xc4>)
 80063be:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <HAL_UART_ErrorCallback+0xc8>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
}
 80063c6:	e01c      	b.n	8006402 <HAL_UART_ErrorCallback+0xb6>
		else if (err & HAL_UART_ERROR_ORE) {
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <HAL_UART_ErrorCallback+0xa4>
			gUart1RxCnt		= UartHandle->RxXferSize - UartHandle->RxXferCount;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_UART_ErrorCallback+0xc4>)
 80063e6:	801a      	strh	r2, [r3, #0]
			gUart1RxReady 	= SET;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_UART_ErrorCallback+0xc8>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
}
 80063ee:	e008      	b.n	8006402 <HAL_UART_ErrorCallback+0xb6>
			Error_Handler();
 80063f0:	f7ff fa26 	bl	8005840 <Error_Handler>
}
 80063f4:	e005      	b.n	8006402 <HAL_UART_ErrorCallback+0xb6>
	else if (UartHandle == &huart2) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <HAL_UART_ErrorCallback+0xcc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_UART_ErrorCallback+0xb6>
		Error_Handler();
 80063fe:	f7ff fa1f 	bl	8005840 <Error_Handler>
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000564c 	.word	0x2000564c
 8006410:	200034ca 	.word	0x200034ca
 8006414:	200034c9 	.word	0x200034c9
 8006418:	200056d0 	.word	0x200056d0

0800641c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <MX_USART1_UART_Init+0x5c>)
 8006424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006428:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800642c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006430:	2200      	movs	r2, #0
 8006432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006436:	2200      	movs	r2, #0
 8006438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800643a:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <MX_USART1_UART_Init+0x58>)
 800643c:	2200      	movs	r2, #0
 800643e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006442:	220c      	movs	r2, #12
 8006444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006448:	2200      	movs	r2, #0
 800644a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <MX_USART1_UART_Init+0x58>)
 800644e:	2200      	movs	r2, #0
 8006450:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006452:	4b08      	ldr	r3, [pc, #32]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006454:	2200      	movs	r2, #0
 8006456:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <MX_USART1_UART_Init+0x58>)
 800645a:	2200      	movs	r2, #0
 800645c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800645e:	4805      	ldr	r0, [pc, #20]	; (8006474 <MX_USART1_UART_Init+0x58>)
 8006460:	f008 f94e 	bl	800e700 <HAL_UART_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800646a:	f7ff f9e9 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	2000564c 	.word	0x2000564c
 8006478:	40013800 	.word	0x40013800

0800647c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006480:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 8006482:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <MX_USART2_UART_Init+0x5c>)
 8006484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 8006488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800648c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 8006496:	2200      	movs	r2, #0
 8006498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800649a:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 800649c:	2200      	movs	r2, #0
 800649e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064a2:	220c      	movs	r2, #12
 80064a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80064be:	4805      	ldr	r0, [pc, #20]	; (80064d4 <MX_USART2_UART_Init+0x58>)
 80064c0:	f008 f91e 	bl	800e700 <HAL_UART_Init>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80064ca:	f7ff f9b9 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200056d0 	.word	0x200056d0
 80064d8:	40004400 	.word	0x40004400

080064dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b0a0      	sub	sp, #128	; 0x80
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064f4:	f107 0318 	add.w	r3, r7, #24
 80064f8:	2254      	movs	r2, #84	; 0x54
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f009 fea1 	bl	8010244 <memset>
  if(uartHandle->Instance==USART1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a54      	ldr	r2, [pc, #336]	; (8006658 <HAL_UART_MspInit+0x17c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d152      	bne.n	80065b2 <HAL_UART_MspInit+0xd6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800650c:	2301      	movs	r3, #1
 800650e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8006510:	2302      	movs	r3, #2
 8006512:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	4618      	mov	r0, r3
 800651a:	f006 f911 	bl	800c740 <HAL_RCCEx_PeriphCLKConfig>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006524:	f7ff f98c 	bl	8005840 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006528:	4b4c      	ldr	r3, [pc, #304]	; (800665c <HAL_UART_MspInit+0x180>)
 800652a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652c:	4a4b      	ldr	r2, [pc, #300]	; (800665c <HAL_UART_MspInit+0x180>)
 800652e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006532:	6613      	str	r3, [r2, #96]	; 0x60
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <HAL_UART_MspInit+0x180>)
 8006536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006540:	4b46      	ldr	r3, [pc, #280]	; (800665c <HAL_UART_MspInit+0x180>)
 8006542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006544:	4a45      	ldr	r2, [pc, #276]	; (800665c <HAL_UART_MspInit+0x180>)
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800654c:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_UART_MspInit+0x180>)
 800654e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8006558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800655e:	2302      	movs	r3, #2
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006562:	2300      	movs	r3, #0
 8006564:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006566:	2300      	movs	r3, #0
 8006568:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800656a:	2307      	movs	r3, #7
 800656c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800656e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006578:	f003 f90c 	bl	8009794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 800657c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006580:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006582:	2302      	movs	r3, #2
 8006584:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006586:	2301      	movs	r3, #1
 8006588:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658a:	2300      	movs	r3, #0
 800658c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800658e:	2307      	movs	r3, #7
 8006590:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8006592:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006596:	4619      	mov	r1, r3
 8006598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800659c:	f003 f8fa 	bl	8009794 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	2025      	movs	r0, #37	; 0x25
 80065a6:	f002 fe39 	bl	800921c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065aa:	2025      	movs	r0, #37	; 0x25
 80065ac:	f002 fe52 	bl	8009254 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80065b0:	e04d      	b.n	800664e <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2a      	ldr	r2, [pc, #168]	; (8006660 <HAL_UART_MspInit+0x184>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d148      	bne.n	800664e <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80065bc:	2302      	movs	r3, #2
 80065be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80065c0:	2308      	movs	r3, #8
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065c4:	f107 0318 	add.w	r3, r7, #24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f006 f8b9 	bl	800c740 <HAL_RCCEx_PeriphCLKConfig>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80065d4:	f7ff f934 	bl	8005840 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80065d8:	4b20      	ldr	r3, [pc, #128]	; (800665c <HAL_UART_MspInit+0x180>)
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	4a1f      	ldr	r2, [pc, #124]	; (800665c <HAL_UART_MspInit+0x180>)
 80065de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e2:	6593      	str	r3, [r2, #88]	; 0x58
 80065e4:	4b1d      	ldr	r3, [pc, #116]	; (800665c <HAL_UART_MspInit+0x180>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065f0:	4b1a      	ldr	r3, [pc, #104]	; (800665c <HAL_UART_MspInit+0x180>)
 80065f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <HAL_UART_MspInit+0x180>)
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <HAL_UART_MspInit+0x180>)
 80065fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8006608:	2304      	movs	r3, #4
 800660a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660c:	2302      	movs	r3, #2
 800660e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	2300      	movs	r3, #0
 8006612:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006614:	2301      	movs	r3, #1
 8006616:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006618:	2307      	movs	r3, #7
 800661a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800661c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006620:	4619      	mov	r1, r3
 8006622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006626:	f003 f8b5 	bl	8009794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006630:	2302      	movs	r3, #2
 8006632:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006638:	2301      	movs	r3, #1
 800663a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800663c:	2303      	movs	r3, #3
 800663e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8006640:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006644:	4619      	mov	r1, r3
 8006646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800664a:	f003 f8a3 	bl	8009794 <HAL_GPIO_Init>
}
 800664e:	bf00      	nop
 8006650:	3780      	adds	r7, #128	; 0x80
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40013800 	.word	0x40013800
 800665c:	40021000 	.word	0x40021000
 8006660:	40004400 	.word	0x40004400

08006664 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <HAL_UART_MspDeInit+0x5c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10f      	bne.n	8006696 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006676:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <HAL_UART_MspDeInit+0x60>)
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <HAL_UART_MspDeInit+0x60>)
 800667c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006680:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8006682:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800668a:	f003 f9ed 	bl	8009a68 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800668e:	2025      	movs	r0, #37	; 0x25
 8006690:	f002 fdee 	bl	8009270 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8006694:	e010      	b.n	80066b8 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a0b      	ldr	r2, [pc, #44]	; (80066c8 <HAL_UART_MspDeInit+0x64>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10b      	bne.n	80066b8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_UART_MspDeInit+0x60>)
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a4:	4a07      	ldr	r2, [pc, #28]	; (80066c4 <HAL_UART_MspDeInit+0x60>)
 80066a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066aa:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80066ac:	f248 0104 	movw	r1, #32772	; 0x8004
 80066b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066b4:	f003 f9d8 	bl	8009a68 <HAL_GPIO_DeInit>
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40013800 	.word	0x40013800
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40004400 	.word	0x40004400

080066cc <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066d2:	4a15      	ldr	r2, [pc, #84]	; (8006728 <MX_USART1_UART_Init_38400baud+0x5c>)
 80066d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80066d6:	4b13      	ldr	r3, [pc, #76]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80066dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066f2:	220c      	movs	r2, #12
 80066f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 8006704:	2200      	movs	r2, #0
 8006706:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 800670a:	2200      	movs	r2, #0
 800670c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800670e:	4805      	ldr	r0, [pc, #20]	; (8006724 <MX_USART1_UART_Init_38400baud+0x58>)
 8006710:	f007 fff6 	bl	800e700 <HAL_UART_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 800671a:	f7ff f891 	bl	8005840 <Error_Handler>
  }

}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2000564c 	.word	0x2000564c
 8006728:	40013800 	.word	0x40013800

0800672c <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

static void calcChecksumRFC1145(uint8_t* ubxMsg, uint16_t ubxSize, uint8_t doFillIn, uint8_t* ckA, uint8_t* ckB)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	4613      	mov	r3, r2
 800673c:	727b      	strb	r3, [r7, #9]
	uint8_t ck_a = 0U, ck_b = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
 8006742:	2300      	movs	r3, #0
 8006744:	75bb      	strb	r3, [r7, #22]

	/* Sanity check */
	if (ubxSize < 8U) {
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	2b07      	cmp	r3, #7
 800674a:	d92f      	bls.n	80067ac <calcChecksumRFC1145+0x80>
		return;
	}

	/* Forward to checking region */
	ubxMsg += 2;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3302      	adds	r3, #2
 8006750:	60fb      	str	r3, [r7, #12]

	/* Calc checksums */
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	3b04      	subs	r3, #4
 8006756:	82bb      	strh	r3, [r7, #20]
 8006758:	e00d      	b.n	8006776 <calcChecksumRFC1145+0x4a>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	60fa      	str	r2, [r7, #12]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	4413      	add	r3, r2
 8006766:	75fb      	strb	r3, [r7, #23]
		ck_b = 0xffU & (ck_b + ck_a);
 8006768:	7dba      	ldrb	r2, [r7, #22]
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	4413      	add	r3, r2
 800676e:	75bb      	strb	r3, [r7, #22]
	for (uint16_t i = ubxSize - 4U; i; --i) {
 8006770:	8abb      	ldrh	r3, [r7, #20]
 8006772:	3b01      	subs	r3, #1
 8006774:	82bb      	strh	r3, [r7, #20]
 8006776:	8abb      	ldrh	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ee      	bne.n	800675a <calcChecksumRFC1145+0x2e>
	}

	/* Fill in checksums */
	if (doFillIn) {
 800677c:	7a7b      	ldrb	r3, [r7, #9]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <calcChecksumRFC1145+0x66>
		*(ubxMsg++) = ck_a;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	60fa      	str	r2, [r7, #12]
 8006788:	7dfa      	ldrb	r2, [r7, #23]
 800678a:	701a      	strb	r2, [r3, #0]
		*ubxMsg 	= ck_b;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	7dba      	ldrb	r2, [r7, #22]
 8006790:	701a      	strb	r2, [r3, #0]
	}

	/* Export data */
	if (ckA && ckB) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <calcChecksumRFC1145+0x82>
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <calcChecksumRFC1145+0x82>
		*ckA = ck_a;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7dfa      	ldrb	r2, [r7, #23]
 80067a2:	701a      	strb	r2, [r3, #0]
		*ckB = ck_b;
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	7dba      	ldrb	r2, [r7, #22]
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	e000      	b.n	80067ae <calcChecksumRFC1145+0x82>
		return;
 80067ac:	bf00      	nop
	}
}
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b092      	sub	sp, #72	; 0x48
 80067bc:	af02      	add	r7, sp, #8
	const uint32_t baudrate = 38400UL;
 80067be:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t cfg_Port1_Req[]		= {
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <ubloxUartSpeedFast+0x1f8>)
 80067c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80067cc:	c303      	stmia	r3!, {r0, r1}
 80067ce:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req), 1, 0, 0);
 80067d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067d4:	2300      	movs	r3, #0
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	2201      	movs	r2, #1
 80067dc:	2109      	movs	r1, #9
 80067de:	f7ff ffa5 	bl	800672c <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	611a      	str	r2, [r3, #16]
 80067f6:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	713b      	strb	r3, [r7, #4]
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	b2db      	uxtb	r3, r3
 8006804:	717b      	strb	r3, [r7, #5]
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	b2db      	uxtb	r3, r3
 800680c:	71bb      	strb	r3, [r7, #6]
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	b2db      	uxtb	r3, r3
 8006814:	71fb      	strb	r3, [r7, #7]

	int cnt = 3;
 8006816:	2303      	movs	r3, #3
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 800681a:	e0bb      	b.n	8006994 <ubloxUartSpeedFast+0x1dc>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 800681c:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <ubloxUartSpeedFast+0x1fc>)
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8006822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006826:	2209      	movs	r2, #9
 8006828:	4619      	mov	r1, r3
 800682a:	4863      	ldr	r0, [pc, #396]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 800682c:	f007 fff0 	bl	800e810 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8006830:	bf00      	nop
 8006832:	4b60      	ldr	r3, [pc, #384]	; (80069b4 <ubloxUartSpeedFast+0x1fc>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	d1fa      	bne.n	8006832 <ubloxUartSpeedFast+0x7a>
		}

		gUart1RxReady = RESET;
 800683c:	4b5f      	ldr	r3, [pc, #380]	; (80069bc <ubloxUartSpeedFast+0x204>)
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8006842:	485d      	ldr	r0, [pc, #372]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006844:	f008 f920 	bl	800ea88 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006848:	485b      	ldr	r0, [pc, #364]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 800684a:	f008 fce7 	bl	800f21c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800684e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006852:	495b      	ldr	r1, [pc, #364]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006854:	4858      	ldr	r0, [pc, #352]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006856:	f008 f849 	bl	800e8ec <HAL_UART_Receive_IT>
		int i = 11;
 800685a:	230b      	movs	r3, #11
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 800685e:	e005      	b.n	800686c <ubloxUartSpeedFast+0xb4>
			HAL_Delay(100UL);
 8006860:	2064      	movs	r0, #100	; 0x64
 8006862:	f000 ff75 	bl	8007750 <HAL_Delay>
			--i;
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	3b01      	subs	r3, #1
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
		while (i && (gUart1RxReady != SET)) {
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <ubloxUartSpeedFast+0xc4>
 8006872:	4b52      	ldr	r3, [pc, #328]	; (80069bc <ubloxUartSpeedFast+0x204>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b01      	cmp	r3, #1
 800687a:	d1f1      	bne.n	8006860 <ubloxUartSpeedFast+0xa8>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800687c:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2bb5      	cmp	r3, #181	; 0xb5
 8006882:	f040 8081 	bne.w	8006988 <ubloxUartSpeedFast+0x1d0>
 8006886:	4b4e      	ldr	r3, [pc, #312]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b62      	cmp	r3, #98	; 0x62
 800688c:	d17c      	bne.n	8006988 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800688e:	4b4c      	ldr	r3, [pc, #304]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006890:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006892:	2b06      	cmp	r3, #6
 8006894:	d178      	bne.n	8006988 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006898:	78db      	ldrb	r3, [r3, #3]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d174      	bne.n	8006988 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800689e:	4b48      	ldr	r3, [pc, #288]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 80068a0:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80068a2:	2b14      	cmp	r3, #20
 80068a4:	d170      	bne.n	8006988 <ubloxUartSpeedFast+0x1d0>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80068a6:	4b46      	ldr	r3, [pc, #280]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 80068a8:	795b      	ldrb	r3, [r3, #5]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d16c      	bne.n	8006988 <ubloxUartSpeedFast+0x1d0>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80068ae:	2300      	movs	r3, #0
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
 80068b2:	e00c      	b.n	80068ce <ubloxUartSpeedFast+0x116>
				cfg_Port1_Set[i] = ublox_Response[i];
 80068b4:	4a42      	ldr	r2, [pc, #264]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	4413      	add	r3, r2
 80068ba:	7819      	ldrb	r1, [r3, #0]
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	4413      	add	r3, r2
 80068c4:	460a      	mov	r2, r1
 80068c6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	3301      	adds	r3, #1
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	2b1b      	cmp	r3, #27
 80068d2:	d9ef      	bls.n	80068b4 <ubloxUartSpeedFast+0xfc>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80068d4:	793b      	ldrb	r3, [r7, #4]
 80068d6:	75bb      	strb	r3, [r7, #22]
			cfg_Port1_Set[6 +  9] = buf[1];
 80068d8:	797b      	ldrb	r3, [r7, #5]
 80068da:	75fb      	strb	r3, [r7, #23]
			cfg_Port1_Set[6 + 10] = buf[2];
 80068dc:	79bb      	ldrb	r3, [r7, #6]
 80068de:	763b      	strb	r3, [r7, #24]
			cfg_Port1_Set[6 + 11] = buf[3];
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	767b      	strb	r3, [r7, #25]

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set), 1, 0, 0);
 80068e4:	f107 0008 	add.w	r0, r7, #8
 80068e8:	2300      	movs	r3, #0
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2300      	movs	r3, #0
 80068ee:	2201      	movs	r2, #1
 80068f0:	211c      	movs	r1, #28
 80068f2:	f7ff ff1b 	bl	800672c <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80068f6:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <ubloxUartSpeedFast+0x1fc>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80068fc:	f107 0308 	add.w	r3, r7, #8
 8006900:	221c      	movs	r2, #28
 8006902:	4619      	mov	r1, r3
 8006904:	482c      	ldr	r0, [pc, #176]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006906:	f007 ff83 	bl	800e810 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 800690a:	bf00      	nop
 800690c:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <ubloxUartSpeedFast+0x1fc>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d1fa      	bne.n	800690c <ubloxUartSpeedFast+0x154>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006916:	4828      	ldr	r0, [pc, #160]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006918:	f008 f83e 	bl	800e998 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 800691c:	4826      	ldr	r0, [pc, #152]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 800691e:	f007 ff3d 	bl	800e79c <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 8006922:	f7ff fed3 	bl	80066cc <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8006926:	4b25      	ldr	r3, [pc, #148]	; (80069bc <ubloxUartSpeedFast+0x204>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 800692c:	4822      	ldr	r0, [pc, #136]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 800692e:	f008 f8ab 	bl	800ea88 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006932:	4821      	ldr	r0, [pc, #132]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006934:	f008 fc72 	bl	800f21c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800693c:	4920      	ldr	r1, [pc, #128]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 800693e:	481e      	ldr	r0, [pc, #120]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 8006940:	f007 ffd4 	bl	800e8ec <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006944:	bf00      	nop
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <ubloxUartSpeedFast+0x204>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	d1fa      	bne.n	8006946 <ubloxUartSpeedFast+0x18e>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2bb5      	cmp	r3, #181	; 0xb5
 8006956:	d127      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
 8006958:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b62      	cmp	r3, #98	; 0x62
 800695e:	d123      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006962:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006964:	2b05      	cmp	r3, #5
 8006966:	d11f      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d11b      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006970:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006972:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006974:	2b02      	cmp	r3, #2
 8006976:	d117      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 800697a:	795b      	ldrb	r3, [r3, #5]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d113      	bne.n	80069a8 <ubloxUartSpeedFast+0x1f0>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <ubloxUartSpeedFast+0x208>)
 8006982:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006984:	2b06      	cmp	r3, #6
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100UL);
				}
#endif
			}
			return;
 8006986:	e00f      	b.n	80069a8 <ubloxUartSpeedFast+0x1f0>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200UL);
 8006988:	20c8      	movs	r0, #200	; 0xc8
 800698a:	f000 fee1 	bl	8007750 <HAL_Delay>
			--cnt;
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	3b01      	subs	r3, #1
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (cnt) {
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	2b00      	cmp	r3, #0
 8006998:	f47f af40 	bne.w	800681c <ubloxUartSpeedFast+0x64>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 800699c:	4806      	ldr	r0, [pc, #24]	; (80069b8 <ubloxUartSpeedFast+0x200>)
 800699e:	f007 fefd 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80069a2:	f7ff fe93 	bl	80066cc <MX_USART1_UART_Init_38400baud>
 80069a6:	e000      	b.n	80069aa <ubloxUartSpeedFast+0x1f2>
			return;
 80069a8:	bf00      	nop
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
		HAL_Delay(100UL);
	}
#endif
}
 80069aa:	3740      	adds	r7, #64	; 0x40
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	08014344 	.word	0x08014344
 80069b4:	200034c8 	.word	0x200034c8
 80069b8:	2000564c 	.word	0x2000564c
 80069bc:	200034c9 	.word	0x200034c9
 80069c0:	2000364c 	.word	0x2000364c

080069c4 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b094      	sub	sp, #80	; 0x50
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	4603      	mov	r3, r0
 80069cc:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	f107 0318 	add.w	r3, r7, #24
 80069d6:	2224      	movs	r2, #36	; 0x24
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f009 fc32 	bl	8010244 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80069e0:	88fb      	ldrh	r3, [r7, #6]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	743b      	strb	r3, [r7, #16]
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	747b      	strb	r3, [r7, #17]
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 80069f0:	2300      	movs	r3, #0
 80069f2:	74bb      	strb	r3, [r7, #18]
	buf[3] = (frequency & 0xff000000UL) >> 24;
 80069f4:	2300      	movs	r3, #0
 80069f6:	74fb      	strb	r3, [r7, #19]

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 80069f8:	4a91      	ldr	r2, [pc, #580]	; (8006c40 <ubloxSetFrequency+0x27c>)
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a02:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req), 1, 0, 0);
 8006a06:	f107 0008 	add.w	r0, r7, #8
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2201      	movs	r2, #1
 8006a12:	2108      	movs	r1, #8
 8006a14:	f7ff fe8a 	bl	800672c <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while (tryCtr) {
 8006a1e:	e104      	b.n	8006c2a <ubloxSetFrequency+0x266>
			HAL_Delay(100);
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8006a20:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <ubloxSetFrequency+0x280>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8006a26:	4888      	ldr	r0, [pc, #544]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006a28:	f008 f82e 	bl	800ea88 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 8006a2c:	4886      	ldr	r0, [pc, #536]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006a2e:	f008 fbf5 	bl	800f21c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a36:	4985      	ldr	r1, [pc, #532]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006a38:	4883      	ldr	r0, [pc, #524]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006a3a:	f007 ff57 	bl	800e8ec <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8006a3e:	4b84      	ldr	r3, [pc, #528]	; (8006c50 <ubloxSetFrequency+0x28c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	2208      	movs	r2, #8
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	487e      	ldr	r0, [pc, #504]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006a4e:	f007 fedf 	bl	800e810 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8006a52:	bf00      	nop
 8006a54:	4b7e      	ldr	r3, [pc, #504]	; (8006c50 <ubloxSetFrequency+0x28c>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d1fa      	bne.n	8006a54 <ubloxSetFrequency+0x90>
		}

		/* Wait for the response */
		int i = 11;
 8006a5e:	230b      	movs	r3, #11
 8006a60:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 8006a62:	e005      	b.n	8006a70 <ubloxSetFrequency+0xac>
			HAL_Delay(100UL);
 8006a64:	2064      	movs	r0, #100	; 0x64
 8006a66:	f000 fe73 	bl	8007750 <HAL_Delay>
			--i;
 8006a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40
		while (i && (gUart1RxReady != SET)) {
 8006a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <ubloxSetFrequency+0xbc>
 8006a76:	4b73      	ldr	r3, [pc, #460]	; (8006c44 <ubloxSetFrequency+0x280>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d1f1      	bne.n	8006a64 <ubloxSetFrequency+0xa0>
			HAL_Delay(100);
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006a80:	4b72      	ldr	r3, [pc, #456]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2bb5      	cmp	r3, #181	; 0xb5
 8006a86:	f040 80c7 	bne.w	8006c18 <ubloxSetFrequency+0x254>
 8006a8a:	4b70      	ldr	r3, [pc, #448]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b62      	cmp	r3, #98	; 0x62
 8006a90:	f040 80c2 	bne.w	8006c18 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006a94:	4b6d      	ldr	r3, [pc, #436]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006a96:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	f040 80bd 	bne.w	8006c18 <ubloxSetFrequency+0x254>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8006a9e:	4b6b      	ldr	r3, [pc, #428]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006aa0:	78db      	ldrb	r3, [r3, #3]
 8006aa2:	2b31      	cmp	r3, #49	; 0x31
 8006aa4:	f040 80b8 	bne.w	8006c18 <ubloxSetFrequency+0x254>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aac:	e00c      	b.n	8006ac8 <ubloxSetFrequency+0x104>
				cfg_tp5_Set[i] = ublox_Response[i];
 8006aae:	4a67      	ldr	r2, [pc, #412]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	4413      	add	r3, r2
 8006ab4:	7819      	ldrb	r1, [r3, #0]
 8006ab6:	f107 0214 	add.w	r2, r7, #20
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	4413      	add	r3, r2
 8006abe:	460a      	mov	r2, r1
 8006ac0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	2b27      	cmp	r3, #39	; 0x27
 8006acc:	d9ef      	bls.n	8006aae <ubloxSetFrequency+0xea>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8006ace:	7c3b      	ldrb	r3, [r7, #16]
 8006ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cfg_tp5_Set[6 +  9] = buf[1];
 8006ad4:	7c7b      	ldrb	r3, [r7, #17]
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cfg_tp5_Set[6 + 10] = buf[2];
 8006ada:	7cbb      	ldrb	r3, [r7, #18]
 8006adc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			cfg_tp5_Set[6 + 11] = buf[3];
 8006ae0:	7cfb      	ldrb	r3, [r7, #19]
 8006ae2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8006ae6:	7c3b      	ldrb	r3, [r7, #16]
 8006ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			cfg_tp5_Set[6 + 13] = buf[1];
 8006aec:	7c7b      	ldrb	r3, [r7, #17]
 8006aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			cfg_tp5_Set[6 + 14] = buf[2];
 8006af2:	7cbb      	ldrb	r3, [r7, #18]
 8006af4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			cfg_tp5_Set[6 + 15] = buf[3];
 8006af8:	7cfb      	ldrb	r3, [r7, #19]
 8006afa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			if (frequency > 1) {
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d918      	bls.n	8006b36 <ubloxSetFrequency+0x172>
				/* Fill in 50% ratio when not Locked */
				cfg_tp5_Set[6 + 16] = 0x00;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x00;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x00;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x80;
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 50% ratio when Locked */
				cfg_tp5_Set[6 + 20] = 0x00;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x00;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x00;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x80;
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006b34:	e017      	b.n	8006b66 <ubloxSetFrequency+0x1a2>
			}
			else {
				/* Fill in 10% ratio == 100ms when not Locked */
				cfg_tp5_Set[6 + 16] = 0x99;
 8006b36:	2399      	movs	r3, #153	; 0x99
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cfg_tp5_Set[6 + 17] = 0x99;
 8006b3c:	2399      	movs	r3, #153	; 0x99
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				cfg_tp5_Set[6 + 18] = 0x99;
 8006b42:	2399      	movs	r3, #153	; 0x99
 8006b44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				cfg_tp5_Set[6 + 19] = 0x19;
 8006b48:	2319      	movs	r3, #25
 8006b4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				/* Fill in 10% ratio == 100ms when Locked */
				cfg_tp5_Set[6 + 20] = 0x99;
 8006b4e:	2399      	movs	r3, #153	; 0x99
 8006b50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				cfg_tp5_Set[6 + 21] = 0x99;
 8006b54:	2399      	movs	r3, #153	; 0x99
 8006b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cfg_tp5_Set[6 + 22] = 0x99;
 8006b5a:	2399      	movs	r3, #153	; 0x99
 8006b5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cfg_tp5_Set[6 + 23] = 0x19;
 8006b60:	2319      	movs	r3, #25
 8006b62:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8006b66:	23cf      	movs	r3, #207	; 0xcf
 8006b68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set), 1, 0, 0);
 8006b6c:	f107 0014 	add.w	r0, r7, #20
 8006b70:	2300      	movs	r3, #0
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	2201      	movs	r2, #1
 8006b78:	2128      	movs	r1, #40	; 0x28
 8006b7a:	f7ff fdd7 	bl	800672c <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <ubloxSetFrequency+0x28c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8006b84:	4830      	ldr	r0, [pc, #192]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006b86:	f007 ff07 	bl	800e998 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	2228      	movs	r2, #40	; 0x28
 8006b90:	4619      	mov	r1, r3
 8006b92:	482d      	ldr	r0, [pc, #180]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006b94:	f007 fe3c 	bl	800e810 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8006b98:	bf00      	nop
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <ubloxSetFrequency+0x28c>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d1fa      	bne.n	8006b9a <ubloxSetFrequency+0x1d6>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8006ba4:	4828      	ldr	r0, [pc, #160]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006ba6:	f007 fef7 	bl	800e998 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8006baa:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <ubloxSetFrequency+0x280>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8006bb0:	4825      	ldr	r0, [pc, #148]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006bb2:	f008 fb33 	bl	800f21c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bba:	4924      	ldr	r1, [pc, #144]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bbc:	4822      	ldr	r0, [pc, #136]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006bbe:	f007 fe95 	bl	800e8ec <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8006bc2:	bf00      	nop
 8006bc4:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <ubloxSetFrequency+0x280>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d1fa      	bne.n	8006bc4 <ubloxSetFrequency+0x200>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8006bce:	481e      	ldr	r0, [pc, #120]	; (8006c48 <ubloxSetFrequency+0x284>)
 8006bd0:	f007 ff5a 	bl	800ea88 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2bb5      	cmp	r3, #181	; 0xb5
 8006bda:	d11d      	bne.n	8006c18 <ubloxSetFrequency+0x254>
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b62      	cmp	r3, #98	; 0x62
 8006be2:	d119      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006be4:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006be6:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d115      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006bec:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bee:	78db      	ldrb	r3, [r3, #3]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d111      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006bf4:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bf6:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d10d      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006bfc:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006bfe:	795b      	ldrb	r3, [r3, #5]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006c04:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006c06:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8006c08:	2b06      	cmp	r3, #6
 8006c0a:	d105      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <ubloxSetFrequency+0x288>)
 8006c0e:	79db      	ldrb	r3, [r3, #7]
 8006c10:	2b31      	cmp	r3, #49	; 0x31
 8006c12:	d101      	bne.n	8006c18 <ubloxSetFrequency+0x254>
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
					HAL_Delay(100);
				}
#endif
				return 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e00e      	b.n	8006c36 <ubloxSetFrequency+0x272>
			HAL_Delay(100);
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8006c18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		HAL_Delay(1500UL);
 8006c22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006c26:	f000 fd93 	bl	8007750 <HAL_Delay>
	while (tryCtr) {
 8006c2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f47f aef6 	bne.w	8006a20 <ubloxSetFrequency+0x5c>
	}

	return 1;
 8006c34:	2301      	movs	r3, #1
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3748      	adds	r7, #72	; 0x48
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	08014350 	.word	0x08014350
 8006c44:	200034c9 	.word	0x200034c9
 8006c48:	2000564c 	.word	0x2000564c
 8006c4c:	2000364c 	.word	0x2000364c
 8006c50:	200034c8 	.word	0x200034c8

08006c54 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0ac      	sub	sp, #176	; 0xb0
 8006c58:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <ubloxMsgsTurnOff+0x40>)
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4611      	mov	r1, r2
 8006c60:	22af      	movs	r2, #175	; 0xaf
 8006c62:	4618      	mov	r0, r3
 8006c64:	f009 fae0 	bl	8010228 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <ubloxMsgsTurnOff+0x44>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8006c6e:	463b      	mov	r3, r7
 8006c70:	22af      	movs	r2, #175	; 0xaf
 8006c72:	4619      	mov	r1, r3
 8006c74:	4809      	ldr	r0, [pc, #36]	; (8006c9c <ubloxMsgsTurnOff+0x48>)
 8006c76:	f007 fdcb 	bl	800e810 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006c7a:	bf00      	nop
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <ubloxMsgsTurnOff+0x44>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d1fa      	bne.n	8006c7c <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8006c86:	4805      	ldr	r0, [pc, #20]	; (8006c9c <ubloxMsgsTurnOff+0x48>)
 8006c88:	f007 fe86 	bl	800e998 <HAL_UART_AbortTransmit_IT>
}
 8006c8c:	bf00      	nop
 8006c8e:	37b0      	adds	r7, #176	; 0xb0
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	08014358 	.word	0x08014358
 8006c98:	200034c8 	.word	0x200034c8
 8006c9c:	2000564c 	.word	0x2000564c

08006ca0 <ublox_NavPosllh_req>:

void ublox_NavPosllh_req(UbloxNavPosllh_t* ubloxNavPosllh)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
	uint8_t nav_Posllh_Req[] 		= {
 8006ca8:	4a17      	ldr	r2, [pc, #92]	; (8006d08 <ublox_NavPosllh_req+0x68>)
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cb2:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x02,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Posllh_Req, sizeof(nav_Posllh_Req), 1, 0, 0);
 8006cb6:	f107 0008 	add.w	r0, r7, #8
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	2108      	movs	r1, #8
 8006cc4:	f7ff fd32 	bl	800672c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavPosllh) {
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d018      	beq.n	8006d00 <ublox_NavPosllh_req+0x60>
		gUbloxNavPosllh_resp = ubloxNavPosllh;
 8006cce:	4a0f      	ldr	r2, [pc, #60]	; (8006d0c <ublox_NavPosllh_req+0x6c>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006cd4:	480e      	ldr	r0, [pc, #56]	; (8006d10 <ublox_NavPosllh_req+0x70>)
 8006cd6:	f007 fd61 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006cda:	f7ff fcf7 	bl	80066cc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-POSLLH request */
	gUart1TxReady = RESET;
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <ublox_NavPosllh_req+0x74>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Posllh_Req, sizeof(nav_Posllh_Req));
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	2208      	movs	r2, #8
 8006cea:	4619      	mov	r1, r3
 8006cec:	4808      	ldr	r0, [pc, #32]	; (8006d10 <ublox_NavPosllh_req+0x70>)
 8006cee:	f007 fd8f 	bl	800e810 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006cf2:	bf00      	nop
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <ublox_NavPosllh_req+0x74>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d1fa      	bne.n	8006cf4 <ublox_NavPosllh_req+0x54>
 8006cfe:	e000      	b.n	8006d02 <ublox_NavPosllh_req+0x62>
		return;
 8006d00:	bf00      	nop
	}
}
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	08014408 	.word	0x08014408
 8006d0c:	2000363c 	.word	0x2000363c
 8006d10:	2000564c 	.word	0x2000564c
 8006d14:	200034c8 	.word	0x200034c8

08006d18 <ublox_NavClock_req>:

void ublox_NavClock_req(UbloxNavClock_t* ubloxNavClock)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8006d20:	4a17      	ldr	r2, [pc, #92]	; (8006d80 <ublox_NavClock_req+0x68>)
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d2a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req), 1, 0, 0);
 8006d2e:	f107 0008 	add.w	r0, r7, #8
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	2300      	movs	r3, #0
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2108      	movs	r1, #8
 8006d3c:	f7ff fcf6 	bl	800672c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavClock) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d018      	beq.n	8006d78 <ublox_NavClock_req+0x60>
		gUbloxNavClock_resp = ubloxNavClock;
 8006d46:	4a0f      	ldr	r2, [pc, #60]	; (8006d84 <ublox_NavClock_req+0x6c>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006d4c:	480e      	ldr	r0, [pc, #56]	; (8006d88 <ublox_NavClock_req+0x70>)
 8006d4e:	f007 fd25 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006d52:	f7ff fcbb 	bl	80066cc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <ublox_NavClock_req+0x74>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8006d5c:	f107 0308 	add.w	r3, r7, #8
 8006d60:	2208      	movs	r2, #8
 8006d62:	4619      	mov	r1, r3
 8006d64:	4808      	ldr	r0, [pc, #32]	; (8006d88 <ublox_NavClock_req+0x70>)
 8006d66:	f007 fd53 	bl	800e810 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006d6a:	bf00      	nop
 8006d6c:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <ublox_NavClock_req+0x74>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d1fa      	bne.n	8006d6c <ublox_NavClock_req+0x54>
 8006d76:	e000      	b.n	8006d7a <ublox_NavClock_req+0x62>
		return;
 8006d78:	bf00      	nop
	}
}
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	08014410 	.word	0x08014410
 8006d84:	20003640 	.word	0x20003640
 8006d88:	2000564c 	.word	0x2000564c
 8006d8c:	200034c8 	.word	0x200034c8

08006d90 <ublox_NavDop_req>:

void ublox_NavDop_req(UbloxNavDop_t* ubloxNavDop)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <ublox_NavDop_req+0x68>)
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006da2:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req), 1, 0, 0);
 8006da6:	f107 0008 	add.w	r0, r7, #8
 8006daa:	2300      	movs	r3, #0
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2300      	movs	r3, #0
 8006db0:	2201      	movs	r2, #1
 8006db2:	2108      	movs	r1, #8
 8006db4:	f7ff fcba 	bl	800672c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavDop) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <ublox_NavDop_req+0x60>
		gUbloxNavDop_resp = ubloxNavDop;
 8006dbe:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <ublox_NavDop_req+0x6c>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006dc4:	480e      	ldr	r0, [pc, #56]	; (8006e00 <ublox_NavDop_req+0x70>)
 8006dc6:	f007 fce9 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006dca:	f7ff fc7f 	bl	80066cc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <ublox_NavDop_req+0x74>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4808      	ldr	r0, [pc, #32]	; (8006e00 <ublox_NavDop_req+0x70>)
 8006dde:	f007 fd17 	bl	800e810 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006de2:	bf00      	nop
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <ublox_NavDop_req+0x74>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d1fa      	bne.n	8006de4 <ublox_NavDop_req+0x54>
 8006dee:	e000      	b.n	8006df2 <ublox_NavDop_req+0x62>
		return;
 8006df0:	bf00      	nop
	}
}
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	08014418 	.word	0x08014418
 8006dfc:	20003644 	.word	0x20003644
 8006e00:	2000564c 	.word	0x2000564c
 8006e04:	200034c8 	.word	0x200034c8

08006e08 <ublox_NavSvinfo_req>:

void ublox_NavSvinfo_req(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8006e10:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <ublox_NavSvinfo_req+0x68>)
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e1a:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req), 1, 0, 0);
 8006e1e:	f107 0008 	add.w	r0, r7, #8
 8006e22:	2300      	movs	r3, #0
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	2201      	movs	r2, #1
 8006e2a:	2108      	movs	r1, #8
 8006e2c:	f7ff fc7e 	bl	800672c <calcChecksumRFC1145>

	/* Target assignment */
	if (ubloxNavSvinfo) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d018      	beq.n	8006e68 <ublox_NavSvinfo_req+0x60>
		gUbloxNavSvinfo_resp = ubloxNavSvinfo;
 8006e36:	4a0f      	ldr	r2, [pc, #60]	; (8006e74 <ublox_NavSvinfo_req+0x6c>)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6013      	str	r3, [r2, #0]
	}
#endif

#if 1
	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006e3c:	480e      	ldr	r0, [pc, #56]	; (8006e78 <ublox_NavSvinfo_req+0x70>)
 8006e3e:	f007 fcad 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006e42:	f7ff fc43 	bl	80066cc <MX_USART1_UART_Init_38400baud>
#endif

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8006e46:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <ublox_NavSvinfo_req+0x74>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	2208      	movs	r2, #8
 8006e52:	4619      	mov	r1, r3
 8006e54:	4808      	ldr	r0, [pc, #32]	; (8006e78 <ublox_NavSvinfo_req+0x70>)
 8006e56:	f007 fcdb 	bl	800e810 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8006e5a:	bf00      	nop
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <ublox_NavSvinfo_req+0x74>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d1fa      	bne.n	8006e5c <ublox_NavSvinfo_req+0x54>
 8006e66:	e000      	b.n	8006e6a <ublox_NavSvinfo_req+0x62>
		return;
 8006e68:	bf00      	nop
	}
}
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	08014420 	.word	0x08014420
 8006e74:	20003648 	.word	0x20003648
 8006e78:	2000564c 	.word	0x2000564c
 8006e7c:	200034c8 	.word	0x200034c8

08006e80 <ublox_All_resp>:


uint32_t ublox_All_resp(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	; 0x30
 8006e84:	af02      	add	r7, sp, #8
	uint32_t bf = 0UL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t dataIdx, dataCnt;

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8006e8a:	4859      	ldr	r0, [pc, #356]	; (8006ff0 <ublox_All_resp+0x170>)
 8006e8c:	f007 fc86 	bl	800e79c <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8006e90:	f7ff fc1c 	bl	80066cc <MX_USART1_UART_Init_38400baud>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8006e94:	4856      	ldr	r0, [pc, #344]	; (8006ff0 <ublox_All_resp+0x170>)
 8006e96:	f008 f9c1 	bl	800f21c <HAL_UART_EnableReceiverTimeout>

	do {
		/* Wait for the response */
		gUart1RxReady = RESET;
 8006e9a:	4b56      	ldr	r3, [pc, #344]	; (8006ff4 <ublox_All_resp+0x174>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8006ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ea4:	4954      	ldr	r1, [pc, #336]	; (8006ff8 <ublox_All_resp+0x178>)
 8006ea6:	4852      	ldr	r0, [pc, #328]	; (8006ff0 <ublox_All_resp+0x170>)
 8006ea8:	f007 fd20 	bl	800e8ec <HAL_UART_Receive_IT>

	    uint8_t cnt = 100;
 8006eac:	2364      	movs	r3, #100	; 0x64
 8006eae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006eb2:	e007      	b.n	8006ec4 <ublox_All_resp+0x44>
			HAL_Delay(10UL);
 8006eb4:	200a      	movs	r0, #10
 8006eb6:	f000 fc4b 	bl	8007750 <HAL_Delay>
			--cnt;
 8006eba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while (cnt && (gUart1RxReady != SET)) {
 8006ec4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <ublox_All_resp+0x56>
 8006ecc:	4b49      	ldr	r3, [pc, #292]	; (8006ff4 <ublox_All_resp+0x174>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d1ee      	bne.n	8006eb4 <ublox_All_resp+0x34>
		}

		if (gUart1RxCnt) {
 8006ed6:	4b49      	ldr	r3, [pc, #292]	; (8006ffc <ublox_All_resp+0x17c>)
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0dc      	beq.n	8006e9a <ublox_All_resp+0x1a>
			dataIdx		= 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	847b      	strh	r3, [r7, #34]	; 0x22
			dataCnt 	= gUart1RxCnt;
 8006ee4:	4b45      	ldr	r3, [pc, #276]	; (8006ffc <ublox_All_resp+0x17c>)
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	827b      	strh	r3, [r7, #18]
			break;
 8006eea:	bf00      	nop
		}
	} while (1);

	/* Processing data */
	while (dataIdx < (dataCnt - 8)) {
 8006eec:	e3b4      	b.n	8007658 <ublox_All_resp+0x7d8>
		uint8_t  sig0 	= ublox_Response[dataIdx + 0];
 8006eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ef0:	4a41      	ldr	r2, [pc, #260]	; (8006ff8 <ublox_All_resp+0x178>)
 8006ef2:	5cd3      	ldrb	r3, [r2, r3]
 8006ef4:	747b      	strb	r3, [r7, #17]
		uint8_t  sig1 	= ublox_Response[dataIdx + 1];
 8006ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ef8:	3301      	adds	r3, #1
 8006efa:	4a3f      	ldr	r2, [pc, #252]	; (8006ff8 <ublox_All_resp+0x178>)
 8006efc:	5cd3      	ldrb	r3, [r2, r3]
 8006efe:	743b      	strb	r3, [r7, #16]

		/* Out of sync */
		if (sig0 != 0xb5 || sig1 != 0x62) {
 8006f00:	7c7b      	ldrb	r3, [r7, #17]
 8006f02:	2bb5      	cmp	r3, #181	; 0xb5
 8006f04:	d102      	bne.n	8006f0c <ublox_All_resp+0x8c>
 8006f06:	7c3b      	ldrb	r3, [r7, #16]
 8006f08:	2b62      	cmp	r3, #98	; 0x62
 8006f0a:	d003      	beq.n	8006f14 <ublox_All_resp+0x94>
			dataIdx++;
 8006f0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f0e:	3301      	adds	r3, #1
 8006f10:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 8006f12:	e3a1      	b.n	8007658 <ublox_All_resp+0x7d8>
		}

		uint8_t  cls  	= ublox_Response[dataIdx + 2];
 8006f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f16:	3302      	adds	r3, #2
 8006f18:	4a37      	ldr	r2, [pc, #220]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	73fb      	strb	r3, [r7, #15]
		uint8_t  id  	= ublox_Response[dataIdx + 3];
 8006f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f20:	3303      	adds	r3, #3
 8006f22:	4a35      	ldr	r2, [pc, #212]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f24:	5cd3      	ldrb	r3, [r2, r3]
 8006f26:	73bb      	strb	r3, [r7, #14]
		uint16_t len 	= ublox_Response[dataIdx + 4] | ((uint16_t)ublox_Response[dataIdx + 5] << 8);	// Little endian
 8006f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4a32      	ldr	r2, [pc, #200]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	b21a      	sxth	r2, r3
 8006f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f34:	3305      	adds	r3, #5
 8006f36:	4930      	ldr	r1, [pc, #192]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f38:	5ccb      	ldrb	r3, [r1, r3]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	b21b      	sxth	r3, r3
 8006f42:	81bb      	strh	r3, [r7, #12]

		/* Check out of bounds */
		if ((dataIdx + 6 + len + 2) > dataCnt) {
 8006f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f46:	1d9a      	adds	r2, r3, #6
 8006f48:	89bb      	ldrh	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	8a7b      	ldrh	r3, [r7, #18]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	f280 8388 	bge.w	8007666 <ublox_All_resp+0x7e6>
			break;
		}

		uint8_t  ckA	= ublox_Response[dataIdx + len + 6];
 8006f56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006f58:	89bb      	ldrh	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3306      	adds	r3, #6
 8006f5e:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f60:	5cd3      	ldrb	r3, [r2, r3]
 8006f62:	72fb      	strb	r3, [r7, #11]
		uint8_t  ckB	= ublox_Response[dataIdx + len + 7];
 8006f64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006f66:	89bb      	ldrh	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	3307      	adds	r3, #7
 8006f6c:	4a22      	ldr	r2, [pc, #136]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f6e:	5cd3      	ldrb	r3, [r2, r3]
 8006f70:	72bb      	strb	r3, [r7, #10]

		/* Checksum A and B */
		uint8_t ckA_calc = 0U, ckB_calc = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	71fb      	strb	r3, [r7, #7]
 8006f76:	2300      	movs	r3, #0
 8006f78:	71bb      	strb	r3, [r7, #6]
		calcChecksumRFC1145((ublox_Response + dataIdx), (6 + len + 2), 0, &ckA_calc, &ckB_calc);
 8006f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <ublox_All_resp+0x178>)
 8006f7e:	1898      	adds	r0, r3, r2
 8006f80:	89bb      	ldrh	r3, [r7, #12]
 8006f82:	3308      	adds	r3, #8
 8006f84:	b299      	uxth	r1, r3
 8006f86:	1dfa      	adds	r2, r7, #7
 8006f88:	1dbb      	adds	r3, r7, #6
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f7ff fbcc 	bl	800672c <calcChecksumRFC1145>
		if (ckA != ckA_calc || ckB != ckB_calc) {
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	7afa      	ldrb	r2, [r7, #11]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d103      	bne.n	8006fa4 <ublox_All_resp+0x124>
 8006f9c:	79bb      	ldrb	r3, [r7, #6]
 8006f9e:	7aba      	ldrb	r2, [r7, #10]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d003      	beq.n	8006fac <ublox_All_resp+0x12c>
			dataIdx++;
 8006fa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	847b      	strh	r3, [r7, #34]	; 0x22
			continue;
 8006faa:	e355      	b.n	8007658 <ublox_All_resp+0x7d8>
		}


		uint16_t clsID	= ((int16_t)cls << 8) | id;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	b21a      	sxth	r2, r3
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	813b      	strh	r3, [r7, #8]
		switch (clsID)
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006fc2:	f000 8218 	beq.w	80073f6 <ublox_All_resp+0x576>
 8006fc6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006fca:	f300 833f 	bgt.w	800764c <ublox_All_resp+0x7cc>
 8006fce:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006fd2:	f000 817e 	beq.w	80072d2 <ublox_All_resp+0x452>
 8006fd6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006fda:	f300 8337 	bgt.w	800764c <ublox_All_resp+0x7cc>
 8006fde:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006fe2:	d00d      	beq.n	8007000 <ublox_All_resp+0x180>
 8006fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe8:	f000 80d8 	beq.w	800719c <ublox_All_resp+0x31c>
 8006fec:	e32e      	b.n	800764c <ublox_All_resp+0x7cc>
 8006fee:	bf00      	nop
 8006ff0:	2000564c 	.word	0x2000564c
 8006ff4:	200034c9 	.word	0x200034c9
 8006ff8:	2000364c 	.word	0x2000364c
 8006ffc:	200034ca 	.word	0x200034ca
		{
		case 0x0102:
		{
			/* NavPosllh */
			if (len == 0x001c) {
 8007000:	89bb      	ldrh	r3, [r7, #12]
 8007002:	2b1c      	cmp	r3, #28
 8007004:	f040 831d 	bne.w	8007642 <ublox_All_resp+0x7c2>
				gUbloxNavPosllh_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 8007008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800700a:	3306      	adds	r3, #6
 800700c:	4a61      	ldr	r2, [pc, #388]	; (8007194 <ublox_All_resp+0x314>)
 800700e:	5cd3      	ldrb	r3, [r2, r3]
 8007010:	4619      	mov	r1, r3
 8007012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007014:	3307      	adds	r3, #7
 8007016:	4a5f      	ldr	r2, [pc, #380]	; (8007194 <ublox_All_resp+0x314>)
 8007018:	5cd3      	ldrb	r3, [r2, r3]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	ea41 0203 	orr.w	r2, r1, r3
 8007020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007022:	3308      	adds	r3, #8
 8007024:	495b      	ldr	r1, [pc, #364]	; (8007194 <ublox_All_resp+0x314>)
 8007026:	5ccb      	ldrb	r3, [r1, r3]
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	431a      	orrs	r2, r3
 800702c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800702e:	3309      	adds	r3, #9
 8007030:	4958      	ldr	r1, [pc, #352]	; (8007194 <ublox_All_resp+0x314>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	431a      	orrs	r2, r3
 8007038:	4b57      	ldr	r3, [pc, #348]	; (8007198 <ublox_All_resp+0x318>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	601a      	str	r2, [r3, #0]
				gUbloxNavPosllh_resp->lon		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24);
 800703e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007040:	330a      	adds	r3, #10
 8007042:	4a54      	ldr	r2, [pc, #336]	; (8007194 <ublox_All_resp+0x314>)
 8007044:	5cd3      	ldrb	r3, [r2, r3]
 8007046:	4619      	mov	r1, r3
 8007048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800704a:	330b      	adds	r3, #11
 800704c:	4a51      	ldr	r2, [pc, #324]	; (8007194 <ublox_All_resp+0x314>)
 800704e:	5cd3      	ldrb	r3, [r2, r3]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	ea41 0203 	orr.w	r2, r1, r3
 8007056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007058:	330c      	adds	r3, #12
 800705a:	494e      	ldr	r1, [pc, #312]	; (8007194 <ublox_All_resp+0x314>)
 800705c:	5ccb      	ldrb	r3, [r1, r3]
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	ea42 0103 	orr.w	r1, r2, r3
 8007064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007066:	330d      	adds	r3, #13
 8007068:	4a4a      	ldr	r2, [pc, #296]	; (8007194 <ublox_All_resp+0x314>)
 800706a:	5cd3      	ldrb	r3, [r2, r3]
 800706c:	061a      	lsls	r2, r3, #24
 800706e:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <ublox_All_resp+0x318>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
				gUbloxNavPosllh_resp->lat		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24);
 8007076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007078:	330e      	adds	r3, #14
 800707a:	4a46      	ldr	r2, [pc, #280]	; (8007194 <ublox_All_resp+0x314>)
 800707c:	5cd3      	ldrb	r3, [r2, r3]
 800707e:	4619      	mov	r1, r3
 8007080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007082:	330f      	adds	r3, #15
 8007084:	4a43      	ldr	r2, [pc, #268]	; (8007194 <ublox_All_resp+0x314>)
 8007086:	5cd3      	ldrb	r3, [r2, r3]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	ea41 0203 	orr.w	r2, r1, r3
 800708e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007090:	3310      	adds	r3, #16
 8007092:	4940      	ldr	r1, [pc, #256]	; (8007194 <ublox_All_resp+0x314>)
 8007094:	5ccb      	ldrb	r3, [r1, r3]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	ea42 0103 	orr.w	r1, r2, r3
 800709c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800709e:	3311      	adds	r3, #17
 80070a0:	4a3c      	ldr	r2, [pc, #240]	; (8007194 <ublox_All_resp+0x314>)
 80070a2:	5cd3      	ldrb	r3, [r2, r3]
 80070a4:	061a      	lsls	r2, r3, #24
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <ublox_All_resp+0x318>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	609a      	str	r2, [r3, #8]
				gUbloxNavPosllh_resp->height	= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 80070ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070b0:	3312      	adds	r3, #18
 80070b2:	4a38      	ldr	r2, [pc, #224]	; (8007194 <ublox_All_resp+0x314>)
 80070b4:	5cd3      	ldrb	r3, [r2, r3]
 80070b6:	4619      	mov	r1, r3
 80070b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070ba:	3313      	adds	r3, #19
 80070bc:	4a35      	ldr	r2, [pc, #212]	; (8007194 <ublox_All_resp+0x314>)
 80070be:	5cd3      	ldrb	r3, [r2, r3]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	ea41 0203 	orr.w	r2, r1, r3
 80070c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070c8:	3314      	adds	r3, #20
 80070ca:	4932      	ldr	r1, [pc, #200]	; (8007194 <ublox_All_resp+0x314>)
 80070cc:	5ccb      	ldrb	r3, [r1, r3]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	ea42 0103 	orr.w	r1, r2, r3
 80070d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070d6:	3315      	adds	r3, #21
 80070d8:	4a2e      	ldr	r2, [pc, #184]	; (8007194 <ublox_All_resp+0x314>)
 80070da:	5cd3      	ldrb	r3, [r2, r3]
 80070dc:	061a      	lsls	r2, r3, #24
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <ublox_All_resp+0x318>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	60da      	str	r2, [r3, #12]
				gUbloxNavPosllh_resp->hMSL		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80070e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070e8:	3316      	adds	r3, #22
 80070ea:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <ublox_All_resp+0x314>)
 80070ec:	5cd3      	ldrb	r3, [r2, r3]
 80070ee:	4619      	mov	r1, r3
 80070f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070f2:	3317      	adds	r3, #23
 80070f4:	4a27      	ldr	r2, [pc, #156]	; (8007194 <ublox_All_resp+0x314>)
 80070f6:	5cd3      	ldrb	r3, [r2, r3]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	ea41 0203 	orr.w	r2, r1, r3
 80070fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007100:	3318      	adds	r3, #24
 8007102:	4924      	ldr	r1, [pc, #144]	; (8007194 <ublox_All_resp+0x314>)
 8007104:	5ccb      	ldrb	r3, [r1, r3]
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	ea42 0103 	orr.w	r1, r2, r3
 800710c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800710e:	3319      	adds	r3, #25
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <ublox_All_resp+0x314>)
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	061a      	lsls	r2, r3, #24
 8007116:	4b20      	ldr	r3, [pc, #128]	; (8007198 <ublox_All_resp+0x318>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	611a      	str	r2, [r3, #16]
				gUbloxNavPosllh_resp->hAcc		= ublox_Response[dataIdx + 6 + 20] | (ublox_Response[dataIdx + 6 + 21] << 8) | (ublox_Response[dataIdx + 6 + 22] << 16) | (ublox_Response[dataIdx + 6 + 23] << 24);
 800711e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007120:	331a      	adds	r3, #26
 8007122:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <ublox_All_resp+0x314>)
 8007124:	5cd3      	ldrb	r3, [r2, r3]
 8007126:	4619      	mov	r1, r3
 8007128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800712a:	331b      	adds	r3, #27
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <ublox_All_resp+0x314>)
 800712e:	5cd3      	ldrb	r3, [r2, r3]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	ea41 0203 	orr.w	r2, r1, r3
 8007136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007138:	331c      	adds	r3, #28
 800713a:	4916      	ldr	r1, [pc, #88]	; (8007194 <ublox_All_resp+0x314>)
 800713c:	5ccb      	ldrb	r3, [r1, r3]
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	431a      	orrs	r2, r3
 8007142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007144:	331d      	adds	r3, #29
 8007146:	4913      	ldr	r1, [pc, #76]	; (8007194 <ublox_All_resp+0x314>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	431a      	orrs	r2, r3
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <ublox_All_resp+0x318>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	615a      	str	r2, [r3, #20]
				gUbloxNavPosllh_resp->vAcc		= ublox_Response[dataIdx + 6 + 24] | (ublox_Response[dataIdx + 6 + 25] << 8) | (ublox_Response[dataIdx + 6 + 26] << 16) | (ublox_Response[dataIdx + 6 + 27] << 24);
 8007154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007156:	331e      	adds	r3, #30
 8007158:	4a0e      	ldr	r2, [pc, #56]	; (8007194 <ublox_All_resp+0x314>)
 800715a:	5cd3      	ldrb	r3, [r2, r3]
 800715c:	4619      	mov	r1, r3
 800715e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007160:	331f      	adds	r3, #31
 8007162:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <ublox_All_resp+0x314>)
 8007164:	5cd3      	ldrb	r3, [r2, r3]
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	ea41 0203 	orr.w	r2, r1, r3
 800716c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800716e:	3320      	adds	r3, #32
 8007170:	4908      	ldr	r1, [pc, #32]	; (8007194 <ublox_All_resp+0x314>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	431a      	orrs	r2, r3
 8007178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800717a:	3321      	adds	r3, #33	; 0x21
 800717c:	4905      	ldr	r1, [pc, #20]	; (8007194 <ublox_All_resp+0x314>)
 800717e:	5ccb      	ldrb	r3, [r1, r3]
 8007180:	061b      	lsls	r3, r3, #24
 8007182:	431a      	orrs	r2, r3
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <ublox_All_resp+0x318>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	619a      	str	r2, [r3, #24]

				bf |= USART_UBLOX_RESP_BF_NAV_POSLLH;
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 8007192:	e256      	b.n	8007642 <ublox_All_resp+0x7c2>
 8007194:	2000364c 	.word	0x2000364c
 8007198:	2000363c 	.word	0x2000363c

		case 0x0104:
		{
			/* NavDop */
			if (len == 0x0012) {
 800719c:	89bb      	ldrh	r3, [r7, #12]
 800719e:	2b12      	cmp	r3, #18
 80071a0:	f040 8251 	bne.w	8007646 <ublox_All_resp+0x7c6>
				gUbloxNavDop_resp->iTOW		= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80071a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071a6:	3306      	adds	r3, #6
 80071a8:	4a96      	ldr	r2, [pc, #600]	; (8007404 <ublox_All_resp+0x584>)
 80071aa:	5cd3      	ldrb	r3, [r2, r3]
 80071ac:	4619      	mov	r1, r3
 80071ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071b0:	3307      	adds	r3, #7
 80071b2:	4a94      	ldr	r2, [pc, #592]	; (8007404 <ublox_All_resp+0x584>)
 80071b4:	5cd3      	ldrb	r3, [r2, r3]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	ea41 0203 	orr.w	r2, r1, r3
 80071bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071be:	3308      	adds	r3, #8
 80071c0:	4990      	ldr	r1, [pc, #576]	; (8007404 <ublox_All_resp+0x584>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	431a      	orrs	r2, r3
 80071c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071ca:	3309      	adds	r3, #9
 80071cc:	498d      	ldr	r1, [pc, #564]	; (8007404 <ublox_All_resp+0x584>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	431a      	orrs	r2, r3
 80071d4:	4b8c      	ldr	r3, [pc, #560]	; (8007408 <ublox_All_resp+0x588>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	601a      	str	r2, [r3, #0]
				gUbloxNavDop_resp->gDOP		= ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8);
 80071da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071dc:	330a      	adds	r3, #10
 80071de:	4a89      	ldr	r2, [pc, #548]	; (8007404 <ublox_All_resp+0x584>)
 80071e0:	5cd3      	ldrb	r3, [r2, r3]
 80071e2:	b21a      	sxth	r2, r3
 80071e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071e6:	330b      	adds	r3, #11
 80071e8:	4986      	ldr	r1, [pc, #536]	; (8007404 <ublox_All_resp+0x584>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	b21b      	sxth	r3, r3
 80071f0:	4313      	orrs	r3, r2
 80071f2:	b21a      	sxth	r2, r3
 80071f4:	4b84      	ldr	r3, [pc, #528]	; (8007408 <ublox_All_resp+0x588>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	b292      	uxth	r2, r2
 80071fa:	809a      	strh	r2, [r3, #4]
				gUbloxNavDop_resp->pDOP		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 80071fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80071fe:	330c      	adds	r3, #12
 8007200:	4a80      	ldr	r2, [pc, #512]	; (8007404 <ublox_All_resp+0x584>)
 8007202:	5cd3      	ldrb	r3, [r2, r3]
 8007204:	b21a      	sxth	r2, r3
 8007206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007208:	330d      	adds	r3, #13
 800720a:	497e      	ldr	r1, [pc, #504]	; (8007404 <ublox_All_resp+0x584>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	b21b      	sxth	r3, r3
 8007212:	4313      	orrs	r3, r2
 8007214:	b21a      	sxth	r2, r3
 8007216:	4b7c      	ldr	r3, [pc, #496]	; (8007408 <ublox_All_resp+0x588>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	b292      	uxth	r2, r2
 800721c:	80da      	strh	r2, [r3, #6]
				gUbloxNavDop_resp->tDOP		= ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8);
 800721e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007220:	330e      	adds	r3, #14
 8007222:	4a78      	ldr	r2, [pc, #480]	; (8007404 <ublox_All_resp+0x584>)
 8007224:	5cd3      	ldrb	r3, [r2, r3]
 8007226:	b21a      	sxth	r2, r3
 8007228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800722a:	330f      	adds	r3, #15
 800722c:	4975      	ldr	r1, [pc, #468]	; (8007404 <ublox_All_resp+0x584>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	b21b      	sxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b21a      	sxth	r2, r3
 8007238:	4b73      	ldr	r3, [pc, #460]	; (8007408 <ublox_All_resp+0x588>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b292      	uxth	r2, r2
 800723e:	811a      	strh	r2, [r3, #8]
				gUbloxNavDop_resp->vDOP		= ublox_Response[dataIdx + 6 + 10] | (ublox_Response[dataIdx + 6 + 11] << 8);
 8007240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007242:	3310      	adds	r3, #16
 8007244:	4a6f      	ldr	r2, [pc, #444]	; (8007404 <ublox_All_resp+0x584>)
 8007246:	5cd3      	ldrb	r3, [r2, r3]
 8007248:	b21a      	sxth	r2, r3
 800724a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800724c:	3311      	adds	r3, #17
 800724e:	496d      	ldr	r1, [pc, #436]	; (8007404 <ublox_All_resp+0x584>)
 8007250:	5ccb      	ldrb	r3, [r1, r3]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	b21b      	sxth	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b21a      	sxth	r2, r3
 800725a:	4b6b      	ldr	r3, [pc, #428]	; (8007408 <ublox_All_resp+0x588>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	b292      	uxth	r2, r2
 8007260:	815a      	strh	r2, [r3, #10]
				gUbloxNavDop_resp->hDOP		= ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8);
 8007262:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007264:	3312      	adds	r3, #18
 8007266:	4a67      	ldr	r2, [pc, #412]	; (8007404 <ublox_All_resp+0x584>)
 8007268:	5cd3      	ldrb	r3, [r2, r3]
 800726a:	b21a      	sxth	r2, r3
 800726c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800726e:	3313      	adds	r3, #19
 8007270:	4964      	ldr	r1, [pc, #400]	; (8007404 <ublox_All_resp+0x584>)
 8007272:	5ccb      	ldrb	r3, [r1, r3]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	b21b      	sxth	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b21a      	sxth	r2, r3
 800727c:	4b62      	ldr	r3, [pc, #392]	; (8007408 <ublox_All_resp+0x588>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	b292      	uxth	r2, r2
 8007282:	819a      	strh	r2, [r3, #12]
				gUbloxNavDop_resp->nDOP		= ublox_Response[dataIdx + 6 + 14] | (ublox_Response[dataIdx + 6 + 15] << 8);
 8007284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007286:	3314      	adds	r3, #20
 8007288:	4a5e      	ldr	r2, [pc, #376]	; (8007404 <ublox_All_resp+0x584>)
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	b21a      	sxth	r2, r3
 800728e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007290:	3315      	adds	r3, #21
 8007292:	495c      	ldr	r1, [pc, #368]	; (8007404 <ublox_All_resp+0x584>)
 8007294:	5ccb      	ldrb	r3, [r1, r3]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	b21b      	sxth	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b21a      	sxth	r2, r3
 800729e:	4b5a      	ldr	r3, [pc, #360]	; (8007408 <ublox_All_resp+0x588>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	b292      	uxth	r2, r2
 80072a4:	81da      	strh	r2, [r3, #14]
				gUbloxNavDop_resp->eDOP		= ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8);
 80072a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a8:	3316      	adds	r3, #22
 80072aa:	4a56      	ldr	r2, [pc, #344]	; (8007404 <ublox_All_resp+0x584>)
 80072ac:	5cd3      	ldrb	r3, [r2, r3]
 80072ae:	b21a      	sxth	r2, r3
 80072b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b2:	3317      	adds	r3, #23
 80072b4:	4953      	ldr	r1, [pc, #332]	; (8007404 <ublox_All_resp+0x584>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	b21b      	sxth	r3, r3
 80072bc:	4313      	orrs	r3, r2
 80072be:	b21a      	sxth	r2, r3
 80072c0:	4b51      	ldr	r3, [pc, #324]	; (8007408 <ublox_All_resp+0x588>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	b292      	uxth	r2, r2
 80072c6:	821a      	strh	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_DOP;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	f043 0304 	orr.w	r3, r3, #4
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80072d0:	e1b9      	b.n	8007646 <ublox_All_resp+0x7c6>

		case 0x0122:
		{
			/* NavClock */
			if (len == 0x0014) {
 80072d2:	89bb      	ldrh	r3, [r7, #12]
 80072d4:	2b14      	cmp	r3, #20
 80072d6:	f040 81b8 	bne.w	800764a <ublox_All_resp+0x7ca>
				gUbloxNavClock_resp->iTOW	=            ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 80072da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072dc:	3306      	adds	r3, #6
 80072de:	4a49      	ldr	r2, [pc, #292]	; (8007404 <ublox_All_resp+0x584>)
 80072e0:	5cd3      	ldrb	r3, [r2, r3]
 80072e2:	4619      	mov	r1, r3
 80072e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072e6:	3307      	adds	r3, #7
 80072e8:	4a46      	ldr	r2, [pc, #280]	; (8007404 <ublox_All_resp+0x584>)
 80072ea:	5cd3      	ldrb	r3, [r2, r3]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	ea41 0203 	orr.w	r2, r1, r3
 80072f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072f4:	3308      	adds	r3, #8
 80072f6:	4943      	ldr	r1, [pc, #268]	; (8007404 <ublox_All_resp+0x584>)
 80072f8:	5ccb      	ldrb	r3, [r1, r3]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	431a      	orrs	r2, r3
 80072fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007300:	3309      	adds	r3, #9
 8007302:	4940      	ldr	r1, [pc, #256]	; (8007404 <ublox_All_resp+0x584>)
 8007304:	5ccb      	ldrb	r3, [r1, r3]
 8007306:	061b      	lsls	r3, r3, #24
 8007308:	431a      	orrs	r2, r3
 800730a:	4b40      	ldr	r3, [pc, #256]	; (800740c <ublox_All_resp+0x58c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	601a      	str	r2, [r3, #0]
				gUbloxNavClock_resp->clkB	= (int32_t) (ublox_Response[dataIdx + 6 +  4] | (ublox_Response[dataIdx + 6 +  5] << 8) | (ublox_Response[dataIdx + 6 +  6] << 16) | (ublox_Response[dataIdx + 6 +  7] << 24));
 8007310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007312:	330a      	adds	r3, #10
 8007314:	4a3b      	ldr	r2, [pc, #236]	; (8007404 <ublox_All_resp+0x584>)
 8007316:	5cd3      	ldrb	r3, [r2, r3]
 8007318:	4619      	mov	r1, r3
 800731a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800731c:	330b      	adds	r3, #11
 800731e:	4a39      	ldr	r2, [pc, #228]	; (8007404 <ublox_All_resp+0x584>)
 8007320:	5cd3      	ldrb	r3, [r2, r3]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	ea41 0203 	orr.w	r2, r1, r3
 8007328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800732a:	330c      	adds	r3, #12
 800732c:	4935      	ldr	r1, [pc, #212]	; (8007404 <ublox_All_resp+0x584>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	ea42 0103 	orr.w	r1, r2, r3
 8007336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007338:	330d      	adds	r3, #13
 800733a:	4a32      	ldr	r2, [pc, #200]	; (8007404 <ublox_All_resp+0x584>)
 800733c:	5cd3      	ldrb	r3, [r2, r3]
 800733e:	061a      	lsls	r2, r3, #24
 8007340:	4b32      	ldr	r3, [pc, #200]	; (800740c <ublox_All_resp+0x58c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
				gUbloxNavClock_resp->clkD	= (int32_t) (ublox_Response[dataIdx + 6 +  8] | (ublox_Response[dataIdx + 6 +  9] << 8) | (ublox_Response[dataIdx + 6 + 10] << 16) | (ublox_Response[dataIdx + 6 + 11] << 24));
 8007348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800734a:	330e      	adds	r3, #14
 800734c:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <ublox_All_resp+0x584>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	4619      	mov	r1, r3
 8007352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007354:	330f      	adds	r3, #15
 8007356:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <ublox_All_resp+0x584>)
 8007358:	5cd3      	ldrb	r3, [r2, r3]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	ea41 0203 	orr.w	r2, r1, r3
 8007360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007362:	3310      	adds	r3, #16
 8007364:	4927      	ldr	r1, [pc, #156]	; (8007404 <ublox_All_resp+0x584>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	ea42 0103 	orr.w	r1, r2, r3
 800736e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007370:	3311      	adds	r3, #17
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <ublox_All_resp+0x584>)
 8007374:	5cd3      	ldrb	r3, [r2, r3]
 8007376:	061a      	lsls	r2, r3, #24
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <ublox_All_resp+0x58c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
				gUbloxNavClock_resp->tAcc	=            ublox_Response[dataIdx + 6 + 12] | (ublox_Response[dataIdx + 6 + 13] << 8) | (ublox_Response[dataIdx + 6 + 14] << 16) | (ublox_Response[dataIdx + 6 + 15] << 24);
 8007380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007382:	3312      	adds	r3, #18
 8007384:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <ublox_All_resp+0x584>)
 8007386:	5cd3      	ldrb	r3, [r2, r3]
 8007388:	4619      	mov	r1, r3
 800738a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800738c:	3313      	adds	r3, #19
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <ublox_All_resp+0x584>)
 8007390:	5cd3      	ldrb	r3, [r2, r3]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	ea41 0203 	orr.w	r2, r1, r3
 8007398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800739a:	3314      	adds	r3, #20
 800739c:	4919      	ldr	r1, [pc, #100]	; (8007404 <ublox_All_resp+0x584>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	431a      	orrs	r2, r3
 80073a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073a6:	3315      	adds	r3, #21
 80073a8:	4916      	ldr	r1, [pc, #88]	; (8007404 <ublox_All_resp+0x584>)
 80073aa:	5ccb      	ldrb	r3, [r1, r3]
 80073ac:	061b      	lsls	r3, r3, #24
 80073ae:	431a      	orrs	r2, r3
 80073b0:	4b16      	ldr	r3, [pc, #88]	; (800740c <ublox_All_resp+0x58c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60da      	str	r2, [r3, #12]
				gUbloxNavClock_resp->fAcc	=            ublox_Response[dataIdx + 6 + 16] | (ublox_Response[dataIdx + 6 + 17] << 8) | (ublox_Response[dataIdx + 6 + 18] << 16) | (ublox_Response[dataIdx + 6 + 19] << 24);
 80073b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b8:	3316      	adds	r3, #22
 80073ba:	4a12      	ldr	r2, [pc, #72]	; (8007404 <ublox_All_resp+0x584>)
 80073bc:	5cd3      	ldrb	r3, [r2, r3]
 80073be:	4619      	mov	r1, r3
 80073c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073c2:	3317      	adds	r3, #23
 80073c4:	4a0f      	ldr	r2, [pc, #60]	; (8007404 <ublox_All_resp+0x584>)
 80073c6:	5cd3      	ldrb	r3, [r2, r3]
 80073c8:	021b      	lsls	r3, r3, #8
 80073ca:	ea41 0203 	orr.w	r2, r1, r3
 80073ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073d0:	3318      	adds	r3, #24
 80073d2:	490c      	ldr	r1, [pc, #48]	; (8007404 <ublox_All_resp+0x584>)
 80073d4:	5ccb      	ldrb	r3, [r1, r3]
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	431a      	orrs	r2, r3
 80073da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073dc:	3319      	adds	r3, #25
 80073de:	4909      	ldr	r1, [pc, #36]	; (8007404 <ublox_All_resp+0x584>)
 80073e0:	5ccb      	ldrb	r3, [r1, r3]
 80073e2:	061b      	lsls	r3, r3, #24
 80073e4:	431a      	orrs	r2, r3
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <ublox_All_resp+0x58c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	611a      	str	r2, [r3, #16]

				bf |= USART_UBLOX_RESP_BF_NAV_CLOCK;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	f043 0302 	orr.w	r3, r3, #2
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 80073f4:	e129      	b.n	800764a <ublox_All_resp+0x7ca>
		{
			/* NavSvinfo */
			{
				/* Clear fields */
				{
					uint8_t* ptr = (uint8_t*) gUbloxNavSvinfo_resp;
 80073f6:	4b06      	ldr	r3, [pc, #24]	; (8007410 <ublox_All_resp+0x590>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	61fb      	str	r3, [r7, #28]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 80073fc:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e00f      	b.n	8007424 <ublox_All_resp+0x5a4>
 8007404:	2000364c 	.word	0x2000364c
 8007408:	20003644 	.word	0x20003644
 800740c:	20003640 	.word	0x20003640
 8007410:	20003648 	.word	0x20003648
						*(ptr++) = 0U;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	61fa      	str	r2, [r7, #28]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
					for (int cnt = sizeof(*gUbloxNavSvinfo_resp); cnt; --cnt) {
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	3b01      	subs	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f4      	bne.n	8007414 <ublox_All_resp+0x594>
					}
				}

				gUbloxNavSvinfo_resp->iTOW			= ublox_Response[dataIdx + 6 +  0] | (ublox_Response[dataIdx + 6 +  1] << 8) | (ublox_Response[dataIdx + 6 +  2] << 16) | (ublox_Response[dataIdx + 6 +  3] << 24);
 800742a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800742c:	3306      	adds	r3, #6
 800742e:	4a91      	ldr	r2, [pc, #580]	; (8007674 <ublox_All_resp+0x7f4>)
 8007430:	5cd3      	ldrb	r3, [r2, r3]
 8007432:	4619      	mov	r1, r3
 8007434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007436:	3307      	adds	r3, #7
 8007438:	4a8e      	ldr	r2, [pc, #568]	; (8007674 <ublox_All_resp+0x7f4>)
 800743a:	5cd3      	ldrb	r3, [r2, r3]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	ea41 0203 	orr.w	r2, r1, r3
 8007442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007444:	3308      	adds	r3, #8
 8007446:	498b      	ldr	r1, [pc, #556]	; (8007674 <ublox_All_resp+0x7f4>)
 8007448:	5ccb      	ldrb	r3, [r1, r3]
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007450:	3309      	adds	r3, #9
 8007452:	4988      	ldr	r1, [pc, #544]	; (8007674 <ublox_All_resp+0x7f4>)
 8007454:	5ccb      	ldrb	r3, [r1, r3]
 8007456:	061b      	lsls	r3, r3, #24
 8007458:	431a      	orrs	r2, r3
 800745a:	4b87      	ldr	r3, [pc, #540]	; (8007678 <ublox_All_resp+0x7f8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	601a      	str	r2, [r3, #0]
				gUbloxNavSvinfo_resp->numCh			= ublox_Response[dataIdx + 6 +  4];
 8007460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007462:	f103 020a 	add.w	r2, r3, #10
 8007466:	4b84      	ldr	r3, [pc, #528]	; (8007678 <ublox_All_resp+0x7f8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4982      	ldr	r1, [pc, #520]	; (8007674 <ublox_All_resp+0x7f4>)
 800746c:	5c8a      	ldrb	r2, [r1, r2]
 800746e:	711a      	strb	r2, [r3, #4]
				gUbloxNavSvinfo_resp->globalFlags	= ublox_Response[dataIdx + 6 +  5];
 8007470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007472:	f103 020b 	add.w	r2, r3, #11
 8007476:	4b80      	ldr	r3, [pc, #512]	; (8007678 <ublox_All_resp+0x7f8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	497e      	ldr	r1, [pc, #504]	; (8007674 <ublox_All_resp+0x7f4>)
 800747c:	5c8a      	ldrb	r2, [r1, r2]
 800747e:	715a      	strb	r2, [r3, #5]
				gUbloxNavSvinfo_resp->reserved2		= ublox_Response[dataIdx + 6 +  6] | (ublox_Response[dataIdx + 6 +  7] << 8);
 8007480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007482:	330c      	adds	r3, #12
 8007484:	4a7b      	ldr	r2, [pc, #492]	; (8007674 <ublox_All_resp+0x7f4>)
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	b21a      	sxth	r2, r3
 800748a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800748c:	330d      	adds	r3, #13
 800748e:	4979      	ldr	r1, [pc, #484]	; (8007674 <ublox_All_resp+0x7f4>)
 8007490:	5ccb      	ldrb	r3, [r1, r3]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	b21b      	sxth	r3, r3
 8007496:	4313      	orrs	r3, r2
 8007498:	b21a      	sxth	r2, r3
 800749a:	4b77      	ldr	r3, [pc, #476]	; (8007678 <ublox_All_resp+0x7f8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	b292      	uxth	r2, r2
 80074a0:	80da      	strh	r2, [r3, #6]

				if (gUbloxNavSvinfo_resp->numCh > UBLOX_MAX_CH) {
 80074a2:	4b75      	ldr	r3, [pc, #468]	; (8007678 <ublox_All_resp+0x7f8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b18      	cmp	r3, #24
 80074ac:	d903      	bls.n	80074b6 <ublox_All_resp+0x636>
					gUbloxNavSvinfo_resp->numCh 	= (uint8_t) UBLOX_MAX_CH;
 80074ae:	4b72      	ldr	r3, [pc, #456]	; (8007678 <ublox_All_resp+0x7f8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2218      	movs	r2, #24
 80074b4:	711a      	strb	r2, [r3, #4]
				}

				/* Read in each space vehicle */
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e0b4      	b.n	8007626 <ublox_All_resp+0x7a6>
					gUbloxNavSvinfo_resp->chn[iChn]		= ublox_Response[dataIdx + 6 +  8 + 12 * iChn];
 80074bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074be:	f103 010e 	add.w	r1, r3, #14
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	4a6a      	ldr	r2, [pc, #424]	; (8007678 <ublox_All_resp+0x7f8>)
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	4968      	ldr	r1, [pc, #416]	; (8007674 <ublox_All_resp+0x7f4>)
 80074d4:	5cc9      	ldrb	r1, [r1, r3]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	3308      	adds	r3, #8
 80074dc:	460a      	mov	r2, r1
 80074de:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->svid[iChn]	= ublox_Response[dataIdx + 6 +  9 + 12 * iChn];
 80074e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074e2:	f103 010f 	add.w	r1, r3, #15
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4613      	mov	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	4a61      	ldr	r2, [pc, #388]	; (8007678 <ublox_All_resp+0x7f8>)
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	495f      	ldr	r1, [pc, #380]	; (8007674 <ublox_All_resp+0x7f4>)
 80074f8:	5cc9      	ldrb	r1, [r1, r3]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	4413      	add	r3, r2
 80074fe:	3320      	adds	r3, #32
 8007500:	460a      	mov	r2, r1
 8007502:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->flags[iChn]	= ublox_Response[dataIdx + 6 + 10 + 12 * iChn];
 8007504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007506:	f103 0110 	add.w	r1, r3, #16
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	4a58      	ldr	r2, [pc, #352]	; (8007678 <ublox_All_resp+0x7f8>)
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	4956      	ldr	r1, [pc, #344]	; (8007674 <ublox_All_resp+0x7f4>)
 800751c:	5cc9      	ldrb	r1, [r1, r3]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	3338      	adds	r3, #56	; 0x38
 8007524:	460a      	mov	r2, r1
 8007526:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->quality[iChn]	= ublox_Response[dataIdx + 6 + 11 + 12 * iChn];
 8007528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800752a:	f103 0111 	add.w	r1, r3, #17
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4613      	mov	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <ublox_All_resp+0x7f8>)
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	494d      	ldr	r1, [pc, #308]	; (8007674 <ublox_All_resp+0x7f4>)
 8007540:	5cc9      	ldrb	r1, [r1, r3]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	3350      	adds	r3, #80	; 0x50
 8007548:	460a      	mov	r2, r1
 800754a:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->cno[iChn]		= ublox_Response[dataIdx + 6 + 12 + 12 * iChn];
 800754c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800754e:	f103 0112 	add.w	r1, r3, #18
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4613      	mov	r3, r2
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	4a46      	ldr	r2, [pc, #280]	; (8007678 <ublox_All_resp+0x7f8>)
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	4944      	ldr	r1, [pc, #272]	; (8007674 <ublox_All_resp+0x7f4>)
 8007564:	5cc9      	ldrb	r1, [r1, r3]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	3368      	adds	r3, #104	; 0x68
 800756c:	460a      	mov	r2, r1
 800756e:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->elev[iChn]	= (int8_t)  (ublox_Response[dataIdx + 6 + 13 + 12 * iChn]);
 8007570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007572:	f103 0113 	add.w	r1, r3, #19
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	4a3c      	ldr	r2, [pc, #240]	; (8007674 <ublox_All_resp+0x7f4>)
 8007584:	5cd1      	ldrb	r1, [r2, r3]
 8007586:	4b3c      	ldr	r3, [pc, #240]	; (8007678 <ublox_All_resp+0x7f8>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	b249      	sxtb	r1, r1
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	4413      	add	r3, r2
 8007590:	3380      	adds	r3, #128	; 0x80
 8007592:	460a      	mov	r2, r1
 8007594:	701a      	strb	r2, [r3, #0]
					gUbloxNavSvinfo_resp->azim[iChn]	= (int16_t) ((uint16_t)ublox_Response[dataIdx + 6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[dataIdx + 6 + 15 + 12 * iChn] << 8));
 8007596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007598:	f103 0114 	add.w	r1, r3, #20
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4613      	mov	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	4a32      	ldr	r2, [pc, #200]	; (8007674 <ublox_All_resp+0x7f4>)
 80075aa:	5cd3      	ldrb	r3, [r2, r3]
 80075ac:	b219      	sxth	r1, r3
 80075ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075b0:	f103 0015 	add.w	r0, r3, #21
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4613      	mov	r3, r2
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4403      	add	r3, r0
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <ublox_All_resp+0x7f4>)
 80075c2:	5cd3      	ldrb	r3, [r2, r3]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	b21a      	sxth	r2, r3
 80075c8:	4b2b      	ldr	r3, [pc, #172]	; (8007678 <ublox_All_resp+0x7f8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	b211      	sxth	r1, r2
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	324c      	adds	r2, #76	; 0x4c
 80075d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					gUbloxNavSvinfo_resp->prRes[iChn]	= (int16_t) ((uint32_t)ublox_Response[dataIdx + 6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[dataIdx + 6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[dataIdx + 6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[dataIdx + 6 + 19 + 12 * iChn] << 24));
 80075d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075da:	f103 0116 	add.w	r1, r3, #22
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4613      	mov	r3, r2
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	4a22      	ldr	r2, [pc, #136]	; (8007674 <ublox_All_resp+0x7f4>)
 80075ec:	5cd3      	ldrb	r3, [r2, r3]
 80075ee:	b299      	uxth	r1, r3
 80075f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075f2:	f103 0017 	add.w	r0, r3, #23
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4613      	mov	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4403      	add	r3, r0
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <ublox_All_resp+0x7f4>)
 8007604:	5cd3      	ldrb	r3, [r2, r3]
 8007606:	b29b      	uxth	r3, r3
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	b29b      	uxth	r3, r3
 800760c:	430b      	orrs	r3, r1
 800760e:	b29b      	uxth	r3, r3
 8007610:	b21a      	sxth	r2, r3
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <ublox_All_resp+0x7f8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4611      	mov	r1, r2
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	3232      	adds	r2, #50	; 0x32
 800761c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int iChn = 0; iChn < gUbloxNavSvinfo_resp->numCh; iChn++) {
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	3301      	adds	r3, #1
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <ublox_All_resp+0x7f8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	4293      	cmp	r3, r2
 8007634:	f6ff af42 	blt.w	80074bc <ublox_All_resp+0x63c>
				}

				bf |= USART_UBLOX_RESP_BF_NAV_SVINFO;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	f043 0308 	orr.w	r3, r3, #8
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
				}
#endif
			}
		}
			break;
 8007640:	e004      	b.n	800764c <ublox_All_resp+0x7cc>
			break;
 8007642:	bf00      	nop
 8007644:	e002      	b.n	800764c <ublox_All_resp+0x7cc>
			break;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <ublox_All_resp+0x7cc>
			break;
 800764a:	bf00      	nop
		}

		}  // switch (clsID)

		/* Skip to next frame */
		dataIdx += 6 + len + 2;
 800764c:	89ba      	ldrh	r2, [r7, #12]
 800764e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007650:	4413      	add	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	3308      	adds	r3, #8
 8007656:	847b      	strh	r3, [r7, #34]	; 0x22
	while (dataIdx < (dataCnt - 8)) {
 8007658:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800765a:	8a7b      	ldrh	r3, [r7, #18]
 800765c:	3b08      	subs	r3, #8
 800765e:	429a      	cmp	r2, r3
 8007660:	f6ff ac45 	blt.w	8006eee <ublox_All_resp+0x6e>
 8007664:	e000      	b.n	8007668 <ublox_All_resp+0x7e8>
			break;
 8007666:	bf00      	nop
	}  // while (dataIdx < (dataCnt - 8))

	return bf;
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	; 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000364c 	.word	0x2000364c
 8007678:	20003648 	.word	0x20003648

0800767c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800767c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007680:	f7fe faca 	bl	8005c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007684:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007686:	e003      	b.n	8007690 <LoopCopyDataInit>

08007688 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800768a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800768c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800768e:	3104      	adds	r1, #4

08007690 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007690:	480a      	ldr	r0, [pc, #40]	; (80076bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007694:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007696:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007698:	d3f6      	bcc.n	8007688 <CopyDataInit>
	ldr	r2, =_sbss
 800769a:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800769c:	e002      	b.n	80076a4 <LoopFillZerobss>

0800769e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800769e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80076a0:	f842 3b04 	str.w	r3, [r2], #4

080076a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80076a4:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <LoopForever+0x16>)
	cmp	r2, r3
 80076a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80076a8:	d3f9      	bcc.n	800769e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80076aa:	f008 fd99 	bl	80101e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80076ae:	f7fd fc47 	bl	8004f40 <main>

080076b2 <LoopForever>:

LoopForever:
    b LoopForever
 80076b2:	e7fe      	b.n	80076b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80076b4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80076b8:	08014e00 	.word	0x08014e00
	ldr	r0, =_sdata
 80076bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80076c0:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80076c4:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80076c8:	2000576c 	.word	0x2000576c

080076cc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80076cc:	e7fe      	b.n	80076cc <CAN1_RX0_IRQHandler>
	...

080076d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <HAL_Init+0x3c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a0b      	ldr	r2, [pc, #44]	; (800770c <HAL_Init+0x3c>)
 80076e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076e6:	2003      	movs	r0, #3
 80076e8:	f001 fd8d 	bl	8009206 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80076ec:	200f      	movs	r0, #15
 80076ee:	f7fe f9a9 	bl	8005a44 <HAL_InitTick>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	71fb      	strb	r3, [r7, #7]
 80076fc:	e001      	b.n	8007702 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80076fe:	f7fe f97d 	bl	80059fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007702:	79fb      	ldrb	r3, [r7, #7]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40022000 	.word	0x40022000

08007710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <HAL_IncTick+0x20>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	4b06      	ldr	r3, [pc, #24]	; (8007734 <HAL_IncTick+0x24>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4413      	add	r3, r2
 8007720:	4a04      	ldr	r2, [pc, #16]	; (8007734 <HAL_IncTick+0x24>)
 8007722:	6013      	str	r3, [r2, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000014 	.word	0x20000014
 8007734:	20005754 	.word	0x20005754

08007738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
  return uwTick;
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <HAL_GetTick+0x14>)
 800773e:	681b      	ldr	r3, [r3, #0]
}
 8007740:	4618      	mov	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20005754 	.word	0x20005754

08007750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007758:	f7ff ffee 	bl	8007738 <HAL_GetTick>
 800775c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d005      	beq.n	8007776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <HAL_Delay+0x44>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007776:	bf00      	nop
 8007778:	f7ff ffde 	bl	8007738 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	429a      	cmp	r2, r3
 8007786:	d8f7      	bhi.n	8007778 <HAL_Delay+0x28>
  {
  }
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000014 	.word	0x20000014

08007798 <LL_ADC_SetCommonClock>:
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	609a      	str	r2, [r3, #8]
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <LL_ADC_SetCommonPathInternalCh>:
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <LL_ADC_GetCommonPathInternalCh>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <LL_ADC_SetOffset>:
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3360      	adds	r3, #96	; 0x60
 8007812:	461a      	mov	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <LL_ADC_SetOffset+0x44>)
 8007822:	4013      	ands	r3, r2
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	601a      	str	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	03fff000 	.word	0x03fff000

08007848 <LL_ADC_GetOffsetChannel>:
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3360      	adds	r3, #96	; 0x60
 8007856:	461a      	mov	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <LL_ADC_SetOffsetState>:
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3360      	adds	r3, #96	; 0x60
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	431a      	orrs	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <LL_ADC_REG_SetSequencerRanks>:
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3330      	adds	r3, #48	; 0x30
 80078e0:	461a      	mov	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	0a1b      	lsrs	r3, r3, #8
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	f003 030c 	and.w	r3, r3, #12
 80078ec:	4413      	add	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f003 031f 	and.w	r3, r3, #31
 80078fa:	211f      	movs	r1, #31
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0e9b      	lsrs	r3, r3, #26
 8007908:	f003 011f 	and.w	r1, r3, #31
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	431a      	orrs	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	601a      	str	r2, [r3, #0]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_ADC_SetChannelSamplingTime>:
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3314      	adds	r3, #20
 800795e:	461a      	mov	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	0e5b      	lsrs	r3, r3, #25
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	4413      	add	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	0d1b      	lsrs	r3, r3, #20
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2107      	movs	r1, #7
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	43db      	mvns	r3, r3
 8007982:	401a      	ands	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	0d1b      	lsrs	r3, r3, #20
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	fa01 f303 	lsl.w	r3, r1, r3
 8007992:	431a      	orrs	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	601a      	str	r2, [r3, #0]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <LL_ADC_SetChannelSingleDiff>:
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0318 	and.w	r3, r3, #24
 80079c6:	4908      	ldr	r1, [pc, #32]	; (80079e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80079c8:	40d9      	lsrs	r1, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	400b      	ands	r3, r1
 80079ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079d2:	431a      	orrs	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	0007ffff 	.word	0x0007ffff

080079ec <LL_ADC_DisableDeepPowerDown>:
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80079fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6093      	str	r3, [r2, #8]
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a24:	d101      	bne.n	8007a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <LL_ADC_EnableInternalRegulator>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a74:	d101      	bne.n	8007a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <LL_ADC_Enable>:
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a9c:	f043 0201 	orr.w	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	609a      	str	r2, [r3, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <LL_ADC_Disable>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ac4:	f043 0202 	orr.w	r2, r3, #2
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <LL_ADC_IsEnabled>:
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <LL_ADC_IsEnabled+0x18>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e000      	b.n	8007af2 <LL_ADC_IsEnabled+0x1a>
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <LL_ADC_IsDisableOngoing>:
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d101      	bne.n	8007b16 <LL_ADC_IsDisableOngoing+0x18>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <LL_ADC_IsDisableOngoing+0x1a>
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <LL_ADC_REG_StopConversion>:
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b38:	f043 0210 	orr.w	r2, r3, #16
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <LL_ADC_REG_IsConversionOngoing>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d101      	bne.n	8007b64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b86:	f043 0220 	orr.w	r2, r3, #32
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d101      	bne.n	8007bb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e12c      	b.n	8007e34 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7f9 fad1 	bl	8001190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff ff05 	bl	8007a10 <LL_ADC_IsDeepPowerDownEnabled>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff feeb 	bl	80079ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ff20 	bl	8007a60 <LL_ADC_IsInternalRegulatorEnabled>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d115      	bne.n	8007c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff ff04 	bl	8007a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c30:	4b82      	ldr	r3, [pc, #520]	; (8007e3c <HAL_ADC_Init+0x27c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	099b      	lsrs	r3, r3, #6
 8007c36:	4a82      	ldr	r2, [pc, #520]	; (8007e40 <HAL_ADC_Init+0x280>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	099b      	lsrs	r3, r3, #6
 8007c3e:	3301      	adds	r3, #1
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007c44:	e002      	b.n	8007c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f9      	bne.n	8007c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff02 	bl	8007a60 <LL_ADC_IsInternalRegulatorEnabled>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10d      	bne.n	8007c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	f043 0210 	orr.w	r2, r3, #16
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c72:	f043 0201 	orr.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff ff62 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8007c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 80c5 	bne.w	8007e22 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 80c1 	bne.w	8007e22 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ca8:	f043 0202 	orr.w	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff ff0f 	bl	8007ad8 <LL_ADC_IsEnabled>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007cc0:	4860      	ldr	r0, [pc, #384]	; (8007e44 <HAL_ADC_Init+0x284>)
 8007cc2:	f7ff ff09 	bl	8007ad8 <LL_ADC_IsEnabled>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d105      	bne.n	8007cd8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	485d      	ldr	r0, [pc, #372]	; (8007e48 <HAL_ADC_Init+0x288>)
 8007cd4:	f7ff fd60 	bl	8007798 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7e5b      	ldrb	r3, [r3, #25]
 8007cdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007ce2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007ce8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007cee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d106      	bne.n	8007d14 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	045b      	lsls	r3, r3, #17
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <HAL_ADC_Init+0x28c>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	69b9      	ldr	r1, [r7, #24]
 8007d40:	430b      	orrs	r3, r1
 8007d42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff feff 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8007d4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff ff20 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 8007d5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d13d      	bne.n	8007dde <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d13a      	bne.n	8007dde <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d84:	f023 0302 	bic.w	r3, r3, #2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	69b9      	ldr	r1, [r7, #24]
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d118      	bne.n	8007dce <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007da6:	f023 0304 	bic.w	r3, r3, #4
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007db2:	4311      	orrs	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007db8:	4311      	orrs	r1, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	e007      	b.n	8007dde <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10c      	bne.n	8007e00 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	f023 010f 	bic.w	r1, r3, #15
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	1e5a      	subs	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8007dfe:	e007      	b.n	8007e10 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 020f 	bic.w	r2, r2, #15
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e14:	f023 0303 	bic.w	r3, r3, #3
 8007e18:	f043 0201 	orr.w	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54
 8007e20:	e007      	b.n	8007e32 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	f043 0210 	orr.w	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3720      	adds	r7, #32
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000008 	.word	0x20000008
 8007e40:	053e2d63 	.word	0x053e2d63
 8007e44:	50040000 	.word	0x50040000
 8007e48:	50040300 	.word	0x50040300
 8007e4c:	fff0c007 	.word	0xfff0c007

08007e50 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_ADC_Stop_DMA+0x16>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e051      	b.n	8007f0a <HAL_ADC_Stop_DMA+0xba>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007e6e:	2103      	movs	r1, #3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fe03 	bl	8008a7c <ADC_ConversionStop>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d13f      	bne.n	8007f00 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0201 	bic.w	r2, r2, #1
 8007e8e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d10f      	bne.n	8007ebe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 fb0a 	bl	80094bc <HAL_DMA_Abort>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0210 	bic.w	r2, r2, #16
 8007ecc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 ff13 	bl	8008d00 <ADC_Disable>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e002      	b.n	8007ee6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 ff0d 	bl	8008d00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f043 0201 	orr.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b088      	sub	sp, #32
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d017      	beq.n	8007f68 <HAL_ADC_IRQHandler+0x56>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 f878 	bl	8009050 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2202      	movs	r2, #2
 8007f66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <HAL_ADC_IRQHandler+0x6a>
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d05e      	beq.n	8008044 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d059      	beq.n	8008044 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fc7c 	bl	80078aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d03e      	beq.n	8008036 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d135      	bne.n	8008036 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d12e      	bne.n	8008036 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fdb5 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11a      	bne.n	800801e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 020c 	bic.w	r2, r2, #12
 8007ff6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d112      	bne.n	8008036 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	f043 0201 	orr.w	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
 800801c:	e00b      	b.n	8008036 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	f043 0210 	orr.w	r2, r3, #16
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802e:	f043 0201 	orr.w	r2, r3, #1
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 f9da 	bl	80013f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	220c      	movs	r2, #12
 8008042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <HAL_ADC_IRQHandler+0x146>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800805e:	2b00      	cmp	r3, #0
 8008060:	d072      	beq.n	8008148 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d06d      	beq.n	8008148 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fc4d 	bl	8007928 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800808e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fc08 	bl	80078aa <LL_ADC_REG_IsTriggerSourceSWStart>
 800809a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d047      	beq.n	800813a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <HAL_ADC_IRQHandler+0x1b2>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d03f      	beq.n	800813a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d13a      	bne.n	800813a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d133      	bne.n	800813a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d12e      	bne.n	800813a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fd5a 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11a      	bne.n	8008122 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008110:	2b00      	cmp	r3, #0
 8008112:	d112      	bne.n	800813a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008118:	f043 0201 	orr.w	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	655a      	str	r2, [r3, #84]	; 0x54
 8008120:	e00b      	b.n	800813a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f043 0210 	orr.w	r2, r3, #16
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008132:	f043 0201 	orr.w	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 ff60 	bl	8009000 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2260      	movs	r2, #96	; 0x60
 8008146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_ADC_IRQHandler+0x264>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f890 	bl	800828e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817c:	2b00      	cmp	r3, #0
 800817e:	d012      	beq.n	80081a6 <HAL_ADC_IRQHandler+0x294>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 ff46 	bl	8009028 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <HAL_ADC_IRQHandler+0x2c4>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00d      	beq.n	80081d6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 ff38 	bl	800903c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	f003 0310 	and.w	r3, r3, #16
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d02a      	beq.n	8008236 <HAL_ADC_IRQHandler+0x324>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d025      	beq.n	8008236 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80081f2:	2301      	movs	r3, #1
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	e008      	b.n	800820a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8008206:	2301      	movs	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10e      	bne.n	800822e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008214:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008220:	f043 0202 	orr.w	r2, r3, #2
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7f9 f919 	bl	8001460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2210      	movs	r2, #16
 8008234:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800823c:	2b00      	cmp	r3, #0
 800823e:	d018      	beq.n	8008272 <HAL_ADC_IRQHandler+0x360>
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008246:	2b00      	cmp	r3, #0
 8008248:	d013      	beq.n	8008272 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	f043 0208 	orr.w	r2, r3, #8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800826a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fed1 	bl	8009014 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008272:	bf00      	nop
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b0b6      	sub	sp, #216	; 0xd8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <HAL_ADC_ConfigChannel+0x22>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e3b9      	b.n	8008a3a <HAL_ADC_ConfigChannel+0x796>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fc3a 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 839e 	bne.w	8008a1c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d824      	bhi.n	8008332 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	3b02      	subs	r3, #2
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d81b      	bhi.n	800832a <HAL_ADC_ConfigChannel+0x86>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_ADC_ConfigChannel+0x54>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008309 	.word	0x08008309
 80082fc:	08008311 	.word	0x08008311
 8008300:	08008319 	.word	0x08008319
 8008304:	08008321 	.word	0x08008321
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	220c      	movs	r2, #12
 800830c:	605a      	str	r2, [r3, #4]
          break;
 800830e:	e011      	b.n	8008334 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2212      	movs	r2, #18
 8008314:	605a      	str	r2, [r3, #4]
          break;
 8008316:	e00d      	b.n	8008334 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2218      	movs	r2, #24
 800831c:	605a      	str	r2, [r3, #4]
          break;
 800831e:	e009      	b.n	8008334 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008326:	605a      	str	r2, [r3, #4]
          break;
 8008328:	e004      	b.n	8008334 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2206      	movs	r2, #6
 800832e:	605a      	str	r2, [r3, #4]
          break;
 8008330:	e000      	b.n	8008334 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008332:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6859      	ldr	r1, [r3, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f7ff fac5 	bl	80078d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fbfe 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8008350:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fc1e 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 800835e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008362:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 81a6 	bne.w	80086b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800836c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 81a1 	bne.w	80086b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	461a      	mov	r2, r3
 8008384:	f7ff fae3 	bl	800794e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	695a      	ldr	r2, [r3, #20]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d00a      	beq.n	80083c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6919      	ldr	r1, [r3, #16]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ba:	f7ff fa21 	bl	8007800 <LL_ADC_SetOffset>
 80083be:	e17b      	b.n	80086b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fa3e 	bl	8007848 <LL_ADC_GetOffsetChannel>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <HAL_ADC_ConfigChannel+0x148>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fa33 	bl	8007848 <LL_ADC_GetOffsetChannel>
 80083e2:	4603      	mov	r3, r0
 80083e4:	0e9b      	lsrs	r3, r3, #26
 80083e6:	f003 021f 	and.w	r2, r3, #31
 80083ea:	e01e      	b.n	800842a <HAL_ADC_ConfigChannel+0x186>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff fa28 	bl	8007848 <LL_ADC_GetOffsetChannel>
 80083f8:	4603      	mov	r3, r0
 80083fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008402:	fa93 f3a3 	rbit	r3, r3
 8008406:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800840a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800840e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800841a:	2320      	movs	r3, #32
 800841c:	e004      	b.n	8008428 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800841e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x19e>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	0e9b      	lsrs	r3, r3, #26
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	e018      	b.n	8008474 <HAL_ADC_ConfigChannel+0x1d0>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800844e:	fa93 f3a3 	rbit	r3, r3
 8008452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800845a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800845e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8008466:	2320      	movs	r3, #32
 8008468:	e004      	b.n	8008474 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800846a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800846e:	fab3 f383 	clz	r3, r3
 8008472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008474:	429a      	cmp	r2, r3
 8008476:	d106      	bne.n	8008486 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff f9f7 	bl	8007874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f9db 	bl	8007848 <LL_ADC_GetOffsetChannel>
 8008492:	4603      	mov	r3, r0
 8008494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <HAL_ADC_ConfigChannel+0x20e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f9d0 	bl	8007848 <LL_ADC_GetOffsetChannel>
 80084a8:	4603      	mov	r3, r0
 80084aa:	0e9b      	lsrs	r3, r3, #26
 80084ac:	f003 021f 	and.w	r2, r3, #31
 80084b0:	e01e      	b.n	80084f0 <HAL_ADC_ConfigChannel+0x24c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2101      	movs	r1, #1
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff f9c5 	bl	8007848 <LL_ADC_GetOffsetChannel>
 80084be:	4603      	mov	r3, r0
 80084c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084c8:	fa93 f3a3 	rbit	r3, r3
 80084cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80084d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80084d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80084e0:	2320      	movs	r3, #32
 80084e2:	e004      	b.n	80084ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80084e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084e8:	fab3 f383 	clz	r3, r3
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d105      	bne.n	8008508 <HAL_ADC_ConfigChannel+0x264>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	0e9b      	lsrs	r3, r3, #26
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	e018      	b.n	800853a <HAL_ADC_ConfigChannel+0x296>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008514:	fa93 f3a3 	rbit	r3, r3
 8008518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800851c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800852c:	2320      	movs	r3, #32
 800852e:	e004      	b.n	800853a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8008530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008534:	fab3 f383 	clz	r3, r3
 8008538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800853a:	429a      	cmp	r2, r3
 800853c:	d106      	bne.n	800854c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	2101      	movs	r1, #1
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff f994 	bl	8007874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2102      	movs	r1, #2
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff f978 	bl	8007848 <LL_ADC_GetOffsetChannel>
 8008558:	4603      	mov	r3, r0
 800855a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <HAL_ADC_ConfigChannel+0x2d4>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff f96d 	bl	8007848 <LL_ADC_GetOffsetChannel>
 800856e:	4603      	mov	r3, r0
 8008570:	0e9b      	lsrs	r3, r3, #26
 8008572:	f003 021f 	and.w	r2, r3, #31
 8008576:	e01e      	b.n	80085b6 <HAL_ADC_ConfigChannel+0x312>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2102      	movs	r1, #2
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff f962 	bl	8007848 <LL_ADC_GetOffsetChannel>
 8008584:	4603      	mov	r3, r0
 8008586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800858a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800858e:	fa93 f3a3 	rbit	r3, r3
 8008592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800859a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800859e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80085a6:	2320      	movs	r3, #32
 80085a8:	e004      	b.n	80085b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80085aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ae:	fab3 f383 	clz	r3, r3
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <HAL_ADC_ConfigChannel+0x32a>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	0e9b      	lsrs	r3, r3, #26
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	e016      	b.n	80085fc <HAL_ADC_ConfigChannel+0x358>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085da:	fa93 f3a3 	rbit	r3, r3
 80085de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80085e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80085e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80085ee:	2320      	movs	r3, #32
 80085f0:	e004      	b.n	80085fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80085f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085f6:	fab3 f383 	clz	r3, r3
 80085fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d106      	bne.n	800860e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2200      	movs	r2, #0
 8008606:	2102      	movs	r1, #2
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff f933 	bl	8007874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2103      	movs	r1, #3
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff f917 	bl	8007848 <LL_ADC_GetOffsetChannel>
 800861a:	4603      	mov	r3, r0
 800861c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <HAL_ADC_ConfigChannel+0x396>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2103      	movs	r1, #3
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff f90c 	bl	8007848 <LL_ADC_GetOffsetChannel>
 8008630:	4603      	mov	r3, r0
 8008632:	0e9b      	lsrs	r3, r3, #26
 8008634:	f003 021f 	and.w	r2, r3, #31
 8008638:	e017      	b.n	800866a <HAL_ADC_ConfigChannel+0x3c6>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2103      	movs	r1, #3
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff f901 	bl	8007848 <LL_ADC_GetOffsetChannel>
 8008646:	4603      	mov	r3, r0
 8008648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800864a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800864c:	fa93 f3a3 	rbit	r3, r3
 8008650:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008654:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800865c:	2320      	movs	r3, #32
 800865e:	e003      	b.n	8008668 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008662:	fab3 f383 	clz	r3, r3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <HAL_ADC_ConfigChannel+0x3de>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	0e9b      	lsrs	r3, r3, #26
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	e011      	b.n	80086a6 <HAL_ADC_ConfigChannel+0x402>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800868a:	fa93 f3a3 	rbit	r3, r3
 800868e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008692:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800869a:	2320      	movs	r3, #32
 800869c:	e003      	b.n	80086a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	fab3 f383 	clz	r3, r3
 80086a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d106      	bne.n	80086b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2200      	movs	r2, #0
 80086b0:	2103      	movs	r1, #3
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff f8de 	bl	8007874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fa0b 	bl	8007ad8 <LL_ADC_IsEnabled>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 813f 	bne.w	8008948 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6819      	ldr	r1, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7ff f964 	bl	80079a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	4a8e      	ldr	r2, [pc, #568]	; (800891c <HAL_ADC_ConfigChannel+0x678>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	f040 8130 	bne.w	8008948 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10b      	bne.n	8008710 <HAL_ADC_ConfigChannel+0x46c>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	0e9b      	lsrs	r3, r3, #26
 80086fe:	3301      	adds	r3, #1
 8008700:	f003 031f 	and.w	r3, r3, #31
 8008704:	2b09      	cmp	r3, #9
 8008706:	bf94      	ite	ls
 8008708:	2301      	movls	r3, #1
 800870a:	2300      	movhi	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	e019      	b.n	8008744 <HAL_ADC_ConfigChannel+0x4a0>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008718:	fa93 f3a3 	rbit	r3, r3
 800871c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800871e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008720:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008728:	2320      	movs	r3, #32
 800872a:	e003      	b.n	8008734 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800872c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800872e:	fab3 f383 	clz	r3, r3
 8008732:	b2db      	uxtb	r3, r3
 8008734:	3301      	adds	r3, #1
 8008736:	f003 031f 	and.w	r3, r3, #31
 800873a:	2b09      	cmp	r3, #9
 800873c:	bf94      	ite	ls
 800873e:	2301      	movls	r3, #1
 8008740:	2300      	movhi	r3, #0
 8008742:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008744:	2b00      	cmp	r3, #0
 8008746:	d079      	beq.n	800883c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008750:	2b00      	cmp	r3, #0
 8008752:	d107      	bne.n	8008764 <HAL_ADC_ConfigChannel+0x4c0>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	0e9b      	lsrs	r3, r3, #26
 800875a:	3301      	adds	r3, #1
 800875c:	069b      	lsls	r3, r3, #26
 800875e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008762:	e015      	b.n	8008790 <HAL_ADC_ConfigChannel+0x4ec>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800876a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876c:	fa93 f3a3 	rbit	r3, r3
 8008770:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008774:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800877c:	2320      	movs	r3, #32
 800877e:	e003      	b.n	8008788 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008782:	fab3 f383 	clz	r3, r3
 8008786:	b2db      	uxtb	r3, r3
 8008788:	3301      	adds	r3, #1
 800878a:	069b      	lsls	r3, r3, #26
 800878c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0x50c>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	0e9b      	lsrs	r3, r3, #26
 80087a2:	3301      	adds	r3, #1
 80087a4:	f003 031f 	and.w	r3, r3, #31
 80087a8:	2101      	movs	r1, #1
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	e017      	b.n	80087e0 <HAL_ADC_ConfigChannel+0x53c>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b8:	fa93 f3a3 	rbit	r3, r3
 80087bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80087be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80087c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80087c8:	2320      	movs	r3, #32
 80087ca:	e003      	b.n	80087d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80087cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ce:	fab3 f383 	clz	r3, r3
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	3301      	adds	r3, #1
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	2101      	movs	r1, #1
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	ea42 0103 	orr.w	r1, r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <HAL_ADC_ConfigChannel+0x562>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	0e9b      	lsrs	r3, r3, #26
 80087f6:	3301      	adds	r3, #1
 80087f8:	f003 021f 	and.w	r2, r3, #31
 80087fc:	4613      	mov	r3, r2
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	4413      	add	r3, r2
 8008802:	051b      	lsls	r3, r3, #20
 8008804:	e018      	b.n	8008838 <HAL_ADC_ConfigChannel+0x594>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	fa93 f3a3 	rbit	r3, r3
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800881e:	2320      	movs	r3, #32
 8008820:	e003      	b.n	800882a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	b2db      	uxtb	r3, r3
 800882a:	3301      	adds	r3, #1
 800882c:	f003 021f 	and.w	r2, r3, #31
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008838:	430b      	orrs	r3, r1
 800883a:	e080      	b.n	800893e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008844:	2b00      	cmp	r3, #0
 8008846:	d107      	bne.n	8008858 <HAL_ADC_ConfigChannel+0x5b4>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	0e9b      	lsrs	r3, r3, #26
 800884e:	3301      	adds	r3, #1
 8008850:	069b      	lsls	r3, r3, #26
 8008852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008856:	e015      	b.n	8008884 <HAL_ADC_ConfigChannel+0x5e0>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	fa93 f3a3 	rbit	r3, r3
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008870:	2320      	movs	r3, #32
 8008872:	e003      	b.n	800887c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	fab3 f383 	clz	r3, r3
 800887a:	b2db      	uxtb	r3, r3
 800887c:	3301      	adds	r3, #1
 800887e:	069b      	lsls	r3, r3, #26
 8008880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <HAL_ADC_ConfigChannel+0x600>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	0e9b      	lsrs	r3, r3, #26
 8008896:	3301      	adds	r3, #1
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2101      	movs	r1, #1
 800889e:	fa01 f303 	lsl.w	r3, r1, r3
 80088a2:	e017      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x630>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	fa93 f3a3 	rbit	r3, r3
 80088b0:	61fb      	str	r3, [r7, #28]
  return result;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80088bc:	2320      	movs	r3, #32
 80088be:	e003      	b.n	80088c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	fab3 f383 	clz	r3, r3
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	3301      	adds	r3, #1
 80088ca:	f003 031f 	and.w	r3, r3, #31
 80088ce:	2101      	movs	r1, #1
 80088d0:	fa01 f303 	lsl.w	r3, r1, r3
 80088d4:	ea42 0103 	orr.w	r1, r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10d      	bne.n	8008900 <HAL_ADC_ConfigChannel+0x65c>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	0e9b      	lsrs	r3, r3, #26
 80088ea:	3301      	adds	r3, #1
 80088ec:	f003 021f 	and.w	r2, r3, #31
 80088f0:	4613      	mov	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	4413      	add	r3, r2
 80088f6:	3b1e      	subs	r3, #30
 80088f8:	051b      	lsls	r3, r3, #20
 80088fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088fe:	e01d      	b.n	800893c <HAL_ADC_ConfigChannel+0x698>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	fa93 f3a3 	rbit	r3, r3
 800890c:	613b      	str	r3, [r7, #16]
  return result;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d103      	bne.n	8008920 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008918:	2320      	movs	r3, #32
 800891a:	e005      	b.n	8008928 <HAL_ADC_ConfigChannel+0x684>
 800891c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	fab3 f383 	clz	r3, r3
 8008926:	b2db      	uxtb	r3, r3
 8008928:	3301      	adds	r3, #1
 800892a:	f003 021f 	and.w	r2, r3, #31
 800892e:	4613      	mov	r3, r2
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	3b1e      	subs	r3, #30
 8008936:	051b      	lsls	r3, r3, #20
 8008938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800893c:	430b      	orrs	r3, r1
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	4619      	mov	r1, r3
 8008944:	f7ff f803 	bl	800794e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <HAL_ADC_ConfigChannel+0x7a0>)
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d06c      	beq.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008954:	483c      	ldr	r0, [pc, #240]	; (8008a48 <HAL_ADC_ConfigChannel+0x7a4>)
 8008956:	f7fe ff45 	bl	80077e4 <LL_ADC_GetCommonPathInternalCh>
 800895a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a3a      	ldr	r2, [pc, #232]	; (8008a4c <HAL_ADC_ConfigChannel+0x7a8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d127      	bne.n	80089b8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800896c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d121      	bne.n	80089b8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a35      	ldr	r2, [pc, #212]	; (8008a50 <HAL_ADC_ConfigChannel+0x7ac>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d157      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800897e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008986:	4619      	mov	r1, r3
 8008988:	482f      	ldr	r0, [pc, #188]	; (8008a48 <HAL_ADC_ConfigChannel+0x7a4>)
 800898a:	f7fe ff18 	bl	80077be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800898e:	4b31      	ldr	r3, [pc, #196]	; (8008a54 <HAL_ADC_ConfigChannel+0x7b0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	099b      	lsrs	r3, r3, #6
 8008994:	4a30      	ldr	r2, [pc, #192]	; (8008a58 <HAL_ADC_ConfigChannel+0x7b4>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	099b      	lsrs	r3, r3, #6
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	4613      	mov	r3, r2
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80089a8:	e002      	b.n	80089b0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f9      	bne.n	80089aa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80089b6:	e03a      	b.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a27      	ldr	r2, [pc, #156]	; (8008a5c <HAL_ADC_ConfigChannel+0x7b8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d113      	bne.n	80089ea <HAL_ADC_ConfigChannel+0x746>
 80089c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10d      	bne.n	80089ea <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1f      	ldr	r2, [pc, #124]	; (8008a50 <HAL_ADC_ConfigChannel+0x7ac>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d12a      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80089d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089e0:	4619      	mov	r1, r3
 80089e2:	4819      	ldr	r0, [pc, #100]	; (8008a48 <HAL_ADC_ConfigChannel+0x7a4>)
 80089e4:	f7fe feeb 	bl	80077be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80089e8:	e021      	b.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <HAL_ADC_ConfigChannel+0x7bc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d11c      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80089f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d116      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a12      	ldr	r2, [pc, #72]	; (8008a50 <HAL_ADC_ConfigChannel+0x7ac>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d111      	bne.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a12:	4619      	mov	r1, r3
 8008a14:	480c      	ldr	r0, [pc, #48]	; (8008a48 <HAL_ADC_ConfigChannel+0x7a4>)
 8008a16:	f7fe fed2 	bl	80077be <LL_ADC_SetCommonPathInternalCh>
 8008a1a:	e008      	b.n	8008a2e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a20:	f043 0220 	orr.w	r2, r3, #32
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008a36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	37d8      	adds	r7, #216	; 0xd8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	80080000 	.word	0x80080000
 8008a48:	50040300 	.word	0x50040300
 8008a4c:	c7520000 	.word	0xc7520000
 8008a50:	50040000 	.word	0x50040000
 8008a54:	20000008 	.word	0x20000008
 8008a58:	053e2d63 	.word	0x053e2d63
 8008a5c:	cb840000 	.word	0xcb840000
 8008a60:	80000001 	.word	0x80000001

08008a64 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff f85a 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8008a98:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff f87b 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 8008aa4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8098 	beq.w	8008be4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d02a      	beq.n	8008b18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7e5b      	ldrb	r3, [r3, #25]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d126      	bne.n	8008b18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7e1b      	ldrb	r3, [r3, #24]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d122      	bne.n	8008b18 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008ad6:	e014      	b.n	8008b02 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	4a45      	ldr	r2, [pc, #276]	; (8008bf0 <ADC_ConversionStop+0x174>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d90d      	bls.n	8008afc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae4:	f043 0210 	orr.w	r2, r3, #16
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af0:	f043 0201 	orr.w	r2, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e074      	b.n	8008be6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	3301      	adds	r3, #1
 8008b00:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b40      	cmp	r3, #64	; 0x40
 8008b0e:	d1e3      	bne.n	8008ad8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2240      	movs	r2, #64	; 0x40
 8008b16:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d014      	beq.n	8008b48 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff f812 	bl	8007b4c <LL_ADC_REG_IsConversionOngoing>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe ffe3 	bl	8007afe <LL_ADC_IsDisableOngoing>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d104      	bne.n	8008b48 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ffee 	bl	8007b24 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d014      	beq.n	8008b78 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff f821 	bl	8007b9a <LL_ADC_INJ_IsConversionOngoing>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00c      	beq.n	8008b78 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe ffcb 	bl	8007afe <LL_ADC_IsDisableOngoing>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d104      	bne.n	8008b78 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fffd 	bl	8007b72 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d005      	beq.n	8008b8a <ADC_ConversionStop+0x10e>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d105      	bne.n	8008b90 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008b84:	230c      	movs	r3, #12
 8008b86:	617b      	str	r3, [r7, #20]
        break;
 8008b88:	e005      	b.n	8008b96 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	617b      	str	r3, [r7, #20]
        break;
 8008b8e:	e002      	b.n	8008b96 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008b90:	2304      	movs	r3, #4
 8008b92:	617b      	str	r3, [r7, #20]
        break;
 8008b94:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008b96:	f7fe fdcf 	bl	8007738 <HAL_GetTick>
 8008b9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b9c:	e01b      	b.n	8008bd6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b9e:	f7fe fdcb 	bl	8007738 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	d914      	bls.n	8008bd6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	f043 0210 	orr.w	r2, r3, #16
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bca:	f043 0201 	orr.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e007      	b.n	8008be6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4013      	ands	r3, r2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1dc      	bne.n	8008b9e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	a33fffff 	.word	0xa33fffff

08008bf4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe ff67 	bl	8007ad8 <LL_ADC_IsEnabled>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d169      	bne.n	8008ce4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <ADC_Enable+0xfc>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c22:	f043 0210 	orr.w	r2, r3, #16
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	f043 0201 	orr.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e055      	b.n	8008ce6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe ff22 	bl	8007a88 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008c44:	482b      	ldr	r0, [pc, #172]	; (8008cf4 <ADC_Enable+0x100>)
 8008c46:	f7fe fdcd 	bl	80077e4 <LL_ADC_GetCommonPathInternalCh>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d013      	beq.n	8008c7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008c54:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <ADC_Enable+0x104>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	099b      	lsrs	r3, r3, #6
 8008c5a:	4a28      	ldr	r2, [pc, #160]	; (8008cfc <ADC_Enable+0x108>)
 8008c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c60:	099b      	lsrs	r3, r3, #6
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	4613      	mov	r3, r2
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008c6e:	e002      	b.n	8008c76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f9      	bne.n	8008c70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c7c:	f7fe fd5c 	bl	8007738 <HAL_GetTick>
 8008c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c82:	e028      	b.n	8008cd6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe ff25 	bl	8007ad8 <LL_ADC_IsEnabled>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fef5 	bl	8007a88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c9e:	f7fe fd4b 	bl	8007738 <HAL_GetTick>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d914      	bls.n	8008cd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d00d      	beq.n	8008cd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	f043 0210 	orr.w	r2, r3, #16
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cca:	f043 0201 	orr.w	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e007      	b.n	8008ce6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d1cf      	bne.n	8008c84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	8000003f 	.word	0x8000003f
 8008cf4:	50040300 	.word	0x50040300
 8008cf8:	20000008 	.word	0x20000008
 8008cfc:	053e2d63 	.word	0x053e2d63

08008d00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fef6 	bl	8007afe <LL_ADC_IsDisableOngoing>
 8008d12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fedd 	bl	8007ad8 <LL_ADC_IsEnabled>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d047      	beq.n	8008db4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d144      	bne.n	8008db4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 030d 	and.w	r3, r3, #13
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10c      	bne.n	8008d52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe feb7 	bl	8007ab0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2203      	movs	r2, #3
 8008d48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d4a:	f7fe fcf5 	bl	8007738 <HAL_GetTick>
 8008d4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d50:	e029      	b.n	8008da6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d56:	f043 0210 	orr.w	r2, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d62:	f043 0201 	orr.w	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e023      	b.n	8008db6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d6e:	f7fe fce3 	bl	8007738 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d914      	bls.n	8008da6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00d      	beq.n	8008da6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	f043 0210 	orr.w	r2, r3, #16
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	f043 0201 	orr.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e007      	b.n	8008db6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1dc      	bne.n	8008d6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d14b      	bne.n	8008e70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ddc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d021      	beq.n	8008e36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fd57 	bl	80078aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d032      	beq.n	8008e68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d12b      	bne.n	8008e68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11f      	bne.n	8008e68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2c:	f043 0201 	orr.w	r2, r3, #1
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	655a      	str	r2, [r3, #84]	; 0x54
 8008e34:	e018      	b.n	8008e68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d111      	bne.n	8008e68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	f043 0201 	orr.w	r2, r3, #1
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7f8 fac1 	bl	80013f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e6e:	e00e      	b.n	8008e8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7f8 faef 	bl	8001460 <HAL_ADC_ErrorCallback>
}
 8008e82:	e004      	b.n	8008e8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff f9e8 	bl	800827a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed0:	f043 0204 	orr.w	r2, r3, #4
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7f8 fac1 	bl	8001460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <LL_ADC_StartCalibration>:
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f02:	4313      	orrs	r3, r2
 8008f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <LL_ADC_IsCalibrationOnGoing>:
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f2c:	d101      	bne.n	8008f32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_ADCEx_Calibration_Start+0x1c>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e04d      	b.n	8008ff8 <HAL_ADCEx_Calibration_Start+0xb8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff fecb 	bl	8008d00 <ADC_Disable>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d136      	bne.n	8008fe2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f7c:	f023 0302 	bic.w	r3, r3, #2
 8008f80:	f043 0202 	orr.w	r2, r3, #2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff ffa9 	bl	8008ee6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008f94:	e014      	b.n	8008fc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8008fa2:	d30d      	bcc.n	8008fc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa8:	f023 0312 	bic.w	r3, r3, #18
 8008fac:	f043 0210 	orr.w	r2, r3, #16
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e01b      	b.n	8008ff8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff ffa7 	bl	8008f18 <LL_ADC_IsCalibrationOnGoing>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e2      	bne.n	8008f96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd4:	f023 0303 	bic.w	r3, r3, #3
 8008fd8:	f043 0201 	orr.w	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
 8008fe0:	e005      	b.n	8008fee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	f043 0210 	orr.w	r2, r3, #16
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <__NVIC_SetPriorityGrouping+0x44>)
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009080:	4013      	ands	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800908c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009096:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <__NVIC_SetPriorityGrouping+0x44>)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	60d3      	str	r3, [r2, #12]
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	e000ed00 	.word	0xe000ed00

080090ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <__NVIC_GetPriorityGrouping+0x18>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	0a1b      	lsrs	r3, r3, #8
 80090b6:	f003 0307 	and.w	r3, r3, #7
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	e000ed00 	.word	0xe000ed00

080090c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db0b      	blt.n	80090f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	f003 021f 	and.w	r2, r3, #31
 80090e0:	4907      	ldr	r1, [pc, #28]	; (8009100 <__NVIC_EnableIRQ+0x38>)
 80090e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	2001      	movs	r0, #1
 80090ea:	fa00 f202 	lsl.w	r2, r0, r2
 80090ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000e100 	.word	0xe000e100

08009104 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db12      	blt.n	800913c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	f003 021f 	and.w	r2, r3, #31
 800911c:	490a      	ldr	r1, [pc, #40]	; (8009148 <__NVIC_DisableIRQ+0x44>)
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2001      	movs	r0, #1
 8009126:	fa00 f202 	lsl.w	r2, r0, r2
 800912a:	3320      	adds	r3, #32
 800912c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009130:	f3bf 8f4f 	dsb	sy
}
 8009134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009136:	f3bf 8f6f 	isb	sy
}
 800913a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	e000e100 	.word	0xe000e100

0800914c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915c:	2b00      	cmp	r3, #0
 800915e:	db0a      	blt.n	8009176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	b2da      	uxtb	r2, r3
 8009164:	490c      	ldr	r1, [pc, #48]	; (8009198 <__NVIC_SetPriority+0x4c>)
 8009166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916a:	0112      	lsls	r2, r2, #4
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	440b      	add	r3, r1
 8009170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009174:	e00a      	b.n	800918c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4908      	ldr	r1, [pc, #32]	; (800919c <__NVIC_SetPriority+0x50>)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	3b04      	subs	r3, #4
 8009184:	0112      	lsls	r2, r2, #4
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	440b      	add	r3, r1
 800918a:	761a      	strb	r2, [r3, #24]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	e000e100 	.word	0xe000e100
 800919c:	e000ed00 	.word	0xe000ed00

080091a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f1c3 0307 	rsb	r3, r3, #7
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	bf28      	it	cs
 80091be:	2304      	movcs	r3, #4
 80091c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3304      	adds	r3, #4
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	d902      	bls.n	80091d0 <NVIC_EncodePriority+0x30>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	3b03      	subs	r3, #3
 80091ce:	e000      	b.n	80091d2 <NVIC_EncodePriority+0x32>
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	43da      	mvns	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	401a      	ands	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091e8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	fa01 f303 	lsl.w	r3, r1, r3
 80091f2:	43d9      	mvns	r1, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f8:	4313      	orrs	r3, r2
         );
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3724      	adds	r7, #36	; 0x24
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ff28 	bl	8009064 <__NVIC_SetPriorityGrouping>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800922e:	f7ff ff3d 	bl	80090ac <__NVIC_GetPriorityGrouping>
 8009232:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	6978      	ldr	r0, [r7, #20]
 800923a:	f7ff ffb1 	bl	80091a0 <NVIC_EncodePriority>
 800923e:	4602      	mov	r2, r0
 8009240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff ff80 	bl	800914c <__NVIC_SetPriority>
}
 800924c:	bf00      	nop
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800925e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff ff30 	bl	80090c8 <__NVIC_EnableIRQ>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800927a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ff40 	bl	8009104 <__NVIC_DisableIRQ>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e098      	b.n	80093d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	4b4d      	ldr	r3, [pc, #308]	; (80093dc <HAL_DMA_Init+0x150>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d80f      	bhi.n	80092ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b4b      	ldr	r3, [pc, #300]	; (80093e0 <HAL_DMA_Init+0x154>)
 80092b2:	4413      	add	r3, r2
 80092b4:	4a4b      	ldr	r2, [pc, #300]	; (80093e4 <HAL_DMA_Init+0x158>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	009a      	lsls	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a48      	ldr	r2, [pc, #288]	; (80093e8 <HAL_DMA_Init+0x15c>)
 80092c6:	641a      	str	r2, [r3, #64]	; 0x40
 80092c8:	e00e      	b.n	80092e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	4b46      	ldr	r3, [pc, #280]	; (80093ec <HAL_DMA_Init+0x160>)
 80092d2:	4413      	add	r3, r2
 80092d4:	4a43      	ldr	r2, [pc, #268]	; (80093e4 <HAL_DMA_Init+0x158>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	009a      	lsls	r2, r3, #2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a42      	ldr	r2, [pc, #264]	; (80093f0 <HAL_DMA_Init+0x164>)
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800930c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009342:	d039      	beq.n	80093b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	4a27      	ldr	r2, [pc, #156]	; (80093e8 <HAL_DMA_Init+0x15c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d11a      	bne.n	8009384 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800934e:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <HAL_DMA_Init+0x168>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	f003 031c 	and.w	r3, r3, #28
 800935a:	210f      	movs	r1, #15
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	43db      	mvns	r3, r3
 8009362:	4924      	ldr	r1, [pc, #144]	; (80093f4 <HAL_DMA_Init+0x168>)
 8009364:	4013      	ands	r3, r2
 8009366:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009368:	4b22      	ldr	r3, [pc, #136]	; (80093f4 <HAL_DMA_Init+0x168>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6859      	ldr	r1, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009374:	f003 031c 	and.w	r3, r3, #28
 8009378:	fa01 f303 	lsl.w	r3, r1, r3
 800937c:	491d      	ldr	r1, [pc, #116]	; (80093f4 <HAL_DMA_Init+0x168>)
 800937e:	4313      	orrs	r3, r2
 8009380:	600b      	str	r3, [r1, #0]
 8009382:	e019      	b.n	80093b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009384:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <HAL_DMA_Init+0x16c>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938c:	f003 031c 	and.w	r3, r3, #28
 8009390:	210f      	movs	r1, #15
 8009392:	fa01 f303 	lsl.w	r3, r1, r3
 8009396:	43db      	mvns	r3, r3
 8009398:	4917      	ldr	r1, [pc, #92]	; (80093f8 <HAL_DMA_Init+0x16c>)
 800939a:	4013      	ands	r3, r2
 800939c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800939e:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <HAL_DMA_Init+0x16c>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6859      	ldr	r1, [r3, #4]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093aa:	f003 031c 	and.w	r3, r3, #28
 80093ae:	fa01 f303 	lsl.w	r3, r1, r3
 80093b2:	4911      	ldr	r1, [pc, #68]	; (80093f8 <HAL_DMA_Init+0x16c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	40020407 	.word	0x40020407
 80093e0:	bffdfff8 	.word	0xbffdfff8
 80093e4:	cccccccd 	.word	0xcccccccd
 80093e8:	40020000 	.word	0x40020000
 80093ec:	bffdfbf8 	.word	0xbffdfbf8
 80093f0:	40020400 	.word	0x40020400
 80093f4:	400200a8 	.word	0x400200a8
 80093f8:	400204a8 	.word	0x400204a8

080093fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_DMA_Start_IT+0x20>
 8009418:	2302      	movs	r3, #2
 800941a:	e04b      	b.n	80094b4 <HAL_DMA_Start_IT+0xb8>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	d13a      	bne.n	80094a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0201 	bic.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 f96d 	bl	8009734 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 020e 	orr.w	r2, r2, #14
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	e00f      	b.n	8009494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0204 	bic.w	r2, r2, #4
 8009482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 020a 	orr.w	r2, r2, #10
 8009492:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	e005      	b.n	80094b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80094ae:	2302      	movs	r3, #2
 80094b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d008      	beq.n	80094e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e022      	b.n	800952c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 020e 	bic.w	r2, r2, #14
 80094f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950a:	f003 021c 	and.w	r2, r3, #28
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	2101      	movs	r1, #1
 8009514:	fa01 f202 	lsl.w	r2, r1, r2
 8009518:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d005      	beq.n	800955c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2204      	movs	r2, #4
 8009554:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]
 800955a:	e029      	b.n	80095b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 020e 	bic.w	r2, r2, #14
 800956a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0201 	bic.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	f003 021c 	and.w	r2, r3, #28
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f202 	lsl.w	r2, r1, r2
 800958e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
    }
  }
  return status;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	f003 031c 	and.w	r3, r3, #28
 80095da:	2204      	movs	r2, #4
 80095dc:	409a      	lsls	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d026      	beq.n	8009634 <HAL_DMA_IRQHandler+0x7a>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d021      	beq.n	8009634 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d107      	bne.n	800960e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0204 	bic.w	r2, r2, #4
 800960c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009612:	f003 021c 	and.w	r2, r3, #28
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	2104      	movs	r1, #4
 800961c:	fa01 f202 	lsl.w	r2, r1, r2
 8009620:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	2b00      	cmp	r3, #0
 8009628:	d071      	beq.n	800970e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009632:	e06c      	b.n	800970e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009638:	f003 031c 	and.w	r3, r3, #28
 800963c:	2202      	movs	r2, #2
 800963e:	409a      	lsls	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4013      	ands	r3, r2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d02e      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xec>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d029      	beq.n	80096a6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10b      	bne.n	8009678 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 020a 	bic.w	r2, r2, #10
 800966e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967c:	f003 021c 	and.w	r2, r3, #28
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	2102      	movs	r1, #2
 8009686:	fa01 f202 	lsl.w	r2, r1, r2
 800968a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d038      	beq.n	800970e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80096a4:	e033      	b.n	800970e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096aa:	f003 031c 	and.w	r3, r3, #28
 80096ae:	2208      	movs	r2, #8
 80096b0:	409a      	lsls	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4013      	ands	r3, r2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d02a      	beq.n	8009710 <HAL_DMA_IRQHandler+0x156>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d025      	beq.n	8009710 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 020e 	bic.w	r2, r2, #14
 80096d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f003 021c 	and.w	r2, r3, #28
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	2101      	movs	r1, #1
 80096e2:	fa01 f202 	lsl.w	r2, r1, r2
 80096e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800970e:	bf00      	nop
 8009710:	bf00      	nop
}
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009726:	b2db      	uxtb	r3, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009746:	f003 021c 	and.w	r2, r3, #28
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	2101      	movs	r1, #1
 8009750:	fa01 f202 	lsl.w	r2, r1, r2
 8009754:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b10      	cmp	r3, #16
 8009764:	d108      	bne.n	8009778 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009776:	e007      	b.n	8009788 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	60da      	str	r2, [r3, #12]
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097a2:	e148      	b.n	8009a36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	2101      	movs	r1, #1
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	4013      	ands	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 813a 	beq.w	8009a30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d005      	beq.n	80097d4 <HAL_GPIO_Init+0x40>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d130      	bne.n	8009836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	2203      	movs	r2, #3
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	43db      	mvns	r3, r3
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4013      	ands	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800980a:	2201      	movs	r2, #1
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	fa02 f303 	lsl.w	r3, r2, r3
 8009812:	43db      	mvns	r3, r3
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4013      	ands	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	f003 0201 	and.w	r2, r3, #1
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	fa02 f303 	lsl.w	r3, r2, r3
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f003 0303 	and.w	r3, r3, #3
 800983e:	2b03      	cmp	r3, #3
 8009840:	d017      	beq.n	8009872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	2203      	movs	r2, #3
 800984e:	fa02 f303 	lsl.w	r3, r2, r3
 8009852:	43db      	mvns	r3, r3
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4013      	ands	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	fa02 f303 	lsl.w	r3, r2, r3
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d123      	bne.n	80098c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	08da      	lsrs	r2, r3, #3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3208      	adds	r2, #8
 8009886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	220f      	movs	r2, #15
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	43db      	mvns	r3, r3
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4013      	ands	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	691a      	ldr	r2, [r3, #16]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	08da      	lsrs	r2, r3, #3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3208      	adds	r2, #8
 80098c0:	6939      	ldr	r1, [r7, #16]
 80098c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	2203      	movs	r2, #3
 80098d2:	fa02 f303 	lsl.w	r3, r2, r3
 80098d6:	43db      	mvns	r3, r3
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4013      	ands	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f003 0203 	and.w	r2, r3, #3
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	fa02 f303 	lsl.w	r3, r2, r3
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 8094 	beq.w	8009a30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009908:	4b52      	ldr	r3, [pc, #328]	; (8009a54 <HAL_GPIO_Init+0x2c0>)
 800990a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800990c:	4a51      	ldr	r2, [pc, #324]	; (8009a54 <HAL_GPIO_Init+0x2c0>)
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	6613      	str	r3, [r2, #96]	; 0x60
 8009914:	4b4f      	ldr	r3, [pc, #316]	; (8009a54 <HAL_GPIO_Init+0x2c0>)
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009920:	4a4d      	ldr	r2, [pc, #308]	; (8009a58 <HAL_GPIO_Init+0x2c4>)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	089b      	lsrs	r3, r3, #2
 8009926:	3302      	adds	r3, #2
 8009928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f003 0303 	and.w	r3, r3, #3
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	220f      	movs	r2, #15
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	43db      	mvns	r3, r3
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4013      	ands	r3, r2
 8009942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800994a:	d00d      	beq.n	8009968 <HAL_GPIO_Init+0x1d4>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a43      	ldr	r2, [pc, #268]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d007      	beq.n	8009964 <HAL_GPIO_Init+0x1d0>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a42      	ldr	r2, [pc, #264]	; (8009a60 <HAL_GPIO_Init+0x2cc>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d101      	bne.n	8009960 <HAL_GPIO_Init+0x1cc>
 800995c:	2302      	movs	r3, #2
 800995e:	e004      	b.n	800996a <HAL_GPIO_Init+0x1d6>
 8009960:	2307      	movs	r3, #7
 8009962:	e002      	b.n	800996a <HAL_GPIO_Init+0x1d6>
 8009964:	2301      	movs	r3, #1
 8009966:	e000      	b.n	800996a <HAL_GPIO_Init+0x1d6>
 8009968:	2300      	movs	r3, #0
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	f002 0203 	and.w	r2, r2, #3
 8009970:	0092      	lsls	r2, r2, #2
 8009972:	4093      	lsls	r3, r2
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4313      	orrs	r3, r2
 8009978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800997a:	4937      	ldr	r1, [pc, #220]	; (8009a58 <HAL_GPIO_Init+0x2c4>)
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	089b      	lsrs	r3, r3, #2
 8009980:	3302      	adds	r3, #2
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009988:	4b36      	ldr	r3, [pc, #216]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	43db      	mvns	r3, r3
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4013      	ands	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80099ac:	4a2d      	ldr	r2, [pc, #180]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80099b2:	4b2c      	ldr	r3, [pc, #176]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	43db      	mvns	r3, r3
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4013      	ands	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099d6:	4a23      	ldr	r2, [pc, #140]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80099dc:	4b21      	ldr	r3, [pc, #132]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	43db      	mvns	r3, r3
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4013      	ands	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a00:	4a18      	ldr	r2, [pc, #96]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	43db      	mvns	r3, r3
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4013      	ands	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a2a:	4a0e      	ldr	r2, [pc, #56]	; (8009a64 <HAL_GPIO_Init+0x2d0>)
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	3301      	adds	r3, #1
 8009a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f47f aeaf 	bne.w	80097a4 <HAL_GPIO_Init+0x10>
  }
}
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	40021000 	.word	0x40021000
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	48000400 	.word	0x48000400
 8009a60:	48000800 	.word	0x48000800
 8009a64:	40010400 	.word	0x40010400

08009a68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009a76:	e0ab      	b.n	8009bd0 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009a78:	2201      	movs	r2, #1
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	4013      	ands	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 809e 	beq.w	8009bca <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009a8e:	4a57      	ldr	r2, [pc, #348]	; (8009bec <HAL_GPIO_DeInit+0x184>)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	3302      	adds	r3, #2
 8009a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a9a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	220f      	movs	r2, #15
 8009aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4013      	ands	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ab6:	d00d      	beq.n	8009ad4 <HAL_GPIO_DeInit+0x6c>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a4d      	ldr	r2, [pc, #308]	; (8009bf0 <HAL_GPIO_DeInit+0x188>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d007      	beq.n	8009ad0 <HAL_GPIO_DeInit+0x68>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a4c      	ldr	r2, [pc, #304]	; (8009bf4 <HAL_GPIO_DeInit+0x18c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d101      	bne.n	8009acc <HAL_GPIO_DeInit+0x64>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e004      	b.n	8009ad6 <HAL_GPIO_DeInit+0x6e>
 8009acc:	2307      	movs	r3, #7
 8009ace:	e002      	b.n	8009ad6 <HAL_GPIO_DeInit+0x6e>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <HAL_GPIO_DeInit+0x6e>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	f002 0203 	and.w	r2, r2, #3
 8009adc:	0092      	lsls	r2, r2, #2
 8009ade:	4093      	lsls	r3, r2
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d132      	bne.n	8009b4c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009ae6:	4b44      	ldr	r3, [pc, #272]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	4942      	ldr	r1, [pc, #264]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009af0:	4013      	ands	r3, r2
 8009af2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009af4:	4b40      	ldr	r3, [pc, #256]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	43db      	mvns	r3, r3
 8009afc:	493e      	ldr	r1, [pc, #248]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009b02:	4b3d      	ldr	r3, [pc, #244]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	493b      	ldr	r1, [pc, #236]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8009b10:	4b39      	ldr	r3, [pc, #228]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	43db      	mvns	r3, r3
 8009b18:	4937      	ldr	r1, [pc, #220]	; (8009bf8 <HAL_GPIO_DeInit+0x190>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	220f      	movs	r2, #15
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009b2e:	4a2f      	ldr	r2, [pc, #188]	; (8009bec <HAL_GPIO_DeInit+0x184>)
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	089b      	lsrs	r3, r3, #2
 8009b34:	3302      	adds	r3, #2
 8009b36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	43da      	mvns	r2, r3
 8009b3e:	482b      	ldr	r0, [pc, #172]	; (8009bec <HAL_GPIO_DeInit+0x184>)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	089b      	lsrs	r3, r3, #2
 8009b44:	400a      	ands	r2, r1
 8009b46:	3302      	adds	r3, #2
 8009b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	2103      	movs	r1, #3
 8009b56:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	08da      	lsrs	r2, r3, #3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3208      	adds	r2, #8
 8009b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	220f      	movs	r2, #15
 8009b76:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	08d2      	lsrs	r2, r2, #3
 8009b80:	4019      	ands	r1, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3208      	adds	r2, #8
 8009b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689a      	ldr	r2, [r3, #8]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	2103      	movs	r1, #3
 8009b94:	fa01 f303 	lsl.w	r3, r1, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	401a      	ands	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	43db      	mvns	r3, r3
 8009bae:	401a      	ands	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	2103      	movs	r1, #3
 8009bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	401a      	ands	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f47f af4d 	bne.w	8009a78 <HAL_GPIO_DeInit+0x10>
  }
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	40010000 	.word	0x40010000
 8009bf0:	48000400 	.word	0x48000400
 8009bf4:	48000800 	.word	0x48000800
 8009bf8:	40010400 	.word	0x40010400

08009bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691a      	ldr	r2, [r3, #16]
 8009c0c:	887b      	ldrh	r3, [r7, #2]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
 8009c18:	e001      	b.n	8009c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	807b      	strh	r3, [r7, #2]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c3c:	787b      	ldrb	r3, [r7, #1]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c42:	887a      	ldrh	r2, [r7, #2]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c48:	e002      	b.n	8009c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c4a:	887a      	ldrh	r2, [r7, #2]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c6e:	887a      	ldrh	r2, [r7, #2]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4013      	ands	r3, r2
 8009c74:	041a      	lsls	r2, r3, #16
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	43d9      	mvns	r1, r3
 8009c7a:	887b      	ldrh	r3, [r7, #2]
 8009c7c:	400b      	ands	r3, r1
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	619a      	str	r2, [r3, #24]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e081      	b.n	8009da6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7f8 f890 	bl	8001ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2224      	movs	r2, #36	; 0x24
 8009cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f022 0201 	bic.w	r2, r2, #1
 8009cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ce0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009cf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d107      	bne.n	8009d0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d06:	609a      	str	r2, [r3, #8]
 8009d08:	e006      	b.n	8009d18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009d16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d104      	bne.n	8009d2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6812      	ldr	r2, [r2, #0]
 8009d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691a      	ldr	r2, [r3, #16]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	69d9      	ldr	r1, [r3, #28]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a1a      	ldr	r2, [r3, #32]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	817b      	strh	r3, [r7, #10]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d153      	bne.n	8009e78 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dde:	d101      	bne.n	8009de4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8009de0:	2302      	movs	r3, #2
 8009de2:	e04a      	b.n	8009e7a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_I2C_Master_Transmit_IT+0x42>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e043      	b.n	8009e7a <HAL_I2C_Master_Transmit_IT+0xca>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2221      	movs	r2, #33	; 0x21
 8009dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2210      	movs	r2, #16
 8009e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	893a      	ldrh	r2, [r7, #8]
 8009e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4a19      	ldr	r2, [pc, #100]	; (8009e84 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8009e20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8009e26:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2bff      	cmp	r3, #255	; 0xff
 8009e30:	d906      	bls.n	8009e40 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	e007      	b.n	8009e50 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e4e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	8979      	ldrh	r1, [r7, #10]
 8009e58:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <HAL_I2C_Master_Transmit_IT+0xdc>)
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f001 fbe4 	bl	800b62c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f001 fc0e 	bl	800b690 <I2C_Enable_IRQ>

    return HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	ffff0000 	.word	0xffff0000
 8009e88:	0800a4ab 	.word	0x0800a4ab
 8009e8c:	80002000 	.word	0x80002000

08009e90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	f040 80f1 	bne.w	800a094 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec0:	d101      	bne.n	8009ec6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e0e7      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d101      	bne.n	8009ed4 <HAL_I2C_IsDeviceReady+0x44>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	e0e0      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2224      	movs	r2, #36	; 0x24
 8009ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d107      	bne.n	8009f02 <HAL_I2C_IsDeviceReady+0x72>
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009efc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f00:	e004      	b.n	8009f0c <HAL_I2C_IsDeviceReady+0x7c>
 8009f02:	897b      	ldrh	r3, [r7, #10]
 8009f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f08:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	6812      	ldr	r2, [r2, #0]
 8009f10:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009f12:	f7fd fc11 	bl	8007738 <HAL_GetTick>
 8009f16:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	bf0c      	ite	eq
 8009f26:	2301      	moveq	r3, #1
 8009f28:	2300      	movne	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	bf0c      	ite	eq
 8009f3c:	2301      	moveq	r3, #1
 8009f3e:	2300      	movne	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009f44:	e034      	b.n	8009fb0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d01a      	beq.n	8009f84 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f4e:	f7fd fbf3 	bl	8007738 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d302      	bcc.n	8009f64 <HAL_I2C_IsDeviceReady+0xd4>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10f      	bne.n	8009f84 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	f043 0220 	orr.w	r2, r3, #32
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e088      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	bf0c      	ite	eq
 8009fa8:	2301      	moveq	r3, #1
 8009faa:	2300      	movne	r3, #0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009fb0:	7ffb      	ldrb	r3, [r7, #31]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <HAL_I2C_IsDeviceReady+0x12c>
 8009fb6:	7fbb      	ldrb	r3, [r7, #30]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0c4      	beq.n	8009f46 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	f003 0310 	and.w	r3, r3, #16
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d01a      	beq.n	800a000 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2120      	movs	r1, #32
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f001 fae8 	bl	800b5aa <I2C_WaitOnFlagUntilTimeout>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e058      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e04a      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	2120      	movs	r1, #32
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f001 facd 	bl	800b5aa <I2C_WaitOnFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e03d      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2210      	movs	r2, #16
 800a020:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2220      	movs	r2, #32
 800a028:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d118      	bne.n	800a064 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a040:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	2120      	movs	r1, #32
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f001 faac 	bl	800b5aa <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e01c      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2220      	movs	r2, #32
 800a062:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3301      	adds	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	f63f af3b 	bhi.w	8009eea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2220      	movs	r2, #32
 800a078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	f043 0220 	orr.w	r2, r3, #32
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800a094:	2302      	movs	r3, #2
  }
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	817b      	strh	r3, [r7, #10]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800a0b4:	4b3a      	ldr	r3, [pc, #232]	; (800a1a0 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
 800a0b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d167      	bne.n	800a194 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_I2C_Master_Seq_Transmit_IT+0x32>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e061      	b.n	800a196 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2221      	movs	r2, #33	; 0x21
 800a0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2210      	movs	r2, #16
 800a0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	893a      	ldrh	r2, [r7, #8]
 800a0fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a3a      	ldr	r2, [r7, #32]
 800a100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4a27      	ldr	r2, [pc, #156]	; (800a1a4 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
 800a106:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	2bff      	cmp	r3, #255	; 0xff
 800a110:	d906      	bls.n	800a120 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e007      	b.n	800a130 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a134:	2b11      	cmp	r3, #17
 800a136:	d10e      	bne.n	800a156 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	2baa      	cmp	r3, #170	; 0xaa
 800a13c:	d003      	beq.n	800a146 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a144:	d101      	bne.n	800a14a <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 800a14a:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	e00a      	b.n	800a16c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f001 fb62 	bl	800b820 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a160:	b29b      	uxth	r3, r3
 800a162:	2bff      	cmp	r3, #255	; 0xff
 800a164:	d802      	bhi.n	800a16c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a170:	b2da      	uxtb	r2, r3
 800a172:	8979      	ldrh	r1, [r7, #10]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f001 fa56 	bl	800b62c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a188:	2101      	movs	r1, #1
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f001 fa80 	bl	800b690 <I2C_Enable_IRQ>

    return HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e000      	b.n	800a196 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	80002000 	.word	0x80002000
 800a1a4:	0800a4ab 	.word	0x0800a4ab

0800a1a8 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	817b      	strh	r3, [r7, #10]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800a1bc:	4b3a      	ldr	r3, [pc, #232]	; (800a2a8 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 800a1be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d167      	bne.n	800a29c <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_I2C_Master_Seq_Receive_IT+0x32>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e061      	b.n	800a29e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2222      	movs	r2, #34	; 0x22
 800a1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	893a      	ldrh	r2, [r7, #8]
 800a202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a3a      	ldr	r2, [r7, #32]
 800a208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4a27      	ldr	r2, [pc, #156]	; (800a2ac <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 800a20e:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a214:	b29b      	uxth	r3, r3
 800a216:	2bff      	cmp	r3, #255	; 0xff
 800a218:	d906      	bls.n	800a228 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	22ff      	movs	r2, #255	; 0xff
 800a21e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	e007      	b.n	800a238 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	2b12      	cmp	r3, #18
 800a23e:	d10e      	bne.n	800a25e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	2baa      	cmp	r3, #170	; 0xaa
 800a244:	d003      	beq.n	800a24e <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800a24c:	d101      	bne.n	800a252 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 800a24e:	2301      	movs	r3, #1
 800a250:	e000      	b.n	800a254 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 800a252:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	e00a      	b.n	800a274 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f001 fade 	bl	800b820 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2bff      	cmp	r3, #255	; 0xff
 800a26c:	d802      	bhi.n	800a274 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	8979      	ldrh	r1, [r7, #10]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f001 f9d2 	bl	800b62c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a290:	2102      	movs	r1, #2
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f001 f9fc 	bl	800b690 <I2C_Enable_IRQ>

    return HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	e000      	b.n	800a29e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800a29c:	2302      	movs	r3, #2
  }
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	80002400 	.word	0x80002400
 800a2ac:	0800a4ab 	.word	0x0800a4ab

0800a2b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	68f9      	ldr	r1, [r7, #12]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	0a1b      	lsrs	r3, r3, #8
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d010      	beq.n	800a32a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	09db      	lsrs	r3, r3, #7
 800a30c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00a      	beq.n	800a32a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a318:	f043 0201 	orr.w	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a328:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	0a9b      	lsrs	r3, r3, #10
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d010      	beq.n	800a358 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	09db      	lsrs	r3, r3, #7
 800a33a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a346:	f043 0208 	orr.w	r2, r3, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a356:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	0a5b      	lsrs	r3, r3, #9
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d010      	beq.n	800a386 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	09db      	lsrs	r3, r3, #7
 800a368:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00a      	beq.n	800a386 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a374:	f043 0202 	orr.w	r2, r3, #2
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a384:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 030b 	and.w	r3, r3, #11
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 ffcd 	bl	800b338 <I2C_ITError>
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a3ea:	bf00      	nop
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
 800a402:	4613      	mov	r3, r2
 800a404:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a442:	bf00      	nop
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a456:	bf00      	nop
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a46a:	bf00      	nop
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a476:	b480      	push	{r7}
 800a478:	b083      	sub	sp, #12
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a484:	b2db      	uxtb	r3, r3
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b088      	sub	sp, #32
 800a4ae:	af02      	add	r7, sp, #8
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d101      	bne.n	800a4c8 <I2C_Master_ISR_IT+0x1e>
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	e114      	b.n	800a6f2 <I2C_Master_ISR_IT+0x248>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	091b      	lsrs	r3, r3, #4
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	091b      	lsrs	r3, r3, #4
 800a4e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00d      	beq.n	800a504 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2210      	movs	r2, #16
 800a4ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f4:	f043 0204 	orr.w	r2, r3, #4
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f001 f812 	bl	800b526 <I2C_Flush_TXDR>
 800a502:	e0e1      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	089b      	lsrs	r3, r3, #2
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d023      	beq.n	800a558 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	089b      	lsrs	r3, r3, #2
 800a514:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d01d      	beq.n	800a558 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f023 0304 	bic.w	r3, r3, #4
 800a522:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a540:	3b01      	subs	r3, #1
 800a542:	b29a      	uxth	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	3b01      	subs	r3, #1
 800a550:	b29a      	uxth	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a556:	e0b7      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01e      	beq.n	800a5a2 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d018      	beq.n	800a5a2 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	781a      	ldrb	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5a0:	e092      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	09db      	lsrs	r3, r3, #7
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d05d      	beq.n	800a66a <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	099b      	lsrs	r3, r3, #6
 800a5b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d057      	beq.n	800a66a <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d040      	beq.n	800a646 <I2C_Master_ISR_IT+0x19c>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d13c      	bne.n	800a646 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5d8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2bff      	cmp	r3, #255	; 0xff
 800a5e2:	d90e      	bls.n	800a602 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	22ff      	movs	r2, #255	; 0xff
 800a5e8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	8a79      	ldrh	r1, [r7, #18]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f001 f816 	bl	800b62c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a600:	e032      	b.n	800a668 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a606:	b29a      	uxth	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a614:	d00b      	beq.n	800a62e <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	8a79      	ldrh	r1, [r7, #18]
 800a622:	2000      	movs	r0, #0
 800a624:	9000      	str	r0, [sp, #0]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f001 f800 	bl	800b62c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a62c:	e01c      	b.n	800a668 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a632:	b2da      	uxtb	r2, r3
 800a634:	8a79      	ldrh	r1, [r7, #18]
 800a636:	2300      	movs	r3, #0
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fff4 	bl	800b62c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a644:	e010      	b.n	800a668 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a654:	d003      	beq.n	800a65e <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fba9 	bl	800adae <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a65c:	e034      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a65e:	2140      	movs	r1, #64	; 0x40
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 fe69 	bl	800b338 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a666:	e02f      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
 800a668:	e02e      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	099b      	lsrs	r3, r3, #6
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d028      	beq.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	099b      	lsrs	r3, r3, #6
 800a67a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d022      	beq.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a686:	b29b      	uxth	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d119      	bne.n	800a6c0 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a69a:	d015      	beq.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a6a4:	d108      	bne.n	800a6b8 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6b4:	605a      	str	r2, [r3, #4]
 800a6b6:	e007      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fb78 	bl	800adae <I2C_ITMasterSeqCplt>
 800a6be:	e003      	b.n	800a6c8 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a6c0:	2140      	movs	r1, #64	; 0x40
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 fe38 	bl	800b338 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d009      	beq.n	800a6e8 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	095b      	lsrs	r3, r3, #5
 800a6d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a6e0:	6979      	ldr	r1, [r7, #20]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fbfe 	bl	800aee4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <I2C_Slave_ISR_IT+0x24>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e0ec      	b.n	800a8f8 <I2C_Slave_ISR_IT+0x1fe>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	095b      	lsrs	r3, r3, #5
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a73e:	6939      	ldr	r1, [r7, #16]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fc99 	bl	800b078 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d04d      	beq.n	800a7ee <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	091b      	lsrs	r3, r3, #4
 800a756:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d047      	beq.n	800a7ee <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d128      	bne.n	800a7ba <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b28      	cmp	r3, #40	; 0x28
 800a772:	d108      	bne.n	800a786 <I2C_Slave_ISR_IT+0x8c>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a77a:	d104      	bne.n	800a786 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a77c:	6939      	ldr	r1, [r7, #16]
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fd84 	bl	800b28c <I2C_ITListenCplt>
 800a784:	e032      	b.n	800a7ec <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b29      	cmp	r3, #41	; 0x29
 800a790:	d10e      	bne.n	800a7b0 <I2C_Slave_ISR_IT+0xb6>
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a798:	d00a      	beq.n	800a7b0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2210      	movs	r2, #16
 800a7a0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 febf 	bl	800b526 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fb3d 	bl	800ae28 <I2C_ITSlaveSeqCplt>
 800a7ae:	e01d      	b.n	800a7ec <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2210      	movs	r2, #16
 800a7b6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a7b8:	e096      	b.n	800a8e8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c6:	f043 0204 	orr.w	r2, r3, #4
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d004      	beq.n	800a7de <I2C_Slave_ISR_IT+0xe4>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7da:	f040 8085 	bne.w	800a8e8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fda7 	bl	800b338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a7ea:	e07d      	b.n	800a8e8 <I2C_Slave_ISR_IT+0x1ee>
 800a7ec:	e07c      	b.n	800a8e8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	089b      	lsrs	r3, r3, #2
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d030      	beq.n	800a85c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	089b      	lsrs	r3, r3, #2
 800a7fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02a      	beq.n	800a85c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d018      	beq.n	800a842 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a838:	b29b      	uxth	r3, r3
 800a83a:	3b01      	subs	r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a846:	b29b      	uxth	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d14f      	bne.n	800a8ec <I2C_Slave_ISR_IT+0x1f2>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a852:	d04b      	beq.n	800a8ec <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 fae7 	bl	800ae28 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a85a:	e047      	b.n	800a8ec <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	08db      	lsrs	r3, r3, #3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a874:	6939      	ldr	r1, [r7, #16]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fa15 	bl	800aca6 <I2C_ITAddrCplt>
 800a87c:	e037      	b.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	085b      	lsrs	r3, r3, #1
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d031      	beq.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	085b      	lsrs	r3, r3, #1
 800a88e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a892:	2b00      	cmp	r3, #0
 800a894:	d02b      	beq.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d018      	beq.n	800a8d2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	781a      	ldrb	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	851a      	strh	r2, [r3, #40]	; 0x28
 800a8d0:	e00d      	b.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8d8:	d002      	beq.n	800a8e0 <I2C_Slave_ISR_IT+0x1e6>
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 faa1 	bl	800ae28 <I2C_ITSlaveSeqCplt>
 800a8e6:	e002      	b.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a8ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a912:	2b01      	cmp	r3, #1
 800a914:	d101      	bne.n	800a91a <I2C_Master_ISR_DMA+0x1a>
 800a916:	2302      	movs	r3, #2
 800a918:	e0e1      	b.n	800aade <I2C_Master_ISR_DMA+0x1de>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	091b      	lsrs	r3, r3, #4
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d017      	beq.n	800a95e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	091b      	lsrs	r3, r3, #4
 800a932:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a936:	2b00      	cmp	r3, #0
 800a938:	d011      	beq.n	800a95e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2210      	movs	r2, #16
 800a940:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a946:	f043 0204 	orr.w	r2, r3, #4
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a94e:	2120      	movs	r1, #32
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fe9d 	bl	800b690 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 fde5 	bl	800b526 <I2C_Flush_TXDR>
 800a95c:	e0ba      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	09db      	lsrs	r3, r3, #7
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d072      	beq.n	800aa50 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	099b      	lsrs	r3, r3, #6
 800a96e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a972:	2b00      	cmp	r3, #0
 800a974:	d06c      	beq.n	800aa50 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a984:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d04e      	beq.n	800aa2e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	b29b      	uxth	r3, r3
 800a998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a99c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d906      	bls.n	800a9b6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	22ff      	movs	r2, #255	; 0xff
 800a9ac:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a9ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e010      	b.n	800a9d8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9c8:	d003      	beq.n	800a9d2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e002      	b.n	800a9d8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a9d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9d6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	8a79      	ldrh	r1, [r7, #18]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 fe20 	bl	800b62c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b22      	cmp	r3, #34	; 0x22
 800aa08:	d108      	bne.n	800aa1c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aa1a:	e05b      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aa2c:	e052      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa3c:	d003      	beq.n	800aa46 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 f9b5 	bl	800adae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800aa44:	e046      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aa46:	2140      	movs	r1, #64	; 0x40
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 fc75 	bl	800b338 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800aa4e:	e041      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	099b      	lsrs	r3, r3, #6
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d029      	beq.n	800aab0 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	099b      	lsrs	r3, r3, #6
 800aa60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d023      	beq.n	800aab0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d119      	bne.n	800aaa6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa80:	d027      	beq.n	800aad2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa8a:	d108      	bne.n	800aa9e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa9a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800aa9c:	e019      	b.n	800aad2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 f985 	bl	800adae <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800aaa4:	e015      	b.n	800aad2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aaa6:	2140      	movs	r1, #64	; 0x40
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fc45 	bl	800b338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800aaae:	e010      	b.n	800aad2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	095b      	lsrs	r3, r3, #5
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	095b      	lsrs	r3, r3, #5
 800aac0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 fa0a 	bl	800aee4 <I2C_ITMasterCplt>
 800aad0:	e000      	b.n	800aad4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800aad2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b088      	sub	sp, #32
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d101      	bne.n	800ab0a <I2C_Slave_ISR_DMA+0x24>
 800ab06:	2302      	movs	r3, #2
 800ab08:	e0c9      	b.n	800ac9e <I2C_Slave_ISR_DMA+0x1b8>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d009      	beq.n	800ab32 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	095b      	lsrs	r3, r3, #5
 800ab22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 faa3 	bl	800b078 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 809a 	beq.w	800ac74 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	091b      	lsrs	r3, r3, #4
 800ab44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 8093 	beq.w	800ac74 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	0b9b      	lsrs	r3, r3, #14
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d105      	bne.n	800ab66 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	0bdb      	lsrs	r3, r3, #15
 800ab5e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d07f      	beq.n	800ac66 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	0bdb      	lsrs	r3, r3, #15
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d007      	beq.n	800ab8a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800ab86:	2301      	movs	r3, #1
 800ab88:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	0b9b      	lsrs	r3, r3, #14
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800abaa:	2301      	movs	r3, #1
 800abac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d128      	bne.n	800ac06 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b28      	cmp	r3, #40	; 0x28
 800abbe:	d108      	bne.n	800abd2 <I2C_Slave_ISR_DMA+0xec>
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abc6:	d104      	bne.n	800abd2 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 fb5e 	bl	800b28c <I2C_ITListenCplt>
 800abd0:	e048      	b.n	800ac64 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b29      	cmp	r3, #41	; 0x29
 800abdc:	d10e      	bne.n	800abfc <I2C_Slave_ISR_DMA+0x116>
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abe4:	d00a      	beq.n	800abfc <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2210      	movs	r2, #16
 800abec:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fc99 	bl	800b526 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 f917 	bl	800ae28 <I2C_ITSlaveSeqCplt>
 800abfa:	e033      	b.n	800ac64 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2210      	movs	r2, #16
 800ac02:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ac04:	e034      	b.n	800ac70 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2210      	movs	r2, #16
 800ac0c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac12:	f043 0204 	orr.w	r2, r3, #4
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac20:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d003      	beq.n	800ac30 <I2C_Slave_ISR_DMA+0x14a>
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac2e:	d11f      	bne.n	800ac70 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
 800ac32:	2b21      	cmp	r3, #33	; 0x21
 800ac34:	d002      	beq.n	800ac3c <I2C_Slave_ISR_DMA+0x156>
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b29      	cmp	r3, #41	; 0x29
 800ac3a:	d103      	bne.n	800ac44 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2221      	movs	r2, #33	; 0x21
 800ac40:	631a      	str	r2, [r3, #48]	; 0x30
 800ac42:	e008      	b.n	800ac56 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	2b22      	cmp	r3, #34	; 0x22
 800ac48:	d002      	beq.n	800ac50 <I2C_Slave_ISR_DMA+0x16a>
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4e:	d102      	bne.n	800ac56 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2222      	movs	r2, #34	; 0x22
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 fb6b 	bl	800b338 <I2C_ITError>
      if (treatdmanack == 1U)
 800ac62:	e005      	b.n	800ac70 <I2C_Slave_ISR_DMA+0x18a>
 800ac64:	e004      	b.n	800ac70 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2210      	movs	r2, #16
 800ac6c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac6e:	e011      	b.n	800ac94 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800ac70:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac72:	e00f      	b.n	800ac94 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	08db      	lsrs	r3, r3, #3
 800ac84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ac8c:	68b9      	ldr	r1, [r7, #8]
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 f809 	bl	800aca6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800acbc:	2b28      	cmp	r3, #40	; 0x28
 800acbe:	d16a      	bne.n	800ad96 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	0c1b      	lsrs	r3, r3, #16
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	0c1b      	lsrs	r3, r3, #16
 800acd8:	b29b      	uxth	r3, r3
 800acda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800acde:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acec:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800acfa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d138      	bne.n	800ad76 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ad04:	897b      	ldrh	r3, [r7, #10]
 800ad06:	09db      	lsrs	r3, r3, #7
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	89bb      	ldrh	r3, [r7, #12]
 800ad0c:	4053      	eors	r3, r2
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f003 0306 	and.w	r3, r3, #6
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11c      	bne.n	800ad52 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ad18:	897b      	ldrh	r3, [r7, #10]
 800ad1a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d13b      	bne.n	800ada6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2208      	movs	r2, #8
 800ad3a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ad44:	89ba      	ldrh	r2, [r7, #12]
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fb53 	bl	800a3f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ad50:	e029      	b.n	800ada6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ad52:	893b      	ldrh	r3, [r7, #8]
 800ad54:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ad56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fd02 	bl	800b764 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ad68:	89ba      	ldrh	r2, [r7, #12]
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fb41 	bl	800a3f6 <HAL_I2C_AddrCallback>
}
 800ad74:	e017      	b.n	800ada6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ad76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fcf2 	bl	800b764 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ad88:	89ba      	ldrh	r2, [r7, #12]
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fb31 	bl	800a3f6 <HAL_I2C_AddrCallback>
}
 800ad94:	e007      	b.n	800ada6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b21      	cmp	r3, #33	; 0x21
 800adc8:	d115      	bne.n	800adf6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2220      	movs	r2, #32
 800adce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2211      	movs	r2, #17
 800add6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800adde:	2101      	movs	r1, #1
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fcbf 	bl	800b764 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fad9 	bl	800a3a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800adf4:	e014      	b.n	800ae20 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2212      	movs	r2, #18
 800ae02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ae0a:	2102      	movs	r1, #2
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fca9 	bl	800b764 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff facd 	bl	800a3ba <HAL_I2C_MasterRxCpltCallback>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	0b9b      	lsrs	r3, r3, #14
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	e00d      	b.n	800ae7a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	0bdb      	lsrs	r3, r3, #15
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d007      	beq.n	800ae7a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b29      	cmp	r3, #41	; 0x29
 800ae84:	d112      	bne.n	800aeac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2228      	movs	r2, #40	; 0x28
 800ae8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2221      	movs	r2, #33	; 0x21
 800ae92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae94:	2101      	movs	r1, #1
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fc64 	bl	800b764 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fa92 	bl	800a3ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aeaa:	e017      	b.n	800aedc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb6:	d111      	bne.n	800aedc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2228      	movs	r2, #40	; 0x28
 800aebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2222      	movs	r2, #34	; 0x22
 800aec4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aec6:	2102      	movs	r1, #2
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc4b 	bl	800b764 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fa83 	bl	800a3e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2220      	movs	r2, #32
 800aef8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b21      	cmp	r3, #33	; 0x21
 800af04:	d107      	bne.n	800af16 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800af06:	2101      	movs	r1, #1
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc2b 	bl	800b764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2211      	movs	r2, #17
 800af12:	631a      	str	r2, [r3, #48]	; 0x30
 800af14:	e00c      	b.n	800af30 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b22      	cmp	r3, #34	; 0x22
 800af20:	d106      	bne.n	800af30 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af22:	2102      	movs	r1, #2
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fc1d 	bl	800b764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2212      	movs	r2, #18
 800af2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6859      	ldr	r1, [r3, #4]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b4d      	ldr	r3, [pc, #308]	; (800b070 <I2C_ITMasterCplt+0x18c>)
 800af3c:	400b      	ands	r3, r1
 800af3e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a4a      	ldr	r2, [pc, #296]	; (800b074 <I2C_ITMasterCplt+0x190>)
 800af4a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	091b      	lsrs	r3, r3, #4
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d009      	beq.n	800af6c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2210      	movs	r2, #16
 800af5e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af64:	f043 0204 	orr.w	r2, r3, #4
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b60      	cmp	r3, #96	; 0x60
 800af76:	d10b      	bne.n	800af90 <I2C_ITMasterCplt+0xac>
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	089b      	lsrs	r3, r3, #2
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800af8e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fac8 	bl	800b526 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b60      	cmp	r3, #96	; 0x60
 800afa6:	d002      	beq.n	800afae <I2C_ITMasterCplt+0xca>
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d006      	beq.n	800afbc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f9bf 	bl	800b338 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800afba:	e054      	b.n	800b066 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b21      	cmp	r3, #33	; 0x21
 800afc6:	d124      	bne.n	800b012 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d10b      	bne.n	800affa <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fa17 	bl	800a426 <HAL_I2C_MemTxCpltCallback>
}
 800aff8:	e035      	b.n	800b066 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff f9cb 	bl	800a3a6 <HAL_I2C_MasterTxCpltCallback>
}
 800b010:	e029      	b.n	800b066 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b22      	cmp	r3, #34	; 0x22
 800b01c:	d123      	bne.n	800b066 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2220      	movs	r2, #32
 800b022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b40      	cmp	r3, #64	; 0x40
 800b036:	d10b      	bne.n	800b050 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff f9f6 	bl	800a43a <HAL_I2C_MemRxCpltCallback>
}
 800b04e:	e00a      	b.n	800b066 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff f9aa 	bl	800a3ba <HAL_I2C_MasterRxCpltCallback>
}
 800b066:	bf00      	nop
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	fe00e800 	.word	0xfe00e800
 800b074:	ffff0000 	.word	0xffff0000

0800b078 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b094:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2220      	movs	r2, #32
 800b09c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	2b21      	cmp	r3, #33	; 0x21
 800b0a2:	d002      	beq.n	800b0aa <I2C_ITSlaveCplt+0x32>
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b29      	cmp	r3, #41	; 0x29
 800b0a8:	d108      	bne.n	800b0bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b0aa:	f248 0101 	movw	r1, #32769	; 0x8001
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fb58 	bl	800b764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2221      	movs	r2, #33	; 0x21
 800b0b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b0ba:	e00d      	b.n	800b0d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	2b22      	cmp	r3, #34	; 0x22
 800b0c0:	d002      	beq.n	800b0c8 <I2C_ITSlaveCplt+0x50>
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c6:	d107      	bne.n	800b0d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b0c8:	f248 0102 	movw	r1, #32770	; 0x8002
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb49 	bl	800b764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2222      	movs	r2, #34	; 0x22
 800b0d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6859      	ldr	r1, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4b64      	ldr	r3, [pc, #400]	; (800b284 <I2C_ITSlaveCplt+0x20c>)
 800b0f4:	400b      	ands	r3, r1
 800b0f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa14 	bl	800b526 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	0b9b      	lsrs	r3, r3, #14
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d013      	beq.n	800b132 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b118:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d020      	beq.n	800b164 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b130:	e018      	b.n	800b164 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	0bdb      	lsrs	r3, r3, #15
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d012      	beq.n	800b164 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b14c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d006      	beq.n	800b164 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	089b      	lsrs	r3, r3, #2
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d020      	beq.n	800b1b2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f023 0304 	bic.w	r3, r3, #4
 800b176:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00c      	beq.n	800b1b2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c0:	f043 0204 	orr.w	r2, r3, #4
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d010      	beq.n	800b200 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f8a7 	bl	800b338 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b28      	cmp	r3, #40	; 0x28
 800b1f4:	d141      	bne.n	800b27a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b1f6:	6979      	ldr	r1, [r7, #20]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f847 	bl	800b28c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b1fe:	e03c      	b.n	800b27a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b208:	d014      	beq.n	800b234 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7ff fe0c 	bl	800ae28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a1d      	ldr	r2, [pc, #116]	; (800b288 <I2C_ITSlaveCplt+0x210>)
 800b214:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff f8f0 	bl	800a412 <HAL_I2C_ListenCpltCallback>
}
 800b232:	e022      	b.n	800b27a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b22      	cmp	r3, #34	; 0x22
 800b23e:	d10e      	bne.n	800b25e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2220      	movs	r2, #32
 800b244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff f8c3 	bl	800a3e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800b25c:	e00d      	b.n	800b27a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2220      	movs	r2, #32
 800b262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff f8aa 	bl	800a3ce <HAL_I2C_SlaveTxCpltCallback>
}
 800b27a:	bf00      	nop
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	fe00e800 	.word	0xfe00e800
 800b288:	ffff0000 	.word	0xffff0000

0800b28c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a26      	ldr	r2, [pc, #152]	; (800b334 <I2C_ITListenCplt+0xa8>)
 800b29a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	089b      	lsrs	r3, r3, #2
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d022      	beq.n	800b30a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d012      	beq.n	800b30a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b302:	f043 0204 	orr.w	r2, r3, #4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b30a:	f248 0103 	movw	r1, #32771	; 0x8003
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa28 	bl	800b764 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2210      	movs	r2, #16
 800b31a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff f874 	bl	800a412 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	ffff0000 	.word	0xffff0000

0800b338 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a5d      	ldr	r2, [pc, #372]	; (800b4cc <I2C_ITError+0x194>)
 800b356:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	431a      	orrs	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
 800b36c:	2b28      	cmp	r3, #40	; 0x28
 800b36e:	d005      	beq.n	800b37c <I2C_ITError+0x44>
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	2b29      	cmp	r3, #41	; 0x29
 800b374:	d002      	beq.n	800b37c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	2b2a      	cmp	r3, #42	; 0x2a
 800b37a:	d10b      	bne.n	800b394 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b37c:	2103      	movs	r1, #3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9f0 	bl	800b764 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2228      	movs	r2, #40	; 0x28
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a50      	ldr	r2, [pc, #320]	; (800b4d0 <I2C_ITError+0x198>)
 800b390:	635a      	str	r2, [r3, #52]	; 0x34
 800b392:	e011      	b.n	800b3b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b394:	f248 0103 	movw	r1, #32771	; 0x8003
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f9e3 	bl	800b764 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b60      	cmp	r3, #96	; 0x60
 800b3a8:	d003      	beq.n	800b3b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d039      	beq.n	800b43a <I2C_ITError+0x102>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b11      	cmp	r3, #17
 800b3ca:	d002      	beq.n	800b3d2 <I2C_ITError+0x9a>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b21      	cmp	r3, #33	; 0x21
 800b3d0:	d133      	bne.n	800b43a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3e0:	d107      	bne.n	800b3f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe f98e 	bl	8009718 <HAL_DMA_GetState>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d017      	beq.n	800b432 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	4a33      	ldr	r2, [pc, #204]	; (800b4d4 <I2C_ITError+0x19c>)
 800b408:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe f88e 	bl	8009538 <HAL_DMA_Abort_IT>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d04d      	beq.n	800b4be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b430:	e045      	b.n	800b4be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f850 	bl	800b4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b438:	e041      	b.n	800b4be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d039      	beq.n	800b4b6 <I2C_ITError+0x17e>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b12      	cmp	r3, #18
 800b446:	d002      	beq.n	800b44e <I2C_ITError+0x116>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b22      	cmp	r3, #34	; 0x22
 800b44c:	d133      	bne.n	800b4b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b45c:	d107      	bne.n	800b46e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b46c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe f950 	bl	8009718 <HAL_DMA_GetState>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d017      	beq.n	800b4ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b482:	4a14      	ldr	r2, [pc, #80]	; (800b4d4 <I2C_ITError+0x19c>)
 800b484:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe f850 	bl	8009538 <HAL_DMA_Abort_IT>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d011      	beq.n	800b4c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4ac:	e009      	b.n	800b4c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f812 	bl	800b4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4b4:	e005      	b.n	800b4c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f80e 	bl	800b4d8 <I2C_TreatErrorCallback>
  }
}
 800b4bc:	e002      	b.n	800b4c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b4be:	bf00      	nop
 800b4c0:	e000      	b.n	800b4c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4c2:	bf00      	nop
}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	ffff0000 	.word	0xffff0000
 800b4d0:	0800a6fb 	.word	0x0800a6fb
 800b4d4:	0800b56f 	.word	0x0800b56f

0800b4d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b60      	cmp	r3, #96	; 0x60
 800b4ea:	d10e      	bne.n	800b50a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7fe ffad 	bl	800a462 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b508:	e009      	b.n	800b51e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7fe ff98 	bl	800a44e <HAL_I2C_ErrorCallback>
}
 800b51e:	bf00      	nop
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d103      	bne.n	800b544 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2200      	movs	r2, #0
 800b542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d007      	beq.n	800b562 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	699a      	ldr	r2, [r3, #24]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f042 0201 	orr.w	r2, r2, #1
 800b560:	619a      	str	r2, [r3, #24]
  }
}
 800b562:	bf00      	nop
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b588:	2200      	movs	r2, #0
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b598:	2200      	movs	r2, #0
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff ff9b 	bl	800b4d8 <I2C_TreatErrorCallback>
}
 800b5a2:	bf00      	nop
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5ba:	e022      	b.n	800b602 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c2:	d01e      	beq.n	800b602 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5c4:	f7fc f8b8 	bl	8007738 <HAL_GetTick>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d302      	bcc.n	800b5da <I2C_WaitOnFlagUntilTimeout+0x30>
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d113      	bne.n	800b602 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	f043 0220 	orr.w	r2, r3, #32
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e00f      	b.n	800b622 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	699a      	ldr	r2, [r3, #24]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	4013      	ands	r3, r2
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	429a      	cmp	r2, r3
 800b610:	bf0c      	ite	eq
 800b612:	2301      	moveq	r3, #1
 800b614:	2300      	movne	r3, #0
 800b616:	b2db      	uxtb	r3, r3
 800b618:	461a      	mov	r2, r3
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d0cd      	beq.n	800b5bc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b087      	sub	sp, #28
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	817b      	strh	r3, [r7, #10]
 800b63a:	4613      	mov	r3, r2
 800b63c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b63e:	897b      	ldrh	r3, [r7, #10]
 800b640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b644:	7a7b      	ldrb	r3, [r7, #9]
 800b646:	041b      	lsls	r3, r3, #16
 800b648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b64c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	4313      	orrs	r3, r2
 800b656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b65a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	0d5b      	lsrs	r3, r3, #21
 800b666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <I2C_TransferConfig+0x60>)
 800b66c:	430b      	orrs	r3, r1
 800b66e:	43db      	mvns	r3, r3
 800b670:	ea02 0103 	and.w	r1, r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b67e:	bf00      	nop
 800b680:	371c      	adds	r7, #28
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	03ff63ff 	.word	0x03ff63ff

0800b690 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a4:	4a2d      	ldr	r2, [pc, #180]	; (800b75c <I2C_Enable_IRQ+0xcc>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d004      	beq.n	800b6b4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b6ae:	4a2c      	ldr	r2, [pc, #176]	; (800b760 <I2C_Enable_IRQ+0xd0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d11d      	bne.n	800b6f0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b6b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	da03      	bge.n	800b6c4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b6c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b6c4:	887b      	ldrh	r3, [r7, #2]
 800b6c6:	2b10      	cmp	r3, #16
 800b6c8:	d103      	bne.n	800b6d2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b6d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b6d2:	887b      	ldrh	r3, [r7, #2]
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d103      	bne.n	800b6e0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b6de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b6e0:	887b      	ldrh	r3, [r7, #2]
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d12c      	bne.n	800b740 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b6ee:	e027      	b.n	800b740 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b6f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	da03      	bge.n	800b700 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b6fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b700:	887b      	ldrh	r3, [r7, #2]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d003      	beq.n	800b712 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b710:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b712:	887b      	ldrh	r3, [r7, #2]
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b722:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b724:	887b      	ldrh	r3, [r7, #2]
 800b726:	2b10      	cmp	r3, #16
 800b728:	d103      	bne.n	800b732 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b730:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b732:	887b      	ldrh	r3, [r7, #2]
 800b734:	2b20      	cmp	r3, #32
 800b736:	d103      	bne.n	800b740 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f043 0320 	orr.w	r3, r3, #32
 800b73e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6819      	ldr	r1, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	601a      	str	r2, [r3, #0]
}
 800b750:	bf00      	nop
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	0800a901 	.word	0x0800a901
 800b760:	0800aae7 	.word	0x0800aae7

0800b764 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b774:	887b      	ldrh	r3, [r7, #2]
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00f      	beq.n	800b79e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b784:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b792:	2b28      	cmp	r3, #40	; 0x28
 800b794:	d003      	beq.n	800b79e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b79c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b79e:	887b      	ldrh	r3, [r7, #2]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00f      	beq.n	800b7c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b7ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b7bc:	2b28      	cmp	r3, #40	; 0x28
 800b7be:	d003      	beq.n	800b7c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b7c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b7c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	da03      	bge.n	800b7d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b7d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b7d8:	887b      	ldrh	r3, [r7, #2]
 800b7da:	2b10      	cmp	r3, #16
 800b7dc:	d103      	bne.n	800b7e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b7e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b7e6:	887b      	ldrh	r3, [r7, #2]
 800b7e8:	2b20      	cmp	r3, #32
 800b7ea:	d103      	bne.n	800b7f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f043 0320 	orr.w	r3, r3, #32
 800b7f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b7f4:	887b      	ldrh	r3, [r7, #2]
 800b7f6:	2b40      	cmp	r3, #64	; 0x40
 800b7f8:	d103      	bne.n	800b802 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b800:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6819      	ldr	r1, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	43da      	mvns	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	400a      	ands	r2, r1
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	2baa      	cmp	r3, #170	; 0xaa
 800b82e:	d103      	bne.n	800b838 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b836:	e008      	b.n	800b84a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800b840:	d103      	bne.n	800b84a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b848:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b20      	cmp	r3, #32
 800b86a:	d138      	bne.n	800b8de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b876:	2302      	movs	r3, #2
 800b878:	e032      	b.n	800b8e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2224      	movs	r2, #36	; 0x24
 800b886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0201 	bic.w	r2, r2, #1
 800b898:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b8a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0201 	orr.w	r2, r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e000      	b.n	800b8e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b8de:	2302      	movs	r3, #2
  }
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d139      	bne.n	800b976 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d101      	bne.n	800b910 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b90c:	2302      	movs	r3, #2
 800b90e:	e033      	b.n	800b978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2224      	movs	r2, #36	; 0x24
 800b91c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0201 	bic.w	r2, r2, #1
 800b92e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b93e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	021b      	lsls	r3, r3, #8
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2220      	movs	r2, #32
 800b966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	e000      	b.n	800b978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b976:	2302      	movs	r3, #2
  }
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a04      	ldr	r2, [pc, #16]	; (800b9a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b98e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b992:	6013      	str	r3, [r2, #0]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40007000 	.word	0x40007000

0800b9a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <HAL_PWREx_GetVoltageRange+0x18>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40007000 	.word	0x40007000

0800b9c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ce:	d130      	bne.n	800ba32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b9d0:	4b23      	ldr	r3, [pc, #140]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b9d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9dc:	d038      	beq.n	800ba50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b9de:	4b20      	ldr	r3, [pc, #128]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b9ee:	4b1d      	ldr	r3, [pc, #116]	; (800ba64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2232      	movs	r2, #50	; 0x32
 800b9f4:	fb02 f303 	mul.w	r3, r2, r3
 800b9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ba68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fe:	0c9b      	lsrs	r3, r3, #18
 800ba00:	3301      	adds	r3, #1
 800ba02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba04:	e002      	b.n	800ba0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ba0c:	4b14      	ldr	r3, [pc, #80]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba18:	d102      	bne.n	800ba20 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1f2      	bne.n	800ba06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ba20:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2c:	d110      	bne.n	800ba50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e00f      	b.n	800ba52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ba32:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba3e:	d007      	beq.n	800ba50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ba40:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ba48:	4a05      	ldr	r2, [pc, #20]	; (800ba60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ba4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	40007000 	.word	0x40007000
 800ba64:	20000008 	.word	0x20000008
 800ba68:	431bde83 	.word	0x431bde83

0800ba6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f000 bc02 	b.w	800c284 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba80:	4b96      	ldr	r3, [pc, #600]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f003 030c 	and.w	r3, r3, #12
 800ba88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba8a:	4b94      	ldr	r3, [pc, #592]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	f003 0303 	and.w	r3, r3, #3
 800ba92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0310 	and.w	r3, r3, #16
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 80e4 	beq.w	800bc6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <HAL_RCC_OscConfig+0x4c>
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b0c      	cmp	r3, #12
 800baac:	f040 808b 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	f040 8087 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bab8:	4b88      	ldr	r3, [pc, #544]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d005      	beq.n	800bad0 <HAL_RCC_OscConfig+0x64>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e3d9      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a1a      	ldr	r2, [r3, #32]
 800bad4:	4b81      	ldr	r3, [pc, #516]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0308 	and.w	r3, r3, #8
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <HAL_RCC_OscConfig+0x7e>
 800bae0:	4b7e      	ldr	r3, [pc, #504]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bae8:	e005      	b.n	800baf6 <HAL_RCC_OscConfig+0x8a>
 800baea:	4b7c      	ldr	r3, [pc, #496]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800baec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baf0:	091b      	lsrs	r3, r3, #4
 800baf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d223      	bcs.n	800bb42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fdbe 	bl	800c680 <RCC_SetFlashLatencyFromMSIRange>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e3ba      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb0e:	4b73      	ldr	r3, [pc, #460]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a72      	ldr	r2, [pc, #456]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb14:	f043 0308 	orr.w	r3, r3, #8
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	4b70      	ldr	r3, [pc, #448]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	496d      	ldr	r1, [pc, #436]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb2c:	4b6b      	ldr	r3, [pc, #428]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	69db      	ldr	r3, [r3, #28]
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	4968      	ldr	r1, [pc, #416]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	604b      	str	r3, [r1, #4]
 800bb40:	e025      	b.n	800bb8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb42:	4b66      	ldr	r3, [pc, #408]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a65      	ldr	r2, [pc, #404]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb48:	f043 0308 	orr.w	r3, r3, #8
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	4b63      	ldr	r3, [pc, #396]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	4960      	ldr	r1, [pc, #384]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb60:	4b5e      	ldr	r3, [pc, #376]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	495b      	ldr	r1, [pc, #364]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fd7e 	bl	800c680 <RCC_SetFlashLatencyFromMSIRange>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e37a      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb8e:	f000 fc81 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800bb92:	4602      	mov	r2, r0
 800bb94:	4b51      	ldr	r3, [pc, #324]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	091b      	lsrs	r3, r3, #4
 800bb9a:	f003 030f 	and.w	r3, r3, #15
 800bb9e:	4950      	ldr	r1, [pc, #320]	; (800bce0 <HAL_RCC_OscConfig+0x274>)
 800bba0:	5ccb      	ldrb	r3, [r1, r3]
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbaa:	4a4e      	ldr	r2, [pc, #312]	; (800bce4 <HAL_RCC_OscConfig+0x278>)
 800bbac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bbae:	4b4e      	ldr	r3, [pc, #312]	; (800bce8 <HAL_RCC_OscConfig+0x27c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f9 ff46 	bl	8005a44 <HAL_InitTick>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d052      	beq.n	800bc68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
 800bbc4:	e35e      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d032      	beq.n	800bc34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bbce:	4b43      	ldr	r3, [pc, #268]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a42      	ldr	r2, [pc, #264]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bbd4:	f043 0301 	orr.w	r3, r3, #1
 800bbd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bbda:	f7fb fdad 	bl	8007738 <HAL_GetTick>
 800bbde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bbe0:	e008      	b.n	800bbf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbe2:	f7fb fda9 	bl	8007738 <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d901      	bls.n	800bbf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e347      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bbf4:	4b39      	ldr	r3, [pc, #228]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0f0      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc00:	4b36      	ldr	r3, [pc, #216]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a35      	ldr	r2, [pc, #212]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc06:	f043 0308 	orr.w	r3, r3, #8
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	4b33      	ldr	r3, [pc, #204]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	4930      	ldr	r1, [pc, #192]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc1e:	4b2f      	ldr	r3, [pc, #188]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	492b      	ldr	r1, [pc, #172]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	604b      	str	r3, [r1, #4]
 800bc32:	e01a      	b.n	800bc6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bc34:	4b29      	ldr	r3, [pc, #164]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a28      	ldr	r2, [pc, #160]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc3a:	f023 0301 	bic.w	r3, r3, #1
 800bc3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bc40:	f7fb fd7a 	bl	8007738 <HAL_GetTick>
 800bc44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc48:	f7fb fd76 	bl	8007738 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e314      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bc5a:	4b20      	ldr	r3, [pc, #128]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f0      	bne.n	800bc48 <HAL_RCC_OscConfig+0x1dc>
 800bc66:	e000      	b.n	800bc6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bc68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d073      	beq.n	800bd5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d005      	beq.n	800bc88 <HAL_RCC_OscConfig+0x21c>
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	2b0c      	cmp	r3, #12
 800bc80:	d10e      	bne.n	800bca0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d10b      	bne.n	800bca0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc88:	4b14      	ldr	r3, [pc, #80]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d063      	beq.n	800bd5c <HAL_RCC_OscConfig+0x2f0>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d15f      	bne.n	800bd5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e2f1      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca8:	d106      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x24c>
 800bcaa:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a0b      	ldr	r2, [pc, #44]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	e025      	b.n	800bd04 <HAL_RCC_OscConfig+0x298>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcc0:	d114      	bne.n	800bcec <HAL_RCC_OscConfig+0x280>
 800bcc2:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a05      	ldr	r2, [pc, #20]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a02      	ldr	r2, [pc, #8]	; (800bcdc <HAL_RCC_OscConfig+0x270>)
 800bcd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e013      	b.n	800bd04 <HAL_RCC_OscConfig+0x298>
 800bcdc:	40021000 	.word	0x40021000
 800bce0:	080147f0 	.word	0x080147f0
 800bce4:	20000008 	.word	0x20000008
 800bce8:	20000010 	.word	0x20000010
 800bcec:	4ba0      	ldr	r3, [pc, #640]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a9f      	ldr	r2, [pc, #636]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bcf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	4b9d      	ldr	r3, [pc, #628]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a9c      	ldr	r2, [pc, #624]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bcfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d013      	beq.n	800bd34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd0c:	f7fb fd14 	bl	8007738 <HAL_GetTick>
 800bd10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bd12:	e008      	b.n	800bd26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd14:	f7fb fd10 	bl	8007738 <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	2b64      	cmp	r3, #100	; 0x64
 800bd20:	d901      	bls.n	800bd26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e2ae      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bd26:	4b92      	ldr	r3, [pc, #584]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0f0      	beq.n	800bd14 <HAL_RCC_OscConfig+0x2a8>
 800bd32:	e014      	b.n	800bd5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd34:	f7fb fd00 	bl	8007738 <HAL_GetTick>
 800bd38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bd3a:	e008      	b.n	800bd4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd3c:	f7fb fcfc 	bl	8007738 <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b64      	cmp	r3, #100	; 0x64
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e29a      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bd4e:	4b88      	ldr	r3, [pc, #544]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1f0      	bne.n	800bd3c <HAL_RCC_OscConfig+0x2d0>
 800bd5a:	e000      	b.n	800bd5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0302 	and.w	r3, r3, #2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d060      	beq.n	800be2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d005      	beq.n	800bd7c <HAL_RCC_OscConfig+0x310>
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b0c      	cmp	r3, #12
 800bd74:	d119      	bne.n	800bdaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d116      	bne.n	800bdaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd7c:	4b7c      	ldr	r3, [pc, #496]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <HAL_RCC_OscConfig+0x328>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e277      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd94:	4b76      	ldr	r3, [pc, #472]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	061b      	lsls	r3, r3, #24
 800bda2:	4973      	ldr	r1, [pc, #460]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bda8:	e040      	b.n	800be2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d023      	beq.n	800bdfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bdb2:	4b6f      	ldr	r3, [pc, #444]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a6e      	ldr	r2, [pc, #440]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bdb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdbe:	f7fb fcbb 	bl	8007738 <HAL_GetTick>
 800bdc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bdc4:	e008      	b.n	800bdd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdc6:	f7fb fcb7 	bl	8007738 <HAL_GetTick>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d901      	bls.n	800bdd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e255      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bdd8:	4b65      	ldr	r3, [pc, #404]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0f0      	beq.n	800bdc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bde4:	4b62      	ldr	r3, [pc, #392]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	061b      	lsls	r3, r3, #24
 800bdf2:	495f      	ldr	r1, [pc, #380]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	604b      	str	r3, [r1, #4]
 800bdf8:	e018      	b.n	800be2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdfa:	4b5d      	ldr	r3, [pc, #372]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a5c      	ldr	r2, [pc, #368]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be06:	f7fb fc97 	bl	8007738 <HAL_GetTick>
 800be0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800be0c:	e008      	b.n	800be20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be0e:	f7fb fc93 	bl	8007738 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d901      	bls.n	800be20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e231      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800be20:	4b53      	ldr	r3, [pc, #332]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1f0      	bne.n	800be0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0308 	and.w	r3, r3, #8
 800be34:	2b00      	cmp	r3, #0
 800be36:	d03c      	beq.n	800beb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01c      	beq.n	800be7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be40:	4b4b      	ldr	r3, [pc, #300]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be46:	4a4a      	ldr	r2, [pc, #296]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be48:	f043 0301 	orr.w	r3, r3, #1
 800be4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be50:	f7fb fc72 	bl	8007738 <HAL_GetTick>
 800be54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800be56:	e008      	b.n	800be6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be58:	f7fb fc6e 	bl	8007738 <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	2b02      	cmp	r3, #2
 800be64:	d901      	bls.n	800be6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e20c      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800be6a:	4b41      	ldr	r3, [pc, #260]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be70:	f003 0302 	and.w	r3, r3, #2
 800be74:	2b00      	cmp	r3, #0
 800be76:	d0ef      	beq.n	800be58 <HAL_RCC_OscConfig+0x3ec>
 800be78:	e01b      	b.n	800beb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be7a:	4b3d      	ldr	r3, [pc, #244]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be80:	4a3b      	ldr	r2, [pc, #236]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800be82:	f023 0301 	bic.w	r3, r3, #1
 800be86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be8a:	f7fb fc55 	bl	8007738 <HAL_GetTick>
 800be8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800be90:	e008      	b.n	800bea4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be92:	f7fb fc51 	bl	8007738 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d901      	bls.n	800bea4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e1ef      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bea4:	4b32      	ldr	r3, [pc, #200]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1ef      	bne.n	800be92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0304 	and.w	r3, r3, #4
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80a6 	beq.w	800c00c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bec0:	2300      	movs	r3, #0
 800bec2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bec4:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10d      	bne.n	800beec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bed0:	4b27      	ldr	r3, [pc, #156]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed4:	4a26      	ldr	r2, [pc, #152]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beda:	6593      	str	r3, [r2, #88]	; 0x58
 800bedc:	4b24      	ldr	r3, [pc, #144]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bee4:	60bb      	str	r3, [r7, #8]
 800bee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bee8:	2301      	movs	r3, #1
 800beea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800beec:	4b21      	ldr	r3, [pc, #132]	; (800bf74 <HAL_RCC_OscConfig+0x508>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d118      	bne.n	800bf2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <HAL_RCC_OscConfig+0x508>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <HAL_RCC_OscConfig+0x508>)
 800befe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf04:	f7fb fc18 	bl	8007738 <HAL_GetTick>
 800bf08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf0a:	e008      	b.n	800bf1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf0c:	f7fb fc14 	bl	8007738 <HAL_GetTick>
 800bf10:	4602      	mov	r2, r0
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d901      	bls.n	800bf1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e1b2      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf1e:	4b15      	ldr	r3, [pc, #84]	; (800bf74 <HAL_RCC_OscConfig+0x508>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0f0      	beq.n	800bf0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d108      	bne.n	800bf44 <HAL_RCC_OscConfig+0x4d8>
 800bf32:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf38:	4a0d      	ldr	r2, [pc, #52]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf3a:	f043 0301 	orr.w	r3, r3, #1
 800bf3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bf42:	e029      	b.n	800bf98 <HAL_RCC_OscConfig+0x52c>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	2b05      	cmp	r3, #5
 800bf4a:	d115      	bne.n	800bf78 <HAL_RCC_OscConfig+0x50c>
 800bf4c:	4b08      	ldr	r3, [pc, #32]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf52:	4a07      	ldr	r2, [pc, #28]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf54:	f043 0304 	orr.w	r3, r3, #4
 800bf58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bf5c:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf62:	4a03      	ldr	r2, [pc, #12]	; (800bf70 <HAL_RCC_OscConfig+0x504>)
 800bf64:	f043 0301 	orr.w	r3, r3, #1
 800bf68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bf6c:	e014      	b.n	800bf98 <HAL_RCC_OscConfig+0x52c>
 800bf6e:	bf00      	nop
 800bf70:	40021000 	.word	0x40021000
 800bf74:	40007000 	.word	0x40007000
 800bf78:	4b9a      	ldr	r3, [pc, #616]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf7e:	4a99      	ldr	r2, [pc, #612]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bf88:	4b96      	ldr	r3, [pc, #600]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf8e:	4a95      	ldr	r2, [pc, #596]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bf90:	f023 0304 	bic.w	r3, r3, #4
 800bf94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d016      	beq.n	800bfce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfa0:	f7fb fbca 	bl	8007738 <HAL_GetTick>
 800bfa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfa6:	e00a      	b.n	800bfbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfa8:	f7fb fbc6 	bl	8007738 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e162      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfbe:	4b89      	ldr	r3, [pc, #548]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc4:	f003 0302 	and.w	r3, r3, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d0ed      	beq.n	800bfa8 <HAL_RCC_OscConfig+0x53c>
 800bfcc:	e015      	b.n	800bffa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfce:	f7fb fbb3 	bl	8007738 <HAL_GetTick>
 800bfd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bfd4:	e00a      	b.n	800bfec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfd6:	f7fb fbaf 	bl	8007738 <HAL_GetTick>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d901      	bls.n	800bfec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e14b      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bfec:	4b7d      	ldr	r3, [pc, #500]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800bfee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff2:	f003 0302 	and.w	r3, r3, #2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1ed      	bne.n	800bfd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bffa:	7ffb      	ldrb	r3, [r7, #31]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d105      	bne.n	800c00c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c000:	4b78      	ldr	r3, [pc, #480]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c004:	4a77      	ldr	r2, [pc, #476]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c00a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0320 	and.w	r3, r3, #32
 800c014:	2b00      	cmp	r3, #0
 800c016:	d03c      	beq.n	800c092 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01c      	beq.n	800c05a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c020:	4b70      	ldr	r3, [pc, #448]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c026:	4a6f      	ldr	r2, [pc, #444]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c028:	f043 0301 	orr.w	r3, r3, #1
 800c02c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c030:	f7fb fb82 	bl	8007738 <HAL_GetTick>
 800c034:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c036:	e008      	b.n	800c04a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c038:	f7fb fb7e 	bl	8007738 <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	2b02      	cmp	r3, #2
 800c044:	d901      	bls.n	800c04a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e11c      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c04a:	4b66      	ldr	r3, [pc, #408]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c04c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0ef      	beq.n	800c038 <HAL_RCC_OscConfig+0x5cc>
 800c058:	e01b      	b.n	800c092 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c05a:	4b62      	ldr	r3, [pc, #392]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c05c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c060:	4a60      	ldr	r2, [pc, #384]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c062:	f023 0301 	bic.w	r3, r3, #1
 800c066:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c06a:	f7fb fb65 	bl	8007738 <HAL_GetTick>
 800c06e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c070:	e008      	b.n	800c084 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c072:	f7fb fb61 	bl	8007738 <HAL_GetTick>
 800c076:	4602      	mov	r2, r0
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d901      	bls.n	800c084 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c080:	2303      	movs	r3, #3
 800c082:	e0ff      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c084:	4b57      	ldr	r3, [pc, #348]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1ef      	bne.n	800c072 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80f3 	beq.w	800c282 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	f040 80c9 	bne.w	800c238 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c0a6:	4b4f      	ldr	r3, [pc, #316]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	f003 0203 	and.w	r2, r3, #3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d12c      	bne.n	800c114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d123      	bne.n	800c114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d11b      	bne.n	800c114 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d113      	bne.n	800c114 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	085b      	lsrs	r3, r3, #1
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d109      	bne.n	800c114 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	3b01      	subs	r3, #1
 800c10e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c110:	429a      	cmp	r2, r3
 800c112:	d06b      	beq.n	800c1ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	2b0c      	cmp	r3, #12
 800c118:	d062      	beq.n	800c1e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c11a:	4b32      	ldr	r3, [pc, #200]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e0ac      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c12a:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a2d      	ldr	r2, [pc, #180]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c134:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c136:	f7fb faff 	bl	8007738 <HAL_GetTick>
 800c13a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c13c:	e008      	b.n	800c150 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c13e:	f7fb fafb 	bl	8007738 <HAL_GetTick>
 800c142:	4602      	mov	r2, r0
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d901      	bls.n	800c150 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e099      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c150:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1f0      	bne.n	800c13e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c15c:	4b21      	ldr	r3, [pc, #132]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c15e:	68da      	ldr	r2, [r3, #12]
 800c160:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <HAL_RCC_OscConfig+0x77c>)
 800c162:	4013      	ands	r3, r2
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c16c:	3a01      	subs	r2, #1
 800c16e:	0112      	lsls	r2, r2, #4
 800c170:	4311      	orrs	r1, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c176:	0212      	lsls	r2, r2, #8
 800c178:	4311      	orrs	r1, r2
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c17e:	0852      	lsrs	r2, r2, #1
 800c180:	3a01      	subs	r2, #1
 800c182:	0552      	lsls	r2, r2, #21
 800c184:	4311      	orrs	r1, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c18a:	0852      	lsrs	r2, r2, #1
 800c18c:	3a01      	subs	r2, #1
 800c18e:	0652      	lsls	r2, r2, #25
 800c190:	4311      	orrs	r1, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c196:	06d2      	lsls	r2, r2, #27
 800c198:	430a      	orrs	r2, r1
 800c19a:	4912      	ldr	r1, [pc, #72]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c1a0:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a0f      	ldr	r2, [pc, #60]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c1a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c1ac:	4b0d      	ldr	r3, [pc, #52]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c1b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c1b8:	f7fb fabe 	bl	8007738 <HAL_GetTick>
 800c1bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1be:	e008      	b.n	800c1d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1c0:	f7fb faba 	bl	8007738 <HAL_GetTick>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d901      	bls.n	800c1d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e058      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1d2:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <HAL_RCC_OscConfig+0x778>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0f0      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c1de:	e050      	b.n	800c282 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e04f      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
 800c1e4:	40021000 	.word	0x40021000
 800c1e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1ec:	4b27      	ldr	r3, [pc, #156]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d144      	bne.n	800c282 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c1f8:	4b24      	ldr	r3, [pc, #144]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a23      	ldr	r2, [pc, #140]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c1fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c204:	4b21      	ldr	r3, [pc, #132]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	4a20      	ldr	r2, [pc, #128]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c20a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c20e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c210:	f7fb fa92 	bl	8007738 <HAL_GetTick>
 800c214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c216:	e008      	b.n	800c22a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c218:	f7fb fa8e 	bl	8007738 <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	2b02      	cmp	r3, #2
 800c224:	d901      	bls.n	800c22a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e02c      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0f0      	beq.n	800c218 <HAL_RCC_OscConfig+0x7ac>
 800c236:	e024      	b.n	800c282 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	2b0c      	cmp	r3, #12
 800c23c:	d01f      	beq.n	800c27e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c23e:	4b13      	ldr	r3, [pc, #76]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a12      	ldr	r2, [pc, #72]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c24a:	f7fb fa75 	bl	8007738 <HAL_GetTick>
 800c24e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c250:	e008      	b.n	800c264 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c252:	f7fb fa71 	bl	8007738 <HAL_GetTick>
 800c256:	4602      	mov	r2, r0
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d901      	bls.n	800c264 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e00f      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c264:	4b09      	ldr	r3, [pc, #36]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1f0      	bne.n	800c252 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	4905      	ldr	r1, [pc, #20]	; (800c28c <HAL_RCC_OscConfig+0x820>)
 800c276:	4b06      	ldr	r3, [pc, #24]	; (800c290 <HAL_RCC_OscConfig+0x824>)
 800c278:	4013      	ands	r3, r2
 800c27a:	60cb      	str	r3, [r1, #12]
 800c27c:	e001      	b.n	800c282 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e000      	b.n	800c284 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40021000 	.word	0x40021000
 800c290:	feeefffc 	.word	0xfeeefffc

0800c294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e0e7      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c2a8:	4b75      	ldr	r3, [pc, #468]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 0307 	and.w	r3, r3, #7
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d910      	bls.n	800c2d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2b6:	4b72      	ldr	r3, [pc, #456]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f023 0207 	bic.w	r2, r3, #7
 800c2be:	4970      	ldr	r1, [pc, #448]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2c6:	4b6e      	ldr	r3, [pc, #440]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0307 	and.w	r3, r3, #7
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d001      	beq.n	800c2d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e0cf      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d010      	beq.n	800c306 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	4b66      	ldr	r3, [pc, #408]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d908      	bls.n	800c306 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2f4:	4b63      	ldr	r3, [pc, #396]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	4960      	ldr	r1, [pc, #384]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c302:	4313      	orrs	r3, r2
 800c304:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0301 	and.w	r3, r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d04c      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b03      	cmp	r3, #3
 800c318:	d107      	bne.n	800c32a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c31a:	4b5a      	ldr	r3, [pc, #360]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d121      	bne.n	800c36a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e0a6      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d107      	bne.n	800c342 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c332:	4b54      	ldr	r3, [pc, #336]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d115      	bne.n	800c36a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e09a      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d107      	bne.n	800c35a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c34a:	4b4e      	ldr	r3, [pc, #312]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 0302 	and.w	r3, r3, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e08e      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c35a:	4b4a      	ldr	r3, [pc, #296]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e086      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c36a:	4b46      	ldr	r3, [pc, #280]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f023 0203 	bic.w	r2, r3, #3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	4943      	ldr	r1, [pc, #268]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c37c:	f7fb f9dc 	bl	8007738 <HAL_GetTick>
 800c380:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c382:	e00a      	b.n	800c39a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c384:	f7fb f9d8 	bl	8007738 <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c392:	4293      	cmp	r3, r2
 800c394:	d901      	bls.n	800c39a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c396:	2303      	movs	r3, #3
 800c398:	e06e      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c39a:	4b3a      	ldr	r3, [pc, #232]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f003 020c 	and.w	r2, r3, #12
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d1eb      	bne.n	800c384 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0302 	and.w	r3, r3, #2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d010      	beq.n	800c3da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689a      	ldr	r2, [r3, #8]
 800c3bc:	4b31      	ldr	r3, [pc, #196]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d208      	bcs.n	800c3da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3c8:	4b2e      	ldr	r3, [pc, #184]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	492b      	ldr	r1, [pc, #172]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c3da:	4b29      	ldr	r3, [pc, #164]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d210      	bcs.n	800c40a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3e8:	4b25      	ldr	r3, [pc, #148]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f023 0207 	bic.w	r2, r3, #7
 800c3f0:	4923      	ldr	r1, [pc, #140]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3f8:	4b21      	ldr	r3, [pc, #132]	; (800c480 <HAL_RCC_ClockConfig+0x1ec>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d001      	beq.n	800c40a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e036      	b.n	800c478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	d008      	beq.n	800c428 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c416:	4b1b      	ldr	r3, [pc, #108]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	4918      	ldr	r1, [pc, #96]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c424:	4313      	orrs	r3, r2
 800c426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0308 	and.w	r3, r3, #8
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c434:	4b13      	ldr	r3, [pc, #76]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	4910      	ldr	r1, [pc, #64]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c444:	4313      	orrs	r3, r2
 800c446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c448:	f000 f824 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800c44c:	4602      	mov	r2, r0
 800c44e:	4b0d      	ldr	r3, [pc, #52]	; (800c484 <HAL_RCC_ClockConfig+0x1f0>)
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	091b      	lsrs	r3, r3, #4
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	490b      	ldr	r1, [pc, #44]	; (800c488 <HAL_RCC_ClockConfig+0x1f4>)
 800c45a:	5ccb      	ldrb	r3, [r1, r3]
 800c45c:	f003 031f 	and.w	r3, r3, #31
 800c460:	fa22 f303 	lsr.w	r3, r2, r3
 800c464:	4a09      	ldr	r2, [pc, #36]	; (800c48c <HAL_RCC_ClockConfig+0x1f8>)
 800c466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c468:	4b09      	ldr	r3, [pc, #36]	; (800c490 <HAL_RCC_ClockConfig+0x1fc>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f9 fae9 	bl	8005a44 <HAL_InitTick>
 800c472:	4603      	mov	r3, r0
 800c474:	72fb      	strb	r3, [r7, #11]

  return status;
 800c476:	7afb      	ldrb	r3, [r7, #11]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	40022000 	.word	0x40022000
 800c484:	40021000 	.word	0x40021000
 800c488:	080147f0 	.word	0x080147f0
 800c48c:	20000008 	.word	0x20000008
 800c490:	20000010 	.word	0x20000010

0800c494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c494:	b480      	push	{r7}
 800c496:	b089      	sub	sp, #36	; 0x24
 800c498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4a2:	4b3e      	ldr	r3, [pc, #248]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f003 030c 	and.w	r3, r3, #12
 800c4aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4ac:	4b3b      	ldr	r3, [pc, #236]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f003 0303 	and.w	r3, r3, #3
 800c4b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <HAL_RCC_GetSysClockFreq+0x34>
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b0c      	cmp	r3, #12
 800c4c0:	d121      	bne.n	800c506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d11e      	bne.n	800c506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c4c8:	4b34      	ldr	r3, [pc, #208]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0308 	and.w	r3, r3, #8
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d107      	bne.n	800c4e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c4d4:	4b31      	ldr	r3, [pc, #196]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	f003 030f 	and.w	r3, r3, #15
 800c4e0:	61fb      	str	r3, [r7, #28]
 800c4e2:	e005      	b.n	800c4f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c4e4:	4b2d      	ldr	r3, [pc, #180]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	091b      	lsrs	r3, r3, #4
 800c4ea:	f003 030f 	and.w	r3, r3, #15
 800c4ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c4f0:	4a2b      	ldr	r2, [pc, #172]	; (800c5a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10d      	bne.n	800c51c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c504:	e00a      	b.n	800c51c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b04      	cmp	r3, #4
 800c50a:	d102      	bne.n	800c512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c50c:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800c50e:	61bb      	str	r3, [r7, #24]
 800c510:	e004      	b.n	800c51c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b08      	cmp	r3, #8
 800c516:	d101      	bne.n	800c51c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c518:	4b23      	ldr	r3, [pc, #140]	; (800c5a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800c51a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	2b0c      	cmp	r3, #12
 800c520:	d134      	bne.n	800c58c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c522:	4b1e      	ldr	r3, [pc, #120]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	f003 0303 	and.w	r3, r3, #3
 800c52a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d003      	beq.n	800c53a <HAL_RCC_GetSysClockFreq+0xa6>
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b03      	cmp	r3, #3
 800c536:	d003      	beq.n	800c540 <HAL_RCC_GetSysClockFreq+0xac>
 800c538:	e005      	b.n	800c546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c53a:	4b1a      	ldr	r3, [pc, #104]	; (800c5a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800c53c:	617b      	str	r3, [r7, #20]
      break;
 800c53e:	e005      	b.n	800c54c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c540:	4b19      	ldr	r3, [pc, #100]	; (800c5a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800c542:	617b      	str	r3, [r7, #20]
      break;
 800c544:	e002      	b.n	800c54c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	617b      	str	r3, [r7, #20]
      break;
 800c54a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c54c:	4b13      	ldr	r3, [pc, #76]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	091b      	lsrs	r3, r3, #4
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	3301      	adds	r3, #1
 800c558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c55a:	4b10      	ldr	r3, [pc, #64]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	fb03 f202 	mul.w	r2, r3, r2
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c572:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <HAL_RCC_GetSysClockFreq+0x108>)
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	0e5b      	lsrs	r3, r3, #25
 800c578:	f003 0303 	and.w	r3, r3, #3
 800c57c:	3301      	adds	r3, #1
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c58c:	69bb      	ldr	r3, [r7, #24]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3724      	adds	r7, #36	; 0x24
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	40021000 	.word	0x40021000
 800c5a0:	08014808 	.word	0x08014808
 800c5a4:	00f42400 	.word	0x00f42400
 800c5a8:	00989680 	.word	0x00989680

0800c5ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5b0:	4b03      	ldr	r3, [pc, #12]	; (800c5c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	20000008 	.word	0x20000008

0800c5c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c5c8:	f7ff fff0 	bl	800c5ac <HAL_RCC_GetHCLKFreq>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	4904      	ldr	r1, [pc, #16]	; (800c5ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800c5da:	5ccb      	ldrb	r3, [r1, r3]
 800c5dc:	f003 031f 	and.w	r3, r3, #31
 800c5e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	40021000 	.word	0x40021000
 800c5ec:	08014800 	.word	0x08014800

0800c5f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c5f4:	f7ff ffda 	bl	800c5ac <HAL_RCC_GetHCLKFreq>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	0adb      	lsrs	r3, r3, #11
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c606:	5ccb      	ldrb	r3, [r1, r3]
 800c608:	f003 031f 	and.w	r3, r3, #31
 800c60c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}
 800c614:	40021000 	.word	0x40021000
 800c618:	08014800 	.word	0x08014800

0800c61c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	220f      	movs	r2, #15
 800c62a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c62c:	4b12      	ldr	r3, [pc, #72]	; (800c678 <HAL_RCC_GetClockConfig+0x5c>)
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f003 0203 	and.w	r2, r3, #3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c638:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <HAL_RCC_GetClockConfig+0x5c>)
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c644:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <HAL_RCC_GetClockConfig+0x5c>)
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c650:	4b09      	ldr	r3, [pc, #36]	; (800c678 <HAL_RCC_GetClockConfig+0x5c>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	08db      	lsrs	r3, r3, #3
 800c656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c65e:	4b07      	ldr	r3, [pc, #28]	; (800c67c <HAL_RCC_GetClockConfig+0x60>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 0207 	and.w	r2, r3, #7
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	601a      	str	r2, [r3, #0]
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	40021000 	.word	0x40021000
 800c67c:	40022000 	.word	0x40022000

0800c680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c688:	2300      	movs	r3, #0
 800c68a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c68c:	4b2a      	ldr	r3, [pc, #168]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c694:	2b00      	cmp	r3, #0
 800c696:	d003      	beq.n	800c6a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c698:	f7ff f984 	bl	800b9a4 <HAL_PWREx_GetVoltageRange>
 800c69c:	6178      	str	r0, [r7, #20]
 800c69e:	e014      	b.n	800c6ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c6a0:	4b25      	ldr	r3, [pc, #148]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6a4:	4a24      	ldr	r2, [pc, #144]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6aa:	6593      	str	r3, [r2, #88]	; 0x58
 800c6ac:	4b22      	ldr	r3, [pc, #136]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c6b8:	f7ff f974 	bl	800b9a4 <HAL_PWREx_GetVoltageRange>
 800c6bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c6be:	4b1e      	ldr	r3, [pc, #120]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c2:	4a1d      	ldr	r2, [pc, #116]	; (800c738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c6c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d0:	d10b      	bne.n	800c6ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b80      	cmp	r3, #128	; 0x80
 800c6d6:	d919      	bls.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2ba0      	cmp	r3, #160	; 0xa0
 800c6dc:	d902      	bls.n	800c6e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c6de:	2302      	movs	r3, #2
 800c6e0:	613b      	str	r3, [r7, #16]
 800c6e2:	e013      	b.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	e010      	b.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b80      	cmp	r3, #128	; 0x80
 800c6ee:	d902      	bls.n	800c6f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	e00a      	b.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b80      	cmp	r3, #128	; 0x80
 800c6fa:	d102      	bne.n	800c702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	613b      	str	r3, [r7, #16]
 800c700:	e004      	b.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b70      	cmp	r3, #112	; 0x70
 800c706:	d101      	bne.n	800c70c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c708:	2301      	movs	r3, #1
 800c70a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c70c:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f023 0207 	bic.w	r2, r3, #7
 800c714:	4909      	ldr	r1, [pc, #36]	; (800c73c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c71c:	4b07      	ldr	r3, [pc, #28]	; (800c73c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0307 	and.w	r3, r3, #7
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	429a      	cmp	r2, r3
 800c728:	d001      	beq.n	800c72e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	40021000 	.word	0x40021000
 800c73c:	40022000 	.word	0x40022000

0800c740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c748:	2300      	movs	r3, #0
 800c74a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c74c:	2300      	movs	r3, #0
 800c74e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d031      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c764:	d01a      	beq.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c76a:	d814      	bhi.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d009      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c774:	d10f      	bne.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c776:	4b5d      	ldr	r3, [pc, #372]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	4a5c      	ldr	r2, [pc, #368]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c77c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c780:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c782:	e00c      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3304      	adds	r3, #4
 800c788:	2100      	movs	r1, #0
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f9ce 	bl	800cb2c <RCCEx_PLLSAI1_Config>
 800c790:	4603      	mov	r3, r0
 800c792:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c794:	e003      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	74fb      	strb	r3, [r7, #19]
      break;
 800c79a:	e000      	b.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c79c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c79e:	7cfb      	ldrb	r3, [r7, #19]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10b      	bne.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c7a4:	4b51      	ldr	r3, [pc, #324]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	494e      	ldr	r1, [pc, #312]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c7ba:	e001      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	7cfb      	ldrb	r3, [r7, #19]
 800c7be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 809e 	beq.w	800c90a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c7d2:	4b46      	ldr	r3, [pc, #280]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00d      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7e8:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ec:	4a3f      	ldr	r2, [pc, #252]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f2:	6593      	str	r3, [r2, #88]	; 0x58
 800c7f4:	4b3d      	ldr	r3, [pc, #244]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c800:	2301      	movs	r3, #1
 800c802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c804:	4b3a      	ldr	r3, [pc, #232]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a39      	ldr	r2, [pc, #228]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c80a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c80e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c810:	f7fa ff92 	bl	8007738 <HAL_GetTick>
 800c814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c816:	e009      	b.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c818:	f7fa ff8e 	bl	8007738 <HAL_GetTick>
 800c81c:	4602      	mov	r2, r0
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b02      	cmp	r3, #2
 800c824:	d902      	bls.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	74fb      	strb	r3, [r7, #19]
        break;
 800c82a:	e005      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c82c:	4b30      	ldr	r3, [pc, #192]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0ef      	beq.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c838:	7cfb      	ldrb	r3, [r7, #19]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d15a      	bne.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c83e:	4b2b      	ldr	r3, [pc, #172]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01e      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	429a      	cmp	r2, r3
 800c858:	d019      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c864:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c866:	4b21      	ldr	r3, [pc, #132]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c86c:	4a1f      	ldr	r2, [pc, #124]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c876:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c87e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c886:	4a19      	ldr	r2, [pc, #100]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d016      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c898:	f7fa ff4e 	bl	8007738 <HAL_GetTick>
 800c89c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c89e:	e00b      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8a0:	f7fa ff4a 	bl	8007738 <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d902      	bls.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	74fb      	strb	r3, [r7, #19]
            break;
 800c8b6:	e006      	b.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8b8:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8be:	f003 0302 	and.w	r3, r3, #2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0ec      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c8c6:	7cfb      	ldrb	r3, [r7, #19]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10b      	bne.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8cc:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8da:	4904      	ldr	r1, [pc, #16]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c8e2:	e009      	b.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c8e4:	7cfb      	ldrb	r3, [r7, #19]
 800c8e6:	74bb      	strb	r3, [r7, #18]
 800c8e8:	e006      	b.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c8ea:	bf00      	nop
 800c8ec:	40021000 	.word	0x40021000
 800c8f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f4:	7cfb      	ldrb	r3, [r7, #19]
 800c8f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c8f8:	7c7b      	ldrb	r3, [r7, #17]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d105      	bne.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8fe:	4b8a      	ldr	r3, [pc, #552]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c902:	4a89      	ldr	r2, [pc, #548]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c916:	4b84      	ldr	r3, [pc, #528]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c91c:	f023 0203 	bic.w	r2, r3, #3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	4980      	ldr	r1, [pc, #512]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c926:	4313      	orrs	r3, r2
 800c928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c938:	4b7b      	ldr	r3, [pc, #492]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c93e:	f023 020c 	bic.w	r2, r3, #12
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	4978      	ldr	r1, [pc, #480]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c95a:	4b73      	ldr	r3, [pc, #460]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c960:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c968:	496f      	ldr	r1, [pc, #444]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c97c:	4b6a      	ldr	r3, [pc, #424]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c982:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c98a:	4967      	ldr	r1, [pc, #412]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00a      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c99e:	4b62      	ldr	r3, [pc, #392]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ac:	495e      	ldr	r1, [pc, #376]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00a      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c9c0:	4b59      	ldr	r3, [pc, #356]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	4956      	ldr	r1, [pc, #344]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00a      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c9e2:	4b51      	ldr	r3, [pc, #324]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f0:	494d      	ldr	r1, [pc, #308]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d028      	beq.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca04:	4b48      	ldr	r3, [pc, #288]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	4945      	ldr	r1, [pc, #276]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca22:	d106      	bne.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca24:	4b40      	ldr	r3, [pc, #256]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	4a3f      	ldr	r2, [pc, #252]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca2e:	60d3      	str	r3, [r2, #12]
 800ca30:	e011      	b.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca3a:	d10c      	bne.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	2101      	movs	r1, #1
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f872 	bl	800cb2c <RCCEx_PLLSAI1_Config>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ca4c:	7cfb      	ldrb	r3, [r7, #19]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800ca52:	7cfb      	ldrb	r3, [r7, #19]
 800ca54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d028      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca62:	4b31      	ldr	r3, [pc, #196]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca70:	492d      	ldr	r1, [pc, #180]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca72:	4313      	orrs	r3, r2
 800ca74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca80:	d106      	bne.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca82:	4b29      	ldr	r3, [pc, #164]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	4a28      	ldr	r2, [pc, #160]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca8c:	60d3      	str	r3, [r2, #12]
 800ca8e:	e011      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca98:	d10c      	bne.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	2101      	movs	r1, #1
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f843 	bl	800cb2c <RCCEx_PLLSAI1_Config>
 800caa6:	4603      	mov	r3, r0
 800caa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800caaa:	7cfb      	ldrb	r3, [r7, #19]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800cab0:	7cfb      	ldrb	r3, [r7, #19]
 800cab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01c      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cac0:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cace:	4916      	ldr	r1, [pc, #88]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cade:	d10c      	bne.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3304      	adds	r3, #4
 800cae4:	2102      	movs	r1, #2
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f820 	bl	800cb2c <RCCEx_PLLSAI1_Config>
 800caec:	4603      	mov	r3, r0
 800caee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800caf0:	7cfb      	ldrb	r3, [r7, #19]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800caf6:	7cfb      	ldrb	r3, [r7, #19]
 800caf8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00a      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb06:	4b08      	ldr	r3, [pc, #32]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb14:	4904      	ldr	r1, [pc, #16]	; (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cb1c:	7cbb      	ldrb	r3, [r7, #18]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40021000 	.word	0x40021000

0800cb2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb3a:	4b74      	ldr	r3, [pc, #464]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d018      	beq.n	800cb78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cb46:	4b71      	ldr	r3, [pc, #452]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f003 0203 	and.w	r2, r3, #3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d10d      	bne.n	800cb72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
       ||
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d009      	beq.n	800cb72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cb5e:	4b6b      	ldr	r3, [pc, #428]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	091b      	lsrs	r3, r3, #4
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
       ||
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d047      	beq.n	800cc02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
 800cb76:	e044      	b.n	800cc02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d018      	beq.n	800cbb2 <RCCEx_PLLSAI1_Config+0x86>
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d825      	bhi.n	800cbd0 <RCCEx_PLLSAI1_Config+0xa4>
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d002      	beq.n	800cb8e <RCCEx_PLLSAI1_Config+0x62>
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d009      	beq.n	800cba0 <RCCEx_PLLSAI1_Config+0x74>
 800cb8c:	e020      	b.n	800cbd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cb8e:	4b5f      	ldr	r3, [pc, #380]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 0302 	and.w	r3, r3, #2
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d11d      	bne.n	800cbd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cb9e:	e01a      	b.n	800cbd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cba0:	4b5a      	ldr	r3, [pc, #360]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d116      	bne.n	800cbda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbb0:	e013      	b.n	800cbda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cbb2:	4b56      	ldr	r3, [pc, #344]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10f      	bne.n	800cbde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cbbe:	4b53      	ldr	r3, [pc, #332]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d109      	bne.n	800cbde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbce:	e006      	b.n	800cbde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd4:	e004      	b.n	800cbe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbd6:	bf00      	nop
 800cbd8:	e002      	b.n	800cbe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbda:	bf00      	nop
 800cbdc:	e000      	b.n	800cbe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbde:	bf00      	nop
    }

    if(status == HAL_OK)
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10d      	bne.n	800cc02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cbe6:	4b49      	ldr	r3, [pc, #292]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6819      	ldr	r1, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	430b      	orrs	r3, r1
 800cbfc:	4943      	ldr	r1, [pc, #268]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d17c      	bne.n	800cd02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc08:	4b40      	ldr	r3, [pc, #256]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a3f      	ldr	r2, [pc, #252]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc14:	f7fa fd90 	bl	8007738 <HAL_GetTick>
 800cc18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc1a:	e009      	b.n	800cc30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc1c:	f7fa fd8c 	bl	8007738 <HAL_GetTick>
 800cc20:	4602      	mov	r2, r0
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d902      	bls.n	800cc30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	73fb      	strb	r3, [r7, #15]
        break;
 800cc2e:	e005      	b.n	800cc3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc30:	4b36      	ldr	r3, [pc, #216]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1ef      	bne.n	800cc1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d15f      	bne.n	800cd02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d110      	bne.n	800cc6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc48:	4b30      	ldr	r3, [pc, #192]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cc50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	6892      	ldr	r2, [r2, #8]
 800cc58:	0211      	lsls	r1, r2, #8
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68d2      	ldr	r2, [r2, #12]
 800cc5e:	06d2      	lsls	r2, r2, #27
 800cc60:	430a      	orrs	r2, r1
 800cc62:	492a      	ldr	r1, [pc, #168]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc64:	4313      	orrs	r3, r2
 800cc66:	610b      	str	r3, [r1, #16]
 800cc68:	e027      	b.n	800ccba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d112      	bne.n	800cc96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc70:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cc78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6892      	ldr	r2, [r2, #8]
 800cc80:	0211      	lsls	r1, r2, #8
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6912      	ldr	r2, [r2, #16]
 800cc86:	0852      	lsrs	r2, r2, #1
 800cc88:	3a01      	subs	r2, #1
 800cc8a:	0552      	lsls	r2, r2, #21
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	491f      	ldr	r1, [pc, #124]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc90:	4313      	orrs	r3, r2
 800cc92:	610b      	str	r3, [r1, #16]
 800cc94:	e011      	b.n	800ccba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cc9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	6892      	ldr	r2, [r2, #8]
 800cca6:	0211      	lsls	r1, r2, #8
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6952      	ldr	r2, [r2, #20]
 800ccac:	0852      	lsrs	r2, r2, #1
 800ccae:	3a01      	subs	r2, #1
 800ccb0:	0652      	lsls	r2, r2, #25
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	4915      	ldr	r1, [pc, #84]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ccba:	4b14      	ldr	r3, [pc, #80]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a13      	ldr	r2, [pc, #76]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc6:	f7fa fd37 	bl	8007738 <HAL_GetTick>
 800ccca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cccc:	e009      	b.n	800cce2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ccce:	f7fa fd33 	bl	8007738 <HAL_GetTick>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d902      	bls.n	800cce2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	73fb      	strb	r3, [r7, #15]
          break;
 800cce0:	e005      	b.n	800ccee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cce2:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0ef      	beq.n	800ccce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	4903      	ldr	r1, [pc, #12]	; (800cd0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	40021000 	.word	0x40021000

0800cd10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d06c      	beq.n	800cdfc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7f8 fdb0 	bl	800589c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2202      	movs	r2, #2
 800cd40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	22ca      	movs	r2, #202	; 0xca
 800cd4a:	625a      	str	r2, [r3, #36]	; 0x24
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2253      	movs	r2, #83	; 0x53
 800cd52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f87c 	bl	800ce52 <RTC_EnterInitMode>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d14b      	bne.n	800cdfc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	6812      	ldr	r2, [r2, #0]
 800cd6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd76:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6899      	ldr	r1, [r3, #8]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	431a      	orrs	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	430a      	orrs	r2, r1
 800cd94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	68d2      	ldr	r2, [r2, #12]
 800cd9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6919      	ldr	r1, [r3, #16]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	041a      	lsls	r2, r3, #16
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	430a      	orrs	r2, r1
 800cdb2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f87f 	bl	800ceb8 <RTC_ExitInitMode>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d11b      	bne.n	800cdfc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 0203 	bic.w	r2, r2, #3
 800cdd2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	69da      	ldr	r2, [r3, #28]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	431a      	orrs	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	430a      	orrs	r2, r1
 800cdea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	22ff      	movs	r2, #255	; 0xff
 800cdf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68da      	ldr	r2, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ce1c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800ce1e:	f7fa fc8b 	bl	8007738 <HAL_GetTick>
 800ce22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce24:	e009      	b.n	800ce3a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce26:	f7fa fc87 	bl	8007738 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce34:	d901      	bls.n	800ce3a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e007      	b.n	800ce4a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f003 0320 	and.w	r3, r3, #32
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d0ee      	beq.n	800ce26 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d120      	bne.n	800ceae <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f04f 32ff 	mov.w	r2, #4294967295
 800ce74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ce76:	f7fa fc5f 	bl	8007738 <HAL_GetTick>
 800ce7a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce7c:	e00d      	b.n	800ce9a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ce7e:	f7fa fc5b 	bl	8007738 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce8c:	d905      	bls.n	800ce9a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2203      	movs	r2, #3
 800ce96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <RTC_EnterInitMode+0x5c>
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d1e7      	bne.n	800ce7e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cec4:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	4a19      	ldr	r2, [pc, #100]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800ceca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cece:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ced0:	4b17      	ldr	r3, [pc, #92]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10c      	bne.n	800cef6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ff92 	bl	800ce06 <HAL_RTC_WaitForSynchro>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01e      	beq.n	800cf26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2203      	movs	r2, #3
 800ceec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	73fb      	strb	r3, [r7, #15]
 800cef4:	e017      	b.n	800cf26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cef6:	4b0e      	ldr	r3, [pc, #56]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	4a0d      	ldr	r2, [pc, #52]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800cefc:	f023 0320 	bic.w	r3, r3, #32
 800cf00:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff ff7f 	bl	800ce06 <HAL_RTC_WaitForSynchro>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d005      	beq.n	800cf1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2203      	movs	r2, #3
 800cf12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	4a04      	ldr	r2, [pc, #16]	; (800cf30 <RTC_ExitInitMode+0x78>)
 800cf20:	f043 0320 	orr.w	r3, r3, #32
 800cf24:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	40002800 	.word	0x40002800

0800cf34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e095      	b.n	800d072 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d108      	bne.n	800cf60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf56:	d009      	beq.n	800cf6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	61da      	str	r2, [r3, #28]
 800cf5e:	e005      	b.n	800cf6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7f8 fcf6 	bl	8005978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2202      	movs	r2, #2
 800cf90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cfac:	d902      	bls.n	800cfb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	e002      	b.n	800cfba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cfb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cfc2:	d007      	beq.n	800cfd4 <HAL_SPI_Init+0xa0>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cfcc:	d002      	beq.n	800cfd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cfe4:	431a      	orrs	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	431a      	orrs	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d002:	431a      	orrs	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	69db      	ldr	r3, [r3, #28]
 800d008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d00c:	431a      	orrs	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d016:	ea42 0103 	orr.w	r1, r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	430a      	orrs	r2, r1
 800d028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	0c1b      	lsrs	r3, r3, #16
 800d030:	f003 0204 	and.w	r2, r3, #4
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	f003 0310 	and.w	r3, r3, #16
 800d03c:	431a      	orrs	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d042:	f003 0308 	and.w	r3, r3, #8
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d050:	ea42 0103 	orr.w	r1, r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b082      	sub	sp, #8
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e049      	b.n	800d120 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b00      	cmp	r3, #0
 800d096:	d106      	bne.n	800d0a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7f8 feb1 	bl	8005e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	f001 f86d 	bl	800e198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d001      	beq.n	800d140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e03b      	b.n	800d1b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2202      	movs	r2, #2
 800d144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68da      	ldr	r2, [r3, #12]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f042 0201 	orr.w	r2, r2, #1
 800d156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a19      	ldr	r2, [pc, #100]	; (800d1c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d009      	beq.n	800d176 <HAL_TIM_Base_Start_IT+0x4e>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d16a:	d004      	beq.n	800d176 <HAL_TIM_Base_Start_IT+0x4e>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a15      	ldr	r2, [pc, #84]	; (800d1c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d115      	bne.n	800d1a2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <HAL_TIM_Base_Start_IT+0xa4>)
 800d17e:	4013      	ands	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b06      	cmp	r3, #6
 800d186:	d015      	beq.n	800d1b4 <HAL_TIM_Base_Start_IT+0x8c>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d18e:	d011      	beq.n	800d1b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f042 0201 	orr.w	r2, r2, #1
 800d19e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a0:	e008      	b.n	800d1b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0201 	orr.w	r2, r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	e000      	b.n	800d1b6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	40012c00 	.word	0x40012c00
 800d1c8:	40014000 	.word	0x40014000
 800d1cc:	00010007 	.word	0x00010007

0800d1d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e049      	b.n	800d276 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f841 	bl	800d27e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f000 ffc2 	bl	800e198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d286:	bf00      	nop
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
	...

0800d294 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d104      	bne.n	800d2b2 <HAL_TIM_IC_Start_IT+0x1e>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	e023      	b.n	800d2fa <HAL_TIM_IC_Start_IT+0x66>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d104      	bne.n	800d2c2 <HAL_TIM_IC_Start_IT+0x2e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	e01b      	b.n	800d2fa <HAL_TIM_IC_Start_IT+0x66>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b08      	cmp	r3, #8
 800d2c6:	d104      	bne.n	800d2d2 <HAL_TIM_IC_Start_IT+0x3e>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	e013      	b.n	800d2fa <HAL_TIM_IC_Start_IT+0x66>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2b0c      	cmp	r3, #12
 800d2d6:	d104      	bne.n	800d2e2 <HAL_TIM_IC_Start_IT+0x4e>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	e00b      	b.n	800d2fa <HAL_TIM_IC_Start_IT+0x66>
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b10      	cmp	r3, #16
 800d2e6:	d104      	bne.n	800d2f2 <HAL_TIM_IC_Start_IT+0x5e>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	e003      	b.n	800d2fa <HAL_TIM_IC_Start_IT+0x66>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d104      	bne.n	800d30c <HAL_TIM_IC_Start_IT+0x78>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	e013      	b.n	800d334 <HAL_TIM_IC_Start_IT+0xa0>
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2b04      	cmp	r3, #4
 800d310:	d104      	bne.n	800d31c <HAL_TIM_IC_Start_IT+0x88>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	e00b      	b.n	800d334 <HAL_TIM_IC_Start_IT+0xa0>
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b08      	cmp	r3, #8
 800d320:	d104      	bne.n	800d32c <HAL_TIM_IC_Start_IT+0x98>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	e003      	b.n	800d334 <HAL_TIM_IC_Start_IT+0xa0>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d332:	b2db      	uxtb	r3, r3
 800d334:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d336:	7bbb      	ldrb	r3, [r7, #14]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d102      	bne.n	800d342 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d33c:	7b7b      	ldrb	r3, [r7, #13]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d001      	beq.n	800d346 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e0c9      	b.n	800d4da <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d104      	bne.n	800d356 <HAL_TIM_IC_Start_IT+0xc2>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2202      	movs	r2, #2
 800d350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d354:	e023      	b.n	800d39e <HAL_TIM_IC_Start_IT+0x10a>
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b04      	cmp	r3, #4
 800d35a:	d104      	bne.n	800d366 <HAL_TIM_IC_Start_IT+0xd2>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2202      	movs	r2, #2
 800d360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d364:	e01b      	b.n	800d39e <HAL_TIM_IC_Start_IT+0x10a>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d104      	bne.n	800d376 <HAL_TIM_IC_Start_IT+0xe2>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2202      	movs	r2, #2
 800d370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d374:	e013      	b.n	800d39e <HAL_TIM_IC_Start_IT+0x10a>
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b0c      	cmp	r3, #12
 800d37a:	d104      	bne.n	800d386 <HAL_TIM_IC_Start_IT+0xf2>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d384:	e00b      	b.n	800d39e <HAL_TIM_IC_Start_IT+0x10a>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b10      	cmp	r3, #16
 800d38a:	d104      	bne.n	800d396 <HAL_TIM_IC_Start_IT+0x102>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2202      	movs	r2, #2
 800d390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d394:	e003      	b.n	800d39e <HAL_TIM_IC_Start_IT+0x10a>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2202      	movs	r2, #2
 800d39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <HAL_TIM_IC_Start_IT+0x11a>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3ac:	e013      	b.n	800d3d6 <HAL_TIM_IC_Start_IT+0x142>
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b04      	cmp	r3, #4
 800d3b2:	d104      	bne.n	800d3be <HAL_TIM_IC_Start_IT+0x12a>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3bc:	e00b      	b.n	800d3d6 <HAL_TIM_IC_Start_IT+0x142>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b08      	cmp	r3, #8
 800d3c2:	d104      	bne.n	800d3ce <HAL_TIM_IC_Start_IT+0x13a>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3cc:	e003      	b.n	800d3d6 <HAL_TIM_IC_Start_IT+0x142>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b0c      	cmp	r3, #12
 800d3da:	d841      	bhi.n	800d460 <HAL_TIM_IC_Start_IT+0x1cc>
 800d3dc:	a201      	add	r2, pc, #4	; (adr r2, 800d3e4 <HAL_TIM_IC_Start_IT+0x150>)
 800d3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e2:	bf00      	nop
 800d3e4:	0800d419 	.word	0x0800d419
 800d3e8:	0800d461 	.word	0x0800d461
 800d3ec:	0800d461 	.word	0x0800d461
 800d3f0:	0800d461 	.word	0x0800d461
 800d3f4:	0800d42b 	.word	0x0800d42b
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d461 	.word	0x0800d461
 800d400:	0800d461 	.word	0x0800d461
 800d404:	0800d43d 	.word	0x0800d43d
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d461 	.word	0x0800d461
 800d410:	0800d461 	.word	0x0800d461
 800d414:	0800d44f 	.word	0x0800d44f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f042 0202 	orr.w	r2, r2, #2
 800d426:	60da      	str	r2, [r3, #12]
      break;
 800d428:	e01d      	b.n	800d466 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68da      	ldr	r2, [r3, #12]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0204 	orr.w	r2, r2, #4
 800d438:	60da      	str	r2, [r3, #12]
      break;
 800d43a:	e014      	b.n	800d466 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f042 0208 	orr.w	r2, r2, #8
 800d44a:	60da      	str	r2, [r3, #12]
      break;
 800d44c:	e00b      	b.n	800d466 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68da      	ldr	r2, [r3, #12]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f042 0210 	orr.w	r2, r2, #16
 800d45c:	60da      	str	r2, [r3, #12]
      break;
 800d45e:	e002      	b.n	800d466 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	73fb      	strb	r3, [r7, #15]
      break;
 800d464:	bf00      	nop
  }

  if (status == HAL_OK)
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d135      	bne.n	800d4d8 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2201      	movs	r2, #1
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f001 f899 	bl	800e5ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a19      	ldr	r2, [pc, #100]	; (800d4e4 <HAL_TIM_IC_Start_IT+0x250>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d009      	beq.n	800d498 <HAL_TIM_IC_Start_IT+0x204>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d48c:	d004      	beq.n	800d498 <HAL_TIM_IC_Start_IT+0x204>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <HAL_TIM_IC_Start_IT+0x254>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d115      	bne.n	800d4c4 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689a      	ldr	r2, [r3, #8]
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <HAL_TIM_IC_Start_IT+0x258>)
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b06      	cmp	r3, #6
 800d4a8:	d015      	beq.n	800d4d6 <HAL_TIM_IC_Start_IT+0x242>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4b0:	d011      	beq.n	800d4d6 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0201 	orr.w	r2, r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c2:	e008      	b.n	800d4d6 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f042 0201 	orr.w	r2, r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e000      	b.n	800d4d8 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4d6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	40012c00 	.word	0x40012c00
 800d4e8:	40014000 	.word	0x40014000
 800d4ec:	00010007 	.word	0x00010007

0800d4f0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d104      	bne.n	800d512 <HAL_TIM_IC_Start_DMA+0x22>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	e023      	b.n	800d55a <HAL_TIM_IC_Start_DMA+0x6a>
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b04      	cmp	r3, #4
 800d516:	d104      	bne.n	800d522 <HAL_TIM_IC_Start_DMA+0x32>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	e01b      	b.n	800d55a <HAL_TIM_IC_Start_DMA+0x6a>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b08      	cmp	r3, #8
 800d526:	d104      	bne.n	800d532 <HAL_TIM_IC_Start_DMA+0x42>
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	e013      	b.n	800d55a <HAL_TIM_IC_Start_DMA+0x6a>
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	2b0c      	cmp	r3, #12
 800d536:	d104      	bne.n	800d542 <HAL_TIM_IC_Start_DMA+0x52>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	e00b      	b.n	800d55a <HAL_TIM_IC_Start_DMA+0x6a>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b10      	cmp	r3, #16
 800d546:	d104      	bne.n	800d552 <HAL_TIM_IC_Start_DMA+0x62>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	e003      	b.n	800d55a <HAL_TIM_IC_Start_DMA+0x6a>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d104      	bne.n	800d56c <HAL_TIM_IC_Start_DMA+0x7c>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	e013      	b.n	800d594 <HAL_TIM_IC_Start_DMA+0xa4>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d104      	bne.n	800d57c <HAL_TIM_IC_Start_DMA+0x8c>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	e00b      	b.n	800d594 <HAL_TIM_IC_Start_DMA+0xa4>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b08      	cmp	r3, #8
 800d580:	d104      	bne.n	800d58c <HAL_TIM_IC_Start_DMA+0x9c>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	e003      	b.n	800d594 <HAL_TIM_IC_Start_DMA+0xa4>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d592:	b2db      	uxtb	r3, r3
 800d594:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800d596:	7dbb      	ldrb	r3, [r7, #22]
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d002      	beq.n	800d5a2 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800d59c:	7d7b      	ldrb	r3, [r7, #21]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	d101      	bne.n	800d5a6 <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e143      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800d5a6:	7dbb      	ldrb	r3, [r7, #22]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d153      	bne.n	800d654 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800d5ac:	7d7b      	ldrb	r3, [r7, #21]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d150      	bne.n	800d654 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <HAL_TIM_IC_Start_DMA+0xce>
 800d5b8:	887b      	ldrh	r3, [r7, #2]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e135      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d104      	bne.n	800d5d2 <HAL_TIM_IC_Start_DMA+0xe2>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5d0:	e023      	b.n	800d61a <HAL_TIM_IC_Start_DMA+0x12a>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	d104      	bne.n	800d5e2 <HAL_TIM_IC_Start_DMA+0xf2>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2202      	movs	r2, #2
 800d5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e0:	e01b      	b.n	800d61a <HAL_TIM_IC_Start_DMA+0x12a>
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d104      	bne.n	800d5f2 <HAL_TIM_IC_Start_DMA+0x102>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5f0:	e013      	b.n	800d61a <HAL_TIM_IC_Start_DMA+0x12a>
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d104      	bne.n	800d602 <HAL_TIM_IC_Start_DMA+0x112>
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d600:	e00b      	b.n	800d61a <HAL_TIM_IC_Start_DMA+0x12a>
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b10      	cmp	r3, #16
 800d606:	d104      	bne.n	800d612 <HAL_TIM_IC_Start_DMA+0x122>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d610:	e003      	b.n	800d61a <HAL_TIM_IC_Start_DMA+0x12a>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2202      	movs	r2, #2
 800d616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d104      	bne.n	800d62a <HAL_TIM_IC_Start_DMA+0x13a>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2202      	movs	r2, #2
 800d624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 800d628:	e016      	b.n	800d658 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d104      	bne.n	800d63a <HAL_TIM_IC_Start_DMA+0x14a>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2202      	movs	r2, #2
 800d634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 800d638:	e00e      	b.n	800d658 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b08      	cmp	r3, #8
 800d63e:	d104      	bne.n	800d64a <HAL_TIM_IC_Start_DMA+0x15a>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2202      	movs	r2, #2
 800d644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 800d648:	e006      	b.n	800d658 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2202      	movs	r2, #2
 800d64e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 800d652:	e001      	b.n	800d658 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	e0ea      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2201      	movs	r2, #1
 800d65e:	68b9      	ldr	r1, [r7, #8]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 ffa3 	bl	800e5ac <TIM_CCxChannelCmd>

  switch (Channel)
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b0c      	cmp	r3, #12
 800d66a:	f200 80ad 	bhi.w	800d7c8 <HAL_TIM_IC_Start_DMA+0x2d8>
 800d66e:	a201      	add	r2, pc, #4	; (adr r2, 800d674 <HAL_TIM_IC_Start_DMA+0x184>)
 800d670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d674:	0800d6a9 	.word	0x0800d6a9
 800d678:	0800d7c9 	.word	0x0800d7c9
 800d67c:	0800d7c9 	.word	0x0800d7c9
 800d680:	0800d7c9 	.word	0x0800d7c9
 800d684:	0800d6f1 	.word	0x0800d6f1
 800d688:	0800d7c9 	.word	0x0800d7c9
 800d68c:	0800d7c9 	.word	0x0800d7c9
 800d690:	0800d7c9 	.word	0x0800d7c9
 800d694:	0800d739 	.word	0x0800d739
 800d698:	0800d7c9 	.word	0x0800d7c9
 800d69c:	0800d7c9 	.word	0x0800d7c9
 800d6a0:	0800d7c9 	.word	0x0800d7c9
 800d6a4:	0800d781 	.word	0x0800d781
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	4a62      	ldr	r2, [pc, #392]	; (800d838 <HAL_TIM_IC_Start_DMA+0x348>)
 800d6ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	4a61      	ldr	r2, [pc, #388]	; (800d83c <HAL_TIM_IC_Start_DMA+0x34c>)
 800d6b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6bc:	4a60      	ldr	r2, [pc, #384]	; (800d840 <HAL_TIM_IC_Start_DMA+0x350>)
 800d6be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3334      	adds	r3, #52	; 0x34
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	887b      	ldrh	r3, [r7, #2]
 800d6d0:	f7fb fe94 	bl	80093fc <HAL_DMA_Start_IT>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e0a7      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68da      	ldr	r2, [r3, #12]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6ec:	60da      	str	r2, [r3, #12]
      break;
 800d6ee:	e06e      	b.n	800d7ce <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f4:	4a50      	ldr	r2, [pc, #320]	; (800d838 <HAL_TIM_IC_Start_DMA+0x348>)
 800d6f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6fc:	4a4f      	ldr	r2, [pc, #316]	; (800d83c <HAL_TIM_IC_Start_DMA+0x34c>)
 800d6fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d704:	4a4e      	ldr	r2, [pc, #312]	; (800d840 <HAL_TIM_IC_Start_DMA+0x350>)
 800d706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3338      	adds	r3, #56	; 0x38
 800d712:	4619      	mov	r1, r3
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	887b      	ldrh	r3, [r7, #2]
 800d718:	f7fb fe70 	bl	80093fc <HAL_DMA_Start_IT>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e083      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d734:	60da      	str	r2, [r3, #12]
      break;
 800d736:	e04a      	b.n	800d7ce <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	4a3e      	ldr	r2, [pc, #248]	; (800d838 <HAL_TIM_IC_Start_DMA+0x348>)
 800d73e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	4a3d      	ldr	r2, [pc, #244]	; (800d83c <HAL_TIM_IC_Start_DMA+0x34c>)
 800d746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	4a3c      	ldr	r2, [pc, #240]	; (800d840 <HAL_TIM_IC_Start_DMA+0x350>)
 800d74e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	333c      	adds	r3, #60	; 0x3c
 800d75a:	4619      	mov	r1, r3
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	887b      	ldrh	r3, [r7, #2]
 800d760:	f7fb fe4c 	bl	80093fc <HAL_DMA_Start_IT>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e05f      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d77c:	60da      	str	r2, [r3, #12]
      break;
 800d77e:	e026      	b.n	800d7ce <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d784:	4a2c      	ldr	r2, [pc, #176]	; (800d838 <HAL_TIM_IC_Start_DMA+0x348>)
 800d786:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78c:	4a2b      	ldr	r2, [pc, #172]	; (800d83c <HAL_TIM_IC_Start_DMA+0x34c>)
 800d78e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d794:	4a2a      	ldr	r2, [pc, #168]	; (800d840 <HAL_TIM_IC_Start_DMA+0x350>)
 800d796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3340      	adds	r3, #64	; 0x40
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	887b      	ldrh	r3, [r7, #2]
 800d7a8:	f7fb fe28 	bl	80093fc <HAL_DMA_Start_IT>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e03b      	b.n	800d82e <HAL_TIM_IC_Start_DMA+0x33e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d7c4:	60da      	str	r2, [r3, #12]
      break;
 800d7c6:	e002      	b.n	800d7ce <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d7cc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a1c      	ldr	r2, [pc, #112]	; (800d844 <HAL_TIM_IC_Start_DMA+0x354>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d009      	beq.n	800d7ec <HAL_TIM_IC_Start_DMA+0x2fc>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7e0:	d004      	beq.n	800d7ec <HAL_TIM_IC_Start_DMA+0x2fc>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a18      	ldr	r2, [pc, #96]	; (800d848 <HAL_TIM_IC_Start_DMA+0x358>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d115      	bne.n	800d818 <HAL_TIM_IC_Start_DMA+0x328>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689a      	ldr	r2, [r3, #8]
 800d7f2:	4b16      	ldr	r3, [pc, #88]	; (800d84c <HAL_TIM_IC_Start_DMA+0x35c>)
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	2b06      	cmp	r3, #6
 800d7fc:	d015      	beq.n	800d82a <HAL_TIM_IC_Start_DMA+0x33a>
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d804:	d011      	beq.n	800d82a <HAL_TIM_IC_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 0201 	orr.w	r2, r2, #1
 800d814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d816:	e008      	b.n	800d82a <HAL_TIM_IC_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f042 0201 	orr.w	r2, r2, #1
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	e000      	b.n	800d82c <HAL_TIM_IC_Start_DMA+0x33c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d82a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	0800e067 	.word	0x0800e067
 800d83c:	0800e12f 	.word	0x0800e12f
 800d840:	0800dfd5 	.word	0x0800dfd5
 800d844:	40012c00 	.word	0x40012c00
 800d848:	40014000 	.word	0x40014000
 800d84c:	00010007 	.word	0x00010007

0800d850 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 fea0 	bl	800e5ac <TIM_CCxChannelCmd>

  switch (Channel)
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b0c      	cmp	r3, #12
 800d870:	d854      	bhi.n	800d91c <HAL_TIM_IC_Stop_DMA+0xcc>
 800d872:	a201      	add	r2, pc, #4	; (adr r2, 800d878 <HAL_TIM_IC_Stop_DMA+0x28>)
 800d874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d878:	0800d8ad 	.word	0x0800d8ad
 800d87c:	0800d91d 	.word	0x0800d91d
 800d880:	0800d91d 	.word	0x0800d91d
 800d884:	0800d91d 	.word	0x0800d91d
 800d888:	0800d8c9 	.word	0x0800d8c9
 800d88c:	0800d91d 	.word	0x0800d91d
 800d890:	0800d91d 	.word	0x0800d91d
 800d894:	0800d91d 	.word	0x0800d91d
 800d898:	0800d8e5 	.word	0x0800d8e5
 800d89c:	0800d91d 	.word	0x0800d91d
 800d8a0:	0800d91d 	.word	0x0800d91d
 800d8a4:	0800d91d 	.word	0x0800d91d
 800d8a8:	0800d901 	.word	0x0800d901
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d8ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fb fe39 	bl	8009538 <HAL_DMA_Abort_IT>
      break;
 800d8c6:	e02c      	b.n	800d922 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fb fe2b 	bl	8009538 <HAL_DMA_Abort_IT>
      break;
 800d8e2:	e01e      	b.n	800d922 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68da      	ldr	r2, [r3, #12]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d8f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fb fe1d 	bl	8009538 <HAL_DMA_Abort_IT>
      break;
 800d8fe:	e010      	b.n	800d922 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d90e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d914:	4618      	mov	r0, r3
 800d916:	f7fb fe0f 	bl	8009538 <HAL_DMA_Abort_IT>
      break;
 800d91a:	e002      	b.n	800d922 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	73fb      	strb	r3, [r7, #15]
      break;
 800d920:	bf00      	nop
  }

  if (status == HAL_OK)
 800d922:	7bfb      	ldrb	r3, [r7, #15]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d15f      	bne.n	800d9e8 <HAL_TIM_IC_Stop_DMA+0x198>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6a1a      	ldr	r2, [r3, #32]
 800d92e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d932:	4013      	ands	r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10f      	bne.n	800d958 <HAL_TIM_IC_Stop_DMA+0x108>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6a1a      	ldr	r2, [r3, #32]
 800d93e:	f240 4344 	movw	r3, #1092	; 0x444
 800d942:	4013      	ands	r3, r2
 800d944:	2b00      	cmp	r3, #0
 800d946:	d107      	bne.n	800d958 <HAL_TIM_IC_Stop_DMA+0x108>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 0201 	bic.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d104      	bne.n	800d968 <HAL_TIM_IC_Stop_DMA+0x118>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d966:	e023      	b.n	800d9b0 <HAL_TIM_IC_Stop_DMA+0x160>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b04      	cmp	r3, #4
 800d96c:	d104      	bne.n	800d978 <HAL_TIM_IC_Stop_DMA+0x128>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d976:	e01b      	b.n	800d9b0 <HAL_TIM_IC_Stop_DMA+0x160>
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	2b08      	cmp	r3, #8
 800d97c:	d104      	bne.n	800d988 <HAL_TIM_IC_Stop_DMA+0x138>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d986:	e013      	b.n	800d9b0 <HAL_TIM_IC_Stop_DMA+0x160>
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b0c      	cmp	r3, #12
 800d98c:	d104      	bne.n	800d998 <HAL_TIM_IC_Stop_DMA+0x148>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d996:	e00b      	b.n	800d9b0 <HAL_TIM_IC_Stop_DMA+0x160>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b10      	cmp	r3, #16
 800d99c:	d104      	bne.n	800d9a8 <HAL_TIM_IC_Stop_DMA+0x158>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9a6:	e003      	b.n	800d9b0 <HAL_TIM_IC_Stop_DMA+0x160>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d104      	bne.n	800d9c0 <HAL_TIM_IC_Stop_DMA+0x170>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9be:	e013      	b.n	800d9e8 <HAL_TIM_IC_Stop_DMA+0x198>
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d104      	bne.n	800d9d0 <HAL_TIM_IC_Stop_DMA+0x180>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9ce:	e00b      	b.n	800d9e8 <HAL_TIM_IC_Stop_DMA+0x198>
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b08      	cmp	r3, #8
 800d9d4:	d104      	bne.n	800d9e0 <HAL_TIM_IC_Stop_DMA+0x190>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d9de:	e003      	b.n	800d9e8 <HAL_TIM_IC_Stop_DMA+0x198>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop

0800d9f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b02      	cmp	r3, #2
 800da08:	d122      	bne.n	800da50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	f003 0302 	and.w	r3, r3, #2
 800da14:	2b02      	cmp	r3, #2
 800da16:	d11b      	bne.n	800da50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f06f 0202 	mvn.w	r2, #2
 800da20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7f8 fb28 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 800da3c:	e005      	b.n	800da4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 faa0 	bl	800df84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 faa7 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	f003 0304 	and.w	r3, r3, #4
 800da5a:	2b04      	cmp	r3, #4
 800da5c:	d122      	bne.n	800daa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	f003 0304 	and.w	r3, r3, #4
 800da68:	2b04      	cmp	r3, #4
 800da6a:	d11b      	bne.n	800daa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f06f 0204 	mvn.w	r2, #4
 800da74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2202      	movs	r2, #2
 800da7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7f8 fafe 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 800da90:	e005      	b.n	800da9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fa76 	bl	800df84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fa7d 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	691b      	ldr	r3, [r3, #16]
 800daaa:	f003 0308 	and.w	r3, r3, #8
 800daae:	2b08      	cmp	r3, #8
 800dab0:	d122      	bne.n	800daf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	f003 0308 	and.w	r3, r3, #8
 800dabc:	2b08      	cmp	r3, #8
 800dabe:	d11b      	bne.n	800daf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f06f 0208 	mvn.w	r2, #8
 800dac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2204      	movs	r2, #4
 800dace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f003 0303 	and.w	r3, r3, #3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7f8 fad4 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 800dae4:	e005      	b.n	800daf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fa4c 	bl	800df84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fa53 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	f003 0310 	and.w	r3, r3, #16
 800db02:	2b10      	cmp	r3, #16
 800db04:	d122      	bne.n	800db4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	f003 0310 	and.w	r3, r3, #16
 800db10:	2b10      	cmp	r3, #16
 800db12:	d11b      	bne.n	800db4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f06f 0210 	mvn.w	r2, #16
 800db1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2208      	movs	r2, #8
 800db22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7f8 faaa 	bl	800608c <HAL_TIM_IC_CaptureCallback>
 800db38:	e005      	b.n	800db46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fa22 	bl	800df84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fa29 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	2b01      	cmp	r3, #1
 800db58:	d10e      	bne.n	800db78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b01      	cmp	r3, #1
 800db66:	d107      	bne.n	800db78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f06f 0201 	mvn.w	r2, #1
 800db70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f7 fe52 	bl	800581c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db82:	2b80      	cmp	r3, #128	; 0x80
 800db84:	d10e      	bne.n	800dba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db90:	2b80      	cmp	r3, #128	; 0x80
 800db92:	d107      	bne.n	800dba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fd9a 	bl	800e6d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbb2:	d10e      	bne.n	800dbd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbbe:	2b80      	cmp	r3, #128	; 0x80
 800dbc0:	d107      	bne.n	800dbd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dbca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fd8d 	bl	800e6ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbdc:	2b40      	cmp	r3, #64	; 0x40
 800dbde:	d10e      	bne.n	800dbfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbea:	2b40      	cmp	r3, #64	; 0x40
 800dbec:	d107      	bne.n	800dbfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f9d7 	bl	800dfac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b20      	cmp	r3, #32
 800dc0a:	d10e      	bne.n	800dc2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f003 0320 	and.w	r3, r3, #32
 800dc16:	2b20      	cmp	r3, #32
 800dc18:	d107      	bne.n	800dc2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f06f 0220 	mvn.w	r2, #32
 800dc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fd4d 	bl	800e6c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b086      	sub	sp, #24
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d101      	bne.n	800dc50 <HAL_TIM_IC_ConfigChannel+0x1e>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	e088      	b.n	800dd62 <HAL_TIM_IC_ConfigChannel+0x130>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d11b      	bne.n	800dc96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	6819      	ldr	r1, [r3, #0]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	f000 faf7 	bl	800e260 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	699a      	ldr	r2, [r3, #24]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f022 020c 	bic.w	r2, r2, #12
 800dc80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6999      	ldr	r1, [r3, #24]
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	689a      	ldr	r2, [r3, #8]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	430a      	orrs	r2, r1
 800dc92:	619a      	str	r2, [r3, #24]
 800dc94:	e060      	b.n	800dd58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b04      	cmp	r3, #4
 800dc9a:	d11c      	bne.n	800dcd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6818      	ldr	r0, [r3, #0]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	6819      	ldr	r1, [r3, #0]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	685a      	ldr	r2, [r3, #4]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	f000 fb5d 	bl	800e36a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	699a      	ldr	r2, [r3, #24]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dcbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6999      	ldr	r1, [r3, #24]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	021a      	lsls	r2, r3, #8
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	619a      	str	r2, [r3, #24]
 800dcd4:	e040      	b.n	800dd58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d11b      	bne.n	800dd14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6818      	ldr	r0, [r3, #0]
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f000 fbaa 	bl	800e444 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	69da      	ldr	r2, [r3, #28]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f022 020c 	bic.w	r2, r2, #12
 800dcfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	69d9      	ldr	r1, [r3, #28]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	689a      	ldr	r2, [r3, #8]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	430a      	orrs	r2, r1
 800dd10:	61da      	str	r2, [r3, #28]
 800dd12:	e021      	b.n	800dd58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b0c      	cmp	r3, #12
 800dd18:	d11c      	bne.n	800dd54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6818      	ldr	r0, [r3, #0]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	6819      	ldr	r1, [r3, #0]
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	f000 fbc7 	bl	800e4bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	69da      	ldr	r2, [r3, #28]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dd3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	69d9      	ldr	r1, [r3, #28]
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	021a      	lsls	r2, r3, #8
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	430a      	orrs	r2, r1
 800dd50:	61da      	str	r2, [r3, #28]
 800dd52:	e001      	b.n	800dd58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d101      	bne.n	800dd86 <HAL_TIM_ConfigClockSource+0x1c>
 800dd82:	2302      	movs	r3, #2
 800dd84:	e0b6      	b.n	800def4 <HAL_TIM_ConfigClockSource+0x18a>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2202      	movs	r2, #2
 800dd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dda4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dda8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddb0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddc2:	d03e      	beq.n	800de42 <HAL_TIM_ConfigClockSource+0xd8>
 800ddc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddc8:	f200 8087 	bhi.w	800deda <HAL_TIM_ConfigClockSource+0x170>
 800ddcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddd0:	f000 8086 	beq.w	800dee0 <HAL_TIM_ConfigClockSource+0x176>
 800ddd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddd8:	d87f      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800ddda:	2b70      	cmp	r3, #112	; 0x70
 800dddc:	d01a      	beq.n	800de14 <HAL_TIM_ConfigClockSource+0xaa>
 800ddde:	2b70      	cmp	r3, #112	; 0x70
 800dde0:	d87b      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800dde2:	2b60      	cmp	r3, #96	; 0x60
 800dde4:	d050      	beq.n	800de88 <HAL_TIM_ConfigClockSource+0x11e>
 800dde6:	2b60      	cmp	r3, #96	; 0x60
 800dde8:	d877      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800ddea:	2b50      	cmp	r3, #80	; 0x50
 800ddec:	d03c      	beq.n	800de68 <HAL_TIM_ConfigClockSource+0xfe>
 800ddee:	2b50      	cmp	r3, #80	; 0x50
 800ddf0:	d873      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800ddf2:	2b40      	cmp	r3, #64	; 0x40
 800ddf4:	d058      	beq.n	800dea8 <HAL_TIM_ConfigClockSource+0x13e>
 800ddf6:	2b40      	cmp	r3, #64	; 0x40
 800ddf8:	d86f      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800ddfa:	2b30      	cmp	r3, #48	; 0x30
 800ddfc:	d064      	beq.n	800dec8 <HAL_TIM_ConfigClockSource+0x15e>
 800ddfe:	2b30      	cmp	r3, #48	; 0x30
 800de00:	d86b      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800de02:	2b20      	cmp	r3, #32
 800de04:	d060      	beq.n	800dec8 <HAL_TIM_ConfigClockSource+0x15e>
 800de06:	2b20      	cmp	r3, #32
 800de08:	d867      	bhi.n	800deda <HAL_TIM_ConfigClockSource+0x170>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d05c      	beq.n	800dec8 <HAL_TIM_ConfigClockSource+0x15e>
 800de0e:	2b10      	cmp	r3, #16
 800de10:	d05a      	beq.n	800dec8 <HAL_TIM_ConfigClockSource+0x15e>
 800de12:	e062      	b.n	800deda <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	6899      	ldr	r1, [r3, #8]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	f000 fba2 	bl	800e56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	609a      	str	r2, [r3, #8]
      break;
 800de40:	e04f      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6818      	ldr	r0, [r3, #0]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	6899      	ldr	r1, [r3, #8]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	f000 fb8b 	bl	800e56c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de64:	609a      	str	r2, [r3, #8]
      break;
 800de66:	e03c      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6818      	ldr	r0, [r3, #0]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	6859      	ldr	r1, [r3, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	461a      	mov	r2, r3
 800de76:	f000 fa49 	bl	800e30c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2150      	movs	r1, #80	; 0x50
 800de80:	4618      	mov	r0, r3
 800de82:	f000 fb58 	bl	800e536 <TIM_ITRx_SetConfig>
      break;
 800de86:	e02c      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	6859      	ldr	r1, [r3, #4]
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	461a      	mov	r2, r3
 800de96:	f000 faa5 	bl	800e3e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2160      	movs	r1, #96	; 0x60
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 fb48 	bl	800e536 <TIM_ITRx_SetConfig>
      break;
 800dea6:	e01c      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6818      	ldr	r0, [r3, #0]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	6859      	ldr	r1, [r3, #4]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	461a      	mov	r2, r3
 800deb6:	f000 fa29 	bl	800e30c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2140      	movs	r1, #64	; 0x40
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 fb38 	bl	800e536 <TIM_ITRx_SetConfig>
      break;
 800dec6:	e00c      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4619      	mov	r1, r3
 800ded2:	4610      	mov	r0, r2
 800ded4:	f000 fb2f 	bl	800e536 <TIM_ITRx_SetConfig>
      break;
 800ded8:	e003      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	73fb      	strb	r3, [r7, #15]
      break;
 800dede:	e000      	b.n	800dee2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800dee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800def2:	7bfb      	ldrb	r3, [r7, #15]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b0c      	cmp	r3, #12
 800df0e:	d831      	bhi.n	800df74 <HAL_TIM_ReadCapturedValue+0x78>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <HAL_TIM_ReadCapturedValue+0x1c>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800df4d 	.word	0x0800df4d
 800df1c:	0800df75 	.word	0x0800df75
 800df20:	0800df75 	.word	0x0800df75
 800df24:	0800df75 	.word	0x0800df75
 800df28:	0800df57 	.word	0x0800df57
 800df2c:	0800df75 	.word	0x0800df75
 800df30:	0800df75 	.word	0x0800df75
 800df34:	0800df75 	.word	0x0800df75
 800df38:	0800df61 	.word	0x0800df61
 800df3c:	0800df75 	.word	0x0800df75
 800df40:	0800df75 	.word	0x0800df75
 800df44:	0800df75 	.word	0x0800df75
 800df48:	0800df6b 	.word	0x0800df6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df52:	60fb      	str	r3, [r7, #12]

      break;
 800df54:	e00f      	b.n	800df76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5c:	60fb      	str	r3, [r7, #12]

      break;
 800df5e:	e00a      	b.n	800df76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df66:	60fb      	str	r3, [r7, #12]

      break;
 800df68:	e005      	b.n	800df76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df70:	60fb      	str	r3, [r7, #12]

      break;
 800df72:	e000      	b.n	800df76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800df74:	bf00      	nop
  }

  return tmpreg;
 800df76:	68fb      	ldr	r3, [r7, #12]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfb4:	bf00      	nop
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d107      	bne.n	800dffc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2201      	movs	r2, #1
 800dff0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2201      	movs	r2, #1
 800dff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dffa:	e02a      	b.n	800e052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	429a      	cmp	r2, r3
 800e004:	d107      	bne.n	800e016 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2202      	movs	r2, #2
 800e00a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e014:	e01d      	b.n	800e052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d107      	bne.n	800e030 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2204      	movs	r2, #4
 800e024:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e02e:	e010      	b.n	800e052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	429a      	cmp	r2, r3
 800e038:	d107      	bne.n	800e04a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2208      	movs	r2, #8
 800e03e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e048:	e003      	b.n	800e052 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff ffb4 	bl	800dfc0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	771a      	strb	r2, [r3, #28]
}
 800e05e:	bf00      	nop
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d10f      	bne.n	800e09e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2201      	movs	r2, #1
 800e082:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d146      	bne.n	800e11a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e09c:	e03d      	b.n	800e11a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d10f      	bne.n	800e0c8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	69db      	ldr	r3, [r3, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d131      	bne.n	800e11a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0c6:	e028      	b.n	800e11a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d10f      	bne.n	800e0f2 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2204      	movs	r2, #4
 800e0d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d11c      	bne.n	800e11a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0f0:	e013      	b.n	800e11a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d10e      	bne.n	800e11a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2208      	movs	r2, #8
 800e100:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d107      	bne.n	800e11a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7f7 ffb6 	bl	800608c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2200      	movs	r2, #0
 800e124:	771a      	strb	r2, [r3, #28]
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	429a      	cmp	r2, r3
 800e144:	d103      	bne.n	800e14e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2201      	movs	r2, #1
 800e14a:	771a      	strb	r2, [r3, #28]
 800e14c:	e019      	b.n	800e182 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	429a      	cmp	r2, r3
 800e156:	d103      	bne.n	800e160 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2202      	movs	r2, #2
 800e15c:	771a      	strb	r2, [r3, #28]
 800e15e:	e010      	b.n	800e182 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	429a      	cmp	r2, r3
 800e168:	d103      	bne.n	800e172 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2204      	movs	r2, #4
 800e16e:	771a      	strb	r2, [r3, #28]
 800e170:	e007      	b.n	800e182 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d102      	bne.n	800e182 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2208      	movs	r2, #8
 800e180:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7f7 ff22 	bl	8005fcc <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	771a      	strb	r2, [r3, #28]
}
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
	...

0800e198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a2a      	ldr	r2, [pc, #168]	; (800e254 <TIM_Base_SetConfig+0xbc>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d003      	beq.n	800e1b8 <TIM_Base_SetConfig+0x20>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1b6:	d108      	bne.n	800e1ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a21      	ldr	r2, [pc, #132]	; (800e254 <TIM_Base_SetConfig+0xbc>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d00b      	beq.n	800e1ea <TIM_Base_SetConfig+0x52>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1d8:	d007      	beq.n	800e1ea <TIM_Base_SetConfig+0x52>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a1e      	ldr	r2, [pc, #120]	; (800e258 <TIM_Base_SetConfig+0xc0>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d003      	beq.n	800e1ea <TIM_Base_SetConfig+0x52>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a1d      	ldr	r2, [pc, #116]	; (800e25c <TIM_Base_SetConfig+0xc4>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d108      	bne.n	800e1fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	4313      	orrs	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a0c      	ldr	r2, [pc, #48]	; (800e254 <TIM_Base_SetConfig+0xbc>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d007      	beq.n	800e238 <TIM_Base_SetConfig+0xa0>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a0b      	ldr	r2, [pc, #44]	; (800e258 <TIM_Base_SetConfig+0xc0>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d003      	beq.n	800e238 <TIM_Base_SetConfig+0xa0>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <TIM_Base_SetConfig+0xc4>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d103      	bne.n	800e240 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	691a      	ldr	r2, [r3, #16]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	615a      	str	r2, [r3, #20]
}
 800e246:	bf00      	nop
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	40012c00 	.word	0x40012c00
 800e258:	40014000 	.word	0x40014000
 800e25c:	40014400 	.word	0x40014400

0800e260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e260:	b480      	push	{r7}
 800e262:	b087      	sub	sp, #28
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	f023 0201 	bic.w	r2, r3, #1
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4a1e      	ldr	r2, [pc, #120]	; (800e304 <TIM_TI1_SetConfig+0xa4>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d007      	beq.n	800e29e <TIM_TI1_SetConfig+0x3e>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e294:	d003      	beq.n	800e29e <TIM_TI1_SetConfig+0x3e>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	4a1b      	ldr	r2, [pc, #108]	; (800e308 <TIM_TI1_SetConfig+0xa8>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d101      	bne.n	800e2a2 <TIM_TI1_SetConfig+0x42>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e000      	b.n	800e2a4 <TIM_TI1_SetConfig+0x44>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d008      	beq.n	800e2ba <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e2b0:	697a      	ldr	r2, [r7, #20]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	e003      	b.n	800e2c2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f043 0301 	orr.w	r3, r3, #1
 800e2c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e2c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	f023 030a 	bic.w	r3, r3, #10
 800e2dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	f003 030a 	and.w	r3, r3, #10
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	621a      	str	r2, [r3, #32]
}
 800e2f6:	bf00      	nop
 800e2f8:	371c      	adds	r7, #28
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	40012c00 	.word	0x40012c00
 800e308:	40014000 	.word	0x40014000

0800e30c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b087      	sub	sp, #28
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	f023 0201 	bic.w	r2, r3, #1
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	011b      	lsls	r3, r3, #4
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	4313      	orrs	r3, r2
 800e340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	f023 030a 	bic.w	r3, r3, #10
 800e348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	4313      	orrs	r3, r2
 800e350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	693a      	ldr	r2, [r7, #16]
 800e356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	621a      	str	r2, [r3, #32]
}
 800e35e:	bf00      	nop
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr

0800e36a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e36a:	b480      	push	{r7}
 800e36c:	b087      	sub	sp, #28
 800e36e:	af00      	add	r7, sp, #0
 800e370:	60f8      	str	r0, [r7, #12]
 800e372:	60b9      	str	r1, [r7, #8]
 800e374:	607a      	str	r2, [r7, #4]
 800e376:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	f023 0210 	bic.w	r2, r3, #16
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	021b      	lsls	r3, r3, #8
 800e39c:	697a      	ldr	r2, [r7, #20]
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	031b      	lsls	r3, r3, #12
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	011b      	lsls	r3, r3, #4
 800e3c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	621a      	str	r2, [r3, #32]
}
 800e3d8:	bf00      	nop
 800e3da:	371c      	adds	r7, #28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	f023 0210 	bic.w	r2, r3, #16
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e40e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	031b      	lsls	r3, r3, #12
 800e414:	697a      	ldr	r2, [r7, #20]
 800e416:	4313      	orrs	r3, r2
 800e418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	011b      	lsls	r3, r3, #4
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	4313      	orrs	r3, r2
 800e42a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	621a      	str	r2, [r3, #32]
}
 800e438:	bf00      	nop
 800e43a:	371c      	adds	r7, #28
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e444:	b480      	push	{r7}
 800e446:	b087      	sub	sp, #28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a1b      	ldr	r3, [r3, #32]
 800e468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f023 0303 	bic.w	r3, r3, #3
 800e470:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e472:	697a      	ldr	r2, [r7, #20]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4313      	orrs	r3, r2
 800e478:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e480:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	011b      	lsls	r3, r3, #4
 800e486:	b2db      	uxtb	r3, r3
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e494:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	021b      	lsls	r3, r3, #8
 800e49a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	693a      	ldr	r2, [r7, #16]
 800e4ae:	621a      	str	r2, [r3, #32]
}
 800e4b0:	bf00      	nop
 800e4b2:	371c      	adds	r7, #28
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	69db      	ldr	r3, [r3, #28]
 800e4da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6a1b      	ldr	r3, [r3, #32]
 800e4e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	021b      	lsls	r3, r3, #8
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e4fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	031b      	lsls	r3, r3, #12
 800e500:	b29b      	uxth	r3, r3
 800e502:	697a      	ldr	r2, [r7, #20]
 800e504:	4313      	orrs	r3, r2
 800e506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e50e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	031b      	lsls	r3, r3, #12
 800e514:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	621a      	str	r2, [r3, #32]
}
 800e52a:	bf00      	nop
 800e52c:	371c      	adds	r7, #28
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e536:	b480      	push	{r7}
 800e538:	b085      	sub	sp, #20
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e54c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4313      	orrs	r3, r2
 800e554:	f043 0307 	orr.w	r3, r3, #7
 800e558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	609a      	str	r2, [r3, #8]
}
 800e560:	bf00      	nop
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b087      	sub	sp, #28
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	021a      	lsls	r2, r3, #8
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	431a      	orrs	r2, r3
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	4313      	orrs	r3, r2
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	4313      	orrs	r3, r2
 800e598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	609a      	str	r2, [r3, #8]
}
 800e5a0:	bf00      	nop
 800e5a2:	371c      	adds	r7, #28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b087      	sub	sp, #28
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	f003 031f 	and.w	r3, r3, #31
 800e5be:	2201      	movs	r2, #1
 800e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6a1a      	ldr	r2, [r3, #32]
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	43db      	mvns	r3, r3
 800e5ce:	401a      	ands	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6a1a      	ldr	r2, [r3, #32]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f003 031f 	and.w	r3, r3, #31
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e4:	431a      	orrs	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	621a      	str	r2, [r3, #32]
}
 800e5ea:	bf00      	nop
 800e5ec:	371c      	adds	r7, #28
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
	...

0800e5f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d101      	bne.n	800e610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e60c:	2302      	movs	r3, #2
 800e60e:	e04f      	b.n	800e6b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a21      	ldr	r2, [pc, #132]	; (800e6bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d108      	bne.n	800e64c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e640:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	4313      	orrs	r3, r2
 800e64a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4a14      	ldr	r2, [pc, #80]	; (800e6bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d009      	beq.n	800e684 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e678:	d004      	beq.n	800e684 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a10      	ldr	r2, [pc, #64]	; (800e6c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d10c      	bne.n	800e69e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e68a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	4313      	orrs	r3, r2
 800e694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	40012c00 	.word	0x40012c00
 800e6c0:	40014000 	.word	0x40014000

0800e6c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e6cc:	bf00      	nop
 800e6ce:	370c      	adds	r7, #12
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d101      	bne.n	800e712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	e040      	b.n	800e794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e716:	2b00      	cmp	r3, #0
 800e718:	d106      	bne.n	800e728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7f7 feda 	bl	80064dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2224      	movs	r2, #36	; 0x24
 800e72c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f022 0201 	bic.w	r2, r2, #1
 800e73c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 fda4 	bl	800f28c <UART_SetConfig>
 800e744:	4603      	mov	r3, r0
 800e746:	2b01      	cmp	r3, #1
 800e748:	d101      	bne.n	800e74e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e022      	b.n	800e794 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e752:	2b00      	cmp	r3, #0
 800e754:	d002      	beq.n	800e75c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 ffc4 	bl	800f6e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685a      	ldr	r2, [r3, #4]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e76a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689a      	ldr	r2, [r3, #8]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e77a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f042 0201 	orr.w	r2, r2, #1
 800e78a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 f84b 	bl	800f828 <UART_CheckIdleState>
 800e792:	4603      	mov	r3, r0
}
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e02b      	b.n	800e806 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2224      	movs	r2, #36	; 0x24
 800e7b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0201 	bic.w	r2, r2, #1
 800e7c2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7f7 ff41 	bl	8006664 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
	...

0800e810 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e810:	b480      	push	{r7}
 800e812:	b08b      	sub	sp, #44	; 0x2c
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	4613      	mov	r3, r2
 800e81c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e822:	2b20      	cmp	r3, #32
 800e824:	d156      	bne.n	800e8d4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <HAL_UART_Transmit_IT+0x22>
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	e04f      	b.n	800e8d6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d101      	bne.n	800e844 <HAL_UART_Transmit_IT+0x34>
 800e840:	2302      	movs	r3, #2
 800e842:	e048      	b.n	800e8d6 <HAL_UART_Transmit_IT+0xc6>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2201      	movs	r2, #1
 800e848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	88fa      	ldrh	r2, [r7, #6]
 800e856:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	88fa      	ldrh	r2, [r7, #6]
 800e85e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2221      	movs	r2, #33	; 0x21
 800e874:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e87e:	d107      	bne.n	800e890 <HAL_UART_Transmit_IT+0x80>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d103      	bne.n	800e890 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	4a16      	ldr	r2, [pc, #88]	; (800e8e4 <HAL_UART_Transmit_IT+0xd4>)
 800e88c:	669a      	str	r2, [r3, #104]	; 0x68
 800e88e:	e002      	b.n	800e896 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4a15      	ldr	r2, [pc, #84]	; (800e8e8 <HAL_UART_Transmit_IT+0xd8>)
 800e894:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	e853 3f00 	ldrex	r3, [r3]
 800e8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	623b      	str	r3, [r7, #32]
 800e8be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	69f9      	ldr	r1, [r7, #28]
 800e8c2:	6a3a      	ldr	r2, [r7, #32]
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e6      	bne.n	800e89e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	e000      	b.n	800e8d6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800e8d4:	2302      	movs	r3, #2
  }
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	372c      	adds	r7, #44	; 0x2c
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	0800fdf9 	.word	0x0800fdf9
 800e8e8:	0800fd41 	.word	0x0800fd41

0800e8ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08a      	sub	sp, #40	; 0x28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	d142      	bne.n	800e988 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <HAL_UART_Receive_IT+0x22>
 800e908:	88fb      	ldrh	r3, [r7, #6]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e03b      	b.n	800e98a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d101      	bne.n	800e920 <HAL_UART_Receive_IT+0x34>
 800e91c:	2302      	movs	r3, #2
 800e91e:	e034      	b.n	800e98a <HAL_UART_Receive_IT+0x9e>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a18      	ldr	r2, [pc, #96]	; (800e994 <HAL_UART_Receive_IT+0xa8>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d01f      	beq.n	800e978 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e942:	2b00      	cmp	r3, #0
 800e944:	d018      	beq.n	800e978 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	e853 3f00 	ldrex	r3, [r3]
 800e952:	613b      	str	r3, [r7, #16]
   return(result);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e95a:	627b      	str	r3, [r7, #36]	; 0x24
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	461a      	mov	r2, r3
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	623b      	str	r3, [r7, #32]
 800e966:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	69f9      	ldr	r1, [r7, #28]
 800e96a:	6a3a      	ldr	r2, [r7, #32]
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	61bb      	str	r3, [r7, #24]
   return(result);
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e6      	bne.n	800e946 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e978:	88fb      	ldrh	r3, [r7, #6]
 800e97a:	461a      	mov	r2, r3
 800e97c:	68b9      	ldr	r1, [r7, #8]
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f001 f860 	bl	800fa44 <UART_Start_Receive_IT>
 800e984:	4603      	mov	r3, r0
 800e986:	e000      	b.n	800e98a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e988:	2302      	movs	r3, #2
  }
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3728      	adds	r7, #40	; 0x28
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	40008000 	.word	0x40008000

0800e998 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08e      	sub	sp, #56	; 0x38
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	e853 3f00 	ldrex	r3, [r3]
 800e9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e6      	bne.n	800e9a0 <HAL_UART_AbortTransmit_IT+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9dc:	2b80      	cmp	r3, #128	; 0x80
 800e9de:	d13f      	bne.n	800ea60 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9f6:	633b      	str	r3, [r7, #48]	; 0x30
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3308      	adds	r3, #8
 800e9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea00:	61ba      	str	r2, [r7, #24]
 800ea02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea04:	6979      	ldr	r1, [r7, #20]
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	e841 2300 	strex	r3, r2, [r1]
 800ea0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e5      	bne.n	800e9e0 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d013      	beq.n	800ea44 <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	4a18      	ldr	r2, [pc, #96]	; (800ea84 <HAL_UART_AbortTransmit_IT+0xec>)
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fa fd85 	bl	8009538 <HAL_DMA_Abort_IT>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d022      	beq.n	800ea7a <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ea3e:	4610      	mov	r0, r2
 800ea40:	4798      	blx	r3
 800ea42:	e01a      	b.n	800ea7a <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2220      	movs	r2, #32
 800ea56:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fbbf 	bl	800f1dc <HAL_UART_AbortTransmitCpltCallback>
 800ea5e:	e00c      	b.n	800ea7a <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fbb1 	bl	800f1dc <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3738      	adds	r7, #56	; 0x38
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	0800fccb 	.word	0x0800fccb

0800ea88 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b09a      	sub	sp, #104	; 0x68
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	e853 3f00 	ldrex	r3, [r3]
 800ea9c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eaa4:	667b      	str	r3, [r7, #100]	; 0x64
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaae:	657b      	str	r3, [r7, #84]	; 0x54
 800eab0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eab6:	e841 2300 	strex	r3, r2, [r1]
 800eaba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1e6      	bne.n	800ea90 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3308      	adds	r3, #8
 800eac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eacc:	e853 3f00 	ldrex	r3, [r3]
 800ead0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	f023 0301 	bic.w	r3, r3, #1
 800ead8:	663b      	str	r3, [r7, #96]	; 0x60
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	3308      	adds	r3, #8
 800eae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eae2:	643a      	str	r2, [r7, #64]	; 0x40
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaea:	e841 2300 	strex	r3, r2, [r1]
 800eaee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e5      	bne.n	800eac2 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d118      	bne.n	800eb30 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	e853 3f00 	ldrex	r3, [r3]
 800eb0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	f023 0310 	bic.w	r3, r3, #16
 800eb12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb24:	e841 2300 	strex	r3, r2, [r1]
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1e6      	bne.n	800eafe <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb3a:	2b40      	cmp	r3, #64	; 0x40
 800eb3c:	d150      	bne.n	800ebe0 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3308      	adds	r3, #8
 800eb44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb54:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb5e:	61ba      	str	r2, [r7, #24]
 800eb60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6979      	ldr	r1, [r7, #20]
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e5      	bne.n	800eb3e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d013      	beq.n	800eba2 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7e:	4a25      	ldr	r2, [pc, #148]	; (800ec14 <HAL_UART_AbortReceive_IT+0x18c>)
 800eb80:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fa fcd6 	bl	8009538 <HAL_DMA_Abort_IT>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d03a      	beq.n	800ec08 <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	4798      	blx	r3
 800eba0:	e032      	b.n	800ec08 <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	220f      	movs	r2, #15
 800ebb6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	8b1b      	ldrh	r3, [r3, #24]
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f042 0208 	orr.w	r2, r2, #8
 800ebc8:	b292      	uxth	r2, r2
 800ebca:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2220      	movs	r2, #32
 800ebd0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fb09 	bl	800f1f0 <HAL_UART_AbortReceiveCpltCallback>
 800ebde:	e013      	b.n	800ec08 <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	220f      	movs	r2, #15
 800ebf4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2220      	movs	r2, #32
 800ebfa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 faf4 	bl	800f1f0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3768      	adds	r7, #104	; 0x68
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0800fcf5 	.word	0x0800fcf5

0800ec18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b0ba      	sub	sp, #232	; 0xe8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec42:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec46:	4013      	ands	r3, r2
 800ec48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d115      	bne.n	800ec80 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ec54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec58:	f003 0320 	and.w	r3, r3, #32
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00f      	beq.n	800ec80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ec60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec64:	f003 0320 	and.w	r3, r3, #32
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d009      	beq.n	800ec80 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 82a6 	beq.w	800f1c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	4798      	blx	r3
      }
      return;
 800ec7e:	e2a0      	b.n	800f1c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ec80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 8117 	beq.w	800eeb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ec8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec8e:	f003 0301 	and.w	r3, r3, #1
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d106      	bne.n	800eca4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ec96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec9a:	4b85      	ldr	r3, [pc, #532]	; (800eeb0 <HAL_UART_IRQHandler+0x298>)
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 810a 	beq.w	800eeb8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d011      	beq.n	800ecd4 <HAL_UART_IRQHandler+0xbc>
 800ecb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00b      	beq.n	800ecd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecca:	f043 0201 	orr.w	r2, r3, #1
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd8:	f003 0302 	and.w	r3, r3, #2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d011      	beq.n	800ed04 <HAL_UART_IRQHandler+0xec>
 800ece0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00b      	beq.n	800ed04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecfa:	f043 0204 	orr.w	r2, r3, #4
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d011      	beq.n	800ed34 <HAL_UART_IRQHandler+0x11c>
 800ed10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00b      	beq.n	800ed34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2204      	movs	r2, #4
 800ed22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed2a:	f043 0202 	orr.w	r2, r3, #2
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed38:	f003 0308 	and.w	r3, r3, #8
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d017      	beq.n	800ed70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ed40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed44:	f003 0320 	and.w	r3, r3, #32
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d105      	bne.n	800ed58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ed4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00b      	beq.n	800ed70 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2208      	movs	r2, #8
 800ed5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed66:	f043 0208 	orr.w	r2, r3, #8
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d012      	beq.n	800eda2 <HAL_UART_IRQHandler+0x18a>
 800ed7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00c      	beq.n	800eda2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed98:	f043 0220 	orr.w	r2, r3, #32
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 820c 	beq.w	800f1c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800edae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb2:	f003 0320 	and.w	r3, r3, #32
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00d      	beq.n	800edd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800edba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d007      	beq.n	800edd6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edea:	2b40      	cmp	r3, #64	; 0x40
 800edec:	d005      	beq.n	800edfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800edee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800edf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d04f      	beq.n	800ee9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 feec 	bl	800fbd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee0a:	2b40      	cmp	r3, #64	; 0x40
 800ee0c:	d141      	bne.n	800ee92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3308      	adds	r3, #8
 800ee14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee1c:	e853 3f00 	ldrex	r3, [r3]
 800ee20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3308      	adds	r3, #8
 800ee36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee4a:	e841 2300 	strex	r3, r2, [r1]
 800ee4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1d9      	bne.n	800ee0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d013      	beq.n	800ee8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee66:	4a13      	ldr	r2, [pc, #76]	; (800eeb4 <HAL_UART_IRQHandler+0x29c>)
 800ee68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fa fb62 	bl	8009538 <HAL_DMA_Abort_IT>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d017      	beq.n	800eeaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ee84:	4610      	mov	r0, r2
 800ee86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee88:	e00f      	b.n	800eeaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7f7 fa5e 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee90:	e00b      	b.n	800eeaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7f7 fa5a 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee98:	e007      	b.n	800eeaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7f7 fa56 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800eea8:	e18d      	b.n	800f1c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeaa:	bf00      	nop
    return;
 800eeac:	e18b      	b.n	800f1c6 <HAL_UART_IRQHandler+0x5ae>
 800eeae:	bf00      	nop
 800eeb0:	04000120 	.word	0x04000120
 800eeb4:	0800fc9f 	.word	0x0800fc9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	f040 8146 	bne.w	800f14e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eec6:	f003 0310 	and.w	r3, r3, #16
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 813f 	beq.w	800f14e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eed4:	f003 0310 	and.w	r3, r3, #16
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 8138 	beq.w	800f14e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2210      	movs	r2, #16
 800eee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	f040 80b4 	bne.w	800f05e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f000 815f 	beq.w	800f1ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ef12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef16:	429a      	cmp	r2, r3
 800ef18:	f080 8157 	bcs.w	800f1ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f003 0320 	and.w	r3, r3, #32
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f040 8085 	bne.w	800f042 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef44:	e853 3f00 	ldrex	r3, [r3]
 800ef48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ef4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ef66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ef6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ef7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1da      	bne.n	800ef38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3308      	adds	r3, #8
 800ef88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef8c:	e853 3f00 	ldrex	r3, [r3]
 800ef90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ef92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef94:	f023 0301 	bic.w	r3, r3, #1
 800ef98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	3308      	adds	r3, #8
 800efa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800efa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800efaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800efae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800efb2:	e841 2300 	strex	r3, r2, [r1]
 800efb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800efb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1e1      	bne.n	800ef82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	3308      	adds	r3, #8
 800efc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efc8:	e853 3f00 	ldrex	r3, [r3]
 800efcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800efce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3308      	adds	r3, #8
 800efde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800efe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800efe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800efe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800efea:	e841 2300 	strex	r3, r2, [r1]
 800efee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1e3      	bne.n	800efbe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2220      	movs	r2, #32
 800effa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00a:	e853 3f00 	ldrex	r3, [r3]
 800f00e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f012:	f023 0310 	bic.w	r3, r3, #16
 800f016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	461a      	mov	r2, r3
 800f020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f024:	65bb      	str	r3, [r7, #88]	; 0x58
 800f026:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f02a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f02c:	e841 2300 	strex	r3, r2, [r1]
 800f030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1e4      	bne.n	800f002 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fa fa3d 	bl	80094bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f04e:	b29b      	uxth	r3, r3
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	b29b      	uxth	r3, r3
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f8d4 	bl	800f204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f05c:	e0b5      	b.n	800f1ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f078:	b29b      	uxth	r3, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 80a7 	beq.w	800f1ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800f080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 80a2 	beq.w	800f1ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	e853 3f00 	ldrex	r3, [r3]
 800f096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f09e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f0ac:	647b      	str	r3, [r7, #68]	; 0x44
 800f0ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e4      	bne.n	800f08a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3308      	adds	r3, #8
 800f0c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	e853 3f00 	ldrex	r3, [r3]
 800f0ce:	623b      	str	r3, [r7, #32]
   return(result);
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	f023 0301 	bic.w	r3, r3, #1
 800f0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3308      	adds	r3, #8
 800f0e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f0e4:	633a      	str	r2, [r7, #48]	; 0x30
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0ec:	e841 2300 	strex	r3, r2, [r1]
 800f0f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e3      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2220      	movs	r2, #32
 800f0fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	e853 3f00 	ldrex	r3, [r3]
 800f116:	60fb      	str	r3, [r7, #12]
   return(result);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0310 	bic.w	r3, r3, #16
 800f11e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f12c:	61fb      	str	r3, [r7, #28]
 800f12e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f130:	69b9      	ldr	r1, [r7, #24]
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	e841 2300 	strex	r3, r2, [r1]
 800f138:	617b      	str	r3, [r7, #20]
   return(result);
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1e4      	bne.n	800f10a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f144:	4619      	mov	r1, r3
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f85c 	bl	800f204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f14c:	e03f      	b.n	800f1ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00e      	beq.n	800f178 <HAL_UART_IRQHandler+0x560>
 800f15a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f15e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f162:	2b00      	cmp	r3, #0
 800f164:	d008      	beq.n	800f178 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f16e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f001 f82b 	bl	80101cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f176:	e02d      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f17c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00e      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d008      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f194:	2b00      	cmp	r3, #0
 800f196:	d01c      	beq.n	800f1d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	4798      	blx	r3
    }
    return;
 800f1a0:	e017      	b.n	800f1d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d012      	beq.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
 800f1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00c      	beq.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fe7c 	bl	800feb8 <UART_EndTransmit_IT>
    return;
 800f1c0:	e008      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f1c2:	bf00      	nop
 800f1c4:	e006      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f1c6:	bf00      	nop
 800f1c8:	e004      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f1ca:	bf00      	nop
 800f1cc:	e002      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f1ce:	bf00      	nop
 800f1d0:	e000      	b.n	800f1d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f1d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800f1d4:	37e8      	adds	r7, #232	; 0xe8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop

0800f1dc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	460b      	mov	r3, r1
 800f20e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a17      	ldr	r2, [pc, #92]	; (800f288 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d024      	beq.n	800f278 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f232:	2b20      	cmp	r3, #32
 800f234:	d11e      	bne.n	800f274 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d101      	bne.n	800f244 <HAL_UART_EnableReceiverTimeout+0x28>
 800f240:	2302      	movs	r3, #2
 800f242:	e01a      	b.n	800f27a <HAL_UART_EnableReceiverTimeout+0x5e>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2224      	movs	r2, #36	; 0x24
 800f250:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800f260:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	e002      	b.n	800f27a <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800f274:	2302      	movs	r3, #2
 800f276:	e000      	b.n	800f27a <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800f278:	2301      	movs	r3, #1
  }
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	40008000 	.word	0x40008000

0800f28c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f28c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f290:	b08a      	sub	sp, #40	; 0x28
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	689a      	ldr	r2, [r3, #8]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	431a      	orrs	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	431a      	orrs	r2, r3
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	69db      	ldr	r3, [r3, #28]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4bb4      	ldr	r3, [pc, #720]	; (800f58c <UART_SetConfig+0x300>)
 800f2bc:	4013      	ands	r3, r2
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	6812      	ldr	r2, [r2, #0]
 800f2c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2c4:	430b      	orrs	r3, r1
 800f2c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	68da      	ldr	r2, [r3, #12]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	699b      	ldr	r3, [r3, #24]
 800f2e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4aa9      	ldr	r2, [pc, #676]	; (800f590 <UART_SetConfig+0x304>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d004      	beq.n	800f2f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f308:	430a      	orrs	r2, r1
 800f30a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4aa0      	ldr	r2, [pc, #640]	; (800f594 <UART_SetConfig+0x308>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d126      	bne.n	800f364 <UART_SetConfig+0xd8>
 800f316:	4ba0      	ldr	r3, [pc, #640]	; (800f598 <UART_SetConfig+0x30c>)
 800f318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f31c:	f003 0303 	and.w	r3, r3, #3
 800f320:	2b03      	cmp	r3, #3
 800f322:	d81b      	bhi.n	800f35c <UART_SetConfig+0xd0>
 800f324:	a201      	add	r2, pc, #4	; (adr r2, 800f32c <UART_SetConfig+0xa0>)
 800f326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32a:	bf00      	nop
 800f32c:	0800f33d 	.word	0x0800f33d
 800f330:	0800f34d 	.word	0x0800f34d
 800f334:	0800f345 	.word	0x0800f345
 800f338:	0800f355 	.word	0x0800f355
 800f33c:	2301      	movs	r3, #1
 800f33e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f342:	e080      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f344:	2302      	movs	r3, #2
 800f346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f34a:	e07c      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f34c:	2304      	movs	r3, #4
 800f34e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f352:	e078      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f354:	2308      	movs	r3, #8
 800f356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f35a:	e074      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f35c:	2310      	movs	r3, #16
 800f35e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f362:	e070      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a8c      	ldr	r2, [pc, #560]	; (800f59c <UART_SetConfig+0x310>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d138      	bne.n	800f3e0 <UART_SetConfig+0x154>
 800f36e:	4b8a      	ldr	r3, [pc, #552]	; (800f598 <UART_SetConfig+0x30c>)
 800f370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f374:	f003 030c 	and.w	r3, r3, #12
 800f378:	2b0c      	cmp	r3, #12
 800f37a:	d82d      	bhi.n	800f3d8 <UART_SetConfig+0x14c>
 800f37c:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <UART_SetConfig+0xf8>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f3b9 	.word	0x0800f3b9
 800f388:	0800f3d9 	.word	0x0800f3d9
 800f38c:	0800f3d9 	.word	0x0800f3d9
 800f390:	0800f3d9 	.word	0x0800f3d9
 800f394:	0800f3c9 	.word	0x0800f3c9
 800f398:	0800f3d9 	.word	0x0800f3d9
 800f39c:	0800f3d9 	.word	0x0800f3d9
 800f3a0:	0800f3d9 	.word	0x0800f3d9
 800f3a4:	0800f3c1 	.word	0x0800f3c1
 800f3a8:	0800f3d9 	.word	0x0800f3d9
 800f3ac:	0800f3d9 	.word	0x0800f3d9
 800f3b0:	0800f3d9 	.word	0x0800f3d9
 800f3b4:	0800f3d1 	.word	0x0800f3d1
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3be:	e042      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f3c0:	2302      	movs	r3, #2
 800f3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3c6:	e03e      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f3c8:	2304      	movs	r3, #4
 800f3ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3ce:	e03a      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f3d0:	2308      	movs	r3, #8
 800f3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3d6:	e036      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f3d8:	2310      	movs	r3, #16
 800f3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3de:	e032      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a6a      	ldr	r2, [pc, #424]	; (800f590 <UART_SetConfig+0x304>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d12a      	bne.n	800f440 <UART_SetConfig+0x1b4>
 800f3ea:	4b6b      	ldr	r3, [pc, #428]	; (800f598 <UART_SetConfig+0x30c>)
 800f3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f3f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f3f8:	d01a      	beq.n	800f430 <UART_SetConfig+0x1a4>
 800f3fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f3fe:	d81b      	bhi.n	800f438 <UART_SetConfig+0x1ac>
 800f400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f404:	d00c      	beq.n	800f420 <UART_SetConfig+0x194>
 800f406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f40a:	d815      	bhi.n	800f438 <UART_SetConfig+0x1ac>
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d003      	beq.n	800f418 <UART_SetConfig+0x18c>
 800f410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f414:	d008      	beq.n	800f428 <UART_SetConfig+0x19c>
 800f416:	e00f      	b.n	800f438 <UART_SetConfig+0x1ac>
 800f418:	2300      	movs	r3, #0
 800f41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f41e:	e012      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f420:	2302      	movs	r3, #2
 800f422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f426:	e00e      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f428:	2304      	movs	r3, #4
 800f42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f42e:	e00a      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f430:	2308      	movs	r3, #8
 800f432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f436:	e006      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f438:	2310      	movs	r3, #16
 800f43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f43e:	e002      	b.n	800f446 <UART_SetConfig+0x1ba>
 800f440:	2310      	movs	r3, #16
 800f442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a51      	ldr	r2, [pc, #324]	; (800f590 <UART_SetConfig+0x304>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d17a      	bne.n	800f546 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f454:	2b08      	cmp	r3, #8
 800f456:	d824      	bhi.n	800f4a2 <UART_SetConfig+0x216>
 800f458:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <UART_SetConfig+0x1d4>)
 800f45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45e:	bf00      	nop
 800f460:	0800f485 	.word	0x0800f485
 800f464:	0800f4a3 	.word	0x0800f4a3
 800f468:	0800f48d 	.word	0x0800f48d
 800f46c:	0800f4a3 	.word	0x0800f4a3
 800f470:	0800f493 	.word	0x0800f493
 800f474:	0800f4a3 	.word	0x0800f4a3
 800f478:	0800f4a3 	.word	0x0800f4a3
 800f47c:	0800f4a3 	.word	0x0800f4a3
 800f480:	0800f49b 	.word	0x0800f49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f484:	f7fd f89e 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800f488:	61f8      	str	r0, [r7, #28]
        break;
 800f48a:	e010      	b.n	800f4ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f48c:	4b44      	ldr	r3, [pc, #272]	; (800f5a0 <UART_SetConfig+0x314>)
 800f48e:	61fb      	str	r3, [r7, #28]
        break;
 800f490:	e00d      	b.n	800f4ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f492:	f7fc ffff 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800f496:	61f8      	str	r0, [r7, #28]
        break;
 800f498:	e009      	b.n	800f4ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f49e:	61fb      	str	r3, [r7, #28]
        break;
 800f4a0:	e005      	b.n	800f4ae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f4ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 8107 	beq.w	800f6c4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	4413      	add	r3, r2
 800f4c0:	69fa      	ldr	r2, [r7, #28]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d305      	bcc.n	800f4d2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d903      	bls.n	800f4da <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f4d8:	e0f4      	b.n	800f6c4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	461c      	mov	r4, r3
 800f4e0:	4615      	mov	r5, r2
 800f4e2:	f04f 0200 	mov.w	r2, #0
 800f4e6:	f04f 0300 	mov.w	r3, #0
 800f4ea:	022b      	lsls	r3, r5, #8
 800f4ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f4f0:	0222      	lsls	r2, r4, #8
 800f4f2:	68f9      	ldr	r1, [r7, #12]
 800f4f4:	6849      	ldr	r1, [r1, #4]
 800f4f6:	0849      	lsrs	r1, r1, #1
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	4688      	mov	r8, r1
 800f4fc:	4681      	mov	r9, r0
 800f4fe:	eb12 0a08 	adds.w	sl, r2, r8
 800f502:	eb43 0b09 	adc.w	fp, r3, r9
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	603b      	str	r3, [r7, #0]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f514:	4650      	mov	r0, sl
 800f516:	4659      	mov	r1, fp
 800f518:	f7f1 fbc6 	bl	8000ca8 <__aeabi_uldivmod>
 800f51c:	4602      	mov	r2, r0
 800f51e:	460b      	mov	r3, r1
 800f520:	4613      	mov	r3, r2
 800f522:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f52a:	d308      	bcc.n	800f53e <UART_SetConfig+0x2b2>
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f532:	d204      	bcs.n	800f53e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	69ba      	ldr	r2, [r7, #24]
 800f53a:	60da      	str	r2, [r3, #12]
 800f53c:	e0c2      	b.n	800f6c4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f544:	e0be      	b.n	800f6c4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f54e:	d16a      	bne.n	800f626 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800f550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f554:	2b08      	cmp	r3, #8
 800f556:	d834      	bhi.n	800f5c2 <UART_SetConfig+0x336>
 800f558:	a201      	add	r2, pc, #4	; (adr r2, 800f560 <UART_SetConfig+0x2d4>)
 800f55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55e:	bf00      	nop
 800f560:	0800f585 	.word	0x0800f585
 800f564:	0800f5a5 	.word	0x0800f5a5
 800f568:	0800f5ad 	.word	0x0800f5ad
 800f56c:	0800f5c3 	.word	0x0800f5c3
 800f570:	0800f5b3 	.word	0x0800f5b3
 800f574:	0800f5c3 	.word	0x0800f5c3
 800f578:	0800f5c3 	.word	0x0800f5c3
 800f57c:	0800f5c3 	.word	0x0800f5c3
 800f580:	0800f5bb 	.word	0x0800f5bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f584:	f7fd f81e 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800f588:	61f8      	str	r0, [r7, #28]
        break;
 800f58a:	e020      	b.n	800f5ce <UART_SetConfig+0x342>
 800f58c:	efff69f3 	.word	0xefff69f3
 800f590:	40008000 	.word	0x40008000
 800f594:	40013800 	.word	0x40013800
 800f598:	40021000 	.word	0x40021000
 800f59c:	40004400 	.word	0x40004400
 800f5a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5a4:	f7fd f824 	bl	800c5f0 <HAL_RCC_GetPCLK2Freq>
 800f5a8:	61f8      	str	r0, [r7, #28]
        break;
 800f5aa:	e010      	b.n	800f5ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5ac:	4b4c      	ldr	r3, [pc, #304]	; (800f6e0 <UART_SetConfig+0x454>)
 800f5ae:	61fb      	str	r3, [r7, #28]
        break;
 800f5b0:	e00d      	b.n	800f5ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5b2:	f7fc ff6f 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800f5b6:	61f8      	str	r0, [r7, #28]
        break;
 800f5b8:	e009      	b.n	800f5ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5be:	61fb      	str	r3, [r7, #28]
        break;
 800f5c0:	e005      	b.n	800f5ce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f5cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d077      	beq.n	800f6c4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	005a      	lsls	r2, r3, #1
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	085b      	lsrs	r3, r3, #1
 800f5de:	441a      	add	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2b0f      	cmp	r3, #15
 800f5ee:	d916      	bls.n	800f61e <UART_SetConfig+0x392>
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f6:	d212      	bcs.n	800f61e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	f023 030f 	bic.w	r3, r3, #15
 800f600:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	085b      	lsrs	r3, r3, #1
 800f606:	b29b      	uxth	r3, r3
 800f608:	f003 0307 	and.w	r3, r3, #7
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	8afb      	ldrh	r3, [r7, #22]
 800f610:	4313      	orrs	r3, r2
 800f612:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	8afa      	ldrh	r2, [r7, #22]
 800f61a:	60da      	str	r2, [r3, #12]
 800f61c:	e052      	b.n	800f6c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f624:	e04e      	b.n	800f6c4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f62a:	2b08      	cmp	r3, #8
 800f62c:	d827      	bhi.n	800f67e <UART_SetConfig+0x3f2>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <UART_SetConfig+0x3a8>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f659 	.word	0x0800f659
 800f638:	0800f661 	.word	0x0800f661
 800f63c:	0800f669 	.word	0x0800f669
 800f640:	0800f67f 	.word	0x0800f67f
 800f644:	0800f66f 	.word	0x0800f66f
 800f648:	0800f67f 	.word	0x0800f67f
 800f64c:	0800f67f 	.word	0x0800f67f
 800f650:	0800f67f 	.word	0x0800f67f
 800f654:	0800f677 	.word	0x0800f677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f658:	f7fc ffb4 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800f65c:	61f8      	str	r0, [r7, #28]
        break;
 800f65e:	e014      	b.n	800f68a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f660:	f7fc ffc6 	bl	800c5f0 <HAL_RCC_GetPCLK2Freq>
 800f664:	61f8      	str	r0, [r7, #28]
        break;
 800f666:	e010      	b.n	800f68a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f668:	4b1d      	ldr	r3, [pc, #116]	; (800f6e0 <UART_SetConfig+0x454>)
 800f66a:	61fb      	str	r3, [r7, #28]
        break;
 800f66c:	e00d      	b.n	800f68a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f66e:	f7fc ff11 	bl	800c494 <HAL_RCC_GetSysClockFreq>
 800f672:	61f8      	str	r0, [r7, #28]
        break;
 800f674:	e009      	b.n	800f68a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f67a:	61fb      	str	r3, [r7, #28]
        break;
 800f67c:	e005      	b.n	800f68a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800f67e:	2300      	movs	r3, #0
 800f680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f682:	2301      	movs	r3, #1
 800f684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f688:	bf00      	nop
    }

    if (pclk != 0U)
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d019      	beq.n	800f6c4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	085a      	lsrs	r2, r3, #1
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	441a      	add	r2, r3
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	2b0f      	cmp	r3, #15
 800f6a8:	d909      	bls.n	800f6be <UART_SetConfig+0x432>
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6b0:	d205      	bcs.n	800f6be <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	60da      	str	r2, [r3, #12]
 800f6bc:	e002      	b.n	800f6c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f6d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3728      	adds	r7, #40	; 0x28
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f6de:	bf00      	nop
 800f6e0:	00f42400 	.word	0x00f42400

0800f6e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00a      	beq.n	800f70e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	430a      	orrs	r2, r1
 800f70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f712:	f003 0302 	and.w	r3, r3, #2
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	430a      	orrs	r2, r1
 800f72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00a      	beq.n	800f752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	430a      	orrs	r2, r1
 800f750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f756:	f003 0308 	and.w	r3, r3, #8
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00a      	beq.n	800f774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	430a      	orrs	r2, r1
 800f772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f778:	f003 0310 	and.w	r3, r3, #16
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00a      	beq.n	800f796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	430a      	orrs	r2, r1
 800f794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79a:	f003 0320 	and.w	r3, r3, #32
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00a      	beq.n	800f7b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	689b      	ldr	r3, [r3, #8]
 800f7a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	430a      	orrs	r2, r1
 800f7b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d01a      	beq.n	800f7fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	430a      	orrs	r2, r1
 800f7d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7e2:	d10a      	bne.n	800f7fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	430a      	orrs	r2, r1
 800f81a:	605a      	str	r2, [r3, #4]
  }
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af02      	add	r7, sp, #8
 800f82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f838:	f7f7 ff7e 	bl	8007738 <HAL_GetTick>
 800f83c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f003 0308 	and.w	r3, r3, #8
 800f848:	2b08      	cmp	r3, #8
 800f84a:	d10e      	bne.n	800f86a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f84c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f82d 	bl	800f8ba <UART_WaitOnFlagUntilTimeout>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d001      	beq.n	800f86a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f866:	2303      	movs	r3, #3
 800f868:	e023      	b.n	800f8b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f003 0304 	and.w	r3, r3, #4
 800f874:	2b04      	cmp	r3, #4
 800f876:	d10e      	bne.n	800f896 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f817 	bl	800f8ba <UART_WaitOnFlagUntilTimeout>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f892:	2303      	movs	r3, #3
 800f894:	e00d      	b.n	800f8b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2220      	movs	r2, #32
 800f89a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2220      	movs	r2, #32
 800f8a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b09c      	sub	sp, #112	; 0x70
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	60f8      	str	r0, [r7, #12]
 800f8c2:	60b9      	str	r1, [r7, #8]
 800f8c4:	603b      	str	r3, [r7, #0]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8ca:	e0a5      	b.n	800fa18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8d2:	f000 80a1 	beq.w	800fa18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8d6:	f7f7 ff2f 	bl	8007738 <HAL_GetTick>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d302      	bcc.n	800f8ec <UART_WaitOnFlagUntilTimeout+0x32>
 800f8e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d13e      	bne.n	800f96a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f4:	e853 3f00 	ldrex	r3, [r3]
 800f8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f900:	667b      	str	r3, [r7, #100]	; 0x64
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	461a      	mov	r2, r3
 800f908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f90a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f90c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f912:	e841 2300 	strex	r3, r2, [r1]
 800f916:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1e6      	bne.n	800f8ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	3308      	adds	r3, #8
 800f924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f928:	e853 3f00 	ldrex	r3, [r3]
 800f92c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f930:	f023 0301 	bic.w	r3, r3, #1
 800f934:	663b      	str	r3, [r7, #96]	; 0x60
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3308      	adds	r3, #8
 800f93c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f93e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f946:	e841 2300 	strex	r3, r2, [r1]
 800f94a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1e5      	bne.n	800f91e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2220      	movs	r2, #32
 800f956:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2220      	movs	r2, #32
 800f95c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f966:	2303      	movs	r3, #3
 800f968:	e067      	b.n	800fa3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f003 0304 	and.w	r3, r3, #4
 800f974:	2b00      	cmp	r3, #0
 800f976:	d04f      	beq.n	800fa18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	69db      	ldr	r3, [r3, #28]
 800f97e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f986:	d147      	bne.n	800fa18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f990:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99a:	e853 3f00 	ldrex	r3, [r3]
 800f99e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800f9b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e6      	bne.n	800f992 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	e853 3f00 	ldrex	r3, [r3]
 800f9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	f023 0301 	bic.w	r3, r3, #1
 800f9da:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	3308      	adds	r3, #8
 800f9e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f9e4:	623a      	str	r2, [r7, #32]
 800f9e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e8:	69f9      	ldr	r1, [r7, #28]
 800f9ea:	6a3a      	ldr	r2, [r7, #32]
 800f9ec:	e841 2300 	strex	r3, r2, [r1]
 800f9f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1e5      	bne.n	800f9c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2220      	movs	r2, #32
 800f9fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2220      	movs	r2, #32
 800fa02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2220      	movs	r2, #32
 800fa08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800fa14:	2303      	movs	r3, #3
 800fa16:	e010      	b.n	800fa3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	69da      	ldr	r2, [r3, #28]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	4013      	ands	r3, r2
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	bf0c      	ite	eq
 800fa28:	2301      	moveq	r3, #1
 800fa2a:	2300      	movne	r3, #0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	461a      	mov	r2, r3
 800fa30:	79fb      	ldrb	r3, [r7, #7]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	f43f af4a 	beq.w	800f8cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3770      	adds	r7, #112	; 0x70
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
	...

0800fa44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b097      	sub	sp, #92	; 0x5c
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	88fa      	ldrh	r2, [r7, #6]
 800fa5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	88fa      	ldrh	r2, [r7, #6]
 800fa64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa76:	d10e      	bne.n	800fa96 <UART_Start_Receive_IT+0x52>
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d105      	bne.n	800fa8c <UART_Start_Receive_IT+0x48>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fa8a:	e02d      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	22ff      	movs	r2, #255	; 0xff
 800fa90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fa94:	e028      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10d      	bne.n	800faba <UART_Start_Receive_IT+0x76>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d104      	bne.n	800fab0 <UART_Start_Receive_IT+0x6c>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	22ff      	movs	r2, #255	; 0xff
 800faaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800faae:	e01b      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	227f      	movs	r2, #127	; 0x7f
 800fab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fab8:	e016      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fac2:	d10d      	bne.n	800fae0 <UART_Start_Receive_IT+0x9c>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d104      	bne.n	800fad6 <UART_Start_Receive_IT+0x92>
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	227f      	movs	r2, #127	; 0x7f
 800fad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fad4:	e008      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	223f      	movs	r2, #63	; 0x3f
 800fada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fade:	e003      	b.n	800fae8 <UART_Start_Receive_IT+0xa4>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2222      	movs	r2, #34	; 0x22
 800faf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb08:	f043 0301 	orr.w	r3, r3, #1
 800fb0c:	657b      	str	r3, [r7, #84]	; 0x54
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb16:	64ba      	str	r2, [r7, #72]	; 0x48
 800fb18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e5      	bne.n	800faf6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb32:	d107      	bne.n	800fb44 <UART_Start_Receive_IT+0x100>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d103      	bne.n	800fb44 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	4a24      	ldr	r2, [pc, #144]	; (800fbd0 <UART_Start_Receive_IT+0x18c>)
 800fb40:	665a      	str	r2, [r3, #100]	; 0x64
 800fb42:	e002      	b.n	800fb4a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	4a23      	ldr	r2, [pc, #140]	; (800fbd4 <UART_Start_Receive_IT+0x190>)
 800fb48:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d019      	beq.n	800fb8e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb62:	e853 3f00 	ldrex	r3, [r3]
 800fb66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fb6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	461a      	mov	r2, r3
 800fb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb78:	637b      	str	r3, [r7, #52]	; 0x34
 800fb7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb80:	e841 2300 	strex	r3, r2, [r1]
 800fb84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e6      	bne.n	800fb5a <UART_Start_Receive_IT+0x116>
 800fb8c:	e018      	b.n	800fbc0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	f043 0320 	orr.w	r3, r3, #32
 800fba2:	653b      	str	r3, [r7, #80]	; 0x50
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbac:	623b      	str	r3, [r7, #32]
 800fbae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb0:	69f9      	ldr	r1, [r7, #28]
 800fbb2:	6a3a      	ldr	r2, [r7, #32]
 800fbb4:	e841 2300 	strex	r3, r2, [r1]
 800fbb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e6      	bne.n	800fb8e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	375c      	adds	r7, #92	; 0x5c
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	0801006d 	.word	0x0801006d
 800fbd4:	0800ff0d 	.word	0x0800ff0d

0800fbd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b095      	sub	sp, #84	; 0x54
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe8:	e853 3f00 	ldrex	r3, [r3]
 800fbec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbfe:	643b      	str	r3, [r7, #64]	; 0x40
 800fc00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc06:	e841 2300 	strex	r3, r2, [r1]
 800fc0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1e6      	bne.n	800fbe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	3308      	adds	r3, #8
 800fc18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	e853 3f00 	ldrex	r3, [r3]
 800fc20:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	f023 0301 	bic.w	r3, r3, #1
 800fc28:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3308      	adds	r3, #8
 800fc30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc3a:	e841 2300 	strex	r3, r2, [r1]
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1e5      	bne.n	800fc12 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d118      	bne.n	800fc80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	e853 3f00 	ldrex	r3, [r3]
 800fc5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	f023 0310 	bic.w	r3, r3, #16
 800fc62:	647b      	str	r3, [r7, #68]	; 0x44
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	461a      	mov	r2, r3
 800fc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6c:	61bb      	str	r3, [r7, #24]
 800fc6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc70:	6979      	ldr	r1, [r7, #20]
 800fc72:	69ba      	ldr	r2, [r7, #24]
 800fc74:	e841 2300 	strex	r3, r2, [r1]
 800fc78:	613b      	str	r3, [r7, #16]
   return(result);
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1e6      	bne.n	800fc4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2220      	movs	r2, #32
 800fc84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	665a      	str	r2, [r3, #100]	; 0x64
}
 800fc92:	bf00      	nop
 800fc94:	3754      	adds	r7, #84	; 0x54
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b084      	sub	sp, #16
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f7f6 fb45 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcc2:	bf00      	nop
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b084      	sub	sp, #16
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2220      	movs	r2, #32
 800fce4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	f7ff fa78 	bl	800f1dc <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcec:	bf00      	nop
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd00:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	220f      	movs	r2, #15
 800fd10:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	8b1b      	ldrh	r3, [r3, #24]
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f042 0208 	orr.w	r2, r2, #8
 800fd22:	b292      	uxth	r2, r2
 800fd24:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2220      	movs	r2, #32
 800fd2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f7ff fa5c 	bl	800f1f0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b08f      	sub	sp, #60	; 0x3c
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd4c:	2b21      	cmp	r3, #33	; 0x21
 800fd4e:	d14d      	bne.n	800fdec <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d132      	bne.n	800fdc2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd70:	637b      	str	r3, [r7, #52]	; 0x34
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd7c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd82:	e841 2300 	strex	r3, r2, [r1]
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d1e6      	bne.n	800fd5c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda2:	633b      	str	r3, [r7, #48]	; 0x30
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	61bb      	str	r3, [r7, #24]
 800fdae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	6979      	ldr	r1, [r7, #20]
 800fdb2:	69ba      	ldr	r2, [r7, #24]
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e6      	bne.n	800fd8e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800fdc0:	e014      	b.n	800fdec <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdc6:	781a      	ldrb	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	b292      	uxth	r2, r2
 800fdce:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdd4:	1c5a      	adds	r2, r3, #1
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	3b01      	subs	r3, #1
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800fdec:	bf00      	nop
 800fdee:	373c      	adds	r7, #60	; 0x3c
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b091      	sub	sp, #68	; 0x44
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe04:	2b21      	cmp	r3, #33	; 0x21
 800fe06:	d151      	bne.n	800feac <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d132      	bne.n	800fe7a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1c:	e853 3f00 	ldrex	r3, [r3]
 800fe20:	623b      	str	r3, [r7, #32]
   return(result);
 800fe22:	6a3b      	ldr	r3, [r7, #32]
 800fe24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe28:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe32:	633b      	str	r3, [r7, #48]	; 0x30
 800fe34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe3a:	e841 2300 	strex	r3, r2, [r1]
 800fe3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e6      	bne.n	800fe14 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	e853 3f00 	ldrex	r3, [r3]
 800fe52:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	461a      	mov	r2, r3
 800fe62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe64:	61fb      	str	r3, [r7, #28]
 800fe66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe68:	69b9      	ldr	r1, [r7, #24]
 800fe6a:	69fa      	ldr	r2, [r7, #28]
 800fe6c:	e841 2300 	strex	r3, r2, [r1]
 800fe70:	617b      	str	r3, [r7, #20]
   return(result);
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d1e6      	bne.n	800fe46 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800fe78:	e018      	b.n	800feac <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800fe80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe82:	881a      	ldrh	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe8c:	b292      	uxth	r2, r2
 800fe8e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe94:	1c9a      	adds	r2, r3, #2
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	3b01      	subs	r3, #1
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800feac:	bf00      	nop
 800feae:	3744      	adds	r7, #68	; 0x44
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b088      	sub	sp, #32
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	e853 3f00 	ldrex	r3, [r3]
 800fecc:	60bb      	str	r3, [r7, #8]
   return(result);
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fed4:	61fb      	str	r3, [r7, #28]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	61bb      	str	r3, [r7, #24]
 800fee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee2:	6979      	ldr	r1, [r7, #20]
 800fee4:	69ba      	ldr	r2, [r7, #24]
 800fee6:	e841 2300 	strex	r3, r2, [r1]
 800feea:	613b      	str	r3, [r7, #16]
   return(result);
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1e6      	bne.n	800fec0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2220      	movs	r2, #32
 800fef6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7f6 f9f8 	bl	80062f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff04:	bf00      	nop
 800ff06:	3720      	adds	r7, #32
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b096      	sub	sp, #88	; 0x58
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff1a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff22:	2b22      	cmp	r3, #34	; 0x22
 800ff24:	f040 8094 	bne.w	8010050 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ff36:	b2d9      	uxtb	r1, r3
 800ff38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff42:	400a      	ands	r2, r1
 800ff44:	b2d2      	uxtb	r2, r2
 800ff46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff4c:	1c5a      	adds	r2, r3, #1
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d179      	bne.n	8010064 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff78:	e853 3f00 	ldrex	r3, [r3]
 800ff7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff84:	653b      	str	r3, [r7, #80]	; 0x50
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ff90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff96:	e841 2300 	strex	r3, r2, [r1]
 800ff9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1e6      	bne.n	800ff70 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3308      	adds	r3, #8
 800ffa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	e853 3f00 	ldrex	r3, [r3]
 800ffb0:	623b      	str	r3, [r7, #32]
   return(result);
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	f023 0301 	bic.w	r3, r3, #1
 800ffb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	3308      	adds	r3, #8
 800ffc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ffc2:	633a      	str	r2, [r7, #48]	; 0x30
 800ffc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffca:	e841 2300 	strex	r3, r2, [r1]
 800ffce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1e5      	bne.n	800ffa2 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2220      	movs	r2, #32
 800ffda:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d12e      	bne.n	8010048 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2200      	movs	r2, #0
 800ffee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	e853 3f00 	ldrex	r3, [r3]
 800fffc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f023 0310 	bic.w	r3, r3, #16
 8010004:	64bb      	str	r3, [r7, #72]	; 0x48
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801000e:	61fb      	str	r3, [r7, #28]
 8010010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010012:	69b9      	ldr	r1, [r7, #24]
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	e841 2300 	strex	r3, r2, [r1]
 801001a:	617b      	str	r3, [r7, #20]
   return(result);
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1e6      	bne.n	800fff0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	f003 0310 	and.w	r3, r3, #16
 801002c:	2b10      	cmp	r3, #16
 801002e:	d103      	bne.n	8010038 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2210      	movs	r2, #16
 8010036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff f8df 	bl	800f204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010046:	e00d      	b.n	8010064 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7f6 f963 	bl	8006314 <HAL_UART_RxCpltCallback>
}
 801004e:	e009      	b.n	8010064 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	8b1b      	ldrh	r3, [r3, #24]
 8010056:	b29a      	uxth	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f042 0208 	orr.w	r2, r2, #8
 8010060:	b292      	uxth	r2, r2
 8010062:	831a      	strh	r2, [r3, #24]
}
 8010064:	bf00      	nop
 8010066:	3758      	adds	r7, #88	; 0x58
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b096      	sub	sp, #88	; 0x58
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801007a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010082:	2b22      	cmp	r3, #34	; 0x22
 8010084:	f040 8094 	bne.w	80101b0 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801008e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010096:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010098:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801009c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80100a0:	4013      	ands	r3, r2
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100ac:	1c9a      	adds	r2, r3, #2
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	3b01      	subs	r3, #1
 80100bc:	b29a      	uxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d179      	bne.n	80101c4 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d8:	e853 3f00 	ldrex	r3, [r3]
 80100dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	461a      	mov	r2, r3
 80100ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ee:	643b      	str	r3, [r7, #64]	; 0x40
 80100f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100f6:	e841 2300 	strex	r3, r2, [r1]
 80100fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1e6      	bne.n	80100d0 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3308      	adds	r3, #8
 8010108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801010a:	6a3b      	ldr	r3, [r7, #32]
 801010c:	e853 3f00 	ldrex	r3, [r3]
 8010110:	61fb      	str	r3, [r7, #28]
   return(result);
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	f023 0301 	bic.w	r3, r3, #1
 8010118:	64bb      	str	r3, [r7, #72]	; 0x48
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3308      	adds	r3, #8
 8010120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801012a:	e841 2300 	strex	r3, r2, [r1]
 801012e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1e5      	bne.n	8010102 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2220      	movs	r2, #32
 801013a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010146:	2b01      	cmp	r3, #1
 8010148:	d12e      	bne.n	80101a8 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	e853 3f00 	ldrex	r3, [r3]
 801015c:	60bb      	str	r3, [r7, #8]
   return(result);
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	f023 0310 	bic.w	r3, r3, #16
 8010164:	647b      	str	r3, [r7, #68]	; 0x44
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801016e:	61bb      	str	r3, [r7, #24]
 8010170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010172:	6979      	ldr	r1, [r7, #20]
 8010174:	69ba      	ldr	r2, [r7, #24]
 8010176:	e841 2300 	strex	r3, r2, [r1]
 801017a:	613b      	str	r3, [r7, #16]
   return(result);
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1e6      	bne.n	8010150 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	69db      	ldr	r3, [r3, #28]
 8010188:	f003 0310 	and.w	r3, r3, #16
 801018c:	2b10      	cmp	r3, #16
 801018e:	d103      	bne.n	8010198 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2210      	movs	r2, #16
 8010196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7ff f82f 	bl	800f204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101a6:	e00d      	b.n	80101c4 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7f6 f8b3 	bl	8006314 <HAL_UART_RxCpltCallback>
}
 80101ae:	e009      	b.n	80101c4 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	8b1b      	ldrh	r3, [r3, #24]
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f042 0208 	orr.w	r2, r2, #8
 80101c0:	b292      	uxth	r2, r2
 80101c2:	831a      	strh	r2, [r3, #24]
}
 80101c4:	bf00      	nop
 80101c6:	3758      	adds	r7, #88	; 0x58
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <__libc_init_array>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	4d0d      	ldr	r5, [pc, #52]	; (8010218 <__libc_init_array+0x38>)
 80101e4:	4c0d      	ldr	r4, [pc, #52]	; (801021c <__libc_init_array+0x3c>)
 80101e6:	1b64      	subs	r4, r4, r5
 80101e8:	10a4      	asrs	r4, r4, #2
 80101ea:	2600      	movs	r6, #0
 80101ec:	42a6      	cmp	r6, r4
 80101ee:	d109      	bne.n	8010204 <__libc_init_array+0x24>
 80101f0:	4d0b      	ldr	r5, [pc, #44]	; (8010220 <__libc_init_array+0x40>)
 80101f2:	4c0c      	ldr	r4, [pc, #48]	; (8010224 <__libc_init_array+0x44>)
 80101f4:	f004 f81a 	bl	801422c <_init>
 80101f8:	1b64      	subs	r4, r4, r5
 80101fa:	10a4      	asrs	r4, r4, #2
 80101fc:	2600      	movs	r6, #0
 80101fe:	42a6      	cmp	r6, r4
 8010200:	d105      	bne.n	801020e <__libc_init_array+0x2e>
 8010202:	bd70      	pop	{r4, r5, r6, pc}
 8010204:	f855 3b04 	ldr.w	r3, [r5], #4
 8010208:	4798      	blx	r3
 801020a:	3601      	adds	r6, #1
 801020c:	e7ee      	b.n	80101ec <__libc_init_array+0xc>
 801020e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010212:	4798      	blx	r3
 8010214:	3601      	adds	r6, #1
 8010216:	e7f2      	b.n	80101fe <__libc_init_array+0x1e>
 8010218:	08014df8 	.word	0x08014df8
 801021c:	08014df8 	.word	0x08014df8
 8010220:	08014df8 	.word	0x08014df8
 8010224:	08014dfc 	.word	0x08014dfc

08010228 <memcpy>:
 8010228:	440a      	add	r2, r1
 801022a:	4291      	cmp	r1, r2
 801022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010230:	d100      	bne.n	8010234 <memcpy+0xc>
 8010232:	4770      	bx	lr
 8010234:	b510      	push	{r4, lr}
 8010236:	f811 4b01 	ldrb.w	r4, [r1], #1
 801023a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801023e:	4291      	cmp	r1, r2
 8010240:	d1f9      	bne.n	8010236 <memcpy+0xe>
 8010242:	bd10      	pop	{r4, pc}

08010244 <memset>:
 8010244:	4402      	add	r2, r0
 8010246:	4603      	mov	r3, r0
 8010248:	4293      	cmp	r3, r2
 801024a:	d100      	bne.n	801024e <memset+0xa>
 801024c:	4770      	bx	lr
 801024e:	f803 1b01 	strb.w	r1, [r3], #1
 8010252:	e7f9      	b.n	8010248 <memset+0x4>

08010254 <__cvt>:
 8010254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010258:	ec55 4b10 	vmov	r4, r5, d0
 801025c:	2d00      	cmp	r5, #0
 801025e:	460e      	mov	r6, r1
 8010260:	4619      	mov	r1, r3
 8010262:	462b      	mov	r3, r5
 8010264:	bfbb      	ittet	lt
 8010266:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801026a:	461d      	movlt	r5, r3
 801026c:	2300      	movge	r3, #0
 801026e:	232d      	movlt	r3, #45	; 0x2d
 8010270:	700b      	strb	r3, [r1, #0]
 8010272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010278:	4691      	mov	r9, r2
 801027a:	f023 0820 	bic.w	r8, r3, #32
 801027e:	bfbc      	itt	lt
 8010280:	4622      	movlt	r2, r4
 8010282:	4614      	movlt	r4, r2
 8010284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010288:	d005      	beq.n	8010296 <__cvt+0x42>
 801028a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801028e:	d100      	bne.n	8010292 <__cvt+0x3e>
 8010290:	3601      	adds	r6, #1
 8010292:	2102      	movs	r1, #2
 8010294:	e000      	b.n	8010298 <__cvt+0x44>
 8010296:	2103      	movs	r1, #3
 8010298:	ab03      	add	r3, sp, #12
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	ab02      	add	r3, sp, #8
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	ec45 4b10 	vmov	d0, r4, r5
 80102a4:	4653      	mov	r3, sl
 80102a6:	4632      	mov	r2, r6
 80102a8:	f000 fd12 	bl	8010cd0 <_dtoa_r>
 80102ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80102b0:	4607      	mov	r7, r0
 80102b2:	d102      	bne.n	80102ba <__cvt+0x66>
 80102b4:	f019 0f01 	tst.w	r9, #1
 80102b8:	d022      	beq.n	8010300 <__cvt+0xac>
 80102ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102be:	eb07 0906 	add.w	r9, r7, r6
 80102c2:	d110      	bne.n	80102e6 <__cvt+0x92>
 80102c4:	783b      	ldrb	r3, [r7, #0]
 80102c6:	2b30      	cmp	r3, #48	; 0x30
 80102c8:	d10a      	bne.n	80102e0 <__cvt+0x8c>
 80102ca:	2200      	movs	r2, #0
 80102cc:	2300      	movs	r3, #0
 80102ce:	4620      	mov	r0, r4
 80102d0:	4629      	mov	r1, r5
 80102d2:	f7f0 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 80102d6:	b918      	cbnz	r0, 80102e0 <__cvt+0x8c>
 80102d8:	f1c6 0601 	rsb	r6, r6, #1
 80102dc:	f8ca 6000 	str.w	r6, [sl]
 80102e0:	f8da 3000 	ldr.w	r3, [sl]
 80102e4:	4499      	add	r9, r3
 80102e6:	2200      	movs	r2, #0
 80102e8:	2300      	movs	r3, #0
 80102ea:	4620      	mov	r0, r4
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7f0 fbfb 	bl	8000ae8 <__aeabi_dcmpeq>
 80102f2:	b108      	cbz	r0, 80102f8 <__cvt+0xa4>
 80102f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80102f8:	2230      	movs	r2, #48	; 0x30
 80102fa:	9b03      	ldr	r3, [sp, #12]
 80102fc:	454b      	cmp	r3, r9
 80102fe:	d307      	bcc.n	8010310 <__cvt+0xbc>
 8010300:	9b03      	ldr	r3, [sp, #12]
 8010302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010304:	1bdb      	subs	r3, r3, r7
 8010306:	4638      	mov	r0, r7
 8010308:	6013      	str	r3, [r2, #0]
 801030a:	b004      	add	sp, #16
 801030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010310:	1c59      	adds	r1, r3, #1
 8010312:	9103      	str	r1, [sp, #12]
 8010314:	701a      	strb	r2, [r3, #0]
 8010316:	e7f0      	b.n	80102fa <__cvt+0xa6>

08010318 <__exponent>:
 8010318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801031a:	4603      	mov	r3, r0
 801031c:	2900      	cmp	r1, #0
 801031e:	bfb8      	it	lt
 8010320:	4249      	neglt	r1, r1
 8010322:	f803 2b02 	strb.w	r2, [r3], #2
 8010326:	bfb4      	ite	lt
 8010328:	222d      	movlt	r2, #45	; 0x2d
 801032a:	222b      	movge	r2, #43	; 0x2b
 801032c:	2909      	cmp	r1, #9
 801032e:	7042      	strb	r2, [r0, #1]
 8010330:	dd2a      	ble.n	8010388 <__exponent+0x70>
 8010332:	f10d 0407 	add.w	r4, sp, #7
 8010336:	46a4      	mov	ip, r4
 8010338:	270a      	movs	r7, #10
 801033a:	46a6      	mov	lr, r4
 801033c:	460a      	mov	r2, r1
 801033e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010342:	fb07 1516 	mls	r5, r7, r6, r1
 8010346:	3530      	adds	r5, #48	; 0x30
 8010348:	2a63      	cmp	r2, #99	; 0x63
 801034a:	f104 34ff 	add.w	r4, r4, #4294967295
 801034e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010352:	4631      	mov	r1, r6
 8010354:	dcf1      	bgt.n	801033a <__exponent+0x22>
 8010356:	3130      	adds	r1, #48	; 0x30
 8010358:	f1ae 0502 	sub.w	r5, lr, #2
 801035c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010360:	1c44      	adds	r4, r0, #1
 8010362:	4629      	mov	r1, r5
 8010364:	4561      	cmp	r1, ip
 8010366:	d30a      	bcc.n	801037e <__exponent+0x66>
 8010368:	f10d 0209 	add.w	r2, sp, #9
 801036c:	eba2 020e 	sub.w	r2, r2, lr
 8010370:	4565      	cmp	r5, ip
 8010372:	bf88      	it	hi
 8010374:	2200      	movhi	r2, #0
 8010376:	4413      	add	r3, r2
 8010378:	1a18      	subs	r0, r3, r0
 801037a:	b003      	add	sp, #12
 801037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801037e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010382:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010386:	e7ed      	b.n	8010364 <__exponent+0x4c>
 8010388:	2330      	movs	r3, #48	; 0x30
 801038a:	3130      	adds	r1, #48	; 0x30
 801038c:	7083      	strb	r3, [r0, #2]
 801038e:	70c1      	strb	r1, [r0, #3]
 8010390:	1d03      	adds	r3, r0, #4
 8010392:	e7f1      	b.n	8010378 <__exponent+0x60>

08010394 <_printf_float>:
 8010394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010398:	ed2d 8b02 	vpush	{d8}
 801039c:	b08d      	sub	sp, #52	; 0x34
 801039e:	460c      	mov	r4, r1
 80103a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80103a4:	4616      	mov	r6, r2
 80103a6:	461f      	mov	r7, r3
 80103a8:	4605      	mov	r5, r0
 80103aa:	f001 fa7f 	bl	80118ac <_localeconv_r>
 80103ae:	f8d0 a000 	ldr.w	sl, [r0]
 80103b2:	4650      	mov	r0, sl
 80103b4:	f7ef ff16 	bl	80001e4 <strlen>
 80103b8:	2300      	movs	r3, #0
 80103ba:	930a      	str	r3, [sp, #40]	; 0x28
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	9305      	str	r3, [sp, #20]
 80103c0:	f8d8 3000 	ldr.w	r3, [r8]
 80103c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80103c8:	3307      	adds	r3, #7
 80103ca:	f023 0307 	bic.w	r3, r3, #7
 80103ce:	f103 0208 	add.w	r2, r3, #8
 80103d2:	f8c8 2000 	str.w	r2, [r8]
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80103de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80103e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80103e6:	9307      	str	r3, [sp, #28]
 80103e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80103ec:	ee08 0a10 	vmov	s16, r0
 80103f0:	4b9f      	ldr	r3, [pc, #636]	; (8010670 <_printf_float+0x2dc>)
 80103f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103f6:	f04f 32ff 	mov.w	r2, #4294967295
 80103fa:	f7f0 fba7 	bl	8000b4c <__aeabi_dcmpun>
 80103fe:	bb88      	cbnz	r0, 8010464 <_printf_float+0xd0>
 8010400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010404:	4b9a      	ldr	r3, [pc, #616]	; (8010670 <_printf_float+0x2dc>)
 8010406:	f04f 32ff 	mov.w	r2, #4294967295
 801040a:	f7f0 fb81 	bl	8000b10 <__aeabi_dcmple>
 801040e:	bb48      	cbnz	r0, 8010464 <_printf_float+0xd0>
 8010410:	2200      	movs	r2, #0
 8010412:	2300      	movs	r3, #0
 8010414:	4640      	mov	r0, r8
 8010416:	4649      	mov	r1, r9
 8010418:	f7f0 fb70 	bl	8000afc <__aeabi_dcmplt>
 801041c:	b110      	cbz	r0, 8010424 <_printf_float+0x90>
 801041e:	232d      	movs	r3, #45	; 0x2d
 8010420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010424:	4b93      	ldr	r3, [pc, #588]	; (8010674 <_printf_float+0x2e0>)
 8010426:	4894      	ldr	r0, [pc, #592]	; (8010678 <_printf_float+0x2e4>)
 8010428:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801042c:	bf94      	ite	ls
 801042e:	4698      	movls	r8, r3
 8010430:	4680      	movhi	r8, r0
 8010432:	2303      	movs	r3, #3
 8010434:	6123      	str	r3, [r4, #16]
 8010436:	9b05      	ldr	r3, [sp, #20]
 8010438:	f023 0204 	bic.w	r2, r3, #4
 801043c:	6022      	str	r2, [r4, #0]
 801043e:	f04f 0900 	mov.w	r9, #0
 8010442:	9700      	str	r7, [sp, #0]
 8010444:	4633      	mov	r3, r6
 8010446:	aa0b      	add	r2, sp, #44	; 0x2c
 8010448:	4621      	mov	r1, r4
 801044a:	4628      	mov	r0, r5
 801044c:	f000 f9d8 	bl	8010800 <_printf_common>
 8010450:	3001      	adds	r0, #1
 8010452:	f040 8090 	bne.w	8010576 <_printf_float+0x1e2>
 8010456:	f04f 30ff 	mov.w	r0, #4294967295
 801045a:	b00d      	add	sp, #52	; 0x34
 801045c:	ecbd 8b02 	vpop	{d8}
 8010460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010464:	4642      	mov	r2, r8
 8010466:	464b      	mov	r3, r9
 8010468:	4640      	mov	r0, r8
 801046a:	4649      	mov	r1, r9
 801046c:	f7f0 fb6e 	bl	8000b4c <__aeabi_dcmpun>
 8010470:	b140      	cbz	r0, 8010484 <_printf_float+0xf0>
 8010472:	464b      	mov	r3, r9
 8010474:	2b00      	cmp	r3, #0
 8010476:	bfbc      	itt	lt
 8010478:	232d      	movlt	r3, #45	; 0x2d
 801047a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801047e:	487f      	ldr	r0, [pc, #508]	; (801067c <_printf_float+0x2e8>)
 8010480:	4b7f      	ldr	r3, [pc, #508]	; (8010680 <_printf_float+0x2ec>)
 8010482:	e7d1      	b.n	8010428 <_printf_float+0x94>
 8010484:	6863      	ldr	r3, [r4, #4]
 8010486:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801048a:	9206      	str	r2, [sp, #24]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	d13f      	bne.n	8010510 <_printf_float+0x17c>
 8010490:	2306      	movs	r3, #6
 8010492:	6063      	str	r3, [r4, #4]
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	6861      	ldr	r1, [r4, #4]
 8010498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801049c:	2300      	movs	r3, #0
 801049e:	9303      	str	r3, [sp, #12]
 80104a0:	ab0a      	add	r3, sp, #40	; 0x28
 80104a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80104a6:	ab09      	add	r3, sp, #36	; 0x24
 80104a8:	ec49 8b10 	vmov	d0, r8, r9
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	6022      	str	r2, [r4, #0]
 80104b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80104b4:	4628      	mov	r0, r5
 80104b6:	f7ff fecd 	bl	8010254 <__cvt>
 80104ba:	9b06      	ldr	r3, [sp, #24]
 80104bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104be:	2b47      	cmp	r3, #71	; 0x47
 80104c0:	4680      	mov	r8, r0
 80104c2:	d108      	bne.n	80104d6 <_printf_float+0x142>
 80104c4:	1cc8      	adds	r0, r1, #3
 80104c6:	db02      	blt.n	80104ce <_printf_float+0x13a>
 80104c8:	6863      	ldr	r3, [r4, #4]
 80104ca:	4299      	cmp	r1, r3
 80104cc:	dd41      	ble.n	8010552 <_printf_float+0x1be>
 80104ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80104d2:	fa5f fb8b 	uxtb.w	fp, fp
 80104d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104da:	d820      	bhi.n	801051e <_printf_float+0x18a>
 80104dc:	3901      	subs	r1, #1
 80104de:	465a      	mov	r2, fp
 80104e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80104e4:	9109      	str	r1, [sp, #36]	; 0x24
 80104e6:	f7ff ff17 	bl	8010318 <__exponent>
 80104ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104ec:	1813      	adds	r3, r2, r0
 80104ee:	2a01      	cmp	r2, #1
 80104f0:	4681      	mov	r9, r0
 80104f2:	6123      	str	r3, [r4, #16]
 80104f4:	dc02      	bgt.n	80104fc <_printf_float+0x168>
 80104f6:	6822      	ldr	r2, [r4, #0]
 80104f8:	07d2      	lsls	r2, r2, #31
 80104fa:	d501      	bpl.n	8010500 <_printf_float+0x16c>
 80104fc:	3301      	adds	r3, #1
 80104fe:	6123      	str	r3, [r4, #16]
 8010500:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010504:	2b00      	cmp	r3, #0
 8010506:	d09c      	beq.n	8010442 <_printf_float+0xae>
 8010508:	232d      	movs	r3, #45	; 0x2d
 801050a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801050e:	e798      	b.n	8010442 <_printf_float+0xae>
 8010510:	9a06      	ldr	r2, [sp, #24]
 8010512:	2a47      	cmp	r2, #71	; 0x47
 8010514:	d1be      	bne.n	8010494 <_printf_float+0x100>
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1bc      	bne.n	8010494 <_printf_float+0x100>
 801051a:	2301      	movs	r3, #1
 801051c:	e7b9      	b.n	8010492 <_printf_float+0xfe>
 801051e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010522:	d118      	bne.n	8010556 <_printf_float+0x1c2>
 8010524:	2900      	cmp	r1, #0
 8010526:	6863      	ldr	r3, [r4, #4]
 8010528:	dd0b      	ble.n	8010542 <_printf_float+0x1ae>
 801052a:	6121      	str	r1, [r4, #16]
 801052c:	b913      	cbnz	r3, 8010534 <_printf_float+0x1a0>
 801052e:	6822      	ldr	r2, [r4, #0]
 8010530:	07d0      	lsls	r0, r2, #31
 8010532:	d502      	bpl.n	801053a <_printf_float+0x1a6>
 8010534:	3301      	adds	r3, #1
 8010536:	440b      	add	r3, r1
 8010538:	6123      	str	r3, [r4, #16]
 801053a:	65a1      	str	r1, [r4, #88]	; 0x58
 801053c:	f04f 0900 	mov.w	r9, #0
 8010540:	e7de      	b.n	8010500 <_printf_float+0x16c>
 8010542:	b913      	cbnz	r3, 801054a <_printf_float+0x1b6>
 8010544:	6822      	ldr	r2, [r4, #0]
 8010546:	07d2      	lsls	r2, r2, #31
 8010548:	d501      	bpl.n	801054e <_printf_float+0x1ba>
 801054a:	3302      	adds	r3, #2
 801054c:	e7f4      	b.n	8010538 <_printf_float+0x1a4>
 801054e:	2301      	movs	r3, #1
 8010550:	e7f2      	b.n	8010538 <_printf_float+0x1a4>
 8010552:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010558:	4299      	cmp	r1, r3
 801055a:	db05      	blt.n	8010568 <_printf_float+0x1d4>
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	6121      	str	r1, [r4, #16]
 8010560:	07d8      	lsls	r0, r3, #31
 8010562:	d5ea      	bpl.n	801053a <_printf_float+0x1a6>
 8010564:	1c4b      	adds	r3, r1, #1
 8010566:	e7e7      	b.n	8010538 <_printf_float+0x1a4>
 8010568:	2900      	cmp	r1, #0
 801056a:	bfd4      	ite	le
 801056c:	f1c1 0202 	rsble	r2, r1, #2
 8010570:	2201      	movgt	r2, #1
 8010572:	4413      	add	r3, r2
 8010574:	e7e0      	b.n	8010538 <_printf_float+0x1a4>
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	055a      	lsls	r2, r3, #21
 801057a:	d407      	bmi.n	801058c <_printf_float+0x1f8>
 801057c:	6923      	ldr	r3, [r4, #16]
 801057e:	4642      	mov	r2, r8
 8010580:	4631      	mov	r1, r6
 8010582:	4628      	mov	r0, r5
 8010584:	47b8      	blx	r7
 8010586:	3001      	adds	r0, #1
 8010588:	d12c      	bne.n	80105e4 <_printf_float+0x250>
 801058a:	e764      	b.n	8010456 <_printf_float+0xc2>
 801058c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010590:	f240 80e0 	bls.w	8010754 <_printf_float+0x3c0>
 8010594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010598:	2200      	movs	r2, #0
 801059a:	2300      	movs	r3, #0
 801059c:	f7f0 faa4 	bl	8000ae8 <__aeabi_dcmpeq>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d034      	beq.n	801060e <_printf_float+0x27a>
 80105a4:	4a37      	ldr	r2, [pc, #220]	; (8010684 <_printf_float+0x2f0>)
 80105a6:	2301      	movs	r3, #1
 80105a8:	4631      	mov	r1, r6
 80105aa:	4628      	mov	r0, r5
 80105ac:	47b8      	blx	r7
 80105ae:	3001      	adds	r0, #1
 80105b0:	f43f af51 	beq.w	8010456 <_printf_float+0xc2>
 80105b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105b8:	429a      	cmp	r2, r3
 80105ba:	db02      	blt.n	80105c2 <_printf_float+0x22e>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	07d8      	lsls	r0, r3, #31
 80105c0:	d510      	bpl.n	80105e4 <_printf_float+0x250>
 80105c2:	ee18 3a10 	vmov	r3, s16
 80105c6:	4652      	mov	r2, sl
 80105c8:	4631      	mov	r1, r6
 80105ca:	4628      	mov	r0, r5
 80105cc:	47b8      	blx	r7
 80105ce:	3001      	adds	r0, #1
 80105d0:	f43f af41 	beq.w	8010456 <_printf_float+0xc2>
 80105d4:	f04f 0800 	mov.w	r8, #0
 80105d8:	f104 091a 	add.w	r9, r4, #26
 80105dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105de:	3b01      	subs	r3, #1
 80105e0:	4543      	cmp	r3, r8
 80105e2:	dc09      	bgt.n	80105f8 <_printf_float+0x264>
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	079b      	lsls	r3, r3, #30
 80105e8:	f100 8105 	bmi.w	80107f6 <_printf_float+0x462>
 80105ec:	68e0      	ldr	r0, [r4, #12]
 80105ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f0:	4298      	cmp	r0, r3
 80105f2:	bfb8      	it	lt
 80105f4:	4618      	movlt	r0, r3
 80105f6:	e730      	b.n	801045a <_printf_float+0xc6>
 80105f8:	2301      	movs	r3, #1
 80105fa:	464a      	mov	r2, r9
 80105fc:	4631      	mov	r1, r6
 80105fe:	4628      	mov	r0, r5
 8010600:	47b8      	blx	r7
 8010602:	3001      	adds	r0, #1
 8010604:	f43f af27 	beq.w	8010456 <_printf_float+0xc2>
 8010608:	f108 0801 	add.w	r8, r8, #1
 801060c:	e7e6      	b.n	80105dc <_printf_float+0x248>
 801060e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010610:	2b00      	cmp	r3, #0
 8010612:	dc39      	bgt.n	8010688 <_printf_float+0x2f4>
 8010614:	4a1b      	ldr	r2, [pc, #108]	; (8010684 <_printf_float+0x2f0>)
 8010616:	2301      	movs	r3, #1
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	47b8      	blx	r7
 801061e:	3001      	adds	r0, #1
 8010620:	f43f af19 	beq.w	8010456 <_printf_float+0xc2>
 8010624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010628:	4313      	orrs	r3, r2
 801062a:	d102      	bne.n	8010632 <_printf_float+0x29e>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	07d9      	lsls	r1, r3, #31
 8010630:	d5d8      	bpl.n	80105e4 <_printf_float+0x250>
 8010632:	ee18 3a10 	vmov	r3, s16
 8010636:	4652      	mov	r2, sl
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	f43f af09 	beq.w	8010456 <_printf_float+0xc2>
 8010644:	f04f 0900 	mov.w	r9, #0
 8010648:	f104 0a1a 	add.w	sl, r4, #26
 801064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801064e:	425b      	negs	r3, r3
 8010650:	454b      	cmp	r3, r9
 8010652:	dc01      	bgt.n	8010658 <_printf_float+0x2c4>
 8010654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010656:	e792      	b.n	801057e <_printf_float+0x1ea>
 8010658:	2301      	movs	r3, #1
 801065a:	4652      	mov	r2, sl
 801065c:	4631      	mov	r1, r6
 801065e:	4628      	mov	r0, r5
 8010660:	47b8      	blx	r7
 8010662:	3001      	adds	r0, #1
 8010664:	f43f aef7 	beq.w	8010456 <_printf_float+0xc2>
 8010668:	f109 0901 	add.w	r9, r9, #1
 801066c:	e7ee      	b.n	801064c <_printf_float+0x2b8>
 801066e:	bf00      	nop
 8010670:	7fefffff 	.word	0x7fefffff
 8010674:	0801483c 	.word	0x0801483c
 8010678:	08014840 	.word	0x08014840
 801067c:	08014848 	.word	0x08014848
 8010680:	08014844 	.word	0x08014844
 8010684:	0801484c 	.word	0x0801484c
 8010688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801068a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801068c:	429a      	cmp	r2, r3
 801068e:	bfa8      	it	ge
 8010690:	461a      	movge	r2, r3
 8010692:	2a00      	cmp	r2, #0
 8010694:	4691      	mov	r9, r2
 8010696:	dc37      	bgt.n	8010708 <_printf_float+0x374>
 8010698:	f04f 0b00 	mov.w	fp, #0
 801069c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106a0:	f104 021a 	add.w	r2, r4, #26
 80106a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	eba3 0309 	sub.w	r3, r3, r9
 80106ac:	455b      	cmp	r3, fp
 80106ae:	dc33      	bgt.n	8010718 <_printf_float+0x384>
 80106b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106b4:	429a      	cmp	r2, r3
 80106b6:	db3b      	blt.n	8010730 <_printf_float+0x39c>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	07da      	lsls	r2, r3, #31
 80106bc:	d438      	bmi.n	8010730 <_printf_float+0x39c>
 80106be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106c0:	9a05      	ldr	r2, [sp, #20]
 80106c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106c4:	1a9a      	subs	r2, r3, r2
 80106c6:	eba3 0901 	sub.w	r9, r3, r1
 80106ca:	4591      	cmp	r9, r2
 80106cc:	bfa8      	it	ge
 80106ce:	4691      	movge	r9, r2
 80106d0:	f1b9 0f00 	cmp.w	r9, #0
 80106d4:	dc35      	bgt.n	8010742 <_printf_float+0x3ae>
 80106d6:	f04f 0800 	mov.w	r8, #0
 80106da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106de:	f104 0a1a 	add.w	sl, r4, #26
 80106e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106e6:	1a9b      	subs	r3, r3, r2
 80106e8:	eba3 0309 	sub.w	r3, r3, r9
 80106ec:	4543      	cmp	r3, r8
 80106ee:	f77f af79 	ble.w	80105e4 <_printf_float+0x250>
 80106f2:	2301      	movs	r3, #1
 80106f4:	4652      	mov	r2, sl
 80106f6:	4631      	mov	r1, r6
 80106f8:	4628      	mov	r0, r5
 80106fa:	47b8      	blx	r7
 80106fc:	3001      	adds	r0, #1
 80106fe:	f43f aeaa 	beq.w	8010456 <_printf_float+0xc2>
 8010702:	f108 0801 	add.w	r8, r8, #1
 8010706:	e7ec      	b.n	80106e2 <_printf_float+0x34e>
 8010708:	4613      	mov	r3, r2
 801070a:	4631      	mov	r1, r6
 801070c:	4642      	mov	r2, r8
 801070e:	4628      	mov	r0, r5
 8010710:	47b8      	blx	r7
 8010712:	3001      	adds	r0, #1
 8010714:	d1c0      	bne.n	8010698 <_printf_float+0x304>
 8010716:	e69e      	b.n	8010456 <_printf_float+0xc2>
 8010718:	2301      	movs	r3, #1
 801071a:	4631      	mov	r1, r6
 801071c:	4628      	mov	r0, r5
 801071e:	9205      	str	r2, [sp, #20]
 8010720:	47b8      	blx	r7
 8010722:	3001      	adds	r0, #1
 8010724:	f43f ae97 	beq.w	8010456 <_printf_float+0xc2>
 8010728:	9a05      	ldr	r2, [sp, #20]
 801072a:	f10b 0b01 	add.w	fp, fp, #1
 801072e:	e7b9      	b.n	80106a4 <_printf_float+0x310>
 8010730:	ee18 3a10 	vmov	r3, s16
 8010734:	4652      	mov	r2, sl
 8010736:	4631      	mov	r1, r6
 8010738:	4628      	mov	r0, r5
 801073a:	47b8      	blx	r7
 801073c:	3001      	adds	r0, #1
 801073e:	d1be      	bne.n	80106be <_printf_float+0x32a>
 8010740:	e689      	b.n	8010456 <_printf_float+0xc2>
 8010742:	9a05      	ldr	r2, [sp, #20]
 8010744:	464b      	mov	r3, r9
 8010746:	4442      	add	r2, r8
 8010748:	4631      	mov	r1, r6
 801074a:	4628      	mov	r0, r5
 801074c:	47b8      	blx	r7
 801074e:	3001      	adds	r0, #1
 8010750:	d1c1      	bne.n	80106d6 <_printf_float+0x342>
 8010752:	e680      	b.n	8010456 <_printf_float+0xc2>
 8010754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010756:	2a01      	cmp	r2, #1
 8010758:	dc01      	bgt.n	801075e <_printf_float+0x3ca>
 801075a:	07db      	lsls	r3, r3, #31
 801075c:	d538      	bpl.n	80107d0 <_printf_float+0x43c>
 801075e:	2301      	movs	r3, #1
 8010760:	4642      	mov	r2, r8
 8010762:	4631      	mov	r1, r6
 8010764:	4628      	mov	r0, r5
 8010766:	47b8      	blx	r7
 8010768:	3001      	adds	r0, #1
 801076a:	f43f ae74 	beq.w	8010456 <_printf_float+0xc2>
 801076e:	ee18 3a10 	vmov	r3, s16
 8010772:	4652      	mov	r2, sl
 8010774:	4631      	mov	r1, r6
 8010776:	4628      	mov	r0, r5
 8010778:	47b8      	blx	r7
 801077a:	3001      	adds	r0, #1
 801077c:	f43f ae6b 	beq.w	8010456 <_printf_float+0xc2>
 8010780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010784:	2200      	movs	r2, #0
 8010786:	2300      	movs	r3, #0
 8010788:	f7f0 f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 801078c:	b9d8      	cbnz	r0, 80107c6 <_printf_float+0x432>
 801078e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010790:	f108 0201 	add.w	r2, r8, #1
 8010794:	3b01      	subs	r3, #1
 8010796:	4631      	mov	r1, r6
 8010798:	4628      	mov	r0, r5
 801079a:	47b8      	blx	r7
 801079c:	3001      	adds	r0, #1
 801079e:	d10e      	bne.n	80107be <_printf_float+0x42a>
 80107a0:	e659      	b.n	8010456 <_printf_float+0xc2>
 80107a2:	2301      	movs	r3, #1
 80107a4:	4652      	mov	r2, sl
 80107a6:	4631      	mov	r1, r6
 80107a8:	4628      	mov	r0, r5
 80107aa:	47b8      	blx	r7
 80107ac:	3001      	adds	r0, #1
 80107ae:	f43f ae52 	beq.w	8010456 <_printf_float+0xc2>
 80107b2:	f108 0801 	add.w	r8, r8, #1
 80107b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b8:	3b01      	subs	r3, #1
 80107ba:	4543      	cmp	r3, r8
 80107bc:	dcf1      	bgt.n	80107a2 <_printf_float+0x40e>
 80107be:	464b      	mov	r3, r9
 80107c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80107c4:	e6dc      	b.n	8010580 <_printf_float+0x1ec>
 80107c6:	f04f 0800 	mov.w	r8, #0
 80107ca:	f104 0a1a 	add.w	sl, r4, #26
 80107ce:	e7f2      	b.n	80107b6 <_printf_float+0x422>
 80107d0:	2301      	movs	r3, #1
 80107d2:	4642      	mov	r2, r8
 80107d4:	e7df      	b.n	8010796 <_printf_float+0x402>
 80107d6:	2301      	movs	r3, #1
 80107d8:	464a      	mov	r2, r9
 80107da:	4631      	mov	r1, r6
 80107dc:	4628      	mov	r0, r5
 80107de:	47b8      	blx	r7
 80107e0:	3001      	adds	r0, #1
 80107e2:	f43f ae38 	beq.w	8010456 <_printf_float+0xc2>
 80107e6:	f108 0801 	add.w	r8, r8, #1
 80107ea:	68e3      	ldr	r3, [r4, #12]
 80107ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107ee:	1a5b      	subs	r3, r3, r1
 80107f0:	4543      	cmp	r3, r8
 80107f2:	dcf0      	bgt.n	80107d6 <_printf_float+0x442>
 80107f4:	e6fa      	b.n	80105ec <_printf_float+0x258>
 80107f6:	f04f 0800 	mov.w	r8, #0
 80107fa:	f104 0919 	add.w	r9, r4, #25
 80107fe:	e7f4      	b.n	80107ea <_printf_float+0x456>

08010800 <_printf_common>:
 8010800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010804:	4616      	mov	r6, r2
 8010806:	4699      	mov	r9, r3
 8010808:	688a      	ldr	r2, [r1, #8]
 801080a:	690b      	ldr	r3, [r1, #16]
 801080c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010810:	4293      	cmp	r3, r2
 8010812:	bfb8      	it	lt
 8010814:	4613      	movlt	r3, r2
 8010816:	6033      	str	r3, [r6, #0]
 8010818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801081c:	4607      	mov	r7, r0
 801081e:	460c      	mov	r4, r1
 8010820:	b10a      	cbz	r2, 8010826 <_printf_common+0x26>
 8010822:	3301      	adds	r3, #1
 8010824:	6033      	str	r3, [r6, #0]
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	0699      	lsls	r1, r3, #26
 801082a:	bf42      	ittt	mi
 801082c:	6833      	ldrmi	r3, [r6, #0]
 801082e:	3302      	addmi	r3, #2
 8010830:	6033      	strmi	r3, [r6, #0]
 8010832:	6825      	ldr	r5, [r4, #0]
 8010834:	f015 0506 	ands.w	r5, r5, #6
 8010838:	d106      	bne.n	8010848 <_printf_common+0x48>
 801083a:	f104 0a19 	add.w	sl, r4, #25
 801083e:	68e3      	ldr	r3, [r4, #12]
 8010840:	6832      	ldr	r2, [r6, #0]
 8010842:	1a9b      	subs	r3, r3, r2
 8010844:	42ab      	cmp	r3, r5
 8010846:	dc26      	bgt.n	8010896 <_printf_common+0x96>
 8010848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801084c:	1e13      	subs	r3, r2, #0
 801084e:	6822      	ldr	r2, [r4, #0]
 8010850:	bf18      	it	ne
 8010852:	2301      	movne	r3, #1
 8010854:	0692      	lsls	r2, r2, #26
 8010856:	d42b      	bmi.n	80108b0 <_printf_common+0xb0>
 8010858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801085c:	4649      	mov	r1, r9
 801085e:	4638      	mov	r0, r7
 8010860:	47c0      	blx	r8
 8010862:	3001      	adds	r0, #1
 8010864:	d01e      	beq.n	80108a4 <_printf_common+0xa4>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	68e5      	ldr	r5, [r4, #12]
 801086a:	6832      	ldr	r2, [r6, #0]
 801086c:	f003 0306 	and.w	r3, r3, #6
 8010870:	2b04      	cmp	r3, #4
 8010872:	bf08      	it	eq
 8010874:	1aad      	subeq	r5, r5, r2
 8010876:	68a3      	ldr	r3, [r4, #8]
 8010878:	6922      	ldr	r2, [r4, #16]
 801087a:	bf0c      	ite	eq
 801087c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010880:	2500      	movne	r5, #0
 8010882:	4293      	cmp	r3, r2
 8010884:	bfc4      	itt	gt
 8010886:	1a9b      	subgt	r3, r3, r2
 8010888:	18ed      	addgt	r5, r5, r3
 801088a:	2600      	movs	r6, #0
 801088c:	341a      	adds	r4, #26
 801088e:	42b5      	cmp	r5, r6
 8010890:	d11a      	bne.n	80108c8 <_printf_common+0xc8>
 8010892:	2000      	movs	r0, #0
 8010894:	e008      	b.n	80108a8 <_printf_common+0xa8>
 8010896:	2301      	movs	r3, #1
 8010898:	4652      	mov	r2, sl
 801089a:	4649      	mov	r1, r9
 801089c:	4638      	mov	r0, r7
 801089e:	47c0      	blx	r8
 80108a0:	3001      	adds	r0, #1
 80108a2:	d103      	bne.n	80108ac <_printf_common+0xac>
 80108a4:	f04f 30ff 	mov.w	r0, #4294967295
 80108a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ac:	3501      	adds	r5, #1
 80108ae:	e7c6      	b.n	801083e <_printf_common+0x3e>
 80108b0:	18e1      	adds	r1, r4, r3
 80108b2:	1c5a      	adds	r2, r3, #1
 80108b4:	2030      	movs	r0, #48	; 0x30
 80108b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108ba:	4422      	add	r2, r4
 80108bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108c4:	3302      	adds	r3, #2
 80108c6:	e7c7      	b.n	8010858 <_printf_common+0x58>
 80108c8:	2301      	movs	r3, #1
 80108ca:	4622      	mov	r2, r4
 80108cc:	4649      	mov	r1, r9
 80108ce:	4638      	mov	r0, r7
 80108d0:	47c0      	blx	r8
 80108d2:	3001      	adds	r0, #1
 80108d4:	d0e6      	beq.n	80108a4 <_printf_common+0xa4>
 80108d6:	3601      	adds	r6, #1
 80108d8:	e7d9      	b.n	801088e <_printf_common+0x8e>
	...

080108dc <_printf_i>:
 80108dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108e0:	7e0f      	ldrb	r7, [r1, #24]
 80108e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80108e4:	2f78      	cmp	r7, #120	; 0x78
 80108e6:	4691      	mov	r9, r2
 80108e8:	4680      	mov	r8, r0
 80108ea:	460c      	mov	r4, r1
 80108ec:	469a      	mov	sl, r3
 80108ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80108f2:	d807      	bhi.n	8010904 <_printf_i+0x28>
 80108f4:	2f62      	cmp	r7, #98	; 0x62
 80108f6:	d80a      	bhi.n	801090e <_printf_i+0x32>
 80108f8:	2f00      	cmp	r7, #0
 80108fa:	f000 80d8 	beq.w	8010aae <_printf_i+0x1d2>
 80108fe:	2f58      	cmp	r7, #88	; 0x58
 8010900:	f000 80a3 	beq.w	8010a4a <_printf_i+0x16e>
 8010904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801090c:	e03a      	b.n	8010984 <_printf_i+0xa8>
 801090e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010912:	2b15      	cmp	r3, #21
 8010914:	d8f6      	bhi.n	8010904 <_printf_i+0x28>
 8010916:	a101      	add	r1, pc, #4	; (adr r1, 801091c <_printf_i+0x40>)
 8010918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801091c:	08010975 	.word	0x08010975
 8010920:	08010989 	.word	0x08010989
 8010924:	08010905 	.word	0x08010905
 8010928:	08010905 	.word	0x08010905
 801092c:	08010905 	.word	0x08010905
 8010930:	08010905 	.word	0x08010905
 8010934:	08010989 	.word	0x08010989
 8010938:	08010905 	.word	0x08010905
 801093c:	08010905 	.word	0x08010905
 8010940:	08010905 	.word	0x08010905
 8010944:	08010905 	.word	0x08010905
 8010948:	08010a95 	.word	0x08010a95
 801094c:	080109b9 	.word	0x080109b9
 8010950:	08010a77 	.word	0x08010a77
 8010954:	08010905 	.word	0x08010905
 8010958:	08010905 	.word	0x08010905
 801095c:	08010ab7 	.word	0x08010ab7
 8010960:	08010905 	.word	0x08010905
 8010964:	080109b9 	.word	0x080109b9
 8010968:	08010905 	.word	0x08010905
 801096c:	08010905 	.word	0x08010905
 8010970:	08010a7f 	.word	0x08010a7f
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	1d1a      	adds	r2, r3, #4
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	602a      	str	r2, [r5, #0]
 801097c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010984:	2301      	movs	r3, #1
 8010986:	e0a3      	b.n	8010ad0 <_printf_i+0x1f4>
 8010988:	6820      	ldr	r0, [r4, #0]
 801098a:	6829      	ldr	r1, [r5, #0]
 801098c:	0606      	lsls	r6, r0, #24
 801098e:	f101 0304 	add.w	r3, r1, #4
 8010992:	d50a      	bpl.n	80109aa <_printf_i+0xce>
 8010994:	680e      	ldr	r6, [r1, #0]
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	2e00      	cmp	r6, #0
 801099a:	da03      	bge.n	80109a4 <_printf_i+0xc8>
 801099c:	232d      	movs	r3, #45	; 0x2d
 801099e:	4276      	negs	r6, r6
 80109a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109a4:	485e      	ldr	r0, [pc, #376]	; (8010b20 <_printf_i+0x244>)
 80109a6:	230a      	movs	r3, #10
 80109a8:	e019      	b.n	80109de <_printf_i+0x102>
 80109aa:	680e      	ldr	r6, [r1, #0]
 80109ac:	602b      	str	r3, [r5, #0]
 80109ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80109b2:	bf18      	it	ne
 80109b4:	b236      	sxthne	r6, r6
 80109b6:	e7ef      	b.n	8010998 <_printf_i+0xbc>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	6820      	ldr	r0, [r4, #0]
 80109bc:	1d19      	adds	r1, r3, #4
 80109be:	6029      	str	r1, [r5, #0]
 80109c0:	0601      	lsls	r1, r0, #24
 80109c2:	d501      	bpl.n	80109c8 <_printf_i+0xec>
 80109c4:	681e      	ldr	r6, [r3, #0]
 80109c6:	e002      	b.n	80109ce <_printf_i+0xf2>
 80109c8:	0646      	lsls	r6, r0, #25
 80109ca:	d5fb      	bpl.n	80109c4 <_printf_i+0xe8>
 80109cc:	881e      	ldrh	r6, [r3, #0]
 80109ce:	4854      	ldr	r0, [pc, #336]	; (8010b20 <_printf_i+0x244>)
 80109d0:	2f6f      	cmp	r7, #111	; 0x6f
 80109d2:	bf0c      	ite	eq
 80109d4:	2308      	moveq	r3, #8
 80109d6:	230a      	movne	r3, #10
 80109d8:	2100      	movs	r1, #0
 80109da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109de:	6865      	ldr	r5, [r4, #4]
 80109e0:	60a5      	str	r5, [r4, #8]
 80109e2:	2d00      	cmp	r5, #0
 80109e4:	bfa2      	ittt	ge
 80109e6:	6821      	ldrge	r1, [r4, #0]
 80109e8:	f021 0104 	bicge.w	r1, r1, #4
 80109ec:	6021      	strge	r1, [r4, #0]
 80109ee:	b90e      	cbnz	r6, 80109f4 <_printf_i+0x118>
 80109f0:	2d00      	cmp	r5, #0
 80109f2:	d04d      	beq.n	8010a90 <_printf_i+0x1b4>
 80109f4:	4615      	mov	r5, r2
 80109f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80109fa:	fb03 6711 	mls	r7, r3, r1, r6
 80109fe:	5dc7      	ldrb	r7, [r0, r7]
 8010a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a04:	4637      	mov	r7, r6
 8010a06:	42bb      	cmp	r3, r7
 8010a08:	460e      	mov	r6, r1
 8010a0a:	d9f4      	bls.n	80109f6 <_printf_i+0x11a>
 8010a0c:	2b08      	cmp	r3, #8
 8010a0e:	d10b      	bne.n	8010a28 <_printf_i+0x14c>
 8010a10:	6823      	ldr	r3, [r4, #0]
 8010a12:	07de      	lsls	r6, r3, #31
 8010a14:	d508      	bpl.n	8010a28 <_printf_i+0x14c>
 8010a16:	6923      	ldr	r3, [r4, #16]
 8010a18:	6861      	ldr	r1, [r4, #4]
 8010a1a:	4299      	cmp	r1, r3
 8010a1c:	bfde      	ittt	le
 8010a1e:	2330      	movle	r3, #48	; 0x30
 8010a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a28:	1b52      	subs	r2, r2, r5
 8010a2a:	6122      	str	r2, [r4, #16]
 8010a2c:	f8cd a000 	str.w	sl, [sp]
 8010a30:	464b      	mov	r3, r9
 8010a32:	aa03      	add	r2, sp, #12
 8010a34:	4621      	mov	r1, r4
 8010a36:	4640      	mov	r0, r8
 8010a38:	f7ff fee2 	bl	8010800 <_printf_common>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d14c      	bne.n	8010ada <_printf_i+0x1fe>
 8010a40:	f04f 30ff 	mov.w	r0, #4294967295
 8010a44:	b004      	add	sp, #16
 8010a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a4a:	4835      	ldr	r0, [pc, #212]	; (8010b20 <_printf_i+0x244>)
 8010a4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010a50:	6829      	ldr	r1, [r5, #0]
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8010a58:	6029      	str	r1, [r5, #0]
 8010a5a:	061d      	lsls	r5, r3, #24
 8010a5c:	d514      	bpl.n	8010a88 <_printf_i+0x1ac>
 8010a5e:	07df      	lsls	r7, r3, #31
 8010a60:	bf44      	itt	mi
 8010a62:	f043 0320 	orrmi.w	r3, r3, #32
 8010a66:	6023      	strmi	r3, [r4, #0]
 8010a68:	b91e      	cbnz	r6, 8010a72 <_printf_i+0x196>
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	f023 0320 	bic.w	r3, r3, #32
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	2310      	movs	r3, #16
 8010a74:	e7b0      	b.n	80109d8 <_printf_i+0xfc>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	f043 0320 	orr.w	r3, r3, #32
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	2378      	movs	r3, #120	; 0x78
 8010a80:	4828      	ldr	r0, [pc, #160]	; (8010b24 <_printf_i+0x248>)
 8010a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a86:	e7e3      	b.n	8010a50 <_printf_i+0x174>
 8010a88:	0659      	lsls	r1, r3, #25
 8010a8a:	bf48      	it	mi
 8010a8c:	b2b6      	uxthmi	r6, r6
 8010a8e:	e7e6      	b.n	8010a5e <_printf_i+0x182>
 8010a90:	4615      	mov	r5, r2
 8010a92:	e7bb      	b.n	8010a0c <_printf_i+0x130>
 8010a94:	682b      	ldr	r3, [r5, #0]
 8010a96:	6826      	ldr	r6, [r4, #0]
 8010a98:	6961      	ldr	r1, [r4, #20]
 8010a9a:	1d18      	adds	r0, r3, #4
 8010a9c:	6028      	str	r0, [r5, #0]
 8010a9e:	0635      	lsls	r5, r6, #24
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	d501      	bpl.n	8010aa8 <_printf_i+0x1cc>
 8010aa4:	6019      	str	r1, [r3, #0]
 8010aa6:	e002      	b.n	8010aae <_printf_i+0x1d2>
 8010aa8:	0670      	lsls	r0, r6, #25
 8010aaa:	d5fb      	bpl.n	8010aa4 <_printf_i+0x1c8>
 8010aac:	8019      	strh	r1, [r3, #0]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	6123      	str	r3, [r4, #16]
 8010ab2:	4615      	mov	r5, r2
 8010ab4:	e7ba      	b.n	8010a2c <_printf_i+0x150>
 8010ab6:	682b      	ldr	r3, [r5, #0]
 8010ab8:	1d1a      	adds	r2, r3, #4
 8010aba:	602a      	str	r2, [r5, #0]
 8010abc:	681d      	ldr	r5, [r3, #0]
 8010abe:	6862      	ldr	r2, [r4, #4]
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f7ef fb9c 	bl	8000200 <memchr>
 8010ac8:	b108      	cbz	r0, 8010ace <_printf_i+0x1f2>
 8010aca:	1b40      	subs	r0, r0, r5
 8010acc:	6060      	str	r0, [r4, #4]
 8010ace:	6863      	ldr	r3, [r4, #4]
 8010ad0:	6123      	str	r3, [r4, #16]
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ad8:	e7a8      	b.n	8010a2c <_printf_i+0x150>
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	462a      	mov	r2, r5
 8010ade:	4649      	mov	r1, r9
 8010ae0:	4640      	mov	r0, r8
 8010ae2:	47d0      	blx	sl
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	d0ab      	beq.n	8010a40 <_printf_i+0x164>
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	079b      	lsls	r3, r3, #30
 8010aec:	d413      	bmi.n	8010b16 <_printf_i+0x23a>
 8010aee:	68e0      	ldr	r0, [r4, #12]
 8010af0:	9b03      	ldr	r3, [sp, #12]
 8010af2:	4298      	cmp	r0, r3
 8010af4:	bfb8      	it	lt
 8010af6:	4618      	movlt	r0, r3
 8010af8:	e7a4      	b.n	8010a44 <_printf_i+0x168>
 8010afa:	2301      	movs	r3, #1
 8010afc:	4632      	mov	r2, r6
 8010afe:	4649      	mov	r1, r9
 8010b00:	4640      	mov	r0, r8
 8010b02:	47d0      	blx	sl
 8010b04:	3001      	adds	r0, #1
 8010b06:	d09b      	beq.n	8010a40 <_printf_i+0x164>
 8010b08:	3501      	adds	r5, #1
 8010b0a:	68e3      	ldr	r3, [r4, #12]
 8010b0c:	9903      	ldr	r1, [sp, #12]
 8010b0e:	1a5b      	subs	r3, r3, r1
 8010b10:	42ab      	cmp	r3, r5
 8010b12:	dcf2      	bgt.n	8010afa <_printf_i+0x21e>
 8010b14:	e7eb      	b.n	8010aee <_printf_i+0x212>
 8010b16:	2500      	movs	r5, #0
 8010b18:	f104 0619 	add.w	r6, r4, #25
 8010b1c:	e7f5      	b.n	8010b0a <_printf_i+0x22e>
 8010b1e:	bf00      	nop
 8010b20:	0801484e 	.word	0x0801484e
 8010b24:	0801485f 	.word	0x0801485f

08010b28 <sniprintf>:
 8010b28:	b40c      	push	{r2, r3}
 8010b2a:	b530      	push	{r4, r5, lr}
 8010b2c:	4b17      	ldr	r3, [pc, #92]	; (8010b8c <sniprintf+0x64>)
 8010b2e:	1e0c      	subs	r4, r1, #0
 8010b30:	681d      	ldr	r5, [r3, #0]
 8010b32:	b09d      	sub	sp, #116	; 0x74
 8010b34:	da08      	bge.n	8010b48 <sniprintf+0x20>
 8010b36:	238b      	movs	r3, #139	; 0x8b
 8010b38:	602b      	str	r3, [r5, #0]
 8010b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3e:	b01d      	add	sp, #116	; 0x74
 8010b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b44:	b002      	add	sp, #8
 8010b46:	4770      	bx	lr
 8010b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b50:	bf14      	ite	ne
 8010b52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010b56:	4623      	moveq	r3, r4
 8010b58:	9304      	str	r3, [sp, #16]
 8010b5a:	9307      	str	r3, [sp, #28]
 8010b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b60:	9002      	str	r0, [sp, #8]
 8010b62:	9006      	str	r0, [sp, #24]
 8010b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010b6a:	ab21      	add	r3, sp, #132	; 0x84
 8010b6c:	a902      	add	r1, sp, #8
 8010b6e:	4628      	mov	r0, r5
 8010b70:	9301      	str	r3, [sp, #4]
 8010b72:	f001 fb7d 	bl	8012270 <_svfiprintf_r>
 8010b76:	1c43      	adds	r3, r0, #1
 8010b78:	bfbc      	itt	lt
 8010b7a:	238b      	movlt	r3, #139	; 0x8b
 8010b7c:	602b      	strlt	r3, [r5, #0]
 8010b7e:	2c00      	cmp	r4, #0
 8010b80:	d0dd      	beq.n	8010b3e <sniprintf+0x16>
 8010b82:	9b02      	ldr	r3, [sp, #8]
 8010b84:	2200      	movs	r2, #0
 8010b86:	701a      	strb	r2, [r3, #0]
 8010b88:	e7d9      	b.n	8010b3e <sniprintf+0x16>
 8010b8a:	bf00      	nop
 8010b8c:	20000018 	.word	0x20000018

08010b90 <strncpy>:
 8010b90:	b510      	push	{r4, lr}
 8010b92:	3901      	subs	r1, #1
 8010b94:	4603      	mov	r3, r0
 8010b96:	b132      	cbz	r2, 8010ba6 <strncpy+0x16>
 8010b98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010b9c:	f803 4b01 	strb.w	r4, [r3], #1
 8010ba0:	3a01      	subs	r2, #1
 8010ba2:	2c00      	cmp	r4, #0
 8010ba4:	d1f7      	bne.n	8010b96 <strncpy+0x6>
 8010ba6:	441a      	add	r2, r3
 8010ba8:	2100      	movs	r1, #0
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d100      	bne.n	8010bb0 <strncpy+0x20>
 8010bae:	bd10      	pop	{r4, pc}
 8010bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8010bb4:	e7f9      	b.n	8010baa <strncpy+0x1a>

08010bb6 <quorem>:
 8010bb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	6903      	ldr	r3, [r0, #16]
 8010bbc:	690c      	ldr	r4, [r1, #16]
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	4607      	mov	r7, r0
 8010bc2:	f2c0 8081 	blt.w	8010cc8 <quorem+0x112>
 8010bc6:	3c01      	subs	r4, #1
 8010bc8:	f101 0814 	add.w	r8, r1, #20
 8010bcc:	f100 0514 	add.w	r5, r0, #20
 8010bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bd4:	9301      	str	r3, [sp, #4]
 8010bd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bde:	3301      	adds	r3, #1
 8010be0:	429a      	cmp	r2, r3
 8010be2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010be6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010bea:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bee:	d331      	bcc.n	8010c54 <quorem+0x9e>
 8010bf0:	f04f 0e00 	mov.w	lr, #0
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	46ac      	mov	ip, r5
 8010bf8:	46f2      	mov	sl, lr
 8010bfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8010bfe:	b293      	uxth	r3, r2
 8010c00:	fb06 e303 	mla	r3, r6, r3, lr
 8010c04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8010c0e:	f8dc a000 	ldr.w	sl, [ip]
 8010c12:	0c12      	lsrs	r2, r2, #16
 8010c14:	fa13 f38a 	uxtah	r3, r3, sl
 8010c18:	fb06 e202 	mla	r2, r6, r2, lr
 8010c1c:	9300      	str	r3, [sp, #0]
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010c24:	b292      	uxth	r2, r2
 8010c26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010c2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010c32:	4581      	cmp	r9, r0
 8010c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c38:	f84c 3b04 	str.w	r3, [ip], #4
 8010c3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010c40:	d2db      	bcs.n	8010bfa <quorem+0x44>
 8010c42:	f855 300b 	ldr.w	r3, [r5, fp]
 8010c46:	b92b      	cbnz	r3, 8010c54 <quorem+0x9e>
 8010c48:	9b01      	ldr	r3, [sp, #4]
 8010c4a:	3b04      	subs	r3, #4
 8010c4c:	429d      	cmp	r5, r3
 8010c4e:	461a      	mov	r2, r3
 8010c50:	d32e      	bcc.n	8010cb0 <quorem+0xfa>
 8010c52:	613c      	str	r4, [r7, #16]
 8010c54:	4638      	mov	r0, r7
 8010c56:	f001 f8b7 	bl	8011dc8 <__mcmp>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	db24      	blt.n	8010ca8 <quorem+0xf2>
 8010c5e:	3601      	adds	r6, #1
 8010c60:	4628      	mov	r0, r5
 8010c62:	f04f 0c00 	mov.w	ip, #0
 8010c66:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c6a:	f8d0 e000 	ldr.w	lr, [r0]
 8010c6e:	b293      	uxth	r3, r2
 8010c70:	ebac 0303 	sub.w	r3, ip, r3
 8010c74:	0c12      	lsrs	r2, r2, #16
 8010c76:	fa13 f38e 	uxtah	r3, r3, lr
 8010c7a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c88:	45c1      	cmp	r9, r8
 8010c8a:	f840 3b04 	str.w	r3, [r0], #4
 8010c8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010c92:	d2e8      	bcs.n	8010c66 <quorem+0xb0>
 8010c94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c9c:	b922      	cbnz	r2, 8010ca8 <quorem+0xf2>
 8010c9e:	3b04      	subs	r3, #4
 8010ca0:	429d      	cmp	r5, r3
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	d30a      	bcc.n	8010cbc <quorem+0x106>
 8010ca6:	613c      	str	r4, [r7, #16]
 8010ca8:	4630      	mov	r0, r6
 8010caa:	b003      	add	sp, #12
 8010cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb0:	6812      	ldr	r2, [r2, #0]
 8010cb2:	3b04      	subs	r3, #4
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	d1cc      	bne.n	8010c52 <quorem+0x9c>
 8010cb8:	3c01      	subs	r4, #1
 8010cba:	e7c7      	b.n	8010c4c <quorem+0x96>
 8010cbc:	6812      	ldr	r2, [r2, #0]
 8010cbe:	3b04      	subs	r3, #4
 8010cc0:	2a00      	cmp	r2, #0
 8010cc2:	d1f0      	bne.n	8010ca6 <quorem+0xf0>
 8010cc4:	3c01      	subs	r4, #1
 8010cc6:	e7eb      	b.n	8010ca0 <quorem+0xea>
 8010cc8:	2000      	movs	r0, #0
 8010cca:	e7ee      	b.n	8010caa <quorem+0xf4>
 8010ccc:	0000      	movs	r0, r0
	...

08010cd0 <_dtoa_r>:
 8010cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd4:	ed2d 8b04 	vpush	{d8-d9}
 8010cd8:	ec57 6b10 	vmov	r6, r7, d0
 8010cdc:	b093      	sub	sp, #76	; 0x4c
 8010cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ce4:	9106      	str	r1, [sp, #24]
 8010ce6:	ee10 aa10 	vmov	sl, s0
 8010cea:	4604      	mov	r4, r0
 8010cec:	9209      	str	r2, [sp, #36]	; 0x24
 8010cee:	930c      	str	r3, [sp, #48]	; 0x30
 8010cf0:	46bb      	mov	fp, r7
 8010cf2:	b975      	cbnz	r5, 8010d12 <_dtoa_r+0x42>
 8010cf4:	2010      	movs	r0, #16
 8010cf6:	f000 fddd 	bl	80118b4 <malloc>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8010cfe:	b920      	cbnz	r0, 8010d0a <_dtoa_r+0x3a>
 8010d00:	4ba7      	ldr	r3, [pc, #668]	; (8010fa0 <_dtoa_r+0x2d0>)
 8010d02:	21ea      	movs	r1, #234	; 0xea
 8010d04:	48a7      	ldr	r0, [pc, #668]	; (8010fa4 <_dtoa_r+0x2d4>)
 8010d06:	f001 fbc3 	bl	8012490 <__assert_func>
 8010d0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d0e:	6005      	str	r5, [r0, #0]
 8010d10:	60c5      	str	r5, [r0, #12]
 8010d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d14:	6819      	ldr	r1, [r3, #0]
 8010d16:	b151      	cbz	r1, 8010d2e <_dtoa_r+0x5e>
 8010d18:	685a      	ldr	r2, [r3, #4]
 8010d1a:	604a      	str	r2, [r1, #4]
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	4093      	lsls	r3, r2
 8010d20:	608b      	str	r3, [r1, #8]
 8010d22:	4620      	mov	r0, r4
 8010d24:	f000 fe0e 	bl	8011944 <_Bfree>
 8010d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	601a      	str	r2, [r3, #0]
 8010d2e:	1e3b      	subs	r3, r7, #0
 8010d30:	bfaa      	itet	ge
 8010d32:	2300      	movge	r3, #0
 8010d34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010d38:	f8c8 3000 	strge.w	r3, [r8]
 8010d3c:	4b9a      	ldr	r3, [pc, #616]	; (8010fa8 <_dtoa_r+0x2d8>)
 8010d3e:	bfbc      	itt	lt
 8010d40:	2201      	movlt	r2, #1
 8010d42:	f8c8 2000 	strlt.w	r2, [r8]
 8010d46:	ea33 030b 	bics.w	r3, r3, fp
 8010d4a:	d11b      	bne.n	8010d84 <_dtoa_r+0xb4>
 8010d4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d52:	6013      	str	r3, [r2, #0]
 8010d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d58:	4333      	orrs	r3, r6
 8010d5a:	f000 8592 	beq.w	8011882 <_dtoa_r+0xbb2>
 8010d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d60:	b963      	cbnz	r3, 8010d7c <_dtoa_r+0xac>
 8010d62:	4b92      	ldr	r3, [pc, #584]	; (8010fac <_dtoa_r+0x2dc>)
 8010d64:	e022      	b.n	8010dac <_dtoa_r+0xdc>
 8010d66:	4b92      	ldr	r3, [pc, #584]	; (8010fb0 <_dtoa_r+0x2e0>)
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	3308      	adds	r3, #8
 8010d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	9801      	ldr	r0, [sp, #4]
 8010d72:	b013      	add	sp, #76	; 0x4c
 8010d74:	ecbd 8b04 	vpop	{d8-d9}
 8010d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7c:	4b8b      	ldr	r3, [pc, #556]	; (8010fac <_dtoa_r+0x2dc>)
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	3303      	adds	r3, #3
 8010d82:	e7f3      	b.n	8010d6c <_dtoa_r+0x9c>
 8010d84:	2200      	movs	r2, #0
 8010d86:	2300      	movs	r3, #0
 8010d88:	4650      	mov	r0, sl
 8010d8a:	4659      	mov	r1, fp
 8010d8c:	f7ef feac 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d90:	ec4b ab19 	vmov	d9, sl, fp
 8010d94:	4680      	mov	r8, r0
 8010d96:	b158      	cbz	r0, 8010db0 <_dtoa_r+0xe0>
 8010d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	6013      	str	r3, [r2, #0]
 8010d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 856b 	beq.w	801187c <_dtoa_r+0xbac>
 8010da6:	4883      	ldr	r0, [pc, #524]	; (8010fb4 <_dtoa_r+0x2e4>)
 8010da8:	6018      	str	r0, [r3, #0]
 8010daa:	1e43      	subs	r3, r0, #1
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	e7df      	b.n	8010d70 <_dtoa_r+0xa0>
 8010db0:	ec4b ab10 	vmov	d0, sl, fp
 8010db4:	aa10      	add	r2, sp, #64	; 0x40
 8010db6:	a911      	add	r1, sp, #68	; 0x44
 8010db8:	4620      	mov	r0, r4
 8010dba:	f001 f8ab 	bl	8011f14 <__d2b>
 8010dbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010dc2:	ee08 0a10 	vmov	s16, r0
 8010dc6:	2d00      	cmp	r5, #0
 8010dc8:	f000 8084 	beq.w	8010ed4 <_dtoa_r+0x204>
 8010dcc:	ee19 3a90 	vmov	r3, s19
 8010dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010dd8:	4656      	mov	r6, sl
 8010dda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010de2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010de6:	4b74      	ldr	r3, [pc, #464]	; (8010fb8 <_dtoa_r+0x2e8>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	4630      	mov	r0, r6
 8010dec:	4639      	mov	r1, r7
 8010dee:	f7ef fa5b 	bl	80002a8 <__aeabi_dsub>
 8010df2:	a365      	add	r3, pc, #404	; (adr r3, 8010f88 <_dtoa_r+0x2b8>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fc0e 	bl	8000618 <__aeabi_dmul>
 8010dfc:	a364      	add	r3, pc, #400	; (adr r3, 8010f90 <_dtoa_r+0x2c0>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	f7ef fa53 	bl	80002ac <__adddf3>
 8010e06:	4606      	mov	r6, r0
 8010e08:	4628      	mov	r0, r5
 8010e0a:	460f      	mov	r7, r1
 8010e0c:	f7ef fb9a 	bl	8000544 <__aeabi_i2d>
 8010e10:	a361      	add	r3, pc, #388	; (adr r3, 8010f98 <_dtoa_r+0x2c8>)
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	f7ef fbff 	bl	8000618 <__aeabi_dmul>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	4630      	mov	r0, r6
 8010e20:	4639      	mov	r1, r7
 8010e22:	f7ef fa43 	bl	80002ac <__adddf3>
 8010e26:	4606      	mov	r6, r0
 8010e28:	460f      	mov	r7, r1
 8010e2a:	f7ef fea5 	bl	8000b78 <__aeabi_d2iz>
 8010e2e:	2200      	movs	r2, #0
 8010e30:	9000      	str	r0, [sp, #0]
 8010e32:	2300      	movs	r3, #0
 8010e34:	4630      	mov	r0, r6
 8010e36:	4639      	mov	r1, r7
 8010e38:	f7ef fe60 	bl	8000afc <__aeabi_dcmplt>
 8010e3c:	b150      	cbz	r0, 8010e54 <_dtoa_r+0x184>
 8010e3e:	9800      	ldr	r0, [sp, #0]
 8010e40:	f7ef fb80 	bl	8000544 <__aeabi_i2d>
 8010e44:	4632      	mov	r2, r6
 8010e46:	463b      	mov	r3, r7
 8010e48:	f7ef fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e4c:	b910      	cbnz	r0, 8010e54 <_dtoa_r+0x184>
 8010e4e:	9b00      	ldr	r3, [sp, #0]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	9b00      	ldr	r3, [sp, #0]
 8010e56:	2b16      	cmp	r3, #22
 8010e58:	d85a      	bhi.n	8010f10 <_dtoa_r+0x240>
 8010e5a:	9a00      	ldr	r2, [sp, #0]
 8010e5c:	4b57      	ldr	r3, [pc, #348]	; (8010fbc <_dtoa_r+0x2ec>)
 8010e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e66:	ec51 0b19 	vmov	r0, r1, d9
 8010e6a:	f7ef fe47 	bl	8000afc <__aeabi_dcmplt>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d050      	beq.n	8010f14 <_dtoa_r+0x244>
 8010e72:	9b00      	ldr	r3, [sp, #0]
 8010e74:	3b01      	subs	r3, #1
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	2300      	movs	r3, #0
 8010e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e7e:	1b5d      	subs	r5, r3, r5
 8010e80:	1e6b      	subs	r3, r5, #1
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	bf45      	ittet	mi
 8010e86:	f1c5 0301 	rsbmi	r3, r5, #1
 8010e8a:	9304      	strmi	r3, [sp, #16]
 8010e8c:	2300      	movpl	r3, #0
 8010e8e:	2300      	movmi	r3, #0
 8010e90:	bf4c      	ite	mi
 8010e92:	9305      	strmi	r3, [sp, #20]
 8010e94:	9304      	strpl	r3, [sp, #16]
 8010e96:	9b00      	ldr	r3, [sp, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	db3d      	blt.n	8010f18 <_dtoa_r+0x248>
 8010e9c:	9b05      	ldr	r3, [sp, #20]
 8010e9e:	9a00      	ldr	r2, [sp, #0]
 8010ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8010ea2:	4413      	add	r3, r2
 8010ea4:	9305      	str	r3, [sp, #20]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9307      	str	r3, [sp, #28]
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	2b09      	cmp	r3, #9
 8010eae:	f200 8089 	bhi.w	8010fc4 <_dtoa_r+0x2f4>
 8010eb2:	2b05      	cmp	r3, #5
 8010eb4:	bfc4      	itt	gt
 8010eb6:	3b04      	subgt	r3, #4
 8010eb8:	9306      	strgt	r3, [sp, #24]
 8010eba:	9b06      	ldr	r3, [sp, #24]
 8010ebc:	f1a3 0302 	sub.w	r3, r3, #2
 8010ec0:	bfcc      	ite	gt
 8010ec2:	2500      	movgt	r5, #0
 8010ec4:	2501      	movle	r5, #1
 8010ec6:	2b03      	cmp	r3, #3
 8010ec8:	f200 8087 	bhi.w	8010fda <_dtoa_r+0x30a>
 8010ecc:	e8df f003 	tbb	[pc, r3]
 8010ed0:	59383a2d 	.word	0x59383a2d
 8010ed4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ed8:	441d      	add	r5, r3
 8010eda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ede:	2b20      	cmp	r3, #32
 8010ee0:	bfc1      	itttt	gt
 8010ee2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ee6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010eea:	fa0b f303 	lslgt.w	r3, fp, r3
 8010eee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010ef2:	bfda      	itte	le
 8010ef4:	f1c3 0320 	rsble	r3, r3, #32
 8010ef8:	fa06 f003 	lslle.w	r0, r6, r3
 8010efc:	4318      	orrgt	r0, r3
 8010efe:	f7ef fb11 	bl	8000524 <__aeabi_ui2d>
 8010f02:	2301      	movs	r3, #1
 8010f04:	4606      	mov	r6, r0
 8010f06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010f0a:	3d01      	subs	r5, #1
 8010f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f0e:	e76a      	b.n	8010de6 <_dtoa_r+0x116>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e7b2      	b.n	8010e7a <_dtoa_r+0x1aa>
 8010f14:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f16:	e7b1      	b.n	8010e7c <_dtoa_r+0x1ac>
 8010f18:	9b04      	ldr	r3, [sp, #16]
 8010f1a:	9a00      	ldr	r2, [sp, #0]
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	9304      	str	r3, [sp, #16]
 8010f20:	4253      	negs	r3, r2
 8010f22:	9307      	str	r3, [sp, #28]
 8010f24:	2300      	movs	r3, #0
 8010f26:	930a      	str	r3, [sp, #40]	; 0x28
 8010f28:	e7bf      	b.n	8010eaa <_dtoa_r+0x1da>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	9308      	str	r3, [sp, #32]
 8010f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dc55      	bgt.n	8010fe0 <_dtoa_r+0x310>
 8010f34:	2301      	movs	r3, #1
 8010f36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f3e:	e00c      	b.n	8010f5a <_dtoa_r+0x28a>
 8010f40:	2301      	movs	r3, #1
 8010f42:	e7f3      	b.n	8010f2c <_dtoa_r+0x25c>
 8010f44:	2300      	movs	r3, #0
 8010f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f48:	9308      	str	r3, [sp, #32]
 8010f4a:	9b00      	ldr	r3, [sp, #0]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	9302      	str	r3, [sp, #8]
 8010f50:	3301      	adds	r3, #1
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	9303      	str	r3, [sp, #12]
 8010f56:	bfb8      	it	lt
 8010f58:	2301      	movlt	r3, #1
 8010f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	6042      	str	r2, [r0, #4]
 8010f60:	2204      	movs	r2, #4
 8010f62:	f102 0614 	add.w	r6, r2, #20
 8010f66:	429e      	cmp	r6, r3
 8010f68:	6841      	ldr	r1, [r0, #4]
 8010f6a:	d93d      	bls.n	8010fe8 <_dtoa_r+0x318>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f000 fca9 	bl	80118c4 <_Balloc>
 8010f72:	9001      	str	r0, [sp, #4]
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d13b      	bne.n	8010ff0 <_dtoa_r+0x320>
 8010f78:	4b11      	ldr	r3, [pc, #68]	; (8010fc0 <_dtoa_r+0x2f0>)
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f80:	e6c0      	b.n	8010d04 <_dtoa_r+0x34>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e7df      	b.n	8010f46 <_dtoa_r+0x276>
 8010f86:	bf00      	nop
 8010f88:	636f4361 	.word	0x636f4361
 8010f8c:	3fd287a7 	.word	0x3fd287a7
 8010f90:	8b60c8b3 	.word	0x8b60c8b3
 8010f94:	3fc68a28 	.word	0x3fc68a28
 8010f98:	509f79fb 	.word	0x509f79fb
 8010f9c:	3fd34413 	.word	0x3fd34413
 8010fa0:	0801487d 	.word	0x0801487d
 8010fa4:	08014894 	.word	0x08014894
 8010fa8:	7ff00000 	.word	0x7ff00000
 8010fac:	08014879 	.word	0x08014879
 8010fb0:	08014870 	.word	0x08014870
 8010fb4:	0801484d 	.word	0x0801484d
 8010fb8:	3ff80000 	.word	0x3ff80000
 8010fbc:	08014988 	.word	0x08014988
 8010fc0:	080148ef 	.word	0x080148ef
 8010fc4:	2501      	movs	r5, #1
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9306      	str	r3, [sp, #24]
 8010fca:	9508      	str	r5, [sp, #32]
 8010fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8010fd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	2312      	movs	r3, #18
 8010fd8:	e7b0      	b.n	8010f3c <_dtoa_r+0x26c>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	9308      	str	r3, [sp, #32]
 8010fde:	e7f5      	b.n	8010fcc <_dtoa_r+0x2fc>
 8010fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fe6:	e7b8      	b.n	8010f5a <_dtoa_r+0x28a>
 8010fe8:	3101      	adds	r1, #1
 8010fea:	6041      	str	r1, [r0, #4]
 8010fec:	0052      	lsls	r2, r2, #1
 8010fee:	e7b8      	b.n	8010f62 <_dtoa_r+0x292>
 8010ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ff2:	9a01      	ldr	r2, [sp, #4]
 8010ff4:	601a      	str	r2, [r3, #0]
 8010ff6:	9b03      	ldr	r3, [sp, #12]
 8010ff8:	2b0e      	cmp	r3, #14
 8010ffa:	f200 809d 	bhi.w	8011138 <_dtoa_r+0x468>
 8010ffe:	2d00      	cmp	r5, #0
 8011000:	f000 809a 	beq.w	8011138 <_dtoa_r+0x468>
 8011004:	9b00      	ldr	r3, [sp, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	dd32      	ble.n	8011070 <_dtoa_r+0x3a0>
 801100a:	4ab7      	ldr	r2, [pc, #732]	; (80112e8 <_dtoa_r+0x618>)
 801100c:	f003 030f 	and.w	r3, r3, #15
 8011010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011018:	9b00      	ldr	r3, [sp, #0]
 801101a:	05d8      	lsls	r0, r3, #23
 801101c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011020:	d516      	bpl.n	8011050 <_dtoa_r+0x380>
 8011022:	4bb2      	ldr	r3, [pc, #712]	; (80112ec <_dtoa_r+0x61c>)
 8011024:	ec51 0b19 	vmov	r0, r1, d9
 8011028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801102c:	f7ef fc1e 	bl	800086c <__aeabi_ddiv>
 8011030:	f007 070f 	and.w	r7, r7, #15
 8011034:	4682      	mov	sl, r0
 8011036:	468b      	mov	fp, r1
 8011038:	2503      	movs	r5, #3
 801103a:	4eac      	ldr	r6, [pc, #688]	; (80112ec <_dtoa_r+0x61c>)
 801103c:	b957      	cbnz	r7, 8011054 <_dtoa_r+0x384>
 801103e:	4642      	mov	r2, r8
 8011040:	464b      	mov	r3, r9
 8011042:	4650      	mov	r0, sl
 8011044:	4659      	mov	r1, fp
 8011046:	f7ef fc11 	bl	800086c <__aeabi_ddiv>
 801104a:	4682      	mov	sl, r0
 801104c:	468b      	mov	fp, r1
 801104e:	e028      	b.n	80110a2 <_dtoa_r+0x3d2>
 8011050:	2502      	movs	r5, #2
 8011052:	e7f2      	b.n	801103a <_dtoa_r+0x36a>
 8011054:	07f9      	lsls	r1, r7, #31
 8011056:	d508      	bpl.n	801106a <_dtoa_r+0x39a>
 8011058:	4640      	mov	r0, r8
 801105a:	4649      	mov	r1, r9
 801105c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011060:	f7ef fada 	bl	8000618 <__aeabi_dmul>
 8011064:	3501      	adds	r5, #1
 8011066:	4680      	mov	r8, r0
 8011068:	4689      	mov	r9, r1
 801106a:	107f      	asrs	r7, r7, #1
 801106c:	3608      	adds	r6, #8
 801106e:	e7e5      	b.n	801103c <_dtoa_r+0x36c>
 8011070:	f000 809b 	beq.w	80111aa <_dtoa_r+0x4da>
 8011074:	9b00      	ldr	r3, [sp, #0]
 8011076:	4f9d      	ldr	r7, [pc, #628]	; (80112ec <_dtoa_r+0x61c>)
 8011078:	425e      	negs	r6, r3
 801107a:	4b9b      	ldr	r3, [pc, #620]	; (80112e8 <_dtoa_r+0x618>)
 801107c:	f006 020f 	and.w	r2, r6, #15
 8011080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011088:	ec51 0b19 	vmov	r0, r1, d9
 801108c:	f7ef fac4 	bl	8000618 <__aeabi_dmul>
 8011090:	1136      	asrs	r6, r6, #4
 8011092:	4682      	mov	sl, r0
 8011094:	468b      	mov	fp, r1
 8011096:	2300      	movs	r3, #0
 8011098:	2502      	movs	r5, #2
 801109a:	2e00      	cmp	r6, #0
 801109c:	d17a      	bne.n	8011194 <_dtoa_r+0x4c4>
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d1d3      	bne.n	801104a <_dtoa_r+0x37a>
 80110a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 8082 	beq.w	80111ae <_dtoa_r+0x4de>
 80110aa:	4b91      	ldr	r3, [pc, #580]	; (80112f0 <_dtoa_r+0x620>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	4650      	mov	r0, sl
 80110b0:	4659      	mov	r1, fp
 80110b2:	f7ef fd23 	bl	8000afc <__aeabi_dcmplt>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d079      	beq.n	80111ae <_dtoa_r+0x4de>
 80110ba:	9b03      	ldr	r3, [sp, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d076      	beq.n	80111ae <_dtoa_r+0x4de>
 80110c0:	9b02      	ldr	r3, [sp, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	dd36      	ble.n	8011134 <_dtoa_r+0x464>
 80110c6:	9b00      	ldr	r3, [sp, #0]
 80110c8:	4650      	mov	r0, sl
 80110ca:	4659      	mov	r1, fp
 80110cc:	1e5f      	subs	r7, r3, #1
 80110ce:	2200      	movs	r2, #0
 80110d0:	4b88      	ldr	r3, [pc, #544]	; (80112f4 <_dtoa_r+0x624>)
 80110d2:	f7ef faa1 	bl	8000618 <__aeabi_dmul>
 80110d6:	9e02      	ldr	r6, [sp, #8]
 80110d8:	4682      	mov	sl, r0
 80110da:	468b      	mov	fp, r1
 80110dc:	3501      	adds	r5, #1
 80110de:	4628      	mov	r0, r5
 80110e0:	f7ef fa30 	bl	8000544 <__aeabi_i2d>
 80110e4:	4652      	mov	r2, sl
 80110e6:	465b      	mov	r3, fp
 80110e8:	f7ef fa96 	bl	8000618 <__aeabi_dmul>
 80110ec:	4b82      	ldr	r3, [pc, #520]	; (80112f8 <_dtoa_r+0x628>)
 80110ee:	2200      	movs	r2, #0
 80110f0:	f7ef f8dc 	bl	80002ac <__adddf3>
 80110f4:	46d0      	mov	r8, sl
 80110f6:	46d9      	mov	r9, fp
 80110f8:	4682      	mov	sl, r0
 80110fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80110fe:	2e00      	cmp	r6, #0
 8011100:	d158      	bne.n	80111b4 <_dtoa_r+0x4e4>
 8011102:	4b7e      	ldr	r3, [pc, #504]	; (80112fc <_dtoa_r+0x62c>)
 8011104:	2200      	movs	r2, #0
 8011106:	4640      	mov	r0, r8
 8011108:	4649      	mov	r1, r9
 801110a:	f7ef f8cd 	bl	80002a8 <__aeabi_dsub>
 801110e:	4652      	mov	r2, sl
 8011110:	465b      	mov	r3, fp
 8011112:	4680      	mov	r8, r0
 8011114:	4689      	mov	r9, r1
 8011116:	f7ef fd0f 	bl	8000b38 <__aeabi_dcmpgt>
 801111a:	2800      	cmp	r0, #0
 801111c:	f040 8295 	bne.w	801164a <_dtoa_r+0x97a>
 8011120:	4652      	mov	r2, sl
 8011122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011126:	4640      	mov	r0, r8
 8011128:	4649      	mov	r1, r9
 801112a:	f7ef fce7 	bl	8000afc <__aeabi_dcmplt>
 801112e:	2800      	cmp	r0, #0
 8011130:	f040 8289 	bne.w	8011646 <_dtoa_r+0x976>
 8011134:	ec5b ab19 	vmov	sl, fp, d9
 8011138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801113a:	2b00      	cmp	r3, #0
 801113c:	f2c0 8148 	blt.w	80113d0 <_dtoa_r+0x700>
 8011140:	9a00      	ldr	r2, [sp, #0]
 8011142:	2a0e      	cmp	r2, #14
 8011144:	f300 8144 	bgt.w	80113d0 <_dtoa_r+0x700>
 8011148:	4b67      	ldr	r3, [pc, #412]	; (80112e8 <_dtoa_r+0x618>)
 801114a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801114e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011154:	2b00      	cmp	r3, #0
 8011156:	f280 80d5 	bge.w	8011304 <_dtoa_r+0x634>
 801115a:	9b03      	ldr	r3, [sp, #12]
 801115c:	2b00      	cmp	r3, #0
 801115e:	f300 80d1 	bgt.w	8011304 <_dtoa_r+0x634>
 8011162:	f040 826f 	bne.w	8011644 <_dtoa_r+0x974>
 8011166:	4b65      	ldr	r3, [pc, #404]	; (80112fc <_dtoa_r+0x62c>)
 8011168:	2200      	movs	r2, #0
 801116a:	4640      	mov	r0, r8
 801116c:	4649      	mov	r1, r9
 801116e:	f7ef fa53 	bl	8000618 <__aeabi_dmul>
 8011172:	4652      	mov	r2, sl
 8011174:	465b      	mov	r3, fp
 8011176:	f7ef fcd5 	bl	8000b24 <__aeabi_dcmpge>
 801117a:	9e03      	ldr	r6, [sp, #12]
 801117c:	4637      	mov	r7, r6
 801117e:	2800      	cmp	r0, #0
 8011180:	f040 8245 	bne.w	801160e <_dtoa_r+0x93e>
 8011184:	9d01      	ldr	r5, [sp, #4]
 8011186:	2331      	movs	r3, #49	; 0x31
 8011188:	f805 3b01 	strb.w	r3, [r5], #1
 801118c:	9b00      	ldr	r3, [sp, #0]
 801118e:	3301      	adds	r3, #1
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	e240      	b.n	8011616 <_dtoa_r+0x946>
 8011194:	07f2      	lsls	r2, r6, #31
 8011196:	d505      	bpl.n	80111a4 <_dtoa_r+0x4d4>
 8011198:	e9d7 2300 	ldrd	r2, r3, [r7]
 801119c:	f7ef fa3c 	bl	8000618 <__aeabi_dmul>
 80111a0:	3501      	adds	r5, #1
 80111a2:	2301      	movs	r3, #1
 80111a4:	1076      	asrs	r6, r6, #1
 80111a6:	3708      	adds	r7, #8
 80111a8:	e777      	b.n	801109a <_dtoa_r+0x3ca>
 80111aa:	2502      	movs	r5, #2
 80111ac:	e779      	b.n	80110a2 <_dtoa_r+0x3d2>
 80111ae:	9f00      	ldr	r7, [sp, #0]
 80111b0:	9e03      	ldr	r6, [sp, #12]
 80111b2:	e794      	b.n	80110de <_dtoa_r+0x40e>
 80111b4:	9901      	ldr	r1, [sp, #4]
 80111b6:	4b4c      	ldr	r3, [pc, #304]	; (80112e8 <_dtoa_r+0x618>)
 80111b8:	4431      	add	r1, r6
 80111ba:	910d      	str	r1, [sp, #52]	; 0x34
 80111bc:	9908      	ldr	r1, [sp, #32]
 80111be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80111c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80111c6:	2900      	cmp	r1, #0
 80111c8:	d043      	beq.n	8011252 <_dtoa_r+0x582>
 80111ca:	494d      	ldr	r1, [pc, #308]	; (8011300 <_dtoa_r+0x630>)
 80111cc:	2000      	movs	r0, #0
 80111ce:	f7ef fb4d 	bl	800086c <__aeabi_ddiv>
 80111d2:	4652      	mov	r2, sl
 80111d4:	465b      	mov	r3, fp
 80111d6:	f7ef f867 	bl	80002a8 <__aeabi_dsub>
 80111da:	9d01      	ldr	r5, [sp, #4]
 80111dc:	4682      	mov	sl, r0
 80111de:	468b      	mov	fp, r1
 80111e0:	4649      	mov	r1, r9
 80111e2:	4640      	mov	r0, r8
 80111e4:	f7ef fcc8 	bl	8000b78 <__aeabi_d2iz>
 80111e8:	4606      	mov	r6, r0
 80111ea:	f7ef f9ab 	bl	8000544 <__aeabi_i2d>
 80111ee:	4602      	mov	r2, r0
 80111f0:	460b      	mov	r3, r1
 80111f2:	4640      	mov	r0, r8
 80111f4:	4649      	mov	r1, r9
 80111f6:	f7ef f857 	bl	80002a8 <__aeabi_dsub>
 80111fa:	3630      	adds	r6, #48	; 0x30
 80111fc:	f805 6b01 	strb.w	r6, [r5], #1
 8011200:	4652      	mov	r2, sl
 8011202:	465b      	mov	r3, fp
 8011204:	4680      	mov	r8, r0
 8011206:	4689      	mov	r9, r1
 8011208:	f7ef fc78 	bl	8000afc <__aeabi_dcmplt>
 801120c:	2800      	cmp	r0, #0
 801120e:	d163      	bne.n	80112d8 <_dtoa_r+0x608>
 8011210:	4642      	mov	r2, r8
 8011212:	464b      	mov	r3, r9
 8011214:	4936      	ldr	r1, [pc, #216]	; (80112f0 <_dtoa_r+0x620>)
 8011216:	2000      	movs	r0, #0
 8011218:	f7ef f846 	bl	80002a8 <__aeabi_dsub>
 801121c:	4652      	mov	r2, sl
 801121e:	465b      	mov	r3, fp
 8011220:	f7ef fc6c 	bl	8000afc <__aeabi_dcmplt>
 8011224:	2800      	cmp	r0, #0
 8011226:	f040 80b5 	bne.w	8011394 <_dtoa_r+0x6c4>
 801122a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801122c:	429d      	cmp	r5, r3
 801122e:	d081      	beq.n	8011134 <_dtoa_r+0x464>
 8011230:	4b30      	ldr	r3, [pc, #192]	; (80112f4 <_dtoa_r+0x624>)
 8011232:	2200      	movs	r2, #0
 8011234:	4650      	mov	r0, sl
 8011236:	4659      	mov	r1, fp
 8011238:	f7ef f9ee 	bl	8000618 <__aeabi_dmul>
 801123c:	4b2d      	ldr	r3, [pc, #180]	; (80112f4 <_dtoa_r+0x624>)
 801123e:	4682      	mov	sl, r0
 8011240:	468b      	mov	fp, r1
 8011242:	4640      	mov	r0, r8
 8011244:	4649      	mov	r1, r9
 8011246:	2200      	movs	r2, #0
 8011248:	f7ef f9e6 	bl	8000618 <__aeabi_dmul>
 801124c:	4680      	mov	r8, r0
 801124e:	4689      	mov	r9, r1
 8011250:	e7c6      	b.n	80111e0 <_dtoa_r+0x510>
 8011252:	4650      	mov	r0, sl
 8011254:	4659      	mov	r1, fp
 8011256:	f7ef f9df 	bl	8000618 <__aeabi_dmul>
 801125a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801125c:	9d01      	ldr	r5, [sp, #4]
 801125e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011260:	4682      	mov	sl, r0
 8011262:	468b      	mov	fp, r1
 8011264:	4649      	mov	r1, r9
 8011266:	4640      	mov	r0, r8
 8011268:	f7ef fc86 	bl	8000b78 <__aeabi_d2iz>
 801126c:	4606      	mov	r6, r0
 801126e:	f7ef f969 	bl	8000544 <__aeabi_i2d>
 8011272:	3630      	adds	r6, #48	; 0x30
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4640      	mov	r0, r8
 801127a:	4649      	mov	r1, r9
 801127c:	f7ef f814 	bl	80002a8 <__aeabi_dsub>
 8011280:	f805 6b01 	strb.w	r6, [r5], #1
 8011284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011286:	429d      	cmp	r5, r3
 8011288:	4680      	mov	r8, r0
 801128a:	4689      	mov	r9, r1
 801128c:	f04f 0200 	mov.w	r2, #0
 8011290:	d124      	bne.n	80112dc <_dtoa_r+0x60c>
 8011292:	4b1b      	ldr	r3, [pc, #108]	; (8011300 <_dtoa_r+0x630>)
 8011294:	4650      	mov	r0, sl
 8011296:	4659      	mov	r1, fp
 8011298:	f7ef f808 	bl	80002ac <__adddf3>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	4640      	mov	r0, r8
 80112a2:	4649      	mov	r1, r9
 80112a4:	f7ef fc48 	bl	8000b38 <__aeabi_dcmpgt>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d173      	bne.n	8011394 <_dtoa_r+0x6c4>
 80112ac:	4652      	mov	r2, sl
 80112ae:	465b      	mov	r3, fp
 80112b0:	4913      	ldr	r1, [pc, #76]	; (8011300 <_dtoa_r+0x630>)
 80112b2:	2000      	movs	r0, #0
 80112b4:	f7ee fff8 	bl	80002a8 <__aeabi_dsub>
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	4640      	mov	r0, r8
 80112be:	4649      	mov	r1, r9
 80112c0:	f7ef fc1c 	bl	8000afc <__aeabi_dcmplt>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	f43f af35 	beq.w	8011134 <_dtoa_r+0x464>
 80112ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80112cc:	1e6b      	subs	r3, r5, #1
 80112ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80112d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112d4:	2b30      	cmp	r3, #48	; 0x30
 80112d6:	d0f8      	beq.n	80112ca <_dtoa_r+0x5fa>
 80112d8:	9700      	str	r7, [sp, #0]
 80112da:	e049      	b.n	8011370 <_dtoa_r+0x6a0>
 80112dc:	4b05      	ldr	r3, [pc, #20]	; (80112f4 <_dtoa_r+0x624>)
 80112de:	f7ef f99b 	bl	8000618 <__aeabi_dmul>
 80112e2:	4680      	mov	r8, r0
 80112e4:	4689      	mov	r9, r1
 80112e6:	e7bd      	b.n	8011264 <_dtoa_r+0x594>
 80112e8:	08014988 	.word	0x08014988
 80112ec:	08014960 	.word	0x08014960
 80112f0:	3ff00000 	.word	0x3ff00000
 80112f4:	40240000 	.word	0x40240000
 80112f8:	401c0000 	.word	0x401c0000
 80112fc:	40140000 	.word	0x40140000
 8011300:	3fe00000 	.word	0x3fe00000
 8011304:	9d01      	ldr	r5, [sp, #4]
 8011306:	4656      	mov	r6, sl
 8011308:	465f      	mov	r7, fp
 801130a:	4642      	mov	r2, r8
 801130c:	464b      	mov	r3, r9
 801130e:	4630      	mov	r0, r6
 8011310:	4639      	mov	r1, r7
 8011312:	f7ef faab 	bl	800086c <__aeabi_ddiv>
 8011316:	f7ef fc2f 	bl	8000b78 <__aeabi_d2iz>
 801131a:	4682      	mov	sl, r0
 801131c:	f7ef f912 	bl	8000544 <__aeabi_i2d>
 8011320:	4642      	mov	r2, r8
 8011322:	464b      	mov	r3, r9
 8011324:	f7ef f978 	bl	8000618 <__aeabi_dmul>
 8011328:	4602      	mov	r2, r0
 801132a:	460b      	mov	r3, r1
 801132c:	4630      	mov	r0, r6
 801132e:	4639      	mov	r1, r7
 8011330:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011334:	f7ee ffb8 	bl	80002a8 <__aeabi_dsub>
 8011338:	f805 6b01 	strb.w	r6, [r5], #1
 801133c:	9e01      	ldr	r6, [sp, #4]
 801133e:	9f03      	ldr	r7, [sp, #12]
 8011340:	1bae      	subs	r6, r5, r6
 8011342:	42b7      	cmp	r7, r6
 8011344:	4602      	mov	r2, r0
 8011346:	460b      	mov	r3, r1
 8011348:	d135      	bne.n	80113b6 <_dtoa_r+0x6e6>
 801134a:	f7ee ffaf 	bl	80002ac <__adddf3>
 801134e:	4642      	mov	r2, r8
 8011350:	464b      	mov	r3, r9
 8011352:	4606      	mov	r6, r0
 8011354:	460f      	mov	r7, r1
 8011356:	f7ef fbef 	bl	8000b38 <__aeabi_dcmpgt>
 801135a:	b9d0      	cbnz	r0, 8011392 <_dtoa_r+0x6c2>
 801135c:	4642      	mov	r2, r8
 801135e:	464b      	mov	r3, r9
 8011360:	4630      	mov	r0, r6
 8011362:	4639      	mov	r1, r7
 8011364:	f7ef fbc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011368:	b110      	cbz	r0, 8011370 <_dtoa_r+0x6a0>
 801136a:	f01a 0f01 	tst.w	sl, #1
 801136e:	d110      	bne.n	8011392 <_dtoa_r+0x6c2>
 8011370:	4620      	mov	r0, r4
 8011372:	ee18 1a10 	vmov	r1, s16
 8011376:	f000 fae5 	bl	8011944 <_Bfree>
 801137a:	2300      	movs	r3, #0
 801137c:	9800      	ldr	r0, [sp, #0]
 801137e:	702b      	strb	r3, [r5, #0]
 8011380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011382:	3001      	adds	r0, #1
 8011384:	6018      	str	r0, [r3, #0]
 8011386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011388:	2b00      	cmp	r3, #0
 801138a:	f43f acf1 	beq.w	8010d70 <_dtoa_r+0xa0>
 801138e:	601d      	str	r5, [r3, #0]
 8011390:	e4ee      	b.n	8010d70 <_dtoa_r+0xa0>
 8011392:	9f00      	ldr	r7, [sp, #0]
 8011394:	462b      	mov	r3, r5
 8011396:	461d      	mov	r5, r3
 8011398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801139c:	2a39      	cmp	r2, #57	; 0x39
 801139e:	d106      	bne.n	80113ae <_dtoa_r+0x6de>
 80113a0:	9a01      	ldr	r2, [sp, #4]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d1f7      	bne.n	8011396 <_dtoa_r+0x6c6>
 80113a6:	9901      	ldr	r1, [sp, #4]
 80113a8:	2230      	movs	r2, #48	; 0x30
 80113aa:	3701      	adds	r7, #1
 80113ac:	700a      	strb	r2, [r1, #0]
 80113ae:	781a      	ldrb	r2, [r3, #0]
 80113b0:	3201      	adds	r2, #1
 80113b2:	701a      	strb	r2, [r3, #0]
 80113b4:	e790      	b.n	80112d8 <_dtoa_r+0x608>
 80113b6:	4ba6      	ldr	r3, [pc, #664]	; (8011650 <_dtoa_r+0x980>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	f7ef f92d 	bl	8000618 <__aeabi_dmul>
 80113be:	2200      	movs	r2, #0
 80113c0:	2300      	movs	r3, #0
 80113c2:	4606      	mov	r6, r0
 80113c4:	460f      	mov	r7, r1
 80113c6:	f7ef fb8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d09d      	beq.n	801130a <_dtoa_r+0x63a>
 80113ce:	e7cf      	b.n	8011370 <_dtoa_r+0x6a0>
 80113d0:	9a08      	ldr	r2, [sp, #32]
 80113d2:	2a00      	cmp	r2, #0
 80113d4:	f000 80d7 	beq.w	8011586 <_dtoa_r+0x8b6>
 80113d8:	9a06      	ldr	r2, [sp, #24]
 80113da:	2a01      	cmp	r2, #1
 80113dc:	f300 80ba 	bgt.w	8011554 <_dtoa_r+0x884>
 80113e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113e2:	2a00      	cmp	r2, #0
 80113e4:	f000 80b2 	beq.w	801154c <_dtoa_r+0x87c>
 80113e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80113ec:	9e07      	ldr	r6, [sp, #28]
 80113ee:	9d04      	ldr	r5, [sp, #16]
 80113f0:	9a04      	ldr	r2, [sp, #16]
 80113f2:	441a      	add	r2, r3
 80113f4:	9204      	str	r2, [sp, #16]
 80113f6:	9a05      	ldr	r2, [sp, #20]
 80113f8:	2101      	movs	r1, #1
 80113fa:	441a      	add	r2, r3
 80113fc:	4620      	mov	r0, r4
 80113fe:	9205      	str	r2, [sp, #20]
 8011400:	f000 fb58 	bl	8011ab4 <__i2b>
 8011404:	4607      	mov	r7, r0
 8011406:	2d00      	cmp	r5, #0
 8011408:	dd0c      	ble.n	8011424 <_dtoa_r+0x754>
 801140a:	9b05      	ldr	r3, [sp, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	dd09      	ble.n	8011424 <_dtoa_r+0x754>
 8011410:	42ab      	cmp	r3, r5
 8011412:	9a04      	ldr	r2, [sp, #16]
 8011414:	bfa8      	it	ge
 8011416:	462b      	movge	r3, r5
 8011418:	1ad2      	subs	r2, r2, r3
 801141a:	9204      	str	r2, [sp, #16]
 801141c:	9a05      	ldr	r2, [sp, #20]
 801141e:	1aed      	subs	r5, r5, r3
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	9b07      	ldr	r3, [sp, #28]
 8011426:	b31b      	cbz	r3, 8011470 <_dtoa_r+0x7a0>
 8011428:	9b08      	ldr	r3, [sp, #32]
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 80af 	beq.w	801158e <_dtoa_r+0x8be>
 8011430:	2e00      	cmp	r6, #0
 8011432:	dd13      	ble.n	801145c <_dtoa_r+0x78c>
 8011434:	4639      	mov	r1, r7
 8011436:	4632      	mov	r2, r6
 8011438:	4620      	mov	r0, r4
 801143a:	f000 fbfb 	bl	8011c34 <__pow5mult>
 801143e:	ee18 2a10 	vmov	r2, s16
 8011442:	4601      	mov	r1, r0
 8011444:	4607      	mov	r7, r0
 8011446:	4620      	mov	r0, r4
 8011448:	f000 fb4a 	bl	8011ae0 <__multiply>
 801144c:	ee18 1a10 	vmov	r1, s16
 8011450:	4680      	mov	r8, r0
 8011452:	4620      	mov	r0, r4
 8011454:	f000 fa76 	bl	8011944 <_Bfree>
 8011458:	ee08 8a10 	vmov	s16, r8
 801145c:	9b07      	ldr	r3, [sp, #28]
 801145e:	1b9a      	subs	r2, r3, r6
 8011460:	d006      	beq.n	8011470 <_dtoa_r+0x7a0>
 8011462:	ee18 1a10 	vmov	r1, s16
 8011466:	4620      	mov	r0, r4
 8011468:	f000 fbe4 	bl	8011c34 <__pow5mult>
 801146c:	ee08 0a10 	vmov	s16, r0
 8011470:	2101      	movs	r1, #1
 8011472:	4620      	mov	r0, r4
 8011474:	f000 fb1e 	bl	8011ab4 <__i2b>
 8011478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801147a:	2b00      	cmp	r3, #0
 801147c:	4606      	mov	r6, r0
 801147e:	f340 8088 	ble.w	8011592 <_dtoa_r+0x8c2>
 8011482:	461a      	mov	r2, r3
 8011484:	4601      	mov	r1, r0
 8011486:	4620      	mov	r0, r4
 8011488:	f000 fbd4 	bl	8011c34 <__pow5mult>
 801148c:	9b06      	ldr	r3, [sp, #24]
 801148e:	2b01      	cmp	r3, #1
 8011490:	4606      	mov	r6, r0
 8011492:	f340 8081 	ble.w	8011598 <_dtoa_r+0x8c8>
 8011496:	f04f 0800 	mov.w	r8, #0
 801149a:	6933      	ldr	r3, [r6, #16]
 801149c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80114a0:	6918      	ldr	r0, [r3, #16]
 80114a2:	f000 fab7 	bl	8011a14 <__hi0bits>
 80114a6:	f1c0 0020 	rsb	r0, r0, #32
 80114aa:	9b05      	ldr	r3, [sp, #20]
 80114ac:	4418      	add	r0, r3
 80114ae:	f010 001f 	ands.w	r0, r0, #31
 80114b2:	f000 8092 	beq.w	80115da <_dtoa_r+0x90a>
 80114b6:	f1c0 0320 	rsb	r3, r0, #32
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	f340 808a 	ble.w	80115d4 <_dtoa_r+0x904>
 80114c0:	f1c0 001c 	rsb	r0, r0, #28
 80114c4:	9b04      	ldr	r3, [sp, #16]
 80114c6:	4403      	add	r3, r0
 80114c8:	9304      	str	r3, [sp, #16]
 80114ca:	9b05      	ldr	r3, [sp, #20]
 80114cc:	4403      	add	r3, r0
 80114ce:	4405      	add	r5, r0
 80114d0:	9305      	str	r3, [sp, #20]
 80114d2:	9b04      	ldr	r3, [sp, #16]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	dd07      	ble.n	80114e8 <_dtoa_r+0x818>
 80114d8:	ee18 1a10 	vmov	r1, s16
 80114dc:	461a      	mov	r2, r3
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 fc02 	bl	8011ce8 <__lshift>
 80114e4:	ee08 0a10 	vmov	s16, r0
 80114e8:	9b05      	ldr	r3, [sp, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd05      	ble.n	80114fa <_dtoa_r+0x82a>
 80114ee:	4631      	mov	r1, r6
 80114f0:	461a      	mov	r2, r3
 80114f2:	4620      	mov	r0, r4
 80114f4:	f000 fbf8 	bl	8011ce8 <__lshift>
 80114f8:	4606      	mov	r6, r0
 80114fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d06e      	beq.n	80115de <_dtoa_r+0x90e>
 8011500:	ee18 0a10 	vmov	r0, s16
 8011504:	4631      	mov	r1, r6
 8011506:	f000 fc5f 	bl	8011dc8 <__mcmp>
 801150a:	2800      	cmp	r0, #0
 801150c:	da67      	bge.n	80115de <_dtoa_r+0x90e>
 801150e:	9b00      	ldr	r3, [sp, #0]
 8011510:	3b01      	subs	r3, #1
 8011512:	ee18 1a10 	vmov	r1, s16
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	220a      	movs	r2, #10
 801151a:	2300      	movs	r3, #0
 801151c:	4620      	mov	r0, r4
 801151e:	f000 fa33 	bl	8011988 <__multadd>
 8011522:	9b08      	ldr	r3, [sp, #32]
 8011524:	ee08 0a10 	vmov	s16, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 81b1 	beq.w	8011890 <_dtoa_r+0xbc0>
 801152e:	2300      	movs	r3, #0
 8011530:	4639      	mov	r1, r7
 8011532:	220a      	movs	r2, #10
 8011534:	4620      	mov	r0, r4
 8011536:	f000 fa27 	bl	8011988 <__multadd>
 801153a:	9b02      	ldr	r3, [sp, #8]
 801153c:	2b00      	cmp	r3, #0
 801153e:	4607      	mov	r7, r0
 8011540:	f300 808e 	bgt.w	8011660 <_dtoa_r+0x990>
 8011544:	9b06      	ldr	r3, [sp, #24]
 8011546:	2b02      	cmp	r3, #2
 8011548:	dc51      	bgt.n	80115ee <_dtoa_r+0x91e>
 801154a:	e089      	b.n	8011660 <_dtoa_r+0x990>
 801154c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801154e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011552:	e74b      	b.n	80113ec <_dtoa_r+0x71c>
 8011554:	9b03      	ldr	r3, [sp, #12]
 8011556:	1e5e      	subs	r6, r3, #1
 8011558:	9b07      	ldr	r3, [sp, #28]
 801155a:	42b3      	cmp	r3, r6
 801155c:	bfbf      	itttt	lt
 801155e:	9b07      	ldrlt	r3, [sp, #28]
 8011560:	9607      	strlt	r6, [sp, #28]
 8011562:	1af2      	sublt	r2, r6, r3
 8011564:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011566:	bfb6      	itet	lt
 8011568:	189b      	addlt	r3, r3, r2
 801156a:	1b9e      	subge	r6, r3, r6
 801156c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	bfb8      	it	lt
 8011572:	2600      	movlt	r6, #0
 8011574:	2b00      	cmp	r3, #0
 8011576:	bfb7      	itett	lt
 8011578:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801157c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011580:	1a9d      	sublt	r5, r3, r2
 8011582:	2300      	movlt	r3, #0
 8011584:	e734      	b.n	80113f0 <_dtoa_r+0x720>
 8011586:	9e07      	ldr	r6, [sp, #28]
 8011588:	9d04      	ldr	r5, [sp, #16]
 801158a:	9f08      	ldr	r7, [sp, #32]
 801158c:	e73b      	b.n	8011406 <_dtoa_r+0x736>
 801158e:	9a07      	ldr	r2, [sp, #28]
 8011590:	e767      	b.n	8011462 <_dtoa_r+0x792>
 8011592:	9b06      	ldr	r3, [sp, #24]
 8011594:	2b01      	cmp	r3, #1
 8011596:	dc18      	bgt.n	80115ca <_dtoa_r+0x8fa>
 8011598:	f1ba 0f00 	cmp.w	sl, #0
 801159c:	d115      	bne.n	80115ca <_dtoa_r+0x8fa>
 801159e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115a2:	b993      	cbnz	r3, 80115ca <_dtoa_r+0x8fa>
 80115a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115a8:	0d1b      	lsrs	r3, r3, #20
 80115aa:	051b      	lsls	r3, r3, #20
 80115ac:	b183      	cbz	r3, 80115d0 <_dtoa_r+0x900>
 80115ae:	9b04      	ldr	r3, [sp, #16]
 80115b0:	3301      	adds	r3, #1
 80115b2:	9304      	str	r3, [sp, #16]
 80115b4:	9b05      	ldr	r3, [sp, #20]
 80115b6:	3301      	adds	r3, #1
 80115b8:	9305      	str	r3, [sp, #20]
 80115ba:	f04f 0801 	mov.w	r8, #1
 80115be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f47f af6a 	bne.w	801149a <_dtoa_r+0x7ca>
 80115c6:	2001      	movs	r0, #1
 80115c8:	e76f      	b.n	80114aa <_dtoa_r+0x7da>
 80115ca:	f04f 0800 	mov.w	r8, #0
 80115ce:	e7f6      	b.n	80115be <_dtoa_r+0x8ee>
 80115d0:	4698      	mov	r8, r3
 80115d2:	e7f4      	b.n	80115be <_dtoa_r+0x8ee>
 80115d4:	f43f af7d 	beq.w	80114d2 <_dtoa_r+0x802>
 80115d8:	4618      	mov	r0, r3
 80115da:	301c      	adds	r0, #28
 80115dc:	e772      	b.n	80114c4 <_dtoa_r+0x7f4>
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	dc37      	bgt.n	8011654 <_dtoa_r+0x984>
 80115e4:	9b06      	ldr	r3, [sp, #24]
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	dd34      	ble.n	8011654 <_dtoa_r+0x984>
 80115ea:	9b03      	ldr	r3, [sp, #12]
 80115ec:	9302      	str	r3, [sp, #8]
 80115ee:	9b02      	ldr	r3, [sp, #8]
 80115f0:	b96b      	cbnz	r3, 801160e <_dtoa_r+0x93e>
 80115f2:	4631      	mov	r1, r6
 80115f4:	2205      	movs	r2, #5
 80115f6:	4620      	mov	r0, r4
 80115f8:	f000 f9c6 	bl	8011988 <__multadd>
 80115fc:	4601      	mov	r1, r0
 80115fe:	4606      	mov	r6, r0
 8011600:	ee18 0a10 	vmov	r0, s16
 8011604:	f000 fbe0 	bl	8011dc8 <__mcmp>
 8011608:	2800      	cmp	r0, #0
 801160a:	f73f adbb 	bgt.w	8011184 <_dtoa_r+0x4b4>
 801160e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011610:	9d01      	ldr	r5, [sp, #4]
 8011612:	43db      	mvns	r3, r3
 8011614:	9300      	str	r3, [sp, #0]
 8011616:	f04f 0800 	mov.w	r8, #0
 801161a:	4631      	mov	r1, r6
 801161c:	4620      	mov	r0, r4
 801161e:	f000 f991 	bl	8011944 <_Bfree>
 8011622:	2f00      	cmp	r7, #0
 8011624:	f43f aea4 	beq.w	8011370 <_dtoa_r+0x6a0>
 8011628:	f1b8 0f00 	cmp.w	r8, #0
 801162c:	d005      	beq.n	801163a <_dtoa_r+0x96a>
 801162e:	45b8      	cmp	r8, r7
 8011630:	d003      	beq.n	801163a <_dtoa_r+0x96a>
 8011632:	4641      	mov	r1, r8
 8011634:	4620      	mov	r0, r4
 8011636:	f000 f985 	bl	8011944 <_Bfree>
 801163a:	4639      	mov	r1, r7
 801163c:	4620      	mov	r0, r4
 801163e:	f000 f981 	bl	8011944 <_Bfree>
 8011642:	e695      	b.n	8011370 <_dtoa_r+0x6a0>
 8011644:	2600      	movs	r6, #0
 8011646:	4637      	mov	r7, r6
 8011648:	e7e1      	b.n	801160e <_dtoa_r+0x93e>
 801164a:	9700      	str	r7, [sp, #0]
 801164c:	4637      	mov	r7, r6
 801164e:	e599      	b.n	8011184 <_dtoa_r+0x4b4>
 8011650:	40240000 	.word	0x40240000
 8011654:	9b08      	ldr	r3, [sp, #32]
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 80ca 	beq.w	80117f0 <_dtoa_r+0xb20>
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	9302      	str	r3, [sp, #8]
 8011660:	2d00      	cmp	r5, #0
 8011662:	dd05      	ble.n	8011670 <_dtoa_r+0x9a0>
 8011664:	4639      	mov	r1, r7
 8011666:	462a      	mov	r2, r5
 8011668:	4620      	mov	r0, r4
 801166a:	f000 fb3d 	bl	8011ce8 <__lshift>
 801166e:	4607      	mov	r7, r0
 8011670:	f1b8 0f00 	cmp.w	r8, #0
 8011674:	d05b      	beq.n	801172e <_dtoa_r+0xa5e>
 8011676:	6879      	ldr	r1, [r7, #4]
 8011678:	4620      	mov	r0, r4
 801167a:	f000 f923 	bl	80118c4 <_Balloc>
 801167e:	4605      	mov	r5, r0
 8011680:	b928      	cbnz	r0, 801168e <_dtoa_r+0x9be>
 8011682:	4b87      	ldr	r3, [pc, #540]	; (80118a0 <_dtoa_r+0xbd0>)
 8011684:	4602      	mov	r2, r0
 8011686:	f240 21ea 	movw	r1, #746	; 0x2ea
 801168a:	f7ff bb3b 	b.w	8010d04 <_dtoa_r+0x34>
 801168e:	693a      	ldr	r2, [r7, #16]
 8011690:	3202      	adds	r2, #2
 8011692:	0092      	lsls	r2, r2, #2
 8011694:	f107 010c 	add.w	r1, r7, #12
 8011698:	300c      	adds	r0, #12
 801169a:	f7fe fdc5 	bl	8010228 <memcpy>
 801169e:	2201      	movs	r2, #1
 80116a0:	4629      	mov	r1, r5
 80116a2:	4620      	mov	r0, r4
 80116a4:	f000 fb20 	bl	8011ce8 <__lshift>
 80116a8:	9b01      	ldr	r3, [sp, #4]
 80116aa:	f103 0901 	add.w	r9, r3, #1
 80116ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80116b2:	4413      	add	r3, r2
 80116b4:	9305      	str	r3, [sp, #20]
 80116b6:	f00a 0301 	and.w	r3, sl, #1
 80116ba:	46b8      	mov	r8, r7
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	4607      	mov	r7, r0
 80116c0:	4631      	mov	r1, r6
 80116c2:	ee18 0a10 	vmov	r0, s16
 80116c6:	f7ff fa76 	bl	8010bb6 <quorem>
 80116ca:	4641      	mov	r1, r8
 80116cc:	9002      	str	r0, [sp, #8]
 80116ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80116d2:	ee18 0a10 	vmov	r0, s16
 80116d6:	f000 fb77 	bl	8011dc8 <__mcmp>
 80116da:	463a      	mov	r2, r7
 80116dc:	9003      	str	r0, [sp, #12]
 80116de:	4631      	mov	r1, r6
 80116e0:	4620      	mov	r0, r4
 80116e2:	f000 fb8d 	bl	8011e00 <__mdiff>
 80116e6:	68c2      	ldr	r2, [r0, #12]
 80116e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80116ec:	4605      	mov	r5, r0
 80116ee:	bb02      	cbnz	r2, 8011732 <_dtoa_r+0xa62>
 80116f0:	4601      	mov	r1, r0
 80116f2:	ee18 0a10 	vmov	r0, s16
 80116f6:	f000 fb67 	bl	8011dc8 <__mcmp>
 80116fa:	4602      	mov	r2, r0
 80116fc:	4629      	mov	r1, r5
 80116fe:	4620      	mov	r0, r4
 8011700:	9207      	str	r2, [sp, #28]
 8011702:	f000 f91f 	bl	8011944 <_Bfree>
 8011706:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801170a:	ea43 0102 	orr.w	r1, r3, r2
 801170e:	9b04      	ldr	r3, [sp, #16]
 8011710:	430b      	orrs	r3, r1
 8011712:	464d      	mov	r5, r9
 8011714:	d10f      	bne.n	8011736 <_dtoa_r+0xa66>
 8011716:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801171a:	d02a      	beq.n	8011772 <_dtoa_r+0xaa2>
 801171c:	9b03      	ldr	r3, [sp, #12]
 801171e:	2b00      	cmp	r3, #0
 8011720:	dd02      	ble.n	8011728 <_dtoa_r+0xa58>
 8011722:	9b02      	ldr	r3, [sp, #8]
 8011724:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011728:	f88b a000 	strb.w	sl, [fp]
 801172c:	e775      	b.n	801161a <_dtoa_r+0x94a>
 801172e:	4638      	mov	r0, r7
 8011730:	e7ba      	b.n	80116a8 <_dtoa_r+0x9d8>
 8011732:	2201      	movs	r2, #1
 8011734:	e7e2      	b.n	80116fc <_dtoa_r+0xa2c>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	2b00      	cmp	r3, #0
 801173a:	db04      	blt.n	8011746 <_dtoa_r+0xa76>
 801173c:	9906      	ldr	r1, [sp, #24]
 801173e:	430b      	orrs	r3, r1
 8011740:	9904      	ldr	r1, [sp, #16]
 8011742:	430b      	orrs	r3, r1
 8011744:	d122      	bne.n	801178c <_dtoa_r+0xabc>
 8011746:	2a00      	cmp	r2, #0
 8011748:	ddee      	ble.n	8011728 <_dtoa_r+0xa58>
 801174a:	ee18 1a10 	vmov	r1, s16
 801174e:	2201      	movs	r2, #1
 8011750:	4620      	mov	r0, r4
 8011752:	f000 fac9 	bl	8011ce8 <__lshift>
 8011756:	4631      	mov	r1, r6
 8011758:	ee08 0a10 	vmov	s16, r0
 801175c:	f000 fb34 	bl	8011dc8 <__mcmp>
 8011760:	2800      	cmp	r0, #0
 8011762:	dc03      	bgt.n	801176c <_dtoa_r+0xa9c>
 8011764:	d1e0      	bne.n	8011728 <_dtoa_r+0xa58>
 8011766:	f01a 0f01 	tst.w	sl, #1
 801176a:	d0dd      	beq.n	8011728 <_dtoa_r+0xa58>
 801176c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011770:	d1d7      	bne.n	8011722 <_dtoa_r+0xa52>
 8011772:	2339      	movs	r3, #57	; 0x39
 8011774:	f88b 3000 	strb.w	r3, [fp]
 8011778:	462b      	mov	r3, r5
 801177a:	461d      	mov	r5, r3
 801177c:	3b01      	subs	r3, #1
 801177e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011782:	2a39      	cmp	r2, #57	; 0x39
 8011784:	d071      	beq.n	801186a <_dtoa_r+0xb9a>
 8011786:	3201      	adds	r2, #1
 8011788:	701a      	strb	r2, [r3, #0]
 801178a:	e746      	b.n	801161a <_dtoa_r+0x94a>
 801178c:	2a00      	cmp	r2, #0
 801178e:	dd07      	ble.n	80117a0 <_dtoa_r+0xad0>
 8011790:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011794:	d0ed      	beq.n	8011772 <_dtoa_r+0xaa2>
 8011796:	f10a 0301 	add.w	r3, sl, #1
 801179a:	f88b 3000 	strb.w	r3, [fp]
 801179e:	e73c      	b.n	801161a <_dtoa_r+0x94a>
 80117a0:	9b05      	ldr	r3, [sp, #20]
 80117a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80117a6:	4599      	cmp	r9, r3
 80117a8:	d047      	beq.n	801183a <_dtoa_r+0xb6a>
 80117aa:	ee18 1a10 	vmov	r1, s16
 80117ae:	2300      	movs	r3, #0
 80117b0:	220a      	movs	r2, #10
 80117b2:	4620      	mov	r0, r4
 80117b4:	f000 f8e8 	bl	8011988 <__multadd>
 80117b8:	45b8      	cmp	r8, r7
 80117ba:	ee08 0a10 	vmov	s16, r0
 80117be:	f04f 0300 	mov.w	r3, #0
 80117c2:	f04f 020a 	mov.w	r2, #10
 80117c6:	4641      	mov	r1, r8
 80117c8:	4620      	mov	r0, r4
 80117ca:	d106      	bne.n	80117da <_dtoa_r+0xb0a>
 80117cc:	f000 f8dc 	bl	8011988 <__multadd>
 80117d0:	4680      	mov	r8, r0
 80117d2:	4607      	mov	r7, r0
 80117d4:	f109 0901 	add.w	r9, r9, #1
 80117d8:	e772      	b.n	80116c0 <_dtoa_r+0x9f0>
 80117da:	f000 f8d5 	bl	8011988 <__multadd>
 80117de:	4639      	mov	r1, r7
 80117e0:	4680      	mov	r8, r0
 80117e2:	2300      	movs	r3, #0
 80117e4:	220a      	movs	r2, #10
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 f8ce 	bl	8011988 <__multadd>
 80117ec:	4607      	mov	r7, r0
 80117ee:	e7f1      	b.n	80117d4 <_dtoa_r+0xb04>
 80117f0:	9b03      	ldr	r3, [sp, #12]
 80117f2:	9302      	str	r3, [sp, #8]
 80117f4:	9d01      	ldr	r5, [sp, #4]
 80117f6:	ee18 0a10 	vmov	r0, s16
 80117fa:	4631      	mov	r1, r6
 80117fc:	f7ff f9db 	bl	8010bb6 <quorem>
 8011800:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011804:	9b01      	ldr	r3, [sp, #4]
 8011806:	f805 ab01 	strb.w	sl, [r5], #1
 801180a:	1aea      	subs	r2, r5, r3
 801180c:	9b02      	ldr	r3, [sp, #8]
 801180e:	4293      	cmp	r3, r2
 8011810:	dd09      	ble.n	8011826 <_dtoa_r+0xb56>
 8011812:	ee18 1a10 	vmov	r1, s16
 8011816:	2300      	movs	r3, #0
 8011818:	220a      	movs	r2, #10
 801181a:	4620      	mov	r0, r4
 801181c:	f000 f8b4 	bl	8011988 <__multadd>
 8011820:	ee08 0a10 	vmov	s16, r0
 8011824:	e7e7      	b.n	80117f6 <_dtoa_r+0xb26>
 8011826:	9b02      	ldr	r3, [sp, #8]
 8011828:	2b00      	cmp	r3, #0
 801182a:	bfc8      	it	gt
 801182c:	461d      	movgt	r5, r3
 801182e:	9b01      	ldr	r3, [sp, #4]
 8011830:	bfd8      	it	le
 8011832:	2501      	movle	r5, #1
 8011834:	441d      	add	r5, r3
 8011836:	f04f 0800 	mov.w	r8, #0
 801183a:	ee18 1a10 	vmov	r1, s16
 801183e:	2201      	movs	r2, #1
 8011840:	4620      	mov	r0, r4
 8011842:	f000 fa51 	bl	8011ce8 <__lshift>
 8011846:	4631      	mov	r1, r6
 8011848:	ee08 0a10 	vmov	s16, r0
 801184c:	f000 fabc 	bl	8011dc8 <__mcmp>
 8011850:	2800      	cmp	r0, #0
 8011852:	dc91      	bgt.n	8011778 <_dtoa_r+0xaa8>
 8011854:	d102      	bne.n	801185c <_dtoa_r+0xb8c>
 8011856:	f01a 0f01 	tst.w	sl, #1
 801185a:	d18d      	bne.n	8011778 <_dtoa_r+0xaa8>
 801185c:	462b      	mov	r3, r5
 801185e:	461d      	mov	r5, r3
 8011860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011864:	2a30      	cmp	r2, #48	; 0x30
 8011866:	d0fa      	beq.n	801185e <_dtoa_r+0xb8e>
 8011868:	e6d7      	b.n	801161a <_dtoa_r+0x94a>
 801186a:	9a01      	ldr	r2, [sp, #4]
 801186c:	429a      	cmp	r2, r3
 801186e:	d184      	bne.n	801177a <_dtoa_r+0xaaa>
 8011870:	9b00      	ldr	r3, [sp, #0]
 8011872:	3301      	adds	r3, #1
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	2331      	movs	r3, #49	; 0x31
 8011878:	7013      	strb	r3, [r2, #0]
 801187a:	e6ce      	b.n	801161a <_dtoa_r+0x94a>
 801187c:	4b09      	ldr	r3, [pc, #36]	; (80118a4 <_dtoa_r+0xbd4>)
 801187e:	f7ff ba95 	b.w	8010dac <_dtoa_r+0xdc>
 8011882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011884:	2b00      	cmp	r3, #0
 8011886:	f47f aa6e 	bne.w	8010d66 <_dtoa_r+0x96>
 801188a:	4b07      	ldr	r3, [pc, #28]	; (80118a8 <_dtoa_r+0xbd8>)
 801188c:	f7ff ba8e 	b.w	8010dac <_dtoa_r+0xdc>
 8011890:	9b02      	ldr	r3, [sp, #8]
 8011892:	2b00      	cmp	r3, #0
 8011894:	dcae      	bgt.n	80117f4 <_dtoa_r+0xb24>
 8011896:	9b06      	ldr	r3, [sp, #24]
 8011898:	2b02      	cmp	r3, #2
 801189a:	f73f aea8 	bgt.w	80115ee <_dtoa_r+0x91e>
 801189e:	e7a9      	b.n	80117f4 <_dtoa_r+0xb24>
 80118a0:	080148ef 	.word	0x080148ef
 80118a4:	0801484c 	.word	0x0801484c
 80118a8:	08014870 	.word	0x08014870

080118ac <_localeconv_r>:
 80118ac:	4800      	ldr	r0, [pc, #0]	; (80118b0 <_localeconv_r+0x4>)
 80118ae:	4770      	bx	lr
 80118b0:	2000016c 	.word	0x2000016c

080118b4 <malloc>:
 80118b4:	4b02      	ldr	r3, [pc, #8]	; (80118c0 <malloc+0xc>)
 80118b6:	4601      	mov	r1, r0
 80118b8:	6818      	ldr	r0, [r3, #0]
 80118ba:	f000 bc09 	b.w	80120d0 <_malloc_r>
 80118be:	bf00      	nop
 80118c0:	20000018 	.word	0x20000018

080118c4 <_Balloc>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80118c8:	4604      	mov	r4, r0
 80118ca:	460d      	mov	r5, r1
 80118cc:	b976      	cbnz	r6, 80118ec <_Balloc+0x28>
 80118ce:	2010      	movs	r0, #16
 80118d0:	f7ff fff0 	bl	80118b4 <malloc>
 80118d4:	4602      	mov	r2, r0
 80118d6:	6260      	str	r0, [r4, #36]	; 0x24
 80118d8:	b920      	cbnz	r0, 80118e4 <_Balloc+0x20>
 80118da:	4b18      	ldr	r3, [pc, #96]	; (801193c <_Balloc+0x78>)
 80118dc:	4818      	ldr	r0, [pc, #96]	; (8011940 <_Balloc+0x7c>)
 80118de:	2166      	movs	r1, #102	; 0x66
 80118e0:	f000 fdd6 	bl	8012490 <__assert_func>
 80118e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118e8:	6006      	str	r6, [r0, #0]
 80118ea:	60c6      	str	r6, [r0, #12]
 80118ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80118ee:	68f3      	ldr	r3, [r6, #12]
 80118f0:	b183      	cbz	r3, 8011914 <_Balloc+0x50>
 80118f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118fa:	b9b8      	cbnz	r0, 801192c <_Balloc+0x68>
 80118fc:	2101      	movs	r1, #1
 80118fe:	fa01 f605 	lsl.w	r6, r1, r5
 8011902:	1d72      	adds	r2, r6, #5
 8011904:	0092      	lsls	r2, r2, #2
 8011906:	4620      	mov	r0, r4
 8011908:	f000 fb60 	bl	8011fcc <_calloc_r>
 801190c:	b160      	cbz	r0, 8011928 <_Balloc+0x64>
 801190e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011912:	e00e      	b.n	8011932 <_Balloc+0x6e>
 8011914:	2221      	movs	r2, #33	; 0x21
 8011916:	2104      	movs	r1, #4
 8011918:	4620      	mov	r0, r4
 801191a:	f000 fb57 	bl	8011fcc <_calloc_r>
 801191e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011920:	60f0      	str	r0, [r6, #12]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1e4      	bne.n	80118f2 <_Balloc+0x2e>
 8011928:	2000      	movs	r0, #0
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	6802      	ldr	r2, [r0, #0]
 801192e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011932:	2300      	movs	r3, #0
 8011934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011938:	e7f7      	b.n	801192a <_Balloc+0x66>
 801193a:	bf00      	nop
 801193c:	0801487d 	.word	0x0801487d
 8011940:	08014900 	.word	0x08014900

08011944 <_Bfree>:
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011948:	4605      	mov	r5, r0
 801194a:	460c      	mov	r4, r1
 801194c:	b976      	cbnz	r6, 801196c <_Bfree+0x28>
 801194e:	2010      	movs	r0, #16
 8011950:	f7ff ffb0 	bl	80118b4 <malloc>
 8011954:	4602      	mov	r2, r0
 8011956:	6268      	str	r0, [r5, #36]	; 0x24
 8011958:	b920      	cbnz	r0, 8011964 <_Bfree+0x20>
 801195a:	4b09      	ldr	r3, [pc, #36]	; (8011980 <_Bfree+0x3c>)
 801195c:	4809      	ldr	r0, [pc, #36]	; (8011984 <_Bfree+0x40>)
 801195e:	218a      	movs	r1, #138	; 0x8a
 8011960:	f000 fd96 	bl	8012490 <__assert_func>
 8011964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011968:	6006      	str	r6, [r0, #0]
 801196a:	60c6      	str	r6, [r0, #12]
 801196c:	b13c      	cbz	r4, 801197e <_Bfree+0x3a>
 801196e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011970:	6862      	ldr	r2, [r4, #4]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011978:	6021      	str	r1, [r4, #0]
 801197a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	0801487d 	.word	0x0801487d
 8011984:	08014900 	.word	0x08014900

08011988 <__multadd>:
 8011988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801198c:	690d      	ldr	r5, [r1, #16]
 801198e:	4607      	mov	r7, r0
 8011990:	460c      	mov	r4, r1
 8011992:	461e      	mov	r6, r3
 8011994:	f101 0c14 	add.w	ip, r1, #20
 8011998:	2000      	movs	r0, #0
 801199a:	f8dc 3000 	ldr.w	r3, [ip]
 801199e:	b299      	uxth	r1, r3
 80119a0:	fb02 6101 	mla	r1, r2, r1, r6
 80119a4:	0c1e      	lsrs	r6, r3, #16
 80119a6:	0c0b      	lsrs	r3, r1, #16
 80119a8:	fb02 3306 	mla	r3, r2, r6, r3
 80119ac:	b289      	uxth	r1, r1
 80119ae:	3001      	adds	r0, #1
 80119b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119b4:	4285      	cmp	r5, r0
 80119b6:	f84c 1b04 	str.w	r1, [ip], #4
 80119ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119be:	dcec      	bgt.n	801199a <__multadd+0x12>
 80119c0:	b30e      	cbz	r6, 8011a06 <__multadd+0x7e>
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	42ab      	cmp	r3, r5
 80119c6:	dc19      	bgt.n	80119fc <__multadd+0x74>
 80119c8:	6861      	ldr	r1, [r4, #4]
 80119ca:	4638      	mov	r0, r7
 80119cc:	3101      	adds	r1, #1
 80119ce:	f7ff ff79 	bl	80118c4 <_Balloc>
 80119d2:	4680      	mov	r8, r0
 80119d4:	b928      	cbnz	r0, 80119e2 <__multadd+0x5a>
 80119d6:	4602      	mov	r2, r0
 80119d8:	4b0c      	ldr	r3, [pc, #48]	; (8011a0c <__multadd+0x84>)
 80119da:	480d      	ldr	r0, [pc, #52]	; (8011a10 <__multadd+0x88>)
 80119dc:	21b5      	movs	r1, #181	; 0xb5
 80119de:	f000 fd57 	bl	8012490 <__assert_func>
 80119e2:	6922      	ldr	r2, [r4, #16]
 80119e4:	3202      	adds	r2, #2
 80119e6:	f104 010c 	add.w	r1, r4, #12
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	300c      	adds	r0, #12
 80119ee:	f7fe fc1b 	bl	8010228 <memcpy>
 80119f2:	4621      	mov	r1, r4
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7ff ffa5 	bl	8011944 <_Bfree>
 80119fa:	4644      	mov	r4, r8
 80119fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a00:	3501      	adds	r5, #1
 8011a02:	615e      	str	r6, [r3, #20]
 8011a04:	6125      	str	r5, [r4, #16]
 8011a06:	4620      	mov	r0, r4
 8011a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0c:	080148ef 	.word	0x080148ef
 8011a10:	08014900 	.word	0x08014900

08011a14 <__hi0bits>:
 8011a14:	0c03      	lsrs	r3, r0, #16
 8011a16:	041b      	lsls	r3, r3, #16
 8011a18:	b9d3      	cbnz	r3, 8011a50 <__hi0bits+0x3c>
 8011a1a:	0400      	lsls	r0, r0, #16
 8011a1c:	2310      	movs	r3, #16
 8011a1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a22:	bf04      	itt	eq
 8011a24:	0200      	lsleq	r0, r0, #8
 8011a26:	3308      	addeq	r3, #8
 8011a28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a2c:	bf04      	itt	eq
 8011a2e:	0100      	lsleq	r0, r0, #4
 8011a30:	3304      	addeq	r3, #4
 8011a32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a36:	bf04      	itt	eq
 8011a38:	0080      	lsleq	r0, r0, #2
 8011a3a:	3302      	addeq	r3, #2
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	db05      	blt.n	8011a4c <__hi0bits+0x38>
 8011a40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011a44:	f103 0301 	add.w	r3, r3, #1
 8011a48:	bf08      	it	eq
 8011a4a:	2320      	moveq	r3, #32
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	4770      	bx	lr
 8011a50:	2300      	movs	r3, #0
 8011a52:	e7e4      	b.n	8011a1e <__hi0bits+0xa>

08011a54 <__lo0bits>:
 8011a54:	6803      	ldr	r3, [r0, #0]
 8011a56:	f013 0207 	ands.w	r2, r3, #7
 8011a5a:	4601      	mov	r1, r0
 8011a5c:	d00b      	beq.n	8011a76 <__lo0bits+0x22>
 8011a5e:	07da      	lsls	r2, r3, #31
 8011a60:	d423      	bmi.n	8011aaa <__lo0bits+0x56>
 8011a62:	0798      	lsls	r0, r3, #30
 8011a64:	bf49      	itett	mi
 8011a66:	085b      	lsrmi	r3, r3, #1
 8011a68:	089b      	lsrpl	r3, r3, #2
 8011a6a:	2001      	movmi	r0, #1
 8011a6c:	600b      	strmi	r3, [r1, #0]
 8011a6e:	bf5c      	itt	pl
 8011a70:	600b      	strpl	r3, [r1, #0]
 8011a72:	2002      	movpl	r0, #2
 8011a74:	4770      	bx	lr
 8011a76:	b298      	uxth	r0, r3
 8011a78:	b9a8      	cbnz	r0, 8011aa6 <__lo0bits+0x52>
 8011a7a:	0c1b      	lsrs	r3, r3, #16
 8011a7c:	2010      	movs	r0, #16
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	b90a      	cbnz	r2, 8011a86 <__lo0bits+0x32>
 8011a82:	3008      	adds	r0, #8
 8011a84:	0a1b      	lsrs	r3, r3, #8
 8011a86:	071a      	lsls	r2, r3, #28
 8011a88:	bf04      	itt	eq
 8011a8a:	091b      	lsreq	r3, r3, #4
 8011a8c:	3004      	addeq	r0, #4
 8011a8e:	079a      	lsls	r2, r3, #30
 8011a90:	bf04      	itt	eq
 8011a92:	089b      	lsreq	r3, r3, #2
 8011a94:	3002      	addeq	r0, #2
 8011a96:	07da      	lsls	r2, r3, #31
 8011a98:	d403      	bmi.n	8011aa2 <__lo0bits+0x4e>
 8011a9a:	085b      	lsrs	r3, r3, #1
 8011a9c:	f100 0001 	add.w	r0, r0, #1
 8011aa0:	d005      	beq.n	8011aae <__lo0bits+0x5a>
 8011aa2:	600b      	str	r3, [r1, #0]
 8011aa4:	4770      	bx	lr
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	e7e9      	b.n	8011a7e <__lo0bits+0x2a>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	4770      	bx	lr
 8011aae:	2020      	movs	r0, #32
 8011ab0:	4770      	bx	lr
	...

08011ab4 <__i2b>:
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	2101      	movs	r1, #1
 8011aba:	f7ff ff03 	bl	80118c4 <_Balloc>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	b928      	cbnz	r0, 8011ace <__i2b+0x1a>
 8011ac2:	4b05      	ldr	r3, [pc, #20]	; (8011ad8 <__i2b+0x24>)
 8011ac4:	4805      	ldr	r0, [pc, #20]	; (8011adc <__i2b+0x28>)
 8011ac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011aca:	f000 fce1 	bl	8012490 <__assert_func>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	6144      	str	r4, [r0, #20]
 8011ad2:	6103      	str	r3, [r0, #16]
 8011ad4:	bd10      	pop	{r4, pc}
 8011ad6:	bf00      	nop
 8011ad8:	080148ef 	.word	0x080148ef
 8011adc:	08014900 	.word	0x08014900

08011ae0 <__multiply>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	4691      	mov	r9, r2
 8011ae6:	690a      	ldr	r2, [r1, #16]
 8011ae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	bfb8      	it	lt
 8011af0:	460b      	movlt	r3, r1
 8011af2:	460c      	mov	r4, r1
 8011af4:	bfbc      	itt	lt
 8011af6:	464c      	movlt	r4, r9
 8011af8:	4699      	movlt	r9, r3
 8011afa:	6927      	ldr	r7, [r4, #16]
 8011afc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011b00:	68a3      	ldr	r3, [r4, #8]
 8011b02:	6861      	ldr	r1, [r4, #4]
 8011b04:	eb07 060a 	add.w	r6, r7, sl
 8011b08:	42b3      	cmp	r3, r6
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	bfb8      	it	lt
 8011b0e:	3101      	addlt	r1, #1
 8011b10:	f7ff fed8 	bl	80118c4 <_Balloc>
 8011b14:	b930      	cbnz	r0, 8011b24 <__multiply+0x44>
 8011b16:	4602      	mov	r2, r0
 8011b18:	4b44      	ldr	r3, [pc, #272]	; (8011c2c <__multiply+0x14c>)
 8011b1a:	4845      	ldr	r0, [pc, #276]	; (8011c30 <__multiply+0x150>)
 8011b1c:	f240 115d 	movw	r1, #349	; 0x15d
 8011b20:	f000 fcb6 	bl	8012490 <__assert_func>
 8011b24:	f100 0514 	add.w	r5, r0, #20
 8011b28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b2c:	462b      	mov	r3, r5
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4543      	cmp	r3, r8
 8011b32:	d321      	bcc.n	8011b78 <__multiply+0x98>
 8011b34:	f104 0314 	add.w	r3, r4, #20
 8011b38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b3c:	f109 0314 	add.w	r3, r9, #20
 8011b40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011b44:	9202      	str	r2, [sp, #8]
 8011b46:	1b3a      	subs	r2, r7, r4
 8011b48:	3a15      	subs	r2, #21
 8011b4a:	f022 0203 	bic.w	r2, r2, #3
 8011b4e:	3204      	adds	r2, #4
 8011b50:	f104 0115 	add.w	r1, r4, #21
 8011b54:	428f      	cmp	r7, r1
 8011b56:	bf38      	it	cc
 8011b58:	2204      	movcc	r2, #4
 8011b5a:	9201      	str	r2, [sp, #4]
 8011b5c:	9a02      	ldr	r2, [sp, #8]
 8011b5e:	9303      	str	r3, [sp, #12]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d80c      	bhi.n	8011b7e <__multiply+0x9e>
 8011b64:	2e00      	cmp	r6, #0
 8011b66:	dd03      	ble.n	8011b70 <__multiply+0x90>
 8011b68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d05a      	beq.n	8011c26 <__multiply+0x146>
 8011b70:	6106      	str	r6, [r0, #16]
 8011b72:	b005      	add	sp, #20
 8011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b78:	f843 2b04 	str.w	r2, [r3], #4
 8011b7c:	e7d8      	b.n	8011b30 <__multiply+0x50>
 8011b7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b82:	f1ba 0f00 	cmp.w	sl, #0
 8011b86:	d024      	beq.n	8011bd2 <__multiply+0xf2>
 8011b88:	f104 0e14 	add.w	lr, r4, #20
 8011b8c:	46a9      	mov	r9, r5
 8011b8e:	f04f 0c00 	mov.w	ip, #0
 8011b92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011b96:	f8d9 1000 	ldr.w	r1, [r9]
 8011b9a:	fa1f fb82 	uxth.w	fp, r2
 8011b9e:	b289      	uxth	r1, r1
 8011ba0:	fb0a 110b 	mla	r1, sl, fp, r1
 8011ba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8011bac:	4461      	add	r1, ip
 8011bae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011bb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8011bb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011bba:	b289      	uxth	r1, r1
 8011bbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011bc0:	4577      	cmp	r7, lr
 8011bc2:	f849 1b04 	str.w	r1, [r9], #4
 8011bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011bca:	d8e2      	bhi.n	8011b92 <__multiply+0xb2>
 8011bcc:	9a01      	ldr	r2, [sp, #4]
 8011bce:	f845 c002 	str.w	ip, [r5, r2]
 8011bd2:	9a03      	ldr	r2, [sp, #12]
 8011bd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	f1b9 0f00 	cmp.w	r9, #0
 8011bde:	d020      	beq.n	8011c22 <__multiply+0x142>
 8011be0:	6829      	ldr	r1, [r5, #0]
 8011be2:	f104 0c14 	add.w	ip, r4, #20
 8011be6:	46ae      	mov	lr, r5
 8011be8:	f04f 0a00 	mov.w	sl, #0
 8011bec:	f8bc b000 	ldrh.w	fp, [ip]
 8011bf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011bf4:	fb09 220b 	mla	r2, r9, fp, r2
 8011bf8:	4492      	add	sl, r2
 8011bfa:	b289      	uxth	r1, r1
 8011bfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011c00:	f84e 1b04 	str.w	r1, [lr], #4
 8011c04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011c08:	f8be 1000 	ldrh.w	r1, [lr]
 8011c0c:	0c12      	lsrs	r2, r2, #16
 8011c0e:	fb09 1102 	mla	r1, r9, r2, r1
 8011c12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011c16:	4567      	cmp	r7, ip
 8011c18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c1c:	d8e6      	bhi.n	8011bec <__multiply+0x10c>
 8011c1e:	9a01      	ldr	r2, [sp, #4]
 8011c20:	50a9      	str	r1, [r5, r2]
 8011c22:	3504      	adds	r5, #4
 8011c24:	e79a      	b.n	8011b5c <__multiply+0x7c>
 8011c26:	3e01      	subs	r6, #1
 8011c28:	e79c      	b.n	8011b64 <__multiply+0x84>
 8011c2a:	bf00      	nop
 8011c2c:	080148ef 	.word	0x080148ef
 8011c30:	08014900 	.word	0x08014900

08011c34 <__pow5mult>:
 8011c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c38:	4615      	mov	r5, r2
 8011c3a:	f012 0203 	ands.w	r2, r2, #3
 8011c3e:	4606      	mov	r6, r0
 8011c40:	460f      	mov	r7, r1
 8011c42:	d007      	beq.n	8011c54 <__pow5mult+0x20>
 8011c44:	4c25      	ldr	r4, [pc, #148]	; (8011cdc <__pow5mult+0xa8>)
 8011c46:	3a01      	subs	r2, #1
 8011c48:	2300      	movs	r3, #0
 8011c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c4e:	f7ff fe9b 	bl	8011988 <__multadd>
 8011c52:	4607      	mov	r7, r0
 8011c54:	10ad      	asrs	r5, r5, #2
 8011c56:	d03d      	beq.n	8011cd4 <__pow5mult+0xa0>
 8011c58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c5a:	b97c      	cbnz	r4, 8011c7c <__pow5mult+0x48>
 8011c5c:	2010      	movs	r0, #16
 8011c5e:	f7ff fe29 	bl	80118b4 <malloc>
 8011c62:	4602      	mov	r2, r0
 8011c64:	6270      	str	r0, [r6, #36]	; 0x24
 8011c66:	b928      	cbnz	r0, 8011c74 <__pow5mult+0x40>
 8011c68:	4b1d      	ldr	r3, [pc, #116]	; (8011ce0 <__pow5mult+0xac>)
 8011c6a:	481e      	ldr	r0, [pc, #120]	; (8011ce4 <__pow5mult+0xb0>)
 8011c6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011c70:	f000 fc0e 	bl	8012490 <__assert_func>
 8011c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c78:	6004      	str	r4, [r0, #0]
 8011c7a:	60c4      	str	r4, [r0, #12]
 8011c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c84:	b94c      	cbnz	r4, 8011c9a <__pow5mult+0x66>
 8011c86:	f240 2171 	movw	r1, #625	; 0x271
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	f7ff ff12 	bl	8011ab4 <__i2b>
 8011c90:	2300      	movs	r3, #0
 8011c92:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c96:	4604      	mov	r4, r0
 8011c98:	6003      	str	r3, [r0, #0]
 8011c9a:	f04f 0900 	mov.w	r9, #0
 8011c9e:	07eb      	lsls	r3, r5, #31
 8011ca0:	d50a      	bpl.n	8011cb8 <__pow5mult+0x84>
 8011ca2:	4639      	mov	r1, r7
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f7ff ff1a 	bl	8011ae0 <__multiply>
 8011cac:	4639      	mov	r1, r7
 8011cae:	4680      	mov	r8, r0
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f7ff fe47 	bl	8011944 <_Bfree>
 8011cb6:	4647      	mov	r7, r8
 8011cb8:	106d      	asrs	r5, r5, #1
 8011cba:	d00b      	beq.n	8011cd4 <__pow5mult+0xa0>
 8011cbc:	6820      	ldr	r0, [r4, #0]
 8011cbe:	b938      	cbnz	r0, 8011cd0 <__pow5mult+0x9c>
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4630      	mov	r0, r6
 8011cc6:	f7ff ff0b 	bl	8011ae0 <__multiply>
 8011cca:	6020      	str	r0, [r4, #0]
 8011ccc:	f8c0 9000 	str.w	r9, [r0]
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	e7e4      	b.n	8011c9e <__pow5mult+0x6a>
 8011cd4:	4638      	mov	r0, r7
 8011cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cda:	bf00      	nop
 8011cdc:	08014a50 	.word	0x08014a50
 8011ce0:	0801487d 	.word	0x0801487d
 8011ce4:	08014900 	.word	0x08014900

08011ce8 <__lshift>:
 8011ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cec:	460c      	mov	r4, r1
 8011cee:	6849      	ldr	r1, [r1, #4]
 8011cf0:	6923      	ldr	r3, [r4, #16]
 8011cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011cf6:	68a3      	ldr	r3, [r4, #8]
 8011cf8:	4607      	mov	r7, r0
 8011cfa:	4691      	mov	r9, r2
 8011cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d00:	f108 0601 	add.w	r6, r8, #1
 8011d04:	42b3      	cmp	r3, r6
 8011d06:	db0b      	blt.n	8011d20 <__lshift+0x38>
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff fddb 	bl	80118c4 <_Balloc>
 8011d0e:	4605      	mov	r5, r0
 8011d10:	b948      	cbnz	r0, 8011d26 <__lshift+0x3e>
 8011d12:	4602      	mov	r2, r0
 8011d14:	4b2a      	ldr	r3, [pc, #168]	; (8011dc0 <__lshift+0xd8>)
 8011d16:	482b      	ldr	r0, [pc, #172]	; (8011dc4 <__lshift+0xdc>)
 8011d18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011d1c:	f000 fbb8 	bl	8012490 <__assert_func>
 8011d20:	3101      	adds	r1, #1
 8011d22:	005b      	lsls	r3, r3, #1
 8011d24:	e7ee      	b.n	8011d04 <__lshift+0x1c>
 8011d26:	2300      	movs	r3, #0
 8011d28:	f100 0114 	add.w	r1, r0, #20
 8011d2c:	f100 0210 	add.w	r2, r0, #16
 8011d30:	4618      	mov	r0, r3
 8011d32:	4553      	cmp	r3, sl
 8011d34:	db37      	blt.n	8011da6 <__lshift+0xbe>
 8011d36:	6920      	ldr	r0, [r4, #16]
 8011d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d3c:	f104 0314 	add.w	r3, r4, #20
 8011d40:	f019 091f 	ands.w	r9, r9, #31
 8011d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011d4c:	d02f      	beq.n	8011dae <__lshift+0xc6>
 8011d4e:	f1c9 0e20 	rsb	lr, r9, #32
 8011d52:	468a      	mov	sl, r1
 8011d54:	f04f 0c00 	mov.w	ip, #0
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	fa02 f209 	lsl.w	r2, r2, r9
 8011d5e:	ea42 020c 	orr.w	r2, r2, ip
 8011d62:	f84a 2b04 	str.w	r2, [sl], #4
 8011d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d6a:	4298      	cmp	r0, r3
 8011d6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011d70:	d8f2      	bhi.n	8011d58 <__lshift+0x70>
 8011d72:	1b03      	subs	r3, r0, r4
 8011d74:	3b15      	subs	r3, #21
 8011d76:	f023 0303 	bic.w	r3, r3, #3
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	f104 0215 	add.w	r2, r4, #21
 8011d80:	4290      	cmp	r0, r2
 8011d82:	bf38      	it	cc
 8011d84:	2304      	movcc	r3, #4
 8011d86:	f841 c003 	str.w	ip, [r1, r3]
 8011d8a:	f1bc 0f00 	cmp.w	ip, #0
 8011d8e:	d001      	beq.n	8011d94 <__lshift+0xac>
 8011d90:	f108 0602 	add.w	r6, r8, #2
 8011d94:	3e01      	subs	r6, #1
 8011d96:	4638      	mov	r0, r7
 8011d98:	612e      	str	r6, [r5, #16]
 8011d9a:	4621      	mov	r1, r4
 8011d9c:	f7ff fdd2 	bl	8011944 <_Bfree>
 8011da0:	4628      	mov	r0, r5
 8011da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8011daa:	3301      	adds	r3, #1
 8011dac:	e7c1      	b.n	8011d32 <__lshift+0x4a>
 8011dae:	3904      	subs	r1, #4
 8011db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8011db8:	4298      	cmp	r0, r3
 8011dba:	d8f9      	bhi.n	8011db0 <__lshift+0xc8>
 8011dbc:	e7ea      	b.n	8011d94 <__lshift+0xac>
 8011dbe:	bf00      	nop
 8011dc0:	080148ef 	.word	0x080148ef
 8011dc4:	08014900 	.word	0x08014900

08011dc8 <__mcmp>:
 8011dc8:	b530      	push	{r4, r5, lr}
 8011dca:	6902      	ldr	r2, [r0, #16]
 8011dcc:	690c      	ldr	r4, [r1, #16]
 8011dce:	1b12      	subs	r2, r2, r4
 8011dd0:	d10e      	bne.n	8011df0 <__mcmp+0x28>
 8011dd2:	f100 0314 	add.w	r3, r0, #20
 8011dd6:	3114      	adds	r1, #20
 8011dd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011de0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011de4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011de8:	42a5      	cmp	r5, r4
 8011dea:	d003      	beq.n	8011df4 <__mcmp+0x2c>
 8011dec:	d305      	bcc.n	8011dfa <__mcmp+0x32>
 8011dee:	2201      	movs	r2, #1
 8011df0:	4610      	mov	r0, r2
 8011df2:	bd30      	pop	{r4, r5, pc}
 8011df4:	4283      	cmp	r3, r0
 8011df6:	d3f3      	bcc.n	8011de0 <__mcmp+0x18>
 8011df8:	e7fa      	b.n	8011df0 <__mcmp+0x28>
 8011dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8011dfe:	e7f7      	b.n	8011df0 <__mcmp+0x28>

08011e00 <__mdiff>:
 8011e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	460c      	mov	r4, r1
 8011e06:	4606      	mov	r6, r0
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	4690      	mov	r8, r2
 8011e0e:	f7ff ffdb 	bl	8011dc8 <__mcmp>
 8011e12:	1e05      	subs	r5, r0, #0
 8011e14:	d110      	bne.n	8011e38 <__mdiff+0x38>
 8011e16:	4629      	mov	r1, r5
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f7ff fd53 	bl	80118c4 <_Balloc>
 8011e1e:	b930      	cbnz	r0, 8011e2e <__mdiff+0x2e>
 8011e20:	4b3a      	ldr	r3, [pc, #232]	; (8011f0c <__mdiff+0x10c>)
 8011e22:	4602      	mov	r2, r0
 8011e24:	f240 2132 	movw	r1, #562	; 0x232
 8011e28:	4839      	ldr	r0, [pc, #228]	; (8011f10 <__mdiff+0x110>)
 8011e2a:	f000 fb31 	bl	8012490 <__assert_func>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e38:	bfa4      	itt	ge
 8011e3a:	4643      	movge	r3, r8
 8011e3c:	46a0      	movge	r8, r4
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e44:	bfa6      	itte	ge
 8011e46:	461c      	movge	r4, r3
 8011e48:	2500      	movge	r5, #0
 8011e4a:	2501      	movlt	r5, #1
 8011e4c:	f7ff fd3a 	bl	80118c4 <_Balloc>
 8011e50:	b920      	cbnz	r0, 8011e5c <__mdiff+0x5c>
 8011e52:	4b2e      	ldr	r3, [pc, #184]	; (8011f0c <__mdiff+0x10c>)
 8011e54:	4602      	mov	r2, r0
 8011e56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011e5a:	e7e5      	b.n	8011e28 <__mdiff+0x28>
 8011e5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e60:	6926      	ldr	r6, [r4, #16]
 8011e62:	60c5      	str	r5, [r0, #12]
 8011e64:	f104 0914 	add.w	r9, r4, #20
 8011e68:	f108 0514 	add.w	r5, r8, #20
 8011e6c:	f100 0e14 	add.w	lr, r0, #20
 8011e70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011e78:	f108 0210 	add.w	r2, r8, #16
 8011e7c:	46f2      	mov	sl, lr
 8011e7e:	2100      	movs	r1, #0
 8011e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e88:	fa1f f883 	uxth.w	r8, r3
 8011e8c:	fa11 f18b 	uxtah	r1, r1, fp
 8011e90:	0c1b      	lsrs	r3, r3, #16
 8011e92:	eba1 0808 	sub.w	r8, r1, r8
 8011e96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e9e:	fa1f f888 	uxth.w	r8, r8
 8011ea2:	1419      	asrs	r1, r3, #16
 8011ea4:	454e      	cmp	r6, r9
 8011ea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011eaa:	f84a 3b04 	str.w	r3, [sl], #4
 8011eae:	d8e7      	bhi.n	8011e80 <__mdiff+0x80>
 8011eb0:	1b33      	subs	r3, r6, r4
 8011eb2:	3b15      	subs	r3, #21
 8011eb4:	f023 0303 	bic.w	r3, r3, #3
 8011eb8:	3304      	adds	r3, #4
 8011eba:	3415      	adds	r4, #21
 8011ebc:	42a6      	cmp	r6, r4
 8011ebe:	bf38      	it	cc
 8011ec0:	2304      	movcc	r3, #4
 8011ec2:	441d      	add	r5, r3
 8011ec4:	4473      	add	r3, lr
 8011ec6:	469e      	mov	lr, r3
 8011ec8:	462e      	mov	r6, r5
 8011eca:	4566      	cmp	r6, ip
 8011ecc:	d30e      	bcc.n	8011eec <__mdiff+0xec>
 8011ece:	f10c 0203 	add.w	r2, ip, #3
 8011ed2:	1b52      	subs	r2, r2, r5
 8011ed4:	f022 0203 	bic.w	r2, r2, #3
 8011ed8:	3d03      	subs	r5, #3
 8011eda:	45ac      	cmp	ip, r5
 8011edc:	bf38      	it	cc
 8011ede:	2200      	movcc	r2, #0
 8011ee0:	441a      	add	r2, r3
 8011ee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011ee6:	b17b      	cbz	r3, 8011f08 <__mdiff+0x108>
 8011ee8:	6107      	str	r7, [r0, #16]
 8011eea:	e7a3      	b.n	8011e34 <__mdiff+0x34>
 8011eec:	f856 8b04 	ldr.w	r8, [r6], #4
 8011ef0:	fa11 f288 	uxtah	r2, r1, r8
 8011ef4:	1414      	asrs	r4, r2, #16
 8011ef6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011efa:	b292      	uxth	r2, r2
 8011efc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011f00:	f84e 2b04 	str.w	r2, [lr], #4
 8011f04:	1421      	asrs	r1, r4, #16
 8011f06:	e7e0      	b.n	8011eca <__mdiff+0xca>
 8011f08:	3f01      	subs	r7, #1
 8011f0a:	e7ea      	b.n	8011ee2 <__mdiff+0xe2>
 8011f0c:	080148ef 	.word	0x080148ef
 8011f10:	08014900 	.word	0x08014900

08011f14 <__d2b>:
 8011f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f18:	4689      	mov	r9, r1
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	ec57 6b10 	vmov	r6, r7, d0
 8011f20:	4690      	mov	r8, r2
 8011f22:	f7ff fccf 	bl	80118c4 <_Balloc>
 8011f26:	4604      	mov	r4, r0
 8011f28:	b930      	cbnz	r0, 8011f38 <__d2b+0x24>
 8011f2a:	4602      	mov	r2, r0
 8011f2c:	4b25      	ldr	r3, [pc, #148]	; (8011fc4 <__d2b+0xb0>)
 8011f2e:	4826      	ldr	r0, [pc, #152]	; (8011fc8 <__d2b+0xb4>)
 8011f30:	f240 310a 	movw	r1, #778	; 0x30a
 8011f34:	f000 faac 	bl	8012490 <__assert_func>
 8011f38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011f3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011f40:	bb35      	cbnz	r5, 8011f90 <__d2b+0x7c>
 8011f42:	2e00      	cmp	r6, #0
 8011f44:	9301      	str	r3, [sp, #4]
 8011f46:	d028      	beq.n	8011f9a <__d2b+0x86>
 8011f48:	4668      	mov	r0, sp
 8011f4a:	9600      	str	r6, [sp, #0]
 8011f4c:	f7ff fd82 	bl	8011a54 <__lo0bits>
 8011f50:	9900      	ldr	r1, [sp, #0]
 8011f52:	b300      	cbz	r0, 8011f96 <__d2b+0x82>
 8011f54:	9a01      	ldr	r2, [sp, #4]
 8011f56:	f1c0 0320 	rsb	r3, r0, #32
 8011f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5e:	430b      	orrs	r3, r1
 8011f60:	40c2      	lsrs	r2, r0
 8011f62:	6163      	str	r3, [r4, #20]
 8011f64:	9201      	str	r2, [sp, #4]
 8011f66:	9b01      	ldr	r3, [sp, #4]
 8011f68:	61a3      	str	r3, [r4, #24]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bf14      	ite	ne
 8011f6e:	2202      	movne	r2, #2
 8011f70:	2201      	moveq	r2, #1
 8011f72:	6122      	str	r2, [r4, #16]
 8011f74:	b1d5      	cbz	r5, 8011fac <__d2b+0x98>
 8011f76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011f7a:	4405      	add	r5, r0
 8011f7c:	f8c9 5000 	str.w	r5, [r9]
 8011f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011f84:	f8c8 0000 	str.w	r0, [r8]
 8011f88:	4620      	mov	r0, r4
 8011f8a:	b003      	add	sp, #12
 8011f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f94:	e7d5      	b.n	8011f42 <__d2b+0x2e>
 8011f96:	6161      	str	r1, [r4, #20]
 8011f98:	e7e5      	b.n	8011f66 <__d2b+0x52>
 8011f9a:	a801      	add	r0, sp, #4
 8011f9c:	f7ff fd5a 	bl	8011a54 <__lo0bits>
 8011fa0:	9b01      	ldr	r3, [sp, #4]
 8011fa2:	6163      	str	r3, [r4, #20]
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	6122      	str	r2, [r4, #16]
 8011fa8:	3020      	adds	r0, #32
 8011faa:	e7e3      	b.n	8011f74 <__d2b+0x60>
 8011fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fb4:	f8c9 0000 	str.w	r0, [r9]
 8011fb8:	6918      	ldr	r0, [r3, #16]
 8011fba:	f7ff fd2b 	bl	8011a14 <__hi0bits>
 8011fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011fc2:	e7df      	b.n	8011f84 <__d2b+0x70>
 8011fc4:	080148ef 	.word	0x080148ef
 8011fc8:	08014900 	.word	0x08014900

08011fcc <_calloc_r>:
 8011fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fce:	fba1 2402 	umull	r2, r4, r1, r2
 8011fd2:	b94c      	cbnz	r4, 8011fe8 <_calloc_r+0x1c>
 8011fd4:	4611      	mov	r1, r2
 8011fd6:	9201      	str	r2, [sp, #4]
 8011fd8:	f000 f87a 	bl	80120d0 <_malloc_r>
 8011fdc:	9a01      	ldr	r2, [sp, #4]
 8011fde:	4605      	mov	r5, r0
 8011fe0:	b930      	cbnz	r0, 8011ff0 <_calloc_r+0x24>
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	b003      	add	sp, #12
 8011fe6:	bd30      	pop	{r4, r5, pc}
 8011fe8:	220c      	movs	r2, #12
 8011fea:	6002      	str	r2, [r0, #0]
 8011fec:	2500      	movs	r5, #0
 8011fee:	e7f8      	b.n	8011fe2 <_calloc_r+0x16>
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	f7fe f927 	bl	8010244 <memset>
 8011ff6:	e7f4      	b.n	8011fe2 <_calloc_r+0x16>

08011ff8 <_free_r>:
 8011ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ffa:	2900      	cmp	r1, #0
 8011ffc:	d044      	beq.n	8012088 <_free_r+0x90>
 8011ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012002:	9001      	str	r0, [sp, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	f1a1 0404 	sub.w	r4, r1, #4
 801200a:	bfb8      	it	lt
 801200c:	18e4      	addlt	r4, r4, r3
 801200e:	f000 fa9b 	bl	8012548 <__malloc_lock>
 8012012:	4a1e      	ldr	r2, [pc, #120]	; (801208c <_free_r+0x94>)
 8012014:	9801      	ldr	r0, [sp, #4]
 8012016:	6813      	ldr	r3, [r2, #0]
 8012018:	b933      	cbnz	r3, 8012028 <_free_r+0x30>
 801201a:	6063      	str	r3, [r4, #4]
 801201c:	6014      	str	r4, [r2, #0]
 801201e:	b003      	add	sp, #12
 8012020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012024:	f000 ba96 	b.w	8012554 <__malloc_unlock>
 8012028:	42a3      	cmp	r3, r4
 801202a:	d908      	bls.n	801203e <_free_r+0x46>
 801202c:	6825      	ldr	r5, [r4, #0]
 801202e:	1961      	adds	r1, r4, r5
 8012030:	428b      	cmp	r3, r1
 8012032:	bf01      	itttt	eq
 8012034:	6819      	ldreq	r1, [r3, #0]
 8012036:	685b      	ldreq	r3, [r3, #4]
 8012038:	1949      	addeq	r1, r1, r5
 801203a:	6021      	streq	r1, [r4, #0]
 801203c:	e7ed      	b.n	801201a <_free_r+0x22>
 801203e:	461a      	mov	r2, r3
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	b10b      	cbz	r3, 8012048 <_free_r+0x50>
 8012044:	42a3      	cmp	r3, r4
 8012046:	d9fa      	bls.n	801203e <_free_r+0x46>
 8012048:	6811      	ldr	r1, [r2, #0]
 801204a:	1855      	adds	r5, r2, r1
 801204c:	42a5      	cmp	r5, r4
 801204e:	d10b      	bne.n	8012068 <_free_r+0x70>
 8012050:	6824      	ldr	r4, [r4, #0]
 8012052:	4421      	add	r1, r4
 8012054:	1854      	adds	r4, r2, r1
 8012056:	42a3      	cmp	r3, r4
 8012058:	6011      	str	r1, [r2, #0]
 801205a:	d1e0      	bne.n	801201e <_free_r+0x26>
 801205c:	681c      	ldr	r4, [r3, #0]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	6053      	str	r3, [r2, #4]
 8012062:	4421      	add	r1, r4
 8012064:	6011      	str	r1, [r2, #0]
 8012066:	e7da      	b.n	801201e <_free_r+0x26>
 8012068:	d902      	bls.n	8012070 <_free_r+0x78>
 801206a:	230c      	movs	r3, #12
 801206c:	6003      	str	r3, [r0, #0]
 801206e:	e7d6      	b.n	801201e <_free_r+0x26>
 8012070:	6825      	ldr	r5, [r4, #0]
 8012072:	1961      	adds	r1, r4, r5
 8012074:	428b      	cmp	r3, r1
 8012076:	bf04      	itt	eq
 8012078:	6819      	ldreq	r1, [r3, #0]
 801207a:	685b      	ldreq	r3, [r3, #4]
 801207c:	6063      	str	r3, [r4, #4]
 801207e:	bf04      	itt	eq
 8012080:	1949      	addeq	r1, r1, r5
 8012082:	6021      	streq	r1, [r4, #0]
 8012084:	6054      	str	r4, [r2, #4]
 8012086:	e7ca      	b.n	801201e <_free_r+0x26>
 8012088:	b003      	add	sp, #12
 801208a:	bd30      	pop	{r4, r5, pc}
 801208c:	20005758 	.word	0x20005758

08012090 <sbrk_aligned>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	4e0e      	ldr	r6, [pc, #56]	; (80120cc <sbrk_aligned+0x3c>)
 8012094:	460c      	mov	r4, r1
 8012096:	6831      	ldr	r1, [r6, #0]
 8012098:	4605      	mov	r5, r0
 801209a:	b911      	cbnz	r1, 80120a2 <sbrk_aligned+0x12>
 801209c:	f000 f9e8 	bl	8012470 <_sbrk_r>
 80120a0:	6030      	str	r0, [r6, #0]
 80120a2:	4621      	mov	r1, r4
 80120a4:	4628      	mov	r0, r5
 80120a6:	f000 f9e3 	bl	8012470 <_sbrk_r>
 80120aa:	1c43      	adds	r3, r0, #1
 80120ac:	d00a      	beq.n	80120c4 <sbrk_aligned+0x34>
 80120ae:	1cc4      	adds	r4, r0, #3
 80120b0:	f024 0403 	bic.w	r4, r4, #3
 80120b4:	42a0      	cmp	r0, r4
 80120b6:	d007      	beq.n	80120c8 <sbrk_aligned+0x38>
 80120b8:	1a21      	subs	r1, r4, r0
 80120ba:	4628      	mov	r0, r5
 80120bc:	f000 f9d8 	bl	8012470 <_sbrk_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	d101      	bne.n	80120c8 <sbrk_aligned+0x38>
 80120c4:	f04f 34ff 	mov.w	r4, #4294967295
 80120c8:	4620      	mov	r0, r4
 80120ca:	bd70      	pop	{r4, r5, r6, pc}
 80120cc:	2000575c 	.word	0x2000575c

080120d0 <_malloc_r>:
 80120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	1ccd      	adds	r5, r1, #3
 80120d6:	f025 0503 	bic.w	r5, r5, #3
 80120da:	3508      	adds	r5, #8
 80120dc:	2d0c      	cmp	r5, #12
 80120de:	bf38      	it	cc
 80120e0:	250c      	movcc	r5, #12
 80120e2:	2d00      	cmp	r5, #0
 80120e4:	4607      	mov	r7, r0
 80120e6:	db01      	blt.n	80120ec <_malloc_r+0x1c>
 80120e8:	42a9      	cmp	r1, r5
 80120ea:	d905      	bls.n	80120f8 <_malloc_r+0x28>
 80120ec:	230c      	movs	r3, #12
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	2600      	movs	r6, #0
 80120f2:	4630      	mov	r0, r6
 80120f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f8:	4e2e      	ldr	r6, [pc, #184]	; (80121b4 <_malloc_r+0xe4>)
 80120fa:	f000 fa25 	bl	8012548 <__malloc_lock>
 80120fe:	6833      	ldr	r3, [r6, #0]
 8012100:	461c      	mov	r4, r3
 8012102:	bb34      	cbnz	r4, 8012152 <_malloc_r+0x82>
 8012104:	4629      	mov	r1, r5
 8012106:	4638      	mov	r0, r7
 8012108:	f7ff ffc2 	bl	8012090 <sbrk_aligned>
 801210c:	1c43      	adds	r3, r0, #1
 801210e:	4604      	mov	r4, r0
 8012110:	d14d      	bne.n	80121ae <_malloc_r+0xde>
 8012112:	6834      	ldr	r4, [r6, #0]
 8012114:	4626      	mov	r6, r4
 8012116:	2e00      	cmp	r6, #0
 8012118:	d140      	bne.n	801219c <_malloc_r+0xcc>
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	4631      	mov	r1, r6
 801211e:	4638      	mov	r0, r7
 8012120:	eb04 0803 	add.w	r8, r4, r3
 8012124:	f000 f9a4 	bl	8012470 <_sbrk_r>
 8012128:	4580      	cmp	r8, r0
 801212a:	d13a      	bne.n	80121a2 <_malloc_r+0xd2>
 801212c:	6821      	ldr	r1, [r4, #0]
 801212e:	3503      	adds	r5, #3
 8012130:	1a6d      	subs	r5, r5, r1
 8012132:	f025 0503 	bic.w	r5, r5, #3
 8012136:	3508      	adds	r5, #8
 8012138:	2d0c      	cmp	r5, #12
 801213a:	bf38      	it	cc
 801213c:	250c      	movcc	r5, #12
 801213e:	4629      	mov	r1, r5
 8012140:	4638      	mov	r0, r7
 8012142:	f7ff ffa5 	bl	8012090 <sbrk_aligned>
 8012146:	3001      	adds	r0, #1
 8012148:	d02b      	beq.n	80121a2 <_malloc_r+0xd2>
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	442b      	add	r3, r5
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	e00e      	b.n	8012170 <_malloc_r+0xa0>
 8012152:	6822      	ldr	r2, [r4, #0]
 8012154:	1b52      	subs	r2, r2, r5
 8012156:	d41e      	bmi.n	8012196 <_malloc_r+0xc6>
 8012158:	2a0b      	cmp	r2, #11
 801215a:	d916      	bls.n	801218a <_malloc_r+0xba>
 801215c:	1961      	adds	r1, r4, r5
 801215e:	42a3      	cmp	r3, r4
 8012160:	6025      	str	r5, [r4, #0]
 8012162:	bf18      	it	ne
 8012164:	6059      	strne	r1, [r3, #4]
 8012166:	6863      	ldr	r3, [r4, #4]
 8012168:	bf08      	it	eq
 801216a:	6031      	streq	r1, [r6, #0]
 801216c:	5162      	str	r2, [r4, r5]
 801216e:	604b      	str	r3, [r1, #4]
 8012170:	4638      	mov	r0, r7
 8012172:	f104 060b 	add.w	r6, r4, #11
 8012176:	f000 f9ed 	bl	8012554 <__malloc_unlock>
 801217a:	f026 0607 	bic.w	r6, r6, #7
 801217e:	1d23      	adds	r3, r4, #4
 8012180:	1af2      	subs	r2, r6, r3
 8012182:	d0b6      	beq.n	80120f2 <_malloc_r+0x22>
 8012184:	1b9b      	subs	r3, r3, r6
 8012186:	50a3      	str	r3, [r4, r2]
 8012188:	e7b3      	b.n	80120f2 <_malloc_r+0x22>
 801218a:	6862      	ldr	r2, [r4, #4]
 801218c:	42a3      	cmp	r3, r4
 801218e:	bf0c      	ite	eq
 8012190:	6032      	streq	r2, [r6, #0]
 8012192:	605a      	strne	r2, [r3, #4]
 8012194:	e7ec      	b.n	8012170 <_malloc_r+0xa0>
 8012196:	4623      	mov	r3, r4
 8012198:	6864      	ldr	r4, [r4, #4]
 801219a:	e7b2      	b.n	8012102 <_malloc_r+0x32>
 801219c:	4634      	mov	r4, r6
 801219e:	6876      	ldr	r6, [r6, #4]
 80121a0:	e7b9      	b.n	8012116 <_malloc_r+0x46>
 80121a2:	230c      	movs	r3, #12
 80121a4:	603b      	str	r3, [r7, #0]
 80121a6:	4638      	mov	r0, r7
 80121a8:	f000 f9d4 	bl	8012554 <__malloc_unlock>
 80121ac:	e7a1      	b.n	80120f2 <_malloc_r+0x22>
 80121ae:	6025      	str	r5, [r4, #0]
 80121b0:	e7de      	b.n	8012170 <_malloc_r+0xa0>
 80121b2:	bf00      	nop
 80121b4:	20005758 	.word	0x20005758

080121b8 <__ssputs_r>:
 80121b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121bc:	688e      	ldr	r6, [r1, #8]
 80121be:	429e      	cmp	r6, r3
 80121c0:	4682      	mov	sl, r0
 80121c2:	460c      	mov	r4, r1
 80121c4:	4690      	mov	r8, r2
 80121c6:	461f      	mov	r7, r3
 80121c8:	d838      	bhi.n	801223c <__ssputs_r+0x84>
 80121ca:	898a      	ldrh	r2, [r1, #12]
 80121cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121d0:	d032      	beq.n	8012238 <__ssputs_r+0x80>
 80121d2:	6825      	ldr	r5, [r4, #0]
 80121d4:	6909      	ldr	r1, [r1, #16]
 80121d6:	eba5 0901 	sub.w	r9, r5, r1
 80121da:	6965      	ldr	r5, [r4, #20]
 80121dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121e4:	3301      	adds	r3, #1
 80121e6:	444b      	add	r3, r9
 80121e8:	106d      	asrs	r5, r5, #1
 80121ea:	429d      	cmp	r5, r3
 80121ec:	bf38      	it	cc
 80121ee:	461d      	movcc	r5, r3
 80121f0:	0553      	lsls	r3, r2, #21
 80121f2:	d531      	bpl.n	8012258 <__ssputs_r+0xa0>
 80121f4:	4629      	mov	r1, r5
 80121f6:	f7ff ff6b 	bl	80120d0 <_malloc_r>
 80121fa:	4606      	mov	r6, r0
 80121fc:	b950      	cbnz	r0, 8012214 <__ssputs_r+0x5c>
 80121fe:	230c      	movs	r3, #12
 8012200:	f8ca 3000 	str.w	r3, [sl]
 8012204:	89a3      	ldrh	r3, [r4, #12]
 8012206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801220a:	81a3      	strh	r3, [r4, #12]
 801220c:	f04f 30ff 	mov.w	r0, #4294967295
 8012210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012214:	6921      	ldr	r1, [r4, #16]
 8012216:	464a      	mov	r2, r9
 8012218:	f7fe f806 	bl	8010228 <memcpy>
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012226:	81a3      	strh	r3, [r4, #12]
 8012228:	6126      	str	r6, [r4, #16]
 801222a:	6165      	str	r5, [r4, #20]
 801222c:	444e      	add	r6, r9
 801222e:	eba5 0509 	sub.w	r5, r5, r9
 8012232:	6026      	str	r6, [r4, #0]
 8012234:	60a5      	str	r5, [r4, #8]
 8012236:	463e      	mov	r6, r7
 8012238:	42be      	cmp	r6, r7
 801223a:	d900      	bls.n	801223e <__ssputs_r+0x86>
 801223c:	463e      	mov	r6, r7
 801223e:	6820      	ldr	r0, [r4, #0]
 8012240:	4632      	mov	r2, r6
 8012242:	4641      	mov	r1, r8
 8012244:	f000 f966 	bl	8012514 <memmove>
 8012248:	68a3      	ldr	r3, [r4, #8]
 801224a:	1b9b      	subs	r3, r3, r6
 801224c:	60a3      	str	r3, [r4, #8]
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	4433      	add	r3, r6
 8012252:	6023      	str	r3, [r4, #0]
 8012254:	2000      	movs	r0, #0
 8012256:	e7db      	b.n	8012210 <__ssputs_r+0x58>
 8012258:	462a      	mov	r2, r5
 801225a:	f000 f981 	bl	8012560 <_realloc_r>
 801225e:	4606      	mov	r6, r0
 8012260:	2800      	cmp	r0, #0
 8012262:	d1e1      	bne.n	8012228 <__ssputs_r+0x70>
 8012264:	6921      	ldr	r1, [r4, #16]
 8012266:	4650      	mov	r0, sl
 8012268:	f7ff fec6 	bl	8011ff8 <_free_r>
 801226c:	e7c7      	b.n	80121fe <__ssputs_r+0x46>
	...

08012270 <_svfiprintf_r>:
 8012270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	4698      	mov	r8, r3
 8012276:	898b      	ldrh	r3, [r1, #12]
 8012278:	061b      	lsls	r3, r3, #24
 801227a:	b09d      	sub	sp, #116	; 0x74
 801227c:	4607      	mov	r7, r0
 801227e:	460d      	mov	r5, r1
 8012280:	4614      	mov	r4, r2
 8012282:	d50e      	bpl.n	80122a2 <_svfiprintf_r+0x32>
 8012284:	690b      	ldr	r3, [r1, #16]
 8012286:	b963      	cbnz	r3, 80122a2 <_svfiprintf_r+0x32>
 8012288:	2140      	movs	r1, #64	; 0x40
 801228a:	f7ff ff21 	bl	80120d0 <_malloc_r>
 801228e:	6028      	str	r0, [r5, #0]
 8012290:	6128      	str	r0, [r5, #16]
 8012292:	b920      	cbnz	r0, 801229e <_svfiprintf_r+0x2e>
 8012294:	230c      	movs	r3, #12
 8012296:	603b      	str	r3, [r7, #0]
 8012298:	f04f 30ff 	mov.w	r0, #4294967295
 801229c:	e0d1      	b.n	8012442 <_svfiprintf_r+0x1d2>
 801229e:	2340      	movs	r3, #64	; 0x40
 80122a0:	616b      	str	r3, [r5, #20]
 80122a2:	2300      	movs	r3, #0
 80122a4:	9309      	str	r3, [sp, #36]	; 0x24
 80122a6:	2320      	movs	r3, #32
 80122a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80122b0:	2330      	movs	r3, #48	; 0x30
 80122b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801245c <_svfiprintf_r+0x1ec>
 80122b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122ba:	f04f 0901 	mov.w	r9, #1
 80122be:	4623      	mov	r3, r4
 80122c0:	469a      	mov	sl, r3
 80122c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122c6:	b10a      	cbz	r2, 80122cc <_svfiprintf_r+0x5c>
 80122c8:	2a25      	cmp	r2, #37	; 0x25
 80122ca:	d1f9      	bne.n	80122c0 <_svfiprintf_r+0x50>
 80122cc:	ebba 0b04 	subs.w	fp, sl, r4
 80122d0:	d00b      	beq.n	80122ea <_svfiprintf_r+0x7a>
 80122d2:	465b      	mov	r3, fp
 80122d4:	4622      	mov	r2, r4
 80122d6:	4629      	mov	r1, r5
 80122d8:	4638      	mov	r0, r7
 80122da:	f7ff ff6d 	bl	80121b8 <__ssputs_r>
 80122de:	3001      	adds	r0, #1
 80122e0:	f000 80aa 	beq.w	8012438 <_svfiprintf_r+0x1c8>
 80122e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122e6:	445a      	add	r2, fp
 80122e8:	9209      	str	r2, [sp, #36]	; 0x24
 80122ea:	f89a 3000 	ldrb.w	r3, [sl]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 80a2 	beq.w	8012438 <_svfiprintf_r+0x1c8>
 80122f4:	2300      	movs	r3, #0
 80122f6:	f04f 32ff 	mov.w	r2, #4294967295
 80122fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122fe:	f10a 0a01 	add.w	sl, sl, #1
 8012302:	9304      	str	r3, [sp, #16]
 8012304:	9307      	str	r3, [sp, #28]
 8012306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801230a:	931a      	str	r3, [sp, #104]	; 0x68
 801230c:	4654      	mov	r4, sl
 801230e:	2205      	movs	r2, #5
 8012310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012314:	4851      	ldr	r0, [pc, #324]	; (801245c <_svfiprintf_r+0x1ec>)
 8012316:	f7ed ff73 	bl	8000200 <memchr>
 801231a:	9a04      	ldr	r2, [sp, #16]
 801231c:	b9d8      	cbnz	r0, 8012356 <_svfiprintf_r+0xe6>
 801231e:	06d0      	lsls	r0, r2, #27
 8012320:	bf44      	itt	mi
 8012322:	2320      	movmi	r3, #32
 8012324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012328:	0711      	lsls	r1, r2, #28
 801232a:	bf44      	itt	mi
 801232c:	232b      	movmi	r3, #43	; 0x2b
 801232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012332:	f89a 3000 	ldrb.w	r3, [sl]
 8012336:	2b2a      	cmp	r3, #42	; 0x2a
 8012338:	d015      	beq.n	8012366 <_svfiprintf_r+0xf6>
 801233a:	9a07      	ldr	r2, [sp, #28]
 801233c:	4654      	mov	r4, sl
 801233e:	2000      	movs	r0, #0
 8012340:	f04f 0c0a 	mov.w	ip, #10
 8012344:	4621      	mov	r1, r4
 8012346:	f811 3b01 	ldrb.w	r3, [r1], #1
 801234a:	3b30      	subs	r3, #48	; 0x30
 801234c:	2b09      	cmp	r3, #9
 801234e:	d94e      	bls.n	80123ee <_svfiprintf_r+0x17e>
 8012350:	b1b0      	cbz	r0, 8012380 <_svfiprintf_r+0x110>
 8012352:	9207      	str	r2, [sp, #28]
 8012354:	e014      	b.n	8012380 <_svfiprintf_r+0x110>
 8012356:	eba0 0308 	sub.w	r3, r0, r8
 801235a:	fa09 f303 	lsl.w	r3, r9, r3
 801235e:	4313      	orrs	r3, r2
 8012360:	9304      	str	r3, [sp, #16]
 8012362:	46a2      	mov	sl, r4
 8012364:	e7d2      	b.n	801230c <_svfiprintf_r+0x9c>
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	1d19      	adds	r1, r3, #4
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	9103      	str	r1, [sp, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	bfbb      	ittet	lt
 8012372:	425b      	neglt	r3, r3
 8012374:	f042 0202 	orrlt.w	r2, r2, #2
 8012378:	9307      	strge	r3, [sp, #28]
 801237a:	9307      	strlt	r3, [sp, #28]
 801237c:	bfb8      	it	lt
 801237e:	9204      	strlt	r2, [sp, #16]
 8012380:	7823      	ldrb	r3, [r4, #0]
 8012382:	2b2e      	cmp	r3, #46	; 0x2e
 8012384:	d10c      	bne.n	80123a0 <_svfiprintf_r+0x130>
 8012386:	7863      	ldrb	r3, [r4, #1]
 8012388:	2b2a      	cmp	r3, #42	; 0x2a
 801238a:	d135      	bne.n	80123f8 <_svfiprintf_r+0x188>
 801238c:	9b03      	ldr	r3, [sp, #12]
 801238e:	1d1a      	adds	r2, r3, #4
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	9203      	str	r2, [sp, #12]
 8012394:	2b00      	cmp	r3, #0
 8012396:	bfb8      	it	lt
 8012398:	f04f 33ff 	movlt.w	r3, #4294967295
 801239c:	3402      	adds	r4, #2
 801239e:	9305      	str	r3, [sp, #20]
 80123a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801246c <_svfiprintf_r+0x1fc>
 80123a4:	7821      	ldrb	r1, [r4, #0]
 80123a6:	2203      	movs	r2, #3
 80123a8:	4650      	mov	r0, sl
 80123aa:	f7ed ff29 	bl	8000200 <memchr>
 80123ae:	b140      	cbz	r0, 80123c2 <_svfiprintf_r+0x152>
 80123b0:	2340      	movs	r3, #64	; 0x40
 80123b2:	eba0 000a 	sub.w	r0, r0, sl
 80123b6:	fa03 f000 	lsl.w	r0, r3, r0
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	4303      	orrs	r3, r0
 80123be:	3401      	adds	r4, #1
 80123c0:	9304      	str	r3, [sp, #16]
 80123c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123c6:	4826      	ldr	r0, [pc, #152]	; (8012460 <_svfiprintf_r+0x1f0>)
 80123c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123cc:	2206      	movs	r2, #6
 80123ce:	f7ed ff17 	bl	8000200 <memchr>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d038      	beq.n	8012448 <_svfiprintf_r+0x1d8>
 80123d6:	4b23      	ldr	r3, [pc, #140]	; (8012464 <_svfiprintf_r+0x1f4>)
 80123d8:	bb1b      	cbnz	r3, 8012422 <_svfiprintf_r+0x1b2>
 80123da:	9b03      	ldr	r3, [sp, #12]
 80123dc:	3307      	adds	r3, #7
 80123de:	f023 0307 	bic.w	r3, r3, #7
 80123e2:	3308      	adds	r3, #8
 80123e4:	9303      	str	r3, [sp, #12]
 80123e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123e8:	4433      	add	r3, r6
 80123ea:	9309      	str	r3, [sp, #36]	; 0x24
 80123ec:	e767      	b.n	80122be <_svfiprintf_r+0x4e>
 80123ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80123f2:	460c      	mov	r4, r1
 80123f4:	2001      	movs	r0, #1
 80123f6:	e7a5      	b.n	8012344 <_svfiprintf_r+0xd4>
 80123f8:	2300      	movs	r3, #0
 80123fa:	3401      	adds	r4, #1
 80123fc:	9305      	str	r3, [sp, #20]
 80123fe:	4619      	mov	r1, r3
 8012400:	f04f 0c0a 	mov.w	ip, #10
 8012404:	4620      	mov	r0, r4
 8012406:	f810 2b01 	ldrb.w	r2, [r0], #1
 801240a:	3a30      	subs	r2, #48	; 0x30
 801240c:	2a09      	cmp	r2, #9
 801240e:	d903      	bls.n	8012418 <_svfiprintf_r+0x1a8>
 8012410:	2b00      	cmp	r3, #0
 8012412:	d0c5      	beq.n	80123a0 <_svfiprintf_r+0x130>
 8012414:	9105      	str	r1, [sp, #20]
 8012416:	e7c3      	b.n	80123a0 <_svfiprintf_r+0x130>
 8012418:	fb0c 2101 	mla	r1, ip, r1, r2
 801241c:	4604      	mov	r4, r0
 801241e:	2301      	movs	r3, #1
 8012420:	e7f0      	b.n	8012404 <_svfiprintf_r+0x194>
 8012422:	ab03      	add	r3, sp, #12
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	462a      	mov	r2, r5
 8012428:	4b0f      	ldr	r3, [pc, #60]	; (8012468 <_svfiprintf_r+0x1f8>)
 801242a:	a904      	add	r1, sp, #16
 801242c:	4638      	mov	r0, r7
 801242e:	f7fd ffb1 	bl	8010394 <_printf_float>
 8012432:	1c42      	adds	r2, r0, #1
 8012434:	4606      	mov	r6, r0
 8012436:	d1d6      	bne.n	80123e6 <_svfiprintf_r+0x176>
 8012438:	89ab      	ldrh	r3, [r5, #12]
 801243a:	065b      	lsls	r3, r3, #25
 801243c:	f53f af2c 	bmi.w	8012298 <_svfiprintf_r+0x28>
 8012440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012442:	b01d      	add	sp, #116	; 0x74
 8012444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012448:	ab03      	add	r3, sp, #12
 801244a:	9300      	str	r3, [sp, #0]
 801244c:	462a      	mov	r2, r5
 801244e:	4b06      	ldr	r3, [pc, #24]	; (8012468 <_svfiprintf_r+0x1f8>)
 8012450:	a904      	add	r1, sp, #16
 8012452:	4638      	mov	r0, r7
 8012454:	f7fe fa42 	bl	80108dc <_printf_i>
 8012458:	e7eb      	b.n	8012432 <_svfiprintf_r+0x1c2>
 801245a:	bf00      	nop
 801245c:	08014a5c 	.word	0x08014a5c
 8012460:	08014a66 	.word	0x08014a66
 8012464:	08010395 	.word	0x08010395
 8012468:	080121b9 	.word	0x080121b9
 801246c:	08014a62 	.word	0x08014a62

08012470 <_sbrk_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d06      	ldr	r5, [pc, #24]	; (801248c <_sbrk_r+0x1c>)
 8012474:	2300      	movs	r3, #0
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	f001 febe 	bl	80141fc <_sbrk>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d102      	bne.n	801248a <_sbrk_r+0x1a>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	b103      	cbz	r3, 801248a <_sbrk_r+0x1a>
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	20005760 	.word	0x20005760

08012490 <__assert_func>:
 8012490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012492:	4614      	mov	r4, r2
 8012494:	461a      	mov	r2, r3
 8012496:	4b09      	ldr	r3, [pc, #36]	; (80124bc <__assert_func+0x2c>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4605      	mov	r5, r0
 801249c:	68d8      	ldr	r0, [r3, #12]
 801249e:	b14c      	cbz	r4, 80124b4 <__assert_func+0x24>
 80124a0:	4b07      	ldr	r3, [pc, #28]	; (80124c0 <__assert_func+0x30>)
 80124a2:	9100      	str	r1, [sp, #0]
 80124a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124a8:	4906      	ldr	r1, [pc, #24]	; (80124c4 <__assert_func+0x34>)
 80124aa:	462b      	mov	r3, r5
 80124ac:	f000 f80e 	bl	80124cc <fiprintf>
 80124b0:	f000 faac 	bl	8012a0c <abort>
 80124b4:	4b04      	ldr	r3, [pc, #16]	; (80124c8 <__assert_func+0x38>)
 80124b6:	461c      	mov	r4, r3
 80124b8:	e7f3      	b.n	80124a2 <__assert_func+0x12>
 80124ba:	bf00      	nop
 80124bc:	20000018 	.word	0x20000018
 80124c0:	08014a6d 	.word	0x08014a6d
 80124c4:	08014a7a 	.word	0x08014a7a
 80124c8:	08014aa8 	.word	0x08014aa8

080124cc <fiprintf>:
 80124cc:	b40e      	push	{r1, r2, r3}
 80124ce:	b503      	push	{r0, r1, lr}
 80124d0:	4601      	mov	r1, r0
 80124d2:	ab03      	add	r3, sp, #12
 80124d4:	4805      	ldr	r0, [pc, #20]	; (80124ec <fiprintf+0x20>)
 80124d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80124da:	6800      	ldr	r0, [r0, #0]
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	f000 f897 	bl	8012610 <_vfiprintf_r>
 80124e2:	b002      	add	sp, #8
 80124e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80124e8:	b003      	add	sp, #12
 80124ea:	4770      	bx	lr
 80124ec:	20000018 	.word	0x20000018

080124f0 <__ascii_mbtowc>:
 80124f0:	b082      	sub	sp, #8
 80124f2:	b901      	cbnz	r1, 80124f6 <__ascii_mbtowc+0x6>
 80124f4:	a901      	add	r1, sp, #4
 80124f6:	b142      	cbz	r2, 801250a <__ascii_mbtowc+0x1a>
 80124f8:	b14b      	cbz	r3, 801250e <__ascii_mbtowc+0x1e>
 80124fa:	7813      	ldrb	r3, [r2, #0]
 80124fc:	600b      	str	r3, [r1, #0]
 80124fe:	7812      	ldrb	r2, [r2, #0]
 8012500:	1e10      	subs	r0, r2, #0
 8012502:	bf18      	it	ne
 8012504:	2001      	movne	r0, #1
 8012506:	b002      	add	sp, #8
 8012508:	4770      	bx	lr
 801250a:	4610      	mov	r0, r2
 801250c:	e7fb      	b.n	8012506 <__ascii_mbtowc+0x16>
 801250e:	f06f 0001 	mvn.w	r0, #1
 8012512:	e7f8      	b.n	8012506 <__ascii_mbtowc+0x16>

08012514 <memmove>:
 8012514:	4288      	cmp	r0, r1
 8012516:	b510      	push	{r4, lr}
 8012518:	eb01 0402 	add.w	r4, r1, r2
 801251c:	d902      	bls.n	8012524 <memmove+0x10>
 801251e:	4284      	cmp	r4, r0
 8012520:	4623      	mov	r3, r4
 8012522:	d807      	bhi.n	8012534 <memmove+0x20>
 8012524:	1e43      	subs	r3, r0, #1
 8012526:	42a1      	cmp	r1, r4
 8012528:	d008      	beq.n	801253c <memmove+0x28>
 801252a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801252e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012532:	e7f8      	b.n	8012526 <memmove+0x12>
 8012534:	4402      	add	r2, r0
 8012536:	4601      	mov	r1, r0
 8012538:	428a      	cmp	r2, r1
 801253a:	d100      	bne.n	801253e <memmove+0x2a>
 801253c:	bd10      	pop	{r4, pc}
 801253e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012546:	e7f7      	b.n	8012538 <memmove+0x24>

08012548 <__malloc_lock>:
 8012548:	4801      	ldr	r0, [pc, #4]	; (8012550 <__malloc_lock+0x8>)
 801254a:	f000 bc1f 	b.w	8012d8c <__retarget_lock_acquire_recursive>
 801254e:	bf00      	nop
 8012550:	20005764 	.word	0x20005764

08012554 <__malloc_unlock>:
 8012554:	4801      	ldr	r0, [pc, #4]	; (801255c <__malloc_unlock+0x8>)
 8012556:	f000 bc1a 	b.w	8012d8e <__retarget_lock_release_recursive>
 801255a:	bf00      	nop
 801255c:	20005764 	.word	0x20005764

08012560 <_realloc_r>:
 8012560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012564:	4680      	mov	r8, r0
 8012566:	4614      	mov	r4, r2
 8012568:	460e      	mov	r6, r1
 801256a:	b921      	cbnz	r1, 8012576 <_realloc_r+0x16>
 801256c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012570:	4611      	mov	r1, r2
 8012572:	f7ff bdad 	b.w	80120d0 <_malloc_r>
 8012576:	b92a      	cbnz	r2, 8012584 <_realloc_r+0x24>
 8012578:	f7ff fd3e 	bl	8011ff8 <_free_r>
 801257c:	4625      	mov	r5, r4
 801257e:	4628      	mov	r0, r5
 8012580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012584:	f000 fc6a 	bl	8012e5c <_malloc_usable_size_r>
 8012588:	4284      	cmp	r4, r0
 801258a:	4607      	mov	r7, r0
 801258c:	d802      	bhi.n	8012594 <_realloc_r+0x34>
 801258e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012592:	d812      	bhi.n	80125ba <_realloc_r+0x5a>
 8012594:	4621      	mov	r1, r4
 8012596:	4640      	mov	r0, r8
 8012598:	f7ff fd9a 	bl	80120d0 <_malloc_r>
 801259c:	4605      	mov	r5, r0
 801259e:	2800      	cmp	r0, #0
 80125a0:	d0ed      	beq.n	801257e <_realloc_r+0x1e>
 80125a2:	42bc      	cmp	r4, r7
 80125a4:	4622      	mov	r2, r4
 80125a6:	4631      	mov	r1, r6
 80125a8:	bf28      	it	cs
 80125aa:	463a      	movcs	r2, r7
 80125ac:	f7fd fe3c 	bl	8010228 <memcpy>
 80125b0:	4631      	mov	r1, r6
 80125b2:	4640      	mov	r0, r8
 80125b4:	f7ff fd20 	bl	8011ff8 <_free_r>
 80125b8:	e7e1      	b.n	801257e <_realloc_r+0x1e>
 80125ba:	4635      	mov	r5, r6
 80125bc:	e7df      	b.n	801257e <_realloc_r+0x1e>

080125be <__sfputc_r>:
 80125be:	6893      	ldr	r3, [r2, #8]
 80125c0:	3b01      	subs	r3, #1
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	b410      	push	{r4}
 80125c6:	6093      	str	r3, [r2, #8]
 80125c8:	da08      	bge.n	80125dc <__sfputc_r+0x1e>
 80125ca:	6994      	ldr	r4, [r2, #24]
 80125cc:	42a3      	cmp	r3, r4
 80125ce:	db01      	blt.n	80125d4 <__sfputc_r+0x16>
 80125d0:	290a      	cmp	r1, #10
 80125d2:	d103      	bne.n	80125dc <__sfputc_r+0x1e>
 80125d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125d8:	f000 b94a 	b.w	8012870 <__swbuf_r>
 80125dc:	6813      	ldr	r3, [r2, #0]
 80125de:	1c58      	adds	r0, r3, #1
 80125e0:	6010      	str	r0, [r2, #0]
 80125e2:	7019      	strb	r1, [r3, #0]
 80125e4:	4608      	mov	r0, r1
 80125e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <__sfputs_r>:
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ee:	4606      	mov	r6, r0
 80125f0:	460f      	mov	r7, r1
 80125f2:	4614      	mov	r4, r2
 80125f4:	18d5      	adds	r5, r2, r3
 80125f6:	42ac      	cmp	r4, r5
 80125f8:	d101      	bne.n	80125fe <__sfputs_r+0x12>
 80125fa:	2000      	movs	r0, #0
 80125fc:	e007      	b.n	801260e <__sfputs_r+0x22>
 80125fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012602:	463a      	mov	r2, r7
 8012604:	4630      	mov	r0, r6
 8012606:	f7ff ffda 	bl	80125be <__sfputc_r>
 801260a:	1c43      	adds	r3, r0, #1
 801260c:	d1f3      	bne.n	80125f6 <__sfputs_r+0xa>
 801260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012610 <_vfiprintf_r>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	460d      	mov	r5, r1
 8012616:	b09d      	sub	sp, #116	; 0x74
 8012618:	4614      	mov	r4, r2
 801261a:	4698      	mov	r8, r3
 801261c:	4606      	mov	r6, r0
 801261e:	b118      	cbz	r0, 8012628 <_vfiprintf_r+0x18>
 8012620:	6983      	ldr	r3, [r0, #24]
 8012622:	b90b      	cbnz	r3, 8012628 <_vfiprintf_r+0x18>
 8012624:	f000 fb14 	bl	8012c50 <__sinit>
 8012628:	4b89      	ldr	r3, [pc, #548]	; (8012850 <_vfiprintf_r+0x240>)
 801262a:	429d      	cmp	r5, r3
 801262c:	d11b      	bne.n	8012666 <_vfiprintf_r+0x56>
 801262e:	6875      	ldr	r5, [r6, #4]
 8012630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012632:	07d9      	lsls	r1, r3, #31
 8012634:	d405      	bmi.n	8012642 <_vfiprintf_r+0x32>
 8012636:	89ab      	ldrh	r3, [r5, #12]
 8012638:	059a      	lsls	r2, r3, #22
 801263a:	d402      	bmi.n	8012642 <_vfiprintf_r+0x32>
 801263c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801263e:	f000 fba5 	bl	8012d8c <__retarget_lock_acquire_recursive>
 8012642:	89ab      	ldrh	r3, [r5, #12]
 8012644:	071b      	lsls	r3, r3, #28
 8012646:	d501      	bpl.n	801264c <_vfiprintf_r+0x3c>
 8012648:	692b      	ldr	r3, [r5, #16]
 801264a:	b9eb      	cbnz	r3, 8012688 <_vfiprintf_r+0x78>
 801264c:	4629      	mov	r1, r5
 801264e:	4630      	mov	r0, r6
 8012650:	f000 f96e 	bl	8012930 <__swsetup_r>
 8012654:	b1c0      	cbz	r0, 8012688 <_vfiprintf_r+0x78>
 8012656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012658:	07dc      	lsls	r4, r3, #31
 801265a:	d50e      	bpl.n	801267a <_vfiprintf_r+0x6a>
 801265c:	f04f 30ff 	mov.w	r0, #4294967295
 8012660:	b01d      	add	sp, #116	; 0x74
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	4b7b      	ldr	r3, [pc, #492]	; (8012854 <_vfiprintf_r+0x244>)
 8012668:	429d      	cmp	r5, r3
 801266a:	d101      	bne.n	8012670 <_vfiprintf_r+0x60>
 801266c:	68b5      	ldr	r5, [r6, #8]
 801266e:	e7df      	b.n	8012630 <_vfiprintf_r+0x20>
 8012670:	4b79      	ldr	r3, [pc, #484]	; (8012858 <_vfiprintf_r+0x248>)
 8012672:	429d      	cmp	r5, r3
 8012674:	bf08      	it	eq
 8012676:	68f5      	ldreq	r5, [r6, #12]
 8012678:	e7da      	b.n	8012630 <_vfiprintf_r+0x20>
 801267a:	89ab      	ldrh	r3, [r5, #12]
 801267c:	0598      	lsls	r0, r3, #22
 801267e:	d4ed      	bmi.n	801265c <_vfiprintf_r+0x4c>
 8012680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012682:	f000 fb84 	bl	8012d8e <__retarget_lock_release_recursive>
 8012686:	e7e9      	b.n	801265c <_vfiprintf_r+0x4c>
 8012688:	2300      	movs	r3, #0
 801268a:	9309      	str	r3, [sp, #36]	; 0x24
 801268c:	2320      	movs	r3, #32
 801268e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012692:	f8cd 800c 	str.w	r8, [sp, #12]
 8012696:	2330      	movs	r3, #48	; 0x30
 8012698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801285c <_vfiprintf_r+0x24c>
 801269c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126a0:	f04f 0901 	mov.w	r9, #1
 80126a4:	4623      	mov	r3, r4
 80126a6:	469a      	mov	sl, r3
 80126a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ac:	b10a      	cbz	r2, 80126b2 <_vfiprintf_r+0xa2>
 80126ae:	2a25      	cmp	r2, #37	; 0x25
 80126b0:	d1f9      	bne.n	80126a6 <_vfiprintf_r+0x96>
 80126b2:	ebba 0b04 	subs.w	fp, sl, r4
 80126b6:	d00b      	beq.n	80126d0 <_vfiprintf_r+0xc0>
 80126b8:	465b      	mov	r3, fp
 80126ba:	4622      	mov	r2, r4
 80126bc:	4629      	mov	r1, r5
 80126be:	4630      	mov	r0, r6
 80126c0:	f7ff ff94 	bl	80125ec <__sfputs_r>
 80126c4:	3001      	adds	r0, #1
 80126c6:	f000 80aa 	beq.w	801281e <_vfiprintf_r+0x20e>
 80126ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126cc:	445a      	add	r2, fp
 80126ce:	9209      	str	r2, [sp, #36]	; 0x24
 80126d0:	f89a 3000 	ldrb.w	r3, [sl]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f000 80a2 	beq.w	801281e <_vfiprintf_r+0x20e>
 80126da:	2300      	movs	r3, #0
 80126dc:	f04f 32ff 	mov.w	r2, #4294967295
 80126e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126e4:	f10a 0a01 	add.w	sl, sl, #1
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	9307      	str	r3, [sp, #28]
 80126ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126f0:	931a      	str	r3, [sp, #104]	; 0x68
 80126f2:	4654      	mov	r4, sl
 80126f4:	2205      	movs	r2, #5
 80126f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fa:	4858      	ldr	r0, [pc, #352]	; (801285c <_vfiprintf_r+0x24c>)
 80126fc:	f7ed fd80 	bl	8000200 <memchr>
 8012700:	9a04      	ldr	r2, [sp, #16]
 8012702:	b9d8      	cbnz	r0, 801273c <_vfiprintf_r+0x12c>
 8012704:	06d1      	lsls	r1, r2, #27
 8012706:	bf44      	itt	mi
 8012708:	2320      	movmi	r3, #32
 801270a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801270e:	0713      	lsls	r3, r2, #28
 8012710:	bf44      	itt	mi
 8012712:	232b      	movmi	r3, #43	; 0x2b
 8012714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012718:	f89a 3000 	ldrb.w	r3, [sl]
 801271c:	2b2a      	cmp	r3, #42	; 0x2a
 801271e:	d015      	beq.n	801274c <_vfiprintf_r+0x13c>
 8012720:	9a07      	ldr	r2, [sp, #28]
 8012722:	4654      	mov	r4, sl
 8012724:	2000      	movs	r0, #0
 8012726:	f04f 0c0a 	mov.w	ip, #10
 801272a:	4621      	mov	r1, r4
 801272c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012730:	3b30      	subs	r3, #48	; 0x30
 8012732:	2b09      	cmp	r3, #9
 8012734:	d94e      	bls.n	80127d4 <_vfiprintf_r+0x1c4>
 8012736:	b1b0      	cbz	r0, 8012766 <_vfiprintf_r+0x156>
 8012738:	9207      	str	r2, [sp, #28]
 801273a:	e014      	b.n	8012766 <_vfiprintf_r+0x156>
 801273c:	eba0 0308 	sub.w	r3, r0, r8
 8012740:	fa09 f303 	lsl.w	r3, r9, r3
 8012744:	4313      	orrs	r3, r2
 8012746:	9304      	str	r3, [sp, #16]
 8012748:	46a2      	mov	sl, r4
 801274a:	e7d2      	b.n	80126f2 <_vfiprintf_r+0xe2>
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	1d19      	adds	r1, r3, #4
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	9103      	str	r1, [sp, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	bfbb      	ittet	lt
 8012758:	425b      	neglt	r3, r3
 801275a:	f042 0202 	orrlt.w	r2, r2, #2
 801275e:	9307      	strge	r3, [sp, #28]
 8012760:	9307      	strlt	r3, [sp, #28]
 8012762:	bfb8      	it	lt
 8012764:	9204      	strlt	r2, [sp, #16]
 8012766:	7823      	ldrb	r3, [r4, #0]
 8012768:	2b2e      	cmp	r3, #46	; 0x2e
 801276a:	d10c      	bne.n	8012786 <_vfiprintf_r+0x176>
 801276c:	7863      	ldrb	r3, [r4, #1]
 801276e:	2b2a      	cmp	r3, #42	; 0x2a
 8012770:	d135      	bne.n	80127de <_vfiprintf_r+0x1ce>
 8012772:	9b03      	ldr	r3, [sp, #12]
 8012774:	1d1a      	adds	r2, r3, #4
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	9203      	str	r2, [sp, #12]
 801277a:	2b00      	cmp	r3, #0
 801277c:	bfb8      	it	lt
 801277e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012782:	3402      	adds	r4, #2
 8012784:	9305      	str	r3, [sp, #20]
 8012786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801286c <_vfiprintf_r+0x25c>
 801278a:	7821      	ldrb	r1, [r4, #0]
 801278c:	2203      	movs	r2, #3
 801278e:	4650      	mov	r0, sl
 8012790:	f7ed fd36 	bl	8000200 <memchr>
 8012794:	b140      	cbz	r0, 80127a8 <_vfiprintf_r+0x198>
 8012796:	2340      	movs	r3, #64	; 0x40
 8012798:	eba0 000a 	sub.w	r0, r0, sl
 801279c:	fa03 f000 	lsl.w	r0, r3, r0
 80127a0:	9b04      	ldr	r3, [sp, #16]
 80127a2:	4303      	orrs	r3, r0
 80127a4:	3401      	adds	r4, #1
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ac:	482c      	ldr	r0, [pc, #176]	; (8012860 <_vfiprintf_r+0x250>)
 80127ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127b2:	2206      	movs	r2, #6
 80127b4:	f7ed fd24 	bl	8000200 <memchr>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d03f      	beq.n	801283c <_vfiprintf_r+0x22c>
 80127bc:	4b29      	ldr	r3, [pc, #164]	; (8012864 <_vfiprintf_r+0x254>)
 80127be:	bb1b      	cbnz	r3, 8012808 <_vfiprintf_r+0x1f8>
 80127c0:	9b03      	ldr	r3, [sp, #12]
 80127c2:	3307      	adds	r3, #7
 80127c4:	f023 0307 	bic.w	r3, r3, #7
 80127c8:	3308      	adds	r3, #8
 80127ca:	9303      	str	r3, [sp, #12]
 80127cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ce:	443b      	add	r3, r7
 80127d0:	9309      	str	r3, [sp, #36]	; 0x24
 80127d2:	e767      	b.n	80126a4 <_vfiprintf_r+0x94>
 80127d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80127d8:	460c      	mov	r4, r1
 80127da:	2001      	movs	r0, #1
 80127dc:	e7a5      	b.n	801272a <_vfiprintf_r+0x11a>
 80127de:	2300      	movs	r3, #0
 80127e0:	3401      	adds	r4, #1
 80127e2:	9305      	str	r3, [sp, #20]
 80127e4:	4619      	mov	r1, r3
 80127e6:	f04f 0c0a 	mov.w	ip, #10
 80127ea:	4620      	mov	r0, r4
 80127ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f0:	3a30      	subs	r2, #48	; 0x30
 80127f2:	2a09      	cmp	r2, #9
 80127f4:	d903      	bls.n	80127fe <_vfiprintf_r+0x1ee>
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0c5      	beq.n	8012786 <_vfiprintf_r+0x176>
 80127fa:	9105      	str	r1, [sp, #20]
 80127fc:	e7c3      	b.n	8012786 <_vfiprintf_r+0x176>
 80127fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012802:	4604      	mov	r4, r0
 8012804:	2301      	movs	r3, #1
 8012806:	e7f0      	b.n	80127ea <_vfiprintf_r+0x1da>
 8012808:	ab03      	add	r3, sp, #12
 801280a:	9300      	str	r3, [sp, #0]
 801280c:	462a      	mov	r2, r5
 801280e:	4b16      	ldr	r3, [pc, #88]	; (8012868 <_vfiprintf_r+0x258>)
 8012810:	a904      	add	r1, sp, #16
 8012812:	4630      	mov	r0, r6
 8012814:	f7fd fdbe 	bl	8010394 <_printf_float>
 8012818:	4607      	mov	r7, r0
 801281a:	1c78      	adds	r0, r7, #1
 801281c:	d1d6      	bne.n	80127cc <_vfiprintf_r+0x1bc>
 801281e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012820:	07d9      	lsls	r1, r3, #31
 8012822:	d405      	bmi.n	8012830 <_vfiprintf_r+0x220>
 8012824:	89ab      	ldrh	r3, [r5, #12]
 8012826:	059a      	lsls	r2, r3, #22
 8012828:	d402      	bmi.n	8012830 <_vfiprintf_r+0x220>
 801282a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801282c:	f000 faaf 	bl	8012d8e <__retarget_lock_release_recursive>
 8012830:	89ab      	ldrh	r3, [r5, #12]
 8012832:	065b      	lsls	r3, r3, #25
 8012834:	f53f af12 	bmi.w	801265c <_vfiprintf_r+0x4c>
 8012838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801283a:	e711      	b.n	8012660 <_vfiprintf_r+0x50>
 801283c:	ab03      	add	r3, sp, #12
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	462a      	mov	r2, r5
 8012842:	4b09      	ldr	r3, [pc, #36]	; (8012868 <_vfiprintf_r+0x258>)
 8012844:	a904      	add	r1, sp, #16
 8012846:	4630      	mov	r0, r6
 8012848:	f7fe f848 	bl	80108dc <_printf_i>
 801284c:	e7e4      	b.n	8012818 <_vfiprintf_r+0x208>
 801284e:	bf00      	nop
 8012850:	08014bd4 	.word	0x08014bd4
 8012854:	08014bf4 	.word	0x08014bf4
 8012858:	08014bb4 	.word	0x08014bb4
 801285c:	08014a5c 	.word	0x08014a5c
 8012860:	08014a66 	.word	0x08014a66
 8012864:	08010395 	.word	0x08010395
 8012868:	080125ed 	.word	0x080125ed
 801286c:	08014a62 	.word	0x08014a62

08012870 <__swbuf_r>:
 8012870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012872:	460e      	mov	r6, r1
 8012874:	4614      	mov	r4, r2
 8012876:	4605      	mov	r5, r0
 8012878:	b118      	cbz	r0, 8012882 <__swbuf_r+0x12>
 801287a:	6983      	ldr	r3, [r0, #24]
 801287c:	b90b      	cbnz	r3, 8012882 <__swbuf_r+0x12>
 801287e:	f000 f9e7 	bl	8012c50 <__sinit>
 8012882:	4b21      	ldr	r3, [pc, #132]	; (8012908 <__swbuf_r+0x98>)
 8012884:	429c      	cmp	r4, r3
 8012886:	d12b      	bne.n	80128e0 <__swbuf_r+0x70>
 8012888:	686c      	ldr	r4, [r5, #4]
 801288a:	69a3      	ldr	r3, [r4, #24]
 801288c:	60a3      	str	r3, [r4, #8]
 801288e:	89a3      	ldrh	r3, [r4, #12]
 8012890:	071a      	lsls	r2, r3, #28
 8012892:	d52f      	bpl.n	80128f4 <__swbuf_r+0x84>
 8012894:	6923      	ldr	r3, [r4, #16]
 8012896:	b36b      	cbz	r3, 80128f4 <__swbuf_r+0x84>
 8012898:	6923      	ldr	r3, [r4, #16]
 801289a:	6820      	ldr	r0, [r4, #0]
 801289c:	1ac0      	subs	r0, r0, r3
 801289e:	6963      	ldr	r3, [r4, #20]
 80128a0:	b2f6      	uxtb	r6, r6
 80128a2:	4283      	cmp	r3, r0
 80128a4:	4637      	mov	r7, r6
 80128a6:	dc04      	bgt.n	80128b2 <__swbuf_r+0x42>
 80128a8:	4621      	mov	r1, r4
 80128aa:	4628      	mov	r0, r5
 80128ac:	f000 f93c 	bl	8012b28 <_fflush_r>
 80128b0:	bb30      	cbnz	r0, 8012900 <__swbuf_r+0x90>
 80128b2:	68a3      	ldr	r3, [r4, #8]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	60a3      	str	r3, [r4, #8]
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	1c5a      	adds	r2, r3, #1
 80128bc:	6022      	str	r2, [r4, #0]
 80128be:	701e      	strb	r6, [r3, #0]
 80128c0:	6963      	ldr	r3, [r4, #20]
 80128c2:	3001      	adds	r0, #1
 80128c4:	4283      	cmp	r3, r0
 80128c6:	d004      	beq.n	80128d2 <__swbuf_r+0x62>
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	07db      	lsls	r3, r3, #31
 80128cc:	d506      	bpl.n	80128dc <__swbuf_r+0x6c>
 80128ce:	2e0a      	cmp	r6, #10
 80128d0:	d104      	bne.n	80128dc <__swbuf_r+0x6c>
 80128d2:	4621      	mov	r1, r4
 80128d4:	4628      	mov	r0, r5
 80128d6:	f000 f927 	bl	8012b28 <_fflush_r>
 80128da:	b988      	cbnz	r0, 8012900 <__swbuf_r+0x90>
 80128dc:	4638      	mov	r0, r7
 80128de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128e0:	4b0a      	ldr	r3, [pc, #40]	; (801290c <__swbuf_r+0x9c>)
 80128e2:	429c      	cmp	r4, r3
 80128e4:	d101      	bne.n	80128ea <__swbuf_r+0x7a>
 80128e6:	68ac      	ldr	r4, [r5, #8]
 80128e8:	e7cf      	b.n	801288a <__swbuf_r+0x1a>
 80128ea:	4b09      	ldr	r3, [pc, #36]	; (8012910 <__swbuf_r+0xa0>)
 80128ec:	429c      	cmp	r4, r3
 80128ee:	bf08      	it	eq
 80128f0:	68ec      	ldreq	r4, [r5, #12]
 80128f2:	e7ca      	b.n	801288a <__swbuf_r+0x1a>
 80128f4:	4621      	mov	r1, r4
 80128f6:	4628      	mov	r0, r5
 80128f8:	f000 f81a 	bl	8012930 <__swsetup_r>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d0cb      	beq.n	8012898 <__swbuf_r+0x28>
 8012900:	f04f 37ff 	mov.w	r7, #4294967295
 8012904:	e7ea      	b.n	80128dc <__swbuf_r+0x6c>
 8012906:	bf00      	nop
 8012908:	08014bd4 	.word	0x08014bd4
 801290c:	08014bf4 	.word	0x08014bf4
 8012910:	08014bb4 	.word	0x08014bb4

08012914 <__ascii_wctomb>:
 8012914:	b149      	cbz	r1, 801292a <__ascii_wctomb+0x16>
 8012916:	2aff      	cmp	r2, #255	; 0xff
 8012918:	bf85      	ittet	hi
 801291a:	238a      	movhi	r3, #138	; 0x8a
 801291c:	6003      	strhi	r3, [r0, #0]
 801291e:	700a      	strbls	r2, [r1, #0]
 8012920:	f04f 30ff 	movhi.w	r0, #4294967295
 8012924:	bf98      	it	ls
 8012926:	2001      	movls	r0, #1
 8012928:	4770      	bx	lr
 801292a:	4608      	mov	r0, r1
 801292c:	4770      	bx	lr
	...

08012930 <__swsetup_r>:
 8012930:	4b32      	ldr	r3, [pc, #200]	; (80129fc <__swsetup_r+0xcc>)
 8012932:	b570      	push	{r4, r5, r6, lr}
 8012934:	681d      	ldr	r5, [r3, #0]
 8012936:	4606      	mov	r6, r0
 8012938:	460c      	mov	r4, r1
 801293a:	b125      	cbz	r5, 8012946 <__swsetup_r+0x16>
 801293c:	69ab      	ldr	r3, [r5, #24]
 801293e:	b913      	cbnz	r3, 8012946 <__swsetup_r+0x16>
 8012940:	4628      	mov	r0, r5
 8012942:	f000 f985 	bl	8012c50 <__sinit>
 8012946:	4b2e      	ldr	r3, [pc, #184]	; (8012a00 <__swsetup_r+0xd0>)
 8012948:	429c      	cmp	r4, r3
 801294a:	d10f      	bne.n	801296c <__swsetup_r+0x3c>
 801294c:	686c      	ldr	r4, [r5, #4]
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012954:	0719      	lsls	r1, r3, #28
 8012956:	d42c      	bmi.n	80129b2 <__swsetup_r+0x82>
 8012958:	06dd      	lsls	r5, r3, #27
 801295a:	d411      	bmi.n	8012980 <__swsetup_r+0x50>
 801295c:	2309      	movs	r3, #9
 801295e:	6033      	str	r3, [r6, #0]
 8012960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012964:	81a3      	strh	r3, [r4, #12]
 8012966:	f04f 30ff 	mov.w	r0, #4294967295
 801296a:	e03e      	b.n	80129ea <__swsetup_r+0xba>
 801296c:	4b25      	ldr	r3, [pc, #148]	; (8012a04 <__swsetup_r+0xd4>)
 801296e:	429c      	cmp	r4, r3
 8012970:	d101      	bne.n	8012976 <__swsetup_r+0x46>
 8012972:	68ac      	ldr	r4, [r5, #8]
 8012974:	e7eb      	b.n	801294e <__swsetup_r+0x1e>
 8012976:	4b24      	ldr	r3, [pc, #144]	; (8012a08 <__swsetup_r+0xd8>)
 8012978:	429c      	cmp	r4, r3
 801297a:	bf08      	it	eq
 801297c:	68ec      	ldreq	r4, [r5, #12]
 801297e:	e7e6      	b.n	801294e <__swsetup_r+0x1e>
 8012980:	0758      	lsls	r0, r3, #29
 8012982:	d512      	bpl.n	80129aa <__swsetup_r+0x7a>
 8012984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012986:	b141      	cbz	r1, 801299a <__swsetup_r+0x6a>
 8012988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801298c:	4299      	cmp	r1, r3
 801298e:	d002      	beq.n	8012996 <__swsetup_r+0x66>
 8012990:	4630      	mov	r0, r6
 8012992:	f7ff fb31 	bl	8011ff8 <_free_r>
 8012996:	2300      	movs	r3, #0
 8012998:	6363      	str	r3, [r4, #52]	; 0x34
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129a0:	81a3      	strh	r3, [r4, #12]
 80129a2:	2300      	movs	r3, #0
 80129a4:	6063      	str	r3, [r4, #4]
 80129a6:	6923      	ldr	r3, [r4, #16]
 80129a8:	6023      	str	r3, [r4, #0]
 80129aa:	89a3      	ldrh	r3, [r4, #12]
 80129ac:	f043 0308 	orr.w	r3, r3, #8
 80129b0:	81a3      	strh	r3, [r4, #12]
 80129b2:	6923      	ldr	r3, [r4, #16]
 80129b4:	b94b      	cbnz	r3, 80129ca <__swsetup_r+0x9a>
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80129bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129c0:	d003      	beq.n	80129ca <__swsetup_r+0x9a>
 80129c2:	4621      	mov	r1, r4
 80129c4:	4630      	mov	r0, r6
 80129c6:	f000 fa09 	bl	8012ddc <__smakebuf_r>
 80129ca:	89a0      	ldrh	r0, [r4, #12]
 80129cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129d0:	f010 0301 	ands.w	r3, r0, #1
 80129d4:	d00a      	beq.n	80129ec <__swsetup_r+0xbc>
 80129d6:	2300      	movs	r3, #0
 80129d8:	60a3      	str	r3, [r4, #8]
 80129da:	6963      	ldr	r3, [r4, #20]
 80129dc:	425b      	negs	r3, r3
 80129de:	61a3      	str	r3, [r4, #24]
 80129e0:	6923      	ldr	r3, [r4, #16]
 80129e2:	b943      	cbnz	r3, 80129f6 <__swsetup_r+0xc6>
 80129e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80129e8:	d1ba      	bne.n	8012960 <__swsetup_r+0x30>
 80129ea:	bd70      	pop	{r4, r5, r6, pc}
 80129ec:	0781      	lsls	r1, r0, #30
 80129ee:	bf58      	it	pl
 80129f0:	6963      	ldrpl	r3, [r4, #20]
 80129f2:	60a3      	str	r3, [r4, #8]
 80129f4:	e7f4      	b.n	80129e0 <__swsetup_r+0xb0>
 80129f6:	2000      	movs	r0, #0
 80129f8:	e7f7      	b.n	80129ea <__swsetup_r+0xba>
 80129fa:	bf00      	nop
 80129fc:	20000018 	.word	0x20000018
 8012a00:	08014bd4 	.word	0x08014bd4
 8012a04:	08014bf4 	.word	0x08014bf4
 8012a08:	08014bb4 	.word	0x08014bb4

08012a0c <abort>:
 8012a0c:	b508      	push	{r3, lr}
 8012a0e:	2006      	movs	r0, #6
 8012a10:	f000 fa54 	bl	8012ebc <raise>
 8012a14:	2001      	movs	r0, #1
 8012a16:	f001 fc07 	bl	8014228 <_exit>
	...

08012a1c <__sflush_r>:
 8012a1c:	898a      	ldrh	r2, [r1, #12]
 8012a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a22:	4605      	mov	r5, r0
 8012a24:	0710      	lsls	r0, r2, #28
 8012a26:	460c      	mov	r4, r1
 8012a28:	d458      	bmi.n	8012adc <__sflush_r+0xc0>
 8012a2a:	684b      	ldr	r3, [r1, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	dc05      	bgt.n	8012a3c <__sflush_r+0x20>
 8012a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	dc02      	bgt.n	8012a3c <__sflush_r+0x20>
 8012a36:	2000      	movs	r0, #0
 8012a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a3e:	2e00      	cmp	r6, #0
 8012a40:	d0f9      	beq.n	8012a36 <__sflush_r+0x1a>
 8012a42:	2300      	movs	r3, #0
 8012a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a48:	682f      	ldr	r7, [r5, #0]
 8012a4a:	602b      	str	r3, [r5, #0]
 8012a4c:	d032      	beq.n	8012ab4 <__sflush_r+0x98>
 8012a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	075a      	lsls	r2, r3, #29
 8012a54:	d505      	bpl.n	8012a62 <__sflush_r+0x46>
 8012a56:	6863      	ldr	r3, [r4, #4]
 8012a58:	1ac0      	subs	r0, r0, r3
 8012a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a5c:	b10b      	cbz	r3, 8012a62 <__sflush_r+0x46>
 8012a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a60:	1ac0      	subs	r0, r0, r3
 8012a62:	2300      	movs	r3, #0
 8012a64:	4602      	mov	r2, r0
 8012a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a68:	6a21      	ldr	r1, [r4, #32]
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b0      	blx	r6
 8012a6e:	1c43      	adds	r3, r0, #1
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	d106      	bne.n	8012a82 <__sflush_r+0x66>
 8012a74:	6829      	ldr	r1, [r5, #0]
 8012a76:	291d      	cmp	r1, #29
 8012a78:	d82c      	bhi.n	8012ad4 <__sflush_r+0xb8>
 8012a7a:	4a2a      	ldr	r2, [pc, #168]	; (8012b24 <__sflush_r+0x108>)
 8012a7c:	40ca      	lsrs	r2, r1
 8012a7e:	07d6      	lsls	r6, r2, #31
 8012a80:	d528      	bpl.n	8012ad4 <__sflush_r+0xb8>
 8012a82:	2200      	movs	r2, #0
 8012a84:	6062      	str	r2, [r4, #4]
 8012a86:	04d9      	lsls	r1, r3, #19
 8012a88:	6922      	ldr	r2, [r4, #16]
 8012a8a:	6022      	str	r2, [r4, #0]
 8012a8c:	d504      	bpl.n	8012a98 <__sflush_r+0x7c>
 8012a8e:	1c42      	adds	r2, r0, #1
 8012a90:	d101      	bne.n	8012a96 <__sflush_r+0x7a>
 8012a92:	682b      	ldr	r3, [r5, #0]
 8012a94:	b903      	cbnz	r3, 8012a98 <__sflush_r+0x7c>
 8012a96:	6560      	str	r0, [r4, #84]	; 0x54
 8012a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a9a:	602f      	str	r7, [r5, #0]
 8012a9c:	2900      	cmp	r1, #0
 8012a9e:	d0ca      	beq.n	8012a36 <__sflush_r+0x1a>
 8012aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012aa4:	4299      	cmp	r1, r3
 8012aa6:	d002      	beq.n	8012aae <__sflush_r+0x92>
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	f7ff faa5 	bl	8011ff8 <_free_r>
 8012aae:	2000      	movs	r0, #0
 8012ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8012ab2:	e7c1      	b.n	8012a38 <__sflush_r+0x1c>
 8012ab4:	6a21      	ldr	r1, [r4, #32]
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	4628      	mov	r0, r5
 8012aba:	47b0      	blx	r6
 8012abc:	1c41      	adds	r1, r0, #1
 8012abe:	d1c7      	bne.n	8012a50 <__sflush_r+0x34>
 8012ac0:	682b      	ldr	r3, [r5, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d0c4      	beq.n	8012a50 <__sflush_r+0x34>
 8012ac6:	2b1d      	cmp	r3, #29
 8012ac8:	d001      	beq.n	8012ace <__sflush_r+0xb2>
 8012aca:	2b16      	cmp	r3, #22
 8012acc:	d101      	bne.n	8012ad2 <__sflush_r+0xb6>
 8012ace:	602f      	str	r7, [r5, #0]
 8012ad0:	e7b1      	b.n	8012a36 <__sflush_r+0x1a>
 8012ad2:	89a3      	ldrh	r3, [r4, #12]
 8012ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ad8:	81a3      	strh	r3, [r4, #12]
 8012ada:	e7ad      	b.n	8012a38 <__sflush_r+0x1c>
 8012adc:	690f      	ldr	r7, [r1, #16]
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	d0a9      	beq.n	8012a36 <__sflush_r+0x1a>
 8012ae2:	0793      	lsls	r3, r2, #30
 8012ae4:	680e      	ldr	r6, [r1, #0]
 8012ae6:	bf08      	it	eq
 8012ae8:	694b      	ldreq	r3, [r1, #20]
 8012aea:	600f      	str	r7, [r1, #0]
 8012aec:	bf18      	it	ne
 8012aee:	2300      	movne	r3, #0
 8012af0:	eba6 0807 	sub.w	r8, r6, r7
 8012af4:	608b      	str	r3, [r1, #8]
 8012af6:	f1b8 0f00 	cmp.w	r8, #0
 8012afa:	dd9c      	ble.n	8012a36 <__sflush_r+0x1a>
 8012afc:	6a21      	ldr	r1, [r4, #32]
 8012afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b00:	4643      	mov	r3, r8
 8012b02:	463a      	mov	r2, r7
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b0      	blx	r6
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	dc06      	bgt.n	8012b1a <__sflush_r+0xfe>
 8012b0c:	89a3      	ldrh	r3, [r4, #12]
 8012b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b12:	81a3      	strh	r3, [r4, #12]
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	e78e      	b.n	8012a38 <__sflush_r+0x1c>
 8012b1a:	4407      	add	r7, r0
 8012b1c:	eba8 0800 	sub.w	r8, r8, r0
 8012b20:	e7e9      	b.n	8012af6 <__sflush_r+0xda>
 8012b22:	bf00      	nop
 8012b24:	20400001 	.word	0x20400001

08012b28 <_fflush_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	690b      	ldr	r3, [r1, #16]
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	460c      	mov	r4, r1
 8012b30:	b913      	cbnz	r3, 8012b38 <_fflush_r+0x10>
 8012b32:	2500      	movs	r5, #0
 8012b34:	4628      	mov	r0, r5
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	b118      	cbz	r0, 8012b42 <_fflush_r+0x1a>
 8012b3a:	6983      	ldr	r3, [r0, #24]
 8012b3c:	b90b      	cbnz	r3, 8012b42 <_fflush_r+0x1a>
 8012b3e:	f000 f887 	bl	8012c50 <__sinit>
 8012b42:	4b14      	ldr	r3, [pc, #80]	; (8012b94 <_fflush_r+0x6c>)
 8012b44:	429c      	cmp	r4, r3
 8012b46:	d11b      	bne.n	8012b80 <_fflush_r+0x58>
 8012b48:	686c      	ldr	r4, [r5, #4]
 8012b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0ef      	beq.n	8012b32 <_fflush_r+0xa>
 8012b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b54:	07d0      	lsls	r0, r2, #31
 8012b56:	d404      	bmi.n	8012b62 <_fflush_r+0x3a>
 8012b58:	0599      	lsls	r1, r3, #22
 8012b5a:	d402      	bmi.n	8012b62 <_fflush_r+0x3a>
 8012b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b5e:	f000 f915 	bl	8012d8c <__retarget_lock_acquire_recursive>
 8012b62:	4628      	mov	r0, r5
 8012b64:	4621      	mov	r1, r4
 8012b66:	f7ff ff59 	bl	8012a1c <__sflush_r>
 8012b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b6c:	07da      	lsls	r2, r3, #31
 8012b6e:	4605      	mov	r5, r0
 8012b70:	d4e0      	bmi.n	8012b34 <_fflush_r+0xc>
 8012b72:	89a3      	ldrh	r3, [r4, #12]
 8012b74:	059b      	lsls	r3, r3, #22
 8012b76:	d4dd      	bmi.n	8012b34 <_fflush_r+0xc>
 8012b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b7a:	f000 f908 	bl	8012d8e <__retarget_lock_release_recursive>
 8012b7e:	e7d9      	b.n	8012b34 <_fflush_r+0xc>
 8012b80:	4b05      	ldr	r3, [pc, #20]	; (8012b98 <_fflush_r+0x70>)
 8012b82:	429c      	cmp	r4, r3
 8012b84:	d101      	bne.n	8012b8a <_fflush_r+0x62>
 8012b86:	68ac      	ldr	r4, [r5, #8]
 8012b88:	e7df      	b.n	8012b4a <_fflush_r+0x22>
 8012b8a:	4b04      	ldr	r3, [pc, #16]	; (8012b9c <_fflush_r+0x74>)
 8012b8c:	429c      	cmp	r4, r3
 8012b8e:	bf08      	it	eq
 8012b90:	68ec      	ldreq	r4, [r5, #12]
 8012b92:	e7da      	b.n	8012b4a <_fflush_r+0x22>
 8012b94:	08014bd4 	.word	0x08014bd4
 8012b98:	08014bf4 	.word	0x08014bf4
 8012b9c:	08014bb4 	.word	0x08014bb4

08012ba0 <std>:
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	b510      	push	{r4, lr}
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8012baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bae:	6083      	str	r3, [r0, #8]
 8012bb0:	8181      	strh	r1, [r0, #12]
 8012bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8012bb4:	81c2      	strh	r2, [r0, #14]
 8012bb6:	6183      	str	r3, [r0, #24]
 8012bb8:	4619      	mov	r1, r3
 8012bba:	2208      	movs	r2, #8
 8012bbc:	305c      	adds	r0, #92	; 0x5c
 8012bbe:	f7fd fb41 	bl	8010244 <memset>
 8012bc2:	4b05      	ldr	r3, [pc, #20]	; (8012bd8 <std+0x38>)
 8012bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8012bc6:	4b05      	ldr	r3, [pc, #20]	; (8012bdc <std+0x3c>)
 8012bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bca:	4b05      	ldr	r3, [pc, #20]	; (8012be0 <std+0x40>)
 8012bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bce:	4b05      	ldr	r3, [pc, #20]	; (8012be4 <std+0x44>)
 8012bd0:	6224      	str	r4, [r4, #32]
 8012bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8012bd4:	bd10      	pop	{r4, pc}
 8012bd6:	bf00      	nop
 8012bd8:	08012ef5 	.word	0x08012ef5
 8012bdc:	08012f17 	.word	0x08012f17
 8012be0:	08012f4f 	.word	0x08012f4f
 8012be4:	08012f73 	.word	0x08012f73

08012be8 <_cleanup_r>:
 8012be8:	4901      	ldr	r1, [pc, #4]	; (8012bf0 <_cleanup_r+0x8>)
 8012bea:	f000 b8af 	b.w	8012d4c <_fwalk_reent>
 8012bee:	bf00      	nop
 8012bf0:	08012b29 	.word	0x08012b29

08012bf4 <__sfmoreglue>:
 8012bf4:	b570      	push	{r4, r5, r6, lr}
 8012bf6:	2268      	movs	r2, #104	; 0x68
 8012bf8:	1e4d      	subs	r5, r1, #1
 8012bfa:	4355      	muls	r5, r2
 8012bfc:	460e      	mov	r6, r1
 8012bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c02:	f7ff fa65 	bl	80120d0 <_malloc_r>
 8012c06:	4604      	mov	r4, r0
 8012c08:	b140      	cbz	r0, 8012c1c <__sfmoreglue+0x28>
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8012c10:	300c      	adds	r0, #12
 8012c12:	60a0      	str	r0, [r4, #8]
 8012c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c18:	f7fd fb14 	bl	8010244 <memset>
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	bd70      	pop	{r4, r5, r6, pc}

08012c20 <__sfp_lock_acquire>:
 8012c20:	4801      	ldr	r0, [pc, #4]	; (8012c28 <__sfp_lock_acquire+0x8>)
 8012c22:	f000 b8b3 	b.w	8012d8c <__retarget_lock_acquire_recursive>
 8012c26:	bf00      	nop
 8012c28:	20005765 	.word	0x20005765

08012c2c <__sfp_lock_release>:
 8012c2c:	4801      	ldr	r0, [pc, #4]	; (8012c34 <__sfp_lock_release+0x8>)
 8012c2e:	f000 b8ae 	b.w	8012d8e <__retarget_lock_release_recursive>
 8012c32:	bf00      	nop
 8012c34:	20005765 	.word	0x20005765

08012c38 <__sinit_lock_acquire>:
 8012c38:	4801      	ldr	r0, [pc, #4]	; (8012c40 <__sinit_lock_acquire+0x8>)
 8012c3a:	f000 b8a7 	b.w	8012d8c <__retarget_lock_acquire_recursive>
 8012c3e:	bf00      	nop
 8012c40:	20005766 	.word	0x20005766

08012c44 <__sinit_lock_release>:
 8012c44:	4801      	ldr	r0, [pc, #4]	; (8012c4c <__sinit_lock_release+0x8>)
 8012c46:	f000 b8a2 	b.w	8012d8e <__retarget_lock_release_recursive>
 8012c4a:	bf00      	nop
 8012c4c:	20005766 	.word	0x20005766

08012c50 <__sinit>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	4604      	mov	r4, r0
 8012c54:	f7ff fff0 	bl	8012c38 <__sinit_lock_acquire>
 8012c58:	69a3      	ldr	r3, [r4, #24]
 8012c5a:	b11b      	cbz	r3, 8012c64 <__sinit+0x14>
 8012c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c60:	f7ff bff0 	b.w	8012c44 <__sinit_lock_release>
 8012c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c68:	6523      	str	r3, [r4, #80]	; 0x50
 8012c6a:	4b13      	ldr	r3, [pc, #76]	; (8012cb8 <__sinit+0x68>)
 8012c6c:	4a13      	ldr	r2, [pc, #76]	; (8012cbc <__sinit+0x6c>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c72:	42a3      	cmp	r3, r4
 8012c74:	bf04      	itt	eq
 8012c76:	2301      	moveq	r3, #1
 8012c78:	61a3      	streq	r3, [r4, #24]
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f000 f820 	bl	8012cc0 <__sfp>
 8012c80:	6060      	str	r0, [r4, #4]
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 f81c 	bl	8012cc0 <__sfp>
 8012c88:	60a0      	str	r0, [r4, #8]
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 f818 	bl	8012cc0 <__sfp>
 8012c90:	2200      	movs	r2, #0
 8012c92:	60e0      	str	r0, [r4, #12]
 8012c94:	2104      	movs	r1, #4
 8012c96:	6860      	ldr	r0, [r4, #4]
 8012c98:	f7ff ff82 	bl	8012ba0 <std>
 8012c9c:	68a0      	ldr	r0, [r4, #8]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	2109      	movs	r1, #9
 8012ca2:	f7ff ff7d 	bl	8012ba0 <std>
 8012ca6:	68e0      	ldr	r0, [r4, #12]
 8012ca8:	2202      	movs	r2, #2
 8012caa:	2112      	movs	r1, #18
 8012cac:	f7ff ff78 	bl	8012ba0 <std>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	61a3      	str	r3, [r4, #24]
 8012cb4:	e7d2      	b.n	8012c5c <__sinit+0xc>
 8012cb6:	bf00      	nop
 8012cb8:	08014838 	.word	0x08014838
 8012cbc:	08012be9 	.word	0x08012be9

08012cc0 <__sfp>:
 8012cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc2:	4607      	mov	r7, r0
 8012cc4:	f7ff ffac 	bl	8012c20 <__sfp_lock_acquire>
 8012cc8:	4b1e      	ldr	r3, [pc, #120]	; (8012d44 <__sfp+0x84>)
 8012cca:	681e      	ldr	r6, [r3, #0]
 8012ccc:	69b3      	ldr	r3, [r6, #24]
 8012cce:	b913      	cbnz	r3, 8012cd6 <__sfp+0x16>
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7ff ffbd 	bl	8012c50 <__sinit>
 8012cd6:	3648      	adds	r6, #72	; 0x48
 8012cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	d503      	bpl.n	8012ce8 <__sfp+0x28>
 8012ce0:	6833      	ldr	r3, [r6, #0]
 8012ce2:	b30b      	cbz	r3, 8012d28 <__sfp+0x68>
 8012ce4:	6836      	ldr	r6, [r6, #0]
 8012ce6:	e7f7      	b.n	8012cd8 <__sfp+0x18>
 8012ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cec:	b9d5      	cbnz	r5, 8012d24 <__sfp+0x64>
 8012cee:	4b16      	ldr	r3, [pc, #88]	; (8012d48 <__sfp+0x88>)
 8012cf0:	60e3      	str	r3, [r4, #12]
 8012cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8012cf8:	f000 f847 	bl	8012d8a <__retarget_lock_init_recursive>
 8012cfc:	f7ff ff96 	bl	8012c2c <__sfp_lock_release>
 8012d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d08:	6025      	str	r5, [r4, #0]
 8012d0a:	61a5      	str	r5, [r4, #24]
 8012d0c:	2208      	movs	r2, #8
 8012d0e:	4629      	mov	r1, r5
 8012d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d14:	f7fd fa96 	bl	8010244 <memset>
 8012d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d20:	4620      	mov	r0, r4
 8012d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d24:	3468      	adds	r4, #104	; 0x68
 8012d26:	e7d9      	b.n	8012cdc <__sfp+0x1c>
 8012d28:	2104      	movs	r1, #4
 8012d2a:	4638      	mov	r0, r7
 8012d2c:	f7ff ff62 	bl	8012bf4 <__sfmoreglue>
 8012d30:	4604      	mov	r4, r0
 8012d32:	6030      	str	r0, [r6, #0]
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d1d5      	bne.n	8012ce4 <__sfp+0x24>
 8012d38:	f7ff ff78 	bl	8012c2c <__sfp_lock_release>
 8012d3c:	230c      	movs	r3, #12
 8012d3e:	603b      	str	r3, [r7, #0]
 8012d40:	e7ee      	b.n	8012d20 <__sfp+0x60>
 8012d42:	bf00      	nop
 8012d44:	08014838 	.word	0x08014838
 8012d48:	ffff0001 	.word	0xffff0001

08012d4c <_fwalk_reent>:
 8012d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d50:	4606      	mov	r6, r0
 8012d52:	4688      	mov	r8, r1
 8012d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d58:	2700      	movs	r7, #0
 8012d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8012d62:	d505      	bpl.n	8012d70 <_fwalk_reent+0x24>
 8012d64:	6824      	ldr	r4, [r4, #0]
 8012d66:	2c00      	cmp	r4, #0
 8012d68:	d1f7      	bne.n	8012d5a <_fwalk_reent+0xe>
 8012d6a:	4638      	mov	r0, r7
 8012d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d70:	89ab      	ldrh	r3, [r5, #12]
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	d907      	bls.n	8012d86 <_fwalk_reent+0x3a>
 8012d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	d003      	beq.n	8012d86 <_fwalk_reent+0x3a>
 8012d7e:	4629      	mov	r1, r5
 8012d80:	4630      	mov	r0, r6
 8012d82:	47c0      	blx	r8
 8012d84:	4307      	orrs	r7, r0
 8012d86:	3568      	adds	r5, #104	; 0x68
 8012d88:	e7e9      	b.n	8012d5e <_fwalk_reent+0x12>

08012d8a <__retarget_lock_init_recursive>:
 8012d8a:	4770      	bx	lr

08012d8c <__retarget_lock_acquire_recursive>:
 8012d8c:	4770      	bx	lr

08012d8e <__retarget_lock_release_recursive>:
 8012d8e:	4770      	bx	lr

08012d90 <__swhatbuf_r>:
 8012d90:	b570      	push	{r4, r5, r6, lr}
 8012d92:	460e      	mov	r6, r1
 8012d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	b096      	sub	sp, #88	; 0x58
 8012d9c:	4614      	mov	r4, r2
 8012d9e:	461d      	mov	r5, r3
 8012da0:	da08      	bge.n	8012db4 <__swhatbuf_r+0x24>
 8012da2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012da6:	2200      	movs	r2, #0
 8012da8:	602a      	str	r2, [r5, #0]
 8012daa:	061a      	lsls	r2, r3, #24
 8012dac:	d410      	bmi.n	8012dd0 <__swhatbuf_r+0x40>
 8012dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012db2:	e00e      	b.n	8012dd2 <__swhatbuf_r+0x42>
 8012db4:	466a      	mov	r2, sp
 8012db6:	f000 f903 	bl	8012fc0 <_fstat_r>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	dbf1      	blt.n	8012da2 <__swhatbuf_r+0x12>
 8012dbe:	9a01      	ldr	r2, [sp, #4]
 8012dc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012dc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012dc8:	425a      	negs	r2, r3
 8012dca:	415a      	adcs	r2, r3
 8012dcc:	602a      	str	r2, [r5, #0]
 8012dce:	e7ee      	b.n	8012dae <__swhatbuf_r+0x1e>
 8012dd0:	2340      	movs	r3, #64	; 0x40
 8012dd2:	2000      	movs	r0, #0
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	b016      	add	sp, #88	; 0x58
 8012dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ddc <__smakebuf_r>:
 8012ddc:	898b      	ldrh	r3, [r1, #12]
 8012dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012de0:	079d      	lsls	r5, r3, #30
 8012de2:	4606      	mov	r6, r0
 8012de4:	460c      	mov	r4, r1
 8012de6:	d507      	bpl.n	8012df8 <__smakebuf_r+0x1c>
 8012de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	6123      	str	r3, [r4, #16]
 8012df0:	2301      	movs	r3, #1
 8012df2:	6163      	str	r3, [r4, #20]
 8012df4:	b002      	add	sp, #8
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	ab01      	add	r3, sp, #4
 8012dfa:	466a      	mov	r2, sp
 8012dfc:	f7ff ffc8 	bl	8012d90 <__swhatbuf_r>
 8012e00:	9900      	ldr	r1, [sp, #0]
 8012e02:	4605      	mov	r5, r0
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7ff f963 	bl	80120d0 <_malloc_r>
 8012e0a:	b948      	cbnz	r0, 8012e20 <__smakebuf_r+0x44>
 8012e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e10:	059a      	lsls	r2, r3, #22
 8012e12:	d4ef      	bmi.n	8012df4 <__smakebuf_r+0x18>
 8012e14:	f023 0303 	bic.w	r3, r3, #3
 8012e18:	f043 0302 	orr.w	r3, r3, #2
 8012e1c:	81a3      	strh	r3, [r4, #12]
 8012e1e:	e7e3      	b.n	8012de8 <__smakebuf_r+0xc>
 8012e20:	4b0d      	ldr	r3, [pc, #52]	; (8012e58 <__smakebuf_r+0x7c>)
 8012e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	6020      	str	r0, [r4, #0]
 8012e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e2c:	81a3      	strh	r3, [r4, #12]
 8012e2e:	9b00      	ldr	r3, [sp, #0]
 8012e30:	6163      	str	r3, [r4, #20]
 8012e32:	9b01      	ldr	r3, [sp, #4]
 8012e34:	6120      	str	r0, [r4, #16]
 8012e36:	b15b      	cbz	r3, 8012e50 <__smakebuf_r+0x74>
 8012e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	f000 f8d1 	bl	8012fe4 <_isatty_r>
 8012e42:	b128      	cbz	r0, 8012e50 <__smakebuf_r+0x74>
 8012e44:	89a3      	ldrh	r3, [r4, #12]
 8012e46:	f023 0303 	bic.w	r3, r3, #3
 8012e4a:	f043 0301 	orr.w	r3, r3, #1
 8012e4e:	81a3      	strh	r3, [r4, #12]
 8012e50:	89a0      	ldrh	r0, [r4, #12]
 8012e52:	4305      	orrs	r5, r0
 8012e54:	81a5      	strh	r5, [r4, #12]
 8012e56:	e7cd      	b.n	8012df4 <__smakebuf_r+0x18>
 8012e58:	08012be9 	.word	0x08012be9

08012e5c <_malloc_usable_size_r>:
 8012e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e60:	1f18      	subs	r0, r3, #4
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	bfbc      	itt	lt
 8012e66:	580b      	ldrlt	r3, [r1, r0]
 8012e68:	18c0      	addlt	r0, r0, r3
 8012e6a:	4770      	bx	lr

08012e6c <_raise_r>:
 8012e6c:	291f      	cmp	r1, #31
 8012e6e:	b538      	push	{r3, r4, r5, lr}
 8012e70:	4604      	mov	r4, r0
 8012e72:	460d      	mov	r5, r1
 8012e74:	d904      	bls.n	8012e80 <_raise_r+0x14>
 8012e76:	2316      	movs	r3, #22
 8012e78:	6003      	str	r3, [r0, #0]
 8012e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e7e:	bd38      	pop	{r3, r4, r5, pc}
 8012e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012e82:	b112      	cbz	r2, 8012e8a <_raise_r+0x1e>
 8012e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e88:	b94b      	cbnz	r3, 8012e9e <_raise_r+0x32>
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f000 f830 	bl	8012ef0 <_getpid_r>
 8012e90:	462a      	mov	r2, r5
 8012e92:	4601      	mov	r1, r0
 8012e94:	4620      	mov	r0, r4
 8012e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e9a:	f000 b817 	b.w	8012ecc <_kill_r>
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d00a      	beq.n	8012eb8 <_raise_r+0x4c>
 8012ea2:	1c59      	adds	r1, r3, #1
 8012ea4:	d103      	bne.n	8012eae <_raise_r+0x42>
 8012ea6:	2316      	movs	r3, #22
 8012ea8:	6003      	str	r3, [r0, #0]
 8012eaa:	2001      	movs	r0, #1
 8012eac:	e7e7      	b.n	8012e7e <_raise_r+0x12>
 8012eae:	2400      	movs	r4, #0
 8012eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	4798      	blx	r3
 8012eb8:	2000      	movs	r0, #0
 8012eba:	e7e0      	b.n	8012e7e <_raise_r+0x12>

08012ebc <raise>:
 8012ebc:	4b02      	ldr	r3, [pc, #8]	; (8012ec8 <raise+0xc>)
 8012ebe:	4601      	mov	r1, r0
 8012ec0:	6818      	ldr	r0, [r3, #0]
 8012ec2:	f7ff bfd3 	b.w	8012e6c <_raise_r>
 8012ec6:	bf00      	nop
 8012ec8:	20000018 	.word	0x20000018

08012ecc <_kill_r>:
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4d07      	ldr	r5, [pc, #28]	; (8012eec <_kill_r+0x20>)
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	4608      	mov	r0, r1
 8012ed6:	4611      	mov	r1, r2
 8012ed8:	602b      	str	r3, [r5, #0]
 8012eda:	f001 f977 	bl	80141cc <_kill>
 8012ede:	1c43      	adds	r3, r0, #1
 8012ee0:	d102      	bne.n	8012ee8 <_kill_r+0x1c>
 8012ee2:	682b      	ldr	r3, [r5, #0]
 8012ee4:	b103      	cbz	r3, 8012ee8 <_kill_r+0x1c>
 8012ee6:	6023      	str	r3, [r4, #0]
 8012ee8:	bd38      	pop	{r3, r4, r5, pc}
 8012eea:	bf00      	nop
 8012eec:	20005760 	.word	0x20005760

08012ef0 <_getpid_r>:
 8012ef0:	f001 b95c 	b.w	80141ac <_getpid>

08012ef4 <__sread>:
 8012ef4:	b510      	push	{r4, lr}
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efc:	f000 f894 	bl	8013028 <_read_r>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	bfab      	itete	ge
 8012f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f06:	89a3      	ldrhlt	r3, [r4, #12]
 8012f08:	181b      	addge	r3, r3, r0
 8012f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f0e:	bfac      	ite	ge
 8012f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f12:	81a3      	strhlt	r3, [r4, #12]
 8012f14:	bd10      	pop	{r4, pc}

08012f16 <__swrite>:
 8012f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1a:	461f      	mov	r7, r3
 8012f1c:	898b      	ldrh	r3, [r1, #12]
 8012f1e:	05db      	lsls	r3, r3, #23
 8012f20:	4605      	mov	r5, r0
 8012f22:	460c      	mov	r4, r1
 8012f24:	4616      	mov	r6, r2
 8012f26:	d505      	bpl.n	8012f34 <__swrite+0x1e>
 8012f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f2c:	2302      	movs	r3, #2
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f000 f868 	bl	8013004 <_lseek_r>
 8012f34:	89a3      	ldrh	r3, [r4, #12]
 8012f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f3e:	81a3      	strh	r3, [r4, #12]
 8012f40:	4632      	mov	r2, r6
 8012f42:	463b      	mov	r3, r7
 8012f44:	4628      	mov	r0, r5
 8012f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4a:	f000 b817 	b.w	8012f7c <_write_r>

08012f4e <__sseek>:
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	460c      	mov	r4, r1
 8012f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f56:	f000 f855 	bl	8013004 <_lseek_r>
 8012f5a:	1c43      	adds	r3, r0, #1
 8012f5c:	89a3      	ldrh	r3, [r4, #12]
 8012f5e:	bf15      	itete	ne
 8012f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f6a:	81a3      	strheq	r3, [r4, #12]
 8012f6c:	bf18      	it	ne
 8012f6e:	81a3      	strhne	r3, [r4, #12]
 8012f70:	bd10      	pop	{r4, pc}

08012f72 <__sclose>:
 8012f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f76:	f000 b813 	b.w	8012fa0 <_close_r>
	...

08012f7c <_write_r>:
 8012f7c:	b538      	push	{r3, r4, r5, lr}
 8012f7e:	4d07      	ldr	r5, [pc, #28]	; (8012f9c <_write_r+0x20>)
 8012f80:	4604      	mov	r4, r0
 8012f82:	4608      	mov	r0, r1
 8012f84:	4611      	mov	r1, r2
 8012f86:	2200      	movs	r2, #0
 8012f88:	602a      	str	r2, [r5, #0]
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	f001 f944 	bl	8014218 <_write>
 8012f90:	1c43      	adds	r3, r0, #1
 8012f92:	d102      	bne.n	8012f9a <_write_r+0x1e>
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	b103      	cbz	r3, 8012f9a <_write_r+0x1e>
 8012f98:	6023      	str	r3, [r4, #0]
 8012f9a:	bd38      	pop	{r3, r4, r5, pc}
 8012f9c:	20005760 	.word	0x20005760

08012fa0 <_close_r>:
 8012fa0:	b538      	push	{r3, r4, r5, lr}
 8012fa2:	4d06      	ldr	r5, [pc, #24]	; (8012fbc <_close_r+0x1c>)
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	4608      	mov	r0, r1
 8012faa:	602b      	str	r3, [r5, #0]
 8012fac:	f001 f8ee 	bl	801418c <_close>
 8012fb0:	1c43      	adds	r3, r0, #1
 8012fb2:	d102      	bne.n	8012fba <_close_r+0x1a>
 8012fb4:	682b      	ldr	r3, [r5, #0]
 8012fb6:	b103      	cbz	r3, 8012fba <_close_r+0x1a>
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	bd38      	pop	{r3, r4, r5, pc}
 8012fbc:	20005760 	.word	0x20005760

08012fc0 <_fstat_r>:
 8012fc0:	b538      	push	{r3, r4, r5, lr}
 8012fc2:	4d07      	ldr	r5, [pc, #28]	; (8012fe0 <_fstat_r+0x20>)
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	4608      	mov	r0, r1
 8012fca:	4611      	mov	r1, r2
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	f001 f8e5 	bl	801419c <_fstat>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d102      	bne.n	8012fdc <_fstat_r+0x1c>
 8012fd6:	682b      	ldr	r3, [r5, #0]
 8012fd8:	b103      	cbz	r3, 8012fdc <_fstat_r+0x1c>
 8012fda:	6023      	str	r3, [r4, #0]
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	bf00      	nop
 8012fe0:	20005760 	.word	0x20005760

08012fe4 <_isatty_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d06      	ldr	r5, [pc, #24]	; (8013000 <_isatty_r+0x1c>)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4604      	mov	r4, r0
 8012fec:	4608      	mov	r0, r1
 8012fee:	602b      	str	r3, [r5, #0]
 8012ff0:	f001 f8e4 	bl	80141bc <_isatty>
 8012ff4:	1c43      	adds	r3, r0, #1
 8012ff6:	d102      	bne.n	8012ffe <_isatty_r+0x1a>
 8012ff8:	682b      	ldr	r3, [r5, #0]
 8012ffa:	b103      	cbz	r3, 8012ffe <_isatty_r+0x1a>
 8012ffc:	6023      	str	r3, [r4, #0]
 8012ffe:	bd38      	pop	{r3, r4, r5, pc}
 8013000:	20005760 	.word	0x20005760

08013004 <_lseek_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d07      	ldr	r5, [pc, #28]	; (8013024 <_lseek_r+0x20>)
 8013008:	4604      	mov	r4, r0
 801300a:	4608      	mov	r0, r1
 801300c:	4611      	mov	r1, r2
 801300e:	2200      	movs	r2, #0
 8013010:	602a      	str	r2, [r5, #0]
 8013012:	461a      	mov	r2, r3
 8013014:	f001 f8e2 	bl	80141dc <_lseek>
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	d102      	bne.n	8013022 <_lseek_r+0x1e>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	b103      	cbz	r3, 8013022 <_lseek_r+0x1e>
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	bd38      	pop	{r3, r4, r5, pc}
 8013024:	20005760 	.word	0x20005760

08013028 <_read_r>:
 8013028:	b538      	push	{r3, r4, r5, lr}
 801302a:	4d07      	ldr	r5, [pc, #28]	; (8013048 <_read_r+0x20>)
 801302c:	4604      	mov	r4, r0
 801302e:	4608      	mov	r0, r1
 8013030:	4611      	mov	r1, r2
 8013032:	2200      	movs	r2, #0
 8013034:	602a      	str	r2, [r5, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	f001 f8d8 	bl	80141ec <_read>
 801303c:	1c43      	adds	r3, r0, #1
 801303e:	d102      	bne.n	8013046 <_read_r+0x1e>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	b103      	cbz	r3, 8013046 <_read_r+0x1e>
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	bd38      	pop	{r3, r4, r5, pc}
 8013048:	20005760 	.word	0x20005760
 801304c:	00000000 	.word	0x00000000

08013050 <cos>:
 8013050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013052:	ec53 2b10 	vmov	r2, r3, d0
 8013056:	4826      	ldr	r0, [pc, #152]	; (80130f0 <cos+0xa0>)
 8013058:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801305c:	4281      	cmp	r1, r0
 801305e:	dc06      	bgt.n	801306e <cos+0x1e>
 8013060:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80130e8 <cos+0x98>
 8013064:	b005      	add	sp, #20
 8013066:	f85d eb04 	ldr.w	lr, [sp], #4
 801306a:	f000 baa9 	b.w	80135c0 <__kernel_cos>
 801306e:	4821      	ldr	r0, [pc, #132]	; (80130f4 <cos+0xa4>)
 8013070:	4281      	cmp	r1, r0
 8013072:	dd09      	ble.n	8013088 <cos+0x38>
 8013074:	ee10 0a10 	vmov	r0, s0
 8013078:	4619      	mov	r1, r3
 801307a:	f7ed f915 	bl	80002a8 <__aeabi_dsub>
 801307e:	ec41 0b10 	vmov	d0, r0, r1
 8013082:	b005      	add	sp, #20
 8013084:	f85d fb04 	ldr.w	pc, [sp], #4
 8013088:	4668      	mov	r0, sp
 801308a:	f000 f88d 	bl	80131a8 <__ieee754_rem_pio2>
 801308e:	f000 0003 	and.w	r0, r0, #3
 8013092:	2801      	cmp	r0, #1
 8013094:	d00b      	beq.n	80130ae <cos+0x5e>
 8013096:	2802      	cmp	r0, #2
 8013098:	d016      	beq.n	80130c8 <cos+0x78>
 801309a:	b9e0      	cbnz	r0, 80130d6 <cos+0x86>
 801309c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130a0:	ed9d 0b00 	vldr	d0, [sp]
 80130a4:	f000 fa8c 	bl	80135c0 <__kernel_cos>
 80130a8:	ec51 0b10 	vmov	r0, r1, d0
 80130ac:	e7e7      	b.n	801307e <cos+0x2e>
 80130ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130b2:	ed9d 0b00 	vldr	d0, [sp]
 80130b6:	f000 fe9b 	bl	8013df0 <__kernel_sin>
 80130ba:	ec53 2b10 	vmov	r2, r3, d0
 80130be:	ee10 0a10 	vmov	r0, s0
 80130c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80130c6:	e7da      	b.n	801307e <cos+0x2e>
 80130c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130cc:	ed9d 0b00 	vldr	d0, [sp]
 80130d0:	f000 fa76 	bl	80135c0 <__kernel_cos>
 80130d4:	e7f1      	b.n	80130ba <cos+0x6a>
 80130d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130da:	ed9d 0b00 	vldr	d0, [sp]
 80130de:	2001      	movs	r0, #1
 80130e0:	f000 fe86 	bl	8013df0 <__kernel_sin>
 80130e4:	e7e0      	b.n	80130a8 <cos+0x58>
 80130e6:	bf00      	nop
	...
 80130f0:	3fe921fb 	.word	0x3fe921fb
 80130f4:	7fefffff 	.word	0x7fefffff

080130f8 <sin>:
 80130f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130fa:	ec53 2b10 	vmov	r2, r3, d0
 80130fe:	4828      	ldr	r0, [pc, #160]	; (80131a0 <sin+0xa8>)
 8013100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013104:	4281      	cmp	r1, r0
 8013106:	dc07      	bgt.n	8013118 <sin+0x20>
 8013108:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013198 <sin+0xa0>
 801310c:	2000      	movs	r0, #0
 801310e:	b005      	add	sp, #20
 8013110:	f85d eb04 	ldr.w	lr, [sp], #4
 8013114:	f000 be6c 	b.w	8013df0 <__kernel_sin>
 8013118:	4822      	ldr	r0, [pc, #136]	; (80131a4 <sin+0xac>)
 801311a:	4281      	cmp	r1, r0
 801311c:	dd09      	ble.n	8013132 <sin+0x3a>
 801311e:	ee10 0a10 	vmov	r0, s0
 8013122:	4619      	mov	r1, r3
 8013124:	f7ed f8c0 	bl	80002a8 <__aeabi_dsub>
 8013128:	ec41 0b10 	vmov	d0, r0, r1
 801312c:	b005      	add	sp, #20
 801312e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013132:	4668      	mov	r0, sp
 8013134:	f000 f838 	bl	80131a8 <__ieee754_rem_pio2>
 8013138:	f000 0003 	and.w	r0, r0, #3
 801313c:	2801      	cmp	r0, #1
 801313e:	d00c      	beq.n	801315a <sin+0x62>
 8013140:	2802      	cmp	r0, #2
 8013142:	d011      	beq.n	8013168 <sin+0x70>
 8013144:	b9f0      	cbnz	r0, 8013184 <sin+0x8c>
 8013146:	ed9d 1b02 	vldr	d1, [sp, #8]
 801314a:	ed9d 0b00 	vldr	d0, [sp]
 801314e:	2001      	movs	r0, #1
 8013150:	f000 fe4e 	bl	8013df0 <__kernel_sin>
 8013154:	ec51 0b10 	vmov	r0, r1, d0
 8013158:	e7e6      	b.n	8013128 <sin+0x30>
 801315a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801315e:	ed9d 0b00 	vldr	d0, [sp]
 8013162:	f000 fa2d 	bl	80135c0 <__kernel_cos>
 8013166:	e7f5      	b.n	8013154 <sin+0x5c>
 8013168:	ed9d 1b02 	vldr	d1, [sp, #8]
 801316c:	ed9d 0b00 	vldr	d0, [sp]
 8013170:	2001      	movs	r0, #1
 8013172:	f000 fe3d 	bl	8013df0 <__kernel_sin>
 8013176:	ec53 2b10 	vmov	r2, r3, d0
 801317a:	ee10 0a10 	vmov	r0, s0
 801317e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013182:	e7d1      	b.n	8013128 <sin+0x30>
 8013184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013188:	ed9d 0b00 	vldr	d0, [sp]
 801318c:	f000 fa18 	bl	80135c0 <__kernel_cos>
 8013190:	e7f1      	b.n	8013176 <sin+0x7e>
 8013192:	bf00      	nop
 8013194:	f3af 8000 	nop.w
	...
 80131a0:	3fe921fb 	.word	0x3fe921fb
 80131a4:	7fefffff 	.word	0x7fefffff

080131a8 <__ieee754_rem_pio2>:
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	ed2d 8b02 	vpush	{d8}
 80131b0:	ec55 4b10 	vmov	r4, r5, d0
 80131b4:	4bca      	ldr	r3, [pc, #808]	; (80134e0 <__ieee754_rem_pio2+0x338>)
 80131b6:	b08b      	sub	sp, #44	; 0x2c
 80131b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80131bc:	4598      	cmp	r8, r3
 80131be:	4682      	mov	sl, r0
 80131c0:	9502      	str	r5, [sp, #8]
 80131c2:	dc08      	bgt.n	80131d6 <__ieee754_rem_pio2+0x2e>
 80131c4:	2200      	movs	r2, #0
 80131c6:	2300      	movs	r3, #0
 80131c8:	ed80 0b00 	vstr	d0, [r0]
 80131cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80131d0:	f04f 0b00 	mov.w	fp, #0
 80131d4:	e028      	b.n	8013228 <__ieee754_rem_pio2+0x80>
 80131d6:	4bc3      	ldr	r3, [pc, #780]	; (80134e4 <__ieee754_rem_pio2+0x33c>)
 80131d8:	4598      	cmp	r8, r3
 80131da:	dc78      	bgt.n	80132ce <__ieee754_rem_pio2+0x126>
 80131dc:	9b02      	ldr	r3, [sp, #8]
 80131de:	4ec2      	ldr	r6, [pc, #776]	; (80134e8 <__ieee754_rem_pio2+0x340>)
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	ee10 0a10 	vmov	r0, s0
 80131e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80134a8 <__ieee754_rem_pio2+0x300>)
 80131e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ec:	4629      	mov	r1, r5
 80131ee:	dd39      	ble.n	8013264 <__ieee754_rem_pio2+0xbc>
 80131f0:	f7ed f85a 	bl	80002a8 <__aeabi_dsub>
 80131f4:	45b0      	cmp	r8, r6
 80131f6:	4604      	mov	r4, r0
 80131f8:	460d      	mov	r5, r1
 80131fa:	d01b      	beq.n	8013234 <__ieee754_rem_pio2+0x8c>
 80131fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80134b0 <__ieee754_rem_pio2+0x308>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	f7ed f851 	bl	80002a8 <__aeabi_dsub>
 8013206:	4602      	mov	r2, r0
 8013208:	460b      	mov	r3, r1
 801320a:	e9ca 2300 	strd	r2, r3, [sl]
 801320e:	4620      	mov	r0, r4
 8013210:	4629      	mov	r1, r5
 8013212:	f7ed f849 	bl	80002a8 <__aeabi_dsub>
 8013216:	a3a6      	add	r3, pc, #664	; (adr r3, 80134b0 <__ieee754_rem_pio2+0x308>)
 8013218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321c:	f7ed f844 	bl	80002a8 <__aeabi_dsub>
 8013220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013224:	f04f 0b01 	mov.w	fp, #1
 8013228:	4658      	mov	r0, fp
 801322a:	b00b      	add	sp, #44	; 0x2c
 801322c:	ecbd 8b02 	vpop	{d8}
 8013230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013234:	a3a0      	add	r3, pc, #640	; (adr r3, 80134b8 <__ieee754_rem_pio2+0x310>)
 8013236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323a:	f7ed f835 	bl	80002a8 <__aeabi_dsub>
 801323e:	a3a0      	add	r3, pc, #640	; (adr r3, 80134c0 <__ieee754_rem_pio2+0x318>)
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	f7ed f82e 	bl	80002a8 <__aeabi_dsub>
 801324c:	4602      	mov	r2, r0
 801324e:	460b      	mov	r3, r1
 8013250:	e9ca 2300 	strd	r2, r3, [sl]
 8013254:	4620      	mov	r0, r4
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed f826 	bl	80002a8 <__aeabi_dsub>
 801325c:	a398      	add	r3, pc, #608	; (adr r3, 80134c0 <__ieee754_rem_pio2+0x318>)
 801325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013262:	e7db      	b.n	801321c <__ieee754_rem_pio2+0x74>
 8013264:	f7ed f822 	bl	80002ac <__adddf3>
 8013268:	45b0      	cmp	r8, r6
 801326a:	4604      	mov	r4, r0
 801326c:	460d      	mov	r5, r1
 801326e:	d016      	beq.n	801329e <__ieee754_rem_pio2+0xf6>
 8013270:	a38f      	add	r3, pc, #572	; (adr r3, 80134b0 <__ieee754_rem_pio2+0x308>)
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	f7ed f819 	bl	80002ac <__adddf3>
 801327a:	4602      	mov	r2, r0
 801327c:	460b      	mov	r3, r1
 801327e:	e9ca 2300 	strd	r2, r3, [sl]
 8013282:	4620      	mov	r0, r4
 8013284:	4629      	mov	r1, r5
 8013286:	f7ed f80f 	bl	80002a8 <__aeabi_dsub>
 801328a:	a389      	add	r3, pc, #548	; (adr r3, 80134b0 <__ieee754_rem_pio2+0x308>)
 801328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013290:	f7ed f80c 	bl	80002ac <__adddf3>
 8013294:	f04f 3bff 	mov.w	fp, #4294967295
 8013298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801329c:	e7c4      	b.n	8013228 <__ieee754_rem_pio2+0x80>
 801329e:	a386      	add	r3, pc, #536	; (adr r3, 80134b8 <__ieee754_rem_pio2+0x310>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	f7ed f802 	bl	80002ac <__adddf3>
 80132a8:	a385      	add	r3, pc, #532	; (adr r3, 80134c0 <__ieee754_rem_pio2+0x318>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	4604      	mov	r4, r0
 80132b0:	460d      	mov	r5, r1
 80132b2:	f7ec fffb 	bl	80002ac <__adddf3>
 80132b6:	4602      	mov	r2, r0
 80132b8:	460b      	mov	r3, r1
 80132ba:	e9ca 2300 	strd	r2, r3, [sl]
 80132be:	4620      	mov	r0, r4
 80132c0:	4629      	mov	r1, r5
 80132c2:	f7ec fff1 	bl	80002a8 <__aeabi_dsub>
 80132c6:	a37e      	add	r3, pc, #504	; (adr r3, 80134c0 <__ieee754_rem_pio2+0x318>)
 80132c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132cc:	e7e0      	b.n	8013290 <__ieee754_rem_pio2+0xe8>
 80132ce:	4b87      	ldr	r3, [pc, #540]	; (80134ec <__ieee754_rem_pio2+0x344>)
 80132d0:	4598      	cmp	r8, r3
 80132d2:	f300 80d9 	bgt.w	8013488 <__ieee754_rem_pio2+0x2e0>
 80132d6:	f000 fe49 	bl	8013f6c <fabs>
 80132da:	ec55 4b10 	vmov	r4, r5, d0
 80132de:	ee10 0a10 	vmov	r0, s0
 80132e2:	a379      	add	r3, pc, #484	; (adr r3, 80134c8 <__ieee754_rem_pio2+0x320>)
 80132e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e8:	4629      	mov	r1, r5
 80132ea:	f7ed f995 	bl	8000618 <__aeabi_dmul>
 80132ee:	4b80      	ldr	r3, [pc, #512]	; (80134f0 <__ieee754_rem_pio2+0x348>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	f7ec ffdb 	bl	80002ac <__adddf3>
 80132f6:	f7ed fc3f 	bl	8000b78 <__aeabi_d2iz>
 80132fa:	4683      	mov	fp, r0
 80132fc:	f7ed f922 	bl	8000544 <__aeabi_i2d>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	ec43 2b18 	vmov	d8, r2, r3
 8013308:	a367      	add	r3, pc, #412	; (adr r3, 80134a8 <__ieee754_rem_pio2+0x300>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ed f983 	bl	8000618 <__aeabi_dmul>
 8013312:	4602      	mov	r2, r0
 8013314:	460b      	mov	r3, r1
 8013316:	4620      	mov	r0, r4
 8013318:	4629      	mov	r1, r5
 801331a:	f7ec ffc5 	bl	80002a8 <__aeabi_dsub>
 801331e:	a364      	add	r3, pc, #400	; (adr r3, 80134b0 <__ieee754_rem_pio2+0x308>)
 8013320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013324:	4606      	mov	r6, r0
 8013326:	460f      	mov	r7, r1
 8013328:	ec51 0b18 	vmov	r0, r1, d8
 801332c:	f7ed f974 	bl	8000618 <__aeabi_dmul>
 8013330:	f1bb 0f1f 	cmp.w	fp, #31
 8013334:	4604      	mov	r4, r0
 8013336:	460d      	mov	r5, r1
 8013338:	dc0d      	bgt.n	8013356 <__ieee754_rem_pio2+0x1ae>
 801333a:	4b6e      	ldr	r3, [pc, #440]	; (80134f4 <__ieee754_rem_pio2+0x34c>)
 801333c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013344:	4543      	cmp	r3, r8
 8013346:	d006      	beq.n	8013356 <__ieee754_rem_pio2+0x1ae>
 8013348:	4622      	mov	r2, r4
 801334a:	462b      	mov	r3, r5
 801334c:	4630      	mov	r0, r6
 801334e:	4639      	mov	r1, r7
 8013350:	f7ec ffaa 	bl	80002a8 <__aeabi_dsub>
 8013354:	e00f      	b.n	8013376 <__ieee754_rem_pio2+0x1ce>
 8013356:	462b      	mov	r3, r5
 8013358:	4622      	mov	r2, r4
 801335a:	4630      	mov	r0, r6
 801335c:	4639      	mov	r1, r7
 801335e:	f7ec ffa3 	bl	80002a8 <__aeabi_dsub>
 8013362:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013366:	9303      	str	r3, [sp, #12]
 8013368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801336c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013370:	f1b8 0f10 	cmp.w	r8, #16
 8013374:	dc02      	bgt.n	801337c <__ieee754_rem_pio2+0x1d4>
 8013376:	e9ca 0100 	strd	r0, r1, [sl]
 801337a:	e039      	b.n	80133f0 <__ieee754_rem_pio2+0x248>
 801337c:	a34e      	add	r3, pc, #312	; (adr r3, 80134b8 <__ieee754_rem_pio2+0x310>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	ec51 0b18 	vmov	r0, r1, d8
 8013386:	f7ed f947 	bl	8000618 <__aeabi_dmul>
 801338a:	4604      	mov	r4, r0
 801338c:	460d      	mov	r5, r1
 801338e:	4602      	mov	r2, r0
 8013390:	460b      	mov	r3, r1
 8013392:	4630      	mov	r0, r6
 8013394:	4639      	mov	r1, r7
 8013396:	f7ec ff87 	bl	80002a8 <__aeabi_dsub>
 801339a:	4602      	mov	r2, r0
 801339c:	460b      	mov	r3, r1
 801339e:	4680      	mov	r8, r0
 80133a0:	4689      	mov	r9, r1
 80133a2:	4630      	mov	r0, r6
 80133a4:	4639      	mov	r1, r7
 80133a6:	f7ec ff7f 	bl	80002a8 <__aeabi_dsub>
 80133aa:	4622      	mov	r2, r4
 80133ac:	462b      	mov	r3, r5
 80133ae:	f7ec ff7b 	bl	80002a8 <__aeabi_dsub>
 80133b2:	a343      	add	r3, pc, #268	; (adr r3, 80134c0 <__ieee754_rem_pio2+0x318>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	4604      	mov	r4, r0
 80133ba:	460d      	mov	r5, r1
 80133bc:	ec51 0b18 	vmov	r0, r1, d8
 80133c0:	f7ed f92a 	bl	8000618 <__aeabi_dmul>
 80133c4:	4622      	mov	r2, r4
 80133c6:	462b      	mov	r3, r5
 80133c8:	f7ec ff6e 	bl	80002a8 <__aeabi_dsub>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	4604      	mov	r4, r0
 80133d2:	460d      	mov	r5, r1
 80133d4:	4640      	mov	r0, r8
 80133d6:	4649      	mov	r1, r9
 80133d8:	f7ec ff66 	bl	80002a8 <__aeabi_dsub>
 80133dc:	9a03      	ldr	r2, [sp, #12]
 80133de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	2b31      	cmp	r3, #49	; 0x31
 80133e6:	dc24      	bgt.n	8013432 <__ieee754_rem_pio2+0x28a>
 80133e8:	e9ca 0100 	strd	r0, r1, [sl]
 80133ec:	4646      	mov	r6, r8
 80133ee:	464f      	mov	r7, r9
 80133f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80133f4:	4630      	mov	r0, r6
 80133f6:	4642      	mov	r2, r8
 80133f8:	464b      	mov	r3, r9
 80133fa:	4639      	mov	r1, r7
 80133fc:	f7ec ff54 	bl	80002a8 <__aeabi_dsub>
 8013400:	462b      	mov	r3, r5
 8013402:	4622      	mov	r2, r4
 8013404:	f7ec ff50 	bl	80002a8 <__aeabi_dsub>
 8013408:	9b02      	ldr	r3, [sp, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013410:	f6bf af0a 	bge.w	8013228 <__ieee754_rem_pio2+0x80>
 8013414:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013418:	f8ca 3004 	str.w	r3, [sl, #4]
 801341c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013420:	f8ca 8000 	str.w	r8, [sl]
 8013424:	f8ca 0008 	str.w	r0, [sl, #8]
 8013428:	f8ca 300c 	str.w	r3, [sl, #12]
 801342c:	f1cb 0b00 	rsb	fp, fp, #0
 8013430:	e6fa      	b.n	8013228 <__ieee754_rem_pio2+0x80>
 8013432:	a327      	add	r3, pc, #156	; (adr r3, 80134d0 <__ieee754_rem_pio2+0x328>)
 8013434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013438:	ec51 0b18 	vmov	r0, r1, d8
 801343c:	f7ed f8ec 	bl	8000618 <__aeabi_dmul>
 8013440:	4604      	mov	r4, r0
 8013442:	460d      	mov	r5, r1
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	4640      	mov	r0, r8
 801344a:	4649      	mov	r1, r9
 801344c:	f7ec ff2c 	bl	80002a8 <__aeabi_dsub>
 8013450:	4602      	mov	r2, r0
 8013452:	460b      	mov	r3, r1
 8013454:	4606      	mov	r6, r0
 8013456:	460f      	mov	r7, r1
 8013458:	4640      	mov	r0, r8
 801345a:	4649      	mov	r1, r9
 801345c:	f7ec ff24 	bl	80002a8 <__aeabi_dsub>
 8013460:	4622      	mov	r2, r4
 8013462:	462b      	mov	r3, r5
 8013464:	f7ec ff20 	bl	80002a8 <__aeabi_dsub>
 8013468:	a31b      	add	r3, pc, #108	; (adr r3, 80134d8 <__ieee754_rem_pio2+0x330>)
 801346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346e:	4604      	mov	r4, r0
 8013470:	460d      	mov	r5, r1
 8013472:	ec51 0b18 	vmov	r0, r1, d8
 8013476:	f7ed f8cf 	bl	8000618 <__aeabi_dmul>
 801347a:	4622      	mov	r2, r4
 801347c:	462b      	mov	r3, r5
 801347e:	f7ec ff13 	bl	80002a8 <__aeabi_dsub>
 8013482:	4604      	mov	r4, r0
 8013484:	460d      	mov	r5, r1
 8013486:	e75f      	b.n	8013348 <__ieee754_rem_pio2+0x1a0>
 8013488:	4b1b      	ldr	r3, [pc, #108]	; (80134f8 <__ieee754_rem_pio2+0x350>)
 801348a:	4598      	cmp	r8, r3
 801348c:	dd36      	ble.n	80134fc <__ieee754_rem_pio2+0x354>
 801348e:	ee10 2a10 	vmov	r2, s0
 8013492:	462b      	mov	r3, r5
 8013494:	4620      	mov	r0, r4
 8013496:	4629      	mov	r1, r5
 8013498:	f7ec ff06 	bl	80002a8 <__aeabi_dsub>
 801349c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80134a0:	e9ca 0100 	strd	r0, r1, [sl]
 80134a4:	e694      	b.n	80131d0 <__ieee754_rem_pio2+0x28>
 80134a6:	bf00      	nop
 80134a8:	54400000 	.word	0x54400000
 80134ac:	3ff921fb 	.word	0x3ff921fb
 80134b0:	1a626331 	.word	0x1a626331
 80134b4:	3dd0b461 	.word	0x3dd0b461
 80134b8:	1a600000 	.word	0x1a600000
 80134bc:	3dd0b461 	.word	0x3dd0b461
 80134c0:	2e037073 	.word	0x2e037073
 80134c4:	3ba3198a 	.word	0x3ba3198a
 80134c8:	6dc9c883 	.word	0x6dc9c883
 80134cc:	3fe45f30 	.word	0x3fe45f30
 80134d0:	2e000000 	.word	0x2e000000
 80134d4:	3ba3198a 	.word	0x3ba3198a
 80134d8:	252049c1 	.word	0x252049c1
 80134dc:	397b839a 	.word	0x397b839a
 80134e0:	3fe921fb 	.word	0x3fe921fb
 80134e4:	4002d97b 	.word	0x4002d97b
 80134e8:	3ff921fb 	.word	0x3ff921fb
 80134ec:	413921fb 	.word	0x413921fb
 80134f0:	3fe00000 	.word	0x3fe00000
 80134f4:	08014c14 	.word	0x08014c14
 80134f8:	7fefffff 	.word	0x7fefffff
 80134fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013500:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013504:	ee10 0a10 	vmov	r0, s0
 8013508:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801350c:	ee10 6a10 	vmov	r6, s0
 8013510:	460f      	mov	r7, r1
 8013512:	f7ed fb31 	bl	8000b78 <__aeabi_d2iz>
 8013516:	f7ed f815 	bl	8000544 <__aeabi_i2d>
 801351a:	4602      	mov	r2, r0
 801351c:	460b      	mov	r3, r1
 801351e:	4630      	mov	r0, r6
 8013520:	4639      	mov	r1, r7
 8013522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013526:	f7ec febf 	bl	80002a8 <__aeabi_dsub>
 801352a:	4b23      	ldr	r3, [pc, #140]	; (80135b8 <__ieee754_rem_pio2+0x410>)
 801352c:	2200      	movs	r2, #0
 801352e:	f7ed f873 	bl	8000618 <__aeabi_dmul>
 8013532:	460f      	mov	r7, r1
 8013534:	4606      	mov	r6, r0
 8013536:	f7ed fb1f 	bl	8000b78 <__aeabi_d2iz>
 801353a:	f7ed f803 	bl	8000544 <__aeabi_i2d>
 801353e:	4602      	mov	r2, r0
 8013540:	460b      	mov	r3, r1
 8013542:	4630      	mov	r0, r6
 8013544:	4639      	mov	r1, r7
 8013546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801354a:	f7ec fead 	bl	80002a8 <__aeabi_dsub>
 801354e:	4b1a      	ldr	r3, [pc, #104]	; (80135b8 <__ieee754_rem_pio2+0x410>)
 8013550:	2200      	movs	r2, #0
 8013552:	f7ed f861 	bl	8000618 <__aeabi_dmul>
 8013556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801355a:	ad04      	add	r5, sp, #16
 801355c:	f04f 0803 	mov.w	r8, #3
 8013560:	46a9      	mov	r9, r5
 8013562:	2600      	movs	r6, #0
 8013564:	2700      	movs	r7, #0
 8013566:	4632      	mov	r2, r6
 8013568:	463b      	mov	r3, r7
 801356a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801356e:	46c3      	mov	fp, r8
 8013570:	3d08      	subs	r5, #8
 8013572:	f108 38ff 	add.w	r8, r8, #4294967295
 8013576:	f7ed fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 801357a:	2800      	cmp	r0, #0
 801357c:	d1f3      	bne.n	8013566 <__ieee754_rem_pio2+0x3be>
 801357e:	4b0f      	ldr	r3, [pc, #60]	; (80135bc <__ieee754_rem_pio2+0x414>)
 8013580:	9301      	str	r3, [sp, #4]
 8013582:	2302      	movs	r3, #2
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	4622      	mov	r2, r4
 8013588:	465b      	mov	r3, fp
 801358a:	4651      	mov	r1, sl
 801358c:	4648      	mov	r0, r9
 801358e:	f000 f8df 	bl	8013750 <__kernel_rem_pio2>
 8013592:	9b02      	ldr	r3, [sp, #8]
 8013594:	2b00      	cmp	r3, #0
 8013596:	4683      	mov	fp, r0
 8013598:	f6bf ae46 	bge.w	8013228 <__ieee754_rem_pio2+0x80>
 801359c:	e9da 2100 	ldrd	r2, r1, [sl]
 80135a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135a4:	e9ca 2300 	strd	r2, r3, [sl]
 80135a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80135ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80135b4:	e73a      	b.n	801342c <__ieee754_rem_pio2+0x284>
 80135b6:	bf00      	nop
 80135b8:	41700000 	.word	0x41700000
 80135bc:	08014c94 	.word	0x08014c94

080135c0 <__kernel_cos>:
 80135c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c4:	ec57 6b10 	vmov	r6, r7, d0
 80135c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80135cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80135d0:	ed8d 1b00 	vstr	d1, [sp]
 80135d4:	da07      	bge.n	80135e6 <__kernel_cos+0x26>
 80135d6:	ee10 0a10 	vmov	r0, s0
 80135da:	4639      	mov	r1, r7
 80135dc:	f7ed facc 	bl	8000b78 <__aeabi_d2iz>
 80135e0:	2800      	cmp	r0, #0
 80135e2:	f000 8088 	beq.w	80136f6 <__kernel_cos+0x136>
 80135e6:	4632      	mov	r2, r6
 80135e8:	463b      	mov	r3, r7
 80135ea:	4630      	mov	r0, r6
 80135ec:	4639      	mov	r1, r7
 80135ee:	f7ed f813 	bl	8000618 <__aeabi_dmul>
 80135f2:	4b51      	ldr	r3, [pc, #324]	; (8013738 <__kernel_cos+0x178>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	4604      	mov	r4, r0
 80135f8:	460d      	mov	r5, r1
 80135fa:	f7ed f80d 	bl	8000618 <__aeabi_dmul>
 80135fe:	a340      	add	r3, pc, #256	; (adr r3, 8013700 <__kernel_cos+0x140>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	4682      	mov	sl, r0
 8013606:	468b      	mov	fp, r1
 8013608:	4620      	mov	r0, r4
 801360a:	4629      	mov	r1, r5
 801360c:	f7ed f804 	bl	8000618 <__aeabi_dmul>
 8013610:	a33d      	add	r3, pc, #244	; (adr r3, 8013708 <__kernel_cos+0x148>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fe49 	bl	80002ac <__adddf3>
 801361a:	4622      	mov	r2, r4
 801361c:	462b      	mov	r3, r5
 801361e:	f7ec fffb 	bl	8000618 <__aeabi_dmul>
 8013622:	a33b      	add	r3, pc, #236	; (adr r3, 8013710 <__kernel_cos+0x150>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fe3e 	bl	80002a8 <__aeabi_dsub>
 801362c:	4622      	mov	r2, r4
 801362e:	462b      	mov	r3, r5
 8013630:	f7ec fff2 	bl	8000618 <__aeabi_dmul>
 8013634:	a338      	add	r3, pc, #224	; (adr r3, 8013718 <__kernel_cos+0x158>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe37 	bl	80002ac <__adddf3>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	f7ec ffe9 	bl	8000618 <__aeabi_dmul>
 8013646:	a336      	add	r3, pc, #216	; (adr r3, 8013720 <__kernel_cos+0x160>)
 8013648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364c:	f7ec fe2c 	bl	80002a8 <__aeabi_dsub>
 8013650:	4622      	mov	r2, r4
 8013652:	462b      	mov	r3, r5
 8013654:	f7ec ffe0 	bl	8000618 <__aeabi_dmul>
 8013658:	a333      	add	r3, pc, #204	; (adr r3, 8013728 <__kernel_cos+0x168>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec fe25 	bl	80002ac <__adddf3>
 8013662:	4622      	mov	r2, r4
 8013664:	462b      	mov	r3, r5
 8013666:	f7ec ffd7 	bl	8000618 <__aeabi_dmul>
 801366a:	4622      	mov	r2, r4
 801366c:	462b      	mov	r3, r5
 801366e:	f7ec ffd3 	bl	8000618 <__aeabi_dmul>
 8013672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013676:	4604      	mov	r4, r0
 8013678:	460d      	mov	r5, r1
 801367a:	4630      	mov	r0, r6
 801367c:	4639      	mov	r1, r7
 801367e:	f7ec ffcb 	bl	8000618 <__aeabi_dmul>
 8013682:	460b      	mov	r3, r1
 8013684:	4602      	mov	r2, r0
 8013686:	4629      	mov	r1, r5
 8013688:	4620      	mov	r0, r4
 801368a:	f7ec fe0d 	bl	80002a8 <__aeabi_dsub>
 801368e:	4b2b      	ldr	r3, [pc, #172]	; (801373c <__kernel_cos+0x17c>)
 8013690:	4598      	cmp	r8, r3
 8013692:	4606      	mov	r6, r0
 8013694:	460f      	mov	r7, r1
 8013696:	dc10      	bgt.n	80136ba <__kernel_cos+0xfa>
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	4650      	mov	r0, sl
 801369e:	4659      	mov	r1, fp
 80136a0:	f7ec fe02 	bl	80002a8 <__aeabi_dsub>
 80136a4:	460b      	mov	r3, r1
 80136a6:	4926      	ldr	r1, [pc, #152]	; (8013740 <__kernel_cos+0x180>)
 80136a8:	4602      	mov	r2, r0
 80136aa:	2000      	movs	r0, #0
 80136ac:	f7ec fdfc 	bl	80002a8 <__aeabi_dsub>
 80136b0:	ec41 0b10 	vmov	d0, r0, r1
 80136b4:	b003      	add	sp, #12
 80136b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ba:	4b22      	ldr	r3, [pc, #136]	; (8013744 <__kernel_cos+0x184>)
 80136bc:	4920      	ldr	r1, [pc, #128]	; (8013740 <__kernel_cos+0x180>)
 80136be:	4598      	cmp	r8, r3
 80136c0:	bfcc      	ite	gt
 80136c2:	4d21      	ldrgt	r5, [pc, #132]	; (8013748 <__kernel_cos+0x188>)
 80136c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80136c8:	2400      	movs	r4, #0
 80136ca:	4622      	mov	r2, r4
 80136cc:	462b      	mov	r3, r5
 80136ce:	2000      	movs	r0, #0
 80136d0:	f7ec fdea 	bl	80002a8 <__aeabi_dsub>
 80136d4:	4622      	mov	r2, r4
 80136d6:	4680      	mov	r8, r0
 80136d8:	4689      	mov	r9, r1
 80136da:	462b      	mov	r3, r5
 80136dc:	4650      	mov	r0, sl
 80136de:	4659      	mov	r1, fp
 80136e0:	f7ec fde2 	bl	80002a8 <__aeabi_dsub>
 80136e4:	4632      	mov	r2, r6
 80136e6:	463b      	mov	r3, r7
 80136e8:	f7ec fdde 	bl	80002a8 <__aeabi_dsub>
 80136ec:	4602      	mov	r2, r0
 80136ee:	460b      	mov	r3, r1
 80136f0:	4640      	mov	r0, r8
 80136f2:	4649      	mov	r1, r9
 80136f4:	e7da      	b.n	80136ac <__kernel_cos+0xec>
 80136f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013730 <__kernel_cos+0x170>
 80136fa:	e7db      	b.n	80136b4 <__kernel_cos+0xf4>
 80136fc:	f3af 8000 	nop.w
 8013700:	be8838d4 	.word	0xbe8838d4
 8013704:	bda8fae9 	.word	0xbda8fae9
 8013708:	bdb4b1c4 	.word	0xbdb4b1c4
 801370c:	3e21ee9e 	.word	0x3e21ee9e
 8013710:	809c52ad 	.word	0x809c52ad
 8013714:	3e927e4f 	.word	0x3e927e4f
 8013718:	19cb1590 	.word	0x19cb1590
 801371c:	3efa01a0 	.word	0x3efa01a0
 8013720:	16c15177 	.word	0x16c15177
 8013724:	3f56c16c 	.word	0x3f56c16c
 8013728:	5555554c 	.word	0x5555554c
 801372c:	3fa55555 	.word	0x3fa55555
 8013730:	00000000 	.word	0x00000000
 8013734:	3ff00000 	.word	0x3ff00000
 8013738:	3fe00000 	.word	0x3fe00000
 801373c:	3fd33332 	.word	0x3fd33332
 8013740:	3ff00000 	.word	0x3ff00000
 8013744:	3fe90000 	.word	0x3fe90000
 8013748:	3fd20000 	.word	0x3fd20000
 801374c:	00000000 	.word	0x00000000

08013750 <__kernel_rem_pio2>:
 8013750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013754:	ed2d 8b02 	vpush	{d8}
 8013758:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801375c:	f112 0f14 	cmn.w	r2, #20
 8013760:	9308      	str	r3, [sp, #32]
 8013762:	9101      	str	r1, [sp, #4]
 8013764:	4bc4      	ldr	r3, [pc, #784]	; (8013a78 <__kernel_rem_pio2+0x328>)
 8013766:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013768:	900b      	str	r0, [sp, #44]	; 0x2c
 801376a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801376e:	9302      	str	r3, [sp, #8]
 8013770:	9b08      	ldr	r3, [sp, #32]
 8013772:	f103 33ff 	add.w	r3, r3, #4294967295
 8013776:	bfa8      	it	ge
 8013778:	1ed4      	subge	r4, r2, #3
 801377a:	9306      	str	r3, [sp, #24]
 801377c:	bfb2      	itee	lt
 801377e:	2400      	movlt	r4, #0
 8013780:	2318      	movge	r3, #24
 8013782:	fb94 f4f3 	sdivge	r4, r4, r3
 8013786:	f06f 0317 	mvn.w	r3, #23
 801378a:	fb04 3303 	mla	r3, r4, r3, r3
 801378e:	eb03 0a02 	add.w	sl, r3, r2
 8013792:	9b02      	ldr	r3, [sp, #8]
 8013794:	9a06      	ldr	r2, [sp, #24]
 8013796:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013a68 <__kernel_rem_pio2+0x318>
 801379a:	eb03 0802 	add.w	r8, r3, r2
 801379e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80137a0:	1aa7      	subs	r7, r4, r2
 80137a2:	ae22      	add	r6, sp, #136	; 0x88
 80137a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80137a8:	2500      	movs	r5, #0
 80137aa:	4545      	cmp	r5, r8
 80137ac:	dd13      	ble.n	80137d6 <__kernel_rem_pio2+0x86>
 80137ae:	9b08      	ldr	r3, [sp, #32]
 80137b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013a68 <__kernel_rem_pio2+0x318>
 80137b4:	aa22      	add	r2, sp, #136	; 0x88
 80137b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80137ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80137be:	f04f 0800 	mov.w	r8, #0
 80137c2:	9b02      	ldr	r3, [sp, #8]
 80137c4:	4598      	cmp	r8, r3
 80137c6:	dc2f      	bgt.n	8013828 <__kernel_rem_pio2+0xd8>
 80137c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80137cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80137d0:	462f      	mov	r7, r5
 80137d2:	2600      	movs	r6, #0
 80137d4:	e01b      	b.n	801380e <__kernel_rem_pio2+0xbe>
 80137d6:	42ef      	cmn	r7, r5
 80137d8:	d407      	bmi.n	80137ea <__kernel_rem_pio2+0x9a>
 80137da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80137de:	f7ec feb1 	bl	8000544 <__aeabi_i2d>
 80137e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80137e6:	3501      	adds	r5, #1
 80137e8:	e7df      	b.n	80137aa <__kernel_rem_pio2+0x5a>
 80137ea:	ec51 0b18 	vmov	r0, r1, d8
 80137ee:	e7f8      	b.n	80137e2 <__kernel_rem_pio2+0x92>
 80137f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80137f8:	f7ec ff0e 	bl	8000618 <__aeabi_dmul>
 80137fc:	4602      	mov	r2, r0
 80137fe:	460b      	mov	r3, r1
 8013800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013804:	f7ec fd52 	bl	80002ac <__adddf3>
 8013808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801380c:	3601      	adds	r6, #1
 801380e:	9b06      	ldr	r3, [sp, #24]
 8013810:	429e      	cmp	r6, r3
 8013812:	f1a7 0708 	sub.w	r7, r7, #8
 8013816:	ddeb      	ble.n	80137f0 <__kernel_rem_pio2+0xa0>
 8013818:	ed9d 7b04 	vldr	d7, [sp, #16]
 801381c:	f108 0801 	add.w	r8, r8, #1
 8013820:	ecab 7b02 	vstmia	fp!, {d7}
 8013824:	3508      	adds	r5, #8
 8013826:	e7cc      	b.n	80137c2 <__kernel_rem_pio2+0x72>
 8013828:	9b02      	ldr	r3, [sp, #8]
 801382a:	aa0e      	add	r2, sp, #56	; 0x38
 801382c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013830:	930d      	str	r3, [sp, #52]	; 0x34
 8013832:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013834:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013838:	9c02      	ldr	r4, [sp, #8]
 801383a:	930c      	str	r3, [sp, #48]	; 0x30
 801383c:	00e3      	lsls	r3, r4, #3
 801383e:	930a      	str	r3, [sp, #40]	; 0x28
 8013840:	ab9a      	add	r3, sp, #616	; 0x268
 8013842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013846:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801384a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801384e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013850:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013854:	46c3      	mov	fp, r8
 8013856:	46a1      	mov	r9, r4
 8013858:	f1b9 0f00 	cmp.w	r9, #0
 801385c:	f1a5 0508 	sub.w	r5, r5, #8
 8013860:	dc77      	bgt.n	8013952 <__kernel_rem_pio2+0x202>
 8013862:	ec47 6b10 	vmov	d0, r6, r7
 8013866:	4650      	mov	r0, sl
 8013868:	f000 fc0a 	bl	8014080 <scalbn>
 801386c:	ec57 6b10 	vmov	r6, r7, d0
 8013870:	2200      	movs	r2, #0
 8013872:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013876:	ee10 0a10 	vmov	r0, s0
 801387a:	4639      	mov	r1, r7
 801387c:	f7ec fecc 	bl	8000618 <__aeabi_dmul>
 8013880:	ec41 0b10 	vmov	d0, r0, r1
 8013884:	f000 fb7c 	bl	8013f80 <floor>
 8013888:	4b7c      	ldr	r3, [pc, #496]	; (8013a7c <__kernel_rem_pio2+0x32c>)
 801388a:	ec51 0b10 	vmov	r0, r1, d0
 801388e:	2200      	movs	r2, #0
 8013890:	f7ec fec2 	bl	8000618 <__aeabi_dmul>
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	f7ec fd04 	bl	80002a8 <__aeabi_dsub>
 80138a0:	460f      	mov	r7, r1
 80138a2:	4606      	mov	r6, r0
 80138a4:	f7ed f968 	bl	8000b78 <__aeabi_d2iz>
 80138a8:	9004      	str	r0, [sp, #16]
 80138aa:	f7ec fe4b 	bl	8000544 <__aeabi_i2d>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	f7ec fcf7 	bl	80002a8 <__aeabi_dsub>
 80138ba:	f1ba 0f00 	cmp.w	sl, #0
 80138be:	4606      	mov	r6, r0
 80138c0:	460f      	mov	r7, r1
 80138c2:	dd6d      	ble.n	80139a0 <__kernel_rem_pio2+0x250>
 80138c4:	1e62      	subs	r2, r4, #1
 80138c6:	ab0e      	add	r3, sp, #56	; 0x38
 80138c8:	9d04      	ldr	r5, [sp, #16]
 80138ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80138ce:	f1ca 0118 	rsb	r1, sl, #24
 80138d2:	fa40 f301 	asr.w	r3, r0, r1
 80138d6:	441d      	add	r5, r3
 80138d8:	408b      	lsls	r3, r1
 80138da:	1ac0      	subs	r0, r0, r3
 80138dc:	ab0e      	add	r3, sp, #56	; 0x38
 80138de:	9504      	str	r5, [sp, #16]
 80138e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80138e4:	f1ca 0317 	rsb	r3, sl, #23
 80138e8:	fa40 fb03 	asr.w	fp, r0, r3
 80138ec:	f1bb 0f00 	cmp.w	fp, #0
 80138f0:	dd65      	ble.n	80139be <__kernel_rem_pio2+0x26e>
 80138f2:	9b04      	ldr	r3, [sp, #16]
 80138f4:	2200      	movs	r2, #0
 80138f6:	3301      	adds	r3, #1
 80138f8:	9304      	str	r3, [sp, #16]
 80138fa:	4615      	mov	r5, r2
 80138fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013900:	4294      	cmp	r4, r2
 8013902:	f300 809c 	bgt.w	8013a3e <__kernel_rem_pio2+0x2ee>
 8013906:	f1ba 0f00 	cmp.w	sl, #0
 801390a:	dd07      	ble.n	801391c <__kernel_rem_pio2+0x1cc>
 801390c:	f1ba 0f01 	cmp.w	sl, #1
 8013910:	f000 80c0 	beq.w	8013a94 <__kernel_rem_pio2+0x344>
 8013914:	f1ba 0f02 	cmp.w	sl, #2
 8013918:	f000 80c6 	beq.w	8013aa8 <__kernel_rem_pio2+0x358>
 801391c:	f1bb 0f02 	cmp.w	fp, #2
 8013920:	d14d      	bne.n	80139be <__kernel_rem_pio2+0x26e>
 8013922:	4632      	mov	r2, r6
 8013924:	463b      	mov	r3, r7
 8013926:	4956      	ldr	r1, [pc, #344]	; (8013a80 <__kernel_rem_pio2+0x330>)
 8013928:	2000      	movs	r0, #0
 801392a:	f7ec fcbd 	bl	80002a8 <__aeabi_dsub>
 801392e:	4606      	mov	r6, r0
 8013930:	460f      	mov	r7, r1
 8013932:	2d00      	cmp	r5, #0
 8013934:	d043      	beq.n	80139be <__kernel_rem_pio2+0x26e>
 8013936:	4650      	mov	r0, sl
 8013938:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013a70 <__kernel_rem_pio2+0x320>
 801393c:	f000 fba0 	bl	8014080 <scalbn>
 8013940:	4630      	mov	r0, r6
 8013942:	4639      	mov	r1, r7
 8013944:	ec53 2b10 	vmov	r2, r3, d0
 8013948:	f7ec fcae 	bl	80002a8 <__aeabi_dsub>
 801394c:	4606      	mov	r6, r0
 801394e:	460f      	mov	r7, r1
 8013950:	e035      	b.n	80139be <__kernel_rem_pio2+0x26e>
 8013952:	4b4c      	ldr	r3, [pc, #304]	; (8013a84 <__kernel_rem_pio2+0x334>)
 8013954:	2200      	movs	r2, #0
 8013956:	4630      	mov	r0, r6
 8013958:	4639      	mov	r1, r7
 801395a:	f7ec fe5d 	bl	8000618 <__aeabi_dmul>
 801395e:	f7ed f90b 	bl	8000b78 <__aeabi_d2iz>
 8013962:	f7ec fdef 	bl	8000544 <__aeabi_i2d>
 8013966:	4602      	mov	r2, r0
 8013968:	460b      	mov	r3, r1
 801396a:	ec43 2b18 	vmov	d8, r2, r3
 801396e:	4b46      	ldr	r3, [pc, #280]	; (8013a88 <__kernel_rem_pio2+0x338>)
 8013970:	2200      	movs	r2, #0
 8013972:	f7ec fe51 	bl	8000618 <__aeabi_dmul>
 8013976:	4602      	mov	r2, r0
 8013978:	460b      	mov	r3, r1
 801397a:	4630      	mov	r0, r6
 801397c:	4639      	mov	r1, r7
 801397e:	f7ec fc93 	bl	80002a8 <__aeabi_dsub>
 8013982:	f7ed f8f9 	bl	8000b78 <__aeabi_d2iz>
 8013986:	e9d5 2300 	ldrd	r2, r3, [r5]
 801398a:	f84b 0b04 	str.w	r0, [fp], #4
 801398e:	ec51 0b18 	vmov	r0, r1, d8
 8013992:	f7ec fc8b 	bl	80002ac <__adddf3>
 8013996:	f109 39ff 	add.w	r9, r9, #4294967295
 801399a:	4606      	mov	r6, r0
 801399c:	460f      	mov	r7, r1
 801399e:	e75b      	b.n	8013858 <__kernel_rem_pio2+0x108>
 80139a0:	d106      	bne.n	80139b0 <__kernel_rem_pio2+0x260>
 80139a2:	1e63      	subs	r3, r4, #1
 80139a4:	aa0e      	add	r2, sp, #56	; 0x38
 80139a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80139aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80139ae:	e79d      	b.n	80138ec <__kernel_rem_pio2+0x19c>
 80139b0:	4b36      	ldr	r3, [pc, #216]	; (8013a8c <__kernel_rem_pio2+0x33c>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	f7ed f8b6 	bl	8000b24 <__aeabi_dcmpge>
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d13d      	bne.n	8013a38 <__kernel_rem_pio2+0x2e8>
 80139bc:	4683      	mov	fp, r0
 80139be:	2200      	movs	r2, #0
 80139c0:	2300      	movs	r3, #0
 80139c2:	4630      	mov	r0, r6
 80139c4:	4639      	mov	r1, r7
 80139c6:	f7ed f88f 	bl	8000ae8 <__aeabi_dcmpeq>
 80139ca:	2800      	cmp	r0, #0
 80139cc:	f000 80c0 	beq.w	8013b50 <__kernel_rem_pio2+0x400>
 80139d0:	1e65      	subs	r5, r4, #1
 80139d2:	462b      	mov	r3, r5
 80139d4:	2200      	movs	r2, #0
 80139d6:	9902      	ldr	r1, [sp, #8]
 80139d8:	428b      	cmp	r3, r1
 80139da:	da6c      	bge.n	8013ab6 <__kernel_rem_pio2+0x366>
 80139dc:	2a00      	cmp	r2, #0
 80139de:	f000 8089 	beq.w	8013af4 <__kernel_rem_pio2+0x3a4>
 80139e2:	ab0e      	add	r3, sp, #56	; 0x38
 80139e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80139e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f000 80ad 	beq.w	8013b4c <__kernel_rem_pio2+0x3fc>
 80139f2:	4650      	mov	r0, sl
 80139f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013a70 <__kernel_rem_pio2+0x320>
 80139f8:	f000 fb42 	bl	8014080 <scalbn>
 80139fc:	ab9a      	add	r3, sp, #616	; 0x268
 80139fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013a02:	ec57 6b10 	vmov	r6, r7, d0
 8013a06:	00ec      	lsls	r4, r5, #3
 8013a08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8013a0c:	46aa      	mov	sl, r5
 8013a0e:	f1ba 0f00 	cmp.w	sl, #0
 8013a12:	f280 80d6 	bge.w	8013bc2 <__kernel_rem_pio2+0x472>
 8013a16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013a68 <__kernel_rem_pio2+0x318>
 8013a1a:	462e      	mov	r6, r5
 8013a1c:	2e00      	cmp	r6, #0
 8013a1e:	f2c0 8104 	blt.w	8013c2a <__kernel_rem_pio2+0x4da>
 8013a22:	ab72      	add	r3, sp, #456	; 0x1c8
 8013a24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013a28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013a90 <__kernel_rem_pio2+0x340>
 8013a2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013a30:	f04f 0800 	mov.w	r8, #0
 8013a34:	1baf      	subs	r7, r5, r6
 8013a36:	e0ea      	b.n	8013c0e <__kernel_rem_pio2+0x4be>
 8013a38:	f04f 0b02 	mov.w	fp, #2
 8013a3c:	e759      	b.n	80138f2 <__kernel_rem_pio2+0x1a2>
 8013a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8013a42:	b955      	cbnz	r5, 8013a5a <__kernel_rem_pio2+0x30a>
 8013a44:	b123      	cbz	r3, 8013a50 <__kernel_rem_pio2+0x300>
 8013a46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013a4a:	f8c8 3000 	str.w	r3, [r8]
 8013a4e:	2301      	movs	r3, #1
 8013a50:	3201      	adds	r2, #1
 8013a52:	f108 0804 	add.w	r8, r8, #4
 8013a56:	461d      	mov	r5, r3
 8013a58:	e752      	b.n	8013900 <__kernel_rem_pio2+0x1b0>
 8013a5a:	1acb      	subs	r3, r1, r3
 8013a5c:	f8c8 3000 	str.w	r3, [r8]
 8013a60:	462b      	mov	r3, r5
 8013a62:	e7f5      	b.n	8013a50 <__kernel_rem_pio2+0x300>
 8013a64:	f3af 8000 	nop.w
	...
 8013a74:	3ff00000 	.word	0x3ff00000
 8013a78:	08014de0 	.word	0x08014de0
 8013a7c:	40200000 	.word	0x40200000
 8013a80:	3ff00000 	.word	0x3ff00000
 8013a84:	3e700000 	.word	0x3e700000
 8013a88:	41700000 	.word	0x41700000
 8013a8c:	3fe00000 	.word	0x3fe00000
 8013a90:	08014da0 	.word	0x08014da0
 8013a94:	1e62      	subs	r2, r4, #1
 8013a96:	ab0e      	add	r3, sp, #56	; 0x38
 8013a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013aa0:	a90e      	add	r1, sp, #56	; 0x38
 8013aa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013aa6:	e739      	b.n	801391c <__kernel_rem_pio2+0x1cc>
 8013aa8:	1e62      	subs	r2, r4, #1
 8013aaa:	ab0e      	add	r3, sp, #56	; 0x38
 8013aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ab0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013ab4:	e7f4      	b.n	8013aa0 <__kernel_rem_pio2+0x350>
 8013ab6:	a90e      	add	r1, sp, #56	; 0x38
 8013ab8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013abc:	3b01      	subs	r3, #1
 8013abe:	430a      	orrs	r2, r1
 8013ac0:	e789      	b.n	80139d6 <__kernel_rem_pio2+0x286>
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013ac8:	2900      	cmp	r1, #0
 8013aca:	d0fa      	beq.n	8013ac2 <__kernel_rem_pio2+0x372>
 8013acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ace:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013ad2:	446a      	add	r2, sp
 8013ad4:	3a98      	subs	r2, #152	; 0x98
 8013ad6:	920a      	str	r2, [sp, #40]	; 0x28
 8013ad8:	9a08      	ldr	r2, [sp, #32]
 8013ada:	18e3      	adds	r3, r4, r3
 8013adc:	18a5      	adds	r5, r4, r2
 8013ade:	aa22      	add	r2, sp, #136	; 0x88
 8013ae0:	f104 0801 	add.w	r8, r4, #1
 8013ae4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013ae8:	9304      	str	r3, [sp, #16]
 8013aea:	9b04      	ldr	r3, [sp, #16]
 8013aec:	4543      	cmp	r3, r8
 8013aee:	da04      	bge.n	8013afa <__kernel_rem_pio2+0x3aa>
 8013af0:	461c      	mov	r4, r3
 8013af2:	e6a3      	b.n	801383c <__kernel_rem_pio2+0xec>
 8013af4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013af6:	2301      	movs	r3, #1
 8013af8:	e7e4      	b.n	8013ac4 <__kernel_rem_pio2+0x374>
 8013afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013afc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013b00:	f7ec fd20 	bl	8000544 <__aeabi_i2d>
 8013b04:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b0a:	46ab      	mov	fp, r5
 8013b0c:	461c      	mov	r4, r3
 8013b0e:	f04f 0900 	mov.w	r9, #0
 8013b12:	2600      	movs	r6, #0
 8013b14:	2700      	movs	r7, #0
 8013b16:	9b06      	ldr	r3, [sp, #24]
 8013b18:	4599      	cmp	r9, r3
 8013b1a:	dd06      	ble.n	8013b2a <__kernel_rem_pio2+0x3da>
 8013b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013b22:	f108 0801 	add.w	r8, r8, #1
 8013b26:	930a      	str	r3, [sp, #40]	; 0x28
 8013b28:	e7df      	b.n	8013aea <__kernel_rem_pio2+0x39a>
 8013b2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013b2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013b32:	f7ec fd71 	bl	8000618 <__aeabi_dmul>
 8013b36:	4602      	mov	r2, r0
 8013b38:	460b      	mov	r3, r1
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	f7ec fbb5 	bl	80002ac <__adddf3>
 8013b42:	f109 0901 	add.w	r9, r9, #1
 8013b46:	4606      	mov	r6, r0
 8013b48:	460f      	mov	r7, r1
 8013b4a:	e7e4      	b.n	8013b16 <__kernel_rem_pio2+0x3c6>
 8013b4c:	3d01      	subs	r5, #1
 8013b4e:	e748      	b.n	80139e2 <__kernel_rem_pio2+0x292>
 8013b50:	ec47 6b10 	vmov	d0, r6, r7
 8013b54:	f1ca 0000 	rsb	r0, sl, #0
 8013b58:	f000 fa92 	bl	8014080 <scalbn>
 8013b5c:	ec57 6b10 	vmov	r6, r7, d0
 8013b60:	4ba0      	ldr	r3, [pc, #640]	; (8013de4 <__kernel_rem_pio2+0x694>)
 8013b62:	ee10 0a10 	vmov	r0, s0
 8013b66:	2200      	movs	r2, #0
 8013b68:	4639      	mov	r1, r7
 8013b6a:	f7ec ffdb 	bl	8000b24 <__aeabi_dcmpge>
 8013b6e:	b1f8      	cbz	r0, 8013bb0 <__kernel_rem_pio2+0x460>
 8013b70:	4b9d      	ldr	r3, [pc, #628]	; (8013de8 <__kernel_rem_pio2+0x698>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	4630      	mov	r0, r6
 8013b76:	4639      	mov	r1, r7
 8013b78:	f7ec fd4e 	bl	8000618 <__aeabi_dmul>
 8013b7c:	f7ec fffc 	bl	8000b78 <__aeabi_d2iz>
 8013b80:	4680      	mov	r8, r0
 8013b82:	f7ec fcdf 	bl	8000544 <__aeabi_i2d>
 8013b86:	4b97      	ldr	r3, [pc, #604]	; (8013de4 <__kernel_rem_pio2+0x694>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f7ec fd45 	bl	8000618 <__aeabi_dmul>
 8013b8e:	460b      	mov	r3, r1
 8013b90:	4602      	mov	r2, r0
 8013b92:	4639      	mov	r1, r7
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7ec fb87 	bl	80002a8 <__aeabi_dsub>
 8013b9a:	f7ec ffed 	bl	8000b78 <__aeabi_d2iz>
 8013b9e:	1c65      	adds	r5, r4, #1
 8013ba0:	ab0e      	add	r3, sp, #56	; 0x38
 8013ba2:	f10a 0a18 	add.w	sl, sl, #24
 8013ba6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013baa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013bae:	e720      	b.n	80139f2 <__kernel_rem_pio2+0x2a2>
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	4639      	mov	r1, r7
 8013bb4:	f7ec ffe0 	bl	8000b78 <__aeabi_d2iz>
 8013bb8:	ab0e      	add	r3, sp, #56	; 0x38
 8013bba:	4625      	mov	r5, r4
 8013bbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013bc0:	e717      	b.n	80139f2 <__kernel_rem_pio2+0x2a2>
 8013bc2:	ab0e      	add	r3, sp, #56	; 0x38
 8013bc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013bc8:	f7ec fcbc 	bl	8000544 <__aeabi_i2d>
 8013bcc:	4632      	mov	r2, r6
 8013bce:	463b      	mov	r3, r7
 8013bd0:	f7ec fd22 	bl	8000618 <__aeabi_dmul>
 8013bd4:	4b84      	ldr	r3, [pc, #528]	; (8013de8 <__kernel_rem_pio2+0x698>)
 8013bd6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8013bda:	2200      	movs	r2, #0
 8013bdc:	4630      	mov	r0, r6
 8013bde:	4639      	mov	r1, r7
 8013be0:	f7ec fd1a 	bl	8000618 <__aeabi_dmul>
 8013be4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	e70f      	b.n	8013a0e <__kernel_rem_pio2+0x2be>
 8013bee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013bf2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013bf6:	f7ec fd0f 	bl	8000618 <__aeabi_dmul>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c02:	f7ec fb53 	bl	80002ac <__adddf3>
 8013c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c0a:	f108 0801 	add.w	r8, r8, #1
 8013c0e:	9b02      	ldr	r3, [sp, #8]
 8013c10:	4598      	cmp	r8, r3
 8013c12:	dc01      	bgt.n	8013c18 <__kernel_rem_pio2+0x4c8>
 8013c14:	45b8      	cmp	r8, r7
 8013c16:	ddea      	ble.n	8013bee <__kernel_rem_pio2+0x49e>
 8013c18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013c1c:	ab4a      	add	r3, sp, #296	; 0x128
 8013c1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013c22:	ed87 7b00 	vstr	d7, [r7]
 8013c26:	3e01      	subs	r6, #1
 8013c28:	e6f8      	b.n	8013a1c <__kernel_rem_pio2+0x2cc>
 8013c2a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	dc0b      	bgt.n	8013c48 <__kernel_rem_pio2+0x4f8>
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	dc35      	bgt.n	8013ca0 <__kernel_rem_pio2+0x550>
 8013c34:	d059      	beq.n	8013cea <__kernel_rem_pio2+0x59a>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	f003 0007 	and.w	r0, r3, #7
 8013c3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013c40:	ecbd 8b02 	vpop	{d8}
 8013c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013c4a:	2b03      	cmp	r3, #3
 8013c4c:	d1f3      	bne.n	8013c36 <__kernel_rem_pio2+0x4e6>
 8013c4e:	ab4a      	add	r3, sp, #296	; 0x128
 8013c50:	4423      	add	r3, r4
 8013c52:	9306      	str	r3, [sp, #24]
 8013c54:	461c      	mov	r4, r3
 8013c56:	469a      	mov	sl, r3
 8013c58:	9502      	str	r5, [sp, #8]
 8013c5a:	9b02      	ldr	r3, [sp, #8]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013c62:	dc6b      	bgt.n	8013d3c <__kernel_rem_pio2+0x5ec>
 8013c64:	46aa      	mov	sl, r5
 8013c66:	f1ba 0f01 	cmp.w	sl, #1
 8013c6a:	f1a4 0408 	sub.w	r4, r4, #8
 8013c6e:	f300 8085 	bgt.w	8013d7c <__kernel_rem_pio2+0x62c>
 8013c72:	9c06      	ldr	r4, [sp, #24]
 8013c74:	2000      	movs	r0, #0
 8013c76:	3408      	adds	r4, #8
 8013c78:	2100      	movs	r1, #0
 8013c7a:	2d01      	cmp	r5, #1
 8013c7c:	f300 809d 	bgt.w	8013dba <__kernel_rem_pio2+0x66a>
 8013c80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013c84:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013c88:	f1bb 0f00 	cmp.w	fp, #0
 8013c8c:	f040 809b 	bne.w	8013dc6 <__kernel_rem_pio2+0x676>
 8013c90:	9b01      	ldr	r3, [sp, #4]
 8013c92:	e9c3 5600 	strd	r5, r6, [r3]
 8013c96:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013c9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013c9e:	e7ca      	b.n	8013c36 <__kernel_rem_pio2+0x4e6>
 8013ca0:	3408      	adds	r4, #8
 8013ca2:	ab4a      	add	r3, sp, #296	; 0x128
 8013ca4:	441c      	add	r4, r3
 8013ca6:	462e      	mov	r6, r5
 8013ca8:	2000      	movs	r0, #0
 8013caa:	2100      	movs	r1, #0
 8013cac:	2e00      	cmp	r6, #0
 8013cae:	da36      	bge.n	8013d1e <__kernel_rem_pio2+0x5ce>
 8013cb0:	f1bb 0f00 	cmp.w	fp, #0
 8013cb4:	d039      	beq.n	8013d2a <__kernel_rem_pio2+0x5da>
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cbc:	9c01      	ldr	r4, [sp, #4]
 8013cbe:	e9c4 2300 	strd	r2, r3, [r4]
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	460b      	mov	r3, r1
 8013cc6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013cca:	f7ec faed 	bl	80002a8 <__aeabi_dsub>
 8013cce:	ae4c      	add	r6, sp, #304	; 0x130
 8013cd0:	2401      	movs	r4, #1
 8013cd2:	42a5      	cmp	r5, r4
 8013cd4:	da2c      	bge.n	8013d30 <__kernel_rem_pio2+0x5e0>
 8013cd6:	f1bb 0f00 	cmp.w	fp, #0
 8013cda:	d002      	beq.n	8013ce2 <__kernel_rem_pio2+0x592>
 8013cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	9b01      	ldr	r3, [sp, #4]
 8013ce4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013ce8:	e7a5      	b.n	8013c36 <__kernel_rem_pio2+0x4e6>
 8013cea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013cee:	eb0d 0403 	add.w	r4, sp, r3
 8013cf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	2d00      	cmp	r5, #0
 8013cfc:	da09      	bge.n	8013d12 <__kernel_rem_pio2+0x5c2>
 8013cfe:	f1bb 0f00 	cmp.w	fp, #0
 8013d02:	d002      	beq.n	8013d0a <__kernel_rem_pio2+0x5ba>
 8013d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d08:	4619      	mov	r1, r3
 8013d0a:	9b01      	ldr	r3, [sp, #4]
 8013d0c:	e9c3 0100 	strd	r0, r1, [r3]
 8013d10:	e791      	b.n	8013c36 <__kernel_rem_pio2+0x4e6>
 8013d12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d16:	f7ec fac9 	bl	80002ac <__adddf3>
 8013d1a:	3d01      	subs	r5, #1
 8013d1c:	e7ed      	b.n	8013cfa <__kernel_rem_pio2+0x5aa>
 8013d1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d22:	f7ec fac3 	bl	80002ac <__adddf3>
 8013d26:	3e01      	subs	r6, #1
 8013d28:	e7c0      	b.n	8013cac <__kernel_rem_pio2+0x55c>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	e7c5      	b.n	8013cbc <__kernel_rem_pio2+0x56c>
 8013d30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013d34:	f7ec faba 	bl	80002ac <__adddf3>
 8013d38:	3401      	adds	r4, #1
 8013d3a:	e7ca      	b.n	8013cd2 <__kernel_rem_pio2+0x582>
 8013d3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013d40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013d44:	9b02      	ldr	r3, [sp, #8]
 8013d46:	3b01      	subs	r3, #1
 8013d48:	9302      	str	r3, [sp, #8]
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	463b      	mov	r3, r7
 8013d4e:	4640      	mov	r0, r8
 8013d50:	4649      	mov	r1, r9
 8013d52:	f7ec faab 	bl	80002ac <__adddf3>
 8013d56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	4640      	mov	r0, r8
 8013d60:	4649      	mov	r1, r9
 8013d62:	f7ec faa1 	bl	80002a8 <__aeabi_dsub>
 8013d66:	4632      	mov	r2, r6
 8013d68:	463b      	mov	r3, r7
 8013d6a:	f7ec fa9f 	bl	80002ac <__adddf3>
 8013d6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013d72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013d76:	ed8a 7b00 	vstr	d7, [sl]
 8013d7a:	e76e      	b.n	8013c5a <__kernel_rem_pio2+0x50a>
 8013d7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013d80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013d84:	4640      	mov	r0, r8
 8013d86:	4632      	mov	r2, r6
 8013d88:	463b      	mov	r3, r7
 8013d8a:	4649      	mov	r1, r9
 8013d8c:	f7ec fa8e 	bl	80002ac <__adddf3>
 8013d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	4640      	mov	r0, r8
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	f7ec fa84 	bl	80002a8 <__aeabi_dsub>
 8013da0:	4632      	mov	r2, r6
 8013da2:	463b      	mov	r3, r7
 8013da4:	f7ec fa82 	bl	80002ac <__adddf3>
 8013da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013dac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013db0:	ed84 7b00 	vstr	d7, [r4]
 8013db4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013db8:	e755      	b.n	8013c66 <__kernel_rem_pio2+0x516>
 8013dba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013dbe:	f7ec fa75 	bl	80002ac <__adddf3>
 8013dc2:	3d01      	subs	r5, #1
 8013dc4:	e759      	b.n	8013c7a <__kernel_rem_pio2+0x52a>
 8013dc6:	9b01      	ldr	r3, [sp, #4]
 8013dc8:	9a01      	ldr	r2, [sp, #4]
 8013dca:	601d      	str	r5, [r3, #0]
 8013dcc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013dd0:	605c      	str	r4, [r3, #4]
 8013dd2:	609f      	str	r7, [r3, #8]
 8013dd4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013dd8:	60d3      	str	r3, [r2, #12]
 8013dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dde:	6110      	str	r0, [r2, #16]
 8013de0:	6153      	str	r3, [r2, #20]
 8013de2:	e728      	b.n	8013c36 <__kernel_rem_pio2+0x4e6>
 8013de4:	41700000 	.word	0x41700000
 8013de8:	3e700000 	.word	0x3e700000
 8013dec:	00000000 	.word	0x00000000

08013df0 <__kernel_sin>:
 8013df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df4:	ed2d 8b04 	vpush	{d8-d9}
 8013df8:	eeb0 8a41 	vmov.f32	s16, s2
 8013dfc:	eef0 8a61 	vmov.f32	s17, s3
 8013e00:	ec55 4b10 	vmov	r4, r5, d0
 8013e04:	b083      	sub	sp, #12
 8013e06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013e0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013e0e:	9001      	str	r0, [sp, #4]
 8013e10:	da06      	bge.n	8013e20 <__kernel_sin+0x30>
 8013e12:	ee10 0a10 	vmov	r0, s0
 8013e16:	4629      	mov	r1, r5
 8013e18:	f7ec feae 	bl	8000b78 <__aeabi_d2iz>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	d051      	beq.n	8013ec4 <__kernel_sin+0xd4>
 8013e20:	4622      	mov	r2, r4
 8013e22:	462b      	mov	r3, r5
 8013e24:	4620      	mov	r0, r4
 8013e26:	4629      	mov	r1, r5
 8013e28:	f7ec fbf6 	bl	8000618 <__aeabi_dmul>
 8013e2c:	4682      	mov	sl, r0
 8013e2e:	468b      	mov	fp, r1
 8013e30:	4602      	mov	r2, r0
 8013e32:	460b      	mov	r3, r1
 8013e34:	4620      	mov	r0, r4
 8013e36:	4629      	mov	r1, r5
 8013e38:	f7ec fbee 	bl	8000618 <__aeabi_dmul>
 8013e3c:	a341      	add	r3, pc, #260	; (adr r3, 8013f44 <__kernel_sin+0x154>)
 8013e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e42:	4680      	mov	r8, r0
 8013e44:	4689      	mov	r9, r1
 8013e46:	4650      	mov	r0, sl
 8013e48:	4659      	mov	r1, fp
 8013e4a:	f7ec fbe5 	bl	8000618 <__aeabi_dmul>
 8013e4e:	a33f      	add	r3, pc, #252	; (adr r3, 8013f4c <__kernel_sin+0x15c>)
 8013e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e54:	f7ec fa28 	bl	80002a8 <__aeabi_dsub>
 8013e58:	4652      	mov	r2, sl
 8013e5a:	465b      	mov	r3, fp
 8013e5c:	f7ec fbdc 	bl	8000618 <__aeabi_dmul>
 8013e60:	a33c      	add	r3, pc, #240	; (adr r3, 8013f54 <__kernel_sin+0x164>)
 8013e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e66:	f7ec fa21 	bl	80002ac <__adddf3>
 8013e6a:	4652      	mov	r2, sl
 8013e6c:	465b      	mov	r3, fp
 8013e6e:	f7ec fbd3 	bl	8000618 <__aeabi_dmul>
 8013e72:	a33a      	add	r3, pc, #232	; (adr r3, 8013f5c <__kernel_sin+0x16c>)
 8013e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e78:	f7ec fa16 	bl	80002a8 <__aeabi_dsub>
 8013e7c:	4652      	mov	r2, sl
 8013e7e:	465b      	mov	r3, fp
 8013e80:	f7ec fbca 	bl	8000618 <__aeabi_dmul>
 8013e84:	a337      	add	r3, pc, #220	; (adr r3, 8013f64 <__kernel_sin+0x174>)
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	f7ec fa0f 	bl	80002ac <__adddf3>
 8013e8e:	9b01      	ldr	r3, [sp, #4]
 8013e90:	4606      	mov	r6, r0
 8013e92:	460f      	mov	r7, r1
 8013e94:	b9eb      	cbnz	r3, 8013ed2 <__kernel_sin+0xe2>
 8013e96:	4602      	mov	r2, r0
 8013e98:	460b      	mov	r3, r1
 8013e9a:	4650      	mov	r0, sl
 8013e9c:	4659      	mov	r1, fp
 8013e9e:	f7ec fbbb 	bl	8000618 <__aeabi_dmul>
 8013ea2:	a325      	add	r3, pc, #148	; (adr r3, 8013f38 <__kernel_sin+0x148>)
 8013ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea8:	f7ec f9fe 	bl	80002a8 <__aeabi_dsub>
 8013eac:	4642      	mov	r2, r8
 8013eae:	464b      	mov	r3, r9
 8013eb0:	f7ec fbb2 	bl	8000618 <__aeabi_dmul>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	4620      	mov	r0, r4
 8013eba:	4629      	mov	r1, r5
 8013ebc:	f7ec f9f6 	bl	80002ac <__adddf3>
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	460d      	mov	r5, r1
 8013ec4:	ec45 4b10 	vmov	d0, r4, r5
 8013ec8:	b003      	add	sp, #12
 8013eca:	ecbd 8b04 	vpop	{d8-d9}
 8013ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed2:	4b1b      	ldr	r3, [pc, #108]	; (8013f40 <__kernel_sin+0x150>)
 8013ed4:	ec51 0b18 	vmov	r0, r1, d8
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f7ec fb9d 	bl	8000618 <__aeabi_dmul>
 8013ede:	4632      	mov	r2, r6
 8013ee0:	ec41 0b19 	vmov	d9, r0, r1
 8013ee4:	463b      	mov	r3, r7
 8013ee6:	4640      	mov	r0, r8
 8013ee8:	4649      	mov	r1, r9
 8013eea:	f7ec fb95 	bl	8000618 <__aeabi_dmul>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	ec51 0b19 	vmov	r0, r1, d9
 8013ef6:	f7ec f9d7 	bl	80002a8 <__aeabi_dsub>
 8013efa:	4652      	mov	r2, sl
 8013efc:	465b      	mov	r3, fp
 8013efe:	f7ec fb8b 	bl	8000618 <__aeabi_dmul>
 8013f02:	ec53 2b18 	vmov	r2, r3, d8
 8013f06:	f7ec f9cf 	bl	80002a8 <__aeabi_dsub>
 8013f0a:	a30b      	add	r3, pc, #44	; (adr r3, 8013f38 <__kernel_sin+0x148>)
 8013f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f10:	4606      	mov	r6, r0
 8013f12:	460f      	mov	r7, r1
 8013f14:	4640      	mov	r0, r8
 8013f16:	4649      	mov	r1, r9
 8013f18:	f7ec fb7e 	bl	8000618 <__aeabi_dmul>
 8013f1c:	4602      	mov	r2, r0
 8013f1e:	460b      	mov	r3, r1
 8013f20:	4630      	mov	r0, r6
 8013f22:	4639      	mov	r1, r7
 8013f24:	f7ec f9c2 	bl	80002ac <__adddf3>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	4629      	mov	r1, r5
 8013f30:	f7ec f9ba 	bl	80002a8 <__aeabi_dsub>
 8013f34:	e7c4      	b.n	8013ec0 <__kernel_sin+0xd0>
 8013f36:	bf00      	nop
 8013f38:	55555549 	.word	0x55555549
 8013f3c:	3fc55555 	.word	0x3fc55555
 8013f40:	3fe00000 	.word	0x3fe00000
 8013f44:	5acfd57c 	.word	0x5acfd57c
 8013f48:	3de5d93a 	.word	0x3de5d93a
 8013f4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013f50:	3e5ae5e6 	.word	0x3e5ae5e6
 8013f54:	57b1fe7d 	.word	0x57b1fe7d
 8013f58:	3ec71de3 	.word	0x3ec71de3
 8013f5c:	19c161d5 	.word	0x19c161d5
 8013f60:	3f2a01a0 	.word	0x3f2a01a0
 8013f64:	1110f8a6 	.word	0x1110f8a6
 8013f68:	3f811111 	.word	0x3f811111

08013f6c <fabs>:
 8013f6c:	ec51 0b10 	vmov	r0, r1, d0
 8013f70:	ee10 2a10 	vmov	r2, s0
 8013f74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f78:	ec43 2b10 	vmov	d0, r2, r3
 8013f7c:	4770      	bx	lr
	...

08013f80 <floor>:
 8013f80:	ec51 0b10 	vmov	r0, r1, d0
 8013f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013f8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013f90:	2e13      	cmp	r6, #19
 8013f92:	ee10 5a10 	vmov	r5, s0
 8013f96:	ee10 8a10 	vmov	r8, s0
 8013f9a:	460c      	mov	r4, r1
 8013f9c:	dc32      	bgt.n	8014004 <floor+0x84>
 8013f9e:	2e00      	cmp	r6, #0
 8013fa0:	da14      	bge.n	8013fcc <floor+0x4c>
 8013fa2:	a333      	add	r3, pc, #204	; (adr r3, 8014070 <floor+0xf0>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	f7ec f980 	bl	80002ac <__adddf3>
 8013fac:	2200      	movs	r2, #0
 8013fae:	2300      	movs	r3, #0
 8013fb0:	f7ec fdc2 	bl	8000b38 <__aeabi_dcmpgt>
 8013fb4:	b138      	cbz	r0, 8013fc6 <floor+0x46>
 8013fb6:	2c00      	cmp	r4, #0
 8013fb8:	da57      	bge.n	801406a <floor+0xea>
 8013fba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013fbe:	431d      	orrs	r5, r3
 8013fc0:	d001      	beq.n	8013fc6 <floor+0x46>
 8013fc2:	4c2d      	ldr	r4, [pc, #180]	; (8014078 <floor+0xf8>)
 8013fc4:	2500      	movs	r5, #0
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	4628      	mov	r0, r5
 8013fca:	e025      	b.n	8014018 <floor+0x98>
 8013fcc:	4f2b      	ldr	r7, [pc, #172]	; (801407c <floor+0xfc>)
 8013fce:	4137      	asrs	r7, r6
 8013fd0:	ea01 0307 	and.w	r3, r1, r7
 8013fd4:	4303      	orrs	r3, r0
 8013fd6:	d01f      	beq.n	8014018 <floor+0x98>
 8013fd8:	a325      	add	r3, pc, #148	; (adr r3, 8014070 <floor+0xf0>)
 8013fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fde:	f7ec f965 	bl	80002ac <__adddf3>
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f7ec fda7 	bl	8000b38 <__aeabi_dcmpgt>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d0eb      	beq.n	8013fc6 <floor+0x46>
 8013fee:	2c00      	cmp	r4, #0
 8013ff0:	bfbe      	ittt	lt
 8013ff2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013ff6:	fa43 f606 	asrlt.w	r6, r3, r6
 8013ffa:	19a4      	addlt	r4, r4, r6
 8013ffc:	ea24 0407 	bic.w	r4, r4, r7
 8014000:	2500      	movs	r5, #0
 8014002:	e7e0      	b.n	8013fc6 <floor+0x46>
 8014004:	2e33      	cmp	r6, #51	; 0x33
 8014006:	dd0b      	ble.n	8014020 <floor+0xa0>
 8014008:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801400c:	d104      	bne.n	8014018 <floor+0x98>
 801400e:	ee10 2a10 	vmov	r2, s0
 8014012:	460b      	mov	r3, r1
 8014014:	f7ec f94a 	bl	80002ac <__adddf3>
 8014018:	ec41 0b10 	vmov	d0, r0, r1
 801401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014020:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014024:	f04f 33ff 	mov.w	r3, #4294967295
 8014028:	fa23 f707 	lsr.w	r7, r3, r7
 801402c:	4207      	tst	r7, r0
 801402e:	d0f3      	beq.n	8014018 <floor+0x98>
 8014030:	a30f      	add	r3, pc, #60	; (adr r3, 8014070 <floor+0xf0>)
 8014032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014036:	f7ec f939 	bl	80002ac <__adddf3>
 801403a:	2200      	movs	r2, #0
 801403c:	2300      	movs	r3, #0
 801403e:	f7ec fd7b 	bl	8000b38 <__aeabi_dcmpgt>
 8014042:	2800      	cmp	r0, #0
 8014044:	d0bf      	beq.n	8013fc6 <floor+0x46>
 8014046:	2c00      	cmp	r4, #0
 8014048:	da02      	bge.n	8014050 <floor+0xd0>
 801404a:	2e14      	cmp	r6, #20
 801404c:	d103      	bne.n	8014056 <floor+0xd6>
 801404e:	3401      	adds	r4, #1
 8014050:	ea25 0507 	bic.w	r5, r5, r7
 8014054:	e7b7      	b.n	8013fc6 <floor+0x46>
 8014056:	2301      	movs	r3, #1
 8014058:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801405c:	fa03 f606 	lsl.w	r6, r3, r6
 8014060:	4435      	add	r5, r6
 8014062:	4545      	cmp	r5, r8
 8014064:	bf38      	it	cc
 8014066:	18e4      	addcc	r4, r4, r3
 8014068:	e7f2      	b.n	8014050 <floor+0xd0>
 801406a:	2500      	movs	r5, #0
 801406c:	462c      	mov	r4, r5
 801406e:	e7aa      	b.n	8013fc6 <floor+0x46>
 8014070:	8800759c 	.word	0x8800759c
 8014074:	7e37e43c 	.word	0x7e37e43c
 8014078:	bff00000 	.word	0xbff00000
 801407c:	000fffff 	.word	0x000fffff

08014080 <scalbn>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	ec55 4b10 	vmov	r4, r5, d0
 8014086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801408a:	4606      	mov	r6, r0
 801408c:	462b      	mov	r3, r5
 801408e:	b99a      	cbnz	r2, 80140b8 <scalbn+0x38>
 8014090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014094:	4323      	orrs	r3, r4
 8014096:	d036      	beq.n	8014106 <scalbn+0x86>
 8014098:	4b39      	ldr	r3, [pc, #228]	; (8014180 <scalbn+0x100>)
 801409a:	4629      	mov	r1, r5
 801409c:	ee10 0a10 	vmov	r0, s0
 80140a0:	2200      	movs	r2, #0
 80140a2:	f7ec fab9 	bl	8000618 <__aeabi_dmul>
 80140a6:	4b37      	ldr	r3, [pc, #220]	; (8014184 <scalbn+0x104>)
 80140a8:	429e      	cmp	r6, r3
 80140aa:	4604      	mov	r4, r0
 80140ac:	460d      	mov	r5, r1
 80140ae:	da10      	bge.n	80140d2 <scalbn+0x52>
 80140b0:	a32b      	add	r3, pc, #172	; (adr r3, 8014160 <scalbn+0xe0>)
 80140b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b6:	e03a      	b.n	801412e <scalbn+0xae>
 80140b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80140bc:	428a      	cmp	r2, r1
 80140be:	d10c      	bne.n	80140da <scalbn+0x5a>
 80140c0:	ee10 2a10 	vmov	r2, s0
 80140c4:	4620      	mov	r0, r4
 80140c6:	4629      	mov	r1, r5
 80140c8:	f7ec f8f0 	bl	80002ac <__adddf3>
 80140cc:	4604      	mov	r4, r0
 80140ce:	460d      	mov	r5, r1
 80140d0:	e019      	b.n	8014106 <scalbn+0x86>
 80140d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80140d6:	460b      	mov	r3, r1
 80140d8:	3a36      	subs	r2, #54	; 0x36
 80140da:	4432      	add	r2, r6
 80140dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80140e0:	428a      	cmp	r2, r1
 80140e2:	dd08      	ble.n	80140f6 <scalbn+0x76>
 80140e4:	2d00      	cmp	r5, #0
 80140e6:	a120      	add	r1, pc, #128	; (adr r1, 8014168 <scalbn+0xe8>)
 80140e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140ec:	da1c      	bge.n	8014128 <scalbn+0xa8>
 80140ee:	a120      	add	r1, pc, #128	; (adr r1, 8014170 <scalbn+0xf0>)
 80140f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140f4:	e018      	b.n	8014128 <scalbn+0xa8>
 80140f6:	2a00      	cmp	r2, #0
 80140f8:	dd08      	ble.n	801410c <scalbn+0x8c>
 80140fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014106:	ec45 4b10 	vmov	d0, r4, r5
 801410a:	bd70      	pop	{r4, r5, r6, pc}
 801410c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014110:	da19      	bge.n	8014146 <scalbn+0xc6>
 8014112:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014116:	429e      	cmp	r6, r3
 8014118:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801411c:	dd0a      	ble.n	8014134 <scalbn+0xb4>
 801411e:	a112      	add	r1, pc, #72	; (adr r1, 8014168 <scalbn+0xe8>)
 8014120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d1e2      	bne.n	80140ee <scalbn+0x6e>
 8014128:	a30f      	add	r3, pc, #60	; (adr r3, 8014168 <scalbn+0xe8>)
 801412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412e:	f7ec fa73 	bl	8000618 <__aeabi_dmul>
 8014132:	e7cb      	b.n	80140cc <scalbn+0x4c>
 8014134:	a10a      	add	r1, pc, #40	; (adr r1, 8014160 <scalbn+0xe0>)
 8014136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d0b8      	beq.n	80140b0 <scalbn+0x30>
 801413e:	a10e      	add	r1, pc, #56	; (adr r1, 8014178 <scalbn+0xf8>)
 8014140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014144:	e7b4      	b.n	80140b0 <scalbn+0x30>
 8014146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801414a:	3236      	adds	r2, #54	; 0x36
 801414c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014150:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014154:	4620      	mov	r0, r4
 8014156:	4b0c      	ldr	r3, [pc, #48]	; (8014188 <scalbn+0x108>)
 8014158:	2200      	movs	r2, #0
 801415a:	e7e8      	b.n	801412e <scalbn+0xae>
 801415c:	f3af 8000 	nop.w
 8014160:	c2f8f359 	.word	0xc2f8f359
 8014164:	01a56e1f 	.word	0x01a56e1f
 8014168:	8800759c 	.word	0x8800759c
 801416c:	7e37e43c 	.word	0x7e37e43c
 8014170:	8800759c 	.word	0x8800759c
 8014174:	fe37e43c 	.word	0xfe37e43c
 8014178:	c2f8f359 	.word	0xc2f8f359
 801417c:	81a56e1f 	.word	0x81a56e1f
 8014180:	43500000 	.word	0x43500000
 8014184:	ffff3cb0 	.word	0xffff3cb0
 8014188:	3c900000 	.word	0x3c900000

0801418c <_close>:
 801418c:	4b02      	ldr	r3, [pc, #8]	; (8014198 <_close+0xc>)
 801418e:	2258      	movs	r2, #88	; 0x58
 8014190:	601a      	str	r2, [r3, #0]
 8014192:	f04f 30ff 	mov.w	r0, #4294967295
 8014196:	4770      	bx	lr
 8014198:	20005760 	.word	0x20005760

0801419c <_fstat>:
 801419c:	4b02      	ldr	r3, [pc, #8]	; (80141a8 <_fstat+0xc>)
 801419e:	2258      	movs	r2, #88	; 0x58
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	f04f 30ff 	mov.w	r0, #4294967295
 80141a6:	4770      	bx	lr
 80141a8:	20005760 	.word	0x20005760

080141ac <_getpid>:
 80141ac:	4b02      	ldr	r3, [pc, #8]	; (80141b8 <_getpid+0xc>)
 80141ae:	2258      	movs	r2, #88	; 0x58
 80141b0:	601a      	str	r2, [r3, #0]
 80141b2:	f04f 30ff 	mov.w	r0, #4294967295
 80141b6:	4770      	bx	lr
 80141b8:	20005760 	.word	0x20005760

080141bc <_isatty>:
 80141bc:	4b02      	ldr	r3, [pc, #8]	; (80141c8 <_isatty+0xc>)
 80141be:	2258      	movs	r2, #88	; 0x58
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	2000      	movs	r0, #0
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop
 80141c8:	20005760 	.word	0x20005760

080141cc <_kill>:
 80141cc:	4b02      	ldr	r3, [pc, #8]	; (80141d8 <_kill+0xc>)
 80141ce:	2258      	movs	r2, #88	; 0x58
 80141d0:	601a      	str	r2, [r3, #0]
 80141d2:	f04f 30ff 	mov.w	r0, #4294967295
 80141d6:	4770      	bx	lr
 80141d8:	20005760 	.word	0x20005760

080141dc <_lseek>:
 80141dc:	4b02      	ldr	r3, [pc, #8]	; (80141e8 <_lseek+0xc>)
 80141de:	2258      	movs	r2, #88	; 0x58
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	f04f 30ff 	mov.w	r0, #4294967295
 80141e6:	4770      	bx	lr
 80141e8:	20005760 	.word	0x20005760

080141ec <_read>:
 80141ec:	4b02      	ldr	r3, [pc, #8]	; (80141f8 <_read+0xc>)
 80141ee:	2258      	movs	r2, #88	; 0x58
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	f04f 30ff 	mov.w	r0, #4294967295
 80141f6:	4770      	bx	lr
 80141f8:	20005760 	.word	0x20005760

080141fc <_sbrk>:
 80141fc:	4a04      	ldr	r2, [pc, #16]	; (8014210 <_sbrk+0x14>)
 80141fe:	6811      	ldr	r1, [r2, #0]
 8014200:	4603      	mov	r3, r0
 8014202:	b909      	cbnz	r1, 8014208 <_sbrk+0xc>
 8014204:	4903      	ldr	r1, [pc, #12]	; (8014214 <_sbrk+0x18>)
 8014206:	6011      	str	r1, [r2, #0]
 8014208:	6810      	ldr	r0, [r2, #0]
 801420a:	4403      	add	r3, r0
 801420c:	6013      	str	r3, [r2, #0]
 801420e:	4770      	bx	lr
 8014210:	20005768 	.word	0x20005768
 8014214:	20005770 	.word	0x20005770

08014218 <_write>:
 8014218:	4b02      	ldr	r3, [pc, #8]	; (8014224 <_write+0xc>)
 801421a:	2258      	movs	r2, #88	; 0x58
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	f04f 30ff 	mov.w	r0, #4294967295
 8014222:	4770      	bx	lr
 8014224:	20005760 	.word	0x20005760

08014228 <_exit>:
 8014228:	e7fe      	b.n	8014228 <_exit>
	...

0801422c <_init>:
 801422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801422e:	bf00      	nop
 8014230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014232:	bc08      	pop	{r3}
 8014234:	469e      	mov	lr, r3
 8014236:	4770      	bx	lr

08014238 <_fini>:
 8014238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423a:	bf00      	nop
 801423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801423e:	bc08      	pop	{r3}
 8014240:	469e      	mov	lr, r3
 8014242:	4770      	bx	lr
