
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a424  0800a424  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a42c  0800a42c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000070  0800a4a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800a4a4  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bb8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee8  00000000  00000000  00041c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00045b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  000474b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bee  00000000  00000000  00048c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f502  00000000  00000000  0006e87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5e9d  00000000  00000000  0008dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f20  00000000  00000000  00173c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c5c 	.word	0x08009c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009c5c 	.word	0x08009c5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <MX_ADC1_Init+0xc0>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xbc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005e0:	f002 fd2c 	bl	800303c <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ea:	f001 f80d 	bl	8001608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0xc4>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f2:	2306      	movs	r3, #6
 80005f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fa:	237f      	movs	r3, #127	; 0x7f
 80005fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fe:	2304      	movs	r3, #4
 8000600:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xbc>)
 800060c:	f002 fe5e 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000616:	f000 fff7 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000308 	.word	0x20000308
 8000628:	50040000 	.word	0x50040000
 800062c:	43210000 	.word	0x43210000

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a0      	sub	sp, #128	; 0x80
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f008 fec7 	bl	80093e4 <memset>
  if(adcHandle->Instance==ADC1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_ADC_MspInit+0xf0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d15b      	bne.n	8000718 <HAL_ADC_MspInit+0xe8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000664:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000680:	2308      	movs	r3, #8
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f006 fa1c 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800069a:	f000 ffb5 	bl	8001608 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80006e6:	2330      	movs	r3, #48	; 0x30
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ea:	230b      	movs	r3, #11
 80006ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f003 fb68 	bl	8003dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8000700:	2302      	movs	r3, #2
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000704:	230b      	movs	r3, #11
 8000706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0xf8>)
 8000714:	f003 fb5c 	bl	8003dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3780      	adds	r7, #128	; 0x80
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b52      	ldr	r3, [pc, #328]	; (800088c <MX_GPIO_Init+0x160>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a51      	ldr	r2, [pc, #324]	; (800088c <MX_GPIO_Init+0x160>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b4f      	ldr	r3, [pc, #316]	; (800088c <MX_GPIO_Init+0x160>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <MX_GPIO_Init+0x160>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a4b      	ldr	r2, [pc, #300]	; (800088c <MX_GPIO_Init+0x160>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b49      	ldr	r3, [pc, #292]	; (800088c <MX_GPIO_Init+0x160>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b46      	ldr	r3, [pc, #280]	; (800088c <MX_GPIO_Init+0x160>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a45      	ldr	r2, [pc, #276]	; (800088c <MX_GPIO_Init+0x160>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <MX_GPIO_Init+0x160>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b40      	ldr	r3, [pc, #256]	; (800088c <MX_GPIO_Init+0x160>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a3f      	ldr	r2, [pc, #252]	; (800088c <MX_GPIO_Init+0x160>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_GPIO_Init+0x160>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f003 fd5c 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <MX_GPIO_Init+0x164>)
 80007b6:	f003 fd57 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2120      	movs	r1, #32
 80007be:	4834      	ldr	r0, [pc, #208]	; (8000890 <MX_GPIO_Init+0x164>)
 80007c0:	f003 fd52 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f003 faf9 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80007de:	2301      	movs	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_GPIO_Init+0x168>)
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4827      	ldr	r0, [pc, #156]	; (8000890 <MX_GPIO_Init+0x164>)
 80007f2:	f003 faed 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80007f6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f003 fadf 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f003 facf 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000832:	2310      	movs	r3, #16
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x164>)
 800084a:	f003 fac1 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000852:	2311      	movs	r3, #17
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_GPIO_Init+0x164>)
 8000866:	f003 fab3 	bl	8003dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_GPIO_Init+0x16c>)
 800087e:	f003 faa7 	bl	8003dd0 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400
 8000894:	10110000 	.word	0x10110000
 8000898:	48001c00 	.word	0x48001c00

0800089c <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2120      	movs	r1, #32
 80008aa:	4815      	ldr	r0, [pc, #84]	; (8000900 <onewireMasterWr_bit+0x64>)
 80008ac:	f003 fcdc 	bl	8004268 <HAL_GPIO_WritePin>
	uDelay(2);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f000 fc53 	bl	800115c <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <onewireMasterWr_bit+0x64>)
 80008bc:	f003 fcd4 	bl	8004268 <HAL_GPIO_WritePin>

	if (bit) {
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d00b      	beq.n	80008de <onewireMasterWr_bit+0x42>
		/* Writing a One */
		uDelay(2);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f000 fc48 	bl	800115c <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2120      	movs	r1, #32
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <onewireMasterWr_bit+0x64>)
 80008d2:	f003 fcc9 	bl	8004268 <HAL_GPIO_WritePin>
		uDelay(88);
 80008d6:	2058      	movs	r0, #88	; 0x58
 80008d8:	f000 fc40 	bl	800115c <uDelay>
 80008dc:	e007      	b.n	80008ee <onewireMasterWr_bit+0x52>
	}
	else {
		/* Writing a Zero */
		uDelay(90);
 80008de:	205a      	movs	r0, #90	; 0x5a
 80008e0:	f000 fc3c 	bl	800115c <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2120      	movs	r1, #32
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <onewireMasterWr_bit+0x64>)
 80008ea:	f003 fcbd 	bl	8004268 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2120      	movs	r1, #32
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <onewireMasterWr_bit+0x64>)
 80008f4:	f003 fcb8 	bl	8004268 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	48000400 	.word	0x48000400

08000904 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e00d      	b.n	8000930 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	fa42 f303 	asr.w	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffb9 	bl	800089c <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b07      	cmp	r3, #7
 8000934:	d9ee      	bls.n	8000914 <onewireMasterWr_byte+0x10>
	}
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d124      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d11f      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3302      	adds	r3, #2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11a      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3303      	adds	r3, #3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d115      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3304      	adds	r3, #4
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d110      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3305      	adds	r3, #5
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10b      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3306      	adds	r3, #6
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d106      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3307      	adds	r3, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d010      	beq.n	80009c2 <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 80009a0:	2308      	movs	r3, #8
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e009      	b.n	80009ba <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffa8 	bl	8000904 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f2      	bne.n	80009a6 <onewireMasterWr_romCode+0x66>
 80009c0:	e000      	b.n	80009c4 <onewireMasterWr_romCode+0x84>
		return;
 80009c2:	bf00      	nop
	}
}
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2120      	movs	r1, #32
 80009d6:	4817      	ldr	r0, [pc, #92]	; (8000a34 <onewireMasterRd_bit+0x68>)
 80009d8:	f003 fc46 	bl	8004268 <HAL_GPIO_WritePin>
	uDelay(2);
 80009dc:	2002      	movs	r0, #2
 80009de:	f000 fbbd 	bl	800115c <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <onewireMasterRd_bit+0x68>)
 80009e8:	f003 fc3e 	bl	8004268 <HAL_GPIO_WritePin>
	uDelay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f000 fbb5 	bl	800115c <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <onewireMasterRd_bit+0x68>)
 80009f8:	f003 fc36 	bl	8004268 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 80009fc:	200d      	movs	r0, #13
 80009fe:	f000 fbad 	bl	800115c <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000a02:	2120      	movs	r1, #32
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <onewireMasterRd_bit+0x68>)
 8000a06:	f003 fc17 	bl	8004238 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8000a0e:	204b      	movs	r0, #75	; 0x4b
 8000a10:	f000 fba4 	bl	800115c <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2120      	movs	r1, #32
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <onewireMasterRd_bit+0x68>)
 8000a1a:	f003 fc25 	bl	8004268 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	bf0c      	ite	eq
 8000a24:	2301      	moveq	r3, #1
 8000a26:	2300      	movne	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400

08000a38 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b20      	cmp	r3, #32
 8000a4a:	d902      	bls.n	8000a52 <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	e016      	b.n	8000a80 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	72fb      	strb	r3, [r7, #11]
 8000a56:	e00e      	b.n	8000a76 <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8000a58:	f7ff ffb8 	bl	80009cc <onewireMasterRd_bit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000a70:	7afb      	ldrb	r3, [r7, #11]
 8000a72:	3301      	adds	r3, #1
 8000a74:	72fb      	strb	r3, [r7, #11]
 8000a76:	7afa      	ldrb	r2, [r7, #11]
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d3ec      	bcc.n	8000a58 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2120      	movs	r1, #32
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <onewireMasterCheck_presence+0x58>)
 8000a94:	f003 fbe8 	bl	8004268 <HAL_GPIO_WritePin>
	uDelay(2000);
 8000a98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a9c:	f000 fb5e 	bl	800115c <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <onewireMasterCheck_presence+0x58>)
 8000aa6:	f003 fbdf 	bl	8004268 <HAL_GPIO_WritePin>
	uDelay(550);
 8000aaa:	f240 2026 	movw	r0, #550	; 0x226
 8000aae:	f000 fb55 	bl	800115c <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <onewireMasterCheck_presence+0x58>)
 8000ab8:	f003 fbd6 	bl	8004268 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(90);
 8000abc:	205a      	movs	r0, #90	; 0x5a
 8000abe:	f000 fb4d 	bl	800115c <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <onewireMasterCheck_presence+0x58>)
 8000ac6:	f003 fbb7 	bl	8004238 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	uDelay(550);
 8000ace:	f240 2026 	movw	r0, #550	; 0x226
 8000ad2:	f000 fb43 	bl	800115c <uDelay>

	return presence;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	603a      	str	r2, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	460b      	mov	r3, r1
 8000af2:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt		= 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow		= 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	77bb      	strb	r3, [r7, #30]
	uint8_t bitIdxLastZero	= 0xffU;
 8000afc:	23ff      	movs	r3, #255	; 0xff
 8000afe:	777b      	strb	r3, [r7, #29]
	uint8_t discrepancyLast	= 0xffU;
 8000b00:	23ff      	movs	r3, #255	; 0xff
 8000b02:	75fb      	strb	r3, [r7, #23]
	uint8_t lastDeviceFlag	= 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	773b      	strb	r3, [r7, #28]
	uint8_t masterMind[8] 	= { 0 };
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

	while (1) {
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8000b10:	f7ff ffba 	bl	8000a88 <onewireMasterCheck_presence>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d101      	bne.n	8000b1e <onewireMasterTree_search+0x3a>
			/* No devices */
			return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e0c0      	b.n	8000ca0 <onewireMasterTree_search+0x1bc>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8000b1e:	7f3b      	ldrb	r3, [r7, #28]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f040 80b9 	bne.w	8000c98 <onewireMasterTree_search+0x1b4>
			break;
		}

		if (searchAlarms) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <onewireMasterTree_search+0x50>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 8000b2c:	20ec      	movs	r0, #236	; 0xec
 8000b2e:	f7ff fee9 	bl	8000904 <onewireMasterWr_byte>
 8000b32:	e08b      	b.n	8000c4c <onewireMasterTree_search+0x168>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8000b34:	20f0      	movs	r0, #240	; 0xf0
 8000b36:	f7ff fee5 	bl	8000904 <onewireMasterWr_byte>
		}

		while (bitIdxNow < 64) {
 8000b3a:	e087      	b.n	8000c4c <onewireMasterTree_search+0x168>
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8000b3c:	7fbb      	ldrb	r3, [r7, #30]
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f107 0220 	add.w	r2, r7, #32
 8000b46:	4413      	add	r3, r2
 8000b48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	7fbb      	ldrb	r3, [r7, #30]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	fa42 f303 	asr.w	r3, r2, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	75bb      	strb	r3, [r7, #22]

			uint8_t b_pos = onewireMasterRd_bit();
 8000b60:	f7ff ff34 	bl	80009cc <onewireMasterRd_bit>
 8000b64:	4603      	mov	r3, r0
 8000b66:	757b      	strb	r3, [r7, #21]
			uint8_t b_neg = onewireMasterRd_bit();
 8000b68:	f7ff ff30 	bl	80009cc <onewireMasterRd_bit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	753b      	strb	r3, [r7, #20]

			if (!b_pos && b_neg) {
 8000b70:	7d7b      	ldrb	r3, [r7, #21]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d106      	bne.n	8000b84 <onewireMasterTree_search+0xa0>
 8000b76:	7d3b      	ldrb	r3, [r7, #20]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <onewireMasterTree_search+0xa0>
				/* Only '0' */
				onewireMasterWr_bit(0);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fe8d 	bl	800089c <onewireMasterWr_bit>
 8000b82:	e060      	b.n	8000c46 <onewireMasterTree_search+0x162>
			}
			else if (b_pos && !b_neg) {
 8000b84:	7d7b      	ldrb	r3, [r7, #21]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d01f      	beq.n	8000bca <onewireMasterTree_search+0xe6>
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11c      	bne.n	8000bca <onewireMasterTree_search+0xe6>
				/* Only '1' */
				onewireMasterWr_bit(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fe83 	bl	800089c <onewireMasterWr_bit>
				masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000b96:	7fbb      	ldrb	r3, [r7, #30]
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f107 0220 	add.w	r2, r7, #32
 8000ba0:	4413      	add	r3, r2
 8000ba2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000ba6:	7fbb      	ldrb	r3, [r7, #30]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	7fb9      	ldrb	r1, [r7, #30]
 8000bb6:	08c9      	lsrs	r1, r1, #3
 8000bb8:	b2c9      	uxtb	r1, r1
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000bc8:	e03d      	b.n	8000c46 <onewireMasterTree_search+0x162>
			}
			else if (!b_pos && !b_neg) {
 8000bca:	7d7b      	ldrb	r3, [r7, #21]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d132      	bne.n	8000c36 <onewireMasterTree_search+0x152>
 8000bd0:	7d3b      	ldrb	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d12f      	bne.n	8000c36 <onewireMasterTree_search+0x152>
				/* Discrepancy */
				if (bitIdxNow == bitIdxLastZero) {
 8000bd6:	7fba      	ldrb	r2, [r7, #30]
 8000bd8:	7f7b      	ldrb	r3, [r7, #29]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d11c      	bne.n	8000c18 <onewireMasterTree_search+0x134>
					/* Select the 1 branch */
					onewireMasterWr_bit(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fe5c 	bl	800089c <onewireMasterWr_bit>
					masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000be4:	7fbb      	ldrb	r3, [r7, #30]
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f107 0220 	add.w	r2, r7, #32
 8000bee:	4413      	add	r3, r2
 8000bf0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000bf4:	7fbb      	ldrb	r3, [r7, #30]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	7fb9      	ldrb	r1, [r7, #30]
 8000c04:	08c9      	lsrs	r1, r1, #3
 8000c06:	b2c9      	uxtb	r1, r1
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	440b      	add	r3, r1
 8000c12:	f803 2c14 	strb.w	r2, [r3, #-20]
				if (bitIdxNow == bitIdxLastZero) {
 8000c16:	e016      	b.n	8000c46 <onewireMasterTree_search+0x162>
				}
				else if (bitIdxNow < bitIdxLastZero) {
 8000c18:	7fba      	ldrb	r2, [r7, #30]
 8000c1a:	7f7b      	ldrb	r3, [r7, #29]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d204      	bcs.n	8000c2a <onewireMasterTree_search+0x146>
					/* Follow last trace */
					onewireMasterWr_bit(bitNow);
 8000c20:	7dbb      	ldrb	r3, [r7, #22]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe3a 	bl	800089c <onewireMasterWr_bit>
				if (bitIdxNow == bitIdxLastZero) {
 8000c28:	e00d      	b.n	8000c46 <onewireMasterTree_search+0x162>
				}
				else {
					/* Select the 0 branch */
					onewireMasterWr_bit(0);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fe36 	bl	800089c <onewireMasterWr_bit>
					bitIdxLastZero = bitIdxNow;
 8000c30:	7fbb      	ldrb	r3, [r7, #30]
 8000c32:	777b      	strb	r3, [r7, #29]
				if (bitIdxNow == bitIdxLastZero) {
 8000c34:	e007      	b.n	8000c46 <onewireMasterTree_search+0x162>
				}
			}
			else if (b_pos && b_neg) {
 8000c36:	7d7b      	ldrb	r3, [r7, #21]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <onewireMasterTree_search+0x162>
 8000c3c:	7d3b      	ldrb	r3, [r7, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <onewireMasterTree_search+0x162>
				/* No devices anymore */
				return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e02c      	b.n	8000ca0 <onewireMasterTree_search+0x1bc>
			}
			++bitIdxNow;
 8000c46:	7fbb      	ldrb	r3, [r7, #30]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8000c4c:	7fbb      	ldrb	r3, [r7, #30]
 8000c4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c50:	f67f af74 	bls.w	8000b3c <onewireMasterTree_search+0x58>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8000c54:	7f7b      	ldrb	r3, [r7, #29]
 8000c56:	75fb      	strb	r3, [r7, #23]

		/* Copy over one valid device */
		for (int idx = 0; idx < 8; ++idx) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	e00f      	b.n	8000c7e <onewireMasterTree_search+0x19a>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8000c5e:	7ffb      	ldrb	r3, [r7, #31]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	441a      	add	r2, r3
 8000c66:	f107 010c 	add.w	r1, r7, #12
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	7819      	ldrb	r1, [r3, #0]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	4413      	add	r3, r2
 8000c74:	460a      	mov	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < 8; ++idx) {
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	ddec      	ble.n	8000c5e <onewireMasterTree_search+0x17a>
		}
		++devicesCnt;
 8000c84:	7ffb      	ldrb	r3, [r7, #31]
 8000c86:	3301      	adds	r3, #1
 8000c88:	77fb      	strb	r3, [r7, #31]

		if (discrepancyLast == 0xffU) {
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	2bff      	cmp	r3, #255	; 0xff
 8000c8e:	f47f af3f 	bne.w	8000b10 <onewireMasterTree_search+0x2c>
			lastDeviceFlag = 1U;
 8000c92:	2301      	movs	r3, #1
 8000c94:	773b      	strb	r3, [r7, #28]
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8000c96:	e73b      	b.n	8000b10 <onewireMasterTree_search+0x2c>
			break;
 8000c98:	bf00      	nop
		}
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8000c9a:	f7ff fef5 	bl	8000a88 <onewireMasterCheck_presence>

	return devicesCnt;
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	71bb      	strb	r3, [r7, #6]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d124      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11f      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d11a      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3303      	adds	r3, #3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d115      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d110      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	3305      	adds	r3, #5
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10b      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3306      	adds	r3, #6
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d106      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3307      	adds	r3, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8000d0e:	231f      	movs	r3, #31
 8000d10:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b0b      	cmp	r3, #11
 8000d16:	d00a      	beq.n	8000d2e <onewireDS18B20_setAdcWidth+0x86>
 8000d18:	2b0b      	cmp	r3, #11
 8000d1a:	dc0d      	bgt.n	8000d38 <onewireDS18B20_setAdcWidth+0x90>
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d010      	beq.n	8000d42 <onewireDS18B20_setAdcWidth+0x9a>
 8000d20:	2b0a      	cmp	r3, #10
 8000d22:	d109      	bne.n	8000d38 <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00a      	b.n	8000d44 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	73fb      	strb	r3, [r7, #15]
		break;
 8000d36:	e005      	b.n	8000d44 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d3e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d40:	e000      	b.n	8000d44 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8000d42:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8000d44:	f7ff fea0 	bl	8000a88 <onewireMasterCheck_presence>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d11b      	bne.n	8000d86 <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d103      	bne.n	8000d5c <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8000d54:	20cc      	movs	r0, #204	; 0xcc
 8000d56:	f7ff fdd5 	bl	8000904 <onewireMasterWr_byte>
 8000d5a:	e005      	b.n	8000d68 <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8000d5c:	2055      	movs	r0, #85	; 0x55
 8000d5e:	f7ff fdd1 	bl	8000904 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f7ff fdec 	bl	8000940 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8000d68:	204e      	movs	r0, #78	; 0x4e
 8000d6a:	f7ff fdcb 	bl	8000904 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fdc7 	bl	8000904 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fdc3 	bl	8000904 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdbf 	bl	8000904 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8000d86:	f7ff fe7f 	bl	8000a88 <onewireMasterCheck_presence>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d124      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d11f      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3302      	adds	r3, #2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11a      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3303      	adds	r3, #3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d115      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d110      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3305      	adds	r3, #5
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3307      	adds	r3, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8000dec:	f7ff fe4c 	bl	8000a88 <onewireMasterCheck_presence>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d11b      	bne.n	8000e2e <onewireDS18B20_tempReq+0x9c>
		if (!romCode) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8000dfc:	20cc      	movs	r0, #204	; 0xcc
 8000dfe:	f7ff fd81 	bl	8000904 <onewireMasterWr_byte>
 8000e02:	e005      	b.n	8000e10 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8000e04:	2055      	movs	r0, #85	; 0x55
 8000e06:	f7ff fd7d 	bl	8000904 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fd98 	bl	8000940 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);
 8000e10:	2044      	movs	r0, #68	; 0x44
 8000e12:	f7ff fd77 	bl	8000904 <onewireMasterWr_byte>
		uint32_t bfPushPull  = bfOpenDrain & (~D11_ONEWIRE_GPIO_IO_Pin);
		D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfPushPull;
#endif

		/* End time */
		uint32_t waitTime_ms = 760UL;
 8000e16:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8000e1a:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8000e1c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8000e20:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		return HAL_GetTick() + waitTime_ms;
 8000e22:	f001 ff4f 	bl	8002cc4 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	e000      	b.n	8000e30 <onewireDS18B20_tempReq+0x9e>
	}

	/* No device present */
	return 0UL;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d124      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11f      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3302      	adds	r3, #2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11a      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3303      	adds	r3, #3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d115      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d110      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3305      	adds	r3, #5
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10b      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3306      	adds	r3, #6
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3307      	adds	r3, #7
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC is ready */
	uint32_t t_now = HAL_GetTick();
 8000e94:	f001 ff16 	bl	8002cc4 <HAL_GetTick>
 8000e98:	6178      	str	r0, [r7, #20]
	if (t_now < waitUntil) {
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d205      	bcs.n	8000eae <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 ff17 	bl	8002cdc <HAL_Delay>
	}

	/* Revert to Open-Drain mode */
	uint32_t bfPushPull		= D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <onewireDS18B20_tempRead+0xc0>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	60fb      	str	r3, [r7, #12]
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <onewireDS18B20_tempRead+0xc0>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6053      	str	r3, [r2, #4]

	/* 1w: Reset */
	onewireMasterCheck_presence();
 8000ec2:	f7ff fde1 	bl	8000a88 <onewireMasterCheck_presence>

	if (!romCode) {
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <onewireDS18B20_tempRead+0x9c>
		/* Skip ROM cmd */
		onewireMasterWr_byte(0xccU);
 8000ecc:	20cc      	movs	r0, #204	; 0xcc
 8000ece:	f7ff fd19 	bl	8000904 <onewireMasterWr_byte>
 8000ed2:	e005      	b.n	8000ee0 <onewireDS18B20_tempRead+0xa8>
	}
	else {
		/* Match ROM cmd */
		onewireMasterWr_byte(0x55U);
 8000ed4:	2055      	movs	r0, #85	; 0x55
 8000ed6:	f7ff fd15 	bl	8000904 <onewireMasterWr_byte>
		onewireMasterWr_romCode(romCode);
 8000eda:	6838      	ldr	r0, [r7, #0]
 8000edc:	f7ff fd30 	bl	8000940 <onewireMasterWr_romCode>
	}

	/* Read scratchpad */
	onewireMasterWr_byte(0xbeU);
 8000ee0:	20be      	movs	r0, #190	; 0xbe
 8000ee2:	f7ff fd0f 	bl	8000904 <onewireMasterWr_byte>
	return (int16_t) onewireMasterRd_field(16);
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f7ff fda6 	bl	8000a38 <onewireMasterRd_field>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b21b      	sxth	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	48000400 	.word	0x48000400

08000efc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MX_I2C1_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <MX_I2C1_Init+0x7c>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f38:	f003 f9ae 	bl	8004298 <HAL_I2C_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f42:	f000 fb61 	bl	8001608 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f4a:	f004 fe5b 	bl	8005c04 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f54:	f000 fb58 	bl	8001608 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f5c:	f004 fe9d 	bl	8005c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fb4f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000036c 	.word	0x2000036c
 8000f74:	40005400 	.word	0x40005400
 8000f78:	00303d5b 	.word	0x00303d5b

08000f7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09e      	sub	sp, #120	; 0x78
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2254      	movs	r2, #84	; 0x54
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 fa21 	bl	80093e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d146      	bne.n	800103a <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fd86 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fc6:	f000 fb1f 	bl	8001608 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8000fe2:	23c0      	movs	r3, #192	; 0xc0
 8000fe4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <HAL_I2C_MspInit+0xd0>)
 8000ffe:	f002 fee7 	bl	8003dd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_I2C_MspInit+0xcc>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201f      	movs	r0, #31
 8001020:	f002 fe10 	bl	8003c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001024:	201f      	movs	r0, #31
 8001026:	f002 fe29 	bl	8003c7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2020      	movs	r0, #32
 8001030:	f002 fe08 	bl	8003c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001034:	2020      	movs	r0, #32
 8001036:	f002 fe21 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800103a:	bf00      	nop
 800103c:	3778      	adds	r7, #120	; 0x78
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001062:	2301      	movs	r3, #1
 8001064:	73bb      	strb	r3, [r7, #14]
 8001066:	e01c      	b.n	80010a2 <i2cBusGetDeviceList+0x52>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b29b      	uxth	r3, r3
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b299      	uxth	r1, r3
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2201      	movs	r2, #1
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <i2cBusGetDeviceList+0x64>)
 8001076:	f003 fa0f 	bl	8004498 <HAL_I2C_IsDeviceReady>
 800107a:	4603      	mov	r3, r0
 800107c:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10b      	bne.n	800109c <i2cBusGetDeviceList+0x4c>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b60      	cmp	r3, #96	; 0x60
 800108e:	d105      	bne.n	800109c <i2cBusGetDeviceList+0x4c>
			case 0x60:
				/* DAC */
				*i2cDevicesBF |= 0x01;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3301      	adds	r3, #1
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dade      	bge.n	8001068 <i2cBusGetDeviceList+0x18>
			}
		}
	}

	return i2cBusDeviceCnt;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000036c 	.word	0x2000036c

080010b8 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 80010ca:	2300      	movs	r3, #0
 80010cc:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010dc:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80010f0:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	b299      	uxth	r1, r3
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2302      	movs	r3, #2
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <i2cDeviceDacMcp4725_set+0xa0>)
 800111c:	f003 f94c 	bl	80043b8 <HAL_I2C_Master_Transmit_IT>
 8001120:	4603      	mov	r3, r0
 8001122:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <i2cDeviceDacMcp4725_set+0x96>
	}

#if 1
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800112e:	bf00      	nop
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <i2cDeviceDacMcp4725_set+0xa0>)
 8001132:	f003 fb9b 	bl	800486c <HAL_I2C_GetState>
 8001136:	4603      	mov	r3, r0
 8001138:	2b20      	cmp	r3, #32
 800113a:	d1f9      	bne.n	8001130 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <i2cDeviceDacMcp4725_set+0xa0>)
 800113e:	f003 fba3 	bl	8004888 <HAL_I2C_GetError>
 8001142:	4603      	mov	r3, r0
 8001144:	2b04      	cmp	r3, #4
 8001146:	d101      	bne.n	800114c <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 8001148:	2302      	movs	r3, #2
 800114a:	e000      	b.n	800114e <i2cDeviceDacMcp4725_set+0x96>
	}
#endif
	return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000036c 	.word	0x2000036c

0800115c <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	4613      	mov	r3, r2
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	461a      	mov	r2, r3
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <uDelay+0x3c>)
 8001174:	fba3 2302 	umull	r2, r3, r3, r2
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 800117c:	e002      	b.n	8001184 <uDelay+0x28>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b01      	subs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <uDelay+0x22>
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	cccccccd 	.word	0xcccccccd

0800119c <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
	while (len--) {
 80011a8:	e004      	b.n	80011b4 <memclear+0x18>
		*(ary++) = 0U;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	while (len--) {
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	807a      	strh	r2, [r7, #2]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f5      	bne.n	80011aa <memclear+0xe>
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b0a4      	sub	sp, #144	; 0x90
 80011d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f001 fd4a 	bl	8002c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f9a5 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f7ff faa7 	bl	800072c <MX_GPIO_Init>
  MX_RTC_Init();
 80011de:	f000 fa19 	bl	8001614 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80011e2:	f000 fd45 	bl	8001c70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011e6:	f000 fd73 	bl	8001cd0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011ea:	f7ff f9bd 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011ee:	f7ff fe85 	bl	8000efc <MX_I2C1_Init>
  MX_SPI1_Init();
 80011f2:	f000 fa67 	bl	80016c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80011f6:	f000 fc1b 	bl	8001a30 <MX_TIM2_Init>
  while (!enableMe) {
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	48ba      	ldr	r0, [pc, #744]	; (80014e8 <main+0x31c>)
 8001200:	f003 f832 	bl	8004268 <HAL_GPIO_WritePin>

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 8001204:	4ab9      	ldr	r2, [pc, #740]	; (80014ec <main+0x320>)
 8001206:	463b      	mov	r3, r7
 8001208:	4611      	mov	r1, r2
 800120a:	2255      	movs	r2, #85	; 0x55
 800120c:	4618      	mov	r0, r3
 800120e:	f008 f8db 	bl	80093c8 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001212:	4639      	mov	r1, r7
 8001214:	2319      	movs	r3, #25
 8001216:	2254      	movs	r2, #84	; 0x54
 8001218:	48b5      	ldr	r0, [pc, #724]	; (80014f0 <main+0x324>)
 800121a:	f006 fe54 	bl	8007ec6 <HAL_UART_Transmit>
  }
#endif

  /* Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 800121e:	2300      	movs	r3, #0
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);
 8001222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff12 	bl	8001050 <i2cBusGetDeviceList>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 8001232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <main+0x7c>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDeviceDacMcp4725_set(0, 0b11, I2C_DAC_MCP4725_0_VAL);
 800123c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8001240:	2103      	movs	r1, #3
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ff38 	bl	80010b8 <i2cDeviceDacMcp4725_set>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 800125e:	463b      	mov	r3, r7
 8001260:	4aa4      	ldr	r2, [pc, #656]	; (80014f4 <main+0x328>)
 8001262:	211f      	movs	r1, #31
 8001264:	4618      	mov	r0, r3
 8001266:	f008 f8c5 	bl	80093f4 <sniprintf>
 800126a:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800126c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800126e:	b29a      	uxth	r2, r3
 8001270:	4639      	mov	r1, r7
 8001272:	2319      	movs	r3, #25
 8001274:	489e      	ldr	r0, [pc, #632]	; (80014f0 <main+0x324>)
 8001276:	f006 fe26 	bl	8007ec6 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 800127a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800127e:	4638      	mov	r0, r7
 8001280:	4a9d      	ldr	r2, [pc, #628]	; (80014f8 <main+0x32c>)
 8001282:	211f      	movs	r1, #31
 8001284:	f008 f8b6 	bl	80093f4 <sniprintf>
 8001288:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 800128a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800128c:	b29a      	uxth	r2, r3
 800128e:	4639      	mov	r1, r7
 8001290:	2319      	movs	r3, #25
 8001292:	4897      	ldr	r0, [pc, #604]	; (80014f0 <main+0x324>)
 8001294:	f006 fe17 	bl	8007ec6 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8001298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800129a:	4638      	mov	r0, r7
 800129c:	4a97      	ldr	r2, [pc, #604]	; (80014fc <main+0x330>)
 800129e:	211f      	movs	r1, #31
 80012a0:	f008 f8a8 	bl	80093f4 <sniprintf>
 80012a4:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80012a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4639      	mov	r1, r7
 80012ac:	2319      	movs	r3, #25
 80012ae:	4890      	ldr	r0, [pc, #576]	; (80014f0 <main+0x324>)
 80012b0:	f006 fe09 	bl	8007ec6 <HAL_UART_Transmit>
  }
#endif

  /* Init the temperature sensor DS18B20 */
  {
 80012b4:	466b      	mov	r3, sp
 80012b6:	461c      	mov	r4, r3
#if 1
	  const uint8_t OnewireDeviceCountMax 				= 8U;
 80012b8:	2308      	movs	r3, #8
 80012ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  uint8_t onewireDevices[OnewireDeviceCountMax][8];
 80012be:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80012c2:	3b01      	subs	r3, #1
 80012c4:	677b      	str	r3, [r7, #116]	; 0x74
 80012c6:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	018b      	lsls	r3, r1, #6
 80012d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80012dc:	0182      	lsls	r2, r0, #6
 80012de:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 80012e2:	f04f 0100 	mov.w	r1, #0
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	018b      	lsls	r3, r1, #6
 80012f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80012f4:	0182      	lsls	r2, r0, #6
 80012f6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	3307      	adds	r3, #7
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	ebad 0d03 	sub.w	sp, sp, r3
 8001306:	ab02      	add	r3, sp, #8
 8001308:	3300      	adds	r3, #0
 800130a:	673b      	str	r3, [r7, #112]	; 0x70
	  memclear((uint8_t*) onewireDevices, sizeof(onewireDevices));
 800130c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800130e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001312:	b29b      	uxth	r3, r3
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	b29b      	uxth	r3, r3
 8001318:	4619      	mov	r1, r3
 800131a:	4610      	mov	r0, r2
 800131c:	f7ff ff3e 	bl	800119c <memclear>

	  uint8_t onewireDeviceCount = onewireMasterTree_search(0U, OnewireDeviceCountMax, onewireDevices);
 8001320:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001322:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001326:	4619      	mov	r1, r3
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fbdb 	bl	8000ae4 <onewireMasterTree_search>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", onewireDeviceCount);
 8001334:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001338:	4638      	mov	r0, r7
 800133a:	4a71      	ldr	r2, [pc, #452]	; (8001500 <main+0x334>)
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	f008 f859 	bl	80093f4 <sniprintf>
 8001342:	66b8      	str	r0, [r7, #104]	; 0x68
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8001344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001346:	b29a      	uxth	r2, r3
 8001348:	4639      	mov	r1, r7
 800134a:	2319      	movs	r3, #25
 800134c:	4868      	ldr	r0, [pc, #416]	; (80014f0 <main+0x324>)
 800134e:	f006 fdba 	bl	8007ec6 <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
#if   defined(ONEWIRE_DS18B20_ADC_12B)
	  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, onewireDevices[0]);
 8001352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001354:	2228      	movs	r2, #40	; 0x28
 8001356:	213c      	movs	r1, #60	; 0x3c
 8001358:	200c      	movs	r0, #12
 800135a:	f7ff fca5 	bl	8000ca8 <onewireDS18B20_setAdcWidth>
 800135e:	46a5      	mov	sp, r4
#endif
  }


  /* Turn off many of the NMEA messages */
  ubloxMsgsTurnOff();
 8001360:	f001 f960 	bl	8002624 <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8001364:	f000 fe3c 	bl	8001fe0 <ubloxUartSpeedFast>
  enableMe = 0;
  while (!enableMe) {
  }
#endif

  if (ubloxSetFrequency(F_COMP_HZ)) {
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f000 ffbe 	bl	80022ec <ubloxSetFrequency>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <main+0x1d8>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <main+0x338>)
 8001378:	463c      	mov	r4, r7
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800138c:	c407      	stmia	r4!, {r0, r1, r2}
 800138e:	8023      	strh	r3, [r4, #0]
 8001390:	3402      	adds	r4, #2
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001396:	4639      	mov	r1, r7
 8001398:	2319      	movs	r3, #25
 800139a:	223e      	movs	r2, #62	; 0x3e
 800139c:	4854      	ldr	r0, [pc, #336]	; (80014f0 <main+0x324>)
 800139e:	f006 fd92 	bl	8007ec6 <HAL_UART_Transmit>
 80013a2:	e011      	b.n	80013c8 <main+0x1fc>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <main+0x33c>)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4611      	mov	r1, r2
 80013aa:	2252      	movs	r2, #82	; 0x52
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 f80b 	bl	80093c8 <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80013b2:	4639      	mov	r1, r7
 80013b4:	2319      	movs	r3, #25
 80013b6:	2251      	movs	r2, #81	; 0x51
 80013b8:	484d      	ldr	r0, [pc, #308]	; (80014f0 <main+0x324>)
 80013ba:	f006 fd84 	bl	8007ec6 <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2110      	movs	r1, #16
 80013c2:	4849      	ldr	r0, [pc, #292]	; (80014e8 <main+0x31c>)
 80013c4:	f002 ff50 	bl	8004268 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t tempWaitUntil = 0UL;
	  uint32_t now = HAL_GetTick() / 1000UL;  (void) now;
 80013c8:	f001 fc7c 	bl	8002cc4 <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a4f      	ldr	r2, [pc, #316]	; (800150c <main+0x340>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
#endif
	  }
#endif

#if 1
	  if (tempWaitUntil) {
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x344>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d078      	beq.n	80014d2 <main+0x306>
		uint8_t msg[64];

		/* Onewire handling */
		int16_t owDs18b20_Temp = onewireDS18B20_tempRead(tempWaitUntil, onewireDevices[0]);
 80013e0:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <main+0x344>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	494b      	ldr	r1, [pc, #300]	; (8001514 <main+0x348>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fd26 	bl	8000e38 <onewireDS18B20_tempRead>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		int16_t t_int		= (owDs18b20_Temp >> 4);
 80013f2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80013f6:	111b      	asrs	r3, r3, #4
 80013f8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		uint16_t t_frac		= (owDs18b20_Temp & 0xfU);
 80013fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		if (t_int < 0) {
 8001408:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800140c:	2b00      	cmp	r3, #0
 800140e:	da16      	bge.n	800143e <main+0x272>
			t_frac = ~t_frac;
 8001410:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001414:	43db      	mvns	r3, r3
 8001416:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			++t_frac;
 800141a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800141e:	3301      	adds	r3, #1
 8001420:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			t_frac %= 1000U;
 8001424:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001428:	4a38      	ldr	r2, [pc, #224]	; (800150c <main+0x340>)
 800142a:	fba2 1203 	umull	r1, r2, r2, r3
 800142e:	0992      	lsrs	r2, r2, #6
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fb01 f202 	mul.w	r2, r1, r2
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}

		uint16_t t_fv1000	= 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		if (t_frac & 0b1000) {
 8001444:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <main+0x290>
			t_fv1000 += 500U;
 8001450:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001454:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001458:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0100) {
 800145c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <main+0x2a6>
			t_fv1000 += 250U;
 8001468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800146c:	33fa      	adds	r3, #250	; 0xfa
 800146e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0010) {
 8001472:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <main+0x2bc>
			t_fv1000 += 125U;
 800147e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001482:	337d      	adds	r3, #125	; 0x7d
 8001484:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0001) {
 8001488:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <main+0x2d2>
			t_fv1000 +=  62U;
 8001494:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001498:	333e      	adds	r3, #62	; 0x3e
 800149a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}

#if defined(LOGGING)
		int len = snprintf(((char*) msg), sizeof(msg), "*** Temperature: %+02d,%1u degC\r\n", t_int, (t_fv1000 + 50) / 100);
 800149e:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 80014a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80014a6:	3332      	adds	r3, #50	; 0x32
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <main+0x34c>)
 80014aa:	fb82 0203 	smull	r0, r2, r2, r3
 80014ae:	1152      	asrs	r2, r2, #5
 80014b0:	17db      	asrs	r3, r3, #31
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	4638      	mov	r0, r7
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	460b      	mov	r3, r1
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <main+0x350>)
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	f007 ff99 	bl	80093f4 <sniprintf>
 80014c2:	65f8      	str	r0, [r7, #92]	; 0x5c
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80014c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4639      	mov	r1, r7
 80014ca:	2319      	movs	r3, #25
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <main+0x324>)
 80014ce:	f006 fcfa 	bl	8007ec6 <HAL_UART_Transmit>
#endif
	  }
#endif

	  /* Request next temperature value */
	  tempWaitUntil = onewireDS18B20_tempReq(onewireDevices[0]);
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <main+0x348>)
 80014d4:	f7ff fc5d 	bl	8000d92 <onewireDS18B20_tempReq>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <main+0x344>)
 80014dc:	6013      	str	r3, [r2, #0]
		  ublox_NavDop_get(&ubloxNavDop);
		  break;

	  case 2:
#endif
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <main+0x354>)
 80014e0:	f001 f8c6 	bl	8002670 <ublox_NavSvinfo_get>
  {
 80014e4:	e770      	b.n	80013c8 <main+0x1fc>
 80014e6:	bf00      	nop
 80014e8:	48000400 	.word	0x48000400
 80014ec:	08009d14 	.word	0x08009d14
 80014f0:	2000055c 	.word	0x2000055c
 80014f4:	08009c74 	.word	0x08009c74
 80014f8:	08009c88 	.word	0x08009c88
 80014fc:	08009ca4 	.word	0x08009ca4
 8001500:	08009cc0 	.word	0x08009cc0
 8001504:	08009d6c 	.word	0x08009d6c
 8001508:	08009dac 	.word	0x08009dac
 800150c:	10624dd3 	.word	0x10624dd3
 8001510:	200001f4 	.word	0x200001f4
 8001514:	200001b4 	.word	0x200001b4
 8001518:	51eb851f 	.word	0x51eb851f
 800151c:	08009cf0 	.word	0x08009cf0
 8001520:	2000008c 	.word	0x2000008c

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b096      	sub	sp, #88	; 0x58
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2244      	movs	r2, #68	; 0x44
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f007 ff56 	bl	80093e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800154a:	f004 fc11 	bl	8005d70 <HAL_PWREx_ControlVoltageScaling>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001554:	f000 f858 	bl	8001608 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001558:	f004 fbec 	bl	8005d34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <SystemClock_Config+0xbc>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <SystemClock_Config+0xbc>)
 8001564:	f023 0318 	bic.w	r3, r3, #24
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800156c:	2306      	movs	r3, #6
 800156e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157a:	2310      	movs	r3, #16
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001582:	2302      	movs	r3, #2
 8001584:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 800158a:	230f      	movs	r3, #15
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800158e:	2307      	movs	r3, #7
 8001590:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001596:	2304      	movs	r3, #4
 8001598:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fc3c 	bl	8005e1c <HAL_RCC_OscConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015aa:	f000 f82d 	bl	8001608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	230f      	movs	r3, #15
 80015b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b2:	2303      	movs	r3, #3
 80015b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2103      	movs	r1, #3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 f848 	bl	800665c <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015d2:	f000 f819 	bl	8001608 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	; 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015f6:	f001 fb51 	bl	8002c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40012c00 	.word	0x40012c00

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_RTC_Init+0x48>)
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <MX_RTC_Init+0x4c>)
 800161c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_RTC_Init+0x48>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_RTC_Init+0x48>)
 8001626:	227f      	movs	r2, #127	; 0x7f
 8001628:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_RTC_Init+0x48>)
 800162c:	22ff      	movs	r2, #255	; 0xff
 800162e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_RTC_Init+0x48>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_RTC_Init+0x48>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_RTC_Init+0x48>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_RTC_Init+0x48>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_RTC_Init+0x48>)
 800164a:	f005 fd25 	bl	8007098 <HAL_RTC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001654:	f7ff ffd8 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200003b8 	.word	0x200003b8
 8001660:	40002800 	.word	0x40002800

08001664 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b098      	sub	sp, #96	; 0x60
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2254      	movs	r2, #84	; 0x54
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f007 feb5 	bl	80093e4 <memset>
  if(rtcHandle->Instance==RTC)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_RTC_MspInit+0x58>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d117      	bne.n	80016b4 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001688:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fa19 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016a0:	f7ff ffb2 	bl	8001608 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RTC_MspInit+0x5c>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_RTC_MspInit+0x5c>)
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3760      	adds	r7, #96	; 0x60
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40002800 	.word	0x40002800
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI1_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x74>)
 80016de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI1_Init+0x74>)
 8001724:	f005 fdca 	bl	80072bc <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172e:	f7ff ff6b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200003dc 	.word	0x200003dc
 800173c:	40013000 	.word	0x40013000

08001740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_SPI_MspInit+0x7c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d128      	bne.n	80017b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176c:	6613      	str	r3, [r2, #96]	; 0x60
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8001792:	23c2      	movs	r3, #194	; 0xc2
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f002 fb0e 	bl	8003dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2019      	movs	r0, #25
 8001822:	f002 fa0f 	bl	8003c44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001826:	2019      	movs	r0, #25
 8001828:	f002 fa28 	bl	8003c7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_InitTick+0x9c>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_InitTick+0x9c>)
 8001832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001836:	6613      	str	r3, [r2, #96]	; 0x60
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_InitTick+0x9c>)
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001844:	f107 0210 	add.w	r2, r7, #16
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f8aa 	bl	80069a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001854:	f005 f892 	bl	800697c <HAL_RCC_GetPCLK2Freq>
 8001858:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_InitTick+0xa0>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3b01      	subs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_InitTick+0xa4>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_InitTick+0xa8>)
 800186c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_InitTick+0xa4>)
 8001870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_InitTick+0xa4>)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_InitTick+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_InitTick+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <HAL_InitTick+0xa4>)
 800188a:	f005 fdba 	bl	8007402 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <HAL_InitTick+0xa4>)
 8001896:	f005 fe15 	bl	80074c4 <HAL_TIM_Base_Start_IT>
 800189a:	4603      	mov	r3, r0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	20000440 	.word	0x20000440
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001916:	f005 fe80 	bl	800761a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000440 	.word	0x20000440

08001924 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <I2C1_EV_IRQHandler+0x10>)
 800192a:	f002 febc 	bl	80046a6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000036c 	.word	0x2000036c

08001938 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <I2C1_ER_IRQHandler+0x10>)
 800193e:	f002 fecc 	bl	80046da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000036c 	.word	0x2000036c

0800194c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <USART1_IRQHandler+0x10>)
 8001952:	f006 fcc5 	bl	80082e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200004d8 	.word	0x200004d8

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f007 fcf0 	bl	8009374 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000c000 	.word	0x2000c000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	200001f8 	.word	0x200001f8
 80019c8:	200005f8 	.word	0x200005f8

080019cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <SystemInit+0x5c>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <SystemInit+0x5c>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SystemInit+0x60>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <SystemInit+0x60>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <SystemInit+0x60>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <SystemInit+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <SystemInit+0x60>)
 80019f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <SystemInit+0x60>)
 8001a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <SystemInit+0x60>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <SystemInit+0x60>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SystemInit+0x60>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a76:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a78:	f005 fd78 	bl	800756c <HAL_TIM_IC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a82:	f7ff fdc1 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001a96:	f006 f90b 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001aa0:	f7ff fdb2 	bl	8001608 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001abc:	f005 fecc 	bl	8007858 <HAL_TIM_IC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ac6:	f7ff fd9f 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	220c      	movs	r2, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM2_Init+0xb8>)
 8001ad2:	f005 fec1 	bl	8007858 <HAL_TIM_IC_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001adc:	f7ff fd94 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000048c 	.word	0x2000048c

08001aec <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d144      	bne.n	8001b98 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_IC_MspInit+0xb4>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8001b56:	2308      	movs	r3, #8
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b66:	2301      	movs	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f002 f92c 	bl	8003dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <HAL_TIM_IC_MspInit+0xb8>)
 8001b94:	f002 f91c 	bl	8003dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_UART_TxCpltCallback+0x1c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200002fc 	.word	0x200002fc

08001bc8 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <HAL_UART_RxCpltCallback+0x1c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200002fd 	.word	0x200002fd

08001be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bf6:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_UART_ErrorCallback+0x7c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d127      	bne.n	8001c50 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_UART_ErrorCallback+0x80>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8001c10:	e024      	b.n	8001c5c <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0301 	and.w	r3, r3, #1
		else if (
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_UART_ErrorCallback+0x80>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
}
 8001c36:	e011      	b.n	8001c5c <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_UART_ErrorCallback+0x80>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
}
 8001c48:	e008      	b.n	8001c5c <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 8001c4a:	f7ff fcdd 	bl	8001608 <Error_Handler>
}
 8001c4e:	e005      	b.n	8001c5c <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_UART_ErrorCallback+0x84>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 8001c58:	f7ff fcd6 	bl	8001608 <Error_Handler>
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200004d8 	.word	0x200004d8
 8001c68:	200002fd 	.word	0x200002fd
 8001c6c:	2000055c 	.word	0x2000055c

08001c70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <MX_USART1_UART_Init+0x5c>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART1_UART_Init+0x58>)
 8001cb4:	f006 f880 	bl	8007db8 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f7ff fca3 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200004d8 	.word	0x200004d8
 8001ccc:	40013800 	.word	0x40013800

08001cd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <MX_USART2_UART_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d14:	f006 f850 	bl	8007db8 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fc73 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000055c 	.word	0x2000055c
 8001d2c:	40004400 	.word	0x40004400

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a0      	sub	sp, #128	; 0x80
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	2254      	movs	r2, #84	; 0x54
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 fb47 	bl	80093e4 <memset>
  if(uartHandle->Instance==USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a54      	ldr	r2, [pc, #336]	; (8001eac <HAL_UART_MspInit+0x17c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d152      	bne.n	8001e06 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fead 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d78:	f7ff fc46 	bl	8001608 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	6613      	str	r3, [r2, #96]	; 0x60
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8001dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dcc:	f002 f800 	bl	8003dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_UBLOX_USART1_RX_Pin;
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de2:	2307      	movs	r3, #7
 8001de4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D4_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f001 ffee 	bl	8003dd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2025      	movs	r0, #37	; 0x25
 8001dfa:	f001 ff23 	bl	8003c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dfe:	2025      	movs	r0, #37	; 0x25
 8001e00:	f001 ff3c 	bl	8003c7c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e04:	e04d      	b.n	8001ea2 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <HAL_UART_MspInit+0x184>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d148      	bne.n	8001ea2 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001e14:	2308      	movs	r3, #8
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 fe55 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001e28:	f7ff fbee 	bl	8001608 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_UART_MspInit+0x180>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f001 ffa9 	bl	8003dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8001e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e90:	2303      	movs	r3, #3
 8001e92:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f001 ff97 	bl	8003dd0 <HAL_GPIO_Init>
}
 8001ea2:	bf00      	nop
 8001ea4:	3780      	adds	r7, #128	; 0x80
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40004400 	.word	0x40004400

08001eb8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_UART_MspDeInit+0x5c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10f      	bne.n	8001eea <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_UART_MspDeInit+0x60>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_UART_MspDeInit+0x60>)
 8001ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D4_UBLOX_USART1_RX_Pin);
 8001ed6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f002 f8e1 	bl	80040a4 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ee2:	2025      	movs	r0, #37	; 0x25
 8001ee4:	f001 fed8 	bl	8003c98 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ee8:	e010      	b.n	8001f0c <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_UART_MspDeInit+0x64>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10b      	bne.n	8001f0c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_UART_MspDeInit+0x60>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_UART_MspDeInit+0x60>)
 8001efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 8001f00:	f248 0104 	movw	r1, #32772	; 0x8004
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f002 f8cc 	bl	80040a4 <HAL_GPIO_DeInit>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <MX_USART1_UART_Init_38400baud+0x5c>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART1_UART_Init_38400baud+0x58>)
 8001f64:	f005 ff28 	bl	8007db8 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8001f6e:	f7ff fb4b 	bl	8001608 <Error_Handler>
  }

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200004d8 	.word	0x200004d8
 8001f7c:	40013800 	.word	0x40013800

08001f80 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	2300      	movs	r3, #0
 8001f92:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3302      	adds	r3, #2
 8001f98:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	3b04      	subs	r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	e00d      	b.n	8001fbe <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	4413      	add	r3, r2
 8001fae:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8001fb0:	7bba      	ldrb	r2, [r7, #14]
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7bba      	ldrb	r2, [r7, #14]
 8001fd2:	701a      	strb	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b0ae      	sub	sp, #184	; 0xb8
 8001fe4:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 8001fe6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8001fee:	4ab5      	ldr	r2, [pc, #724]	; (80022c4 <ubloxUartSpeedFast+0x2e4>)
 8001ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff6:	c303      	stmia	r3!, {r0, r1}
 8001ff8:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8001ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ffe:	2109      	movs	r1, #9
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ffbd 	bl	8001f80 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800200c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 800201e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8002028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	0e1b      	lsrs	r3, r3, #24
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 800204c:	2303      	movs	r3, #3
 800204e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8002052:	e113      	b.n	800227c <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8002054:	4b9c      	ldr	r3, [pc, #624]	; (80022c8 <ubloxUartSpeedFast+0x2e8>)
 8002056:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800205a:	461d      	mov	r5, r3
 800205c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002064:	c407      	stmia	r4!, {r0, r1, r2}
 8002066:	8023      	strh	r3, [r4, #0]
 8002068:	3402      	adds	r4, #2
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800206e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002072:	2319      	movs	r3, #25
 8002074:	221e      	movs	r2, #30
 8002076:	4895      	ldr	r0, [pc, #596]	; (80022cc <ubloxUartSpeedFast+0x2ec>)
 8002078:	f005 ff25 	bl	8007ec6 <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 800207c:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <ubloxUartSpeedFast+0x2f0>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8002082:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002086:	2209      	movs	r2, #9
 8002088:	4619      	mov	r1, r3
 800208a:	4892      	ldr	r0, [pc, #584]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 800208c:	f005 ffb0 	bl	8007ff0 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8002090:	bf00      	nop
 8002092:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <ubloxUartSpeedFast+0x2f0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d1fa      	bne.n	8002092 <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 800209c:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <ubloxUartSpeedFast+0x2f8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80020a2:	488c      	ldr	r0, [pc, #560]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80020a4:	f006 f89a 	bl	80081dc <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80020a8:	488a      	ldr	r0, [pc, #552]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80020aa:	f006 fb3b 	bl	8008724 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80020ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b2:	498a      	ldr	r1, [pc, #552]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80020b4:	4887      	ldr	r0, [pc, #540]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80020b6:	f005 fff7 	bl	80080a8 <HAL_UART_Receive_IT>
		int i = 11;
 80020ba:	230b      	movs	r3, #11
 80020bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80020c0:	e007      	b.n	80020d2 <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f000 fe0a 	bl	8002cdc <HAL_Delay>
			--i;
 80020c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020cc:	3b01      	subs	r3, #1
 80020ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80020d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <ubloxUartSpeedFast+0x104>
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <ubloxUartSpeedFast+0x2f8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d1ee      	bne.n	80020c2 <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80020e4:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2bb5      	cmp	r3, #181	; 0xb5
 80020ea:	f040 80bf 	bne.w	800226c <ubloxUartSpeedFast+0x28c>
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	2b62      	cmp	r3, #98	; 0x62
 80020f4:	f040 80ba 	bne.w	800226c <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80020f8:	4b78      	ldr	r3, [pc, #480]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80020fa:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	f040 80b5 	bne.w	800226c <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 8002104:	78db      	ldrb	r3, [r3, #3]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80b0 	bne.w	800226c <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800210c:	4b73      	ldr	r3, [pc, #460]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 800210e:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8002110:	2b14      	cmp	r3, #20
 8002112:	f040 80ab 	bne.w	800226c <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002116:	4b71      	ldr	r3, [pc, #452]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 8002118:	795b      	ldrb	r3, [r3, #5]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80a6 	bne.w	800226c <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002126:	e010      	b.n	800214a <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 8002128:	4a6c      	ldr	r2, [pc, #432]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 800212a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800212e:	4413      	add	r3, r2
 8002130:	7819      	ldrb	r1, [r3, #0]
 8002132:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800213a:	4413      	add	r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8002140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002144:	3301      	adds	r3, #1
 8002146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800214a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800214e:	2b1b      	cmp	r3, #27
 8002150:	d9ea      	bls.n	8002128 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 8002152:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002156:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 800215a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800215e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8002162:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002166:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 800216a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800216e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8002172:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002176:	211c      	movs	r1, #28
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff01 	bl	8001f80 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <ubloxUartSpeedFast+0x2f0>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8002184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002188:	221c      	movs	r2, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4851      	ldr	r0, [pc, #324]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 800218e:	f005 ff2f 	bl	8007ff0 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8002192:	bf00      	nop
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <ubloxUartSpeedFast+0x2f0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d1fa      	bne.n	8002194 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 800219e:	484d      	ldr	r0, [pc, #308]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80021a0:	f005 ffc6 	bl	8008130 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80021a4:	484b      	ldr	r0, [pc, #300]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80021a6:	f005 fe55 	bl	8007e54 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 80021aa:	f7ff feb9 	bl	8001f20 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <ubloxUartSpeedFast+0x2f8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80021b4:	4847      	ldr	r0, [pc, #284]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80021b6:	f006 f811 	bl	80081dc <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80021ba:	4846      	ldr	r0, [pc, #280]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80021bc:	f006 fab2 	bl	8008724 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80021c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c4:	4945      	ldr	r1, [pc, #276]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021c6:	4843      	ldr	r0, [pc, #268]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 80021c8:	f005 ff6e 	bl	80080a8 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80021cc:	bf00      	nop
 80021ce:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <ubloxUartSpeedFast+0x2f8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d1fa      	bne.n	80021ce <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80021d8:	4b40      	ldr	r3, [pc, #256]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2bb5      	cmp	r3, #181	; 0xb5
 80021de:	d130      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
 80021e0:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b62      	cmp	r3, #98	; 0x62
 80021e6:	d12c      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80021e8:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d128      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d124      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 80021fa:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d120      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 8002202:	795b      	ldrb	r3, [r3, #5]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11c      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 800220a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800220c:	2b06      	cmp	r3, #6
 800220e:	d118      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <ubloxUartSpeedFast+0x2fc>)
 8002212:	79db      	ldrb	r3, [r3, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d114      	bne.n	8002242 <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <ubloxUartSpeedFast+0x300>)
 800221a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800221e:	461d      	mov	r5, r3
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002228:	c407      	stmia	r4!, {r0, r1, r2}
 800222a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800222c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002230:	2319      	movs	r3, #25
 8002232:	221c      	movs	r2, #28
 8002234:	4825      	ldr	r0, [pc, #148]	; (80022cc <ubloxUartSpeedFast+0x2ec>)
 8002236:	f005 fe46 	bl	8007ec6 <HAL_UART_Transmit>
					HAL_Delay(100);
 800223a:	2064      	movs	r0, #100	; 0x64
 800223c:	f000 fd4e 	bl	8002cdc <HAL_Delay>
				{
 8002240:	e03d      	b.n	80022be <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <ubloxUartSpeedFast+0x304>)
 8002244:	1d3c      	adds	r4, r7, #4
 8002246:	461d      	mov	r5, r3
 8002248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	2319      	movs	r3, #25
 800225c:	2233      	movs	r2, #51	; 0x33
 800225e:	481b      	ldr	r0, [pc, #108]	; (80022cc <ubloxUartSpeedFast+0x2ec>)
 8002260:	f005 fe31 	bl	8007ec6 <HAL_UART_Transmit>
					HAL_Delay(100);
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	f000 fd39 	bl	8002cdc <HAL_Delay>
				}
#endif
			}
			return;
 800226a:	e028      	b.n	80022be <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 800226c:	20c8      	movs	r0, #200	; 0xc8
 800226e:	f000 fd35 	bl	8002cdc <HAL_Delay>
			--cnt;
 8002272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002276:	3b01      	subs	r3, #1
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800227c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f47f aee7 	bne.w	8002054 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 8002286:	4813      	ldr	r0, [pc, #76]	; (80022d4 <ubloxUartSpeedFast+0x2f4>)
 8002288:	f005 fde4 	bl	8007e54 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800228c:	f7ff fe48 	bl	8001f20 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <ubloxUartSpeedFast+0x308>)
 8002292:	1d3c      	adds	r4, r7, #4
 8002294:	461d      	mov	r5, r3
 8002296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022a6:	6020      	str	r0, [r4, #0]
 80022a8:	3404      	adds	r4, #4
 80022aa:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80022ac:	1d39      	adds	r1, r7, #4
 80022ae:	2319      	movs	r3, #25
 80022b0:	2234      	movs	r2, #52	; 0x34
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <ubloxUartSpeedFast+0x2ec>)
 80022b4:	f005 fe07 	bl	8007ec6 <HAL_UART_Transmit>
		HAL_Delay(100);
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	f000 fd0f 	bl	8002cdc <HAL_Delay>
	}
#endif
}
 80022be:	37b8      	adds	r7, #184	; 0xb8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bdb0      	pop	{r4, r5, r7, pc}
 80022c4:	08009e00 	.word	0x08009e00
 80022c8:	08009e0c 	.word	0x08009e0c
 80022cc:	2000055c 	.word	0x2000055c
 80022d0:	200002fc 	.word	0x200002fc
 80022d4:	200004d8 	.word	0x200004d8
 80022d8:	200002fd 	.word	0x200002fd
 80022dc:	200001fc 	.word	0x200001fc
 80022e0:	08009e2c 	.word	0x08009e2c
 80022e4:	08009e4c 	.word	0x08009e4c
 80022e8:	08009e80 	.word	0x08009e80

080022ec <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b0ac      	sub	sp, #176	; 0xb0
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80022f6:	2300      	movs	r3, #0
 80022f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f007 f86e 	bl	80093e4 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8002328:	4ab4      	ldr	r2, [pc, #720]	; (80025fc <ubloxSetFrequency+0x310>)
 800232a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800232e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002332:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8002336:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800233a:	2108      	movs	r1, #8
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe1f 	bl	8001f80 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8002342:	2303      	movs	r3, #3
 8002344:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8002348:	e14e      	b.n	80025e8 <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 800234a:	4aad      	ldr	r2, [pc, #692]	; (8002600 <ubloxSetFrequency+0x314>)
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4611      	mov	r1, r2
 8002352:	2243      	movs	r2, #67	; 0x43
 8002354:	4618      	mov	r0, r3
 8002356:	f007 f837 	bl	80093c8 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800235a:	f107 010c 	add.w	r1, r7, #12
 800235e:	2319      	movs	r3, #25
 8002360:	2242      	movs	r2, #66	; 0x42
 8002362:	48a8      	ldr	r0, [pc, #672]	; (8002604 <ubloxSetFrequency+0x318>)
 8002364:	f005 fdaf 	bl	8007ec6 <HAL_UART_Transmit>
			HAL_Delay(100);
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	f000 fcb7 	bl	8002cdc <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 800236e:	4ba6      	ldr	r3, [pc, #664]	; (8002608 <ubloxSetFrequency+0x31c>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8002374:	48a5      	ldr	r0, [pc, #660]	; (800260c <ubloxSetFrequency+0x320>)
 8002376:	f005 ff31 	bl	80081dc <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 800237a:	48a4      	ldr	r0, [pc, #656]	; (800260c <ubloxSetFrequency+0x320>)
 800237c:	f006 f9d2 	bl	8008724 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002384:	49a2      	ldr	r1, [pc, #648]	; (8002610 <ubloxSetFrequency+0x324>)
 8002386:	48a1      	ldr	r0, [pc, #644]	; (800260c <ubloxSetFrequency+0x320>)
 8002388:	f005 fe8e 	bl	80080a8 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 800238c:	4ba1      	ldr	r3, [pc, #644]	; (8002614 <ubloxSetFrequency+0x328>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8002392:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002396:	2208      	movs	r2, #8
 8002398:	4619      	mov	r1, r3
 800239a:	489c      	ldr	r0, [pc, #624]	; (800260c <ubloxSetFrequency+0x320>)
 800239c:	f005 fe28 	bl	8007ff0 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80023a0:	bf00      	nop
 80023a2:	4b9c      	ldr	r3, [pc, #624]	; (8002614 <ubloxSetFrequency+0x328>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d1fa      	bne.n	80023a2 <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 80023ac:	230b      	movs	r3, #11
 80023ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80023b2:	e007      	b.n	80023c4 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f000 fc91 	bl	8002cdc <HAL_Delay>
			--i;
 80023ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023be:	3b01      	subs	r3, #1
 80023c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80023c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <ubloxSetFrequency+0xea>
 80023cc:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <ubloxSetFrequency+0x31c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d1ee      	bne.n	80023b4 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 80023d6:	4b90      	ldr	r3, [pc, #576]	; (8002618 <ubloxSetFrequency+0x32c>)
 80023d8:	f107 040c 	add.w	r4, r7, #12
 80023dc:	461d      	mov	r5, r3
 80023de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	8022      	strh	r2, [r4, #0]
 80023ec:	3402      	adds	r4, #2
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80023f2:	f107 010c 	add.w	r1, r7, #12
 80023f6:	2319      	movs	r3, #25
 80023f8:	2222      	movs	r2, #34	; 0x22
 80023fa:	4882      	ldr	r0, [pc, #520]	; (8002604 <ubloxSetFrequency+0x318>)
 80023fc:	f005 fd63 	bl	8007ec6 <HAL_UART_Transmit>
			HAL_Delay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f000 fc6b 	bl	8002cdc <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <ubloxSetFrequency+0x324>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2bb5      	cmp	r3, #181	; 0xb5
 800240c:	f040 80ca 	bne.w	80025a4 <ubloxSetFrequency+0x2b8>
 8002410:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <ubloxSetFrequency+0x324>)
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	2b62      	cmp	r3, #98	; 0x62
 8002416:	f040 80c5 	bne.w	80025a4 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 800241a:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <ubloxSetFrequency+0x324>)
 800241c:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800241e:	2b06      	cmp	r3, #6
 8002420:	f040 80c0 	bne.w	80025a4 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8002424:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <ubloxSetFrequency+0x324>)
 8002426:	78db      	ldrb	r3, [r3, #3]
 8002428:	2b31      	cmp	r3, #49	; 0x31
 800242a:	f040 80bb 	bne.w	80025a4 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002434:	e010      	b.n	8002458 <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 8002436:	4a76      	ldr	r2, [pc, #472]	; (8002610 <ubloxSetFrequency+0x324>)
 8002438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800243c:	4413      	add	r3, r2
 800243e:	7819      	ldrb	r1, [r3, #0]
 8002440:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002448:	4413      	add	r3, r2
 800244a:	460a      	mov	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800244e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002452:	3301      	adds	r3, #1
 8002454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800245c:	2b27      	cmp	r3, #39	; 0x27
 800245e:	d9ea      	bls.n	8002436 <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8002460:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002464:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8002468:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800246c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8002470:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002474:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8002478:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800247c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8002480:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002484:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8002488:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800248c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8002490:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002494:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8002498:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800249c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 80024d0:	23cf      	movs	r3, #207	; 0xcf
 80024d2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 80024d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024da:	2128      	movs	r1, #40	; 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fd4f 	bl	8001f80 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 80024e2:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <ubloxSetFrequency+0x328>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 80024e8:	4848      	ldr	r0, [pc, #288]	; (800260c <ubloxSetFrequency+0x320>)
 80024ea:	f005 fe21 	bl	8008130 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 80024ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024f2:	2228      	movs	r2, #40	; 0x28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4845      	ldr	r0, [pc, #276]	; (800260c <ubloxSetFrequency+0x320>)
 80024f8:	f005 fd7a 	bl	8007ff0 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80024fc:	bf00      	nop
 80024fe:	4b45      	ldr	r3, [pc, #276]	; (8002614 <ubloxSetFrequency+0x328>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d1fa      	bne.n	80024fe <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8002508:	4840      	ldr	r0, [pc, #256]	; (800260c <ubloxSetFrequency+0x320>)
 800250a:	f005 fe11 	bl	8008130 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 800250e:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <ubloxSetFrequency+0x31c>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8002514:	483d      	ldr	r0, [pc, #244]	; (800260c <ubloxSetFrequency+0x320>)
 8002516:	f006 f905 	bl	8008724 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	493c      	ldr	r1, [pc, #240]	; (8002610 <ubloxSetFrequency+0x324>)
 8002520:	483a      	ldr	r0, [pc, #232]	; (800260c <ubloxSetFrequency+0x320>)
 8002522:	f005 fdc1 	bl	80080a8 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8002526:	bf00      	nop
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <ubloxSetFrequency+0x31c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d1fa      	bne.n	8002528 <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8002532:	4836      	ldr	r0, [pc, #216]	; (800260c <ubloxSetFrequency+0x320>)
 8002534:	f005 fe52 	bl	80081dc <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <ubloxSetFrequency+0x324>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2bb5      	cmp	r3, #181	; 0xb5
 800253e:	d131      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
 8002540:	4b33      	ldr	r3, [pc, #204]	; (8002610 <ubloxSetFrequency+0x324>)
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	2b62      	cmp	r3, #98	; 0x62
 8002546:	d12d      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <ubloxSetFrequency+0x324>)
 800254a:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800254c:	2b05      	cmp	r3, #5
 800254e:	d129      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <ubloxSetFrequency+0x324>)
 8002552:	78db      	ldrb	r3, [r3, #3]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d125      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <ubloxSetFrequency+0x324>)
 800255a:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800255c:	2b02      	cmp	r3, #2
 800255e:	d121      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <ubloxSetFrequency+0x324>)
 8002562:	795b      	ldrb	r3, [r3, #5]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11d      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <ubloxSetFrequency+0x324>)
 800256a:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800256c:	2b06      	cmp	r3, #6
 800256e:	d119      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <ubloxSetFrequency+0x324>)
 8002572:	79db      	ldrb	r3, [r3, #7]
 8002574:	2b31      	cmp	r3, #49	; 0x31
 8002576:	d115      	bne.n	80025a4 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <ubloxSetFrequency+0x330>)
 800257a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800257e:	461d      	mov	r5, r3
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002588:	c407      	stmia	r4!, {r0, r1, r2}
 800258a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800258c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002590:	2319      	movs	r3, #25
 8002592:	221c      	movs	r2, #28
 8002594:	481b      	ldr	r0, [pc, #108]	; (8002604 <ubloxSetFrequency+0x318>)
 8002596:	f005 fc96 	bl	8007ec6 <HAL_UART_Transmit>
					HAL_Delay(100);
 800259a:	2064      	movs	r0, #100	; 0x64
 800259c:	f000 fb9e 	bl	8002cdc <HAL_Delay>
				}
#endif
				return 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e027      	b.n	80025f4 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <ubloxSetFrequency+0x334>)
 80025a6:	f107 040c 	add.w	r4, r7, #12
 80025aa:	461d      	mov	r5, r3
 80025ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025b8:	c407      	stmia	r4!, {r0, r1, r2}
 80025ba:	8023      	strh	r3, [r4, #0]
 80025bc:	3402      	adds	r4, #2
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80025c2:	f107 010c 	add.w	r1, r7, #12
 80025c6:	2319      	movs	r3, #25
 80025c8:	222e      	movs	r2, #46	; 0x2e
 80025ca:	480e      	ldr	r0, [pc, #56]	; (8002604 <ubloxSetFrequency+0x318>)
 80025cc:	f005 fc7b 	bl	8007ec6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80025d0:	2064      	movs	r0, #100	; 0x64
 80025d2:	f000 fb83 	bl	8002cdc <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 80025d6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80025da:	3b01      	subs	r3, #1
 80025dc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 80025e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025e4:	f000 fb7a 	bl	8002cdc <HAL_Delay>
	while (tryCtr) {
 80025e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aeac 	bne.w	800234a <ubloxSetFrequency+0x5e>
	}

	return 1;
 80025f2:	2301      	movs	r3, #1
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	37b0      	adds	r7, #176	; 0xb0
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bdb0      	pop	{r4, r5, r7, pc}
 80025fc:	08009eb8 	.word	0x08009eb8
 8002600:	08009ec0 	.word	0x08009ec0
 8002604:	2000055c 	.word	0x2000055c
 8002608:	200002fd 	.word	0x200002fd
 800260c:	200004d8 	.word	0x200004d8
 8002610:	200001fc 	.word	0x200001fc
 8002614:	200002fc 	.word	0x200002fc
 8002618:	08009f04 	.word	0x08009f04
 800261c:	08009e2c 	.word	0x08009e2c
 8002620:	08009f28 	.word	0x08009f28

08002624 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0ac      	sub	sp, #176	; 0xb0
 8002628:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <ubloxMsgsTurnOff+0x40>)
 800262c:	463b      	mov	r3, r7
 800262e:	4611      	mov	r1, r2
 8002630:	22af      	movs	r2, #175	; 0xaf
 8002632:	4618      	mov	r0, r3
 8002634:	f006 fec8 	bl	80093c8 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <ubloxMsgsTurnOff+0x44>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 800263e:	463b      	mov	r3, r7
 8002640:	22af      	movs	r2, #175	; 0xaf
 8002642:	4619      	mov	r1, r3
 8002644:	4809      	ldr	r0, [pc, #36]	; (800266c <ubloxMsgsTurnOff+0x48>)
 8002646:	f005 fcd3 	bl	8007ff0 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 800264a:	bf00      	nop
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <ubloxMsgsTurnOff+0x44>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d1fa      	bne.n	800264c <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <ubloxMsgsTurnOff+0x48>)
 8002658:	f005 fd6a 	bl	8008130 <HAL_UART_AbortTransmit_IT>
}
 800265c:	bf00      	nop
 800265e:	37b0      	adds	r7, #176	; 0xb0
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08009f58 	.word	0x08009f58
 8002668:	200002fc 	.word	0x200002fc
 800266c:	200004d8 	.word	0x200004d8

08002670 <ublox_NavSvinfo_get>:
#endif
	}
}

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b0a4      	sub	sp, #144	; 0x90
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8002678:	4a53      	ldr	r2, [pc, #332]	; (80027c8 <ublox_NavSvinfo_get+0x158>)
 800267a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800267e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002682:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8002686:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800268a:	2108      	movs	r1, #8
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fc77 	bl	8001f80 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <ublox_NavSvinfo_get+0x15c>)
 8002694:	f107 0408 	add.w	r4, r7, #8
 8002698:	461d      	mov	r5, r3
 800269a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800269c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800269e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80026a6:	f107 0108 	add.w	r1, r7, #8
 80026aa:	2319      	movs	r3, #25
 80026ac:	2220      	movs	r2, #32
 80026ae:	4848      	ldr	r0, [pc, #288]	; (80027d0 <ublox_NavSvinfo_get+0x160>)
 80026b0:	f005 fc09 	bl	8007ec6 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80026b4:	4847      	ldr	r0, [pc, #284]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026b6:	f005 fbcd 	bl	8007e54 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80026ba:	f7ff fc31 	bl	8001f20 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <ublox_NavSvinfo_get+0x168>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 80026c4:	4843      	ldr	r0, [pc, #268]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026c6:	f005 fd33 	bl	8008130 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80026ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ce:	2208      	movs	r2, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026d4:	f005 fc8c 	bl	8007ff0 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80026d8:	bf00      	nop
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <ublox_NavSvinfo_get+0x168>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1fa      	bne.n	80026da <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <ublox_NavSvinfo_get+0x16c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80026ea:	483a      	ldr	r0, [pc, #232]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026ec:	f005 fd76 	bl	80081dc <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 80026f0:	4838      	ldr	r0, [pc, #224]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026f2:	f006 f817 	bl	8008724 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80026f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fa:	4939      	ldr	r1, [pc, #228]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 80026fc:	4835      	ldr	r0, [pc, #212]	; (80027d4 <ublox_NavSvinfo_get+0x164>)
 80026fe:	f005 fcd3 	bl	80080a8 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8002702:	bf00      	nop
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <ublox_NavSvinfo_get+0x16c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1fa      	bne.n	8002704 <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8002714:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800271c:	e00b      	b.n	8002736 <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 800271e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 800272c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002730:	3b01      	subs	r3, #1
 8002732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ef      	bne.n	800271e <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2bb5      	cmp	r3, #181	; 0xb5
 8002744:	f040 823b 	bne.w	8002bbe <ublox_NavSvinfo_get+0x54e>
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b62      	cmp	r3, #98	; 0x62
 800274e:	f040 8236 	bne.w	8002bbe <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 8002754:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002756:	2b01      	cmp	r3, #1
 8002758:	f040 8231 	bne.w	8002bbe <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	f040 822c 	bne.w	8002bbe <ublox_NavSvinfo_get+0x54e>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 8002768:	799b      	ldrb	r3, [r3, #6]
 800276a:	461a      	mov	r2, r3
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800276e:	79db      	ldrb	r3, [r3, #7]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	431a      	orrs	r2, r3
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 8002776:	7a1b      	ldrb	r3, [r3, #8]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800277e:	7a5b      	ldrb	r3, [r3, #9]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	4313      	orrs	r3, r2
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800278c:	7a9a      	ldrb	r2, [r3, #10]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 8002794:	7ada      	ldrb	r2, [r3, #11]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 800279c:	7b1b      	ldrb	r3, [r3, #12]
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <ublox_NavSvinfo_get+0x170>)
 80027a2:	7b5b      	ldrb	r3, [r3, #13]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	791b      	ldrb	r3, [r3, #4]
 80027b6:	2b18      	cmp	r3, #24
 80027b8:	d902      	bls.n	80027c0 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2218      	movs	r2, #24
 80027be:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80027c0:	2300      	movs	r3, #0
 80027c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027c4:	e0b2      	b.n	800292c <ublox_NavSvinfo_get+0x2bc>
 80027c6:	bf00      	nop
 80027c8:	0800a37c 	.word	0x0800a37c
 80027cc:	0800a384 	.word	0x0800a384
 80027d0:	2000055c 	.word	0x2000055c
 80027d4:	200004d8 	.word	0x200004d8
 80027d8:	200002fc 	.word	0x200002fc
 80027dc:	200002fd 	.word	0x200002fd
 80027e0:	200001fc 	.word	0x200001fc
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 80027e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	330e      	adds	r3, #14
 80027f0:	4a7d      	ldr	r2, [pc, #500]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 80027f2:	5cd1      	ldrb	r1, [r2, r3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f8:	4413      	add	r3, r2
 80027fa:	3308      	adds	r3, #8
 80027fc:	460a      	mov	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8002800:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	330f      	adds	r3, #15
 800280c:	4a76      	ldr	r2, [pc, #472]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 800280e:	5cd1      	ldrb	r1, [r2, r3]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002814:	4413      	add	r3, r2
 8002816:	3320      	adds	r3, #32
 8002818:	460a      	mov	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 800281c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	3310      	adds	r3, #16
 8002828:	4a6f      	ldr	r2, [pc, #444]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 800282a:	5cd1      	ldrb	r1, [r2, r3]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002830:	4413      	add	r3, r2
 8002832:	3338      	adds	r3, #56	; 0x38
 8002834:	460a      	mov	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8002838:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3311      	adds	r3, #17
 8002844:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 8002846:	5cd1      	ldrb	r1, [r2, r3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800284c:	4413      	add	r3, r2
 800284e:	3350      	adds	r3, #80	; 0x50
 8002850:	460a      	mov	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8002854:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3312      	adds	r3, #18
 8002860:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 8002862:	5cd1      	ldrb	r1, [r2, r3]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002868:	4413      	add	r3, r2
 800286a:	3368      	adds	r3, #104	; 0x68
 800286c:	460a      	mov	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 8002870:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3313      	adds	r3, #19
 800287c:	4a5a      	ldr	r2, [pc, #360]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	b259      	sxtb	r1, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002886:	4413      	add	r3, r2
 8002888:	3380      	adds	r3, #128	; 0x80
 800288a:	460a      	mov	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 14 + 12 * iChn] | (ublox_Response[6 + 15 + 12 * iChn] << 8));
 800288e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	3314      	adds	r3, #20
 800289a:	4a53      	ldr	r2, [pc, #332]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	b219      	sxth	r1, r3
 80028a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	3315      	adds	r3, #21
 80028ac:	4a4e      	ldr	r2, [pc, #312]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	430b      	orrs	r3, r1
 80028b6:	b219      	sxth	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028bc:	324c      	adds	r2, #76	; 0x4c
 80028be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 16 + 12 * iChn] | (ublox_Response[6 + 17 + 12 * iChn] << 8)  | (ublox_Response[6 + 18 + 12 * iChn] << 16)  | (ublox_Response[6 + 19 + 12 * iChn] << 24));
 80028c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	3316      	adds	r3, #22
 80028ce:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	b219      	sxth	r1, r3
 80028d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3317      	adds	r3, #23
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	430b      	orrs	r3, r1
 80028ea:	b219      	sxth	r1, r3
 80028ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	3318      	adds	r3, #24
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	b21b      	sxth	r3, r3
 8002900:	430b      	orrs	r3, r1
 8002902:	b219      	sxth	r1, r3
 8002904:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	3319      	adds	r3, #25
 8002910:	4a35      	ldr	r2, [pc, #212]	; (80029e8 <ublox_NavSvinfo_get+0x378>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	b21b      	sxth	r3, r3
 8002918:	430b      	orrs	r3, r1
 800291a:	b219      	sxth	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002920:	324c      	adds	r2, #76	; 0x4c
 8002922:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8002926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002928:	3301      	adds	r3, #1
 800292a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	461a      	mov	r2, r3
 8002932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002934:	4293      	cmp	r3, r2
 8002936:	f6ff af55 	blt.w	80027e4 <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 800293a:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <ublox_NavSvinfo_get+0x37c>)
 800293c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002940:	ca07      	ldmia	r2, {r0, r1, r2}
 8002942:	c303      	stmia	r3!, {r0, r1}
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	3302      	adds	r3, #2
 8002948:	0c12      	lsrs	r2, r2, #16
 800294a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800294c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002950:	2319      	movs	r3, #25
 8002952:	220a      	movs	r2, #10
 8002954:	4826      	ldr	r0, [pc, #152]	; (80029f0 <ublox_NavSvinfo_get+0x380>)
 8002956:	f005 fab6 	bl	8007ec6 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f107 0008 	add.w	r0, r7, #8
 8002962:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <ublox_NavSvinfo_get+0x384>)
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	f006 fd45 	bl	80093f4 <sniprintf>
 800296a:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	b29a      	uxth	r2, r3
 8002970:	f107 0108 	add.w	r1, r7, #8
 8002974:	2319      	movs	r3, #25
 8002976:	481e      	ldr	r0, [pc, #120]	; (80029f0 <ublox_NavSvinfo_get+0x380>)
 8002978:	f005 faa5 	bl	8007ec6 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	f107 0008 	add.w	r0, r7, #8
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <ublox_NavSvinfo_get+0x388>)
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	f006 fd34 	bl	80093f4 <sniprintf>
 800298c:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	b29a      	uxth	r2, r3
 8002992:	f107 0108 	add.w	r1, r7, #8
 8002996:	2319      	movs	r3, #25
 8002998:	4815      	ldr	r0, [pc, #84]	; (80029f0 <ublox_NavSvinfo_get+0x380>)
 800299a:	f005 fa94 	bl	8007ec6 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	795b      	ldrb	r3, [r3, #5]
 80029a2:	f107 0008 	add.w	r0, r7, #8
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <ublox_NavSvinfo_get+0x38c>)
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	f006 fd23 	bl	80093f4 <sniprintf>
 80029ae:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	f107 0108 	add.w	r1, r7, #8
 80029b8:	2319      	movs	r3, #25
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <ublox_NavSvinfo_get+0x380>)
 80029bc:	f005 fa83 	bl	8007ec6 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	88db      	ldrh	r3, [r3, #6]
 80029c4:	f107 0008 	add.w	r0, r7, #8
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <ublox_NavSvinfo_get+0x390>)
 80029ca:	2140      	movs	r1, #64	; 0x40
 80029cc:	f006 fd12 	bl	80093f4 <sniprintf>
 80029d0:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f107 0108 	add.w	r1, r7, #8
 80029da:	2319      	movs	r3, #25
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <ublox_NavSvinfo_get+0x380>)
 80029de:	f005 fa72 	bl	8007ec6 <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029e6:	e0d2      	b.n	8002b8e <ublox_NavSvinfo_get+0x51e>
 80029e8:	200001fc 	.word	0x200001fc
 80029ec:	0800a158 	.word	0x0800a158
 80029f0:	2000055c 	.word	0x2000055c
 80029f4:	0800a008 	.word	0x0800a008
 80029f8:	0800a224 	.word	0x0800a224
 80029fc:	0800a240 	.word	0x0800a240
 8002a00:	0800a260 	.word	0x0800a260
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	4a77      	ldr	r2, [pc, #476]	; (8002be8 <ublox_NavSvinfo_get+0x578>)
 8002a0a:	2140      	movs	r1, #64	; 0x40
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f006 fcf1 	bl	80093f4 <sniprintf>
 8002a12:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	f107 0108 	add.w	r1, r7, #8
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	4873      	ldr	r0, [pc, #460]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002a20:	f005 fa51 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a28:	4413      	add	r3, r2
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f107 0008 	add.w	r0, r7, #8
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a36:	4a6e      	ldr	r2, [pc, #440]	; (8002bf0 <ublox_NavSvinfo_get+0x580>)
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	f006 fcdb 	bl	80093f4 <sniprintf>
 8002a3e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	f107 0108 	add.w	r1, r7, #8
 8002a48:	2319      	movs	r3, #25
 8002a4a:	4868      	ldr	r0, [pc, #416]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002a4c:	f005 fa3b 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a54:	4413      	add	r3, r2
 8002a56:	3320      	adds	r3, #32
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f107 0008 	add.w	r0, r7, #8
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a62:	4a64      	ldr	r2, [pc, #400]	; (8002bf4 <ublox_NavSvinfo_get+0x584>)
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	f006 fcc5 	bl	80093f4 <sniprintf>
 8002a6a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	f107 0108 	add.w	r1, r7, #8
 8002a74:	2319      	movs	r3, #25
 8002a76:	485d      	ldr	r0, [pc, #372]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002a78:	f005 fa25 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a80:	4413      	add	r3, r2
 8002a82:	3338      	adds	r3, #56	; 0x38
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f107 0008 	add.w	r0, r7, #8
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	4a5a      	ldr	r2, [pc, #360]	; (8002bf8 <ublox_NavSvinfo_get+0x588>)
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	f006 fcaf 	bl	80093f4 <sniprintf>
 8002a96:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	f107 0108 	add.w	r1, r7, #8
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	4852      	ldr	r0, [pc, #328]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002aa4:	f005 fa0f 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aac:	4413      	add	r3, r2
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f107 0008 	add.w	r0, r7, #8
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aba:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <ublox_NavSvinfo_get+0x58c>)
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	f006 fc99 	bl	80093f4 <sniprintf>
 8002ac2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f107 0108 	add.w	r1, r7, #8
 8002acc:	2319      	movs	r3, #25
 8002ace:	4847      	ldr	r0, [pc, #284]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002ad0:	f005 f9f9 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad8:	4413      	add	r3, r2
 8002ada:	3368      	adds	r3, #104	; 0x68
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f107 0008 	add.w	r0, r7, #8
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae6:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <ublox_NavSvinfo_get+0x590>)
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	f006 fc83 	bl	80093f4 <sniprintf>
 8002aee:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	f107 0108 	add.w	r1, r7, #8
 8002af8:	2319      	movs	r3, #25
 8002afa:	483c      	ldr	r0, [pc, #240]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002afc:	f005 f9e3 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b04:	4413      	add	r3, r2
 8002b06:	3380      	adds	r3, #128	; 0x80
 8002b08:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0c:	f107 0008 	add.w	r0, r7, #8
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <ublox_NavSvinfo_get+0x594>)
 8002b16:	2140      	movs	r1, #64	; 0x40
 8002b18:	f006 fc6c 	bl	80093f4 <sniprintf>
 8002b1c:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f107 0108 	add.w	r1, r7, #8
 8002b26:	2319      	movs	r3, #25
 8002b28:	4830      	ldr	r0, [pc, #192]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002b2a:	f005 f9cc 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b32:	4413      	add	r3, r2
 8002b34:	3380      	adds	r3, #128	; 0x80
 8002b36:	f993 3000 	ldrsb.w	r3, [r3]
 8002b3a:	f107 0008 	add.w	r0, r7, #8
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b42:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <ublox_NavSvinfo_get+0x598>)
 8002b44:	2140      	movs	r1, #64	; 0x40
 8002b46:	f006 fc55 	bl	80093f4 <sniprintf>
 8002b4a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f107 0108 	add.w	r1, r7, #8
 8002b54:	2319      	movs	r3, #25
 8002b56:	4825      	ldr	r0, [pc, #148]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002b58:	f005 f9b5 	bl	8007ec6 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b60:	3232      	adds	r2, #50	; 0x32
 8002b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b66:	f107 0008 	add.w	r0, r7, #8
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <ublox_NavSvinfo_get+0x59c>)
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	f006 fc3f 	bl	80093f4 <sniprintf>
 8002b76:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	f107 0108 	add.w	r1, r7, #8
 8002b80:	2319      	movs	r3, #25
 8002b82:	481a      	ldr	r0, [pc, #104]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002b84:	f005 f99f 	bl	8007ec6 <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8002b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b96:	4293      	cmp	r3, r2
 8002b98:	f6ff af34 	blt.w	8002a04 <ublox_NavSvinfo_get+0x394>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <ublox_NavSvinfo_get+0x5a0>)
 8002b9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	8019      	strh	r1, [r3, #0]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	0c12      	lsrs	r2, r2, #16
 8002bac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002bae:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002bb2:	2319      	movs	r3, #25
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	480d      	ldr	r0, [pc, #52]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002bb8:	f005 f985 	bl	8007ec6 <HAL_UART_Transmit>
		{
 8002bbc:	e00f      	b.n	8002bde <ublox_NavSvinfo_get+0x56e>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <ublox_NavSvinfo_get+0x5a4>)
 8002bc0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002bce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002bd2:	2319      	movs	r3, #25
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <ublox_NavSvinfo_get+0x57c>)
 8002bd8:	f005 f975 	bl	8007ec6 <HAL_UART_Transmit>
		}
#endif
	}
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3788      	adds	r7, #136	; 0x88
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	0800a27c 	.word	0x0800a27c
 8002bec:	2000055c 	.word	0x2000055c
 8002bf0:	0800a284 	.word	0x0800a284
 8002bf4:	0800a2a0 	.word	0x0800a2a0
 8002bf8:	0800a2bc 	.word	0x0800a2bc
 8002bfc:	0800a2dc 	.word	0x0800a2dc
 8002c00:	0800a2fc 	.word	0x0800a2fc
 8002c04:	0800a31c 	.word	0x0800a31c
 8002c08:	0800a33c 	.word	0x0800a33c
 8002c0c:	0800a35c 	.word	0x0800a35c
 8002c10:	0800a164 	.word	0x0800a164
 8002c14:	0800a168 	.word	0x0800a168

08002c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c1c:	f7fe fed6 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c22:	e003      	b.n	8002c2c <LoopCopyDataInit>

08002c24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c2a:	3104      	adds	r1, #4

08002c2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c2c:	480a      	ldr	r0, [pc, #40]	; (8002c58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c34:	d3f6      	bcc.n	8002c24 <CopyDataInit>
	ldr	r2, =_sbss
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c38:	e002      	b.n	8002c40 <LoopFillZerobss>

08002c3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c3c:	f842 3b04 	str.w	r3, [r2], #4

08002c40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <LoopForever+0x16>)
	cmp	r2, r3
 8002c42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c44:	d3f9      	bcc.n	8002c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c46:	f006 fb9b 	bl	8009380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c4a:	f7fe fabf 	bl	80011cc <main>

08002c4e <LoopForever>:

LoopForever:
    b LoopForever
 8002c4e:	e7fe      	b.n	8002c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c50:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002c54:	0800a434 	.word	0x0800a434
	ldr	r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c5c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002c60:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002c64:	200005f4 	.word	0x200005f4

08002c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC1_IRQHandler>

08002c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 ffda 	bl	8003c2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c7a:	200f      	movs	r0, #15
 8002c7c:	f7fe fdc6 	bl	800180c <HAL_InitTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e001      	b.n	8002c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c8c:	f7fe fd9a 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c90:	79fb      	ldrb	r3, [r7, #7]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x20>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x24>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_IncTick+0x24>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	200005e0 	.word	0x200005e0

08002cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetTick+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200005e0 	.word	0x200005e0

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff ffee 	bl	8002cc4 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d005      	beq.n	8002d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_Delay+0x44>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d02:	bf00      	nop
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d8f7      	bhi.n	8002d04 <HAL_Delay+0x28>
  {
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000008 	.word	0x20000008

08002d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3360      	adds	r3, #96	; 0x60
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <LL_ADC_SetOffset+0x44>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	03fff000 	.word	0x03fff000

08002dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3360      	adds	r3, #96	; 0x60
 8002de2:	461a      	mov	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3360      	adds	r3, #96	; 0x60
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3330      	adds	r3, #48	; 0x30
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	211f      	movs	r1, #31
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	401a      	ands	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	f003 011f 	and.w	r1, r3, #31
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0e5b      	lsrs	r3, r3, #25
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0d1b      	lsrs	r3, r3, #20
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2107      	movs	r1, #7
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0d1b      	lsrs	r3, r3, #20
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0318 	and.w	r3, r3, #24
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f08:	40d9      	lsrs	r1, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	0007ffff 	.word	0x0007ffff

08002f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6093      	str	r3, [r2, #8]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_IsEnabled+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_IsEnabled+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d101      	bne.n	8003006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d101      	bne.n	800302c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e12c      	b.n	80032b0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fd fae3 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff67 	bl	8002f50 <LL_ADC_IsDeepPowerDownEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff4d 	bl	8002f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff82 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff66 	bl	8002f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ac:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_ADC_Init+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	4a82      	ldr	r2, [pc, #520]	; (80032bc <HAL_ADC_Init+0x280>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030c0:	e002      	b.n	80030c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff64 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff75 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003104:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80c5 	bne.w	800329e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 80c1 	bne.w	800329e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003124:	f043 0202 	orr.w	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff49 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800313c:	4860      	ldr	r0, [pc, #384]	; (80032c0 <HAL_ADC_Init+0x284>)
 800313e:	f7ff ff43 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4619      	mov	r1, r3
 800314e:	485d      	ldr	r0, [pc, #372]	; (80032c4 <HAL_ADC_Init+0x288>)
 8003150:	f7ff fde8 	bl	8002d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7e5b      	ldrb	r3, [r3, #25]
 8003158:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800315e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003164:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800316a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d106      	bne.n	8003190 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	3b01      	subs	r3, #1
 8003188:	045b      	lsls	r3, r3, #17
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <HAL_ADC_Init+0x28c>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	430b      	orrs	r3, r1
 80031be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff12 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 80031ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff1f 	bl	8003014 <LL_ADC_INJ_IsConversionOngoing>
 80031d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d13d      	bne.n	800325a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d13a      	bne.n	800325a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80031e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003200:	f023 0302 	bic.w	r3, r3, #2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	69b9      	ldr	r1, [r7, #24]
 800320a:	430b      	orrs	r3, r1
 800320c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003214:	2b01      	cmp	r3, #1
 8003216:	d118      	bne.n	800324a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800323a:	430a      	orrs	r2, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	611a      	str	r2, [r3, #16]
 8003248:	e007      	b.n	800325a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d10c      	bne.n	800327c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f023 010f 	bic.w	r1, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	1e5a      	subs	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
 800327a:	e007      	b.n	800328c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 020f 	bic.w	r2, r2, #15
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f023 0303 	bic.w	r3, r3, #3
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
 800329c:	e007      	b.n	80032ae <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000000 	.word	0x20000000
 80032bc:	053e2d63 	.word	0x053e2d63
 80032c0:	50040000 	.word	0x50040000
 80032c4:	50040300 	.word	0x50040300
 80032c8:	fff0c007 	.word	0xfff0c007

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0b6      	sub	sp, #216	; 0xd8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e3b9      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x796>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe77 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 839e 	bne.w	8003a44 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d824      	bhi.n	800335a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	3b02      	subs	r3, #2
 8003316:	2b03      	cmp	r3, #3
 8003318:	d81b      	bhi.n	8003352 <HAL_ADC_ConfigChannel+0x86>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_ADC_ConfigChannel+0x54>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003331 	.word	0x08003331
 8003324:	08003339 	.word	0x08003339
 8003328:	08003341 	.word	0x08003341
 800332c:	08003349 	.word	0x08003349
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	220c      	movs	r2, #12
 8003334:	605a      	str	r2, [r3, #4]
          break;
 8003336:	e011      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2212      	movs	r2, #18
 800333c:	605a      	str	r2, [r3, #4]
          break;
 800333e:	e00d      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2218      	movs	r2, #24
 8003344:	605a      	str	r2, [r3, #4]
          break;
 8003346:	e009      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334e:	605a      	str	r2, [r3, #4]
          break;
 8003350:	e004      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2206      	movs	r2, #6
 8003356:	605a      	str	r2, [r3, #4]
          break;
 8003358:	e000      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800335a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	f7ff fd64 	bl	8002e36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe3b 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003378:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fe47 	bl	8003014 <LL_ADC_INJ_IsConversionOngoing>
 8003386:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 81a6 	bne.w	80036e0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003398:	2b00      	cmp	r3, #0
 800339a:	f040 81a1 	bne.w	80036e0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f7ff fd6f 	bl	8002e8e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	08db      	lsrs	r3, r3, #3
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00a      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033e2:	f7ff fcd3 	bl	8002d8c <LL_ADC_SetOffset>
 80033e6:	e17b      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fcf0 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x148>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fce5 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	e01e      	b.n	8003452 <HAL_ADC_ConfigChannel+0x186>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fcda 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003420:	4603      	mov	r3, r0
 8003422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800343a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e004      	b.n	8003450 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <HAL_ADC_ConfigChannel+0x19e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	e018      	b.n	800349c <HAL_ADC_ConfigChannel+0x1d0>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800347e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e004      	b.n	800349c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800349c:	429a      	cmp	r2, r3
 800349e:	d106      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fca9 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fc8d 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x20e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fc82 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x24c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fc77 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800350c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x264>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e018      	b.n	8003562 <HAL_ADC_ConfigChannel+0x296>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003544:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e004      	b.n	8003562 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003562:	429a      	cmp	r2, r3
 8003564:	d106      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fc46 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fc2a 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x2d4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fc1f 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x312>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2102      	movs	r1, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fc14 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x32a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e016      	b.n	8003624 <HAL_ADC_ConfigChannel+0x358>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800360a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800360e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e004      	b.n	8003624 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800361a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003624:	429a      	cmp	r2, r3
 8003626:	d106      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fbe5 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2103      	movs	r1, #3
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fbc9 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x396>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2103      	movs	r1, #3
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fbbe 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	e017      	b.n	8003692 <HAL_ADC_ConfigChannel+0x3c6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2103      	movs	r1, #3
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fbb3 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800367a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800367c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800367e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x3de>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	e011      	b.n	80036ce <HAL_ADC_ConfigChannel+0x402>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80036c2:	2320      	movs	r3, #32
 80036c4:	e003      	b.n	80036ce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d106      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2103      	movs	r1, #3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fb90 	bl	8002e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fc6f 	bl	8002fc8 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 813f 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7ff fbf0 	bl	8002ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a8e      	ldr	r2, [pc, #568]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 8130 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x46c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2b09      	cmp	r3, #9
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e019      	b.n	800376c <HAL_ADC_ConfigChannel+0x4a0>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003748:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800374a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2b09      	cmp	r3, #9
 8003764:	bf94      	ite	ls
 8003766:	2301      	movls	r3, #1
 8003768:	2300      	movhi	r3, #0
 800376a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376c:	2b00      	cmp	r3, #0
 800376e:	d079      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_ADC_ConfigChannel+0x4c0>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378a:	e015      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x4ec>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x50c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	3301      	adds	r3, #1
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	e017      	b.n	8003808 <HAL_ADC_ConfigChannel+0x53c>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80037f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_ADC_ConfigChannel+0x562>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	051b      	lsls	r3, r3, #20
 800382c:	e018      	b.n	8003860 <HAL_ADC_ConfigChannel+0x594>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003846:	2320      	movs	r3, #32
 8003848:	e003      	b.n	8003852 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800384a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003860:	430b      	orrs	r3, r1
 8003862:	e080      	b.n	8003966 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x5b4>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	3301      	adds	r3, #1
 8003878:	069b      	lsls	r3, r3, #26
 800387a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387e:	e015      	b.n	80038ac <HAL_ADC_ConfigChannel+0x5e0>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003898:	2320      	movs	r3, #32
 800389a:	e003      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	069b      	lsls	r3, r3, #26
 80038a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x600>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	e017      	b.n	80038fc <HAL_ADC_ConfigChannel+0x630>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	61fb      	str	r3, [r7, #28]
  return result;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	ea42 0103 	orr.w	r1, r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x65c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	3301      	adds	r3, #1
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	3b1e      	subs	r3, #30
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003926:	e01d      	b.n	8003964 <HAL_ADC_ConfigChannel+0x698>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	613b      	str	r3, [r7, #16]
  return result;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e005      	b.n	8003950 <HAL_ADC_ConfigChannel+0x684>
 8003944:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	3b1e      	subs	r3, #30
 800395e:	051b      	lsls	r3, r3, #20
 8003960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003964:	430b      	orrs	r3, r1
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	4619      	mov	r1, r3
 800396c:	f7ff fa8f 	bl	8002e8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_ADC_ConfigChannel+0x7a0>)
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d06c      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397c:	483c      	ldr	r0, [pc, #240]	; (8003a70 <HAL_ADC_ConfigChannel+0x7a4>)
 800397e:	f7ff f9f7 	bl	8002d70 <LL_ADC_GetCommonPathInternalCh>
 8003982:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_ADC_ConfigChannel+0x7a8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d127      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d121      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_ADC_ConfigChannel+0x7ac>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d157      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ae:	4619      	mov	r1, r3
 80039b0:	482f      	ldr	r0, [pc, #188]	; (8003a70 <HAL_ADC_ConfigChannel+0x7a4>)
 80039b2:	f7ff f9ca 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_ADC_ConfigChannel+0x7b0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_ADC_ConfigChannel+0x7b4>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f9      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039de:	e03a      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_ADC_ConfigChannel+0x7b8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d113      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x746>
 80039ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <HAL_ADC_ConfigChannel+0x7ac>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d12a      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a0c:	f7ff f99d 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a10:	e021      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d11c      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a3e:	f7ff f984 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
 8003a42:	e008      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	37d8      	adds	r7, #216	; 0xd8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	80080000 	.word	0x80080000
 8003a70:	50040300 	.word	0x50040300
 8003a74:	c7520000 	.word	0xc7520000
 8003a78:	50040000 	.word	0x50040000
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	053e2d63 	.word	0x053e2d63
 8003a84:	cb840000 	.word	0xcb840000
 8003a88:	80000001 	.word	0x80000001

08003a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	60d3      	str	r3, [r2, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <__NVIC_GetPriorityGrouping+0x18>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	f003 0307 	and.w	r3, r3, #7
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db0b      	blt.n	8003b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4907      	ldr	r1, [pc, #28]	; (8003b28 <__NVIC_EnableIRQ+0x38>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db12      	blt.n	8003b64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	490a      	ldr	r1, [pc, #40]	; (8003b70 <__NVIC_DisableIRQ+0x44>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	3320      	adds	r3, #32
 8003b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b58:	f3bf 8f4f 	dsb	sy
}
 8003b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b5e:	f3bf 8f6f 	isb	sy
}
 8003b62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	; (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff28 	bl	8003a8c <__NVIC_SetPriorityGrouping>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c56:	f7ff ff3d 	bl	8003ad4 <__NVIC_GetPriorityGrouping>
 8003c5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	6978      	ldr	r0, [r7, #20]
 8003c62:	f7ff ffb1 	bl	8003bc8 <NVIC_EncodePriority>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff80 	bl	8003b74 <__NVIC_SetPriority>
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff30 	bl	8003af0 <__NVIC_EnableIRQ>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff40 	bl	8003b2c <__NVIC_DisableIRQ>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d008      	beq.n	8003cde <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 020e 	bic.w	r2, r2, #14
 8003cec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f003 021c 	and.w	r2, r3, #28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d005      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	e029      	b.n	8003da8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 020e 	bic.w	r2, r2, #14
 8003d62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f003 021c 	and.w	r2, r3, #28
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f202 	lsl.w	r2, r1, r2
 8003d86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    }
  }
  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dc0:	b2db      	uxtb	r3, r3
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dde:	e148      	b.n	8004072 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2101      	movs	r1, #1
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 813a 	beq.w	800406c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d00b      	beq.n	8003e18 <HAL_GPIO_Init+0x48>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d007      	beq.n	8003e18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e0c:	2b11      	cmp	r3, #17
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b12      	cmp	r3, #18
 8003e16:	d130      	bne.n	8003e7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4e:	2201      	movs	r2, #1
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0201 	and.w	r2, r3, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0xea>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b12      	cmp	r3, #18
 8003eb8:	d123      	bne.n	8003f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	08da      	lsrs	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3208      	adds	r2, #8
 8003ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	08da      	lsrs	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3208      	adds	r2, #8
 8003efc:	6939      	ldr	r1, [r7, #16]
 8003efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0203 	and.w	r2, r3, #3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8094 	beq.w	800406c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f44:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x2c0>)
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	4a51      	ldr	r2, [pc, #324]	; (8004090 <HAL_GPIO_Init+0x2c0>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6613      	str	r3, [r2, #96]	; 0x60
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <HAL_GPIO_Init+0x2c0>)
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f5c:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_GPIO_Init+0x2c4>)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f86:	d00d      	beq.n	8003fa4 <HAL_GPIO_Init+0x1d4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a43      	ldr	r2, [pc, #268]	; (8004098 <HAL_GPIO_Init+0x2c8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <HAL_GPIO_Init+0x1d0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a42      	ldr	r2, [pc, #264]	; (800409c <HAL_GPIO_Init+0x2cc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_GPIO_Init+0x1cc>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e004      	b.n	8003fa6 <HAL_GPIO_Init+0x1d6>
 8003f9c:	2307      	movs	r3, #7
 8003f9e:	e002      	b.n	8003fa6 <HAL_GPIO_Init+0x1d6>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_Init+0x1d6>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	f002 0203 	and.w	r2, r2, #3
 8003fac:	0092      	lsls	r2, r2, #2
 8003fae:	4093      	lsls	r3, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fb6:	4937      	ldr	r1, [pc, #220]	; (8004094 <HAL_GPIO_Init+0x2c4>)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fc4:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003fee:	4b2c      	ldr	r3, [pc, #176]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_GPIO_Init+0x2d0>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f aeaf 	bne.w	8003de0 <HAL_GPIO_Init+0x10>
  }
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40021000 	.word	0x40021000
 8004094:	40010000 	.word	0x40010000
 8004098:	48000400 	.word	0x48000400
 800409c:	48000800 	.word	0x48000800
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040b2:	e0ab      	b.n	800420c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80040b4:	2201      	movs	r2, #1
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 809e 	beq.w	8004206 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80040ca:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_GPIO_DeInit+0x184>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	3302      	adds	r3, #2
 80040d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	220f      	movs	r2, #15
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040f2:	d00d      	beq.n	8004110 <HAL_GPIO_DeInit+0x6c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a4d      	ldr	r2, [pc, #308]	; (800422c <HAL_GPIO_DeInit+0x188>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <HAL_GPIO_DeInit+0x68>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a4c      	ldr	r2, [pc, #304]	; (8004230 <HAL_GPIO_DeInit+0x18c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_GPIO_DeInit+0x64>
 8004104:	2302      	movs	r3, #2
 8004106:	e004      	b.n	8004112 <HAL_GPIO_DeInit+0x6e>
 8004108:	2307      	movs	r3, #7
 800410a:	e002      	b.n	8004112 <HAL_GPIO_DeInit+0x6e>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_GPIO_DeInit+0x6e>
 8004110:	2300      	movs	r3, #0
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	f002 0203 	and.w	r2, r2, #3
 8004118:	0092      	lsls	r2, r2, #2
 800411a:	4093      	lsls	r3, r2
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	429a      	cmp	r2, r3
 8004120:	d132      	bne.n	8004188 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004122:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	4942      	ldr	r1, [pc, #264]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 800412c:	4013      	ands	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004130:	4b40      	ldr	r3, [pc, #256]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	493e      	ldr	r1, [pc, #248]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 800413a:	4013      	ands	r3, r2
 800413c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	493b      	ldr	r1, [pc, #236]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 8004148:	4013      	ands	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800414c:	4b39      	ldr	r3, [pc, #228]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	43db      	mvns	r3, r3
 8004154:	4937      	ldr	r1, [pc, #220]	; (8004234 <HAL_GPIO_DeInit+0x190>)
 8004156:	4013      	ands	r3, r2
 8004158:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	220f      	movs	r2, #15
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800416a:	4a2f      	ldr	r2, [pc, #188]	; (8004228 <HAL_GPIO_DeInit+0x184>)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43da      	mvns	r2, r3
 800417a:	482b      	ldr	r0, [pc, #172]	; (8004228 <HAL_GPIO_DeInit+0x184>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	400a      	ands	r2, r1
 8004182:	3302      	adds	r3, #2
 8004184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	2103      	movs	r1, #3
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	08da      	lsrs	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3208      	adds	r2, #8
 80041a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	08d2      	lsrs	r2, r2, #3
 80041bc:	4019      	ands	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2103      	movs	r1, #3
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2101      	movs	r1, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2103      	movs	r1, #3
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3301      	adds	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	f47f af4d 	bne.w	80040b4 <HAL_GPIO_DeInit+0x10>
  }
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40010000 	.word	0x40010000
 800422c:	48000400 	.word	0x48000400
 8004230:	48000800 	.word	0x48000800
 8004234:	40010400 	.word	0x40010400

08004238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e001      	b.n	800425a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004284:	e002      	b.n	800428c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004286:	887a      	ldrh	r2, [r7, #2]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e081      	b.n	80043ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fe5c 	bl	8000f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	e006      	b.n	8004320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800431e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d104      	bne.n	8004332 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004344:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004354:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	ea42 0103 	orr.w	r1, r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69d9      	ldr	r1, [r3, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
 80043c8:	4613      	mov	r3, r2
 80043ca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d153      	bne.n	8004480 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e6:	d101      	bne.n	80043ec <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
 80043ea:	e04a      	b.n	8004482 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_I2C_Master_Transmit_IT+0x42>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e043      	b.n	8004482 <HAL_I2C_Master_Transmit_IT+0xca>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2221      	movs	r2, #33	; 0x21
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2210      	movs	r2, #16
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	893a      	ldrh	r2, [r7, #8]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800442e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2bff      	cmp	r3, #255	; 0xff
 8004438:	d906      	bls.n	8004448 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	22ff      	movs	r2, #255	; 0xff
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e007      	b.n	8004458 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004456:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 fadc 	bl	8005a24 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004474:	2101      	movs	r1, #1
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f001 fb02 	bl	8005a80 <I2C_Enable_IRQ>

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	ffff0000 	.word	0xffff0000
 8004490:	080048a1 	.word	0x080048a1
 8004494:	80002000 	.word	0x80002000

08004498 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	460b      	mov	r3, r1
 80044a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	f040 80f1 	bne.w	800469c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e0e7      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_I2C_IsDeviceReady+0x44>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0e0      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_I2C_IsDeviceReady+0x72>
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004508:	e004      	b.n	8004514 <HAL_I2C_IsDeviceReady+0x7c>
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004510:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800451a:	f7fe fbd3 	bl	8002cc4 <HAL_GetTick>
 800451e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800454c:	e034      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d01a      	beq.n	800458c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fbb5 	bl	8002cc4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <HAL_I2C_IsDeviceReady+0xd4>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e088      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	bf0c      	ite	eq
 80045b0:	2301      	moveq	r3, #1
 80045b2:	2300      	movne	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045b8:	7ffb      	ldrb	r3, [r7, #31]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_I2C_IsDeviceReady+0x12c>
 80045be:	7fbb      	ldrb	r3, [r7, #30]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0c4      	beq.n	800454e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d01a      	beq.n	8004608 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2200      	movs	r2, #0
 80045da:	2120      	movs	r1, #32
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f001 f9e0 	bl	80059a2 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e058      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2220      	movs	r2, #32
 80045f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e04a      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	2120      	movs	r1, #32
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 f9c5 	bl	80059a2 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e03d      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2220      	movs	r2, #32
 8004630:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d118      	bne.n	800466c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004648:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2200      	movs	r2, #0
 8004652:	2120      	movs	r1, #32
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f001 f9a4 	bl	80059a2 <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01c      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2220      	movs	r2, #32
 800466a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3301      	adds	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	f63f af3b 	bhi.w	80044f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
  }
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_I2C_ER_IRQHandler+0x46>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	09db      	lsrs	r3, r3, #7
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800471e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0a9b      	lsrs	r3, r3, #10
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_I2C_ER_IRQHandler+0x74>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	f043 0208 	orr.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800474c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d010      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0xa2>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	09db      	lsrs	r3, r3, #7
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 030b 	and.w	r3, r3, #11
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 ffce 	bl	8005730 <I2C_ITError>
  }
}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
 80047f8:	4613      	mov	r3, r2
 80047fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487a:	b2db      	uxtb	r3, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <I2C_Master_ISR_IT+0x1e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e114      	b.n	8004ae8 <I2C_Master_ISR_IT+0x248>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d013      	beq.n	80048fa <I2C_Master_ISR_IT+0x5a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2210      	movs	r2, #16
 80048e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f001 f813 	bl	800591e <I2C_Flush_TXDR>
 80048f8:	e0e1      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d023      	beq.n	800494e <I2C_Master_ISR_IT+0xae>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01d      	beq.n	800494e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800494c:	e0b7      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01e      	beq.n	8004998 <I2C_Master_ISR_IT+0xf8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004996:	e092      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	09db      	lsrs	r3, r3, #7
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05d      	beq.n	8004a60 <I2C_Master_ISR_IT+0x1c0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d057      	beq.n	8004a60 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d040      	beq.n	8004a3c <I2C_Master_ISR_IT+0x19c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d13c      	bne.n	8004a3c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ce:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2bff      	cmp	r3, #255	; 0xff
 80049d8:	d90e      	bls.n	80049f8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	8a79      	ldrh	r1, [r7, #18]
 80049e8:	2300      	movs	r3, #0
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f001 f817 	bl	8005a24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f6:	e032      	b.n	8004a5e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a0a:	d00b      	beq.n	8004a24 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	8a79      	ldrh	r1, [r7, #18]
 8004a18:	2000      	movs	r0, #0
 8004a1a:	9000      	str	r0, [sp, #0]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f001 f801 	bl	8005a24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a22:	e01c      	b.n	8004a5e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	8a79      	ldrh	r1, [r7, #18]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fff5 	bl	8005a24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a3a:	e010      	b.n	8004a5e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4a:	d003      	beq.n	8004a54 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fba9 	bl	80051a4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a52:	e034      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fe6a 	bl	8005730 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a5c:	e02f      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
 8004a5e:	e02e      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d028      	beq.n	8004abe <I2C_Master_ISR_IT+0x21e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d119      	bne.n	8004ab6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a90:	d015      	beq.n	8004abe <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a9a:	d108      	bne.n	8004aae <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	e007      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fb78 	bl	80051a4 <I2C_ITMasterSeqCplt>
 8004ab4:	e003      	b.n	8004abe <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ab6:	2140      	movs	r1, #64	; 0x40
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fe39 	bl	8005730 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <I2C_Master_ISR_IT+0x23e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fbff 	bl	80052dc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <I2C_Slave_ISR_IT+0x24>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0ec      	b.n	8004cee <I2C_Slave_ISR_IT+0x1fe>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <I2C_Slave_ISR_IT+0x4c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b34:	6939      	ldr	r1, [r7, #16]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fc9a 	bl	8005470 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04d      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xf4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d047      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d128      	bne.n	8004bb0 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b28      	cmp	r3, #40	; 0x28
 8004b68:	d108      	bne.n	8004b7c <I2C_Slave_ISR_IT+0x8c>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b70:	d104      	bne.n	8004b7c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b72:	6939      	ldr	r1, [r7, #16]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fd85 	bl	8005684 <I2C_ITListenCplt>
 8004b7a:	e032      	b.n	8004be2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b29      	cmp	r3, #41	; 0x29
 8004b86:	d10e      	bne.n	8004ba6 <I2C_Slave_ISR_IT+0xb6>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b8e:	d00a      	beq.n	8004ba6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2210      	movs	r2, #16
 8004b96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fec0 	bl	800591e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fb3d 	bl	800521e <I2C_ITSlaveSeqCplt>
 8004ba4:	e01d      	b.n	8004be2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2210      	movs	r2, #16
 8004bac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004bae:	e096      	b.n	8004cde <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f043 0204 	orr.w	r2, r3, #4
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <I2C_Slave_ISR_IT+0xe4>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd0:	f040 8085 	bne.w	8004cde <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fda8 	bl	8005730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004be0:	e07d      	b.n	8004cde <I2C_Slave_ISR_IT+0x1ee>
 8004be2:	e07c      	b.n	8004cde <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d030      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x162>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02a      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14f      	bne.n	8004ce2 <I2C_Slave_ISR_IT+0x1f2>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c48:	d04b      	beq.n	8004ce2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fae7 	bl	800521e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c50:	e047      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa15 	bl	800509c <I2C_ITAddrCplt>
 8004c72:	e037      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02b      	beq.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004cc6:	e00d      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cce:	d002      	beq.n	8004cd6 <I2C_Slave_ISR_IT+0x1e6>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 faa1 	bl	800521e <I2C_ITSlaveSeqCplt>
 8004cdc:	e002      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004ce2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b088      	sub	sp, #32
 8004cfa:	af02      	add	r7, sp, #8
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <I2C_Master_ISR_DMA+0x1a>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0e1      	b.n	8004ed4 <I2C_Master_ISR_DMA+0x1de>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <I2C_Master_ISR_DMA+0x5e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d44:	2120      	movs	r1, #32
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fe9a 	bl	8005a80 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fde6 	bl	800591e <I2C_Flush_TXDR>
 8004d52:	e0ba      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d072      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x150>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d06c      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04e      	beq.n	8004e24 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2bff      	cmp	r3, #255	; 0xff
 8004d9c:	d906      	bls.n	8004dac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e010      	b.n	8004dce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dbe:	d003      	beq.n	8004dc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e002      	b.n	8004dce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dcc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	8a79      	ldrh	r1, [r7, #18]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fe21 	bl	8005a24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b22      	cmp	r3, #34	; 0x22
 8004dfe:	d108      	bne.n	8004e12 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e10:	e05b      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e22:	e052      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e32:	d003      	beq.n	8004e3c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f9b5 	bl	80051a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004e3a:	e046      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fc76 	bl	8005730 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e44:	e041      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d029      	beq.n	8004ea6 <I2C_Master_ISR_DMA+0x1b0>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d023      	beq.n	8004ea6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d119      	bne.n	8004e9c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e76:	d027      	beq.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e80:	d108      	bne.n	8004e94 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e90:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e92:	e019      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f985 	bl	80051a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e9a:	e015      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e9c:	2140      	movs	r1, #64	; 0x40
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fc46 	bl	8005730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ea4:	e010      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fa0b 	bl	80052dc <I2C_ITMasterCplt>
 8004ec6:	e000      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004ec8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <I2C_Slave_ISR_DMA+0x24>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0c9      	b.n	8005094 <I2C_Slave_ISR_DMA+0x1b8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <I2C_Slave_ISR_DMA+0x4c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 faa4 	bl	8005470 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 809a 	beq.w	800506a <I2C_Slave_ISR_DMA+0x18e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8093 	beq.w	800506a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0b9b      	lsrs	r3, r3, #14
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0bdb      	lsrs	r3, r3, #15
 8004f54:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07f      	beq.n	800505c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0bdb      	lsrs	r3, r3, #15
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0b9b      	lsrs	r3, r3, #14
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d128      	bne.n	8004ffc <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b28      	cmp	r3, #40	; 0x28
 8004fb4:	d108      	bne.n	8004fc8 <I2C_Slave_ISR_DMA+0xec>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fbc:	d104      	bne.n	8004fc8 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb5f 	bl	8005684 <I2C_ITListenCplt>
 8004fc6:	e048      	b.n	800505a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b29      	cmp	r3, #41	; 0x29
 8004fd2:	d10e      	bne.n	8004ff2 <I2C_Slave_ISR_DMA+0x116>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fda:	d00a      	beq.n	8004ff2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fc9a 	bl	800591e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f917 	bl	800521e <I2C_ITSlaveSeqCplt>
 8004ff0:	e033      	b.n	800505a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004ffa:	e034      	b.n	8005066 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2210      	movs	r2, #16
 8005002:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <I2C_Slave_ISR_DMA+0x14a>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005024:	d11f      	bne.n	8005066 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b21      	cmp	r3, #33	; 0x21
 800502a:	d002      	beq.n	8005032 <I2C_Slave_ISR_DMA+0x156>
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b29      	cmp	r3, #41	; 0x29
 8005030:	d103      	bne.n	800503a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
 8005038:	e008      	b.n	800504c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b22      	cmp	r3, #34	; 0x22
 800503e:	d002      	beq.n	8005046 <I2C_Slave_ISR_DMA+0x16a>
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b2a      	cmp	r3, #42	; 0x2a
 8005044:	d102      	bne.n	800504c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2222      	movs	r2, #34	; 0x22
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	4619      	mov	r1, r3
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fb6c 	bl	8005730 <I2C_ITError>
      if (treatdmanack == 1U)
 8005058:	e005      	b.n	8005066 <I2C_Slave_ISR_DMA+0x18a>
 800505a:	e004      	b.n	8005066 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005064:	e011      	b.n	800508a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005066:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005068:	e00f      	b.n	800508a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <I2C_Slave_ISR_DMA+0x1ae>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f809 	bl	800509c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b2:	2b28      	cmp	r3, #40	; 0x28
 80050b4:	d16a      	bne.n	800518c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80050d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80050f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d138      	bne.n	800516c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	b29a      	uxth	r2, r3
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	4053      	eors	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	f003 0306 	and.w	r3, r3, #6
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11c      	bne.n	8005148 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005120:	2b02      	cmp	r3, #2
 8005122:	d13b      	bne.n	800519c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2208      	movs	r2, #8
 8005130:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800513a:	89ba      	ldrh	r2, [r7, #12]
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fb53 	bl	80047ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005146:	e029      	b.n	800519c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005148:	893b      	ldrh	r3, [r7, #8]
 800514a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800514c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fcf9 	bl	8005b48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800515e:	89ba      	ldrh	r2, [r7, #12]
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fb41 	bl	80047ec <HAL_I2C_AddrCallback>
}
 800516a:	e017      	b.n	800519c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800516c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fce9 	bl	8005b48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800517e:	89ba      	ldrh	r2, [r7, #12]
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fb31 	bl	80047ec <HAL_I2C_AddrCallback>
}
 800518a:	e007      	b.n	800519c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2208      	movs	r2, #8
 8005192:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b21      	cmp	r3, #33	; 0x21
 80051be:	d115      	bne.n	80051ec <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2211      	movs	r2, #17
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051d4:	2101      	movs	r1, #1
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fcb6 	bl	8005b48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fad9 	bl	800479c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051ea:	e014      	b.n	8005216 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2212      	movs	r2, #18
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005200:	2102      	movs	r1, #2
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fca0 	bl	8005b48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff facd 	bl	80047b0 <HAL_I2C_MasterRxCpltCallback>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0b9b      	lsrs	r3, r3, #14
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e00d      	b.n	8005270 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	0bdb      	lsrs	r3, r3, #15
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800526e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b29      	cmp	r3, #41	; 0x29
 800527a:	d112      	bne.n	80052a2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2221      	movs	r2, #33	; 0x21
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800528a:	2101      	movs	r1, #1
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc5b 	bl	8005b48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fa92 	bl	80047c4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052a0:	e017      	b.n	80052d2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b2a      	cmp	r3, #42	; 0x2a
 80052ac:	d111      	bne.n	80052d2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2228      	movs	r2, #40	; 0x28
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2222      	movs	r2, #34	; 0x22
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052bc:	2102      	movs	r1, #2
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fc42 	bl	8005b48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fa83 	bl	80047d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2220      	movs	r2, #32
 80052f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b21      	cmp	r3, #33	; 0x21
 80052fc:	d107      	bne.n	800530e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc21 	bl	8005b48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2211      	movs	r2, #17
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
 800530c:	e00c      	b.n	8005328 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b22      	cmp	r3, #34	; 0x22
 8005318:	d106      	bne.n	8005328 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800531a:	2102      	movs	r1, #2
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fc13 	bl	8005b48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2212      	movs	r2, #18
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b4d      	ldr	r3, [pc, #308]	; (8005468 <I2C_ITMasterCplt+0x18c>)
 8005334:	400b      	ands	r3, r1
 8005336:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4a      	ldr	r2, [pc, #296]	; (800546c <I2C_ITMasterCplt+0x190>)
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b60      	cmp	r3, #96	; 0x60
 800536e:	d10b      	bne.n	8005388 <I2C_ITMasterCplt+0xac>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	b2db      	uxtb	r3, r3
 8005384:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005386:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fac8 	bl	800591e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b60      	cmp	r3, #96	; 0x60
 800539e:	d002      	beq.n	80053a6 <I2C_ITMasterCplt+0xca>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9bf 	bl	8005730 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053b2:	e054      	b.n	800545e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b21      	cmp	r3, #33	; 0x21
 80053be:	d124      	bne.n	800540a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d10b      	bne.n	80053f2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fa16 	bl	800481c <HAL_I2C_MemTxCpltCallback>
}
 80053f0:	e035      	b.n	800545e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff f9ca 	bl	800479c <HAL_I2C_MasterTxCpltCallback>
}
 8005408:	e029      	b.n	800545e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b22      	cmp	r3, #34	; 0x22
 8005414:	d123      	bne.n	800545e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d10b      	bne.n	8005448 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff f9f5 	bl	8004830 <HAL_I2C_MemRxCpltCallback>
}
 8005446:	e00a      	b.n	800545e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff f9a9 	bl	80047b0 <HAL_I2C_MasterRxCpltCallback>
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	fe00e800 	.word	0xfe00e800
 800546c:	ffff0000 	.word	0xffff0000

08005470 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2220      	movs	r2, #32
 8005494:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b21      	cmp	r3, #33	; 0x21
 800549a:	d002      	beq.n	80054a2 <I2C_ITSlaveCplt+0x32>
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b29      	cmp	r3, #41	; 0x29
 80054a0:	d108      	bne.n	80054b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80054a2:	f248 0101 	movw	r1, #32769	; 0x8001
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fb4e 	bl	8005b48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2221      	movs	r2, #33	; 0x21
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
 80054b2:	e00d      	b.n	80054d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b22      	cmp	r3, #34	; 0x22
 80054b8:	d002      	beq.n	80054c0 <I2C_ITSlaveCplt+0x50>
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b2a      	cmp	r3, #42	; 0x2a
 80054be:	d107      	bne.n	80054d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80054c0:	f248 0102 	movw	r1, #32770	; 0x8002
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb3f 	bl	8005b48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2222      	movs	r2, #34	; 0x22
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b64      	ldr	r3, [pc, #400]	; (800567c <I2C_ITSlaveCplt+0x20c>)
 80054ec:	400b      	ands	r3, r1
 80054ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa14 	bl	800591e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	0b9b      	lsrs	r3, r3, #14
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005510:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005528:	e018      	b.n	800555c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	0bdb      	lsrs	r3, r3, #15
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005544:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0304 	bic.w	r3, r3, #4
 800556e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	f043 0204 	orr.w	r2, r3, #4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8a7 	bl	8005730 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b28      	cmp	r3, #40	; 0x28
 80055ec:	d141      	bne.n	8005672 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f847 	bl	8005684 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055f6:	e03c      	b.n	8005672 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005600:	d014      	beq.n	800562c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff fe0b 	bl	800521e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <I2C_ITSlaveCplt+0x210>)
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff f8ef 	bl	8004808 <HAL_I2C_ListenCpltCallback>
}
 800562a:	e022      	b.n	8005672 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b22      	cmp	r3, #34	; 0x22
 8005636:	d10e      	bne.n	8005656 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff f8c2 	bl	80047d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005654:	e00d      	b.n	8005672 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f8a9 	bl	80047c4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005672:	bf00      	nop
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	fe00e800 	.word	0xfe00e800
 8005680:	ffff0000 	.word	0xffff0000

08005684 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a26      	ldr	r2, [pc, #152]	; (800572c <I2C_ITListenCplt+0xa8>)
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	089b      	lsrs	r3, r3, #2
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d022      	beq.n	8005702 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005702:	f248 0103 	movw	r1, #32771	; 0x8003
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa1e 	bl	8005b48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2210      	movs	r2, #16
 8005712:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff f873 	bl	8004808 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	ffff0000 	.word	0xffff0000

08005730 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a5d      	ldr	r2, [pc, #372]	; (80058c4 <I2C_ITError+0x194>)
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b28      	cmp	r3, #40	; 0x28
 8005766:	d005      	beq.n	8005774 <I2C_ITError+0x44>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b29      	cmp	r3, #41	; 0x29
 800576c:	d002      	beq.n	8005774 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d10b      	bne.n	800578c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005774:	2103      	movs	r1, #3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9e6 	bl	8005b48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2228      	movs	r2, #40	; 0x28
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a50      	ldr	r2, [pc, #320]	; (80058c8 <I2C_ITError+0x198>)
 8005788:	635a      	str	r2, [r3, #52]	; 0x34
 800578a:	e011      	b.n	80057b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800578c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f9d9 	bl	8005b48 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b60      	cmp	r3, #96	; 0x60
 80057a0:	d003      	beq.n	80057aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d039      	beq.n	8005832 <I2C_ITError+0x102>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b11      	cmp	r3, #17
 80057c2:	d002      	beq.n	80057ca <I2C_ITError+0x9a>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b21      	cmp	r3, #33	; 0x21
 80057c8:	d133      	bne.n	8005832 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d107      	bne.n	80057ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fadf 	bl	8003db2 <HAL_DMA_GetState>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d017      	beq.n	800582a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	4a33      	ldr	r2, [pc, #204]	; (80058cc <I2C_ITError+0x19c>)
 8005800:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fa8e 	bl	8003d30 <HAL_DMA_Abort_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d04d      	beq.n	80058b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005828:	e045      	b.n	80058b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f850 	bl	80058d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005830:	e041      	b.n	80058b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d039      	beq.n	80058ae <I2C_ITError+0x17e>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b12      	cmp	r3, #18
 800583e:	d002      	beq.n	8005846 <I2C_ITError+0x116>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b22      	cmp	r3, #34	; 0x22
 8005844:	d133      	bne.n	80058ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	d107      	bne.n	8005866 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005864:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe faa1 	bl	8003db2 <HAL_DMA_GetState>
 8005870:	4603      	mov	r3, r0
 8005872:	2b01      	cmp	r3, #1
 8005874:	d017      	beq.n	80058a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	4a14      	ldr	r2, [pc, #80]	; (80058cc <I2C_ITError+0x19c>)
 800587c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fa50 	bl	8003d30 <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a4:	e009      	b.n	80058ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f812 	bl	80058d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ac:	e005      	b.n	80058ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f80e 	bl	80058d0 <I2C_TreatErrorCallback>
  }
}
 80058b4:	e002      	b.n	80058bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ba:	bf00      	nop
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	ffff0000 	.word	0xffff0000
 80058c8:	08004af1 	.word	0x08004af1
 80058cc:	08005967 	.word	0x08005967

080058d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d10e      	bne.n	8005902 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fe ffac 	bl	8004858 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005900:	e009      	b.n	8005916 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fe ff97 	bl	8004844 <HAL_I2C_ErrorCallback>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d103      	bne.n	800593c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2200      	movs	r2, #0
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d007      	beq.n	800595a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	619a      	str	r2, [r3, #24]
  }
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	2200      	movs	r2, #0
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	2200      	movs	r2, #0
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff ff9b 	bl	80058d0 <I2C_TreatErrorCallback>
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b2:	e022      	b.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d01e      	beq.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fd f982 	bl	8002cc4 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d113      	bne.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e00f      	b.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d0cd      	beq.n	80059b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	4613      	mov	r3, r2
 8005a34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	0d5b      	lsrs	r3, r3, #21
 8005a40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <I2C_TransferConfig+0x58>)
 8005a46:	430b      	orrs	r3, r1
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	ea02 0103 	and.w	r1, r2, r3
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a54:	7a7b      	ldrb	r3, [r7, #9]
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	03ff63ff 	.word	0x03ff63ff

08005a80 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <I2C_Enable_IRQ+0xc0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005a9e:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <I2C_Enable_IRQ+0xc4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d11d      	bne.n	8005ae0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005aa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da03      	bge.n	8005ab4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005ab2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d103      	bne.n	8005ac2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005ac0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d103      	bne.n	8005ad0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ace:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ad0:	887b      	ldrh	r3, [r7, #2]
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d125      	bne.n	8005b22 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005adc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ade:	e020      	b.n	8005b22 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da03      	bge.n	8005af0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005aee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005b00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b02:	887b      	ldrh	r3, [r7, #2]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005b12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d103      	bne.n	8005b22 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f043 0320 	orr.w	r3, r3, #32
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	08004cf7 	.word	0x08004cf7
 8005b44:	08004edd 	.word	0x08004edd

08005b48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00f      	beq.n	8005b82 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005b68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b76:	2b28      	cmp	r3, #40	; 0x28
 8005b78:	d003      	beq.n	8005b82 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005b80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b82:	887b      	ldrh	r3, [r7, #2]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00f      	beq.n	8005bac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005b92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ba0:	2b28      	cmp	r3, #40	; 0x28
 8005ba2:	d003      	beq.n	8005bac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005baa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005bac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da03      	bge.n	8005bbc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d103      	bne.n	8005bca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005bca:	887b      	ldrh	r3, [r7, #2]
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d103      	bne.n	8005bd8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f043 0320 	orr.w	r3, r3, #32
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d103      	bne.n	8005be6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6819      	ldr	r1, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	400a      	ands	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d138      	bne.n	8005c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e032      	b.n	8005c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d139      	bne.n	8005d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e033      	b.n	8005d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	; 0x24
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40007000 	.word	0x40007000

08005d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40007000 	.word	0x40007000

08005d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7e:	d130      	bne.n	8005de2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8c:	d038      	beq.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2232      	movs	r2, #50	; 0x32
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	0c9b      	lsrs	r3, r3, #18
 8005db0:	3301      	adds	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db4:	e002      	b.n	8005dbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc8:	d102      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f2      	bne.n	8005db6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ddc:	d110      	bne.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dee:	d007      	beq.n	8005e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005df8:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40007000 	.word	0x40007000
 8005e14:	20000000 	.word	0x20000000
 8005e18:	431bde83 	.word	0x431bde83

08005e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f000 bc11 	b.w	8006652 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e30:	4ba0      	ldr	r3, [pc, #640]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 030c 	and.w	r3, r3, #12
 8005e38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e3a:	4b9e      	ldr	r3, [pc, #632]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80e4 	beq.w	800601a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_RCC_OscConfig+0x4c>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	f040 808b 	bne.w	8005f76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f040 8087 	bne.w	8005f76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e68:	4b92      	ldr	r3, [pc, #584]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_OscConfig+0x64>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e3e8      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <HAL_RCC_OscConfig+0x7e>
 8005e90:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e98:	e005      	b.n	8005ea6 <HAL_RCC_OscConfig+0x8a>
 8005e9a:	4b86      	ldr	r3, [pc, #536]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d223      	bcs.n	8005ef2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fdac 	bl	8006a0c <RCC_SetFlashLatencyFromMSIRange>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e3c9      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ebe:	4b7d      	ldr	r3, [pc, #500]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a7c      	ldr	r2, [pc, #496]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b7a      	ldr	r3, [pc, #488]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	4977      	ldr	r1, [pc, #476]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005edc:	4b75      	ldr	r3, [pc, #468]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	4972      	ldr	r1, [pc, #456]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	604b      	str	r3, [r1, #4]
 8005ef0:	e025      	b.n	8005f3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ef2:	4b70      	ldr	r3, [pc, #448]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a6f      	ldr	r2, [pc, #444]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b6d      	ldr	r3, [pc, #436]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	496a      	ldr	r1, [pc, #424]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f10:	4b68      	ldr	r3, [pc, #416]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	4965      	ldr	r1, [pc, #404]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fd6c 	bl	8006a0c <RCC_SetFlashLatencyFromMSIRange>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e389      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f3e:	f000 fc6f 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4b5b      	ldr	r3, [pc, #364]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	495a      	ldr	r1, [pc, #360]	; (80060b8 <HAL_RCC_OscConfig+0x29c>)
 8005f50:	5ccb      	ldrb	r3, [r1, r3]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_RCC_OscConfig+0x2a0>)
 8005f5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f5e:	4b58      	ldr	r3, [pc, #352]	; (80060c0 <HAL_RCC_OscConfig+0x2a4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fb fc52 	bl	800180c <HAL_InitTick>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d052      	beq.n	8006018 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	e36d      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d032      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f7e:	4b4d      	ldr	r3, [pc, #308]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a4c      	ldr	r2, [pc, #304]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f8a:	f7fc fe9b 	bl	8002cc4 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f92:	f7fc fe97 	bl	8002cc4 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e356      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fa4:	4b43      	ldr	r3, [pc, #268]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb0:	4b40      	ldr	r3, [pc, #256]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3f      	ldr	r2, [pc, #252]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fb6:	f043 0308 	orr.w	r3, r3, #8
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	493a      	ldr	r1, [pc, #232]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	4935      	ldr	r1, [pc, #212]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
 8005fe2:	e01a      	b.n	800601a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fe4:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a32      	ldr	r2, [pc, #200]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ff0:	f7fc fe68 	bl	8002cc4 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ff8:	f7fc fe64 	bl	8002cc4 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e323      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800600a:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f0      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x1dc>
 8006016:	e000      	b.n	800601a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006018:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d073      	beq.n	800610e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d005      	beq.n	8006038 <HAL_RCC_OscConfig+0x21c>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d10e      	bne.n	8006050 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d10b      	bne.n	8006050 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d063      	beq.n	800610c <HAL_RCC_OscConfig+0x2f0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d15f      	bne.n	800610c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e300      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d106      	bne.n	8006068 <HAL_RCC_OscConfig+0x24c>
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e01d      	b.n	80060a4 <HAL_RCC_OscConfig+0x288>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x270>
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0f      	ldr	r2, [pc, #60]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e00b      	b.n	80060a4 <HAL_RCC_OscConfig+0x288>
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <HAL_RCC_OscConfig+0x298>)
 800609e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fc fe0a 	bl	8002cc4 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060b2:	e010      	b.n	80060d6 <HAL_RCC_OscConfig+0x2ba>
 80060b4:	40021000 	.word	0x40021000
 80060b8:	0800a3a8 	.word	0x0800a3a8
 80060bc:	20000000 	.word	0x20000000
 80060c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fc fdfe 	bl	8002cc4 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	; 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e2bd      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060d6:	4baf      	ldr	r3, [pc, #700]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x2a8>
 80060e2:	e014      	b.n	800610e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fc fdee 	bl	8002cc4 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ec:	f7fc fdea 	bl	8002cc4 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b64      	cmp	r3, #100	; 0x64
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e2a9      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060fe:	4ba5      	ldr	r3, [pc, #660]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x2d0>
 800610a:	e000      	b.n	800610e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800610c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d060      	beq.n	80061dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d005      	beq.n	800612c <HAL_RCC_OscConfig+0x310>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0c      	cmp	r3, #12
 8006124:	d119      	bne.n	800615a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d116      	bne.n	800615a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612c:	4b99      	ldr	r3, [pc, #612]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_OscConfig+0x328>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e286      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b93      	ldr	r3, [pc, #588]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	4990      	ldr	r1, [pc, #576]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006158:	e040      	b.n	80061dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d023      	beq.n	80061aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006162:	4b8c      	ldr	r3, [pc, #560]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a8b      	ldr	r2, [pc, #556]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fc fda9 	bl	8002cc4 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006176:	f7fc fda5 	bl	8002cc4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e264      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006188:	4b82      	ldr	r3, [pc, #520]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	497c      	ldr	r1, [pc, #496]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	604b      	str	r3, [r1, #4]
 80061a8:	e018      	b.n	80061dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b7a      	ldr	r3, [pc, #488]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a79      	ldr	r2, [pc, #484]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fc fd85 	bl	8002cc4 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061be:	f7fc fd81 	bl	8002cc4 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e240      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061d0:	4b70      	ldr	r3, [pc, #448]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d03c      	beq.n	8006262 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01c      	beq.n	800622a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f0:	4b68      	ldr	r3, [pc, #416]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f6:	4a67      	ldr	r2, [pc, #412]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006200:	f7fc fd60 	bl	8002cc4 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006208:	f7fc fd5c 	bl	8002cc4 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e21b      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800621a:	4b5e      	ldr	r3, [pc, #376]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800621c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ef      	beq.n	8006208 <HAL_RCC_OscConfig+0x3ec>
 8006228:	e01b      	b.n	8006262 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622a:	4b5a      	ldr	r3, [pc, #360]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800622c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006230:	4a58      	ldr	r2, [pc, #352]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fc fd43 	bl	8002cc4 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006242:	f7fc fd3f 	bl	8002cc4 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e1fe      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006254:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ef      	bne.n	8006242 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80a6 	beq.w	80063bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006270:	2300      	movs	r3, #0
 8006272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006274:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10d      	bne.n	800629c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006280:	4b44      	ldr	r3, [pc, #272]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	4a43      	ldr	r2, [pc, #268]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628a:	6593      	str	r3, [r2, #88]	; 0x58
 800628c:	4b41      	ldr	r3, [pc, #260]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006298:	2301      	movs	r3, #1
 800629a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800629c:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <HAL_RCC_OscConfig+0x57c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d118      	bne.n	80062da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062a8:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCC_OscConfig+0x57c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <HAL_RCC_OscConfig+0x57c>)
 80062ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b4:	f7fc fd06 	bl	8002cc4 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062bc:	f7fc fd02 	bl	8002cc4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e1c1      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ce:	4b32      	ldr	r3, [pc, #200]	; (8006398 <HAL_RCC_OscConfig+0x57c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d108      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4d8>
 80062e2:	4b2c      	ldr	r3, [pc, #176]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062f2:	e024      	b.n	800633e <HAL_RCC_OscConfig+0x522>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	d110      	bne.n	800631e <HAL_RCC_OscConfig+0x502>
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	4a24      	ldr	r2, [pc, #144]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800631c:	e00f      	b.n	800633e <HAL_RCC_OscConfig+0x522>
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800632e:	4b19      	ldr	r3, [pc, #100]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006336:	f023 0304 	bic.w	r3, r3, #4
 800633a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d016      	beq.n	8006374 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006346:	f7fc fcbd 	bl	8002cc4 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634c:	e00a      	b.n	8006364 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634e:	f7fc fcb9 	bl	8002cc4 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f241 3288 	movw	r2, #5000	; 0x1388
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e176      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <HAL_RCC_OscConfig+0x578>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0ed      	beq.n	800634e <HAL_RCC_OscConfig+0x532>
 8006372:	e01a      	b.n	80063aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006374:	f7fc fca6 	bl	8002cc4 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800637a:	e00f      	b.n	800639c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637c:	f7fc fca2 	bl	8002cc4 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	; 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d906      	bls.n	800639c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e15f      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800639c:	4baa      	ldr	r3, [pc, #680]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e8      	bne.n	800637c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063aa:	7ffb      	ldrb	r3, [r7, #31]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d105      	bne.n	80063bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b0:	4ba5      	ldr	r3, [pc, #660]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80063b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b4:	4aa4      	ldr	r2, [pc, #656]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80063b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03c      	beq.n	8006442 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063d0:	4b9d      	ldr	r3, [pc, #628]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80063d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d6:	4a9c      	ldr	r2, [pc, #624]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e0:	f7fc fc70 	bl	8002cc4 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e8:	f7fc fc6c 	bl	8002cc4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e12b      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063fa:	4b93      	ldr	r3, [pc, #588]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80063fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0ef      	beq.n	80063e8 <HAL_RCC_OscConfig+0x5cc>
 8006408:	e01b      	b.n	8006442 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800640a:	4b8f      	ldr	r3, [pc, #572]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800640c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006410:	4a8d      	ldr	r2, [pc, #564]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fc fc53 	bl	8002cc4 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006422:	f7fc fc4f 	bl	8002cc4 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e10e      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006434:	4b84      	ldr	r3, [pc, #528]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1ef      	bne.n	8006422 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8102 	beq.w	8006650 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	2b02      	cmp	r3, #2
 8006452:	f040 80c5 	bne.w	80065e0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006456:	4b7c      	ldr	r3, [pc, #496]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f003 0203 	and.w	r2, r3, #3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	429a      	cmp	r2, r3
 8006468:	d12c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	3b01      	subs	r3, #1
 8006476:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006478:	429a      	cmp	r2, r3
 800647a:	d123      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d11b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d113      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	3b01      	subs	r3, #1
 80064aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d109      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	3b01      	subs	r3, #1
 80064be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d067      	beq.n	8006594 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d062      	beq.n	8006590 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80064ca:	4b5f      	ldr	r3, [pc, #380]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0bb      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80064da:	4b5b      	ldr	r3, [pc, #364]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5a      	ldr	r2, [pc, #360]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80064e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064e6:	f7fc fbed 	bl	8002cc4 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fc fbe9 	bl	8002cc4 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e0a8      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006500:	4b51      	ldr	r3, [pc, #324]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f0      	bne.n	80064ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800650c:	4b4e      	ldr	r3, [pc, #312]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	4b4e      	ldr	r3, [pc, #312]	; (800664c <HAL_RCC_OscConfig+0x830>)
 8006512:	4013      	ands	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006526:	0212      	lsls	r2, r2, #8
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800652e:	0852      	lsrs	r2, r2, #1
 8006530:	3a01      	subs	r2, #1
 8006532:	0552      	lsls	r2, r2, #21
 8006534:	4311      	orrs	r1, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800653a:	0852      	lsrs	r2, r2, #1
 800653c:	3a01      	subs	r2, #1
 800653e:	0652      	lsls	r2, r2, #25
 8006540:	4311      	orrs	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006546:	06d2      	lsls	r2, r2, #27
 8006548:	430a      	orrs	r2, r1
 800654a:	493f      	ldr	r1, [pc, #252]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006550:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a3c      	ldr	r2, [pc, #240]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4a39      	ldr	r2, [pc, #228]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006568:	f7fc fbac 	bl	8002cc4 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006570:	f7fc fba8 	bl	8002cc4 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e067      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006582:	4b31      	ldr	r3, [pc, #196]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800658e:	e05f      	b.n	8006650 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e05e      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006594:	4b2c      	ldr	r3, [pc, #176]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d157      	bne.n	8006650 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065a0:	4b29      	ldr	r3, [pc, #164]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065ac:	4b26      	ldr	r3, [pc, #152]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a25      	ldr	r2, [pc, #148]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065b8:	f7fc fb84 	bl	8002cc4 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fc fb80 	bl	8002cc4 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e03f      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x7a4>
 80065de:	e037      	b.n	8006650 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b0c      	cmp	r3, #12
 80065e4:	d02d      	beq.n	8006642 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e6:	4b18      	ldr	r3, [pc, #96]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065f2:	4b15      	ldr	r3, [pc, #84]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4a11      	ldr	r2, [pc, #68]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006610:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006618:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fc fb53 	bl	8002cc4 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006622:	f7fc fb4f 	bl	8002cc4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e00e      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <HAL_RCC_OscConfig+0x82c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <HAL_RCC_OscConfig+0x806>
 8006640:	e006      	b.n	8006650 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e005      	b.n	8006652 <HAL_RCC_OscConfig+0x836>
 8006646:	bf00      	nop
 8006648:	40021000 	.word	0x40021000
 800664c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e0c8      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006670:	4b66      	ldr	r3, [pc, #408]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d910      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667e:	4b63      	ldr	r3, [pc, #396]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 0207 	bic.w	r2, r3, #7
 8006686:	4961      	ldr	r1, [pc, #388]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668e:	4b5f      	ldr	r3, [pc, #380]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0b0      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d04c      	beq.n	8006746 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d107      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066b4:	4b56      	ldr	r3, [pc, #344]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d121      	bne.n	8006704 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e09e      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d115      	bne.n	8006704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e092      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066e4:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e086      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066f4:	4b46      	ldr	r3, [pc, #280]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e07e      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 0203 	bic.w	r2, r3, #3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	493f      	ldr	r1, [pc, #252]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 8006712:	4313      	orrs	r3, r2
 8006714:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006716:	f7fc fad5 	bl	8002cc4 <HAL_GetTick>
 800671a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671c:	e00a      	b.n	8006734 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800671e:	f7fc fad1 	bl	8002cc4 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f241 3288 	movw	r2, #5000	; 0x1388
 800672c:	4293      	cmp	r3, r2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e066      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006734:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 020c 	and.w	r2, r3, #12
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	429a      	cmp	r2, r3
 8006744:	d1eb      	bne.n	800671e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006752:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	492c      	ldr	r1, [pc, #176]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006764:	4b29      	ldr	r3, [pc, #164]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d210      	bcs.n	8006794 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b26      	ldr	r3, [pc, #152]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4924      	ldr	r1, [pc, #144]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_RCC_ClockConfig+0x1b0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e036      	b.n	8006802 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4918      	ldr	r1, [pc, #96]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4910      	ldr	r1, [pc, #64]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067d2:	f000 f825 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <HAL_RCC_ClockConfig+0x1b4>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	490c      	ldr	r1, [pc, #48]	; (8006814 <HAL_RCC_ClockConfig+0x1b8>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	fa22 f303 	lsr.w	r3, r2, r3
 80067ee:	4a0a      	ldr	r2, [pc, #40]	; (8006818 <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <HAL_RCC_ClockConfig+0x1c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb f808 	bl	800180c <HAL_InitTick>
 80067fc:	4603      	mov	r3, r0
 80067fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8006800:	7afb      	ldrb	r3, [r7, #11]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40022000 	.word	0x40022000
 8006810:	40021000 	.word	0x40021000
 8006814:	0800a3a8 	.word	0x0800a3a8
 8006818:	20000000 	.word	0x20000000
 800681c:	20000004 	.word	0x20000004

08006820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	b480      	push	{r7}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800682e:	4b3e      	ldr	r3, [pc, #248]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006838:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b0c      	cmp	r3, #12
 800684c:	d121      	bne.n	8006892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d11e      	bne.n	8006892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006854:	4b34      	ldr	r3, [pc, #208]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006860:	4b31      	ldr	r3, [pc, #196]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	e005      	b.n	800687c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006870:	4b2d      	ldr	r3, [pc, #180]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800687c:	4a2b      	ldr	r2, [pc, #172]	; (800692c <HAL_RCC_GetSysClockFreq+0x10c>)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d102      	bne.n	800689e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_RCC_GetSysClockFreq+0x110>)
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e004      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068a4:	4b23      	ldr	r3, [pc, #140]	; (8006934 <HAL_RCC_GetSysClockFreq+0x114>)
 80068a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b0c      	cmp	r3, #12
 80068ac:	d134      	bne.n	8006918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ae:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d003      	beq.n	80068c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d003      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0xac>
 80068c4:	e005      	b.n	80068d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCC_GetSysClockFreq+0x110>)
 80068c8:	617b      	str	r3, [r7, #20]
      break;
 80068ca:	e005      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80068cc:	4b19      	ldr	r3, [pc, #100]	; (8006934 <HAL_RCC_GetSysClockFreq+0x114>)
 80068ce:	617b      	str	r3, [r7, #20]
      break;
 80068d0:	e002      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	617b      	str	r3, [r7, #20]
      break;
 80068d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068d8:	4b13      	ldr	r3, [pc, #76]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	3301      	adds	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	0a1b      	lsrs	r3, r3, #8
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	fb02 f203 	mul.w	r2, r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <HAL_RCC_GetSysClockFreq+0x108>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	0e5b      	lsrs	r3, r3, #25
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	3301      	adds	r3, #1
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006918:	69bb      	ldr	r3, [r7, #24]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3724      	adds	r7, #36	; 0x24
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
 800692c:	0800a3c0 	.word	0x0800a3c0
 8006930:	00f42400 	.word	0x00f42400
 8006934:	00989680 	.word	0x00989680

08006938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800693c:	4b03      	ldr	r3, [pc, #12]	; (800694c <HAL_RCC_GetHCLKFreq+0x14>)
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	4618      	mov	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000000 	.word	0x20000000

08006950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006954:	f7ff fff0 	bl	8006938 <HAL_RCC_GetHCLKFreq>
 8006958:	4602      	mov	r2, r0
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	4904      	ldr	r1, [pc, #16]	; (8006978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006966:	5ccb      	ldrb	r3, [r1, r3]
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	0800a3b8 	.word	0x0800a3b8

0800697c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006980:	f7ff ffda 	bl	8006938 <HAL_RCC_GetHCLKFreq>
 8006984:	4602      	mov	r2, r0
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0adb      	lsrs	r3, r3, #11
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	4904      	ldr	r1, [pc, #16]	; (80069a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006992:	5ccb      	ldrb	r3, [r1, r3]
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000
 80069a4:	0800a3b8 	.word	0x0800a3b8

080069a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	220f      	movs	r2, #15
 80069b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_GetClockConfig+0x5c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 0203 	and.w	r2, r3, #3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <HAL_RCC_GetClockConfig+0x5c>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80069d0:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <HAL_RCC_GetClockConfig+0x5c>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <HAL_RCC_GetClockConfig+0x5c>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <HAL_RCC_GetClockConfig+0x60>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0207 	and.w	r2, r3, #7
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40021000 	.word	0x40021000
 8006a08:	40022000 	.word	0x40022000

08006a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a18:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a24:	f7ff f996 	bl	8005d54 <HAL_PWREx_GetVoltageRange>
 8006a28:	6178      	str	r0, [r7, #20]
 8006a2a:	e014      	b.n	8006a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a2c:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a30:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a36:	6593      	str	r3, [r2, #88]	; 0x58
 8006a38:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a44:	f7ff f986 	bl	8005d54 <HAL_PWREx_GetVoltageRange>
 8006a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5c:	d10b      	bne.n	8006a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d919      	bls.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2ba0      	cmp	r3, #160	; 0xa0
 8006a68:	d902      	bls.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	e013      	b.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a70:	2301      	movs	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e010      	b.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b80      	cmp	r3, #128	; 0x80
 8006a7a:	d902      	bls.n	8006a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	e00a      	b.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d102      	bne.n	8006a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a88:	2302      	movs	r3, #2
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	e004      	b.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b70      	cmp	r3, #112	; 0x70
 8006a92:	d101      	bne.n	8006a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a94:	2301      	movs	r3, #1
 8006a96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f023 0207 	bic.w	r2, r3, #7
 8006aa0:	4909      	ldr	r1, [pc, #36]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d001      	beq.n	8006aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	40022000 	.word	0x40022000

08006acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ad8:	2300      	movs	r3, #0
 8006ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d031      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006af0:	d01a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006af2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006af6:	d814      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d10f      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006b02:	4bac      	ldr	r3, [pc, #688]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4aab      	ldr	r2, [pc, #684]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b0e:	e00c      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f9cc 	bl	8006eb4 <RCCEx_PLLSAI1_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	74fb      	strb	r3, [r7, #19]
      break;
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b30:	4ba0      	ldr	r3, [pc, #640]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	499d      	ldr	r1, [pc, #628]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b46:	e001      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8099 	beq.w	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b5e:	4b95      	ldr	r3, [pc, #596]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b74:	4b8f      	ldr	r3, [pc, #572]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b78:	4a8e      	ldr	r2, [pc, #568]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b80:	4b8c      	ldr	r3, [pc, #560]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b90:	4b89      	ldr	r3, [pc, #548]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a88      	ldr	r2, [pc, #544]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b9c:	f7fc f892 	bl	8002cc4 <HAL_GetTick>
 8006ba0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ba2:	e009      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba4:	f7fc f88e 	bl	8002cc4 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d902      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	74fb      	strb	r3, [r7, #19]
        break;
 8006bb6:	e005      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006bb8:	4b7f      	ldr	r3, [pc, #508]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0ef      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006bc4:	7cfb      	ldrb	r3, [r7, #19]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d155      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bca:	4b7a      	ldr	r3, [pc, #488]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01e      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d019      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006be6:	4b73      	ldr	r3, [pc, #460]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bf2:	4b70      	ldr	r3, [pc, #448]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	4a6e      	ldr	r2, [pc, #440]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c02:	4b6c      	ldr	r3, [pc, #432]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c08:	4a6a      	ldr	r2, [pc, #424]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c12:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d016      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fc f84e 	bl	8002cc4 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c2a:	e00b      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2c:	f7fc f84a 	bl	8002cc4 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d902      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	74fb      	strb	r3, [r7, #19]
            break;
 8006c42:	e006      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c44:	4b5b      	ldr	r3, [pc, #364]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ec      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006c52:	7cfb      	ldrb	r3, [r7, #19]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c58:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	4953      	ldr	r1, [pc, #332]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c6e:	e004      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	74bb      	strb	r3, [r7, #18]
 8006c74:	e001      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	7cfb      	ldrb	r3, [r7, #19]
 8006c78:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c7a:	7c7b      	ldrb	r3, [r7, #17]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c80:	4b4c      	ldr	r3, [pc, #304]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	4a4b      	ldr	r2, [pc, #300]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c98:	4b46      	ldr	r3, [pc, #280]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f023 0203 	bic.w	r2, r3, #3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	4943      	ldr	r1, [pc, #268]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cba:	4b3e      	ldr	r3, [pc, #248]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f023 020c 	bic.w	r2, r3, #12
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	493a      	ldr	r1, [pc, #232]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cdc:	4b35      	ldr	r3, [pc, #212]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	4932      	ldr	r1, [pc, #200]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cfe:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	4929      	ldr	r1, [pc, #164]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	4921      	ldr	r1, [pc, #132]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4918      	ldr	r1, [pc, #96]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d64:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	4910      	ldr	r1, [pc, #64]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d02c      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da4:	d10a      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da6:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a02      	ldr	r2, [pc, #8]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db0:	60d3      	str	r3, [r2, #12]
 8006db2:	e015      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006db4:	40021000 	.word	0x40021000
 8006db8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f871 	bl	8006eb4 <RCCEx_PLLSAI1_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dd6:	7cfb      	ldrb	r3, [r7, #19]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d028      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dec:	4b30      	ldr	r3, [pc, #192]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	492d      	ldr	r1, [pc, #180]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e0a:	d106      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4a27      	ldr	r2, [pc, #156]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e16:	60d3      	str	r3, [r2, #12]
 8006e18:	e011      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e22:	d10c      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	2101      	movs	r1, #1
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f842 	bl	8006eb4 <RCCEx_PLLSAI1_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01c      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e4a:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e58:	4915      	ldr	r1, [pc, #84]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e68:	d10c      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 f81f 	bl	8006eb4 <RCCEx_PLLSAI1_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e7a:	7cfb      	ldrb	r3, [r7, #19]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006e80:	7cfb      	ldrb	r3, [r7, #19]
 8006e82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ea6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ec2:	4b74      	ldr	r3, [pc, #464]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d018      	beq.n	8006f00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ece:	4b71      	ldr	r3, [pc, #452]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 0203 	and.w	r2, r3, #3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d10d      	bne.n	8006efa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ee6:	4b6b      	ldr	r3, [pc, #428]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d047      	beq.n	8006f8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	73fb      	strb	r3, [r7, #15]
 8006efe:	e044      	b.n	8006f8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d018      	beq.n	8006f3a <RCCEx_PLLSAI1_Config+0x86>
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d825      	bhi.n	8006f58 <RCCEx_PLLSAI1_Config+0xa4>
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d002      	beq.n	8006f16 <RCCEx_PLLSAI1_Config+0x62>
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d009      	beq.n	8006f28 <RCCEx_PLLSAI1_Config+0x74>
 8006f14:	e020      	b.n	8006f58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f16:	4b5f      	ldr	r3, [pc, #380]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11d      	bne.n	8006f5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f26:	e01a      	b.n	8006f5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f28:	4b5a      	ldr	r3, [pc, #360]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d116      	bne.n	8006f62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f38:	e013      	b.n	8006f62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f3a:	4b56      	ldr	r3, [pc, #344]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10f      	bne.n	8006f66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f46:	4b53      	ldr	r3, [pc, #332]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f56:	e006      	b.n	8006f66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e004      	b.n	8006f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f6e:	4b49      	ldr	r3, [pc, #292]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	430b      	orrs	r3, r1
 8006f84:	4943      	ldr	r1, [pc, #268]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d17c      	bne.n	800708a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f90:	4b40      	ldr	r3, [pc, #256]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3f      	ldr	r2, [pc, #252]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f9c:	f7fb fe92 	bl	8002cc4 <HAL_GetTick>
 8006fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fa2:	e009      	b.n	8006fb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fa4:	f7fb fe8e 	bl	8002cc4 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d902      	bls.n	8006fb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8006fb6:	e005      	b.n	8006fc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fb8:	4b36      	ldr	r3, [pc, #216]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ef      	bne.n	8006fa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d15f      	bne.n	800708a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d110      	bne.n	8006ff2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fd0:	4b30      	ldr	r3, [pc, #192]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006fd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6892      	ldr	r2, [r2, #8]
 8006fe0:	0211      	lsls	r1, r2, #8
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68d2      	ldr	r2, [r2, #12]
 8006fe6:	06d2      	lsls	r2, r2, #27
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	492a      	ldr	r1, [pc, #168]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	610b      	str	r3, [r1, #16]
 8006ff0:	e027      	b.n	8007042 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d112      	bne.n	800701e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ff8:	4b26      	ldr	r3, [pc, #152]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007000:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6892      	ldr	r2, [r2, #8]
 8007008:	0211      	lsls	r1, r2, #8
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6912      	ldr	r2, [r2, #16]
 800700e:	0852      	lsrs	r2, r2, #1
 8007010:	3a01      	subs	r2, #1
 8007012:	0552      	lsls	r2, r2, #21
 8007014:	430a      	orrs	r2, r1
 8007016:	491f      	ldr	r1, [pc, #124]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007018:	4313      	orrs	r3, r2
 800701a:	610b      	str	r3, [r1, #16]
 800701c:	e011      	b.n	8007042 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800701e:	4b1d      	ldr	r3, [pc, #116]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007026:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6892      	ldr	r2, [r2, #8]
 800702e:	0211      	lsls	r1, r2, #8
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6952      	ldr	r2, [r2, #20]
 8007034:	0852      	lsrs	r2, r2, #1
 8007036:	3a01      	subs	r2, #1
 8007038:	0652      	lsls	r2, r2, #25
 800703a:	430a      	orrs	r2, r1
 800703c:	4915      	ldr	r1, [pc, #84]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800703e:	4313      	orrs	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a13      	ldr	r2, [pc, #76]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800704c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704e:	f7fb fe39 	bl	8002cc4 <HAL_GetTick>
 8007052:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007054:	e009      	b.n	800706a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007056:	f7fb fe35 	bl	8002cc4 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d902      	bls.n	800706a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	73fb      	strb	r3, [r7, #15]
          break;
 8007068:	e005      	b.n	8007076 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0ef      	beq.n	8007056 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	4903      	ldr	r1, [pc, #12]	; (8007094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000

08007098 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d06c      	beq.n	8007184 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fa fad0 	bl	8001664 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	22ca      	movs	r2, #202	; 0xca
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2253      	movs	r2, #83	; 0x53
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f87c 	bl	80071da <RTC_EnterInitMode>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d14b      	bne.n	8007184 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68d2      	ldr	r2, [r2, #12]
 8007126:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6919      	ldr	r1, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	041a      	lsls	r2, r3, #16
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f87f 	bl	8007240 <RTC_ExitInitMode>
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d11b      	bne.n	8007184 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0203 	bic.w	r2, r2, #3
 800715a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071a4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80071a6:	f7fb fd8d 	bl	8002cc4 <HAL_GetTick>
 80071aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071ac:	e009      	b.n	80071c2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071ae:	f7fb fd89 	bl	8002cc4 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071bc:	d901      	bls.n	80071c2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e007      	b.n	80071d2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0ee      	beq.n	80071ae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d120      	bne.n	8007236 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f04f 32ff 	mov.w	r2, #4294967295
 80071fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071fe:	f7fb fd61 	bl	8002cc4 <HAL_GetTick>
 8007202:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007204:	e00d      	b.n	8007222 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007206:	f7fb fd5d 	bl	8002cc4 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007214:	d905      	bls.n	8007222 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <RTC_EnterInitMode+0x5c>
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b03      	cmp	r3, #3
 8007234:	d1e7      	bne.n	8007206 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <RTC_ExitInitMode+0x78>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <RTC_ExitInitMode+0x78>)
 8007252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007256:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007258:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <RTC_ExitInitMode+0x78>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10c      	bne.n	800727e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff92 	bl	800718e <HAL_RTC_WaitForSynchro>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2203      	movs	r2, #3
 8007274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e017      	b.n	80072ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800727e:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <RTC_ExitInitMode+0x78>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	4a0d      	ldr	r2, [pc, #52]	; (80072b8 <RTC_ExitInitMode+0x78>)
 8007284:	f023 0320 	bic.w	r3, r3, #32
 8007288:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff7f 	bl	800718e <HAL_RTC_WaitForSynchro>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <RTC_ExitInitMode+0x78>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <RTC_ExitInitMode+0x78>)
 80072a8:	f043 0320 	orr.w	r3, r3, #32
 80072ac:	6093      	str	r3, [r2, #8]
  }

  return status;
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40002800 	.word	0x40002800

080072bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e095      	b.n	80073fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d108      	bne.n	80072e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072de:	d009      	beq.n	80072f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	61da      	str	r2, [r3, #28]
 80072e6:	e005      	b.n	80072f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fa fa16 	bl	8001740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007334:	d902      	bls.n	800733c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e002      	b.n	8007342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800733c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800734a:	d007      	beq.n	800735c <HAL_SPI_Init+0xa0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007354:	d002      	beq.n	800735c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	ea42 0103 	orr.w	r1, r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0204 	and.w	r2, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073d8:	ea42 0103 	orr.w	r1, r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e049      	b.n	80074a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f841 	bl	80074b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 fac5 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e03b      	b.n	8007554 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_TIM_Base_Start_IT+0x9c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_TIM_Base_Start_IT+0x4e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d004      	beq.n	8007512 <HAL_TIM_Base_Start_IT+0x4e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <HAL_TIM_Base_Start_IT+0xa0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d115      	bne.n	800753e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <HAL_TIM_Base_Start_IT+0xa4>)
 800751a:	4013      	ands	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d015      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x8c>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752a:	d011      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753c:	e008      	b.n	8007550 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0201 	orr.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e000      	b.n	8007552 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40014000 	.word	0x40014000
 8007568:	00010007 	.word	0x00010007

0800756c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e049      	b.n	8007612 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa faaa 	bl	8001aec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f000 fa10 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b02      	cmp	r3, #2
 800762e:	d122      	bne.n	8007676 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d11b      	bne.n	8007676 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f06f 0202 	mvn.w	r2, #2
 8007646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f999 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 8007662:	e005      	b.n	8007670 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f98b 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f99c 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d122      	bne.n	80076ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d11b      	bne.n	80076ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f06f 0204 	mvn.w	r2, #4
 800769a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f96f 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 80076b6:	e005      	b.n	80076c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f961 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f972 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d122      	bne.n	800771e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d11b      	bne.n	800771e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f06f 0208 	mvn.w	r2, #8
 80076ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2204      	movs	r2, #4
 80076f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f945 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 800770a:	e005      	b.n	8007718 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f937 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f948 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b10      	cmp	r3, #16
 800772a:	d122      	bne.n	8007772 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0310 	and.w	r3, r3, #16
 8007736:	2b10      	cmp	r3, #16
 8007738:	d11b      	bne.n	8007772 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f06f 0210 	mvn.w	r2, #16
 8007742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2208      	movs	r2, #8
 8007748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f91b 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 800775e:	e005      	b.n	800776c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f90d 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f91e 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10e      	bne.n	800779e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	d107      	bne.n	800779e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f06f 0201 	mvn.w	r2, #1
 8007796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7f9 ff23 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d10e      	bne.n	80077ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d107      	bne.n	80077ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fae3 	bl	8007d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d8:	d10e      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	2b80      	cmp	r3, #128	; 0x80
 80077e6:	d107      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fad6 	bl	8007da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d10e      	bne.n	8007824 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d107      	bne.n	8007824 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8cc 	bl	80079bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b20      	cmp	r3, #32
 8007830:	d10e      	bne.n	8007850 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b20      	cmp	r3, #32
 800783e:	d107      	bne.n	8007850 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0220 	mvn.w	r2, #32
 8007848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa96 	bl	8007d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_TIM_IC_ConfigChannel+0x1a>
 800786e:	2302      	movs	r3, #2
 8007870:	e082      	b.n	8007978 <HAL_TIM_IC_ConfigChannel+0x120>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d11b      	bne.n	80078b8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6819      	ldr	r1, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f000 f902 	bl	8007a98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 020c 	bic.w	r2, r2, #12
 80078a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6999      	ldr	r1, [r3, #24]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	619a      	str	r2, [r3, #24]
 80078b6:	e05a      	b.n	800796e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d11c      	bne.n	80078f8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6819      	ldr	r1, [r3, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f000 f939 	bl	8007b44 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6999      	ldr	r1, [r3, #24]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	021a      	lsls	r2, r3, #8
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	619a      	str	r2, [r3, #24]
 80078f6:	e03a      	b.n	800796e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d11b      	bne.n	8007936 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f000 f956 	bl	8007bbe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69da      	ldr	r2, [r3, #28]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 020c 	bic.w	r2, r2, #12
 8007920:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69d9      	ldr	r1, [r3, #28]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	61da      	str	r2, [r3, #28]
 8007934:	e01b      	b.n	800796e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f000 f976 	bl	8007c36 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007958:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69d9      	ldr	r1, [r3, #28]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	021a      	lsls	r2, r3, #8
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <TIM_Base_SetConfig+0xbc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_Base_SetConfig+0x20>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ee:	d108      	bne.n	8007a02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a21      	ldr	r2, [pc, #132]	; (8007a8c <TIM_Base_SetConfig+0xbc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00b      	beq.n	8007a22 <TIM_Base_SetConfig+0x52>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a10:	d007      	beq.n	8007a22 <TIM_Base_SetConfig+0x52>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <TIM_Base_SetConfig+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_Base_SetConfig+0x52>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <TIM_Base_SetConfig+0xc4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d108      	bne.n	8007a34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <TIM_Base_SetConfig+0xbc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d007      	beq.n	8007a70 <TIM_Base_SetConfig+0xa0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a0b      	ldr	r2, [pc, #44]	; (8007a90 <TIM_Base_SetConfig+0xc0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0xa0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a0a      	ldr	r2, [pc, #40]	; (8007a94 <TIM_Base_SetConfig+0xc4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d103      	bne.n	8007a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	615a      	str	r2, [r3, #20]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40014000 	.word	0x40014000
 8007a94:	40014400 	.word	0x40014400

08007a98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <TIM_TI1_SetConfig+0xa4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x3e>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d003      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x3e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <TIM_TI1_SetConfig+0xa8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d101      	bne.n	8007ada <TIM_TI1_SetConfig+0x42>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <TIM_TI1_SetConfig+0x44>
 8007ada:	2300      	movs	r3, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d008      	beq.n	8007af2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e003      	b.n	8007afa <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f023 030a 	bic.w	r3, r3, #10
 8007b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f003 030a 	and.w	r3, r3, #10
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40014000 	.word	0x40014000

08007b44 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0210 	bic.w	r2, r3, #16
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	031b      	lsls	r3, r3, #12
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b087      	sub	sp, #28
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bfa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b087      	sub	sp, #28
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	621a      	str	r2, [r3, #32]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e04f      	b.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d108      	bne.n	8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a14      	ldr	r2, [pc, #80]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d009      	beq.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d30:	d004      	beq.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a10      	ldr	r2, [pc, #64]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d10c      	bne.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40014000 	.word	0x40014000

08007d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e040      	b.n	8007e4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7f9 ffa8 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2224      	movs	r2, #36	; 0x24
 8007de4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fccc 	bl	8008794 <UART_SetConfig>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e022      	b.n	8007e4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fecc 	bl	8008bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff53 	bl	8008cf0 <UART_CheckIdleState>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e02b      	b.n	8007ebe <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	; 0x24
 8007e6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fa f80f 	bl	8001eb8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b08a      	sub	sp, #40	; 0x28
 8007eca:	af02      	add	r7, sp, #8
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	603b      	str	r3, [r7, #0]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	f040 8082 	bne.w	8007fe4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_UART_Transmit+0x26>
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e07a      	b.n	8007fe6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Transmit+0x38>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e073      	b.n	8007fe6 <HAL_UART_Transmit+0x120>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f14:	f7fa fed6 	bl	8002cc4 <HAL_GetTick>
 8007f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f32:	d108      	bne.n	8007f46 <HAL_UART_Transmit+0x80>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d104      	bne.n	8007f46 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	e003      	b.n	8007f4e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007f56:	e02d      	b.n	8007fb4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2180      	movs	r1, #128	; 0x80
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 ff0d 	bl	8008d82 <UART_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e039      	b.n	8007fe6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10b      	bne.n	8007f90 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	881a      	ldrh	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f84:	b292      	uxth	r2, r2
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	e008      	b.n	8007fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	b292      	uxth	r2, r2
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1cb      	bne.n	8007f58 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2140      	movs	r1, #64	; 0x40
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fed9 	bl	8008d82 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e005      	b.n	8007fe6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008002:	2b20      	cmp	r3, #32
 8008004:	d145      	bne.n	8008092 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_UART_Transmit_IT+0x22>
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e03e      	b.n	8008094 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_UART_Transmit_IT+0x34>
 8008020:	2302      	movs	r3, #2
 8008022:	e037      	b.n	8008094 <HAL_UART_Transmit_IT+0xa4>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	88fa      	ldrh	r2, [r7, #6]
 8008036:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2221      	movs	r2, #33	; 0x21
 8008054:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d107      	bne.n	8008070 <HAL_UART_Transmit_IT+0x80>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a0d      	ldr	r2, [pc, #52]	; (80080a0 <HAL_UART_Transmit_IT+0xb0>)
 800806c:	669a      	str	r2, [r3, #104]	; 0x68
 800806e:	e002      	b.n	8008076 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <HAL_UART_Transmit_IT+0xb4>)
 8008074:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800808c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	08009101 	.word	0x08009101
 80080a4:	0800908d 	.word	0x0800908d

080080a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d131      	bne.n	8008122 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_UART_Receive_IT+0x22>
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e02a      	b.n	8008124 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_UART_Receive_IT+0x34>
 80080d8:	2302      	movs	r3, #2
 80080da:	e023      	b.n	8008124 <HAL_UART_Receive_IT+0x7c>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a0f      	ldr	r2, [pc, #60]	; (800812c <HAL_UART_Receive_IT+0x84>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008110:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	461a      	mov	r2, r3
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 feaf 	bl	8008e7c <UART_Start_Receive_IT>
 800811e:	4603      	mov	r3, r0
 8008120:	e000      	b.n	8008124 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8008122:	2302      	movs	r3, #2
  }
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40008000 	.word	0x40008000

08008130 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008146:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d12d      	bne.n	80081b2 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008164:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d013      	beq.n	8008196 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008172:	4a19      	ldr	r2, [pc, #100]	; (80081d8 <HAL_UART_AbortTransmit_IT+0xa8>)
 8008174:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817a:	4618      	mov	r0, r3
 800817c:	f7fb fdd8 	bl	8003d30 <HAL_DMA_Abort_IT>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d022      	beq.n	80081cc <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	e01a      	b.n	80081cc <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa9a 	bl	80086e4 <HAL_UART_AbortTransmitCpltCallback>
 80081b0:	e00c      	b.n	80081cc <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa8c 	bl	80086e4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	08009017 	.word	0x08009017

080081dc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008208:	2b01      	cmp	r3, #1
 800820a:	d107      	bne.n	800821c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0210 	bic.w	r2, r2, #16
 800821a:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d13e      	bne.n	80082a8 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008238:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	2b00      	cmp	r3, #0
 8008240:	d013      	beq.n	800826a <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	4a25      	ldr	r2, [pc, #148]	; (80082dc <HAL_UART_AbortReceive_IT+0x100>)
 8008248:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4618      	mov	r0, r3
 8008250:	f7fb fd6e 	bl	8003d30 <HAL_DMA_Abort_IT>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d03a      	beq.n	80082d0 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	e032      	b.n	80082d0 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	220f      	movs	r2, #15
 800827e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	8b1b      	ldrh	r3, [r3, #24]
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0208 	orr.w	r2, r2, #8
 8008290:	b292      	uxth	r2, r2
 8008292:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa29 	bl	80086f8 <HAL_UART_AbortReceiveCpltCallback>
 80082a6:	e013      	b.n	80082d0 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	220f      	movs	r2, #15
 80082bc:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa14 	bl	80086f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	08009041 	.word	0x08009041

080082e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	f640 030f 	movw	r3, #2063	; 0x80f
 8008306:	4013      	ands	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d113      	bne.n	8008338 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d009      	beq.n	8008338 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 81ce 	beq.w	80086ca <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
      }
      return;
 8008336:	e1c8      	b.n	80086ca <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 80e3 	beq.w	8008506 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4ba6      	ldr	r3, [pc, #664]	; (80085e8 <HAL_UART_IRQHandler+0x308>)
 800834e:	4013      	ands	r3, r2
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80d8 	beq.w	8008506 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <HAL_UART_IRQHandler+0xa2>
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00b      	beq.n	8008382 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2201      	movs	r2, #1
 8008370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008378:	f043 0201 	orr.w	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <HAL_UART_IRQHandler+0xce>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2202      	movs	r2, #2
 800839c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a4:	f043 0204 	orr.w	r2, r3, #4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d010      	beq.n	80083da <HAL_UART_IRQHandler+0xfa>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2204      	movs	r2, #4
 80083c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d0:	f043 0202 	orr.w	r2, r3, #2
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d015      	beq.n	8008410 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2208      	movs	r2, #8
 80083fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008406:	f043 0208 	orr.w	r2, r3, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008416:	2b00      	cmp	r3, #0
 8008418:	d011      	beq.n	800843e <HAL_UART_IRQHandler+0x15e>
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800842c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008434:	f043 0220 	orr.w	r2, r3, #32
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8142 	beq.w	80086ce <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f003 0320 	and.w	r3, r3, #32
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00c      	beq.n	800846e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008474:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d004      	beq.n	800848e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800848a:	2b00      	cmp	r3, #0
 800848c:	d031      	beq.n	80084f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fd7c 	bl	8008f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d123      	bne.n	80084ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d013      	beq.n	80084e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	4a4b      	ldr	r2, [pc, #300]	; (80085ec <HAL_UART_IRQHandler+0x30c>)
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fb fc32 	bl	8003d30 <HAL_DMA_Abort_IT>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d017      	beq.n	8008502 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	e00f      	b.n	8008502 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f9 fb80 	bl	8001be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	e00b      	b.n	8008502 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7f9 fb7c 	bl	8001be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f0:	e007      	b.n	8008502 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7f9 fb78 	bl	8001be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008500:	e0e5      	b.n	80086ce <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008502:	bf00      	nop
    return;
 8008504:	e0e3      	b.n	80086ce <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850a:	2b01      	cmp	r3, #1
 800850c:	f040 80a9 	bne.w	8008662 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80a3 	beq.w	8008662 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 809d 	beq.w	8008662 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2210      	movs	r2, #16
 800852e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d158      	bne.n	80085f0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008548:	893b      	ldrh	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80c1 	beq.w	80086d2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008556:	893a      	ldrh	r2, [r7, #8]
 8008558:	429a      	cmp	r2, r3
 800855a:	f080 80ba 	bcs.w	80086d2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	893a      	ldrh	r2, [r7, #8]
 8008562:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	d12a      	bne.n	80085cc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008584:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085a4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0210 	bic.w	r2, r2, #16
 80085c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fb fb74 	bl	8003cb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085d8:	b29b      	uxth	r3, r3
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f893 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085e6:	e074      	b.n	80086d2 <HAL_UART_IRQHandler+0x3f2>
 80085e8:	04000120 	.word	0x04000120
 80085ec:	08008feb 	.word	0x08008feb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d063      	beq.n	80086d6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800860e:	897b      	ldrh	r3, [r7, #10]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d060      	beq.n	80086d6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008622:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0210 	bic.w	r2, r2, #16
 8008654:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008656:	897b      	ldrh	r3, [r7, #10]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f856 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008660:	e039      	b.n	80086d6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00d      	beq.n	8008688 <HAL_UART_IRQHandler+0x3a8>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d008      	beq.n	8008688 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800867e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fe6c 	bl	800935e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008686:	e029      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00d      	beq.n	80086ae <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01a      	beq.n	80086da <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
    }
    return;
 80086ac:	e015      	b.n	80086da <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d011      	beq.n	80086dc <HAL_UART_IRQHandler+0x3fc>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00c      	beq.n	80086dc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fd5a 	bl	800917c <UART_EndTransmit_IT>
    return;
 80086c8:	e008      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80086ca:	bf00      	nop
 80086cc:	e006      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80086ce:	bf00      	nop
 80086d0:	e004      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80086da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80086dc:	3720      	adds	r7, #32
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop

080086e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a17      	ldr	r2, [pc, #92]	; (8008790 <HAL_UART_EnableReceiverTimeout+0x6c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d024      	beq.n	8008780 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800873a:	2b20      	cmp	r3, #32
 800873c:	d11e      	bne.n	800877c <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_UART_EnableReceiverTimeout+0x28>
 8008748:	2302      	movs	r3, #2
 800874a:	e01a      	b.n	8008782 <HAL_UART_EnableReceiverTimeout+0x5e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2224      	movs	r2, #36	; 0x24
 8008758:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008768:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	e002      	b.n	8008782 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800877c:	2302      	movs	r3, #2
 800877e:	e000      	b.n	8008782 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
  }
}
 8008782:	4618      	mov	r0, r3
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40008000 	.word	0x40008000

08008794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4baf      	ldr	r3, [pc, #700]	; (8008a7c <UART_SetConfig+0x2e8>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	69f9      	ldr	r1, [r7, #28]
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4aa4      	ldr	r2, [pc, #656]	; (8008a80 <UART_SetConfig+0x2ec>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d004      	beq.n	80087fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	430a      	orrs	r2, r1
 800880e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a9b      	ldr	r2, [pc, #620]	; (8008a84 <UART_SetConfig+0x2f0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d121      	bne.n	800885e <UART_SetConfig+0xca>
 800881a:	4b9b      	ldr	r3, [pc, #620]	; (8008a88 <UART_SetConfig+0x2f4>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	2b03      	cmp	r3, #3
 8008826:	d817      	bhi.n	8008858 <UART_SetConfig+0xc4>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x9c>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008841 	.word	0x08008841
 8008834:	0800884d 	.word	0x0800884d
 8008838:	08008847 	.word	0x08008847
 800883c:	08008853 	.word	0x08008853
 8008840:	2301      	movs	r3, #1
 8008842:	76fb      	strb	r3, [r7, #27]
 8008844:	e070      	b.n	8008928 <UART_SetConfig+0x194>
 8008846:	2302      	movs	r3, #2
 8008848:	76fb      	strb	r3, [r7, #27]
 800884a:	e06d      	b.n	8008928 <UART_SetConfig+0x194>
 800884c:	2304      	movs	r3, #4
 800884e:	76fb      	strb	r3, [r7, #27]
 8008850:	e06a      	b.n	8008928 <UART_SetConfig+0x194>
 8008852:	2308      	movs	r3, #8
 8008854:	76fb      	strb	r3, [r7, #27]
 8008856:	e067      	b.n	8008928 <UART_SetConfig+0x194>
 8008858:	2310      	movs	r3, #16
 800885a:	76fb      	strb	r3, [r7, #27]
 800885c:	e064      	b.n	8008928 <UART_SetConfig+0x194>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a8a      	ldr	r2, [pc, #552]	; (8008a8c <UART_SetConfig+0x2f8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d132      	bne.n	80088ce <UART_SetConfig+0x13a>
 8008868:	4b87      	ldr	r3, [pc, #540]	; (8008a88 <UART_SetConfig+0x2f4>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	2b0c      	cmp	r3, #12
 8008874:	d828      	bhi.n	80088c8 <UART_SetConfig+0x134>
 8008876:	a201      	add	r2, pc, #4	; (adr r2, 800887c <UART_SetConfig+0xe8>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	080088b1 	.word	0x080088b1
 8008880:	080088c9 	.word	0x080088c9
 8008884:	080088c9 	.word	0x080088c9
 8008888:	080088c9 	.word	0x080088c9
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088c9 	.word	0x080088c9
 8008894:	080088c9 	.word	0x080088c9
 8008898:	080088c9 	.word	0x080088c9
 800889c:	080088b7 	.word	0x080088b7
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088c9 	.word	0x080088c9
 80088ac:	080088c3 	.word	0x080088c3
 80088b0:	2300      	movs	r3, #0
 80088b2:	76fb      	strb	r3, [r7, #27]
 80088b4:	e038      	b.n	8008928 <UART_SetConfig+0x194>
 80088b6:	2302      	movs	r3, #2
 80088b8:	76fb      	strb	r3, [r7, #27]
 80088ba:	e035      	b.n	8008928 <UART_SetConfig+0x194>
 80088bc:	2304      	movs	r3, #4
 80088be:	76fb      	strb	r3, [r7, #27]
 80088c0:	e032      	b.n	8008928 <UART_SetConfig+0x194>
 80088c2:	2308      	movs	r3, #8
 80088c4:	76fb      	strb	r3, [r7, #27]
 80088c6:	e02f      	b.n	8008928 <UART_SetConfig+0x194>
 80088c8:	2310      	movs	r3, #16
 80088ca:	76fb      	strb	r3, [r7, #27]
 80088cc:	e02c      	b.n	8008928 <UART_SetConfig+0x194>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a6b      	ldr	r2, [pc, #428]	; (8008a80 <UART_SetConfig+0x2ec>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d125      	bne.n	8008924 <UART_SetConfig+0x190>
 80088d8:	4b6b      	ldr	r3, [pc, #428]	; (8008a88 <UART_SetConfig+0x2f4>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088e6:	d017      	beq.n	8008918 <UART_SetConfig+0x184>
 80088e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088ec:	d817      	bhi.n	800891e <UART_SetConfig+0x18a>
 80088ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f2:	d00b      	beq.n	800890c <UART_SetConfig+0x178>
 80088f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f8:	d811      	bhi.n	800891e <UART_SetConfig+0x18a>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <UART_SetConfig+0x172>
 80088fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008902:	d006      	beq.n	8008912 <UART_SetConfig+0x17e>
 8008904:	e00b      	b.n	800891e <UART_SetConfig+0x18a>
 8008906:	2300      	movs	r3, #0
 8008908:	76fb      	strb	r3, [r7, #27]
 800890a:	e00d      	b.n	8008928 <UART_SetConfig+0x194>
 800890c:	2302      	movs	r3, #2
 800890e:	76fb      	strb	r3, [r7, #27]
 8008910:	e00a      	b.n	8008928 <UART_SetConfig+0x194>
 8008912:	2304      	movs	r3, #4
 8008914:	76fb      	strb	r3, [r7, #27]
 8008916:	e007      	b.n	8008928 <UART_SetConfig+0x194>
 8008918:	2308      	movs	r3, #8
 800891a:	76fb      	strb	r3, [r7, #27]
 800891c:	e004      	b.n	8008928 <UART_SetConfig+0x194>
 800891e:	2310      	movs	r3, #16
 8008920:	76fb      	strb	r3, [r7, #27]
 8008922:	e001      	b.n	8008928 <UART_SetConfig+0x194>
 8008924:	2310      	movs	r3, #16
 8008926:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a54      	ldr	r2, [pc, #336]	; (8008a80 <UART_SetConfig+0x2ec>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d173      	bne.n	8008a1a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008932:	7efb      	ldrb	r3, [r7, #27]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d824      	bhi.n	8008982 <UART_SetConfig+0x1ee>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x1ac>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008965 	.word	0x08008965
 8008944:	08008983 	.word	0x08008983
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008983 	.word	0x08008983
 8008950:	08008973 	.word	0x08008973
 8008954:	08008983 	.word	0x08008983
 8008958:	08008983 	.word	0x08008983
 800895c:	08008983 	.word	0x08008983
 8008960:	0800897b 	.word	0x0800897b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008964:	f7fd fff4 	bl	8006950 <HAL_RCC_GetPCLK1Freq>
 8008968:	6178      	str	r0, [r7, #20]
        break;
 800896a:	e00f      	b.n	800898c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800896c:	4b48      	ldr	r3, [pc, #288]	; (8008a90 <UART_SetConfig+0x2fc>)
 800896e:	617b      	str	r3, [r7, #20]
        break;
 8008970:	e00c      	b.n	800898c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008972:	f7fd ff55 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008976:	6178      	str	r0, [r7, #20]
        break;
 8008978:	e008      	b.n	800898c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800897a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800897e:	617b      	str	r3, [r7, #20]
        break;
 8008980:	e004      	b.n	800898c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	76bb      	strb	r3, [r7, #26]
        break;
 800898a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80fe 	beq.w	8008b90 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	4413      	add	r3, r2
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d305      	bcc.n	80089b0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d902      	bls.n	80089b6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	76bb      	strb	r3, [r7, #26]
 80089b4:	e0ec      	b.n	8008b90 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f04f 0100 	mov.w	r1, #0
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	020b      	lsls	r3, r1, #8
 80089c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089cc:	0202      	lsls	r2, r0, #8
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	6849      	ldr	r1, [r1, #4]
 80089d2:	0849      	lsrs	r1, r1, #1
 80089d4:	4608      	mov	r0, r1
 80089d6:	f04f 0100 	mov.w	r1, #0
 80089da:	1814      	adds	r4, r2, r0
 80089dc:	eb43 0501 	adc.w	r5, r3, r1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	461a      	mov	r2, r3
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	4620      	mov	r0, r4
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7f7 fc3f 	bl	8000270 <__aeabi_uldivmod>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4613      	mov	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a00:	d308      	bcc.n	8008a14 <UART_SetConfig+0x280>
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a08:	d204      	bcs.n	8008a14 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	60da      	str	r2, [r3, #12]
 8008a12:	e0bd      	b.n	8008b90 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	76bb      	strb	r3, [r7, #26]
 8008a18:	e0ba      	b.n	8008b90 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a22:	d168      	bne.n	8008af6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8008a24:	7efb      	ldrb	r3, [r7, #27]
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d834      	bhi.n	8008a94 <UART_SetConfig+0x300>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x29c>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008a5d 	.word	0x08008a5d
 8008a38:	08008a65 	.word	0x08008a65
 8008a3c:	08008a95 	.word	0x08008a95
 8008a40:	08008a6b 	.word	0x08008a6b
 8008a44:	08008a95 	.word	0x08008a95
 8008a48:	08008a95 	.word	0x08008a95
 8008a4c:	08008a95 	.word	0x08008a95
 8008a50:	08008a73 	.word	0x08008a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a54:	f7fd ff7c 	bl	8006950 <HAL_RCC_GetPCLK1Freq>
 8008a58:	6178      	str	r0, [r7, #20]
        break;
 8008a5a:	e020      	b.n	8008a9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a5c:	f7fd ff8e 	bl	800697c <HAL_RCC_GetPCLK2Freq>
 8008a60:	6178      	str	r0, [r7, #20]
        break;
 8008a62:	e01c      	b.n	8008a9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <UART_SetConfig+0x2fc>)
 8008a66:	617b      	str	r3, [r7, #20]
        break;
 8008a68:	e019      	b.n	8008a9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a6a:	f7fd fed9 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008a6e:	6178      	str	r0, [r7, #20]
        break;
 8008a70:	e015      	b.n	8008a9e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a76:	617b      	str	r3, [r7, #20]
        break;
 8008a78:	e011      	b.n	8008a9e <UART_SetConfig+0x30a>
 8008a7a:	bf00      	nop
 8008a7c:	efff69f3 	.word	0xefff69f3
 8008a80:	40008000 	.word	0x40008000
 8008a84:	40013800 	.word	0x40013800
 8008a88:	40021000 	.word	0x40021000
 8008a8c:	40004400 	.word	0x40004400
 8008a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	76bb      	strb	r3, [r7, #26]
        break;
 8008a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d075      	beq.n	8008b90 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	005a      	lsls	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	441a      	add	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d916      	bls.n	8008af0 <UART_SetConfig+0x35c>
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d212      	bcs.n	8008af0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f023 030f 	bic.w	r3, r3, #15
 8008ad2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	89fa      	ldrh	r2, [r7, #14]
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e04f      	b.n	8008b90 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	76bb      	strb	r3, [r7, #26]
 8008af4:	e04c      	b.n	8008b90 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af6:	7efb      	ldrb	r3, [r7, #27]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d828      	bhi.n	8008b4e <UART_SetConfig+0x3ba>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x370>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b4f 	.word	0x08008b4f
 8008b24:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b28:	f7fd ff12 	bl	8006950 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	6178      	str	r0, [r7, #20]
        break;
 8008b2e:	e013      	b.n	8008b58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fd ff24 	bl	800697c <HAL_RCC_GetPCLK2Freq>
 8008b34:	6178      	str	r0, [r7, #20]
        break;
 8008b36:	e00f      	b.n	8008b58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <UART_SetConfig+0x414>)
 8008b3a:	617b      	str	r3, [r7, #20]
        break;
 8008b3c:	e00c      	b.n	8008b58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fd fe6f 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008b42:	6178      	str	r0, [r7, #20]
        break;
 8008b44:	e008      	b.n	8008b58 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	617b      	str	r3, [r7, #20]
        break;
 8008b4c:	e004      	b.n	8008b58 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	76bb      	strb	r3, [r7, #26]
        break;
 8008b56:	bf00      	nop
    }

    if (pclk != 0U)
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d018      	beq.n	8008b90 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	085a      	lsrs	r2, r3, #1
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d908      	bls.n	8008b8c <UART_SetConfig+0x3f8>
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d204      	bcs.n	8008b8c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	e001      	b.n	8008b90 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	00f42400 	.word	0x00f42400

08008bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01a      	beq.n	8008cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008caa:	d10a      	bne.n	8008cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	605a      	str	r2, [r3, #4]
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d00:	f7f9 ffe0 	bl	8002cc4 <HAL_GetTick>
 8008d04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d10e      	bne.n	8008d32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f82d 	bl	8008d82 <UART_WaitOnFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e023      	b.n	8008d7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d10e      	bne.n	8008d5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f817 	bl	8008d82 <UART_WaitOnFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e00d      	b.n	8008d7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d92:	e05e      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d05a      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9c:	f7f9 ff92 	bl	8002cc4 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d302      	bcc.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d11b      	bne.n	8008dea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0201 	bic.w	r2, r2, #1
 8008dd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e043      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d02c      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e06:	d124      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e10:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e20:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f022 0201 	bic.w	r2, r2, #1
 8008e30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2220      	movs	r2, #32
 8008e36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e00f      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69da      	ldr	r2, [r3, #28]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d091      	beq.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eae:	d10e      	bne.n	8008ece <UART_Start_Receive_IT+0x52>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <UART_Start_Receive_IT+0x48>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ec2:	e02d      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	22ff      	movs	r2, #255	; 0xff
 8008ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ecc:	e028      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <UART_Start_Receive_IT+0x76>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <UART_Start_Receive_IT+0x6c>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	22ff      	movs	r2, #255	; 0xff
 8008ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ee6:	e01b      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	227f      	movs	r2, #127	; 0x7f
 8008eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ef0:	e016      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008efa:	d10d      	bne.n	8008f18 <UART_Start_Receive_IT+0x9c>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d104      	bne.n	8008f0e <UART_Start_Receive_IT+0x92>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	227f      	movs	r2, #127	; 0x7f
 8008f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f0c:	e008      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	223f      	movs	r2, #63	; 0x3f
 8008f12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f16:	e003      	b.n	8008f20 <UART_Start_Receive_IT+0xa4>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2222      	movs	r2, #34	; 0x22
 8008f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f46:	d107      	bne.n	8008f58 <UART_Start_Receive_IT+0xdc>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <UART_Start_Receive_IT+0x108>)
 8008f54:	665a      	str	r2, [r3, #100]	; 0x64
 8008f56:	e002      	b.n	8008f5e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a0b      	ldr	r2, [pc, #44]	; (8008f88 <UART_Start_Receive_IT+0x10c>)
 8008f5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008f74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	08009287 	.word	0x08009287
 8008f88:	080091af 	.word	0x080091af

08008f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d107      	bne.n	8008fcc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0210 	bic.w	r2, r2, #16
 8008fca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7f8 fded 	bl	8001be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fb56 	bl	80086e4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	220f      	movs	r2, #15
 800905c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	8b1b      	ldrh	r3, [r3, #24]
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	b292      	uxth	r2, r2
 8009070:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2220      	movs	r2, #32
 8009076:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fb3a 	bl	80086f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009098:	2b21      	cmp	r3, #33	; 0x21
 800909a:	d12b      	bne.n	80090f4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d110      	bne.n	80090ca <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80090c8:	e014      	b.n	80090f4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b292      	uxth	r2, r2
 80090d6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800910c:	2b21      	cmp	r3, #33	; 0x21
 800910e:	d12f      	bne.n	8009170 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d110      	bne.n	800913e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800912a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800913a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800913c:	e018      	b.n	8009170 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009142:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	881a      	ldrh	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009150:	b292      	uxth	r2, r2
 8009152:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009158:	1c9a      	adds	r2, r3, #2
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009192:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7f8 fd01 	bl	8001ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091bc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c2:	2b22      	cmp	r3, #34	; 0x22
 80091c4:	d151      	bne.n	800926a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091cc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091ce:	89bb      	ldrh	r3, [r7, #12]
 80091d0:	b2d9      	uxtb	r1, r3
 80091d2:	89fb      	ldrh	r3, [r7, #14]
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	400a      	ands	r2, r1
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d13a      	bne.n	800927e <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009216:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009238:	2b01      	cmp	r3, #1
 800923a:	d10f      	bne.n	800925c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0210 	bic.w	r2, r2, #16
 800924a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fa59 	bl	800870c <HAL_UARTEx_RxEventCallback>
 800925a:	e002      	b.n	8009262 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7f8 fcb3 	bl	8001bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009268:	e009      	b.n	800927e <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	8b1b      	ldrh	r3, [r3, #24]
 8009270:	b29a      	uxth	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0208 	orr.w	r2, r2, #8
 800927a:	b292      	uxth	r2, r2
 800927c:	831a      	strh	r2, [r3, #24]
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009294:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	2b22      	cmp	r3, #34	; 0x22
 800929c:	d151      	bne.n	8009342 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80092a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80092ac:	89ba      	ldrh	r2, [r7, #12]
 80092ae:	89fb      	ldrh	r3, [r7, #14]
 80092b0:	4013      	ands	r3, r2
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092bc:	1c9a      	adds	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d13a      	bne.n	8009356 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092ee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0201 	bic.w	r2, r2, #1
 80092fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009310:	2b01      	cmp	r3, #1
 8009312:	d10f      	bne.n	8009334 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0210 	bic.w	r2, r2, #16
 8009322:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff f9ed 	bl	800870c <HAL_UARTEx_RxEventCallback>
 8009332:	e002      	b.n	800933a <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7f8 fc47 	bl	8001bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009340:	e009      	b.n	8009356 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	8b1b      	ldrh	r3, [r3, #24]
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	b292      	uxth	r2, r2
 8009354:	831a      	strh	r2, [r3, #24]
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009366:	bf00      	nop
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
	...

08009374 <__errno>:
 8009374:	4b01      	ldr	r3, [pc, #4]	; (800937c <__errno+0x8>)
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	2000000c 	.word	0x2000000c

08009380 <__libc_init_array>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4d0d      	ldr	r5, [pc, #52]	; (80093b8 <__libc_init_array+0x38>)
 8009384:	4c0d      	ldr	r4, [pc, #52]	; (80093bc <__libc_init_array+0x3c>)
 8009386:	1b64      	subs	r4, r4, r5
 8009388:	10a4      	asrs	r4, r4, #2
 800938a:	2600      	movs	r6, #0
 800938c:	42a6      	cmp	r6, r4
 800938e:	d109      	bne.n	80093a4 <__libc_init_array+0x24>
 8009390:	4d0b      	ldr	r5, [pc, #44]	; (80093c0 <__libc_init_array+0x40>)
 8009392:	4c0c      	ldr	r4, [pc, #48]	; (80093c4 <__libc_init_array+0x44>)
 8009394:	f000 fc62 	bl	8009c5c <_init>
 8009398:	1b64      	subs	r4, r4, r5
 800939a:	10a4      	asrs	r4, r4, #2
 800939c:	2600      	movs	r6, #0
 800939e:	42a6      	cmp	r6, r4
 80093a0:	d105      	bne.n	80093ae <__libc_init_array+0x2e>
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a8:	4798      	blx	r3
 80093aa:	3601      	adds	r6, #1
 80093ac:	e7ee      	b.n	800938c <__libc_init_array+0xc>
 80093ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b2:	4798      	blx	r3
 80093b4:	3601      	adds	r6, #1
 80093b6:	e7f2      	b.n	800939e <__libc_init_array+0x1e>
 80093b8:	0800a42c 	.word	0x0800a42c
 80093bc:	0800a42c 	.word	0x0800a42c
 80093c0:	0800a42c 	.word	0x0800a42c
 80093c4:	0800a430 	.word	0x0800a430

080093c8 <memcpy>:
 80093c8:	440a      	add	r2, r1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093d0:	d100      	bne.n	80093d4 <memcpy+0xc>
 80093d2:	4770      	bx	lr
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	4291      	cmp	r1, r2
 80093e0:	d1f9      	bne.n	80093d6 <memcpy+0xe>
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <memset>:
 80093e4:	4402      	add	r2, r0
 80093e6:	4603      	mov	r3, r0
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d100      	bne.n	80093ee <memset+0xa>
 80093ec:	4770      	bx	lr
 80093ee:	f803 1b01 	strb.w	r1, [r3], #1
 80093f2:	e7f9      	b.n	80093e8 <memset+0x4>

080093f4 <sniprintf>:
 80093f4:	b40c      	push	{r2, r3}
 80093f6:	b530      	push	{r4, r5, lr}
 80093f8:	4b17      	ldr	r3, [pc, #92]	; (8009458 <sniprintf+0x64>)
 80093fa:	1e0c      	subs	r4, r1, #0
 80093fc:	681d      	ldr	r5, [r3, #0]
 80093fe:	b09d      	sub	sp, #116	; 0x74
 8009400:	da08      	bge.n	8009414 <sniprintf+0x20>
 8009402:	238b      	movs	r3, #139	; 0x8b
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	b01d      	add	sp, #116	; 0x74
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	b002      	add	sp, #8
 8009412:	4770      	bx	lr
 8009414:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800941c:	bf14      	ite	ne
 800941e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009422:	4623      	moveq	r3, r4
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800942c:	9002      	str	r0, [sp, #8]
 800942e:	9006      	str	r0, [sp, #24]
 8009430:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009434:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009436:	ab21      	add	r3, sp, #132	; 0x84
 8009438:	a902      	add	r1, sp, #8
 800943a:	4628      	mov	r0, r5
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	f000 f869 	bl	8009514 <_svfiprintf_r>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	bfbc      	itt	lt
 8009446:	238b      	movlt	r3, #139	; 0x8b
 8009448:	602b      	strlt	r3, [r5, #0]
 800944a:	2c00      	cmp	r4, #0
 800944c:	d0dd      	beq.n	800940a <sniprintf+0x16>
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	e7d9      	b.n	800940a <sniprintf+0x16>
 8009456:	bf00      	nop
 8009458:	2000000c 	.word	0x2000000c

0800945c <__ssputs_r>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	688e      	ldr	r6, [r1, #8]
 8009462:	429e      	cmp	r6, r3
 8009464:	4682      	mov	sl, r0
 8009466:	460c      	mov	r4, r1
 8009468:	4690      	mov	r8, r2
 800946a:	461f      	mov	r7, r3
 800946c:	d838      	bhi.n	80094e0 <__ssputs_r+0x84>
 800946e:	898a      	ldrh	r2, [r1, #12]
 8009470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009474:	d032      	beq.n	80094dc <__ssputs_r+0x80>
 8009476:	6825      	ldr	r5, [r4, #0]
 8009478:	6909      	ldr	r1, [r1, #16]
 800947a:	eba5 0901 	sub.w	r9, r5, r1
 800947e:	6965      	ldr	r5, [r4, #20]
 8009480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009488:	3301      	adds	r3, #1
 800948a:	444b      	add	r3, r9
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	429d      	cmp	r5, r3
 8009490:	bf38      	it	cc
 8009492:	461d      	movcc	r5, r3
 8009494:	0553      	lsls	r3, r2, #21
 8009496:	d531      	bpl.n	80094fc <__ssputs_r+0xa0>
 8009498:	4629      	mov	r1, r5
 800949a:	f000 fb39 	bl	8009b10 <_malloc_r>
 800949e:	4606      	mov	r6, r0
 80094a0:	b950      	cbnz	r0, 80094b8 <__ssputs_r+0x5c>
 80094a2:	230c      	movs	r3, #12
 80094a4:	f8ca 3000 	str.w	r3, [sl]
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b8:	6921      	ldr	r1, [r4, #16]
 80094ba:	464a      	mov	r2, r9
 80094bc:	f7ff ff84 	bl	80093c8 <memcpy>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	6126      	str	r6, [r4, #16]
 80094ce:	6165      	str	r5, [r4, #20]
 80094d0:	444e      	add	r6, r9
 80094d2:	eba5 0509 	sub.w	r5, r5, r9
 80094d6:	6026      	str	r6, [r4, #0]
 80094d8:	60a5      	str	r5, [r4, #8]
 80094da:	463e      	mov	r6, r7
 80094dc:	42be      	cmp	r6, r7
 80094de:	d900      	bls.n	80094e2 <__ssputs_r+0x86>
 80094e0:	463e      	mov	r6, r7
 80094e2:	4632      	mov	r2, r6
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	4641      	mov	r1, r8
 80094e8:	f000 faa8 	bl	8009a3c <memmove>
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	1b9b      	subs	r3, r3, r6
 80094f2:	4432      	add	r2, r6
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7db      	b.n	80094b4 <__ssputs_r+0x58>
 80094fc:	462a      	mov	r2, r5
 80094fe:	f000 fb61 	bl	8009bc4 <_realloc_r>
 8009502:	4606      	mov	r6, r0
 8009504:	2800      	cmp	r0, #0
 8009506:	d1e1      	bne.n	80094cc <__ssputs_r+0x70>
 8009508:	6921      	ldr	r1, [r4, #16]
 800950a:	4650      	mov	r0, sl
 800950c:	f000 fab0 	bl	8009a70 <_free_r>
 8009510:	e7c7      	b.n	80094a2 <__ssputs_r+0x46>
	...

08009514 <_svfiprintf_r>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	4698      	mov	r8, r3
 800951a:	898b      	ldrh	r3, [r1, #12]
 800951c:	061b      	lsls	r3, r3, #24
 800951e:	b09d      	sub	sp, #116	; 0x74
 8009520:	4607      	mov	r7, r0
 8009522:	460d      	mov	r5, r1
 8009524:	4614      	mov	r4, r2
 8009526:	d50e      	bpl.n	8009546 <_svfiprintf_r+0x32>
 8009528:	690b      	ldr	r3, [r1, #16]
 800952a:	b963      	cbnz	r3, 8009546 <_svfiprintf_r+0x32>
 800952c:	2140      	movs	r1, #64	; 0x40
 800952e:	f000 faef 	bl	8009b10 <_malloc_r>
 8009532:	6028      	str	r0, [r5, #0]
 8009534:	6128      	str	r0, [r5, #16]
 8009536:	b920      	cbnz	r0, 8009542 <_svfiprintf_r+0x2e>
 8009538:	230c      	movs	r3, #12
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	e0d1      	b.n	80096e6 <_svfiprintf_r+0x1d2>
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	616b      	str	r3, [r5, #20]
 8009546:	2300      	movs	r3, #0
 8009548:	9309      	str	r3, [sp, #36]	; 0x24
 800954a:	2320      	movs	r3, #32
 800954c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009550:	f8cd 800c 	str.w	r8, [sp, #12]
 8009554:	2330      	movs	r3, #48	; 0x30
 8009556:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009700 <_svfiprintf_r+0x1ec>
 800955a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800955e:	f04f 0901 	mov.w	r9, #1
 8009562:	4623      	mov	r3, r4
 8009564:	469a      	mov	sl, r3
 8009566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800956a:	b10a      	cbz	r2, 8009570 <_svfiprintf_r+0x5c>
 800956c:	2a25      	cmp	r2, #37	; 0x25
 800956e:	d1f9      	bne.n	8009564 <_svfiprintf_r+0x50>
 8009570:	ebba 0b04 	subs.w	fp, sl, r4
 8009574:	d00b      	beq.n	800958e <_svfiprintf_r+0x7a>
 8009576:	465b      	mov	r3, fp
 8009578:	4622      	mov	r2, r4
 800957a:	4629      	mov	r1, r5
 800957c:	4638      	mov	r0, r7
 800957e:	f7ff ff6d 	bl	800945c <__ssputs_r>
 8009582:	3001      	adds	r0, #1
 8009584:	f000 80aa 	beq.w	80096dc <_svfiprintf_r+0x1c8>
 8009588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800958a:	445a      	add	r2, fp
 800958c:	9209      	str	r2, [sp, #36]	; 0x24
 800958e:	f89a 3000 	ldrb.w	r3, [sl]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80a2 	beq.w	80096dc <_svfiprintf_r+0x1c8>
 8009598:	2300      	movs	r3, #0
 800959a:	f04f 32ff 	mov.w	r2, #4294967295
 800959e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095a2:	f10a 0a01 	add.w	sl, sl, #1
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ae:	931a      	str	r3, [sp, #104]	; 0x68
 80095b0:	4654      	mov	r4, sl
 80095b2:	2205      	movs	r2, #5
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	4851      	ldr	r0, [pc, #324]	; (8009700 <_svfiprintf_r+0x1ec>)
 80095ba:	f7f6 fe09 	bl	80001d0 <memchr>
 80095be:	9a04      	ldr	r2, [sp, #16]
 80095c0:	b9d8      	cbnz	r0, 80095fa <_svfiprintf_r+0xe6>
 80095c2:	06d0      	lsls	r0, r2, #27
 80095c4:	bf44      	itt	mi
 80095c6:	2320      	movmi	r3, #32
 80095c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095cc:	0711      	lsls	r1, r2, #28
 80095ce:	bf44      	itt	mi
 80095d0:	232b      	movmi	r3, #43	; 0x2b
 80095d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d6:	f89a 3000 	ldrb.w	r3, [sl]
 80095da:	2b2a      	cmp	r3, #42	; 0x2a
 80095dc:	d015      	beq.n	800960a <_svfiprintf_r+0xf6>
 80095de:	9a07      	ldr	r2, [sp, #28]
 80095e0:	4654      	mov	r4, sl
 80095e2:	2000      	movs	r0, #0
 80095e4:	f04f 0c0a 	mov.w	ip, #10
 80095e8:	4621      	mov	r1, r4
 80095ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ee:	3b30      	subs	r3, #48	; 0x30
 80095f0:	2b09      	cmp	r3, #9
 80095f2:	d94e      	bls.n	8009692 <_svfiprintf_r+0x17e>
 80095f4:	b1b0      	cbz	r0, 8009624 <_svfiprintf_r+0x110>
 80095f6:	9207      	str	r2, [sp, #28]
 80095f8:	e014      	b.n	8009624 <_svfiprintf_r+0x110>
 80095fa:	eba0 0308 	sub.w	r3, r0, r8
 80095fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009602:	4313      	orrs	r3, r2
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	46a2      	mov	sl, r4
 8009608:	e7d2      	b.n	80095b0 <_svfiprintf_r+0x9c>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	1d19      	adds	r1, r3, #4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfbb      	ittet	lt
 8009616:	425b      	neglt	r3, r3
 8009618:	f042 0202 	orrlt.w	r2, r2, #2
 800961c:	9307      	strge	r3, [sp, #28]
 800961e:	9307      	strlt	r3, [sp, #28]
 8009620:	bfb8      	it	lt
 8009622:	9204      	strlt	r2, [sp, #16]
 8009624:	7823      	ldrb	r3, [r4, #0]
 8009626:	2b2e      	cmp	r3, #46	; 0x2e
 8009628:	d10c      	bne.n	8009644 <_svfiprintf_r+0x130>
 800962a:	7863      	ldrb	r3, [r4, #1]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d135      	bne.n	800969c <_svfiprintf_r+0x188>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	1d1a      	adds	r2, r3, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	9203      	str	r2, [sp, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	bfb8      	it	lt
 800963c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009640:	3402      	adds	r4, #2
 8009642:	9305      	str	r3, [sp, #20]
 8009644:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009710 <_svfiprintf_r+0x1fc>
 8009648:	7821      	ldrb	r1, [r4, #0]
 800964a:	2203      	movs	r2, #3
 800964c:	4650      	mov	r0, sl
 800964e:	f7f6 fdbf 	bl	80001d0 <memchr>
 8009652:	b140      	cbz	r0, 8009666 <_svfiprintf_r+0x152>
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	eba0 000a 	sub.w	r0, r0, sl
 800965a:	fa03 f000 	lsl.w	r0, r3, r0
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	4303      	orrs	r3, r0
 8009662:	3401      	adds	r4, #1
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966a:	4826      	ldr	r0, [pc, #152]	; (8009704 <_svfiprintf_r+0x1f0>)
 800966c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009670:	2206      	movs	r2, #6
 8009672:	f7f6 fdad 	bl	80001d0 <memchr>
 8009676:	2800      	cmp	r0, #0
 8009678:	d038      	beq.n	80096ec <_svfiprintf_r+0x1d8>
 800967a:	4b23      	ldr	r3, [pc, #140]	; (8009708 <_svfiprintf_r+0x1f4>)
 800967c:	bb1b      	cbnz	r3, 80096c6 <_svfiprintf_r+0x1b2>
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	3307      	adds	r3, #7
 8009682:	f023 0307 	bic.w	r3, r3, #7
 8009686:	3308      	adds	r3, #8
 8009688:	9303      	str	r3, [sp, #12]
 800968a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968c:	4433      	add	r3, r6
 800968e:	9309      	str	r3, [sp, #36]	; 0x24
 8009690:	e767      	b.n	8009562 <_svfiprintf_r+0x4e>
 8009692:	fb0c 3202 	mla	r2, ip, r2, r3
 8009696:	460c      	mov	r4, r1
 8009698:	2001      	movs	r0, #1
 800969a:	e7a5      	b.n	80095e8 <_svfiprintf_r+0xd4>
 800969c:	2300      	movs	r3, #0
 800969e:	3401      	adds	r4, #1
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	4619      	mov	r1, r3
 80096a4:	f04f 0c0a 	mov.w	ip, #10
 80096a8:	4620      	mov	r0, r4
 80096aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ae:	3a30      	subs	r2, #48	; 0x30
 80096b0:	2a09      	cmp	r2, #9
 80096b2:	d903      	bls.n	80096bc <_svfiprintf_r+0x1a8>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0c5      	beq.n	8009644 <_svfiprintf_r+0x130>
 80096b8:	9105      	str	r1, [sp, #20]
 80096ba:	e7c3      	b.n	8009644 <_svfiprintf_r+0x130>
 80096bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c0:	4604      	mov	r4, r0
 80096c2:	2301      	movs	r3, #1
 80096c4:	e7f0      	b.n	80096a8 <_svfiprintf_r+0x194>
 80096c6:	ab03      	add	r3, sp, #12
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	462a      	mov	r2, r5
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <_svfiprintf_r+0x1f8>)
 80096ce:	a904      	add	r1, sp, #16
 80096d0:	4638      	mov	r0, r7
 80096d2:	f3af 8000 	nop.w
 80096d6:	1c42      	adds	r2, r0, #1
 80096d8:	4606      	mov	r6, r0
 80096da:	d1d6      	bne.n	800968a <_svfiprintf_r+0x176>
 80096dc:	89ab      	ldrh	r3, [r5, #12]
 80096de:	065b      	lsls	r3, r3, #25
 80096e0:	f53f af2c 	bmi.w	800953c <_svfiprintf_r+0x28>
 80096e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e6:	b01d      	add	sp, #116	; 0x74
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	462a      	mov	r2, r5
 80096f2:	4b06      	ldr	r3, [pc, #24]	; (800970c <_svfiprintf_r+0x1f8>)
 80096f4:	a904      	add	r1, sp, #16
 80096f6:	4638      	mov	r0, r7
 80096f8:	f000 f87a 	bl	80097f0 <_printf_i>
 80096fc:	e7eb      	b.n	80096d6 <_svfiprintf_r+0x1c2>
 80096fe:	bf00      	nop
 8009700:	0800a3f0 	.word	0x0800a3f0
 8009704:	0800a3fa 	.word	0x0800a3fa
 8009708:	00000000 	.word	0x00000000
 800970c:	0800945d 	.word	0x0800945d
 8009710:	0800a3f6 	.word	0x0800a3f6

08009714 <_printf_common>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	4616      	mov	r6, r2
 800971a:	4699      	mov	r9, r3
 800971c:	688a      	ldr	r2, [r1, #8]
 800971e:	690b      	ldr	r3, [r1, #16]
 8009720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009724:	4293      	cmp	r3, r2
 8009726:	bfb8      	it	lt
 8009728:	4613      	movlt	r3, r2
 800972a:	6033      	str	r3, [r6, #0]
 800972c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009730:	4607      	mov	r7, r0
 8009732:	460c      	mov	r4, r1
 8009734:	b10a      	cbz	r2, 800973a <_printf_common+0x26>
 8009736:	3301      	adds	r3, #1
 8009738:	6033      	str	r3, [r6, #0]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	0699      	lsls	r1, r3, #26
 800973e:	bf42      	ittt	mi
 8009740:	6833      	ldrmi	r3, [r6, #0]
 8009742:	3302      	addmi	r3, #2
 8009744:	6033      	strmi	r3, [r6, #0]
 8009746:	6825      	ldr	r5, [r4, #0]
 8009748:	f015 0506 	ands.w	r5, r5, #6
 800974c:	d106      	bne.n	800975c <_printf_common+0x48>
 800974e:	f104 0a19 	add.w	sl, r4, #25
 8009752:	68e3      	ldr	r3, [r4, #12]
 8009754:	6832      	ldr	r2, [r6, #0]
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	42ab      	cmp	r3, r5
 800975a:	dc26      	bgt.n	80097aa <_printf_common+0x96>
 800975c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009760:	1e13      	subs	r3, r2, #0
 8009762:	6822      	ldr	r2, [r4, #0]
 8009764:	bf18      	it	ne
 8009766:	2301      	movne	r3, #1
 8009768:	0692      	lsls	r2, r2, #26
 800976a:	d42b      	bmi.n	80097c4 <_printf_common+0xb0>
 800976c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009770:	4649      	mov	r1, r9
 8009772:	4638      	mov	r0, r7
 8009774:	47c0      	blx	r8
 8009776:	3001      	adds	r0, #1
 8009778:	d01e      	beq.n	80097b8 <_printf_common+0xa4>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	68e5      	ldr	r5, [r4, #12]
 800977e:	6832      	ldr	r2, [r6, #0]
 8009780:	f003 0306 	and.w	r3, r3, #6
 8009784:	2b04      	cmp	r3, #4
 8009786:	bf08      	it	eq
 8009788:	1aad      	subeq	r5, r5, r2
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	6922      	ldr	r2, [r4, #16]
 800978e:	bf0c      	ite	eq
 8009790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009794:	2500      	movne	r5, #0
 8009796:	4293      	cmp	r3, r2
 8009798:	bfc4      	itt	gt
 800979a:	1a9b      	subgt	r3, r3, r2
 800979c:	18ed      	addgt	r5, r5, r3
 800979e:	2600      	movs	r6, #0
 80097a0:	341a      	adds	r4, #26
 80097a2:	42b5      	cmp	r5, r6
 80097a4:	d11a      	bne.n	80097dc <_printf_common+0xc8>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e008      	b.n	80097bc <_printf_common+0xa8>
 80097aa:	2301      	movs	r3, #1
 80097ac:	4652      	mov	r2, sl
 80097ae:	4649      	mov	r1, r9
 80097b0:	4638      	mov	r0, r7
 80097b2:	47c0      	blx	r8
 80097b4:	3001      	adds	r0, #1
 80097b6:	d103      	bne.n	80097c0 <_printf_common+0xac>
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c0:	3501      	adds	r5, #1
 80097c2:	e7c6      	b.n	8009752 <_printf_common+0x3e>
 80097c4:	18e1      	adds	r1, r4, r3
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	2030      	movs	r0, #48	; 0x30
 80097ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097ce:	4422      	add	r2, r4
 80097d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097d8:	3302      	adds	r3, #2
 80097da:	e7c7      	b.n	800976c <_printf_common+0x58>
 80097dc:	2301      	movs	r3, #1
 80097de:	4622      	mov	r2, r4
 80097e0:	4649      	mov	r1, r9
 80097e2:	4638      	mov	r0, r7
 80097e4:	47c0      	blx	r8
 80097e6:	3001      	adds	r0, #1
 80097e8:	d0e6      	beq.n	80097b8 <_printf_common+0xa4>
 80097ea:	3601      	adds	r6, #1
 80097ec:	e7d9      	b.n	80097a2 <_printf_common+0x8e>
	...

080097f0 <_printf_i>:
 80097f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097f4:	460c      	mov	r4, r1
 80097f6:	4691      	mov	r9, r2
 80097f8:	7e27      	ldrb	r7, [r4, #24]
 80097fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097fc:	2f78      	cmp	r7, #120	; 0x78
 80097fe:	4680      	mov	r8, r0
 8009800:	469a      	mov	sl, r3
 8009802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009806:	d807      	bhi.n	8009818 <_printf_i+0x28>
 8009808:	2f62      	cmp	r7, #98	; 0x62
 800980a:	d80a      	bhi.n	8009822 <_printf_i+0x32>
 800980c:	2f00      	cmp	r7, #0
 800980e:	f000 80d8 	beq.w	80099c2 <_printf_i+0x1d2>
 8009812:	2f58      	cmp	r7, #88	; 0x58
 8009814:	f000 80a3 	beq.w	800995e <_printf_i+0x16e>
 8009818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800981c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009820:	e03a      	b.n	8009898 <_printf_i+0xa8>
 8009822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009826:	2b15      	cmp	r3, #21
 8009828:	d8f6      	bhi.n	8009818 <_printf_i+0x28>
 800982a:	a001      	add	r0, pc, #4	; (adr r0, 8009830 <_printf_i+0x40>)
 800982c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009830:	08009889 	.word	0x08009889
 8009834:	0800989d 	.word	0x0800989d
 8009838:	08009819 	.word	0x08009819
 800983c:	08009819 	.word	0x08009819
 8009840:	08009819 	.word	0x08009819
 8009844:	08009819 	.word	0x08009819
 8009848:	0800989d 	.word	0x0800989d
 800984c:	08009819 	.word	0x08009819
 8009850:	08009819 	.word	0x08009819
 8009854:	08009819 	.word	0x08009819
 8009858:	08009819 	.word	0x08009819
 800985c:	080099a9 	.word	0x080099a9
 8009860:	080098cd 	.word	0x080098cd
 8009864:	0800998b 	.word	0x0800998b
 8009868:	08009819 	.word	0x08009819
 800986c:	08009819 	.word	0x08009819
 8009870:	080099cb 	.word	0x080099cb
 8009874:	08009819 	.word	0x08009819
 8009878:	080098cd 	.word	0x080098cd
 800987c:	08009819 	.word	0x08009819
 8009880:	08009819 	.word	0x08009819
 8009884:	08009993 	.word	0x08009993
 8009888:	680b      	ldr	r3, [r1, #0]
 800988a:	1d1a      	adds	r2, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	600a      	str	r2, [r1, #0]
 8009890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009898:	2301      	movs	r3, #1
 800989a:	e0a3      	b.n	80099e4 <_printf_i+0x1f4>
 800989c:	6825      	ldr	r5, [r4, #0]
 800989e:	6808      	ldr	r0, [r1, #0]
 80098a0:	062e      	lsls	r6, r5, #24
 80098a2:	f100 0304 	add.w	r3, r0, #4
 80098a6:	d50a      	bpl.n	80098be <_printf_i+0xce>
 80098a8:	6805      	ldr	r5, [r0, #0]
 80098aa:	600b      	str	r3, [r1, #0]
 80098ac:	2d00      	cmp	r5, #0
 80098ae:	da03      	bge.n	80098b8 <_printf_i+0xc8>
 80098b0:	232d      	movs	r3, #45	; 0x2d
 80098b2:	426d      	negs	r5, r5
 80098b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b8:	485e      	ldr	r0, [pc, #376]	; (8009a34 <_printf_i+0x244>)
 80098ba:	230a      	movs	r3, #10
 80098bc:	e019      	b.n	80098f2 <_printf_i+0x102>
 80098be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80098c2:	6805      	ldr	r5, [r0, #0]
 80098c4:	600b      	str	r3, [r1, #0]
 80098c6:	bf18      	it	ne
 80098c8:	b22d      	sxthne	r5, r5
 80098ca:	e7ef      	b.n	80098ac <_printf_i+0xbc>
 80098cc:	680b      	ldr	r3, [r1, #0]
 80098ce:	6825      	ldr	r5, [r4, #0]
 80098d0:	1d18      	adds	r0, r3, #4
 80098d2:	6008      	str	r0, [r1, #0]
 80098d4:	0628      	lsls	r0, r5, #24
 80098d6:	d501      	bpl.n	80098dc <_printf_i+0xec>
 80098d8:	681d      	ldr	r5, [r3, #0]
 80098da:	e002      	b.n	80098e2 <_printf_i+0xf2>
 80098dc:	0669      	lsls	r1, r5, #25
 80098de:	d5fb      	bpl.n	80098d8 <_printf_i+0xe8>
 80098e0:	881d      	ldrh	r5, [r3, #0]
 80098e2:	4854      	ldr	r0, [pc, #336]	; (8009a34 <_printf_i+0x244>)
 80098e4:	2f6f      	cmp	r7, #111	; 0x6f
 80098e6:	bf0c      	ite	eq
 80098e8:	2308      	moveq	r3, #8
 80098ea:	230a      	movne	r3, #10
 80098ec:	2100      	movs	r1, #0
 80098ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098f2:	6866      	ldr	r6, [r4, #4]
 80098f4:	60a6      	str	r6, [r4, #8]
 80098f6:	2e00      	cmp	r6, #0
 80098f8:	bfa2      	ittt	ge
 80098fa:	6821      	ldrge	r1, [r4, #0]
 80098fc:	f021 0104 	bicge.w	r1, r1, #4
 8009900:	6021      	strge	r1, [r4, #0]
 8009902:	b90d      	cbnz	r5, 8009908 <_printf_i+0x118>
 8009904:	2e00      	cmp	r6, #0
 8009906:	d04d      	beq.n	80099a4 <_printf_i+0x1b4>
 8009908:	4616      	mov	r6, r2
 800990a:	fbb5 f1f3 	udiv	r1, r5, r3
 800990e:	fb03 5711 	mls	r7, r3, r1, r5
 8009912:	5dc7      	ldrb	r7, [r0, r7]
 8009914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009918:	462f      	mov	r7, r5
 800991a:	42bb      	cmp	r3, r7
 800991c:	460d      	mov	r5, r1
 800991e:	d9f4      	bls.n	800990a <_printf_i+0x11a>
 8009920:	2b08      	cmp	r3, #8
 8009922:	d10b      	bne.n	800993c <_printf_i+0x14c>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	07df      	lsls	r7, r3, #31
 8009928:	d508      	bpl.n	800993c <_printf_i+0x14c>
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6861      	ldr	r1, [r4, #4]
 800992e:	4299      	cmp	r1, r3
 8009930:	bfde      	ittt	le
 8009932:	2330      	movle	r3, #48	; 0x30
 8009934:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800993c:	1b92      	subs	r2, r2, r6
 800993e:	6122      	str	r2, [r4, #16]
 8009940:	f8cd a000 	str.w	sl, [sp]
 8009944:	464b      	mov	r3, r9
 8009946:	aa03      	add	r2, sp, #12
 8009948:	4621      	mov	r1, r4
 800994a:	4640      	mov	r0, r8
 800994c:	f7ff fee2 	bl	8009714 <_printf_common>
 8009950:	3001      	adds	r0, #1
 8009952:	d14c      	bne.n	80099ee <_printf_i+0x1fe>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	b004      	add	sp, #16
 800995a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995e:	4835      	ldr	r0, [pc, #212]	; (8009a34 <_printf_i+0x244>)
 8009960:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	680e      	ldr	r6, [r1, #0]
 8009968:	061f      	lsls	r7, r3, #24
 800996a:	f856 5b04 	ldr.w	r5, [r6], #4
 800996e:	600e      	str	r6, [r1, #0]
 8009970:	d514      	bpl.n	800999c <_printf_i+0x1ac>
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	bf44      	itt	mi
 8009976:	f043 0320 	orrmi.w	r3, r3, #32
 800997a:	6023      	strmi	r3, [r4, #0]
 800997c:	b91d      	cbnz	r5, 8009986 <_printf_i+0x196>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f023 0320 	bic.w	r3, r3, #32
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	2310      	movs	r3, #16
 8009988:	e7b0      	b.n	80098ec <_printf_i+0xfc>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	f043 0320 	orr.w	r3, r3, #32
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	2378      	movs	r3, #120	; 0x78
 8009994:	4828      	ldr	r0, [pc, #160]	; (8009a38 <_printf_i+0x248>)
 8009996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800999a:	e7e3      	b.n	8009964 <_printf_i+0x174>
 800999c:	065e      	lsls	r6, r3, #25
 800999e:	bf48      	it	mi
 80099a0:	b2ad      	uxthmi	r5, r5
 80099a2:	e7e6      	b.n	8009972 <_printf_i+0x182>
 80099a4:	4616      	mov	r6, r2
 80099a6:	e7bb      	b.n	8009920 <_printf_i+0x130>
 80099a8:	680b      	ldr	r3, [r1, #0]
 80099aa:	6826      	ldr	r6, [r4, #0]
 80099ac:	6960      	ldr	r0, [r4, #20]
 80099ae:	1d1d      	adds	r5, r3, #4
 80099b0:	600d      	str	r5, [r1, #0]
 80099b2:	0635      	lsls	r5, r6, #24
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	d501      	bpl.n	80099bc <_printf_i+0x1cc>
 80099b8:	6018      	str	r0, [r3, #0]
 80099ba:	e002      	b.n	80099c2 <_printf_i+0x1d2>
 80099bc:	0671      	lsls	r1, r6, #25
 80099be:	d5fb      	bpl.n	80099b8 <_printf_i+0x1c8>
 80099c0:	8018      	strh	r0, [r3, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	6123      	str	r3, [r4, #16]
 80099c6:	4616      	mov	r6, r2
 80099c8:	e7ba      	b.n	8009940 <_printf_i+0x150>
 80099ca:	680b      	ldr	r3, [r1, #0]
 80099cc:	1d1a      	adds	r2, r3, #4
 80099ce:	600a      	str	r2, [r1, #0]
 80099d0:	681e      	ldr	r6, [r3, #0]
 80099d2:	6862      	ldr	r2, [r4, #4]
 80099d4:	2100      	movs	r1, #0
 80099d6:	4630      	mov	r0, r6
 80099d8:	f7f6 fbfa 	bl	80001d0 <memchr>
 80099dc:	b108      	cbz	r0, 80099e2 <_printf_i+0x1f2>
 80099de:	1b80      	subs	r0, r0, r6
 80099e0:	6060      	str	r0, [r4, #4]
 80099e2:	6863      	ldr	r3, [r4, #4]
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	2300      	movs	r3, #0
 80099e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ec:	e7a8      	b.n	8009940 <_printf_i+0x150>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	4632      	mov	r2, r6
 80099f2:	4649      	mov	r1, r9
 80099f4:	4640      	mov	r0, r8
 80099f6:	47d0      	blx	sl
 80099f8:	3001      	adds	r0, #1
 80099fa:	d0ab      	beq.n	8009954 <_printf_i+0x164>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	079b      	lsls	r3, r3, #30
 8009a00:	d413      	bmi.n	8009a2a <_printf_i+0x23a>
 8009a02:	68e0      	ldr	r0, [r4, #12]
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	4298      	cmp	r0, r3
 8009a08:	bfb8      	it	lt
 8009a0a:	4618      	movlt	r0, r3
 8009a0c:	e7a4      	b.n	8009958 <_printf_i+0x168>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4632      	mov	r2, r6
 8009a12:	4649      	mov	r1, r9
 8009a14:	4640      	mov	r0, r8
 8009a16:	47d0      	blx	sl
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d09b      	beq.n	8009954 <_printf_i+0x164>
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	68e3      	ldr	r3, [r4, #12]
 8009a20:	9903      	ldr	r1, [sp, #12]
 8009a22:	1a5b      	subs	r3, r3, r1
 8009a24:	42ab      	cmp	r3, r5
 8009a26:	dcf2      	bgt.n	8009a0e <_printf_i+0x21e>
 8009a28:	e7eb      	b.n	8009a02 <_printf_i+0x212>
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	f104 0619 	add.w	r6, r4, #25
 8009a30:	e7f5      	b.n	8009a1e <_printf_i+0x22e>
 8009a32:	bf00      	nop
 8009a34:	0800a401 	.word	0x0800a401
 8009a38:	0800a412 	.word	0x0800a412

08009a3c <memmove>:
 8009a3c:	4288      	cmp	r0, r1
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	eb01 0402 	add.w	r4, r1, r2
 8009a44:	d902      	bls.n	8009a4c <memmove+0x10>
 8009a46:	4284      	cmp	r4, r0
 8009a48:	4623      	mov	r3, r4
 8009a4a:	d807      	bhi.n	8009a5c <memmove+0x20>
 8009a4c:	1e43      	subs	r3, r0, #1
 8009a4e:	42a1      	cmp	r1, r4
 8009a50:	d008      	beq.n	8009a64 <memmove+0x28>
 8009a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a5a:	e7f8      	b.n	8009a4e <memmove+0x12>
 8009a5c:	4402      	add	r2, r0
 8009a5e:	4601      	mov	r1, r0
 8009a60:	428a      	cmp	r2, r1
 8009a62:	d100      	bne.n	8009a66 <memmove+0x2a>
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a6e:	e7f7      	b.n	8009a60 <memmove+0x24>

08009a70 <_free_r>:
 8009a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d048      	beq.n	8009b08 <_free_r+0x98>
 8009a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7a:	9001      	str	r0, [sp, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a82:	bfb8      	it	lt
 8009a84:	18e4      	addlt	r4, r4, r3
 8009a86:	f000 f8d3 	bl	8009c30 <__malloc_lock>
 8009a8a:	4a20      	ldr	r2, [pc, #128]	; (8009b0c <_free_r+0x9c>)
 8009a8c:	9801      	ldr	r0, [sp, #4]
 8009a8e:	6813      	ldr	r3, [r2, #0]
 8009a90:	4615      	mov	r5, r2
 8009a92:	b933      	cbnz	r3, 8009aa2 <_free_r+0x32>
 8009a94:	6063      	str	r3, [r4, #4]
 8009a96:	6014      	str	r4, [r2, #0]
 8009a98:	b003      	add	sp, #12
 8009a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a9e:	f000 b8cd 	b.w	8009c3c <__malloc_unlock>
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	d90b      	bls.n	8009abe <_free_r+0x4e>
 8009aa6:	6821      	ldr	r1, [r4, #0]
 8009aa8:	1862      	adds	r2, r4, r1
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bf04      	itt	eq
 8009aae:	681a      	ldreq	r2, [r3, #0]
 8009ab0:	685b      	ldreq	r3, [r3, #4]
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	bf04      	itt	eq
 8009ab6:	1852      	addeq	r2, r2, r1
 8009ab8:	6022      	streq	r2, [r4, #0]
 8009aba:	602c      	str	r4, [r5, #0]
 8009abc:	e7ec      	b.n	8009a98 <_free_r+0x28>
 8009abe:	461a      	mov	r2, r3
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	b10b      	cbz	r3, 8009ac8 <_free_r+0x58>
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	d9fa      	bls.n	8009abe <_free_r+0x4e>
 8009ac8:	6811      	ldr	r1, [r2, #0]
 8009aca:	1855      	adds	r5, r2, r1
 8009acc:	42a5      	cmp	r5, r4
 8009ace:	d10b      	bne.n	8009ae8 <_free_r+0x78>
 8009ad0:	6824      	ldr	r4, [r4, #0]
 8009ad2:	4421      	add	r1, r4
 8009ad4:	1854      	adds	r4, r2, r1
 8009ad6:	42a3      	cmp	r3, r4
 8009ad8:	6011      	str	r1, [r2, #0]
 8009ada:	d1dd      	bne.n	8009a98 <_free_r+0x28>
 8009adc:	681c      	ldr	r4, [r3, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	6053      	str	r3, [r2, #4]
 8009ae2:	4421      	add	r1, r4
 8009ae4:	6011      	str	r1, [r2, #0]
 8009ae6:	e7d7      	b.n	8009a98 <_free_r+0x28>
 8009ae8:	d902      	bls.n	8009af0 <_free_r+0x80>
 8009aea:	230c      	movs	r3, #12
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	e7d3      	b.n	8009a98 <_free_r+0x28>
 8009af0:	6825      	ldr	r5, [r4, #0]
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	428b      	cmp	r3, r1
 8009af6:	bf04      	itt	eq
 8009af8:	6819      	ldreq	r1, [r3, #0]
 8009afa:	685b      	ldreq	r3, [r3, #4]
 8009afc:	6063      	str	r3, [r4, #4]
 8009afe:	bf04      	itt	eq
 8009b00:	1949      	addeq	r1, r1, r5
 8009b02:	6021      	streq	r1, [r4, #0]
 8009b04:	6054      	str	r4, [r2, #4]
 8009b06:	e7c7      	b.n	8009a98 <_free_r+0x28>
 8009b08:	b003      	add	sp, #12
 8009b0a:	bd30      	pop	{r4, r5, pc}
 8009b0c:	20000300 	.word	0x20000300

08009b10 <_malloc_r>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	1ccd      	adds	r5, r1, #3
 8009b14:	f025 0503 	bic.w	r5, r5, #3
 8009b18:	3508      	adds	r5, #8
 8009b1a:	2d0c      	cmp	r5, #12
 8009b1c:	bf38      	it	cc
 8009b1e:	250c      	movcc	r5, #12
 8009b20:	2d00      	cmp	r5, #0
 8009b22:	4606      	mov	r6, r0
 8009b24:	db01      	blt.n	8009b2a <_malloc_r+0x1a>
 8009b26:	42a9      	cmp	r1, r5
 8009b28:	d903      	bls.n	8009b32 <_malloc_r+0x22>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	2000      	movs	r0, #0
 8009b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b32:	f000 f87d 	bl	8009c30 <__malloc_lock>
 8009b36:	4921      	ldr	r1, [pc, #132]	; (8009bbc <_malloc_r+0xac>)
 8009b38:	680a      	ldr	r2, [r1, #0]
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	b99c      	cbnz	r4, 8009b66 <_malloc_r+0x56>
 8009b3e:	4f20      	ldr	r7, [pc, #128]	; (8009bc0 <_malloc_r+0xb0>)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	b923      	cbnz	r3, 8009b4e <_malloc_r+0x3e>
 8009b44:	4621      	mov	r1, r4
 8009b46:	4630      	mov	r0, r6
 8009b48:	f000 f862 	bl	8009c10 <_sbrk_r>
 8009b4c:	6038      	str	r0, [r7, #0]
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 f85d 	bl	8009c10 <_sbrk_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d123      	bne.n	8009ba2 <_malloc_r+0x92>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6033      	str	r3, [r6, #0]
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 f86c 	bl	8009c3c <__malloc_unlock>
 8009b64:	e7e3      	b.n	8009b2e <_malloc_r+0x1e>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	1b5b      	subs	r3, r3, r5
 8009b6a:	d417      	bmi.n	8009b9c <_malloc_r+0x8c>
 8009b6c:	2b0b      	cmp	r3, #11
 8009b6e:	d903      	bls.n	8009b78 <_malloc_r+0x68>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	441c      	add	r4, r3
 8009b74:	6025      	str	r5, [r4, #0]
 8009b76:	e004      	b.n	8009b82 <_malloc_r+0x72>
 8009b78:	6863      	ldr	r3, [r4, #4]
 8009b7a:	42a2      	cmp	r2, r4
 8009b7c:	bf0c      	ite	eq
 8009b7e:	600b      	streq	r3, [r1, #0]
 8009b80:	6053      	strne	r3, [r2, #4]
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f85a 	bl	8009c3c <__malloc_unlock>
 8009b88:	f104 000b 	add.w	r0, r4, #11
 8009b8c:	1d23      	adds	r3, r4, #4
 8009b8e:	f020 0007 	bic.w	r0, r0, #7
 8009b92:	1ac2      	subs	r2, r0, r3
 8009b94:	d0cc      	beq.n	8009b30 <_malloc_r+0x20>
 8009b96:	1a1b      	subs	r3, r3, r0
 8009b98:	50a3      	str	r3, [r4, r2]
 8009b9a:	e7c9      	b.n	8009b30 <_malloc_r+0x20>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	6864      	ldr	r4, [r4, #4]
 8009ba0:	e7cc      	b.n	8009b3c <_malloc_r+0x2c>
 8009ba2:	1cc4      	adds	r4, r0, #3
 8009ba4:	f024 0403 	bic.w	r4, r4, #3
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d0e3      	beq.n	8009b74 <_malloc_r+0x64>
 8009bac:	1a21      	subs	r1, r4, r0
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f000 f82e 	bl	8009c10 <_sbrk_r>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d1dd      	bne.n	8009b74 <_malloc_r+0x64>
 8009bb8:	e7cf      	b.n	8009b5a <_malloc_r+0x4a>
 8009bba:	bf00      	nop
 8009bbc:	20000300 	.word	0x20000300
 8009bc0:	20000304 	.word	0x20000304

08009bc4 <_realloc_r>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	4614      	mov	r4, r2
 8009bca:	460e      	mov	r6, r1
 8009bcc:	b921      	cbnz	r1, 8009bd8 <_realloc_r+0x14>
 8009bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	f7ff bf9c 	b.w	8009b10 <_malloc_r>
 8009bd8:	b922      	cbnz	r2, 8009be4 <_realloc_r+0x20>
 8009bda:	f7ff ff49 	bl	8009a70 <_free_r>
 8009bde:	4625      	mov	r5, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be4:	f000 f830 	bl	8009c48 <_malloc_usable_size_r>
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d20f      	bcs.n	8009c0c <_realloc_r+0x48>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff ff8e 	bl	8009b10 <_malloc_r>
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0f2      	beq.n	8009be0 <_realloc_r+0x1c>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	f7ff fbe3 	bl	80093c8 <memcpy>
 8009c02:	4631      	mov	r1, r6
 8009c04:	4638      	mov	r0, r7
 8009c06:	f7ff ff33 	bl	8009a70 <_free_r>
 8009c0a:	e7e9      	b.n	8009be0 <_realloc_r+0x1c>
 8009c0c:	4635      	mov	r5, r6
 8009c0e:	e7e7      	b.n	8009be0 <_realloc_r+0x1c>

08009c10 <_sbrk_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	; (8009c2c <_sbrk_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f7 fea0 	bl	8001960 <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_sbrk_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_sbrk_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200005e4 	.word	0x200005e4

08009c30 <__malloc_lock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__malloc_lock+0x8>)
 8009c32:	f000 b811 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	200005ec 	.word	0x200005ec

08009c3c <__malloc_unlock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_unlock+0x8>)
 8009c3e:	f000 b80c 	b.w	8009c5a <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	200005ec 	.word	0x200005ec

08009c48 <_malloc_usable_size_r>:
 8009c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c4c:	1f18      	subs	r0, r3, #4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bfbc      	itt	lt
 8009c52:	580b      	ldrlt	r3, [r1, r0]
 8009c54:	18c0      	addlt	r0, r0, r3
 8009c56:	4770      	bx	lr

08009c58 <__retarget_lock_acquire_recursive>:
 8009c58:	4770      	bx	lr

08009c5a <__retarget_lock_release_recursive>:
 8009c5a:	4770      	bx	lr

08009c5c <_init>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr

08009c68 <_fini>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr
