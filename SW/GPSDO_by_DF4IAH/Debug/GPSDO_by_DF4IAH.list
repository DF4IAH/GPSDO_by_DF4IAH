
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f4  080088f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088fc  080088fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000070  08008974  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08008974  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206a6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cfe  00000000  00000000  00040746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00045d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025343  00000000  00000000  00047478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebbd  00000000  00000000  0006c7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a77  00000000  00000000  0008b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170def  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c9c  00000000  00000000  00170e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081cc 	.word	0x080081cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081cc 	.word	0x080081cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <MX_ADC1_Init+0xc0>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xbc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_ADC1_Init+0xbc>)
 80005e0:	f002 fc32 	bl	8002e48 <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ea:	f000 fb03 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0xc4>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f2:	2306      	movs	r3, #6
 80005f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fa:	237f      	movs	r3, #127	; 0x7f
 80005fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fe:	2304      	movs	r3, #4
 8000600:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xbc>)
 800060c:	f002 fd64 	bl	80030d8 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000616:	f000 faed 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200002ec 	.word	0x200002ec
 8000628:	50040000 	.word	0x50040000
 800062c:	43210000 	.word	0x43210000

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a0      	sub	sp, #128	; 0x80
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f007 f97f 	bl	8007954 <memset>
  if(adcHandle->Instance==ADC1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_ADC_MspInit+0xf0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d15b      	bne.n	8000718 <HAL_ADC_MspInit+0xe8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000664:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000680:	2308      	movs	r3, #8
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fcd4 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800069a:	f000 faab 	bl	8000bf4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0xf4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 80006e6:	2330      	movs	r3, #48	; 0x30
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ea:	230b      	movs	r3, #11
 80006ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f003 fa60 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8000700:	2302      	movs	r3, #2
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000704:	230b      	movs	r3, #11
 8000706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0xf8>)
 8000714:	f003 fa54 	bl	8003bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3780      	adds	r7, #128	; 0x80
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	50040000 	.word	0x50040000
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b4e      	ldr	r3, [pc, #312]	; (800087c <MX_GPIO_Init+0x150>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a4d      	ldr	r2, [pc, #308]	; (800087c <MX_GPIO_Init+0x150>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <MX_GPIO_Init+0x150>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b48      	ldr	r3, [pc, #288]	; (800087c <MX_GPIO_Init+0x150>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a47      	ldr	r2, [pc, #284]	; (800087c <MX_GPIO_Init+0x150>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <MX_GPIO_Init+0x150>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x150>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a41      	ldr	r2, [pc, #260]	; (800087c <MX_GPIO_Init+0x150>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MX_GPIO_Init+0x150>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_GPIO_Init+0x150>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a3b      	ldr	r2, [pc, #236]	; (800087c <MX_GPIO_Init+0x150>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_GPIO_Init+0x150>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f003 fc3c 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4832      	ldr	r0, [pc, #200]	; (8000880 <MX_GPIO_Init+0x154>)
 80007b6:	f003 fc37 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f003 f9f6 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0x158>)
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4826      	ldr	r0, [pc, #152]	; (8000880 <MX_GPIO_Init+0x154>)
 80007e8:	f003 f9ea 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 80007ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f003 f9dc 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f003 f9cc 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_GPIO_Init+0x154>)
 8000840:	f003 f9be 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <MX_GPIO_Init+0x154>)
 8000858:	f003 f9b2 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_GPIO_Init+0x15c>)
 8000870:	f003 f9a6 	bl	8003bc0 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400
 8000884:	10110000 	.word	0x10110000
 8000888:	48001c00 	.word	0x48001c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C1_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C1_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c8:	f003 fbc6 	bl	8004058 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f98f 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C1_Init+0x74>)
 80008da:	f003 fc4c 	bl	8004176 <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f986 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ec:	f003 fc8e 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f97d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000350 	.word	0x20000350
 8000904:	40005400 	.word	0x40005400
 8000908:	00303d5b 	.word	0x00303d5b

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09e      	sub	sp, #120	; 0x78
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f007 f811 	bl	8007954 <memset>
  if(i2cHandle->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <HAL_I2C_MspInit+0xc8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d146      	bne.n	80009ca <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4618      	mov	r0, r3
 800094c:	f004 fb76 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f000 f94d 	bl	8000bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2302      	movs	r3, #2
 8000980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D5_I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <HAL_I2C_MspInit+0xd0>)
 800098e:	f003 f917 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_I2C1_SDA_Pin;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D4_I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <HAL_I2C_MspInit+0xd0>)
 80009ae:	f003 f907 	bl	8003bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_I2C_MspInit+0xcc>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3778      	adds	r7, #120	; 0x78
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b098      	sub	sp, #96	; 0x60
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f002 f846 	bl	8002a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f891 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f7ff fe9d 	bl	800072c <MX_GPIO_Init>
  MX_RTC_Init();
 80009f2:	f000 f905 	bl	8000c00 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80009f6:	f000 fc1d 	bl	8001234 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009fa:	f000 fc4b 	bl	8001294 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009fe:	f7ff fdb3 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a02:	f7ff ff43 	bl	800088c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a06:	f000 f953 	bl	8000cb0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a0a:	f000 faf3 	bl	8000ff4 <MX_TIM2_Init>
  while (!enableMe) {
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4835      	ldr	r0, [pc, #212]	; (8000ae8 <main+0x108>)
 8000a14:	f003 fb08 	bl	8004028 <HAL_GPIO_WritePin>

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 8000a18:	4a34      	ldr	r2, [pc, #208]	; (8000aec <main+0x10c>)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	2255      	movs	r2, #85	; 0x55
 8000a20:	4618      	mov	r0, r3
 8000a22:	f006 ff89 	bl	8007938 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a26:	1d39      	adds	r1, r7, #4
 8000a28:	2319      	movs	r3, #25
 8000a2a:	2254      	movs	r2, #84	; 0x54
 8000a2c:	4830      	ldr	r0, [pc, #192]	; (8000af0 <main+0x110>)
 8000a2e:	f005 fd02 	bl	8006436 <HAL_UART_Transmit>

  /* Wait for the µ-blox to come up */
  //HAL_Delay(2000);

  /* Turn off many of the NMEA messages */
  ubloxMsgsTurnOff();
 8000a32:	f001 f8d9 	bl	8001be8 <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8000a36:	f000 fdb5 	bl	80015a4 <ubloxUartSpeedFast>
  enableMe = 0;
  while (!enableMe) {
  }
#endif

  if (ubloxSetFrequency(F_COMP_HZ)) {
 8000a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3e:	f000 ff37 	bl	80018b0 <ubloxSetFrequency>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d016      	beq.n	8000a76 <main+0x96>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <main+0x114>)
 8000a4a:	1d3c      	adds	r4, r7, #4
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a5e:	c407      	stmia	r4!, {r0, r1, r2}
 8000a60:	8023      	strh	r3, [r4, #0]
 8000a62:	3402      	adds	r4, #2
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a68:	1d39      	adds	r1, r7, #4
 8000a6a:	2319      	movs	r3, #25
 8000a6c:	223e      	movs	r2, #62	; 0x3e
 8000a6e:	4820      	ldr	r0, [pc, #128]	; (8000af0 <main+0x110>)
 8000a70:	f005 fce1 	bl	8006436 <HAL_UART_Transmit>
 8000a74:	e011      	b.n	8000a9a <main+0xba>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <main+0x118>)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	2252      	movs	r2, #82	; 0x52
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 ff5a 	bl	8007938 <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	2319      	movs	r3, #25
 8000a88:	2251      	movs	r2, #81	; 0x51
 8000a8a:	4819      	ldr	r0, [pc, #100]	; (8000af0 <main+0x110>)
 8000a8c:	f005 fcd3 	bl	8006436 <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <main+0x108>)
 8000a96:	f003 fac7 	bl	8004028 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t now = HAL_GetTick();
 8000a9a:	f002 f819 	bl	8002ad0 <HAL_GetTick>
 8000a9e:	65f8      	str	r0, [r7, #92]	; 0x5c
	  uint8_t  sel = (uint8_t) ((now / 1000) % 3);
 8000aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <main+0x11c>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	0999      	lsrs	r1, r3, #6
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <main+0x120>)
 8000aac:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab0:	085a      	lsrs	r2, r3, #1
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	1aca      	subs	r2, r1, r3
 8000aba:	4613      	mov	r3, r2
 8000abc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	  /* Blocks until new frame comes in */
	  switch (sel) {
 8000ac0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <main+0xf4>
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d007      	beq.n	8000adc <main+0xfc>
	  case 0:
	  default:
		  ublox_NavClock_get(&ubloxNavClock);
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <main+0x124>)
 8000ace:	f001 fb5f 	bl	8002190 <ublox_NavClock_get>
		  break;
 8000ad2:	e007      	b.n	8000ae4 <main+0x104>

	  case 1:
		  ublox_NavDop_get(&ubloxNavDop);
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <main+0x128>)
 8000ad6:	f001 f8ad 	bl	8001c34 <ublox_NavDop_get>
		  break;
 8000ada:	e003      	b.n	8000ae4 <main+0x104>

	  case 2:
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <main+0x12c>)
 8000ade:	f001 fccd 	bl	800247c <ublox_NavSvinfo_get>
		  break;
 8000ae2:	bf00      	nop
  {
 8000ae4:	e7d9      	b.n	8000a9a <main+0xba>
 8000ae6:	bf00      	nop
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	080081e4 	.word	0x080081e4
 8000af0:	20000540 	.word	0x20000540
 8000af4:	0800823c 	.word	0x0800823c
 8000af8:	0800827c 	.word	0x0800827c
 8000afc:	10624dd3 	.word	0x10624dd3
 8000b00:	aaaaaaab 	.word	0xaaaaaaab
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	2000008c 	.word	0x2000008c
 8000b0c:	200000b4 	.word	0x200000b4

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b096      	sub	sp, #88	; 0x58
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2244      	movs	r2, #68	; 0x44
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f006 ff18 	bl	8007954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b36:	f003 fbd3 	bl	80042e0 <HAL_PWREx_ControlVoltageScaling>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b40:	f000 f858 	bl	8000bf4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b44:	f003 fbae 	bl	80042a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xbc>)
 8000b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <SystemClock_Config+0xbc>)
 8000b50:	f023 0318 	bic.w	r3, r3, #24
 8000b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b58:	2306      	movs	r3, #6
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b66:	2310      	movs	r3, #16
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000b76:	230f      	movs	r3, #15
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000b82:	2304      	movs	r3, #4
 8000b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fbfe 	bl	800438c <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b96:	f000 f82d 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 f80a 	bl	8004bcc <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bbe:	f000 f819 	bl	8000bf4 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3758      	adds	r7, #88	; 0x58
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f001 ff61 	bl	8002aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <MX_RTC_Init+0x4c>)
 8000c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c12:	227f      	movs	r2, #127	; 0x7f
 8000c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c36:	f004 fce7 	bl	8005608 <HAL_RTC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c40:	f7ff ffd8 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000039c 	.word	0x2000039c
 8000c4c:	40002800 	.word	0x40002800

08000c50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b098      	sub	sp, #96	; 0x60
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2254      	movs	r2, #84	; 0x54
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f006 fe77 	bl	8007954 <memset>
  if(rtcHandle->Instance==RTC)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_RTC_MspInit+0x58>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d117      	bne.n	8000ca0 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 f9db 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c8c:	f7ff ffb2 	bl	8000bf4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_RTC_MspInit+0x5c>)
 8000c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <HAL_RTC_MspInit+0x5c>)
 8000c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3760      	adds	r7, #96	; 0x60
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40002800 	.word	0x40002800
 8000cac:	40021000 	.word	0x40021000

08000cb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_SPI1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d10:	f004 fd8c 	bl	800582c <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f7ff ff6b 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200003c0 	.word	0x200003c0
 8000d28:	40013000 	.word	0x40013000

08000d2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_SPI_MspInit+0x7c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d128      	bne.n	8000da0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d58:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_SPI_MspInit+0x80>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8000d7e:	23c2      	movs	r3, #194	; 0xc2
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f002 ff10 	bl	8003bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2019      	movs	r0, #25
 8000e0e:	f002 fe1f 	bl	8003a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e12:	2019      	movs	r0, #25
 8000e14:	f002 fe38 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_InitTick+0x9c>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_InitTick+0x9c>)
 8000e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e22:	6613      	str	r3, [r2, #96]	; 0x60
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_InitTick+0x9c>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 0210 	add.w	r2, r7, #16
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 f86c 	bl	8004f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e40:	f004 f854 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8000e44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_InitTick+0xa0>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3b01      	subs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_InitTick+0xa8>)
 8000e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e76:	f004 fd7c 	bl	8005972 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_InitTick+0xa4>)
 8000e82:	f004 fdd7 	bl	8005a34 <HAL_TIM_Base_Start_IT>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	20000424 	.word	0x20000424
 8000ea0:	40012c00 	.word	0x40012c00

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f02:	f004 fe42 	bl	8005b8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000424 	.word	0x20000424

08000f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART1_IRQHandler+0x10>)
 8000f16:	f005 fc9b 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200004bc 	.word	0x200004bc

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f006 fcc6 	bl	80078e4 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000c000 	.word	0x2000c000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	200001dc 	.word	0x200001dc
 8000f8c:	200005d8 	.word	0x200005d8

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <SystemInit+0x5c>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <SystemInit+0x5c>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <SystemInit+0x60>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <SystemInit+0x60>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <SystemInit+0x60>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <SystemInit+0x60>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <SystemInit+0x60>)
 8000fbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <SystemInit+0x60>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SystemInit+0x60>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <SystemInit+0x60>)
 8000fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SystemInit+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_TIM2_Init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800103a:	481c      	ldr	r0, [pc, #112]	; (80010ac <MX_TIM2_Init+0xb8>)
 800103c:	f004 fd4e 	bl	8005adc <HAL_TIM_IC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001046:	f7ff fdd5 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_TIM2_Init+0xb8>)
 800105a:	f005 f8e1 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001064:	f7ff fdc6 	bl	8000bf4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2204      	movs	r2, #4
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001080:	f004 fea2 	bl	8005dc8 <HAL_TIM_IC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800108a:	f7ff fdb3 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_TIM2_Init+0xb8>)
 8001096:	f004 fe97 	bl	8005dc8 <HAL_TIM_IC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80010a0:	f7ff fda8 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000470 	.word	0x20000470

080010b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d0:	d144      	bne.n	800115c <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_IC_MspInit+0xb4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 800111a:	2308      	movs	r3, #8
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f002 fd42 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 800113c:	2308      	movs	r3, #8
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <HAL_TIM_IC_MspInit+0xb8>)
 8001158:	f002 fd32 	bl	8003bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_UART_TxCpltCallback+0x1c>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200002e0 	.word	0x200002e0

0800118c <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_UART_RxCpltCallback+0x1c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200002e1 	.word	0x200002e1

080011ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ba:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_ErrorCallback+0x7c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d127      	bne.n	8001214 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_ErrorCallback+0x80>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 80011d4:	e024      	b.n	8001220 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f003 0301 	and.w	r3, r3, #1
		else if (
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d104      	bne.n	80011f4 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_UART_ErrorCallback+0x80>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	e011      	b.n	8001220 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_UART_ErrorCallback+0x80>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
}
 800120c:	e008      	b.n	8001220 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 800120e:	f7ff fcf1 	bl	8000bf4 <Error_Handler>
}
 8001212:	e005      	b.n	8001220 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_UART_ErrorCallback+0x84>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 800121c:	f7ff fcea 	bl	8000bf4 <Error_Handler>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200004bc 	.word	0x200004bc
 800122c:	200002e1 	.word	0x200002e1
 8001230:	20000540 	.word	0x20000540

08001234 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART1_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART1_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001240:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001278:	f005 f856 	bl	8006328 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001282:	f7ff fcb7 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004bc 	.word	0x200004bc
 8001290:	40013800 	.word	0x40013800

08001294 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USART2_UART_Init+0x58>)
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <MX_USART2_UART_Init+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART2_UART_Init+0x58>)
 80012d8:	f005 f826 	bl	8006328 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f7ff fc87 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000540 	.word	0x20000540
 80012f0:	40004400 	.word	0x40004400

080012f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0a0      	sub	sp, #128	; 0x80
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	2254      	movs	r2, #84	; 0x54
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fb1d 	bl	8007954 <memset>
  if(uartHandle->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_UART_MspInit+0x17c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d152      	bne.n	80013ca <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001328:	2302      	movs	r3, #2
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fe83 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff fc5a 	bl	8000bf4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001340:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <HAL_UART_MspInit+0x180>)
 8001342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_UART_MspInit+0x180>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134a:	6613      	str	r3, [r2, #96]	; 0x60
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_UART_MspInit+0x180>)
 800134e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_UART_MspInit+0x180>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a45      	ldr	r2, [pc, #276]	; (8001474 <HAL_UART_MspInit+0x180>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_UART_MspInit+0x180>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8001370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001382:	2307      	movs	r3, #7
 8001384:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 fc16 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D4_UBLOX_USART1_RX_Pin;
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a6:	2307      	movs	r3, #7
 80013a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D4_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f002 fc04 	bl	8003bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2025      	movs	r0, #37	; 0x25
 80013be:	f002 fb47 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013c2:	2025      	movs	r0, #37	; 0x25
 80013c4:	f002 fb60 	bl	8003a88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013c8:	e04d      	b.n	8001466 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2a      	ldr	r2, [pc, #168]	; (8001478 <HAL_UART_MspInit+0x184>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d148      	bne.n	8001466 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80013d8:	2308      	movs	r3, #8
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fe2b 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80013ec:	f7ff fc02 	bl	8000bf4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_UART_MspInit+0x180>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_UART_MspInit+0x180>)
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	6593      	str	r3, [r2, #88]	; 0x58
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_UART_MspInit+0x180>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_UART_MspInit+0x180>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x180>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x180>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8001420:	2304      	movs	r3, #4
 8001422:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800142c:	2301      	movs	r3, #1
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001430:	2307      	movs	r3, #7
 8001432:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f002 fbbf 	bl	8003bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8001442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001446:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001450:	2301      	movs	r3, #1
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001454:	2303      	movs	r3, #3
 8001456:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f002 fbad 	bl	8003bc0 <HAL_GPIO_Init>
}
 8001466:	bf00      	nop
 8001468:	3780      	adds	r7, #128	; 0x80
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40013800 	.word	0x40013800
 8001474:	40021000 	.word	0x40021000
 8001478:	40004400 	.word	0x40004400

0800147c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_UART_MspDeInit+0x5c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10f      	bne.n	80014ae <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_UART_MspDeInit+0x60>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_UART_MspDeInit+0x60>)
 8001494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001498:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D4_UBLOX_USART1_RX_Pin);
 800149a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f002 fcf7 	bl	8003e94 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80014a6:	2025      	movs	r0, #37	; 0x25
 80014a8:	f002 fafc 	bl	8003aa4 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80014ac:	e010      	b.n	80014d0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_UART_MspDeInit+0x64>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d10b      	bne.n	80014d0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_UART_MspDeInit+0x60>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_UART_MspDeInit+0x60>)
 80014be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014c2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80014c4:	f248 0104 	movw	r1, #32772	; 0x8004
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f002 fce2 	bl	8003e94 <HAL_GPIO_DeInit>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_USART1_UART_Init_38400baud>:

/* USER CODE BEGIN 1 */
void MX_USART1_UART_Init_38400baud(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <MX_USART1_UART_Init_38400baud+0x5c>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 80014f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART1_UART_Init_38400baud+0x58>)
 8001528:	f004 fefe 	bl	8006328 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8001532:	f7ff fb5f 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200004bc 	.word	0x200004bc
 8001540:	40013800 	.word	0x40013800

08001544 <calcChecksumRFC1145>:



void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3302      	adds	r3, #2
 800155c:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	3b04      	subs	r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	e00d      	b.n	8001582 <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	4413      	add	r3, r2
 8001572:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8001574:	7bba      	ldrb	r2, [r7, #14]
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4413      	add	r3, r2
 800157a:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3b01      	subs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7bba      	ldrb	r2, [r7, #14]
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b0ae      	sub	sp, #184	; 0xb8
 80015a8:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 80015aa:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80015ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 80015b2:	4ab5      	ldr	r2, [pc, #724]	; (8001888 <ubloxUartSpeedFast+0x2e4>)
 80015b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ba:	c303      	stmia	r3!, {r0, r1}
 80015bc:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80015be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c2:	2109      	movs	r1, #9
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffbd 	bl	8001544 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 80015e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 80015ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 80015f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 8001604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001608:	0e1b      	lsrs	r3, r3, #24
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8001616:	e113      	b.n	8001840 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8001618:	4b9c      	ldr	r3, [pc, #624]	; (800188c <ubloxUartSpeedFast+0x2e8>)
 800161a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800161e:	461d      	mov	r5, r3
 8001620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001624:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001628:	c407      	stmia	r4!, {r0, r1, r2}
 800162a:	8023      	strh	r3, [r4, #0]
 800162c:	3402      	adds	r4, #2
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001632:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001636:	2319      	movs	r3, #25
 8001638:	221e      	movs	r2, #30
 800163a:	4895      	ldr	r0, [pc, #596]	; (8001890 <ubloxUartSpeedFast+0x2ec>)
 800163c:	f004 fefb 	bl	8006436 <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8001640:	4b94      	ldr	r3, [pc, #592]	; (8001894 <ubloxUartSpeedFast+0x2f0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8001646:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164a:	2209      	movs	r2, #9
 800164c:	4619      	mov	r1, r3
 800164e:	4892      	ldr	r0, [pc, #584]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 8001650:	f004 ff86 	bl	8006560 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8001654:	bf00      	nop
 8001656:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <ubloxUartSpeedFast+0x2f0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1fa      	bne.n	8001656 <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 8001660:	4b8e      	ldr	r3, [pc, #568]	; (800189c <ubloxUartSpeedFast+0x2f8>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8001666:	488c      	ldr	r0, [pc, #560]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 8001668:	f005 f870 	bl	800674c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 800166c:	488a      	ldr	r0, [pc, #552]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800166e:	f005 fb11 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	498a      	ldr	r1, [pc, #552]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 8001678:	4887      	ldr	r0, [pc, #540]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800167a:	f004 ffcd 	bl	8006618 <HAL_UART_Receive_IT>
		int i = 11;
 800167e:	230b      	movs	r3, #11
 8001680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8001684:	e007      	b.n	8001696 <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 8001686:	2064      	movs	r0, #100	; 0x64
 8001688:	f001 fa2e 	bl	8002ae8 <HAL_Delay>
			--i;
 800168c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001690:	3b01      	subs	r3, #1
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8001696:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <ubloxUartSpeedFast+0x104>
 800169e:	4b7f      	ldr	r3, [pc, #508]	; (800189c <ubloxUartSpeedFast+0x2f8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d1ee      	bne.n	8001686 <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80016a8:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2bb5      	cmp	r3, #181	; 0xb5
 80016ae:	f040 80bf 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	2b62      	cmp	r3, #98	; 0x62
 80016b8:	f040 80ba 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80016bc:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016be:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80016c0:	2b06      	cmp	r3, #6
 80016c2:	f040 80b5 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016c8:	78db      	ldrb	r3, [r3, #3]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80b0 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80016d0:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016d2:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80016d4:	2b14      	cmp	r3, #20
 80016d6:	f040 80ab 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80016da:	4b71      	ldr	r3, [pc, #452]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016dc:	795b      	ldrb	r3, [r3, #5]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80a6 	bne.w	8001830 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016ea:	e010      	b.n	800170e <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 80016ec:	4a6c      	ldr	r2, [pc, #432]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80016ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f2:	4413      	add	r3, r2
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 8001704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001708:	3301      	adds	r3, #1
 800170a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800170e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001712:	2b1b      	cmp	r3, #27
 8001714:	d9ea      	bls.n	80016ec <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 8001716:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800171a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 800171e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001722:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8001726:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800172a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 800172e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001732:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8001736:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800173a:	211c      	movs	r1, #28
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff01 	bl	8001544 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 8001742:	4b54      	ldr	r3, [pc, #336]	; (8001894 <ubloxUartSpeedFast+0x2f0>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8001748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800174c:	221c      	movs	r2, #28
 800174e:	4619      	mov	r1, r3
 8001750:	4851      	ldr	r0, [pc, #324]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 8001752:	f004 ff05 	bl	8006560 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8001756:	bf00      	nop
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <ubloxUartSpeedFast+0x2f0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d1fa      	bne.n	8001758 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 8001764:	f004 ff9c 	bl	80066a0 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8001768:	484b      	ldr	r0, [pc, #300]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800176a:	f004 fe2b 	bl	80063c4 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 800176e:	f7ff feb9 	bl	80014e4 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <ubloxUartSpeedFast+0x2f8>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8001778:	4847      	ldr	r0, [pc, #284]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800177a:	f004 ffe7 	bl	800674c <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 800177e:	4846      	ldr	r0, [pc, #280]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 8001780:	f005 fa88 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	4945      	ldr	r1, [pc, #276]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 800178a:	4843      	ldr	r0, [pc, #268]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800178c:	f004 ff44 	bl	8006618 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8001790:	bf00      	nop
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <ubloxUartSpeedFast+0x2f8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d1fa      	bne.n	8001792 <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2bb5      	cmp	r3, #181	; 0xb5
 80017a2:	d130      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b62      	cmp	r3, #98	; 0x62
 80017aa:	d12c      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d128      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017b6:	78db      	ldrb	r3, [r3, #3]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d124      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017be:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d120      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017c6:	795b      	ldrb	r3, [r3, #5]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11c      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80017cc:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017ce:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d118      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <ubloxUartSpeedFast+0x2fc>)
 80017d6:	79db      	ldrb	r3, [r3, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d114      	bne.n	8001806 <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <ubloxUartSpeedFast+0x300>)
 80017de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017ec:	c407      	stmia	r4!, {r0, r1, r2}
 80017ee:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80017f0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017f4:	2319      	movs	r3, #25
 80017f6:	221c      	movs	r2, #28
 80017f8:	4825      	ldr	r0, [pc, #148]	; (8001890 <ubloxUartSpeedFast+0x2ec>)
 80017fa:	f004 fe1c 	bl	8006436 <HAL_UART_Transmit>
					HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	; 0x64
 8001800:	f001 f972 	bl	8002ae8 <HAL_Delay>
				{
 8001804:	e03d      	b.n	8001882 <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <ubloxUartSpeedFast+0x304>)
 8001808:	1d3c      	adds	r4, r7, #4
 800180a:	461d      	mov	r5, r3
 800180c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800181c:	1d39      	adds	r1, r7, #4
 800181e:	2319      	movs	r3, #25
 8001820:	2233      	movs	r2, #51	; 0x33
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <ubloxUartSpeedFast+0x2ec>)
 8001824:	f004 fe07 	bl	8006436 <HAL_UART_Transmit>
					HAL_Delay(100);
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	f001 f95d 	bl	8002ae8 <HAL_Delay>
				}
#endif
			}
			return;
 800182e:	e028      	b.n	8001882 <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8001830:	20c8      	movs	r0, #200	; 0xc8
 8001832:	f001 f959 	bl	8002ae8 <HAL_Delay>
			--cnt;
 8001836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800183a:	3b01      	subs	r3, #1
 800183c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8001840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f aee7 	bne.w	8001618 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <ubloxUartSpeedFast+0x2f4>)
 800184c:	f004 fdba 	bl	80063c4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8001850:	f7ff fe48 	bl	80014e4 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <ubloxUartSpeedFast+0x308>)
 8001856:	1d3c      	adds	r4, r7, #4
 8001858:	461d      	mov	r5, r3
 800185a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001866:	e895 0003 	ldmia.w	r5, {r0, r1}
 800186a:	6020      	str	r0, [r4, #0]
 800186c:	3404      	adds	r4, #4
 800186e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001870:	1d39      	adds	r1, r7, #4
 8001872:	2319      	movs	r3, #25
 8001874:	2234      	movs	r2, #52	; 0x34
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <ubloxUartSpeedFast+0x2ec>)
 8001878:	f004 fddd 	bl	8006436 <HAL_UART_Transmit>
		HAL_Delay(100);
 800187c:	2064      	movs	r0, #100	; 0x64
 800187e:	f001 f933 	bl	8002ae8 <HAL_Delay>
	}
#endif
}
 8001882:	37b8      	adds	r7, #184	; 0xb8
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	080082d0 	.word	0x080082d0
 800188c:	080082dc 	.word	0x080082dc
 8001890:	20000540 	.word	0x20000540
 8001894:	200002e0 	.word	0x200002e0
 8001898:	200004bc 	.word	0x200004bc
 800189c:	200002e1 	.word	0x200002e1
 80018a0:	200001e0 	.word	0x200001e0
 80018a4:	080082fc 	.word	0x080082fc
 80018a8:	0800831c 	.word	0x0800831c
 80018ac:	08008350 	.word	0x08008350

080018b0 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b0ac      	sub	sp, #176	; 0xb0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 80018ba:	2300      	movs	r3, #0
 80018bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 f844 	bl	8007954 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b29b      	uxth	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 80018ec:	4ab4      	ldr	r2, [pc, #720]	; (8001bc0 <ubloxSetFrequency+0x310>)
 80018ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80018fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018fe:	2108      	movs	r1, #8
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe1f 	bl	8001544 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 8001906:	2303      	movs	r3, #3
 8001908:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 800190c:	e14e      	b.n	8001bac <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 800190e:	4aad      	ldr	r2, [pc, #692]	; (8001bc4 <ubloxSetFrequency+0x314>)
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4611      	mov	r1, r2
 8001916:	2243      	movs	r2, #67	; 0x43
 8001918:	4618      	mov	r0, r3
 800191a:	f006 f80d 	bl	8007938 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	2319      	movs	r3, #25
 8001924:	2242      	movs	r2, #66	; 0x42
 8001926:	48a8      	ldr	r0, [pc, #672]	; (8001bc8 <ubloxSetFrequency+0x318>)
 8001928:	f004 fd85 	bl	8006436 <HAL_UART_Transmit>
			HAL_Delay(100);
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	f001 f8db 	bl	8002ae8 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8001932:	4ba6      	ldr	r3, [pc, #664]	; (8001bcc <ubloxSetFrequency+0x31c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8001938:	48a5      	ldr	r0, [pc, #660]	; (8001bd0 <ubloxSetFrequency+0x320>)
 800193a:	f004 ff07 	bl	800674c <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 800193e:	48a4      	ldr	r0, [pc, #656]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001940:	f005 f9a8 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001948:	49a2      	ldr	r1, [pc, #648]	; (8001bd4 <ubloxSetFrequency+0x324>)
 800194a:	48a1      	ldr	r0, [pc, #644]	; (8001bd0 <ubloxSetFrequency+0x320>)
 800194c:	f004 fe64 	bl	8006618 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8001950:	4ba1      	ldr	r3, [pc, #644]	; (8001bd8 <ubloxSetFrequency+0x328>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8001956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800195a:	2208      	movs	r2, #8
 800195c:	4619      	mov	r1, r3
 800195e:	489c      	ldr	r0, [pc, #624]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001960:	f004 fdfe 	bl	8006560 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8001964:	bf00      	nop
 8001966:	4b9c      	ldr	r3, [pc, #624]	; (8001bd8 <ubloxSetFrequency+0x328>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d1fa      	bne.n	8001966 <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 8001970:	230b      	movs	r3, #11
 8001972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001976:	e007      	b.n	8001988 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	f001 f8b5 	bl	8002ae8 <HAL_Delay>
			--i;
 800197e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001982:	3b01      	subs	r3, #1
 8001984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8001988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <ubloxSetFrequency+0xea>
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <ubloxSetFrequency+0x31c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d1ee      	bne.n	8001978 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 800199a:	4b90      	ldr	r3, [pc, #576]	; (8001bdc <ubloxSetFrequency+0x32c>)
 800199c:	f107 040c 	add.w	r4, r7, #12
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	8022      	strh	r2, [r4, #0]
 80019b0:	3402      	adds	r4, #2
 80019b2:	0c1b      	lsrs	r3, r3, #16
 80019b4:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80019b6:	f107 010c 	add.w	r1, r7, #12
 80019ba:	2319      	movs	r3, #25
 80019bc:	2222      	movs	r2, #34	; 0x22
 80019be:	4882      	ldr	r0, [pc, #520]	; (8001bc8 <ubloxSetFrequency+0x318>)
 80019c0:	f004 fd39 	bl	8006436 <HAL_UART_Transmit>
			HAL_Delay(100);
 80019c4:	2064      	movs	r0, #100	; 0x64
 80019c6:	f001 f88f 	bl	8002ae8 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <ubloxSetFrequency+0x324>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2bb5      	cmp	r3, #181	; 0xb5
 80019d0:	f040 80ca 	bne.w	8001b68 <ubloxSetFrequency+0x2b8>
 80019d4:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <ubloxSetFrequency+0x324>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b62      	cmp	r3, #98	; 0x62
 80019da:	f040 80c5 	bne.w	8001b68 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80019de:	4b7d      	ldr	r3, [pc, #500]	; (8001bd4 <ubloxSetFrequency+0x324>)
 80019e0:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	f040 80c0 	bne.w	8001b68 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80019e8:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <ubloxSetFrequency+0x324>)
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	2b31      	cmp	r3, #49	; 0x31
 80019ee:	f040 80bb 	bne.w	8001b68 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019f8:	e010      	b.n	8001a1c <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 80019fa:	4a76      	ldr	r2, [pc, #472]	; (8001bd4 <ubloxSetFrequency+0x324>)
 80019fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a00:	4413      	add	r3, r2
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	460a      	mov	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a20:	2b27      	cmp	r3, #39	; 0x27
 8001a22:	d9ea      	bls.n	80019fa <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8001a24:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001a28:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8001a2c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001a30:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8001a34:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001a38:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 8001a3c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001a40:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8001a44:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001a48:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 8001a4c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001a50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8001a54:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001a58:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 8001a5c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001a60:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8001a94:	23cf      	movs	r3, #207	; 0xcf
 8001a96:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8001a9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a9e:	2128      	movs	r1, #40	; 0x28
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fd4f 	bl	8001544 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <ubloxSetFrequency+0x328>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8001aac:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001aae:	f004 fdf7 	bl	80066a0 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8001ab2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ab6:	2228      	movs	r2, #40	; 0x28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4845      	ldr	r0, [pc, #276]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001abc:	f004 fd50 	bl	8006560 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8001ac0:	bf00      	nop
 8001ac2:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <ubloxSetFrequency+0x328>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d1fa      	bne.n	8001ac2 <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8001acc:	4840      	ldr	r0, [pc, #256]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001ace:	f004 fde7 	bl	80066a0 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <ubloxSetFrequency+0x31c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8001ad8:	483d      	ldr	r0, [pc, #244]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001ada:	f005 f8db 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	493c      	ldr	r1, [pc, #240]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001ae4:	483a      	ldr	r0, [pc, #232]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001ae6:	f004 fd97 	bl	8006618 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8001aea:	bf00      	nop
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <ubloxSetFrequency+0x31c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d1fa      	bne.n	8001aec <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8001af6:	4836      	ldr	r0, [pc, #216]	; (8001bd0 <ubloxSetFrequency+0x320>)
 8001af8:	f004 fe28 	bl	800674c <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2bb5      	cmp	r3, #181	; 0xb5
 8001b02:	d131      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	2b62      	cmp	r3, #98	; 0x62
 8001b0a:	d12d      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b0e:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d129      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d125      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b1e:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d121      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b26:	795b      	ldrb	r3, [r3, #5]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d11d      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b2e:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d119      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <ubloxSetFrequency+0x324>)
 8001b36:	79db      	ldrb	r3, [r3, #7]
 8001b38:	2b31      	cmp	r3, #49	; 0x31
 8001b3a:	d115      	bne.n	8001b68 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <ubloxSetFrequency+0x330>)
 8001b3e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001b42:	461d      	mov	r5, r3
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b4c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b4e:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001b50:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b54:	2319      	movs	r3, #25
 8001b56:	221c      	movs	r2, #28
 8001b58:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <ubloxSetFrequency+0x318>)
 8001b5a:	f004 fc6c 	bl	8006436 <HAL_UART_Transmit>
					HAL_Delay(100);
 8001b5e:	2064      	movs	r0, #100	; 0x64
 8001b60:	f000 ffc2 	bl	8002ae8 <HAL_Delay>
				}
#endif
				return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e027      	b.n	8001bb8 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <ubloxSetFrequency+0x334>)
 8001b6a:	f107 040c 	add.w	r4, r7, #12
 8001b6e:	461d      	mov	r5, r3
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b7c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b7e:	8023      	strh	r3, [r4, #0]
 8001b80:	3402      	adds	r4, #2
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001b86:	f107 010c 	add.w	r1, r7, #12
 8001b8a:	2319      	movs	r3, #25
 8001b8c:	222e      	movs	r2, #46	; 0x2e
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <ubloxSetFrequency+0x318>)
 8001b90:	f004 fc51 	bl	8006436 <HAL_UART_Transmit>
			HAL_Delay(100);
 8001b94:	2064      	movs	r0, #100	; 0x64
 8001b96:	f000 ffa7 	bl	8002ae8 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8001b9a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8001ba4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ba8:	f000 ff9e 	bl	8002ae8 <HAL_Delay>
	while (tryCtr) {
 8001bac:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f47f aeac 	bne.w	800190e <ubloxSetFrequency+0x5e>
	}

	return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	37b0      	adds	r7, #176	; 0xb0
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc0:	08008388 	.word	0x08008388
 8001bc4:	08008390 	.word	0x08008390
 8001bc8:	20000540 	.word	0x20000540
 8001bcc:	200002e1 	.word	0x200002e1
 8001bd0:	200004bc 	.word	0x200004bc
 8001bd4:	200001e0 	.word	0x200001e0
 8001bd8:	200002e0 	.word	0x200002e0
 8001bdc:	080083d4 	.word	0x080083d4
 8001be0:	080082fc 	.word	0x080082fc
 8001be4:	080083f8 	.word	0x080083f8

08001be8 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0ac      	sub	sp, #176	; 0xb0
 8001bec:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <ubloxMsgsTurnOff+0x40>)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	22af      	movs	r2, #175	; 0xaf
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 fe9e 	bl	8007938 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <ubloxMsgsTurnOff+0x44>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8001c02:	463b      	mov	r3, r7
 8001c04:	22af      	movs	r2, #175	; 0xaf
 8001c06:	4619      	mov	r1, r3
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <ubloxMsgsTurnOff+0x48>)
 8001c0a:	f004 fca9 	bl	8006560 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001c0e:	bf00      	nop
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <ubloxMsgsTurnOff+0x44>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d1fa      	bne.n	8001c10 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <ubloxMsgsTurnOff+0x48>)
 8001c1c:	f004 fd40 	bl	80066a0 <HAL_UART_AbortTransmit_IT>
}
 8001c20:	bf00      	nop
 8001c22:	37b0      	adds	r7, #176	; 0xb0
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08008428 	.word	0x08008428
 8001c2c:	200002e0 	.word	0x200002e0
 8001c30:	200004bc 	.word	0x200004bc

08001c34 <ublox_NavDop_get>:

void ublox_NavDop_get(UbloxNavDop_t* dop)
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b0a8      	sub	sp, #160	; 0xa0
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <ublox_NavDop_get+0x1c4>)
 8001c3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c46:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req));
 8001c4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c4e:	2108      	movs	r1, #8
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fc77 	bl	8001544 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-DOP: TX --> RX --> ";
 8001c56:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <ublox_NavDop_get+0x1c8>)
 8001c58:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c66:	c407      	stmia	r4!, {r0, r1, r2}
 8001c68:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001c6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001c6e:	2319      	movs	r3, #25
 8001c70:	221d      	movs	r2, #29
 8001c72:	4863      	ldr	r0, [pc, #396]	; (8001e00 <ublox_NavDop_get+0x1cc>)
 8001c74:	f004 fbdf 	bl	8006436 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8001c78:	4862      	ldr	r0, [pc, #392]	; (8001e04 <ublox_NavDop_get+0x1d0>)
 8001c7a:	f004 fba3 	bl	80063c4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8001c7e:	f7ff fc31 	bl	80014e4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8001c82:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <ublox_NavDop_get+0x1d4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8001c88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	485c      	ldr	r0, [pc, #368]	; (8001e04 <ublox_NavDop_get+0x1d0>)
 8001c92:	f004 fc65 	bl	8006560 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8001c96:	bf00      	nop
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <ublox_NavDop_get+0x1d4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d1fa      	bne.n	8001c98 <ublox_NavDop_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <ublox_NavDop_get+0x1d8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8001ca8:	4856      	ldr	r0, [pc, #344]	; (8001e04 <ublox_NavDop_get+0x1d0>)
 8001caa:	f004 fff3 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	4957      	ldr	r1, [pc, #348]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cb4:	4853      	ldr	r0, [pc, #332]	; (8001e04 <ublox_NavDop_get+0x1d0>)
 8001cb6:	f004 fcaf 	bl	8006618 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8001cba:	bf00      	nop
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <ublox_NavDop_get+0x1d8>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d1fa      	bne.n	8001cbc <ublox_NavDop_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001cc6:	4b52      	ldr	r3, [pc, #328]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2bb5      	cmp	r3, #181	; 0xb5
 8001ccc:	f040 822c 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b62      	cmp	r3, #98	; 0x62
 8001cd6:	f040 8227 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cdc:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	f040 8222 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001ce6:	78db      	ldrb	r3, [r3, #3]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	f040 821d 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8001cee:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cf0:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	f040 8218 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8001cf8:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001cfa:	795b      	ldrb	r3, [r3, #5]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 8213 	bne.w	8002128 <ublox_NavDop_get+0x4f4>
		dop->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d04:	799b      	ldrb	r3, [r3, #6]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d0a:	79db      	ldrb	r3, [r3, #7]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d1a:	7a5b      	ldrb	r3, [r3, #9]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
		dop->gDOP		= ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8);
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d28:	7a9b      	ldrb	r3, [r3, #10]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d2e:	7adb      	ldrb	r3, [r3, #11]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d40:	7b1b      	ldrb	r3, [r3, #12]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d46:	7b5b      	ldrb	r3, [r3, #13]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8);
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d58:	7b9b      	ldrb	r3, [r3, #14]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d5e:	7bdb      	ldrb	r3, [r3, #15]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= ublox_Response[6 + 10] | (ublox_Response[6 + 11] << 8);
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d70:	7c1b      	ldrb	r3, [r3, #16]
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d76:	7c5b      	ldrb	r3, [r3, #17]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8);
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d88:	7c9b      	ldrb	r3, [r3, #18]
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001d8e:	7cdb      	ldrb	r3, [r3, #19]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= ublox_Response[6 + 14] | (ublox_Response[6 + 15] << 8);
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001da0:	7d1b      	ldrb	r3, [r3, #20]
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001da6:	7d5b      	ldrb	r3, [r3, #21]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8);
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001db8:	7d9b      	ldrb	r3, [r3, #22]
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <ublox_NavDop_get+0x1dc>)
 8001dbe:	7ddb      	ldrb	r3, [r3, #23]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	821a      	strh	r2, [r3, #16]

		if (dop->tDOP < 9999) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	891b      	ldrh	r3, [r3, #8]
 8001dd2:	f242 720e 	movw	r2, #9998	; 0x270e
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d81e      	bhi.n	8001e18 <ublox_NavDop_get+0x1e4>
			dop->timeError	= (uint16_t) (((uint32_t)dop->pDOP * (uint32_t)dop->tDOP) / 100UL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	88db      	ldrh	r3, [r3, #6]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	891b      	ldrh	r3, [r3, #8]
 8001de4:	fb03 f302 	mul.w	r3, r3, r2
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <ublox_NavDop_get+0x1e0>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	825a      	strh	r2, [r3, #18]
 8001df6:	e013      	b.n	8001e20 <ublox_NavDop_get+0x1ec>
 8001df8:	08008600 	.word	0x08008600
 8001dfc:	08008608 	.word	0x08008608
 8001e00:	20000540 	.word	0x20000540
 8001e04:	200004bc 	.word	0x200004bc
 8001e08:	200002e0 	.word	0x200002e0
 8001e0c:	200002e1 	.word	0x200002e1
 8001e10:	200001e0 	.word	0x200001e0
 8001e14:	51eb851f 	.word	0x51eb851f
		} else {
			dop->timeError	= 0xffffU;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1e:	825a      	strh	r2, [r3, #18]
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8001e20:	4ab4      	ldr	r2, [pc, #720]	; (80020f4 <ublox_NavDop_get+0x4c0>)
 8001e22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e28:	c303      	stmia	r3!, {r0, r1}
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	0c12      	lsrs	r2, r2, #16
 8001e30:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001e32:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e36:	2319      	movs	r3, #25
 8001e38:	220a      	movs	r2, #10
 8001e3a:	48af      	ldr	r0, [pc, #700]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001e3c:	f004 fafb 	bl	8006436 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", dop->iTOW);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f107 0008 	add.w	r0, r7, #8
 8001e48:	4aac      	ldr	r2, [pc, #688]	; (80020fc <ublox_NavDop_get+0x4c8>)
 8001e4a:	2140      	movs	r1, #64	; 0x40
 8001e4c:	f005 fd8a 	bl	8007964 <sniprintf>
 8001e50:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	f107 0108 	add.w	r1, r7, #8
 8001e5e:	2319      	movs	r3, #25
 8001e60:	48a5      	ldr	r0, [pc, #660]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001e62:	f004 fae8 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (dop->gDOP / 100), (dop->gDOP % 100));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	889b      	ldrh	r3, [r3, #4]
 8001e6a:	4aa5      	ldr	r2, [pc, #660]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461c      	mov	r4, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	4aa1      	ldr	r2, [pc, #644]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001e7c:	fba2 1203 	umull	r1, r2, r2, r3
 8001e80:	0952      	lsrs	r2, r2, #5
 8001e82:	2164      	movs	r1, #100	; 0x64
 8001e84:	fb01 f202 	mul.w	r2, r1, r2
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f107 0008 	add.w	r0, r7, #8
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4623      	mov	r3, r4
 8001e94:	4a9b      	ldr	r2, [pc, #620]	; (8002104 <ublox_NavDop_get+0x4d0>)
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	f005 fd64 	bl	8007964 <sniprintf>
 8001e9c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f107 0108 	add.w	r1, r7, #8
 8001eaa:	2319      	movs	r3, #25
 8001eac:	4892      	ldr	r0, [pc, #584]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001eae:	f004 fac2 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (dop->pDOP / 100), (dop->pDOP % 100));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	88db      	ldrh	r3, [r3, #6]
 8001eb6:	4a92      	ldr	r2, [pc, #584]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	88db      	ldrh	r3, [r3, #6]
 8001ec6:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001ec8:	fba2 1203 	umull	r1, r2, r2, r3
 8001ecc:	0952      	lsrs	r2, r2, #5
 8001ece:	2164      	movs	r1, #100	; 0x64
 8001ed0:	fb01 f202 	mul.w	r2, r1, r2
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f107 0008 	add.w	r0, r7, #8
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4623      	mov	r3, r4
 8001ee0:	4a89      	ldr	r2, [pc, #548]	; (8002108 <ublox_NavDop_get+0x4d4>)
 8001ee2:	2140      	movs	r1, #64	; 0x40
 8001ee4:	f005 fd3e 	bl	8007964 <sniprintf>
 8001ee8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	f107 0108 	add.w	r1, r7, #8
 8001ef6:	2319      	movs	r3, #25
 8001ef8:	487f      	ldr	r0, [pc, #508]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001efa:	f004 fa9c 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (dop->tDOP / 100), (dop->tDOP % 100));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	891b      	ldrh	r3, [r3, #8]
 8001f02:	4a7f      	ldr	r2, [pc, #508]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461c      	mov	r4, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	891b      	ldrh	r3, [r3, #8]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001f14:	fba2 1203 	umull	r1, r2, r2, r3
 8001f18:	0952      	lsrs	r2, r2, #5
 8001f1a:	2164      	movs	r1, #100	; 0x64
 8001f1c:	fb01 f202 	mul.w	r2, r1, r2
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f107 0008 	add.w	r0, r7, #8
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	4a77      	ldr	r2, [pc, #476]	; (800210c <ublox_NavDop_get+0x4d8>)
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	f005 fd18 	bl	8007964 <sniprintf>
 8001f34:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	f107 0108 	add.w	r1, r7, #8
 8001f42:	2319      	movs	r3, #25
 8001f44:	486c      	ldr	r0, [pc, #432]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001f46:	f004 fa76 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (dop->vDOP / 100), (dop->vDOP % 100));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	895b      	ldrh	r3, [r3, #10]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461c      	mov	r4, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	895b      	ldrh	r3, [r3, #10]
 8001f5e:	4a68      	ldr	r2, [pc, #416]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001f60:	fba2 1203 	umull	r1, r2, r2, r3
 8001f64:	0952      	lsrs	r2, r2, #5
 8001f66:	2164      	movs	r1, #100	; 0x64
 8001f68:	fb01 f202 	mul.w	r2, r1, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f107 0008 	add.w	r0, r7, #8
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4623      	mov	r3, r4
 8001f78:	4a65      	ldr	r2, [pc, #404]	; (8002110 <ublox_NavDop_get+0x4dc>)
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	f005 fcf2 	bl	8007964 <sniprintf>
 8001f80:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f107 0108 	add.w	r1, r7, #8
 8001f8e:	2319      	movs	r3, #25
 8001f90:	4859      	ldr	r0, [pc, #356]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001f92:	f004 fa50 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (dop->hDOP / 100), (dop->hDOP % 100));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	899b      	ldrh	r3, [r3, #12]
 8001f9a:	4a59      	ldr	r2, [pc, #356]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461c      	mov	r4, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	899b      	ldrh	r3, [r3, #12]
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001fac:	fba2 1203 	umull	r1, r2, r2, r3
 8001fb0:	0952      	lsrs	r2, r2, #5
 8001fb2:	2164      	movs	r1, #100	; 0x64
 8001fb4:	fb01 f202 	mul.w	r2, r1, r2
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f107 0008 	add.w	r0, r7, #8
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	4a53      	ldr	r2, [pc, #332]	; (8002114 <ublox_NavDop_get+0x4e0>)
 8001fc6:	2140      	movs	r1, #64	; 0x40
 8001fc8:	f005 fccc 	bl	8007964 <sniprintf>
 8001fcc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8001fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f107 0108 	add.w	r1, r7, #8
 8001fda:	2319      	movs	r3, #25
 8001fdc:	4846      	ldr	r0, [pc, #280]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8001fde:	f004 fa2a 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (dop->nDOP / 100), (dop->nDOP % 100));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	89db      	ldrh	r3, [r3, #14]
 8001fe6:	4a46      	ldr	r2, [pc, #280]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461c      	mov	r4, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	89db      	ldrh	r3, [r3, #14]
 8001ff6:	4a42      	ldr	r2, [pc, #264]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8001ff8:	fba2 1203 	umull	r1, r2, r2, r3
 8001ffc:	0952      	lsrs	r2, r2, #5
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	fb01 f202 	mul.w	r2, r1, r2
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	f107 0008 	add.w	r0, r7, #8
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4623      	mov	r3, r4
 8002010:	4a41      	ldr	r2, [pc, #260]	; (8002118 <ublox_NavDop_get+0x4e4>)
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	f005 fca6 	bl	8007964 <sniprintf>
 8002018:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800201c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002020:	b29a      	uxth	r2, r3
 8002022:	f107 0108 	add.w	r1, r7, #8
 8002026:	2319      	movs	r3, #25
 8002028:	4833      	ldr	r0, [pc, #204]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 800202a:	f004 fa04 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (dop->eDOP / 100), (dop->eDOP % 100));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8a1b      	ldrh	r3, [r3, #16]
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	b29b      	uxth	r3, r3
 800203c:	461c      	mov	r4, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8a1b      	ldrh	r3, [r3, #16]
 8002042:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <ublox_NavDop_get+0x4cc>)
 8002044:	fba2 1203 	umull	r1, r2, r2, r3
 8002048:	0952      	lsrs	r2, r2, #5
 800204a:	2164      	movs	r1, #100	; 0x64
 800204c:	fb01 f202 	mul.w	r2, r1, r2
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	f107 0008 	add.w	r0, r7, #8
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4623      	mov	r3, r4
 800205c:	4a2f      	ldr	r2, [pc, #188]	; (800211c <ublox_NavDop_get+0x4e8>)
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	f005 fc80 	bl	8007964 <sniprintf>
 8002064:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002068:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800206c:	b29a      	uxth	r2, r3
 800206e:	f107 0108 	add.w	r1, r7, #8
 8002072:	2319      	movs	r3, #25
 8002074:	4820      	ldr	r0, [pc, #128]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 8002076:	f004 f9de 	bl	8006436 <HAL_UART_Transmit>

			if (dop->timeError != 0xffffU)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8a5b      	ldrh	r3, [r3, #18]
 800207e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002082:	4293      	cmp	r3, r2
 8002084:	d01c      	beq.n	80020c0 <ublox_NavDop_get+0x48c>
			len = snprintf(((char*) msg), sizeof(msg), "  * time error    : %d.%02d\r\n", (dop->timeError / 100), (dop->timeError % 100));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8a5b      	ldrh	r3, [r3, #18]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <ublox_NavDop_get+0x4cc>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b29b      	uxth	r3, r3
 8002094:	461c      	mov	r4, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8a5b      	ldrh	r3, [r3, #18]
 800209a:	4a19      	ldr	r2, [pc, #100]	; (8002100 <ublox_NavDop_get+0x4cc>)
 800209c:	fba2 1203 	umull	r1, r2, r2, r3
 80020a0:	0952      	lsrs	r2, r2, #5
 80020a2:	2164      	movs	r1, #100	; 0x64
 80020a4:	fb01 f202 	mul.w	r2, r1, r2
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f107 0008 	add.w	r0, r7, #8
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4623      	mov	r3, r4
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <ublox_NavDop_get+0x4ec>)
 80020b6:	2140      	movs	r1, #64	; 0x40
 80020b8:	f005 fc54 	bl	8007964 <sniprintf>
 80020bc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80020c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	f107 0108 	add.w	r1, r7, #8
 80020ca:	2319      	movs	r3, #25
 80020cc:	480a      	ldr	r0, [pc, #40]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 80020ce:	f004 f9b2 	bl	8006436 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <ublox_NavDop_get+0x4f0>)
 80020d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4611      	mov	r1, r2
 80020dc:	8019      	strh	r1, [r3, #0]
 80020de:	3302      	adds	r3, #2
 80020e0:	0c12      	lsrs	r2, r2, #16
 80020e2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80020e4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80020e8:	2319      	movs	r3, #25
 80020ea:	2202      	movs	r2, #2
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <ublox_NavDop_get+0x4c4>)
 80020ee:	f004 f9a2 	bl	8006436 <HAL_UART_Transmit>
		{
 80020f2:	e045      	b.n	8002180 <ublox_NavDop_get+0x54c>
 80020f4:	08008628 	.word	0x08008628
 80020f8:	20000540 	.word	0x20000540
 80020fc:	080084d8 	.word	0x080084d8
 8002100:	51eb851f 	.word	0x51eb851f
 8002104:	08008500 	.word	0x08008500
 8002108:	08008520 	.word	0x08008520
 800210c:	08008540 	.word	0x08008540
 8002110:	08008560 	.word	0x08008560
 8002114:	08008580 	.word	0x08008580
 8002118:	080085a0 	.word	0x080085a0
 800211c:	080085c0 	.word	0x080085c0
 8002120:	080085e0 	.word	0x080085e0
 8002124:	08008634 	.word	0x08008634
		}
#endif
	}
	else {
		dop->iTOW		= 0UL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
		dop->gDOP		= 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= 0U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= 0U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	821a      	strh	r2, [r3, #16]
		dop->timeError	= 0xffffU;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215e:	825a      	strh	r2, [r3, #18]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <ublox_NavDop_get+0x554>)
 8002162:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002166:	461d      	mov	r5, r3
 8002168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002170:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002174:	2319      	movs	r3, #25
 8002176:	2210      	movs	r2, #16
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <ublox_NavDop_get+0x558>)
 800217a:	f004 f95c 	bl	8006436 <HAL_UART_Transmit>
		}
#endif
	}
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	3798      	adds	r7, #152	; 0x98
 8002184:	46bd      	mov	sp, r7
 8002186:	bdb0      	pop	{r4, r5, r7, pc}
 8002188:	08008638 	.word	0x08008638
 800218c:	20000540 	.word	0x20000540

08002190 <ublox_NavClock_get>:

void ublox_NavClock_get(UbloxNavClock_t* ubloxNavClock)
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b09e      	sub	sp, #120	; 0x78
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8002198:	4aa9      	ldr	r2, [pc, #676]	; (8002440 <ublox_NavClock_get+0x2b0>)
 800219a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800219e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req));
 80021a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021aa:	2108      	movs	r1, #8
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f9c9 	bl	8001544 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-CLOCK: TX --> RX --> ";
 80021b2:	4ba4      	ldr	r3, [pc, #656]	; (8002444 <ublox_NavClock_get+0x2b4>)
 80021b4:	f107 0408 	add.w	r4, r7, #8
 80021b8:	461d      	mov	r5, r3
 80021ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80021c6:	f107 0108 	add.w	r1, r7, #8
 80021ca:	2319      	movs	r3, #25
 80021cc:	221f      	movs	r2, #31
 80021ce:	489e      	ldr	r0, [pc, #632]	; (8002448 <ublox_NavClock_get+0x2b8>)
 80021d0:	f004 f931 	bl	8006436 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80021d4:	489d      	ldr	r0, [pc, #628]	; (800244c <ublox_NavClock_get+0x2bc>)
 80021d6:	f004 f8f5 	bl	80063c4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80021da:	f7ff f983 	bl	80014e4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 80021de:	4b9c      	ldr	r3, [pc, #624]	; (8002450 <ublox_NavClock_get+0x2c0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 80021e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e8:	2208      	movs	r2, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	4897      	ldr	r0, [pc, #604]	; (800244c <ublox_NavClock_get+0x2bc>)
 80021ee:	f004 f9b7 	bl	8006560 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80021f2:	bf00      	nop
 80021f4:	4b96      	ldr	r3, [pc, #600]	; (8002450 <ublox_NavClock_get+0x2c0>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d1fa      	bne.n	80021f4 <ublox_NavClock_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 80021fe:	4b95      	ldr	r3, [pc, #596]	; (8002454 <ublox_NavClock_get+0x2c4>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8002204:	4891      	ldr	r0, [pc, #580]	; (800244c <ublox_NavClock_get+0x2bc>)
 8002206:	f004 fd45 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800220a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220e:	4992      	ldr	r1, [pc, #584]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002210:	488e      	ldr	r0, [pc, #568]	; (800244c <ublox_NavClock_get+0x2bc>)
 8002212:	f004 fa01 	bl	8006618 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8002216:	bf00      	nop
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <ublox_NavClock_get+0x2c4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d1fa      	bne.n	8002218 <ublox_NavClock_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002222:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2bb5      	cmp	r3, #181	; 0xb5
 8002228:	f040 80e7 	bne.w	80023fa <ublox_NavClock_get+0x26a>
 800222c:	4b8a      	ldr	r3, [pc, #552]	; (8002458 <ublox_NavClock_get+0x2c8>)
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	2b62      	cmp	r3, #98	; 0x62
 8002232:	f040 80e2 	bne.w	80023fa <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002238:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 80dd 	bne.w	80023fa <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002242:	78db      	ldrb	r3, [r3, #3]
 8002244:	2b22      	cmp	r3, #34	; 0x22
 8002246:	f040 80d8 	bne.w	80023fa <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800224a:	4b83      	ldr	r3, [pc, #524]	; (8002458 <ublox_NavClock_get+0x2c8>)
 800224c:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 800224e:	2b14      	cmp	r3, #20
 8002250:	f040 80d3 	bne.w	80023fa <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002254:	4b80      	ldr	r3, [pc, #512]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002256:	795b      	ldrb	r3, [r3, #5]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 80ce 	bne.w	80023fa <ublox_NavClock_get+0x26a>
		ubloxNavClock->iTOW	=            ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 800225e:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002260:	799b      	ldrb	r3, [r3, #6]
 8002262:	461a      	mov	r2, r3
 8002264:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002266:	79db      	ldrb	r3, [r3, #7]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	431a      	orrs	r2, r3
 800226c:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <ublox_NavClock_get+0x2c8>)
 800226e:	7a1b      	ldrb	r3, [r3, #8]
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	4b78      	ldr	r3, [pc, #480]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002276:	7a5b      	ldrb	r3, [r3, #9]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4313      	orrs	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= (int32_t) (ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8) | (ublox_Response[6 +  6] << 16) | (ublox_Response[6 +  7] << 24));
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	461a      	mov	r2, r3
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <ublox_NavClock_get+0x2c8>)
 800228a:	7adb      	ldrb	r3, [r3, #11]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	431a      	orrs	r2, r3
 8002290:	4b71      	ldr	r3, [pc, #452]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002292:	7b1b      	ldrb	r3, [r3, #12]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <ublox_NavClock_get+0x2c8>)
 800229a:	7b5b      	ldrb	r3, [r3, #13]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= (int32_t) (ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8) | (ublox_Response[6 + 10] << 16) | (ublox_Response[6 + 11] << 24));
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022a6:	7b9b      	ldrb	r3, [r3, #14]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b6b      	ldr	r3, [pc, #428]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022ac:	7bdb      	ldrb	r3, [r3, #15]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	431a      	orrs	r2, r3
 80022b2:	4b69      	ldr	r3, [pc, #420]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022b4:	7c1b      	ldrb	r3, [r3, #16]
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022bc:	7c5b      	ldrb	r3, [r3, #17]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	=            ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8) | (ublox_Response[6 + 14] << 16) | (ublox_Response[6 + 15] << 24);
 80022c6:	4b64      	ldr	r3, [pc, #400]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022c8:	7c9b      	ldrb	r3, [r3, #18]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b62      	ldr	r3, [pc, #392]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022ce:	7cdb      	ldrb	r3, [r3, #19]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	431a      	orrs	r2, r3
 80022d4:	4b60      	ldr	r3, [pc, #384]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022d6:	7d1b      	ldrb	r3, [r3, #20]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	431a      	orrs	r2, r3
 80022dc:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022de:	7d5b      	ldrb	r3, [r3, #21]
 80022e0:	061b      	lsls	r3, r3, #24
 80022e2:	4313      	orrs	r3, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	=            ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8) | (ublox_Response[6 + 18] << 16) | (ublox_Response[6 + 19] << 24);
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022ec:	7d9b      	ldrb	r3, [r3, #22]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022f2:	7ddb      	ldrb	r3, [r3, #23]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	431a      	orrs	r2, r3
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <ublox_NavClock_get+0x2c8>)
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	431a      	orrs	r2, r3
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <ublox_NavClock_get+0x2c8>)
 8002302:	7e5b      	ldrb	r3, [r3, #25]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4313      	orrs	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 800230e:	4a53      	ldr	r2, [pc, #332]	; (800245c <ublox_NavClock_get+0x2cc>)
 8002310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002314:	ca07      	ldmia	r2, {r0, r1, r2}
 8002316:	c303      	stmia	r3!, {r0, r1}
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	3302      	adds	r3, #2
 800231c:	0c12      	lsrs	r2, r2, #16
 800231e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002320:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002324:	2319      	movs	r3, #25
 8002326:	220a      	movs	r2, #10
 8002328:	4847      	ldr	r0, [pc, #284]	; (8002448 <ublox_NavClock_get+0x2b8>)
 800232a:	f004 f884 	bl	8006436 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f107 0008 	add.w	r0, r7, #8
 8002336:	4a4a      	ldr	r2, [pc, #296]	; (8002460 <ublox_NavClock_get+0x2d0>)
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	f005 fb13 	bl	8007964 <sniprintf>
 800233e:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002342:	b29a      	uxth	r2, r3
 8002344:	f107 0108 	add.w	r1, r7, #8
 8002348:	2319      	movs	r3, #25
 800234a:	483f      	ldr	r0, [pc, #252]	; (8002448 <ublox_NavClock_get+0x2b8>)
 800234c:	f004 f873 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f107 0008 	add.w	r0, r7, #8
 8002358:	4a42      	ldr	r2, [pc, #264]	; (8002464 <ublox_NavClock_get+0x2d4>)
 800235a:	2140      	movs	r1, #64	; 0x40
 800235c:	f005 fb02 	bl	8007964 <sniprintf>
 8002360:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002364:	b29a      	uxth	r2, r3
 8002366:	f107 0108 	add.w	r1, r7, #8
 800236a:	2319      	movs	r3, #25
 800236c:	4836      	ldr	r0, [pc, #216]	; (8002448 <ublox_NavClock_get+0x2b8>)
 800236e:	f004 f862 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f107 0008 	add.w	r0, r7, #8
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <ublox_NavClock_get+0x2d8>)
 800237c:	2140      	movs	r1, #64	; 0x40
 800237e:	f005 faf1 	bl	8007964 <sniprintf>
 8002382:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	b29a      	uxth	r2, r3
 8002388:	f107 0108 	add.w	r1, r7, #8
 800238c:	2319      	movs	r3, #25
 800238e:	482e      	ldr	r0, [pc, #184]	; (8002448 <ublox_NavClock_get+0x2b8>)
 8002390:	f004 f851 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f107 0008 	add.w	r0, r7, #8
 800239c:	4a33      	ldr	r2, [pc, #204]	; (800246c <ublox_NavClock_get+0x2dc>)
 800239e:	2140      	movs	r1, #64	; 0x40
 80023a0:	f005 fae0 	bl	8007964 <sniprintf>
 80023a4:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80023a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	f107 0108 	add.w	r1, r7, #8
 80023ae:	2319      	movs	r3, #25
 80023b0:	4825      	ldr	r0, [pc, #148]	; (8002448 <ublox_NavClock_get+0x2b8>)
 80023b2:	f004 f840 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f107 0008 	add.w	r0, r7, #8
 80023be:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <ublox_NavClock_get+0x2e0>)
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	f005 facf 	bl	8007964 <sniprintf>
 80023c6:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80023c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	f107 0108 	add.w	r1, r7, #8
 80023d0:	2319      	movs	r3, #25
 80023d2:	481d      	ldr	r0, [pc, #116]	; (8002448 <ublox_NavClock_get+0x2b8>)
 80023d4:	f004 f82f 	bl	8006436 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <ublox_NavClock_get+0x2e4>)
 80023da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4611      	mov	r1, r2
 80023e2:	8019      	strh	r1, [r3, #0]
 80023e4:	3302      	adds	r3, #2
 80023e6:	0c12      	lsrs	r2, r2, #16
 80023e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80023ea:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80023ee:	2319      	movs	r3, #25
 80023f0:	2202      	movs	r2, #2
 80023f2:	4815      	ldr	r0, [pc, #84]	; (8002448 <ublox_NavClock_get+0x2b8>)
 80023f4:	f004 f81f 	bl	8006436 <HAL_UART_Transmit>
		{
 80023f8:	e01e      	b.n	8002438 <ublox_NavClock_get+0x2a8>
		}
#endif
	}
	else {
		ubloxNavClock->iTOW	= 0UL;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= 0UL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= 0UL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	= 0UL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	= 0UL;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <ublox_NavClock_get+0x2e8>)
 800241a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800241e:	461d      	mov	r5, r3
 8002420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002428:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800242c:	2319      	movs	r3, #25
 800242e:	2210      	movs	r2, #16
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <ublox_NavClock_get+0x2b8>)
 8002432:	f004 f800 	bl	8006436 <HAL_UART_Transmit>
		}
#endif
	}
}
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	3778      	adds	r7, #120	; 0x78
 800243c:	46bd      	mov	sp, r7
 800243e:	bdb0      	pop	{r4, r5, r7, pc}
 8002440:	080086cc 	.word	0x080086cc
 8002444:	080086d4 	.word	0x080086d4
 8002448:	20000540 	.word	0x20000540
 800244c:	200004bc 	.word	0x200004bc
 8002450:	200002e0 	.word	0x200002e0
 8002454:	200002e1 	.word	0x200002e1
 8002458:	200001e0 	.word	0x200001e0
 800245c:	08008628 	.word	0x08008628
 8002460:	080084d8 	.word	0x080084d8
 8002464:	0800864c 	.word	0x0800864c
 8002468:	0800866c 	.word	0x0800866c
 800246c:	0800868c 	.word	0x0800868c
 8002470:	080086ac 	.word	0x080086ac
 8002474:	08008634 	.word	0x08008634
 8002478:	08008638 	.word	0x08008638

0800247c <ublox_NavSvinfo_get>:

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b0a4      	sub	sp, #144	; 0x90
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8002484:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <ublox_NavSvinfo_get+0x158>)
 8002486:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800248a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800248e:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8002492:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002496:	2108      	movs	r1, #8
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f853 	bl	8001544 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <ublox_NavSvinfo_get+0x15c>)
 80024a0:	f107 0408 	add.w	r4, r7, #8
 80024a4:	461d      	mov	r5, r3
 80024a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80024b2:	f107 0108 	add.w	r1, r7, #8
 80024b6:	2319      	movs	r3, #25
 80024b8:	2220      	movs	r2, #32
 80024ba:	4848      	ldr	r0, [pc, #288]	; (80025dc <ublox_NavSvinfo_get+0x160>)
 80024bc:	f003 ffbb 	bl	8006436 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80024c0:	4847      	ldr	r0, [pc, #284]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 80024c2:	f003 ff7f 	bl	80063c4 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80024c6:	f7ff f80d 	bl	80014e4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <ublox_NavSvinfo_get+0x168>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 80024d0:	4843      	ldr	r0, [pc, #268]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 80024d2:	f004 f8e5 	bl	80066a0 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80024d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024da:	2208      	movs	r2, #8
 80024dc:	4619      	mov	r1, r3
 80024de:	4840      	ldr	r0, [pc, #256]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 80024e0:	f004 f83e 	bl	8006560 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80024e4:	bf00      	nop
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <ublox_NavSvinfo_get+0x168>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d1fa      	bne.n	80024e6 <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <ublox_NavSvinfo_get+0x16c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80024f6:	483a      	ldr	r0, [pc, #232]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 80024f8:	f004 f928 	bl	800674c <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 80024fc:	4838      	ldr	r0, [pc, #224]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 80024fe:	f004 fbc9 	bl	8006c94 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002506:	4939      	ldr	r1, [pc, #228]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002508:	4835      	ldr	r0, [pc, #212]	; (80025e0 <ublox_NavSvinfo_get+0x164>)
 800250a:	f004 f885 	bl	8006618 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 800250e:	bf00      	nop
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <ublox_NavSvinfo_get+0x16c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d1fa      	bne.n	8002510 <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8002520:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002528:	e00b      	b.n	8002542 <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 800252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8002538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253c:	3b01      	subs	r3, #1
 800253e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ef      	bne.n	800252a <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800254a:	4b28      	ldr	r3, [pc, #160]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2bb5      	cmp	r3, #181	; 0xb5
 8002550:	f040 823b 	bne.w	80029ca <ublox_NavSvinfo_get+0x54e>
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	2b62      	cmp	r3, #98	; 0x62
 800255a:	f040 8236 	bne.w	80029ca <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002560:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 8231 	bne.w	80029ca <ublox_NavSvinfo_get+0x54e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 800256a:	78db      	ldrb	r3, [r3, #3]
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	f040 822c 	bne.w	80029ca <ublox_NavSvinfo_get+0x54e>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002574:	799b      	ldrb	r3, [r3, #6]
 8002576:	461a      	mov	r2, r3
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 800257a:	79db      	ldrb	r3, [r3, #7]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	431a      	orrs	r2, r3
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002582:	7a1b      	ldrb	r3, [r3, #8]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 800258a:	7a5b      	ldrb	r3, [r3, #9]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	4313      	orrs	r3, r2
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 8002598:	7a9a      	ldrb	r2, [r3, #10]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 80025a0:	7ada      	ldrb	r2, [r3, #11]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 80025a8:	7b1b      	ldrb	r3, [r3, #12]
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <ublox_NavSvinfo_get+0x170>)
 80025ae:	7b5b      	ldrb	r3, [r3, #13]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	791b      	ldrb	r3, [r3, #4]
 80025c2:	2b18      	cmp	r3, #24
 80025c4:	d902      	bls.n	80025cc <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2218      	movs	r2, #24
 80025ca:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d0:	e0b2      	b.n	8002738 <ublox_NavSvinfo_get+0x2bc>
 80025d2:	bf00      	nop
 80025d4:	0800884c 	.word	0x0800884c
 80025d8:	08008854 	.word	0x08008854
 80025dc:	20000540 	.word	0x20000540
 80025e0:	200004bc 	.word	0x200004bc
 80025e4:	200002e0 	.word	0x200002e0
 80025e8:	200002e1 	.word	0x200002e1
 80025ec:	200001e0 	.word	0x200001e0
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 80025f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	330e      	adds	r3, #14
 80025fc:	4a7d      	ldr	r2, [pc, #500]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 80025fe:	5cd1      	ldrb	r1, [r2, r3]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002604:	4413      	add	r3, r2
 8002606:	3308      	adds	r3, #8
 8002608:	460a      	mov	r2, r1
 800260a:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 800260c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	330f      	adds	r3, #15
 8002618:	4a76      	ldr	r2, [pc, #472]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 800261a:	5cd1      	ldrb	r1, [r2, r3]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002620:	4413      	add	r3, r2
 8002622:	3320      	adds	r3, #32
 8002624:	460a      	mov	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8002628:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3310      	adds	r3, #16
 8002634:	4a6f      	ldr	r2, [pc, #444]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 8002636:	5cd1      	ldrb	r1, [r2, r3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800263c:	4413      	add	r3, r2
 800263e:	3338      	adds	r3, #56	; 0x38
 8002640:	460a      	mov	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8002644:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	3311      	adds	r3, #17
 8002650:	4a68      	ldr	r2, [pc, #416]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 8002652:	5cd1      	ldrb	r1, [r2, r3]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002658:	4413      	add	r3, r2
 800265a:	3350      	adds	r3, #80	; 0x50
 800265c:	460a      	mov	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8002660:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3312      	adds	r3, #18
 800266c:	4a61      	ldr	r2, [pc, #388]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 800266e:	5cd1      	ldrb	r1, [r2, r3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002674:	4413      	add	r3, r2
 8002676:	3368      	adds	r3, #104	; 0x68
 8002678:	460a      	mov	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 800267c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3313      	adds	r3, #19
 8002688:	4a5a      	ldr	r2, [pc, #360]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	b259      	sxtb	r1, r3
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002692:	4413      	add	r3, r2
 8002694:	3380      	adds	r3, #128	; 0x80
 8002696:	460a      	mov	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 14 + 12 * iChn] | (ublox_Response[6 + 15 + 12 * iChn] << 8));
 800269a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	3314      	adds	r3, #20
 80026a6:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	b219      	sxth	r1, r3
 80026ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3315      	adds	r3, #21
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21b      	sxth	r3, r3
 80026c0:	430b      	orrs	r3, r1
 80026c2:	b219      	sxth	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026c8:	324c      	adds	r2, #76	; 0x4c
 80026ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) (ublox_Response[6 + 16 + 12 * iChn] | (ublox_Response[6 + 17 + 12 * iChn] << 8)  | (ublox_Response[6 + 18 + 12 * iChn] << 16)  | (ublox_Response[6 + 19 + 12 * iChn] << 24));
 80026ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3316      	adds	r3, #22
 80026da:	4a46      	ldr	r2, [pc, #280]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	b219      	sxth	r1, r3
 80026e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	3317      	adds	r3, #23
 80026ec:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	430b      	orrs	r3, r1
 80026f6:	b219      	sxth	r1, r3
 80026f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	3318      	adds	r3, #24
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	b21b      	sxth	r3, r3
 800270c:	430b      	orrs	r3, r1
 800270e:	b219      	sxth	r1, r3
 8002710:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	3319      	adds	r3, #25
 800271c:	4a35      	ldr	r2, [pc, #212]	; (80027f4 <ublox_NavSvinfo_get+0x378>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	b21b      	sxth	r3, r3
 8002724:	430b      	orrs	r3, r1
 8002726:	b219      	sxth	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800272c:	324c      	adds	r2, #76	; 0x4c
 800272e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8002732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002734:	3301      	adds	r3, #1
 8002736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002740:	4293      	cmp	r3, r2
 8002742:	f6ff af55 	blt.w	80025f0 <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <ublox_NavSvinfo_get+0x37c>)
 8002748:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800274c:	ca07      	ldmia	r2, {r0, r1, r2}
 800274e:	c303      	stmia	r3!, {r0, r1}
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	0c12      	lsrs	r2, r2, #16
 8002756:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002758:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800275c:	2319      	movs	r3, #25
 800275e:	220a      	movs	r2, #10
 8002760:	4826      	ldr	r0, [pc, #152]	; (80027fc <ublox_NavSvinfo_get+0x380>)
 8002762:	f003 fe68 	bl	8006436 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f107 0008 	add.w	r0, r7, #8
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <ublox_NavSvinfo_get+0x384>)
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	f005 f8f7 	bl	8007964 <sniprintf>
 8002776:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277a:	b29a      	uxth	r2, r3
 800277c:	f107 0108 	add.w	r1, r7, #8
 8002780:	2319      	movs	r3, #25
 8002782:	481e      	ldr	r0, [pc, #120]	; (80027fc <ublox_NavSvinfo_get+0x380>)
 8002784:	f003 fe57 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	f107 0008 	add.w	r0, r7, #8
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <ublox_NavSvinfo_get+0x388>)
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	f005 f8e6 	bl	8007964 <sniprintf>
 8002798:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800279a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279c:	b29a      	uxth	r2, r3
 800279e:	f107 0108 	add.w	r1, r7, #8
 80027a2:	2319      	movs	r3, #25
 80027a4:	4815      	ldr	r0, [pc, #84]	; (80027fc <ublox_NavSvinfo_get+0x380>)
 80027a6:	f003 fe46 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	795b      	ldrb	r3, [r3, #5]
 80027ae:	f107 0008 	add.w	r0, r7, #8
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <ublox_NavSvinfo_get+0x38c>)
 80027b4:	2140      	movs	r1, #64	; 0x40
 80027b6:	f005 f8d5 	bl	8007964 <sniprintf>
 80027ba:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80027bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f107 0108 	add.w	r1, r7, #8
 80027c4:	2319      	movs	r3, #25
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <ublox_NavSvinfo_get+0x380>)
 80027c8:	f003 fe35 	bl	8006436 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	88db      	ldrh	r3, [r3, #6]
 80027d0:	f107 0008 	add.w	r0, r7, #8
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <ublox_NavSvinfo_get+0x390>)
 80027d6:	2140      	movs	r1, #64	; 0x40
 80027d8:	f005 f8c4 	bl	8007964 <sniprintf>
 80027dc:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80027de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f107 0108 	add.w	r1, r7, #8
 80027e6:	2319      	movs	r3, #25
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <ublox_NavSvinfo_get+0x380>)
 80027ea:	f003 fe24 	bl	8006436 <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80027f2:	e0d2      	b.n	800299a <ublox_NavSvinfo_get+0x51e>
 80027f4:	200001e0 	.word	0x200001e0
 80027f8:	08008628 	.word	0x08008628
 80027fc:	20000540 	.word	0x20000540
 8002800:	080084d8 	.word	0x080084d8
 8002804:	080086f4 	.word	0x080086f4
 8002808:	08008710 	.word	0x08008710
 800280c:	08008730 	.word	0x08008730
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	4a77      	ldr	r2, [pc, #476]	; (80029f4 <ublox_NavSvinfo_get+0x578>)
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	4618      	mov	r0, r3
 800281a:	f005 f8a3 	bl	8007964 <sniprintf>
 800281e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002822:	b29a      	uxth	r2, r3
 8002824:	f107 0108 	add.w	r1, r7, #8
 8002828:	2319      	movs	r3, #25
 800282a:	4873      	ldr	r0, [pc, #460]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 800282c:	f003 fe03 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002834:	4413      	add	r3, r2
 8002836:	3308      	adds	r3, #8
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f107 0008 	add.w	r0, r7, #8
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <ublox_NavSvinfo_get+0x580>)
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	f005 f88d 	bl	8007964 <sniprintf>
 800284a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800284c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800284e:	b29a      	uxth	r2, r3
 8002850:	f107 0108 	add.w	r1, r7, #8
 8002854:	2319      	movs	r3, #25
 8002856:	4868      	ldr	r0, [pc, #416]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002858:	f003 fded 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002860:	4413      	add	r3, r2
 8002862:	3320      	adds	r3, #32
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f107 0008 	add.w	r0, r7, #8
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800286e:	4a64      	ldr	r2, [pc, #400]	; (8002a00 <ublox_NavSvinfo_get+0x584>)
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	f005 f877 	bl	8007964 <sniprintf>
 8002876:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287a:	b29a      	uxth	r2, r3
 800287c:	f107 0108 	add.w	r1, r7, #8
 8002880:	2319      	movs	r3, #25
 8002882:	485d      	ldr	r0, [pc, #372]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002884:	f003 fdd7 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288c:	4413      	add	r3, r2
 800288e:	3338      	adds	r3, #56	; 0x38
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f107 0008 	add.w	r0, r7, #8
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <ublox_NavSvinfo_get+0x588>)
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	f005 f861 	bl	8007964 <sniprintf>
 80028a2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80028a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	f107 0108 	add.w	r1, r7, #8
 80028ac:	2319      	movs	r3, #25
 80028ae:	4852      	ldr	r0, [pc, #328]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 80028b0:	f003 fdc1 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b8:	4413      	add	r3, r2
 80028ba:	3350      	adds	r3, #80	; 0x50
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f107 0008 	add.w	r0, r7, #8
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c6:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <ublox_NavSvinfo_get+0x58c>)
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	f005 f84b 	bl	8007964 <sniprintf>
 80028ce:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80028d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f107 0108 	add.w	r1, r7, #8
 80028d8:	2319      	movs	r3, #25
 80028da:	4847      	ldr	r0, [pc, #284]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 80028dc:	f003 fdab 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e4:	4413      	add	r3, r2
 80028e6:	3368      	adds	r3, #104	; 0x68
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f107 0008 	add.w	r0, r7, #8
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	4a46      	ldr	r2, [pc, #280]	; (8002a0c <ublox_NavSvinfo_get+0x590>)
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	f005 f835 	bl	8007964 <sniprintf>
 80028fa:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80028fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fe:	b29a      	uxth	r2, r3
 8002900:	f107 0108 	add.w	r1, r7, #8
 8002904:	2319      	movs	r3, #25
 8002906:	483c      	ldr	r0, [pc, #240]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002908:	f003 fd95 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002910:	4413      	add	r3, r2
 8002912:	3380      	adds	r3, #128	; 0x80
 8002914:	f993 3000 	ldrsb.w	r3, [r3]
 8002918:	f107 0008 	add.w	r0, r7, #8
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002920:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <ublox_NavSvinfo_get+0x594>)
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	f005 f81e 	bl	8007964 <sniprintf>
 8002928:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800292a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292c:	b29a      	uxth	r2, r3
 800292e:	f107 0108 	add.w	r1, r7, #8
 8002932:	2319      	movs	r3, #25
 8002934:	4830      	ldr	r0, [pc, #192]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002936:	f003 fd7e 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293e:	4413      	add	r3, r2
 8002940:	3380      	adds	r3, #128	; 0x80
 8002942:	f993 3000 	ldrsb.w	r3, [r3]
 8002946:	f107 0008 	add.w	r0, r7, #8
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294e:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <ublox_NavSvinfo_get+0x598>)
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	f005 f807 	bl	8007964 <sniprintf>
 8002956:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295a:	b29a      	uxth	r2, r3
 800295c:	f107 0108 	add.w	r1, r7, #8
 8002960:	2319      	movs	r3, #25
 8002962:	4825      	ldr	r0, [pc, #148]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002964:	f003 fd67 	bl	8006436 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800296c:	3232      	adds	r2, #50	; 0x32
 800296e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002972:	f107 0008 	add.w	r0, r7, #8
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297a:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <ublox_NavSvinfo_get+0x59c>)
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	f004 fff1 	bl	8007964 <sniprintf>
 8002982:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8002984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002986:	b29a      	uxth	r2, r3
 8002988:	f107 0108 	add.w	r1, r7, #8
 800298c:	2319      	movs	r3, #25
 800298e:	481a      	ldr	r0, [pc, #104]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 8002990:	f003 fd51 	bl	8006436 <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8002994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002996:	3301      	adds	r3, #1
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	791b      	ldrb	r3, [r3, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f6ff af34 	blt.w	8002810 <ublox_NavSvinfo_get+0x394>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <ublox_NavSvinfo_get+0x5a0>)
 80029aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4611      	mov	r1, r2
 80029b2:	8019      	strh	r1, [r3, #0]
 80029b4:	3302      	adds	r3, #2
 80029b6:	0c12      	lsrs	r2, r2, #16
 80029b8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80029ba:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029be:	2319      	movs	r3, #25
 80029c0:	2202      	movs	r2, #2
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 80029c4:	f003 fd37 	bl	8006436 <HAL_UART_Transmit>
		{
 80029c8:	e00f      	b.n	80029ea <ublox_NavSvinfo_get+0x56e>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <ublox_NavSvinfo_get+0x5a4>)
 80029cc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80029d0:	461d      	mov	r5, r3
 80029d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d6:	682b      	ldr	r3, [r5, #0]
 80029d8:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80029da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029de:	2319      	movs	r3, #25
 80029e0:	2210      	movs	r2, #16
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <ublox_NavSvinfo_get+0x57c>)
 80029e4:	f003 fd27 	bl	8006436 <HAL_UART_Transmit>
		}
#endif
	}
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3788      	adds	r7, #136	; 0x88
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdb0      	pop	{r4, r5, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	0800874c 	.word	0x0800874c
 80029f8:	20000540 	.word	0x20000540
 80029fc:	08008754 	.word	0x08008754
 8002a00:	08008770 	.word	0x08008770
 8002a04:	0800878c 	.word	0x0800878c
 8002a08:	080087ac 	.word	0x080087ac
 8002a0c:	080087cc 	.word	0x080087cc
 8002a10:	080087ec 	.word	0x080087ec
 8002a14:	0800880c 	.word	0x0800880c
 8002a18:	0800882c 	.word	0x0800882c
 8002a1c:	08008634 	.word	0x08008634
 8002a20:	08008638 	.word	0x08008638

08002a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a28:	f7fe fab2 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a2e:	e003      	b.n	8002a38 <LoopCopyDataInit>

08002a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a36:	3104      	adds	r1, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a38:	480a      	ldr	r0, [pc, #40]	; (8002a64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a40:	d3f6      	bcc.n	8002a30 <CopyDataInit>
	ldr	r2, =_sbss
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a44:	e002      	b.n	8002a4c <LoopFillZerobss>

08002a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a48:	f842 3b04 	str.w	r3, [r2], #4

08002a4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <LoopForever+0x16>)
	cmp	r2, r3
 8002a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a50:	d3f9      	bcc.n	8002a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a52:	f004 ff4d 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a56:	f7fd ffc3 	bl	80009e0 <main>

08002a5a <LoopForever>:

LoopForever:
    b LoopForever
 8002a5a:	e7fe      	b.n	8002a5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a5c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002a60:	08008904 	.word	0x08008904
	ldr	r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a68:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002a6c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002a70:	200005d8 	.word	0x200005d8

08002a74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC1_IRQHandler>

08002a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f000 ffda 	bl	8003a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a86:	200f      	movs	r0, #15
 8002a88:	f7fe f9b6 	bl	8000df8 <HAL_InitTick>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	71fb      	strb	r3, [r7, #7]
 8002a96:	e001      	b.n	8002a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a98:	f7fe f98a 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000008 	.word	0x20000008
 8002acc:	200005c4 	.word	0x200005c4

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200005c4 	.word	0x200005c4

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000008 	.word	0x20000008

08002b30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3360      	adds	r3, #96	; 0x60
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <LL_ADC_SetOffset+0x44>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	03fff000 	.word	0x03fff000

08002be0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3360      	adds	r3, #96	; 0x60
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3330      	adds	r3, #48	; 0x30
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	4413      	add	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	211f      	movs	r1, #31
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 011f 	and.w	r1, r3, #31
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0d1b      	lsrs	r3, r3, #20
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2107      	movs	r1, #7
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0d1b      	lsrs	r3, r3, #20
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0318 	and.w	r3, r3, #24
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d14:	40d9      	lsrs	r1, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	400b      	ands	r3, r1
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	0007ffff 	.word	0x0007ffff

08002d38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6093      	str	r3, [r2, #8]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <LL_ADC_IsEnabled+0x18>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_ADC_IsEnabled+0x1a>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d101      	bne.n	8002e12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e12c      	b.n	80030bc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fd fbdd 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff67 	bl	8002d5c <LL_ADC_IsDeepPowerDownEnabled>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff4d 	bl	8002d38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff82 	bl	8002dac <LL_ADC_IsInternalRegulatorEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff66 	bl	8002d84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb8:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_ADC_Init+0x27c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	4a82      	ldr	r2, [pc, #520]	; (80030c8 <HAL_ADC_Init+0x280>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff64 	bl	8002dac <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff75 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8002f10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80c5 	bne.w	80030aa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 80c1 	bne.w	80030aa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff49 	bl	8002dd4 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f48:	4860      	ldr	r0, [pc, #384]	; (80030cc <HAL_ADC_Init+0x284>)
 8002f4a:	f7ff ff43 	bl	8002dd4 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	485d      	ldr	r0, [pc, #372]	; (80030d0 <HAL_ADC_Init+0x288>)
 8002f5c:	f7ff fde8 	bl	8002b30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e5b      	ldrb	r3, [r3, #25]
 8002f64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	045b      	lsls	r3, r3, #17
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_ADC_Init+0x28c>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff12 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8002fd6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff1f 	bl	8002e20 <LL_ADC_INJ_IsConversionOngoing>
 8002fe2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13d      	bne.n	8003066 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13a      	bne.n	8003066 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ffc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	430b      	orrs	r3, r1
 8003018:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003020:	2b01      	cmp	r3, #1
 8003022:	d118      	bne.n	8003056 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003046:	430a      	orrs	r2, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	611a      	str	r2, [r3, #16]
 8003054:	e007      	b.n	8003066 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10c      	bne.n	8003088 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f023 010f 	bic.w	r1, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
 8003086:	e007      	b.n	8003098 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 020f 	bic.w	r2, r2, #15
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f023 0303 	bic.w	r3, r3, #3
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000000 	.word	0x20000000
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	50040000 	.word	0x50040000
 80030d0:	50040300 	.word	0x50040300
 80030d4:	fff0c007 	.word	0xfff0c007

080030d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0b6      	sub	sp, #216	; 0xd8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x22>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e3b9      	b.n	800386e <HAL_ADC_ConfigChannel+0x796>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe77 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 839e 	bne.w	8003850 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d824      	bhi.n	8003166 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	3b02      	subs	r3, #2
 8003122:	2b03      	cmp	r3, #3
 8003124:	d81b      	bhi.n	800315e <HAL_ADC_ConfigChannel+0x86>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_ADC_ConfigChannel+0x54>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003145 	.word	0x08003145
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003155 	.word	0x08003155
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	220c      	movs	r2, #12
 8003140:	605a      	str	r2, [r3, #4]
          break;
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2212      	movs	r2, #18
 8003148:	605a      	str	r2, [r3, #4]
          break;
 800314a:	e00d      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2218      	movs	r2, #24
 8003150:	605a      	str	r2, [r3, #4]
          break;
 8003152:	e009      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315a:	605a      	str	r2, [r3, #4]
          break;
 800315c:	e004      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2206      	movs	r2, #6
 8003162:	605a      	str	r2, [r3, #4]
          break;
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003166:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	f7ff fd64 	bl	8002c42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fe3b 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8003184:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fe47 	bl	8002e20 <LL_ADC_INJ_IsConversionOngoing>
 8003192:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003196:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 81a6 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 81a1 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff fd6f 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00a      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ee:	f7ff fcd3 	bl	8002b98 <LL_ADC_SetOffset>
 80031f2:	e17b      	b.n	80034ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fcf0 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x148>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fce5 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 021f 	and.w	r2, r3, #31
 800321e:	e01e      	b.n	800325e <HAL_ADC_ConfigChannel+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fcda 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e004      	b.n	800325c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x19e>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	e018      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x1d0>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800328a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800328e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800329e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fca9 	bl	8002c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fc8d 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fc82 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	e01e      	b.n	8003324 <HAL_ADC_ConfigChannel+0x24c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc77 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800330c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e004      	b.n	8003322 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x264>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	e018      	b.n	800336e <HAL_ADC_ConfigChannel+0x296>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e004      	b.n	800336e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800336e:	429a      	cmp	r2, r3
 8003370:	d106      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fc46 	bl	8002c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fc2a 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x2d4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fc1f 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 80033a2:	4603      	mov	r3, r0
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	e01e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x312>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fc14 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e004      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80033de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x32a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	e016      	b.n	8003430 <HAL_ADC_ConfigChannel+0x358>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800341a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e004      	b.n	8003430 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003430:	429a      	cmp	r2, r3
 8003432:	d106      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2200      	movs	r2, #0
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fbe5 	bl	8002c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2103      	movs	r1, #3
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fbc9 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_ADC_ConfigChannel+0x396>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2103      	movs	r1, #3
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fbbe 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	e017      	b.n	800349e <HAL_ADC_ConfigChannel+0x3c6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2103      	movs	r1, #3
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fbb3 	bl	8002be0 <LL_ADC_GetOffsetChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003488:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800348a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x3de>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	e011      	b.n	80034da <HAL_ADC_ConfigChannel+0x402>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e003      	b.n	80034da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034da:	429a      	cmp	r2, r3
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2103      	movs	r1, #3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fb90 	bl	8002c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fc6f 	bl	8002dd4 <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 813f 	bne.w	800377c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	461a      	mov	r2, r3
 800350c:	f7ff fbf0 	bl	8002cf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a8e      	ldr	r2, [pc, #568]	; (8003750 <HAL_ADC_ConfigChannel+0x678>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f040 8130 	bne.w	800377c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x46c>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2b09      	cmp	r3, #9
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e019      	b.n	8003578 <HAL_ADC_ConfigChannel+0x4a0>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e003      	b.n	8003568 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2b09      	cmp	r3, #9
 8003570:	bf94      	ite	ls
 8003572:	2301      	movls	r3, #1
 8003574:	2300      	movhi	r3, #0
 8003576:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003578:	2b00      	cmp	r3, #0
 800357a:	d079      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x4c0>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	3301      	adds	r3, #1
 8003590:	069b      	lsls	r3, r3, #26
 8003592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003596:	e015      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x4ec>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	069b      	lsls	r3, r3, #26
 80035c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x50c>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	3301      	adds	r3, #1
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	e017      	b.n	8003614 <HAL_ADC_ConfigChannel+0x53c>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_ADC_ConfigChannel+0x562>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	3301      	adds	r3, #1
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	051b      	lsls	r3, r3, #20
 8003638:	e018      	b.n	800366c <HAL_ADC_ConfigChannel+0x594>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366c:	430b      	orrs	r3, r1
 800366e:	e080      	b.n	8003772 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_ADC_ConfigChannel+0x5b4>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	069b      	lsls	r3, r3, #26
 8003686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368a:	e015      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x5e0>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e003      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x600>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	3301      	adds	r3, #1
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	e017      	b.n	8003708 <HAL_ADC_ConfigChannel+0x630>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
  return result;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e003      	b.n	80036fc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x65c>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	3301      	adds	r3, #1
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	3b1e      	subs	r3, #30
 800372c:	051b      	lsls	r3, r3, #20
 800372e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003732:	e01d      	b.n	8003770 <HAL_ADC_ConfigChannel+0x698>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	613b      	str	r3, [r7, #16]
  return result;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e005      	b.n	800375c <HAL_ADC_ConfigChannel+0x684>
 8003750:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	3b1e      	subs	r3, #30
 800376a:	051b      	lsls	r3, r3, #20
 800376c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003770:	430b      	orrs	r3, r1
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	4619      	mov	r1, r3
 8003778:	f7ff fa8f 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_ADC_ConfigChannel+0x7a0>)
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d06c      	beq.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003788:	483c      	ldr	r0, [pc, #240]	; (800387c <HAL_ADC_ConfigChannel+0x7a4>)
 800378a:	f7ff f9f7 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 800378e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3a      	ldr	r2, [pc, #232]	; (8003880 <HAL_ADC_ConfigChannel+0x7a8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d127      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800379c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d121      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a35      	ldr	r2, [pc, #212]	; (8003884 <HAL_ADC_ConfigChannel+0x7ac>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d157      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ba:	4619      	mov	r1, r3
 80037bc:	482f      	ldr	r0, [pc, #188]	; (800387c <HAL_ADC_ConfigChannel+0x7a4>)
 80037be:	f7ff f9ca 	bl	8002b56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_ADC_ConfigChannel+0x7b0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_ADC_ConfigChannel+0x7b4>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037dc:	e002      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f9      	bne.n	80037de <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ea:	e03a      	b.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <HAL_ADC_ConfigChannel+0x7b8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d113      	bne.n	800381e <HAL_ADC_ConfigChannel+0x746>
 80037f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_ADC_ConfigChannel+0x7ac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d12a      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003814:	4619      	mov	r1, r3
 8003816:	4819      	ldr	r0, [pc, #100]	; (800387c <HAL_ADC_ConfigChannel+0x7a4>)
 8003818:	f7ff f99d 	bl	8002b56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800381c:	e021      	b.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <HAL_ADC_ConfigChannel+0x7bc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d11c      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a12      	ldr	r2, [pc, #72]	; (8003884 <HAL_ADC_ConfigChannel+0x7ac>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003846:	4619      	mov	r1, r3
 8003848:	480c      	ldr	r0, [pc, #48]	; (800387c <HAL_ADC_ConfigChannel+0x7a4>)
 800384a:	f7ff f984 	bl	8002b56 <LL_ADC_SetCommonPathInternalCh>
 800384e:	e008      	b.n	8003862 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800386a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800386e:	4618      	mov	r0, r3
 8003870:	37d8      	adds	r7, #216	; 0xd8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	80080000 	.word	0x80080000
 800387c:	50040300 	.word	0x50040300
 8003880:	c7520000 	.word	0xc7520000
 8003884:	50040000 	.word	0x50040000
 8003888:	20000000 	.word	0x20000000
 800388c:	053e2d63 	.word	0x053e2d63
 8003890:	cb840000 	.word	0xcb840000
 8003894:	80000001 	.word	0x80000001

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db12      	blt.n	8003970 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	490a      	ldr	r1, [pc, #40]	; (800397c <__NVIC_DisableIRQ+0x44>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	3320      	adds	r3, #32
 8003960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003964:	f3bf 8f4f 	dsb	sy
}
 8003968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800396a:	f3bf 8f6f 	isb	sy
}
 800396e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff28 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a62:	f7ff ff3d 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6978      	ldr	r0, [r7, #20]
 8003a6e:	f7ff ffb1 	bl	80039d4 <NVIC_EncodePriority>
 8003a72:	4602      	mov	r2, r0
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff80 	bl	8003980 <__NVIC_SetPriority>
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff30 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff40 	bl	8003938 <__NVIC_DisableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 020e 	bic.w	r2, r2, #14
 8003af8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f003 021c 	and.w	r2, r3, #28
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d005      	beq.n	8003b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2204      	movs	r2, #4
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e029      	b.n	8003bb4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020e 	bic.w	r2, r2, #14
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f003 021c 	and.w	r2, r3, #28
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
    }
  }
  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bce:	e148      	b.n	8003e62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 813a 	beq.w	8003e5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d00b      	beq.n	8003c08 <HAL_GPIO_Init+0x48>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d007      	beq.n	8003c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bfc:	2b11      	cmp	r3, #17
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b12      	cmp	r3, #18
 8003c06:	d130      	bne.n	8003c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c3e:	2201      	movs	r2, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0201 	and.w	r2, r3, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0xea>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d123      	bne.n	8003cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	08da      	lsrs	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3208      	adds	r2, #8
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8094 	beq.w	8003e5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d34:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d4c:	4a4d      	ldr	r2, [pc, #308]	; (8003e84 <HAL_GPIO_Init+0x2c4>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d76:	d00d      	beq.n	8003d94 <HAL_GPIO_Init+0x1d4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a43      	ldr	r2, [pc, #268]	; (8003e88 <HAL_GPIO_Init+0x2c8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <HAL_GPIO_Init+0x1d0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_GPIO_Init+0x2cc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_GPIO_Init+0x1cc>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e004      	b.n	8003d96 <HAL_GPIO_Init+0x1d6>
 8003d8c:	2307      	movs	r3, #7
 8003d8e:	e002      	b.n	8003d96 <HAL_GPIO_Init+0x1d6>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_GPIO_Init+0x1d6>
 8003d94:	2300      	movs	r3, #0
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	f002 0203 	and.w	r2, r2, #3
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	4093      	lsls	r3, r2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da6:	4937      	ldr	r1, [pc, #220]	; (8003e84 <HAL_GPIO_Init+0x2c4>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e02:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e32:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f aeaf 	bne.w	8003bd0 <HAL_GPIO_Init+0x10>
  }
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010000 	.word	0x40010000
 8003e88:	48000400 	.word	0x48000400
 8003e8c:	48000800 	.word	0x48000800
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ea2:	e0ab      	b.n	8003ffc <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 809e 	beq.w	8003ff6 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003eba:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_GPIO_DeInit+0x184>)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ee2:	d00d      	beq.n	8003f00 <HAL_GPIO_DeInit+0x6c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_GPIO_DeInit+0x188>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <HAL_GPIO_DeInit+0x68>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a4c      	ldr	r2, [pc, #304]	; (8004020 <HAL_GPIO_DeInit+0x18c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_GPIO_DeInit+0x64>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e004      	b.n	8003f02 <HAL_GPIO_DeInit+0x6e>
 8003ef8:	2307      	movs	r3, #7
 8003efa:	e002      	b.n	8003f02 <HAL_GPIO_DeInit+0x6e>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_GPIO_DeInit+0x6e>
 8003f00:	2300      	movs	r3, #0
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d132      	bne.n	8003f78 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	4942      	ldr	r1, [pc, #264]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	493e      	ldr	r1, [pc, #248]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	493b      	ldr	r1, [pc, #236]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_GPIO_DeInit+0x190>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f5a:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <HAL_GPIO_DeInit+0x184>)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	482b      	ldr	r0, [pc, #172]	; (8004018 <HAL_GPIO_DeInit+0x184>)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	400a      	ands	r2, r1
 8003f72:	3302      	adds	r3, #2
 8003f74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2103      	movs	r1, #3
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	08da      	lsrs	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3208      	adds	r2, #8
 8003f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	08d2      	lsrs	r2, r2, #3
 8003fac:	4019      	ands	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2103      	movs	r1, #3
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f af4d 	bne.w	8003ea4 <HAL_GPIO_DeInit+0x10>
  }
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000
 800401c:	48000400 	.word	0x48000400
 8004020:	48000800 	.word	0x48000800
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004044:	e002      	b.n	800404c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e081      	b.n	800416e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fc44 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	e006      	b.n	80040e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d104      	bne.n	80040f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	ea42 0103 	orr.w	r1, r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b20      	cmp	r3, #32
 800418a:	d138      	bne.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004196:	2302      	movs	r3, #2
 8004198:	e032      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2224      	movs	r2, #36	; 0x24
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d139      	bne.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422c:	2302      	movs	r3, #2
 800422e:	e033      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800425e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000

080042c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_PWREx_GetVoltageRange+0x18>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40007000 	.word	0x40007000

080042e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ee:	d130      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d038      	beq.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2232      	movs	r2, #50	; 0x32
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0c9b      	lsrs	r3, r3, #18
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004324:	e002      	b.n	800432c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3b01      	subs	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d102      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f2      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d110      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00f      	b.n	8004372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d007      	beq.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004368:	4a05      	ldr	r2, [pc, #20]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800436e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40007000 	.word	0x40007000
 8004384:	20000000 	.word	0x20000000
 8004388:	431bde83 	.word	0x431bde83

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f000 bc11 	b.w	8004bc2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a0:	4ba0      	ldr	r3, [pc, #640]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043aa:	4b9e      	ldr	r3, [pc, #632]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80e4 	beq.w	800458a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4c>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	f040 808b 	bne.w	80044e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	f040 8087 	bne.w	80044e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043d8:	4b92      	ldr	r3, [pc, #584]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x64>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e3e8      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_RCC_OscConfig+0x7e>
 8004400:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004408:	e005      	b.n	8004416 <HAL_RCC_OscConfig+0x8a>
 800440a:	4b86      	ldr	r3, [pc, #536]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004416:	4293      	cmp	r3, r2
 8004418:	d223      	bcs.n	8004462 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fdac 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e3c9      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442e:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7c      	ldr	r2, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b7a      	ldr	r3, [pc, #488]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4977      	ldr	r1, [pc, #476]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444c:	4b75      	ldr	r3, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	4972      	ldr	r1, [pc, #456]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	e025      	b.n	80044ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6f      	ldr	r2, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004468:	f043 0308 	orr.w	r3, r3, #8
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b6d      	ldr	r3, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	496a      	ldr	r1, [pc, #424]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004480:	4b68      	ldr	r3, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	4965      	ldr	r1, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd6c 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e389      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ae:	f000 fc6f 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	495a      	ldr	r1, [pc, #360]	; (8004628 <HAL_RCC_OscConfig+0x29c>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_OscConfig+0x2a0>)
 80044cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ce:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x2a4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc fc90 	bl	8000df8 <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d052      	beq.n	8004588 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	e36d      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d032      	beq.n	8004554 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4c      	ldr	r2, [pc, #304]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fa:	f7fe fae9 	bl	8002ad0 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004502:	f7fe fae5 	bl	8002ad0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e356      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004520:	4b40      	ldr	r3, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a3f      	ldr	r2, [pc, #252]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	493a      	ldr	r1, [pc, #232]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453e:	4b39      	ldr	r3, [pc, #228]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	4935      	ldr	r1, [pc, #212]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
 8004552:	e01a      	b.n	800458a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004554:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a32      	ldr	r2, [pc, #200]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004560:	f7fe fab6 	bl	8002ad0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004568:	f7fe fab2 	bl	8002ad0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e323      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1dc>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d073      	beq.n	800467e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x21c>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d10e      	bne.n	80045c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d063      	beq.n	800467c <HAL_RCC_OscConfig+0x2f0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d15f      	bne.n	800467c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e300      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x24c>
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0x288>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x270>
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a0f      	ldr	r2, [pc, #60]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0x288>
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a08      	ldr	r2, [pc, #32]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a05      	ldr	r2, [pc, #20]	; (8004624 <HAL_RCC_OscConfig+0x298>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe fa58 	bl	8002ad0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	e010      	b.n	8004646 <HAL_RCC_OscConfig+0x2ba>
 8004624:	40021000 	.word	0x40021000
 8004628:	08008878 	.word	0x08008878
 800462c:	20000000 	.word	0x20000000
 8004630:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe fa4c 	bl	8002ad0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e2bd      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004646:	4baf      	ldr	r3, [pc, #700]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x2a8>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe fa3c 	bl	8002ad0 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe fa38 	bl	8002ad0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e2a9      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466e:	4ba5      	ldr	r3, [pc, #660]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x2d0>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d060      	beq.n	800474c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d005      	beq.n	800469c <HAL_RCC_OscConfig+0x310>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d119      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d116      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800469c:	4b99      	ldr	r3, [pc, #612]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_OscConfig+0x328>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e286      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b93      	ldr	r3, [pc, #588]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4990      	ldr	r1, [pc, #576]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c8:	e040      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d023      	beq.n	800471a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d2:	4b8c      	ldr	r3, [pc, #560]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a8b      	ldr	r2, [pc, #556]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fe f9f7 	bl	8002ad0 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e6:	f7fe f9f3 	bl	8002ad0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e264      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b82      	ldr	r3, [pc, #520]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b7f      	ldr	r3, [pc, #508]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	497c      	ldr	r1, [pc, #496]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
 8004718:	e018      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471a:	4b7a      	ldr	r3, [pc, #488]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a79      	ldr	r2, [pc, #484]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fe f9d3 	bl	8002ad0 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fe f9cf 	bl	8002ad0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e240      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004740:	4b70      	ldr	r3, [pc, #448]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03c      	beq.n	80047d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004760:	4b68      	ldr	r3, [pc, #416]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004766:	4a67      	ldr	r2, [pc, #412]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe f9ae 	bl	8002ad0 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004778:	f7fe f9aa 	bl	8002ad0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e21b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800478a:	4b5e      	ldr	r3, [pc, #376]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ef      	beq.n	8004778 <HAL_RCC_OscConfig+0x3ec>
 8004798:	e01b      	b.n	80047d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b5a      	ldr	r3, [pc, #360]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	4a58      	ldr	r2, [pc, #352]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fe f991 	bl	8002ad0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fe f98d 	bl	8002ad0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1fe      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c4:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ef      	bne.n	80047b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a6 	beq.w	800492c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047e4:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10d      	bne.n	800480c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b44      	ldr	r3, [pc, #272]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4a43      	ldr	r2, [pc, #268]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
 80047fc:	4b41      	ldr	r3, [pc, #260]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480c:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <HAL_RCC_OscConfig+0x57c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d118      	bne.n	800484a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCC_OscConfig+0x57c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_RCC_OscConfig+0x57c>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004824:	f7fe f954 	bl	8002ad0 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fe f950 	bl	8002ad0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1c1      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <HAL_RCC_OscConfig+0x57c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <HAL_RCC_OscConfig+0x4d8>
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004862:	e024      	b.n	80048ae <HAL_RCC_OscConfig+0x522>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d110      	bne.n	800488e <HAL_RCC_OscConfig+0x502>
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	4a24      	ldr	r2, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487c:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a20      	ldr	r2, [pc, #128]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488c:	e00f      	b.n	80048ae <HAL_RCC_OscConfig+0x522>
 800488e:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80048a6:	f023 0304 	bic.w	r3, r3, #4
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fe f90b 	bl	8002ad0 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fe f907 	bl	8002ad0 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e176      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x578>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ed      	beq.n	80048be <HAL_RCC_OscConfig+0x532>
 80048e2:	e01a      	b.n	800491a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe f8f4 	bl	8002ad0 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ea:	e00f      	b.n	800490c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe f8f0 	bl	8002ad0 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d906      	bls.n	800490c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e15f      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	4baa      	ldr	r3, [pc, #680]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e8      	bne.n	80048ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4ba5      	ldr	r3, [pc, #660]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	4aa4      	ldr	r2, [pc, #656]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01c      	beq.n	800497a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004940:	4b9d      	ldr	r3, [pc, #628]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004946:	4a9c      	ldr	r2, [pc, #624]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fe f8be 	bl	8002ad0 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004958:	f7fe f8ba 	bl	8002ad0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e12b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800496a:	4b93      	ldr	r3, [pc, #588]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <HAL_RCC_OscConfig+0x5cc>
 8004978:	e01b      	b.n	80049b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800497a:	4b8f      	ldr	r3, [pc, #572]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 800497c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004980:	4a8d      	ldr	r2, [pc, #564]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fe f8a1 	bl	8002ad0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004992:	f7fe f89d 	bl	8002ad0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e10e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049a4:	4b84      	ldr	r3, [pc, #528]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8102 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 80c5 	bne.w	8004b50 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049c6:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 0203 	and.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d12c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	3b01      	subs	r3, #1
 80049e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d123      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d11b      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d113      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d067      	beq.n	8004b04 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d062      	beq.n	8004b00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0bb      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5a      	ldr	r2, [pc, #360]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a56:	f7fe f83b 	bl	8002ad0 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fe f837 	bl	8002ad0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0a8      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a70:	4b51      	ldr	r3, [pc, #324]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a7c:	4b4e      	ldr	r3, [pc, #312]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	4b4e      	ldr	r3, [pc, #312]	; (8004bbc <HAL_RCC_OscConfig+0x830>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	4311      	orrs	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a96:	0212      	lsls	r2, r2, #8
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0552      	lsls	r2, r2, #21
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aaa:	0852      	lsrs	r2, r2, #1
 8004aac:	3a01      	subs	r2, #1
 8004aae:	0652      	lsls	r2, r2, #25
 8004ab0:	4311      	orrs	r1, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab6:	06d2      	lsls	r2, r2, #27
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	493f      	ldr	r1, [pc, #252]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004acc:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad8:	f7fd fffa 	bl	8002ad0 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fff6 	bl	8002ad0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e067      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afe:	e05f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e05e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b04:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d157      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b10:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b28:	f7fd ffd2 	bl	8002ad0 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd ffce 	bl	8002ad0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e03f      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x7a4>
 8004b4e:	e037      	b.n	8004bc0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d02d      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b60:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b74:	f023 0303 	bic.w	r3, r3, #3
 8004b78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004b80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd ffa1 	bl	8002ad0 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fd ff9d 	bl	8002ad0 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e00e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_RCC_OscConfig+0x82c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x806>
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCC_OscConfig+0x836>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0c8      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 0207 	bic.w	r2, r3, #7
 8004bf6:	4961      	ldr	r1, [pc, #388]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b0      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d04c      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c24:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d121      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e09e      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d107      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d115      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e092      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c54:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e086      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c64:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e07e      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c74:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 0203 	bic.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	493f      	ldr	r1, [pc, #252]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c86:	f7fd ff23 	bl	8002ad0 <HAL_GetTick>
 8004c8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fd ff1f 	bl	8002ad0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e066      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca4:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 020c 	and.w	r2, r3, #12
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d1eb      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc2:	4b2f      	ldr	r3, [pc, #188]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	492c      	ldr	r1, [pc, #176]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d210      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 0207 	bic.w	r2, r3, #7
 8004cea:	4924      	ldr	r1, [pc, #144]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_ClockConfig+0x1b0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e036      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4918      	ldr	r1, [pc, #96]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4910      	ldr	r1, [pc, #64]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d42:	f000 f825 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490c      	ldr	r1, [pc, #48]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc f846 	bl	8000df8 <HAL_InitTick>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d70:	7afb      	ldrb	r3, [r7, #11]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	40021000 	.word	0x40021000
 8004d84:	08008878 	.word	0x08008878
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	20000004 	.word	0x20000004

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9e:	4b3e      	ldr	r3, [pc, #248]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d11e      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc4:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd0:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e005      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d102      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e08:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e004      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d134      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0xac>
 8004e34:	e005      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e38:	617b      	str	r3, [r7, #20]
      break;
 8004e3a:	e005      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	617b      	str	r3, [r7, #20]
      break;
 8004e40:	e002      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	617b      	str	r3, [r7, #20]
      break;
 8004e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	3301      	adds	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	fb02 f203 	mul.w	r2, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	0e5b      	lsrs	r3, r3, #25
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e88:	69bb      	ldr	r3, [r7, #24]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08008890 	.word	0x08008890
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	00989680 	.word	0x00989680

08004ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000000 	.word	0x20000000

08004ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec4:	f7ff fff0 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4904      	ldr	r1, [pc, #16]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08008888 	.word	0x08008888

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ef0:	f7ff ffda 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4904      	ldr	r1, [pc, #16]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	08008888 	.word	0x08008888

08004f18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	220f      	movs	r2, #15
 8004f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0203 	and.w	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <HAL_RCC_GetClockConfig+0x5c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <HAL_RCC_GetClockConfig+0x5c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_RCC_GetClockConfig+0x60>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0207 	and.w	r2, r3, #7
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40022000 	.word	0x40022000

08004f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f88:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f94:	f7ff f996 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8004f98:	6178      	str	r0, [r7, #20]
 8004f9a:	e014      	b.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	4a24      	ldr	r2, [pc, #144]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa8:	4b22      	ldr	r3, [pc, #136]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f986 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d10b      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d919      	bls.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd8:	d902      	bls.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fda:	2302      	movs	r3, #2
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e013      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e010      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d902      	bls.n	8004ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fec:	2303      	movs	r3, #3
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e00a      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d102      	bne.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e004      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d101      	bne.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005004:	2301      	movs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 0207 	bic.w	r2, r3, #7
 8005010:	4909      	ldr	r1, [pc, #36]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	40022000 	.word	0x40022000

0800503c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005044:	2300      	movs	r3, #0
 8005046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005048:	2300      	movs	r3, #0
 800504a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	2b00      	cmp	r3, #0
 8005056:	d031      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005060:	d01a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005062:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005066:	d814      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800506c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005070:	d10f      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005072:	4bac      	ldr	r3, [pc, #688]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4aab      	ldr	r2, [pc, #684]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800507e:	e00c      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f9cc 	bl	8005424 <RCCEx_PLLSAI1_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005090:	e003      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	74fb      	strb	r3, [r7, #19]
      break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a0:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	499d      	ldr	r1, [pc, #628]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050b6:	e001      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8099 	beq.w	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ce:	4b95      	ldr	r3, [pc, #596]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4b8f      	ldr	r3, [pc, #572]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	4a8e      	ldr	r2, [pc, #568]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58
 80050f0:	4b8c      	ldr	r3, [pc, #560]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fc:	2301      	movs	r3, #1
 80050fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005100:	4b89      	ldr	r3, [pc, #548]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a88      	ldr	r2, [pc, #544]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800510c:	f7fd fce0 	bl	8002ad0 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005112:	e009      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005114:	f7fd fcdc 	bl	8002ad0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	74fb      	strb	r3, [r7, #19]
        break;
 8005126:	e005      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005128:	4b7f      	ldr	r3, [pc, #508]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ef      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d155      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800513a:	4b7a      	ldr	r3, [pc, #488]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	429a      	cmp	r2, r3
 8005154:	d019      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005156:	4b73      	ldr	r3, [pc, #460]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005162:	4b70      	ldr	r3, [pc, #448]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	4a6e      	ldr	r2, [pc, #440]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	4a6a      	ldr	r2, [pc, #424]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800517a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005182:	4a68      	ldr	r2, [pc, #416]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d016      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fd fc9c 	bl	8002ad0 <HAL_GetTick>
 8005198:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519a:	e00b      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fd fc98 	bl	8002ad0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d902      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	74fb      	strb	r3, [r7, #19]
            break;
 80051b2:	e006      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b4:	4b5b      	ldr	r3, [pc, #364]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ec      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c8:	4b56      	ldr	r3, [pc, #344]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d6:	4953      	ldr	r1, [pc, #332]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051de:	e004      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
 80051e4:	e001      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ea:	7c7b      	ldrb	r3, [r7, #17]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f0:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005208:	4b46      	ldr	r3, [pc, #280]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4943      	ldr	r1, [pc, #268]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800522a:	4b3e      	ldr	r3, [pc, #248]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f023 020c 	bic.w	r2, r3, #12
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	493a      	ldr	r1, [pc, #232]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524c:	4b35      	ldr	r3, [pc, #212]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	4932      	ldr	r1, [pc, #200]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526e:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	4929      	ldr	r1, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005290:	4b24      	ldr	r3, [pc, #144]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	4921      	ldr	r1, [pc, #132]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b2:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4918      	ldr	r1, [pc, #96]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4910      	ldr	r1, [pc, #64]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02c      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	4907      	ldr	r1, [pc, #28]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005314:	d10a      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005316:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a02      	ldr	r2, [pc, #8]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800531c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005320:	60d3      	str	r3, [r2, #12]
 8005322:	e015      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f871 	bl	8005424 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d028      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800535c:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	492d      	ldr	r1, [pc, #180]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537a:	d106      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537c:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a27      	ldr	r2, [pc, #156]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005386:	60d3      	str	r3, [r2, #12]
 8005388:	e011      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005392:	d10c      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f842 	bl	8005424 <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01c      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	4915      	ldr	r1, [pc, #84]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2102      	movs	r1, #2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f81f 	bl	8005424 <RCCEx_PLLSAI1_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005416:	7cbb      	ldrb	r3, [r7, #18]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000

08005424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005432:	4b74      	ldr	r3, [pc, #464]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800543e:	4b71      	ldr	r3, [pc, #452]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0203 	and.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d10d      	bne.n	800546a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
       ||
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005456:	4b6b      	ldr	r3, [pc, #428]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
       ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d047      	beq.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
 800546e:	e044      	b.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d018      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0x86>
 8005478:	2b03      	cmp	r3, #3
 800547a:	d825      	bhi.n	80054c8 <RCCEx_PLLSAI1_Config+0xa4>
 800547c:	2b01      	cmp	r3, #1
 800547e:	d002      	beq.n	8005486 <RCCEx_PLLSAI1_Config+0x62>
 8005480:	2b02      	cmp	r3, #2
 8005482:	d009      	beq.n	8005498 <RCCEx_PLLSAI1_Config+0x74>
 8005484:	e020      	b.n	80054c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005486:	4b5f      	ldr	r3, [pc, #380]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11d      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005496:	e01a      	b.n	80054ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005498:	4b5a      	ldr	r3, [pc, #360]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d116      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a8:	e013      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054aa:	4b56      	ldr	r3, [pc, #344]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054b6:	4b53      	ldr	r3, [pc, #332]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054c6:	e006      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e004      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054de:	4b49      	ldr	r3, [pc, #292]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	430b      	orrs	r3, r1
 80054f4:	4943      	ldr	r1, [pc, #268]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d17c      	bne.n	80055fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005500:	4b40      	ldr	r3, [pc, #256]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a3f      	ldr	r2, [pc, #252]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550c:	f7fd fae0 	bl	8002ad0 <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005512:	e009      	b.n	8005528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005514:	f7fd fadc 	bl	8002ad0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d902      	bls.n	8005528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	73fb      	strb	r3, [r7, #15]
        break;
 8005526:	e005      	b.n	8005534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ef      	bne.n	8005514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d15f      	bne.n	80055fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d110      	bne.n	8005562 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005540:	4b30      	ldr	r3, [pc, #192]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	0211      	lsls	r1, r2, #8
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68d2      	ldr	r2, [r2, #12]
 8005556:	06d2      	lsls	r2, r2, #27
 8005558:	430a      	orrs	r2, r1
 800555a:	492a      	ldr	r1, [pc, #168]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	610b      	str	r3, [r1, #16]
 8005560:	e027      	b.n	80055b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d112      	bne.n	800558e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005568:	4b26      	ldr	r3, [pc, #152]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6892      	ldr	r2, [r2, #8]
 8005578:	0211      	lsls	r1, r2, #8
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6912      	ldr	r2, [r2, #16]
 800557e:	0852      	lsrs	r2, r2, #1
 8005580:	3a01      	subs	r2, #1
 8005582:	0552      	lsls	r2, r2, #21
 8005584:	430a      	orrs	r2, r1
 8005586:	491f      	ldr	r1, [pc, #124]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
 800558c:	e011      	b.n	80055b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005596:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6892      	ldr	r2, [r2, #8]
 800559e:	0211      	lsls	r1, r2, #8
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6952      	ldr	r2, [r2, #20]
 80055a4:	0852      	lsrs	r2, r2, #1
 80055a6:	3a01      	subs	r2, #1
 80055a8:	0652      	lsls	r2, r2, #25
 80055aa:	430a      	orrs	r2, r1
 80055ac:	4915      	ldr	r1, [pc, #84]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055be:	f7fd fa87 	bl	8002ad0 <HAL_GetTick>
 80055c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055c4:	e009      	b.n	80055da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055c6:	f7fd fa83 	bl	8002ad0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d902      	bls.n	80055da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	73fb      	strb	r3, [r7, #15]
          break;
 80055d8:	e005      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000

08005608 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d06c      	beq.n	80056f4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fb fb0e 	bl	8000c50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	22ca      	movs	r2, #202	; 0xca
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2253      	movs	r2, #83	; 0x53
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f87c 	bl	800574a <RTC_EnterInitMode>
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d14b      	bne.n	80056f4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800566a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6919      	ldr	r1, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	041a      	lsls	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f87f 	bl	80057b0 <RTC_ExitInitMode>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11b      	bne.n	80056f4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0203 	bic.w	r2, r2, #3
 80056ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005714:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005716:	f7fd f9db 	bl	8002ad0 <HAL_GetTick>
 800571a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800571c:	e009      	b.n	8005732 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800571e:	f7fd f9d7 	bl	8002ad0 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572c:	d901      	bls.n	8005732 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e007      	b.n	8005742 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ee      	beq.n	800571e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d120      	bne.n	80057a6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800576e:	f7fd f9af 	bl	8002ad0 <HAL_GetTick>
 8005772:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005774:	e00d      	b.n	8005792 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005776:	f7fd f9ab 	bl	8002ad0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005784:	d905      	bls.n	8005792 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2203      	movs	r2, #3
 800578e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <RTC_EnterInitMode+0x5c>
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d1e7      	bne.n	8005776 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <RTC_ExitInitMode+0x78>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <RTC_ExitInitMode+0x78>)
 80057c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <RTC_ExitInitMode+0x78>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10c      	bne.n	80057ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ff92 	bl	80056fe <HAL_RTC_WaitForSynchro>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2203      	movs	r2, #3
 80057e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e017      	b.n	800581e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <RTC_ExitInitMode+0x78>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <RTC_ExitInitMode+0x78>)
 80057f4:	f023 0320 	bic.w	r3, r3, #32
 80057f8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ff7f 	bl	80056fe <HAL_RTC_WaitForSynchro>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2203      	movs	r2, #3
 800580a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <RTC_ExitInitMode+0x78>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	4a04      	ldr	r2, [pc, #16]	; (8005828 <RTC_ExitInitMode+0x78>)
 8005818:	f043 0320 	orr.w	r3, r3, #32
 800581c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40002800 	.word	0x40002800

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e095      	b.n	800596a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fa54 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a4:	d902      	bls.n	80058ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Init+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0204 	and.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e049      	b.n	8005a18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f841 	bl	8005a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 fac5 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e03b      	b.n	8005ac4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0x4e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0x4e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d115      	bne.n	8005aae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xa4>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d015      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x8c>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d011      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aac:	e008      	b.n	8005ac0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0201 	orr.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e000      	b.n	8005ac2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	00010007 	.word	0x00010007

08005adc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e049      	b.n	8005b82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb fad4 	bl	80010b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 fa10 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d122      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d11b      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0202 	mvn.w	r2, #2
 8005bb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f999 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005bd2:	e005      	b.n	8005be0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f98b 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f99c 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d122      	bne.n	8005c3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d11b      	bne.n	8005c3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f06f 0204 	mvn.w	r2, #4
 8005c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f96f 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c26:	e005      	b.n	8005c34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f961 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f972 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d122      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d11b      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0208 	mvn.w	r2, #8
 8005c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f945 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c7a:	e005      	b.n	8005c88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f937 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f948 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d122      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d11b      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f06f 0210 	mvn.w	r2, #16
 8005cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f91b 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005cce:	e005      	b.n	8005cdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f90d 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f91e 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10e      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0201 	mvn.w	r2, #1
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fa ff61 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fae3 	bl	8006300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d10e      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fad6 	bl	8006314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8cc 	bl	8005f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0220 	mvn.w	r2, #32
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa96 	bl	80062ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e082      	b.n	8005ee8 <HAL_TIM_IC_ConfigChannel+0x120>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11b      	bne.n	8005e28 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6819      	ldr	r1, [r3, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f000 f902 	bl	8006008 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 020c 	bic.w	r2, r2, #12
 8005e12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6999      	ldr	r1, [r3, #24]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	619a      	str	r2, [r3, #24]
 8005e26:	e05a      	b.n	8005ede <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d11c      	bne.n	8005e68 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6819      	ldr	r1, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f000 f939 	bl	80060b4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6999      	ldr	r1, [r3, #24]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	619a      	str	r2, [r3, #24]
 8005e66:	e03a      	b.n	8005ede <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d11b      	bne.n	8005ea6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f000 f956 	bl	800612e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 020c 	bic.w	r2, r2, #12
 8005e90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
 8005ea4:	e01b      	b.n	8005ede <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f000 f976 	bl	80061a6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ec8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69d9      	ldr	r1, [r3, #28]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	021a      	lsls	r2, r3, #8
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0x20>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d108      	bne.n	8005f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_Base_SetConfig+0xc0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_Base_SetConfig+0xc4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0xa0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a0b      	ldr	r2, [pc, #44]	; (8006000 <TIM_Base_SetConfig+0xc0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0xa0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <TIM_Base_SetConfig+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d103      	bne.n	8005fe8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	615a      	str	r2, [r3, #20]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400

08006008 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <TIM_TI1_SetConfig+0xa4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_TI1_SetConfig+0x3e>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d003      	beq.n	8006046 <TIM_TI1_SetConfig+0x3e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <TIM_TI1_SetConfig+0xa8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <TIM_TI1_SetConfig+0x42>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <TIM_TI1_SetConfig+0x44>
 800604a:	2300      	movs	r3, #0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e003      	b.n	800606a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	b2db      	uxtb	r3, r3
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f023 030a 	bic.w	r3, r3, #10
 8006084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 030a 	and.w	r3, r3, #10
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40014000 	.word	0x40014000

080060b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0210 	bic.w	r2, r3, #16
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	031b      	lsls	r3, r3, #12
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800612e:	b480      	push	{r7}
 8006130:	b087      	sub	sp, #28
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	b2db      	uxtb	r3, r3
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800617e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e04f      	b.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006268:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d004      	beq.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10c      	bne.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40014000 	.word	0x40014000

080062ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e040      	b.n	80063bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fa ffd2 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fccc 	bl	8006d04 <UART_SetConfig>
 800636c:	4603      	mov	r3, r0
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e022      	b.n	80063bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fecc 	bl	800711c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 ff53 	bl	8007260 <UART_CheckIdleState>
 80063ba:	4603      	mov	r3, r0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e02b      	b.n	800642e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2224      	movs	r2, #36	; 0x24
 80063da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2200      	movs	r2, #0
 80063fa:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fb f839 	bl	800147c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	; 0x28
 800643a:	af02      	add	r7, sp, #8
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644a:	2b20      	cmp	r3, #32
 800644c:	f040 8082 	bne.w	8006554 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Transmit+0x26>
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e07a      	b.n	8006556 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x38>
 800646a:	2302      	movs	r3, #2
 800646c:	e073      	b.n	8006556 <HAL_UART_Transmit+0x120>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006484:	f7fc fb24 	bl	8002ad0 <HAL_GetTick>
 8006488:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	88fa      	ldrh	r2, [r7, #6]
 8006496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d108      	bne.n	80064b6 <HAL_UART_Transmit+0x80>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e003      	b.n	80064be <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064c6:	e02d      	b.n	8006524 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 ff0d 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e039      	b.n	8006556 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f4:	b292      	uxth	r2, r2
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3302      	adds	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e008      	b.n	8006512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b292      	uxth	r2, r2
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1cb      	bne.n	80064c8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2200      	movs	r2, #0
 8006538:	2140      	movs	r1, #64	; 0x40
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fed9 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e005      	b.n	8006556 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006572:	2b20      	cmp	r3, #32
 8006574:	d145      	bne.n	8006602 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_UART_Transmit_IT+0x22>
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e03e      	b.n	8006604 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_UART_Transmit_IT+0x34>
 8006590:	2302      	movs	r3, #2
 8006592:	e037      	b.n	8006604 <HAL_UART_Transmit_IT+0xa4>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2221      	movs	r2, #33	; 0x21
 80065c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d107      	bne.n	80065e0 <HAL_UART_Transmit_IT+0x80>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <HAL_UART_Transmit_IT+0xb0>)
 80065dc:	669a      	str	r2, [r3, #104]	; 0x68
 80065de:	e002      	b.n	80065e6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <HAL_UART_Transmit_IT+0xb4>)
 80065e4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	08007671 	.word	0x08007671
 8006614:	080075fd 	.word	0x080075fd

08006618 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800662a:	2b20      	cmp	r3, #32
 800662c:	d131      	bne.n	8006692 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_UART_Receive_IT+0x22>
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e02a      	b.n	8006694 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_UART_Receive_IT+0x34>
 8006648:	2302      	movs	r3, #2
 800664a:	e023      	b.n	8006694 <HAL_UART_Receive_IT+0x7c>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a0f      	ldr	r2, [pc, #60]	; (800669c <HAL_UART_Receive_IT+0x84>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006680:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	461a      	mov	r2, r3
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 feaf 	bl	80073ec <UART_Start_Receive_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	e000      	b.n	8006694 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40008000 	.word	0x40008000

080066a0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d12d      	bne.n	8006722 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066d4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e2:	4a19      	ldr	r2, [pc, #100]	; (8006748 <HAL_UART_AbortTransmit_IT+0xa8>)
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fa26 	bl	8003b3c <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d022      	beq.n	800673c <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	e01a      	b.n	800673c <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa9a 	bl	8006c54 <HAL_UART_AbortTransmitCpltCallback>
 8006720:	e00c      	b.n	800673c <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa8c 	bl	8006c54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08007587 	.word	0x08007587

0800674c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006762:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0210 	bic.w	r2, r2, #16
 800678a:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d13e      	bne.n	8006818 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d013      	beq.n	80067da <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	4a25      	ldr	r2, [pc, #148]	; (800684c <HAL_UART_AbortReceive_IT+0x100>)
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd f9bc 	bl	8003b3c <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d03a      	beq.n	8006840 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	e032      	b.n	8006840 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	220f      	movs	r2, #15
 80067ee:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	8b1b      	ldrh	r3, [r3, #24]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0208 	orr.w	r2, r2, #8
 8006800:	b292      	uxth	r2, r2
 8006802:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa29 	bl	8006c68 <HAL_UART_AbortReceiveCpltCallback>
 8006816:	e013      	b.n	8006840 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	220f      	movs	r2, #15
 800682c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa14 	bl	8006c68 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	080075b1 	.word	0x080075b1

08006850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	f640 030f 	movw	r3, #2063	; 0x80f
 8006876:	4013      	ands	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 81ce 	beq.w	8006c3a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
      }
      return;
 80068a6:	e1c8      	b.n	8006c3a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80e3 	beq.w	8006a76 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4ba6      	ldr	r3, [pc, #664]	; (8006b58 <HAL_UART_IRQHandler+0x308>)
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80d8 	beq.w	8006a76 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_UART_IRQHandler+0xa2>
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	f043 0201 	orr.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <HAL_UART_IRQHandler+0xce>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2202      	movs	r2, #2
 800690c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006914:	f043 0204 	orr.w	r2, r3, #4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <HAL_UART_IRQHandler+0xfa>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2204      	movs	r2, #4
 8006938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006940:	f043 0202 	orr.w	r2, r3, #2
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006976:	f043 0208 	orr.w	r2, r3, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	2b00      	cmp	r3, #0
 8006988:	d011      	beq.n	80069ae <HAL_UART_IRQHandler+0x15e>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00c      	beq.n	80069ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800699c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a4:	f043 0220 	orr.w	r2, r3, #32
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8142 	beq.w	8006c3e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d004      	beq.n	80069fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d031      	beq.n	8006a62 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fd7c 	bl	80074fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d123      	bne.n	8006a5a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	4a4b      	ldr	r2, [pc, #300]	; (8006b5c <HAL_UART_IRQHandler+0x30c>)
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd f880 	bl	8003b3c <HAL_DMA_Abort_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d017      	beq.n	8006a72 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00f      	b.n	8006a72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fa fbaa 	bl	80011ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00b      	b.n	8006a72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa fba6 	bl	80011ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e007      	b.n	8006a72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa fba2 	bl	80011ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a70:	e0e5      	b.n	8006c3e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a72:	bf00      	nop
    return;
 8006a74:	e0e3      	b.n	8006c3e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	f040 80a9 	bne.w	8006bd2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80a3 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 809d 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d158      	bne.n	8006b60 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80c1 	beq.w	8006c42 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ac6:	893a      	ldrh	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	f080 80ba 	bcs.w	8006c42 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	893a      	ldrh	r2, [r7, #8]
 8006ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d12a      	bne.n	8006b3c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006af4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b14:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0210 	bic.w	r2, r2, #16
 8006b30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fc ffc2 	bl	8003ac0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f893 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b56:	e074      	b.n	8006c42 <HAL_UART_IRQHandler+0x3f2>
 8006b58:	04000120 	.word	0x04000120
 8006b5c:	0800755b 	.word	0x0800755b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d060      	beq.n	8006c46 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b92:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0201 	bic.w	r2, r2, #1
 8006ba2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0210 	bic.w	r2, r2, #16
 8006bc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f856 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006bd0:	e039      	b.n	8006c46 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x3a8>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fe6c 	bl	80078ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf6:	e029      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01a      	beq.n	8006c4a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
    }
    return;
 8006c1c:	e015      	b.n	8006c4a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d011      	beq.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fd5a 	bl	80076ec <UART_EndTransmit_IT>
    return;
 8006c38:	e008      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c3a:	bf00      	nop
 8006c3c:	e006      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006c3e:	bf00      	nop
 8006c40:	e004      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c42:	bf00      	nop
 8006c44:	e002      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006c4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <HAL_UART_EnableReceiverTimeout+0x6c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d024      	beq.n	8006cf0 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d11e      	bne.n	8006cec <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_EnableReceiverTimeout+0x28>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e01a      	b.n	8006cf2 <HAL_UART_EnableReceiverTimeout+0x5e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2224      	movs	r2, #36	; 0x24
 8006cc8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006cd8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e002      	b.n	8006cf2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
 8006cee:	e000      	b.n	8006cf2 <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
  }
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40008000 	.word	0x40008000

08006d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d04:	b5b0      	push	{r4, r5, r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4baf      	ldr	r3, [pc, #700]	; (8006fec <UART_SetConfig+0x2e8>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	69f9      	ldr	r1, [r7, #28]
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4aa4      	ldr	r2, [pc, #656]	; (8006ff0 <UART_SetConfig+0x2ec>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a9b      	ldr	r2, [pc, #620]	; (8006ff4 <UART_SetConfig+0x2f0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d121      	bne.n	8006dce <UART_SetConfig+0xca>
 8006d8a:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <UART_SetConfig+0x2f4>)
 8006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d817      	bhi.n	8006dc8 <UART_SetConfig+0xc4>
 8006d98:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x9c>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006db7 	.word	0x08006db7
 8006dac:	08006dc3 	.word	0x08006dc3
 8006db0:	2301      	movs	r3, #1
 8006db2:	76fb      	strb	r3, [r7, #27]
 8006db4:	e070      	b.n	8006e98 <UART_SetConfig+0x194>
 8006db6:	2302      	movs	r3, #2
 8006db8:	76fb      	strb	r3, [r7, #27]
 8006dba:	e06d      	b.n	8006e98 <UART_SetConfig+0x194>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	76fb      	strb	r3, [r7, #27]
 8006dc0:	e06a      	b.n	8006e98 <UART_SetConfig+0x194>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	76fb      	strb	r3, [r7, #27]
 8006dc6:	e067      	b.n	8006e98 <UART_SetConfig+0x194>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	76fb      	strb	r3, [r7, #27]
 8006dcc:	e064      	b.n	8006e98 <UART_SetConfig+0x194>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a8a      	ldr	r2, [pc, #552]	; (8006ffc <UART_SetConfig+0x2f8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d132      	bne.n	8006e3e <UART_SetConfig+0x13a>
 8006dd8:	4b87      	ldr	r3, [pc, #540]	; (8006ff8 <UART_SetConfig+0x2f4>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d828      	bhi.n	8006e38 <UART_SetConfig+0x134>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0xe8>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e27 	.word	0x08006e27
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e33 	.word	0x08006e33
 8006e20:	2300      	movs	r3, #0
 8006e22:	76fb      	strb	r3, [r7, #27]
 8006e24:	e038      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e26:	2302      	movs	r3, #2
 8006e28:	76fb      	strb	r3, [r7, #27]
 8006e2a:	e035      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	76fb      	strb	r3, [r7, #27]
 8006e30:	e032      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e32:	2308      	movs	r3, #8
 8006e34:	76fb      	strb	r3, [r7, #27]
 8006e36:	e02f      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	76fb      	strb	r3, [r7, #27]
 8006e3c:	e02c      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6b      	ldr	r2, [pc, #428]	; (8006ff0 <UART_SetConfig+0x2ec>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d125      	bne.n	8006e94 <UART_SetConfig+0x190>
 8006e48:	4b6b      	ldr	r3, [pc, #428]	; (8006ff8 <UART_SetConfig+0x2f4>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e56:	d017      	beq.n	8006e88 <UART_SetConfig+0x184>
 8006e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e5c:	d817      	bhi.n	8006e8e <UART_SetConfig+0x18a>
 8006e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e62:	d00b      	beq.n	8006e7c <UART_SetConfig+0x178>
 8006e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e68:	d811      	bhi.n	8006e8e <UART_SetConfig+0x18a>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <UART_SetConfig+0x172>
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e72:	d006      	beq.n	8006e82 <UART_SetConfig+0x17e>
 8006e74:	e00b      	b.n	8006e8e <UART_SetConfig+0x18a>
 8006e76:	2300      	movs	r3, #0
 8006e78:	76fb      	strb	r3, [r7, #27]
 8006e7a:	e00d      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	76fb      	strb	r3, [r7, #27]
 8006e80:	e00a      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e82:	2304      	movs	r3, #4
 8006e84:	76fb      	strb	r3, [r7, #27]
 8006e86:	e007      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	76fb      	strb	r3, [r7, #27]
 8006e8c:	e004      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	76fb      	strb	r3, [r7, #27]
 8006e92:	e001      	b.n	8006e98 <UART_SetConfig+0x194>
 8006e94:	2310      	movs	r3, #16
 8006e96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a54      	ldr	r2, [pc, #336]	; (8006ff0 <UART_SetConfig+0x2ec>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d173      	bne.n	8006f8a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ea2:	7efb      	ldrb	r3, [r7, #27]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d824      	bhi.n	8006ef2 <UART_SetConfig+0x1ee>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x1ac>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ef3 	.word	0x08006ef3
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006ee3 	.word	0x08006ee3
 8006ec4:	08006ef3 	.word	0x08006ef3
 8006ec8:	08006ef3 	.word	0x08006ef3
 8006ecc:	08006ef3 	.word	0x08006ef3
 8006ed0:	08006eeb 	.word	0x08006eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed4:	f7fd fff4 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 8006ed8:	6178      	str	r0, [r7, #20]
        break;
 8006eda:	e00f      	b.n	8006efc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006edc:	4b48      	ldr	r3, [pc, #288]	; (8007000 <UART_SetConfig+0x2fc>)
 8006ede:	617b      	str	r3, [r7, #20]
        break;
 8006ee0:	e00c      	b.n	8006efc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fd ff55 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8006ee6:	6178      	str	r0, [r7, #20]
        break;
 8006ee8:	e008      	b.n	8006efc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	617b      	str	r3, [r7, #20]
        break;
 8006ef0:	e004      	b.n	8006efc <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	76bb      	strb	r3, [r7, #26]
        break;
 8006efa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80fe 	beq.w	8007100 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d305      	bcc.n	8006f20 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d902      	bls.n	8006f26 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	76bb      	strb	r3, [r7, #26]
 8006f24:	e0ec      	b.n	8007100 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	020b      	lsls	r3, r1, #8
 8006f38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f3c:	0202      	lsls	r2, r0, #8
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	6849      	ldr	r1, [r1, #4]
 8006f42:	0849      	lsrs	r1, r1, #1
 8006f44:	4608      	mov	r0, r1
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	1814      	adds	r4, r2, r0
 8006f4c:	eb43 0501 	adc.w	r5, r3, r1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	461a      	mov	r2, r3
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f987 	bl	8000270 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4613      	mov	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f70:	d308      	bcc.n	8006f84 <UART_SetConfig+0x280>
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f78:	d204      	bcs.n	8006f84 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e0bd      	b.n	8007100 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	76bb      	strb	r3, [r7, #26]
 8006f88:	e0ba      	b.n	8007100 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f92:	d168      	bne.n	8007066 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006f94:	7efb      	ldrb	r3, [r7, #27]
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d834      	bhi.n	8007004 <UART_SetConfig+0x300>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x29c>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	08007005 	.word	0x08007005
 8006fb0:	08006fdb 	.word	0x08006fdb
 8006fb4:	08007005 	.word	0x08007005
 8006fb8:	08007005 	.word	0x08007005
 8006fbc:	08007005 	.word	0x08007005
 8006fc0:	08006fe3 	.word	0x08006fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fd ff7c 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 8006fc8:	6178      	str	r0, [r7, #20]
        break;
 8006fca:	e020      	b.n	800700e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fcc:	f7fd ff8e 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8006fd0:	6178      	str	r0, [r7, #20]
        break;
 8006fd2:	e01c      	b.n	800700e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <UART_SetConfig+0x2fc>)
 8006fd6:	617b      	str	r3, [r7, #20]
        break;
 8006fd8:	e019      	b.n	800700e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fda:	f7fd fed9 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8006fde:	6178      	str	r0, [r7, #20]
        break;
 8006fe0:	e015      	b.n	800700e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe6:	617b      	str	r3, [r7, #20]
        break;
 8006fe8:	e011      	b.n	800700e <UART_SetConfig+0x30a>
 8006fea:	bf00      	nop
 8006fec:	efff69f3 	.word	0xefff69f3
 8006ff0:	40008000 	.word	0x40008000
 8006ff4:	40013800 	.word	0x40013800
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	40004400 	.word	0x40004400
 8007000:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	76bb      	strb	r3, [r7, #26]
        break;
 800700c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d075      	beq.n	8007100 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	005a      	lsls	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	441a      	add	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	b29b      	uxth	r3, r3
 800702a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d916      	bls.n	8007060 <UART_SetConfig+0x35c>
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d212      	bcs.n	8007060 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f023 030f 	bic.w	r3, r3, #15
 8007042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	b29a      	uxth	r2, r3
 8007050:	89fb      	ldrh	r3, [r7, #14]
 8007052:	4313      	orrs	r3, r2
 8007054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	89fa      	ldrh	r2, [r7, #14]
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	e04f      	b.n	8007100 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	76bb      	strb	r3, [r7, #26]
 8007064:	e04c      	b.n	8007100 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007066:	7efb      	ldrb	r3, [r7, #27]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d828      	bhi.n	80070be <UART_SetConfig+0x3ba>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0x370>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007099 	.word	0x08007099
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070a9 	.word	0x080070a9
 8007080:	080070bf 	.word	0x080070bf
 8007084:	080070af 	.word	0x080070af
 8007088:	080070bf 	.word	0x080070bf
 800708c:	080070bf 	.word	0x080070bf
 8007090:	080070bf 	.word	0x080070bf
 8007094:	080070b7 	.word	0x080070b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fd ff12 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 800709c:	6178      	str	r0, [r7, #20]
        break;
 800709e:	e013      	b.n	80070c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a0:	f7fd ff24 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80070a4:	6178      	str	r0, [r7, #20]
        break;
 80070a6:	e00f      	b.n	80070c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <UART_SetConfig+0x414>)
 80070aa:	617b      	str	r3, [r7, #20]
        break;
 80070ac:	e00c      	b.n	80070c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ae:	f7fd fe6f 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 80070b2:	6178      	str	r0, [r7, #20]
        break;
 80070b4:	e008      	b.n	80070c8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ba:	617b      	str	r3, [r7, #20]
        break;
 80070bc:	e004      	b.n	80070c8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	76bb      	strb	r3, [r7, #26]
        break;
 80070c6:	bf00      	nop
    }

    if (pclk != 0U)
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	085a      	lsrs	r2, r3, #1
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b0f      	cmp	r3, #15
 80070e8:	d908      	bls.n	80070fc <UART_SetConfig+0x3f8>
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f0:	d204      	bcs.n	80070fc <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	e001      	b.n	8007100 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800710c:	7ebb      	ldrb	r3, [r7, #26]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bdb0      	pop	{r4, r5, r7, pc}
 8007116:	bf00      	nop
 8007118:	00f42400 	.word	0x00f42400

0800711c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01a      	beq.n	8007232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d10a      	bne.n	8007232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
  }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af02      	add	r7, sp, #8
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007270:	f7fb fc2e 	bl	8002ad0 <HAL_GetTick>
 8007274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b08      	cmp	r3, #8
 8007282:	d10e      	bne.n	80072a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f82d 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e023      	b.n	80072ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d10e      	bne.n	80072ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f817 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e00d      	b.n	80072ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007302:	e05e      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d05a      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730c:	f7fb fbe0 	bl	8002ad0 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <UART_WaitOnFlagUntilTimeout+0x30>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11b      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007330:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e043      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02c      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007376:	d124      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007380:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007390:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e00f      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4013      	ands	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d091      	beq.n	8007304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d10e      	bne.n	800743e <UART_Start_Receive_IT+0x52>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <UART_Start_Receive_IT+0x48>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800742e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007432:	e02d      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	22ff      	movs	r2, #255	; 0xff
 8007438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800743c:	e028      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <UART_Start_Receive_IT+0x76>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <UART_Start_Receive_IT+0x6c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007456:	e01b      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	227f      	movs	r2, #127	; 0x7f
 800745c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007460:	e016      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800746a:	d10d      	bne.n	8007488 <UART_Start_Receive_IT+0x9c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <UART_Start_Receive_IT+0x92>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	227f      	movs	r2, #127	; 0x7f
 8007478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800747c:	e008      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	223f      	movs	r2, #63	; 0x3f
 8007482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007486:	e003      	b.n	8007490 <UART_Start_Receive_IT+0xa4>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2222      	movs	r2, #34	; 0x22
 800749c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	d107      	bne.n	80074c8 <UART_Start_Receive_IT+0xdc>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4a0c      	ldr	r2, [pc, #48]	; (80074f4 <UART_Start_Receive_IT+0x108>)
 80074c4:	665a      	str	r2, [r3, #100]	; 0x64
 80074c6:	e002      	b.n	80074ce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a0b      	ldr	r2, [pc, #44]	; (80074f8 <UART_Start_Receive_IT+0x10c>)
 80074cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80074e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	080077f7 	.word	0x080077f7
 80074f8:	0800771f 	.word	0x0800771f

080074fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007512:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007528:	2b01      	cmp	r3, #1
 800752a:	d107      	bne.n	800753c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0210 	bic.w	r2, r2, #16
 800753a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7f9 fe17 	bl	80011ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fb56 	bl	8006c54 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	220f      	movs	r2, #15
 80075cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	8b1b      	ldrh	r3, [r3, #24]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	b292      	uxth	r2, r2
 80075e0:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fb3a 	bl	8006c68 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007608:	2b21      	cmp	r3, #33	; 0x21
 800760a:	d12b      	bne.n	8007664 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d110      	bne.n	800763a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007626:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007636:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007638:	e014      	b.n	8007664 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	b292      	uxth	r2, r2
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800767c:	2b21      	cmp	r3, #33	; 0x21
 800767e:	d12f      	bne.n	80076e0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d110      	bne.n	80076ae <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076aa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80076ac:	e018      	b.n	80076e0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c0:	b292      	uxth	r2, r2
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c8:	1c9a      	adds	r2, r3, #2
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007702:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7f9 fd2b 	bl	800116c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800772c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007732:	2b22      	cmp	r3, #34	; 0x22
 8007734:	d151      	bne.n	80077da <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800773c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800773e:	89bb      	ldrh	r3, [r7, #12]
 8007740:	b2d9      	uxtb	r1, r3
 8007742:	89fb      	ldrh	r3, [r7, #14]
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	400a      	ands	r2, r1
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d13a      	bne.n	80077ee <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007786:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10f      	bne.n	80077cc <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0210 	bic.w	r2, r2, #16
 80077ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff fa59 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
 80077ca:	e002      	b.n	80077d2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7f9 fcdd 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077d8:	e009      	b.n	80077ee <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	8b1b      	ldrh	r3, [r3, #24]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0208 	orr.w	r2, r2, #8
 80077ea:	b292      	uxth	r2, r2
 80077ec:	831a      	strh	r2, [r3, #24]
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007804:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780a:	2b22      	cmp	r3, #34	; 0x22
 800780c:	d151      	bne.n	80078b2 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007814:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800781c:	89ba      	ldrh	r2, [r7, #12]
 800781e:	89fb      	ldrh	r3, [r7, #14]
 8007820:	4013      	ands	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d13a      	bne.n	80078c6 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800785e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10f      	bne.n	80078a4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0210 	bic.w	r2, r2, #16
 8007892:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff f9ed 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
 80078a2:	e002      	b.n	80078aa <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7f9 fc71 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b0:	e009      	b.n	80078c6 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	8b1b      	ldrh	r3, [r3, #24]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0208 	orr.w	r2, r2, #8
 80078c2:	b292      	uxth	r2, r2
 80078c4:	831a      	strh	r2, [r3, #24]
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2000000c 	.word	0x2000000c

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	; (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	; (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	; (8007934 <__libc_init_array+0x44>)
 8007904:	f000 fc62 	bl	80081cc <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	080088fc 	.word	0x080088fc
 800792c:	080088fc 	.word	0x080088fc
 8007930:	080088fc 	.word	0x080088fc
 8007934:	08008900 	.word	0x08008900

08007938 <memcpy>:
 8007938:	440a      	add	r2, r1
 800793a:	4291      	cmp	r1, r2
 800793c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007940:	d100      	bne.n	8007944 <memcpy+0xc>
 8007942:	4770      	bx	lr
 8007944:	b510      	push	{r4, lr}
 8007946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794e:	4291      	cmp	r1, r2
 8007950:	d1f9      	bne.n	8007946 <memcpy+0xe>
 8007952:	bd10      	pop	{r4, pc}

08007954 <memset>:
 8007954:	4402      	add	r2, r0
 8007956:	4603      	mov	r3, r0
 8007958:	4293      	cmp	r3, r2
 800795a:	d100      	bne.n	800795e <memset+0xa>
 800795c:	4770      	bx	lr
 800795e:	f803 1b01 	strb.w	r1, [r3], #1
 8007962:	e7f9      	b.n	8007958 <memset+0x4>

08007964 <sniprintf>:
 8007964:	b40c      	push	{r2, r3}
 8007966:	b530      	push	{r4, r5, lr}
 8007968:	4b17      	ldr	r3, [pc, #92]	; (80079c8 <sniprintf+0x64>)
 800796a:	1e0c      	subs	r4, r1, #0
 800796c:	681d      	ldr	r5, [r3, #0]
 800796e:	b09d      	sub	sp, #116	; 0x74
 8007970:	da08      	bge.n	8007984 <sniprintf+0x20>
 8007972:	238b      	movs	r3, #139	; 0x8b
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	f04f 30ff 	mov.w	r0, #4294967295
 800797a:	b01d      	add	sp, #116	; 0x74
 800797c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007980:	b002      	add	sp, #8
 8007982:	4770      	bx	lr
 8007984:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007988:	f8ad 3014 	strh.w	r3, [sp, #20]
 800798c:	bf14      	ite	ne
 800798e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007992:	4623      	moveq	r3, r4
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800799c:	9002      	str	r0, [sp, #8]
 800799e:	9006      	str	r0, [sp, #24]
 80079a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079a6:	ab21      	add	r3, sp, #132	; 0x84
 80079a8:	a902      	add	r1, sp, #8
 80079aa:	4628      	mov	r0, r5
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	f000 f869 	bl	8007a84 <_svfiprintf_r>
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	bfbc      	itt	lt
 80079b6:	238b      	movlt	r3, #139	; 0x8b
 80079b8:	602b      	strlt	r3, [r5, #0]
 80079ba:	2c00      	cmp	r4, #0
 80079bc:	d0dd      	beq.n	800797a <sniprintf+0x16>
 80079be:	9b02      	ldr	r3, [sp, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	e7d9      	b.n	800797a <sniprintf+0x16>
 80079c6:	bf00      	nop
 80079c8:	2000000c 	.word	0x2000000c

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	429e      	cmp	r6, r3
 80079d4:	4682      	mov	sl, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4690      	mov	r8, r2
 80079da:	461f      	mov	r7, r3
 80079dc:	d838      	bhi.n	8007a50 <__ssputs_r+0x84>
 80079de:	898a      	ldrh	r2, [r1, #12]
 80079e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079e4:	d032      	beq.n	8007a4c <__ssputs_r+0x80>
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	6909      	ldr	r1, [r1, #16]
 80079ea:	eba5 0901 	sub.w	r9, r5, r1
 80079ee:	6965      	ldr	r5, [r4, #20]
 80079f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079f8:	3301      	adds	r3, #1
 80079fa:	444b      	add	r3, r9
 80079fc:	106d      	asrs	r5, r5, #1
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf38      	it	cc
 8007a02:	461d      	movcc	r5, r3
 8007a04:	0553      	lsls	r3, r2, #21
 8007a06:	d531      	bpl.n	8007a6c <__ssputs_r+0xa0>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f000 fb39 	bl	8008080 <_malloc_r>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	b950      	cbnz	r0, 8007a28 <__ssputs_r+0x5c>
 8007a12:	230c      	movs	r3, #12
 8007a14:	f8ca 3000 	str.w	r3, [sl]
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	6921      	ldr	r1, [r4, #16]
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	f7ff ff84 	bl	8007938 <memcpy>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	6126      	str	r6, [r4, #16]
 8007a3e:	6165      	str	r5, [r4, #20]
 8007a40:	444e      	add	r6, r9
 8007a42:	eba5 0509 	sub.w	r5, r5, r9
 8007a46:	6026      	str	r6, [r4, #0]
 8007a48:	60a5      	str	r5, [r4, #8]
 8007a4a:	463e      	mov	r6, r7
 8007a4c:	42be      	cmp	r6, r7
 8007a4e:	d900      	bls.n	8007a52 <__ssputs_r+0x86>
 8007a50:	463e      	mov	r6, r7
 8007a52:	4632      	mov	r2, r6
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	4641      	mov	r1, r8
 8007a58:	f000 faa8 	bl	8007fac <memmove>
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	1b9b      	subs	r3, r3, r6
 8007a62:	4432      	add	r2, r6
 8007a64:	60a3      	str	r3, [r4, #8]
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7db      	b.n	8007a24 <__ssputs_r+0x58>
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	f000 fb61 	bl	8008134 <_realloc_r>
 8007a72:	4606      	mov	r6, r0
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1e1      	bne.n	8007a3c <__ssputs_r+0x70>
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	f000 fab0 	bl	8007fe0 <_free_r>
 8007a80:	e7c7      	b.n	8007a12 <__ssputs_r+0x46>
	...

08007a84 <_svfiprintf_r>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4698      	mov	r8, r3
 8007a8a:	898b      	ldrh	r3, [r1, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	b09d      	sub	sp, #116	; 0x74
 8007a90:	4607      	mov	r7, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	d50e      	bpl.n	8007ab6 <_svfiprintf_r+0x32>
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b963      	cbnz	r3, 8007ab6 <_svfiprintf_r+0x32>
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	f000 faef 	bl	8008080 <_malloc_r>
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	b920      	cbnz	r0, 8007ab2 <_svfiprintf_r+0x2e>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e0d1      	b.n	8007c56 <_svfiprintf_r+0x1d2>
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	616b      	str	r3, [r5, #20]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	2320      	movs	r3, #32
 8007abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac4:	2330      	movs	r3, #48	; 0x30
 8007ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c70 <_svfiprintf_r+0x1ec>
 8007aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ace:	f04f 0901 	mov.w	r9, #1
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	469a      	mov	sl, r3
 8007ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ada:	b10a      	cbz	r2, 8007ae0 <_svfiprintf_r+0x5c>
 8007adc:	2a25      	cmp	r2, #37	; 0x25
 8007ade:	d1f9      	bne.n	8007ad4 <_svfiprintf_r+0x50>
 8007ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae4:	d00b      	beq.n	8007afe <_svfiprintf_r+0x7a>
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	4622      	mov	r2, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff ff6d 	bl	80079cc <__ssputs_r>
 8007af2:	3001      	adds	r0, #1
 8007af4:	f000 80aa 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afa:	445a      	add	r2, fp
 8007afc:	9209      	str	r2, [sp, #36]	; 0x24
 8007afe:	f89a 3000 	ldrb.w	r3, [sl]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80a2 	beq.w	8007c4c <_svfiprintf_r+0x1c8>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b12:	f10a 0a01 	add.w	sl, sl, #1
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b20:	4654      	mov	r4, sl
 8007b22:	2205      	movs	r2, #5
 8007b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b28:	4851      	ldr	r0, [pc, #324]	; (8007c70 <_svfiprintf_r+0x1ec>)
 8007b2a:	f7f8 fb51 	bl	80001d0 <memchr>
 8007b2e:	9a04      	ldr	r2, [sp, #16]
 8007b30:	b9d8      	cbnz	r0, 8007b6a <_svfiprintf_r+0xe6>
 8007b32:	06d0      	lsls	r0, r2, #27
 8007b34:	bf44      	itt	mi
 8007b36:	2320      	movmi	r3, #32
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3c:	0711      	lsls	r1, r2, #28
 8007b3e:	bf44      	itt	mi
 8007b40:	232b      	movmi	r3, #43	; 0x2b
 8007b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b46:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4c:	d015      	beq.n	8007b7a <_svfiprintf_r+0xf6>
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	4654      	mov	r4, sl
 8007b52:	2000      	movs	r0, #0
 8007b54:	f04f 0c0a 	mov.w	ip, #10
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5e:	3b30      	subs	r3, #48	; 0x30
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	d94e      	bls.n	8007c02 <_svfiprintf_r+0x17e>
 8007b64:	b1b0      	cbz	r0, 8007b94 <_svfiprintf_r+0x110>
 8007b66:	9207      	str	r2, [sp, #28]
 8007b68:	e014      	b.n	8007b94 <_svfiprintf_r+0x110>
 8007b6a:	eba0 0308 	sub.w	r3, r0, r8
 8007b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	46a2      	mov	sl, r4
 8007b78:	e7d2      	b.n	8007b20 <_svfiprintf_r+0x9c>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	1d19      	adds	r1, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	9103      	str	r1, [sp, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfbb      	ittet	lt
 8007b86:	425b      	neglt	r3, r3
 8007b88:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8c:	9307      	strge	r3, [sp, #28]
 8007b8e:	9307      	strlt	r3, [sp, #28]
 8007b90:	bfb8      	it	lt
 8007b92:	9204      	strlt	r2, [sp, #16]
 8007b94:	7823      	ldrb	r3, [r4, #0]
 8007b96:	2b2e      	cmp	r3, #46	; 0x2e
 8007b98:	d10c      	bne.n	8007bb4 <_svfiprintf_r+0x130>
 8007b9a:	7863      	ldrb	r3, [r4, #1]
 8007b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9e:	d135      	bne.n	8007c0c <_svfiprintf_r+0x188>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9203      	str	r2, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfb8      	it	lt
 8007bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bb0:	3402      	adds	r4, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c80 <_svfiprintf_r+0x1fc>
 8007bb8:	7821      	ldrb	r1, [r4, #0]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7f8 fb07 	bl	80001d0 <memchr>
 8007bc2:	b140      	cbz	r0, 8007bd6 <_svfiprintf_r+0x152>
 8007bc4:	2340      	movs	r3, #64	; 0x40
 8007bc6:	eba0 000a 	sub.w	r0, r0, sl
 8007bca:	fa03 f000 	lsl.w	r0, r3, r0
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	4303      	orrs	r3, r0
 8007bd2:	3401      	adds	r4, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4826      	ldr	r0, [pc, #152]	; (8007c74 <_svfiprintf_r+0x1f0>)
 8007bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be0:	2206      	movs	r2, #6
 8007be2:	f7f8 faf5 	bl	80001d0 <memchr>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d038      	beq.n	8007c5c <_svfiprintf_r+0x1d8>
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <_svfiprintf_r+0x1f4>)
 8007bec:	bb1b      	cbnz	r3, 8007c36 <_svfiprintf_r+0x1b2>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	4433      	add	r3, r6
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	e767      	b.n	8007ad2 <_svfiprintf_r+0x4e>
 8007c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7a5      	b.n	8007b58 <_svfiprintf_r+0xd4>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	3401      	adds	r4, #1
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	4619      	mov	r1, r3
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1e:	3a30      	subs	r2, #48	; 0x30
 8007c20:	2a09      	cmp	r2, #9
 8007c22:	d903      	bls.n	8007c2c <_svfiprintf_r+0x1a8>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0c5      	beq.n	8007bb4 <_svfiprintf_r+0x130>
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	e7c3      	b.n	8007bb4 <_svfiprintf_r+0x130>
 8007c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c30:	4604      	mov	r4, r0
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f0      	b.n	8007c18 <_svfiprintf_r+0x194>
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c3e:	a904      	add	r1, sp, #16
 8007c40:	4638      	mov	r0, r7
 8007c42:	f3af 8000 	nop.w
 8007c46:	1c42      	adds	r2, r0, #1
 8007c48:	4606      	mov	r6, r0
 8007c4a:	d1d6      	bne.n	8007bfa <_svfiprintf_r+0x176>
 8007c4c:	89ab      	ldrh	r3, [r5, #12]
 8007c4e:	065b      	lsls	r3, r3, #25
 8007c50:	f53f af2c 	bmi.w	8007aac <_svfiprintf_r+0x28>
 8007c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c56:	b01d      	add	sp, #116	; 0x74
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <_svfiprintf_r+0x1f8>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4638      	mov	r0, r7
 8007c68:	f000 f87a 	bl	8007d60 <_printf_i>
 8007c6c:	e7eb      	b.n	8007c46 <_svfiprintf_r+0x1c2>
 8007c6e:	bf00      	nop
 8007c70:	080088c0 	.word	0x080088c0
 8007c74:	080088ca 	.word	0x080088ca
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	080079cd 	.word	0x080079cd
 8007c80:	080088c6 	.word	0x080088c6

08007c84 <_printf_common>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	4616      	mov	r6, r2
 8007c8a:	4699      	mov	r9, r3
 8007c8c:	688a      	ldr	r2, [r1, #8]
 8007c8e:	690b      	ldr	r3, [r1, #16]
 8007c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	bfb8      	it	lt
 8007c98:	4613      	movlt	r3, r2
 8007c9a:	6033      	str	r3, [r6, #0]
 8007c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b10a      	cbz	r2, 8007caa <_printf_common+0x26>
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	6033      	str	r3, [r6, #0]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	0699      	lsls	r1, r3, #26
 8007cae:	bf42      	ittt	mi
 8007cb0:	6833      	ldrmi	r3, [r6, #0]
 8007cb2:	3302      	addmi	r3, #2
 8007cb4:	6033      	strmi	r3, [r6, #0]
 8007cb6:	6825      	ldr	r5, [r4, #0]
 8007cb8:	f015 0506 	ands.w	r5, r5, #6
 8007cbc:	d106      	bne.n	8007ccc <_printf_common+0x48>
 8007cbe:	f104 0a19 	add.w	sl, r4, #25
 8007cc2:	68e3      	ldr	r3, [r4, #12]
 8007cc4:	6832      	ldr	r2, [r6, #0]
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	dc26      	bgt.n	8007d1a <_printf_common+0x96>
 8007ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cd0:	1e13      	subs	r3, r2, #0
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2301      	movne	r3, #1
 8007cd8:	0692      	lsls	r2, r2, #26
 8007cda:	d42b      	bmi.n	8007d34 <_printf_common+0xb0>
 8007cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d01e      	beq.n	8007d28 <_printf_common+0xa4>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	68e5      	ldr	r5, [r4, #12]
 8007cee:	6832      	ldr	r2, [r6, #0]
 8007cf0:	f003 0306 	and.w	r3, r3, #6
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	bf08      	it	eq
 8007cf8:	1aad      	subeq	r5, r5, r2
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	6922      	ldr	r2, [r4, #16]
 8007cfe:	bf0c      	ite	eq
 8007d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d04:	2500      	movne	r5, #0
 8007d06:	4293      	cmp	r3, r2
 8007d08:	bfc4      	itt	gt
 8007d0a:	1a9b      	subgt	r3, r3, r2
 8007d0c:	18ed      	addgt	r5, r5, r3
 8007d0e:	2600      	movs	r6, #0
 8007d10:	341a      	adds	r4, #26
 8007d12:	42b5      	cmp	r5, r6
 8007d14:	d11a      	bne.n	8007d4c <_printf_common+0xc8>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e008      	b.n	8007d2c <_printf_common+0xa8>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4652      	mov	r2, sl
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4638      	mov	r0, r7
 8007d22:	47c0      	blx	r8
 8007d24:	3001      	adds	r0, #1
 8007d26:	d103      	bne.n	8007d30 <_printf_common+0xac>
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d30:	3501      	adds	r5, #1
 8007d32:	e7c6      	b.n	8007cc2 <_printf_common+0x3e>
 8007d34:	18e1      	adds	r1, r4, r3
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	2030      	movs	r0, #48	; 0x30
 8007d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d3e:	4422      	add	r2, r4
 8007d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d48:	3302      	adds	r3, #2
 8007d4a:	e7c7      	b.n	8007cdc <_printf_common+0x58>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	4622      	mov	r2, r4
 8007d50:	4649      	mov	r1, r9
 8007d52:	4638      	mov	r0, r7
 8007d54:	47c0      	blx	r8
 8007d56:	3001      	adds	r0, #1
 8007d58:	d0e6      	beq.n	8007d28 <_printf_common+0xa4>
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7d9      	b.n	8007d12 <_printf_common+0x8e>
	...

08007d60 <_printf_i>:
 8007d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	4691      	mov	r9, r2
 8007d68:	7e27      	ldrb	r7, [r4, #24]
 8007d6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d6c:	2f78      	cmp	r7, #120	; 0x78
 8007d6e:	4680      	mov	r8, r0
 8007d70:	469a      	mov	sl, r3
 8007d72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d76:	d807      	bhi.n	8007d88 <_printf_i+0x28>
 8007d78:	2f62      	cmp	r7, #98	; 0x62
 8007d7a:	d80a      	bhi.n	8007d92 <_printf_i+0x32>
 8007d7c:	2f00      	cmp	r7, #0
 8007d7e:	f000 80d8 	beq.w	8007f32 <_printf_i+0x1d2>
 8007d82:	2f58      	cmp	r7, #88	; 0x58
 8007d84:	f000 80a3 	beq.w	8007ece <_printf_i+0x16e>
 8007d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d90:	e03a      	b.n	8007e08 <_printf_i+0xa8>
 8007d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d96:	2b15      	cmp	r3, #21
 8007d98:	d8f6      	bhi.n	8007d88 <_printf_i+0x28>
 8007d9a:	a001      	add	r0, pc, #4	; (adr r0, 8007da0 <_printf_i+0x40>)
 8007d9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007da0:	08007df9 	.word	0x08007df9
 8007da4:	08007e0d 	.word	0x08007e0d
 8007da8:	08007d89 	.word	0x08007d89
 8007dac:	08007d89 	.word	0x08007d89
 8007db0:	08007d89 	.word	0x08007d89
 8007db4:	08007d89 	.word	0x08007d89
 8007db8:	08007e0d 	.word	0x08007e0d
 8007dbc:	08007d89 	.word	0x08007d89
 8007dc0:	08007d89 	.word	0x08007d89
 8007dc4:	08007d89 	.word	0x08007d89
 8007dc8:	08007d89 	.word	0x08007d89
 8007dcc:	08007f19 	.word	0x08007f19
 8007dd0:	08007e3d 	.word	0x08007e3d
 8007dd4:	08007efb 	.word	0x08007efb
 8007dd8:	08007d89 	.word	0x08007d89
 8007ddc:	08007d89 	.word	0x08007d89
 8007de0:	08007f3b 	.word	0x08007f3b
 8007de4:	08007d89 	.word	0x08007d89
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007d89 	.word	0x08007d89
 8007df0:	08007d89 	.word	0x08007d89
 8007df4:	08007f03 	.word	0x08007f03
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	1d1a      	adds	r2, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	600a      	str	r2, [r1, #0]
 8007e00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0a3      	b.n	8007f54 <_printf_i+0x1f4>
 8007e0c:	6825      	ldr	r5, [r4, #0]
 8007e0e:	6808      	ldr	r0, [r1, #0]
 8007e10:	062e      	lsls	r6, r5, #24
 8007e12:	f100 0304 	add.w	r3, r0, #4
 8007e16:	d50a      	bpl.n	8007e2e <_printf_i+0xce>
 8007e18:	6805      	ldr	r5, [r0, #0]
 8007e1a:	600b      	str	r3, [r1, #0]
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	da03      	bge.n	8007e28 <_printf_i+0xc8>
 8007e20:	232d      	movs	r3, #45	; 0x2d
 8007e22:	426d      	negs	r5, r5
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e28:	485e      	ldr	r0, [pc, #376]	; (8007fa4 <_printf_i+0x244>)
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e019      	b.n	8007e62 <_printf_i+0x102>
 8007e2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e32:	6805      	ldr	r5, [r0, #0]
 8007e34:	600b      	str	r3, [r1, #0]
 8007e36:	bf18      	it	ne
 8007e38:	b22d      	sxthne	r5, r5
 8007e3a:	e7ef      	b.n	8007e1c <_printf_i+0xbc>
 8007e3c:	680b      	ldr	r3, [r1, #0]
 8007e3e:	6825      	ldr	r5, [r4, #0]
 8007e40:	1d18      	adds	r0, r3, #4
 8007e42:	6008      	str	r0, [r1, #0]
 8007e44:	0628      	lsls	r0, r5, #24
 8007e46:	d501      	bpl.n	8007e4c <_printf_i+0xec>
 8007e48:	681d      	ldr	r5, [r3, #0]
 8007e4a:	e002      	b.n	8007e52 <_printf_i+0xf2>
 8007e4c:	0669      	lsls	r1, r5, #25
 8007e4e:	d5fb      	bpl.n	8007e48 <_printf_i+0xe8>
 8007e50:	881d      	ldrh	r5, [r3, #0]
 8007e52:	4854      	ldr	r0, [pc, #336]	; (8007fa4 <_printf_i+0x244>)
 8007e54:	2f6f      	cmp	r7, #111	; 0x6f
 8007e56:	bf0c      	ite	eq
 8007e58:	2308      	moveq	r3, #8
 8007e5a:	230a      	movne	r3, #10
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e62:	6866      	ldr	r6, [r4, #4]
 8007e64:	60a6      	str	r6, [r4, #8]
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	bfa2      	ittt	ge
 8007e6a:	6821      	ldrge	r1, [r4, #0]
 8007e6c:	f021 0104 	bicge.w	r1, r1, #4
 8007e70:	6021      	strge	r1, [r4, #0]
 8007e72:	b90d      	cbnz	r5, 8007e78 <_printf_i+0x118>
 8007e74:	2e00      	cmp	r6, #0
 8007e76:	d04d      	beq.n	8007f14 <_printf_i+0x1b4>
 8007e78:	4616      	mov	r6, r2
 8007e7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e7e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e82:	5dc7      	ldrb	r7, [r0, r7]
 8007e84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e88:	462f      	mov	r7, r5
 8007e8a:	42bb      	cmp	r3, r7
 8007e8c:	460d      	mov	r5, r1
 8007e8e:	d9f4      	bls.n	8007e7a <_printf_i+0x11a>
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d10b      	bne.n	8007eac <_printf_i+0x14c>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	07df      	lsls	r7, r3, #31
 8007e98:	d508      	bpl.n	8007eac <_printf_i+0x14c>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	6861      	ldr	r1, [r4, #4]
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	bfde      	ittt	le
 8007ea2:	2330      	movle	r3, #48	; 0x30
 8007ea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eac:	1b92      	subs	r2, r2, r6
 8007eae:	6122      	str	r2, [r4, #16]
 8007eb0:	f8cd a000 	str.w	sl, [sp]
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	aa03      	add	r2, sp, #12
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4640      	mov	r0, r8
 8007ebc:	f7ff fee2 	bl	8007c84 <_printf_common>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d14c      	bne.n	8007f5e <_printf_i+0x1fe>
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	b004      	add	sp, #16
 8007eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ece:	4835      	ldr	r0, [pc, #212]	; (8007fa4 <_printf_i+0x244>)
 8007ed0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	680e      	ldr	r6, [r1, #0]
 8007ed8:	061f      	lsls	r7, r3, #24
 8007eda:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ede:	600e      	str	r6, [r1, #0]
 8007ee0:	d514      	bpl.n	8007f0c <_printf_i+0x1ac>
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	bf44      	itt	mi
 8007ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eea:	6023      	strmi	r3, [r4, #0]
 8007eec:	b91d      	cbnz	r5, 8007ef6 <_printf_i+0x196>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	f023 0320 	bic.w	r3, r3, #32
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	e7b0      	b.n	8007e5c <_printf_i+0xfc>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	f043 0320 	orr.w	r3, r3, #32
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	2378      	movs	r3, #120	; 0x78
 8007f04:	4828      	ldr	r0, [pc, #160]	; (8007fa8 <_printf_i+0x248>)
 8007f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f0a:	e7e3      	b.n	8007ed4 <_printf_i+0x174>
 8007f0c:	065e      	lsls	r6, r3, #25
 8007f0e:	bf48      	it	mi
 8007f10:	b2ad      	uxthmi	r5, r5
 8007f12:	e7e6      	b.n	8007ee2 <_printf_i+0x182>
 8007f14:	4616      	mov	r6, r2
 8007f16:	e7bb      	b.n	8007e90 <_printf_i+0x130>
 8007f18:	680b      	ldr	r3, [r1, #0]
 8007f1a:	6826      	ldr	r6, [r4, #0]
 8007f1c:	6960      	ldr	r0, [r4, #20]
 8007f1e:	1d1d      	adds	r5, r3, #4
 8007f20:	600d      	str	r5, [r1, #0]
 8007f22:	0635      	lsls	r5, r6, #24
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	d501      	bpl.n	8007f2c <_printf_i+0x1cc>
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	e002      	b.n	8007f32 <_printf_i+0x1d2>
 8007f2c:	0671      	lsls	r1, r6, #25
 8007f2e:	d5fb      	bpl.n	8007f28 <_printf_i+0x1c8>
 8007f30:	8018      	strh	r0, [r3, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	4616      	mov	r6, r2
 8007f38:	e7ba      	b.n	8007eb0 <_printf_i+0x150>
 8007f3a:	680b      	ldr	r3, [r1, #0]
 8007f3c:	1d1a      	adds	r2, r3, #4
 8007f3e:	600a      	str	r2, [r1, #0]
 8007f40:	681e      	ldr	r6, [r3, #0]
 8007f42:	6862      	ldr	r2, [r4, #4]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7f8 f942 	bl	80001d0 <memchr>
 8007f4c:	b108      	cbz	r0, 8007f52 <_printf_i+0x1f2>
 8007f4e:	1b80      	subs	r0, r0, r6
 8007f50:	6060      	str	r0, [r4, #4]
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	2300      	movs	r3, #0
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	e7a8      	b.n	8007eb0 <_printf_i+0x150>
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	4632      	mov	r2, r6
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	47d0      	blx	sl
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d0ab      	beq.n	8007ec4 <_printf_i+0x164>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	079b      	lsls	r3, r3, #30
 8007f70:	d413      	bmi.n	8007f9a <_printf_i+0x23a>
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	4298      	cmp	r0, r3
 8007f78:	bfb8      	it	lt
 8007f7a:	4618      	movlt	r0, r3
 8007f7c:	e7a4      	b.n	8007ec8 <_printf_i+0x168>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4632      	mov	r2, r6
 8007f82:	4649      	mov	r1, r9
 8007f84:	4640      	mov	r0, r8
 8007f86:	47d0      	blx	sl
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d09b      	beq.n	8007ec4 <_printf_i+0x164>
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	9903      	ldr	r1, [sp, #12]
 8007f92:	1a5b      	subs	r3, r3, r1
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	dcf2      	bgt.n	8007f7e <_printf_i+0x21e>
 8007f98:	e7eb      	b.n	8007f72 <_printf_i+0x212>
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	f104 0619 	add.w	r6, r4, #25
 8007fa0:	e7f5      	b.n	8007f8e <_printf_i+0x22e>
 8007fa2:	bf00      	nop
 8007fa4:	080088d1 	.word	0x080088d1
 8007fa8:	080088e2 	.word	0x080088e2

08007fac <memmove>:
 8007fac:	4288      	cmp	r0, r1
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	eb01 0402 	add.w	r4, r1, r2
 8007fb4:	d902      	bls.n	8007fbc <memmove+0x10>
 8007fb6:	4284      	cmp	r4, r0
 8007fb8:	4623      	mov	r3, r4
 8007fba:	d807      	bhi.n	8007fcc <memmove+0x20>
 8007fbc:	1e43      	subs	r3, r0, #1
 8007fbe:	42a1      	cmp	r1, r4
 8007fc0:	d008      	beq.n	8007fd4 <memmove+0x28>
 8007fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fca:	e7f8      	b.n	8007fbe <memmove+0x12>
 8007fcc:	4402      	add	r2, r0
 8007fce:	4601      	mov	r1, r0
 8007fd0:	428a      	cmp	r2, r1
 8007fd2:	d100      	bne.n	8007fd6 <memmove+0x2a>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fde:	e7f7      	b.n	8007fd0 <memmove+0x24>

08007fe0 <_free_r>:
 8007fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d048      	beq.n	8008078 <_free_r+0x98>
 8007fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fea:	9001      	str	r0, [sp, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f1a1 0404 	sub.w	r4, r1, #4
 8007ff2:	bfb8      	it	lt
 8007ff4:	18e4      	addlt	r4, r4, r3
 8007ff6:	f000 f8d3 	bl	80081a0 <__malloc_lock>
 8007ffa:	4a20      	ldr	r2, [pc, #128]	; (800807c <_free_r+0x9c>)
 8007ffc:	9801      	ldr	r0, [sp, #4]
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	4615      	mov	r5, r2
 8008002:	b933      	cbnz	r3, 8008012 <_free_r+0x32>
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6014      	str	r4, [r2, #0]
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800800e:	f000 b8cd 	b.w	80081ac <__malloc_unlock>
 8008012:	42a3      	cmp	r3, r4
 8008014:	d90b      	bls.n	800802e <_free_r+0x4e>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	1862      	adds	r2, r4, r1
 800801a:	4293      	cmp	r3, r2
 800801c:	bf04      	itt	eq
 800801e:	681a      	ldreq	r2, [r3, #0]
 8008020:	685b      	ldreq	r3, [r3, #4]
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	bf04      	itt	eq
 8008026:	1852      	addeq	r2, r2, r1
 8008028:	6022      	streq	r2, [r4, #0]
 800802a:	602c      	str	r4, [r5, #0]
 800802c:	e7ec      	b.n	8008008 <_free_r+0x28>
 800802e:	461a      	mov	r2, r3
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	b10b      	cbz	r3, 8008038 <_free_r+0x58>
 8008034:	42a3      	cmp	r3, r4
 8008036:	d9fa      	bls.n	800802e <_free_r+0x4e>
 8008038:	6811      	ldr	r1, [r2, #0]
 800803a:	1855      	adds	r5, r2, r1
 800803c:	42a5      	cmp	r5, r4
 800803e:	d10b      	bne.n	8008058 <_free_r+0x78>
 8008040:	6824      	ldr	r4, [r4, #0]
 8008042:	4421      	add	r1, r4
 8008044:	1854      	adds	r4, r2, r1
 8008046:	42a3      	cmp	r3, r4
 8008048:	6011      	str	r1, [r2, #0]
 800804a:	d1dd      	bne.n	8008008 <_free_r+0x28>
 800804c:	681c      	ldr	r4, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	6053      	str	r3, [r2, #4]
 8008052:	4421      	add	r1, r4
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	e7d7      	b.n	8008008 <_free_r+0x28>
 8008058:	d902      	bls.n	8008060 <_free_r+0x80>
 800805a:	230c      	movs	r3, #12
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	e7d3      	b.n	8008008 <_free_r+0x28>
 8008060:	6825      	ldr	r5, [r4, #0]
 8008062:	1961      	adds	r1, r4, r5
 8008064:	428b      	cmp	r3, r1
 8008066:	bf04      	itt	eq
 8008068:	6819      	ldreq	r1, [r3, #0]
 800806a:	685b      	ldreq	r3, [r3, #4]
 800806c:	6063      	str	r3, [r4, #4]
 800806e:	bf04      	itt	eq
 8008070:	1949      	addeq	r1, r1, r5
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	6054      	str	r4, [r2, #4]
 8008076:	e7c7      	b.n	8008008 <_free_r+0x28>
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	200002e4 	.word	0x200002e4

08008080 <_malloc_r>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	1ccd      	adds	r5, r1, #3
 8008084:	f025 0503 	bic.w	r5, r5, #3
 8008088:	3508      	adds	r5, #8
 800808a:	2d0c      	cmp	r5, #12
 800808c:	bf38      	it	cc
 800808e:	250c      	movcc	r5, #12
 8008090:	2d00      	cmp	r5, #0
 8008092:	4606      	mov	r6, r0
 8008094:	db01      	blt.n	800809a <_malloc_r+0x1a>
 8008096:	42a9      	cmp	r1, r5
 8008098:	d903      	bls.n	80080a2 <_malloc_r+0x22>
 800809a:	230c      	movs	r3, #12
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	2000      	movs	r0, #0
 80080a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a2:	f000 f87d 	bl	80081a0 <__malloc_lock>
 80080a6:	4921      	ldr	r1, [pc, #132]	; (800812c <_malloc_r+0xac>)
 80080a8:	680a      	ldr	r2, [r1, #0]
 80080aa:	4614      	mov	r4, r2
 80080ac:	b99c      	cbnz	r4, 80080d6 <_malloc_r+0x56>
 80080ae:	4f20      	ldr	r7, [pc, #128]	; (8008130 <_malloc_r+0xb0>)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	b923      	cbnz	r3, 80080be <_malloc_r+0x3e>
 80080b4:	4621      	mov	r1, r4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 f862 	bl	8008180 <_sbrk_r>
 80080bc:	6038      	str	r0, [r7, #0]
 80080be:	4629      	mov	r1, r5
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f85d 	bl	8008180 <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d123      	bne.n	8008112 <_malloc_r+0x92>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6033      	str	r3, [r6, #0]
 80080ce:	4630      	mov	r0, r6
 80080d0:	f000 f86c 	bl	80081ac <__malloc_unlock>
 80080d4:	e7e3      	b.n	800809e <_malloc_r+0x1e>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	1b5b      	subs	r3, r3, r5
 80080da:	d417      	bmi.n	800810c <_malloc_r+0x8c>
 80080dc:	2b0b      	cmp	r3, #11
 80080de:	d903      	bls.n	80080e8 <_malloc_r+0x68>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	441c      	add	r4, r3
 80080e4:	6025      	str	r5, [r4, #0]
 80080e6:	e004      	b.n	80080f2 <_malloc_r+0x72>
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	42a2      	cmp	r2, r4
 80080ec:	bf0c      	ite	eq
 80080ee:	600b      	streq	r3, [r1, #0]
 80080f0:	6053      	strne	r3, [r2, #4]
 80080f2:	4630      	mov	r0, r6
 80080f4:	f000 f85a 	bl	80081ac <__malloc_unlock>
 80080f8:	f104 000b 	add.w	r0, r4, #11
 80080fc:	1d23      	adds	r3, r4, #4
 80080fe:	f020 0007 	bic.w	r0, r0, #7
 8008102:	1ac2      	subs	r2, r0, r3
 8008104:	d0cc      	beq.n	80080a0 <_malloc_r+0x20>
 8008106:	1a1b      	subs	r3, r3, r0
 8008108:	50a3      	str	r3, [r4, r2]
 800810a:	e7c9      	b.n	80080a0 <_malloc_r+0x20>
 800810c:	4622      	mov	r2, r4
 800810e:	6864      	ldr	r4, [r4, #4]
 8008110:	e7cc      	b.n	80080ac <_malloc_r+0x2c>
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d0e3      	beq.n	80080e4 <_malloc_r+0x64>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f000 f82e 	bl	8008180 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d1dd      	bne.n	80080e4 <_malloc_r+0x64>
 8008128:	e7cf      	b.n	80080ca <_malloc_r+0x4a>
 800812a:	bf00      	nop
 800812c:	200002e4 	.word	0x200002e4
 8008130:	200002e8 	.word	0x200002e8

08008134 <_realloc_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	4607      	mov	r7, r0
 8008138:	4614      	mov	r4, r2
 800813a:	460e      	mov	r6, r1
 800813c:	b921      	cbnz	r1, 8008148 <_realloc_r+0x14>
 800813e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008142:	4611      	mov	r1, r2
 8008144:	f7ff bf9c 	b.w	8008080 <_malloc_r>
 8008148:	b922      	cbnz	r2, 8008154 <_realloc_r+0x20>
 800814a:	f7ff ff49 	bl	8007fe0 <_free_r>
 800814e:	4625      	mov	r5, r4
 8008150:	4628      	mov	r0, r5
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	f000 f830 	bl	80081b8 <_malloc_usable_size_r>
 8008158:	42a0      	cmp	r0, r4
 800815a:	d20f      	bcs.n	800817c <_realloc_r+0x48>
 800815c:	4621      	mov	r1, r4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff8e 	bl	8008080 <_malloc_r>
 8008164:	4605      	mov	r5, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d0f2      	beq.n	8008150 <_realloc_r+0x1c>
 800816a:	4631      	mov	r1, r6
 800816c:	4622      	mov	r2, r4
 800816e:	f7ff fbe3 	bl	8007938 <memcpy>
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff33 	bl	8007fe0 <_free_r>
 800817a:	e7e9      	b.n	8008150 <_realloc_r+0x1c>
 800817c:	4635      	mov	r5, r6
 800817e:	e7e7      	b.n	8008150 <_realloc_r+0x1c>

08008180 <_sbrk_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	; (800819c <_sbrk_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7f8 feca 	bl	8000f24 <_sbrk>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_sbrk_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_sbrk_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	200005c8 	.word	0x200005c8

080081a0 <__malloc_lock>:
 80081a0:	4801      	ldr	r0, [pc, #4]	; (80081a8 <__malloc_lock+0x8>)
 80081a2:	f000 b811 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 80081a6:	bf00      	nop
 80081a8:	200005d0 	.word	0x200005d0

080081ac <__malloc_unlock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_unlock+0x8>)
 80081ae:	f000 b80c 	b.w	80081ca <__retarget_lock_release_recursive>
 80081b2:	bf00      	nop
 80081b4:	200005d0 	.word	0x200005d0

080081b8 <_malloc_usable_size_r>:
 80081b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081bc:	1f18      	subs	r0, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfbc      	itt	lt
 80081c2:	580b      	ldrlt	r3, [r1, r0]
 80081c4:	18c0      	addlt	r0, r0, r3
 80081c6:	4770      	bx	lr

080081c8 <__retarget_lock_acquire_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_release_recursive>:
 80081ca:	4770      	bx	lr

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
